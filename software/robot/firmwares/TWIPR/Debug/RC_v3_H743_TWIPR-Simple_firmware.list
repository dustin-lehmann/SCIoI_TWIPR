
RC_v3_H743_TWIPR-Simple_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020220  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a3c  080204c0  080204c0  000304c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020efc  08020efc  00030efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000018  08020f04  08020f04  00030f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08020f1c  08020f1c  00030f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000230  24000000  08020f20  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001dcc8  24000230  08021150  00040230  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2401def8  08021150  0004def8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00040230  2**0
                  CONTENTS, READONLY
 10 .ramd2block   00000000  30000000  30000000  0004025e  2**0
                  CONTENTS
 11 .debug_info   00079a33  00000000  00000000  0004025e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000b051  00000000  00000000  000b9c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003398  00000000  00000000  000c4ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000030a8  00000000  00000000  000c8080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000100b9  00000000  00000000  000cb128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00045dbd  00000000  00000000  000db1e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00189102  00000000  00000000  00120f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  002aa0a0  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000edf8  00000000  00000000  002aa0f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000230 	.word	0x24000230
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080204a8 	.word	0x080204a8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000234 	.word	0x24000234
 80002dc:	080204a8 	.word	0x080204a8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f001 fa8e 	bl	8001bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f834 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f000 fb2e 	bl	8000d00 <MX_GPIO_Init>
  MX_DMA_Init();
 80006a4:	f000 fa86 	bl	8000bb4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006a8:	f000 f9ea 	bl	8000a80 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80006ac:	f000 f8f6 	bl	800089c <MX_SPI2_Init>
  MX_UART8_Init();
 80006b0:	f000 f998 	bl	80009e4 <MX_UART8_Init>
  MX_USART2_UART_Init();
 80006b4:	f000 fa30 	bl	8000b18 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80006b8:	f000 f946 	bl	8000948 <MX_TIM2_Init>
  MX_SPI1_Init();
 80006bc:	f000 f89e 	bl	80007fc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006c0:	f00d fbd0 	bl	800de64 <osKernelInitialize>
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer02 */
  myTimer02Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer02_attributes);
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <main+0x5c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	2101      	movs	r1, #1
 80006ca:	480a      	ldr	r0, [pc, #40]	; (80006f4 <main+0x60>)
 80006cc:	f00d fd46 	bl	800e15c <osTimerNew>
 80006d0:	4603      	mov	r3, r0
 80006d2:	4a09      	ldr	r2, [pc, #36]	; (80006f8 <main+0x64>)
 80006d4:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	firmware();
 80006d6:	f017 ffc9 	bl	801866c <firmware>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006da:	4a08      	ldr	r2, [pc, #32]	; (80006fc <main+0x68>)
 80006dc:	2100      	movs	r1, #0
 80006de:	4808      	ldr	r0, [pc, #32]	; (8000700 <main+0x6c>)
 80006e0:	f00d fc41 	bl	800df66 <osThreadNew>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a07      	ldr	r2, [pc, #28]	; (8000704 <main+0x70>)
 80006e8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006ea:	f00d fc01 	bl	800def0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80006ee:	e7fe      	b.n	80006ee <main+0x5a>
 80006f0:	080205d8 	.word	0x080205d8
 80006f4:	08000ee7 	.word	0x08000ee7
 80006f8:	24000aa0 	.word	0x24000aa0
 80006fc:	080205b4 	.word	0x080205b4
 8000700:	08000ed5 	.word	0x08000ed5
 8000704:	24000a9c 	.word	0x24000a9c

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b09c      	sub	sp, #112	; 0x70
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000712:	224c      	movs	r2, #76	; 0x4c
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f01d faf1 	bl	801dcfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2220      	movs	r2, #32
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f01d faeb 	bl	801dcfe <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000728:	2002      	movs	r0, #2
 800072a:	f004 fc69 	bl	8005000 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b30      	ldr	r3, [pc, #192]	; (80007f4 <SystemClock_Config+0xec>)
 8000734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000736:	4a2f      	ldr	r2, [pc, #188]	; (80007f4 <SystemClock_Config+0xec>)
 8000738:	f023 0301 	bic.w	r3, r3, #1
 800073c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800073e:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <SystemClock_Config+0xec>)
 8000740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <SystemClock_Config+0xf0>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	4a2a      	ldr	r2, [pc, #168]	; (80007f8 <SystemClock_Config+0xf0>)
 800074e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b28      	ldr	r3, [pc, #160]	; (80007f8 <SystemClock_Config+0xf0>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000760:	bf00      	nop
 8000762:	4b25      	ldr	r3, [pc, #148]	; (80007f8 <SystemClock_Config+0xf0>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800076a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800076e:	d1f8      	bne.n	8000762 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000770:	2301      	movs	r3, #1
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077a:	2302      	movs	r3, #2
 800077c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077e:	2302      	movs	r3, #2
 8000780:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000782:	2302      	movs	r3, #2
 8000784:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000786:	2340      	movs	r3, #64	; 0x40
 8000788:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800078a:	2302      	movs	r3, #2
 800078c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800078e:	2304      	movs	r3, #4
 8000790:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000792:	2302      	movs	r3, #2
 8000794:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000796:	230c      	movs	r3, #12
 8000798:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800079a:	2300      	movs	r3, #0
 800079c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a6:	4618      	mov	r0, r3
 80007a8:	f004 fc64 	bl	8005074 <HAL_RCC_OscConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007b2:	f000 fbb5 	bl	8000f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	233f      	movs	r3, #63	; 0x3f
 80007b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ba:	2303      	movs	r3, #3
 80007bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007c2:	2308      	movs	r3, #8
 80007c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007c6:	2340      	movs	r3, #64	; 0x40
 80007c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ca:	2340      	movs	r3, #64	; 0x40
 80007cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007d4:	2340      	movs	r3, #64	; 0x40
 80007d6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2102      	movs	r1, #2
 80007dc:	4618      	mov	r0, r3
 80007de:	f005 f8a3 	bl	8005928 <HAL_RCC_ClockConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80007e8:	f000 fb9a 	bl	8000f20 <Error_Handler>
  }
}
 80007ec:	bf00      	nop
 80007ee:	3770      	adds	r7, #112	; 0x70
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	58000400 	.word	0x58000400
 80007f8:	58024800 	.word	0x58024800

080007fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000800:	4b24      	ldr	r3, [pc, #144]	; (8000894 <MX_SPI1_Init+0x98>)
 8000802:	4a25      	ldr	r2, [pc, #148]	; (8000898 <MX_SPI1_Init+0x9c>)
 8000804:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000806:	4b23      	ldr	r3, [pc, #140]	; (8000894 <MX_SPI1_Init+0x98>)
 8000808:	2200      	movs	r2, #0
 800080a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800080c:	4b21      	ldr	r3, [pc, #132]	; (8000894 <MX_SPI1_Init+0x98>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000812:	4b20      	ldr	r3, [pc, #128]	; (8000894 <MX_SPI1_Init+0x98>)
 8000814:	2207      	movs	r2, #7
 8000816:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000818:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <MX_SPI1_Init+0x98>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800081e:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <MX_SPI1_Init+0x98>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <MX_SPI1_Init+0x98>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <MX_SPI1_Init+0x98>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000830:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_SPI1_Init+0x98>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000836:	4b17      	ldr	r3, [pc, #92]	; (8000894 <MX_SPI1_Init+0x98>)
 8000838:	2200      	movs	r2, #0
 800083a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_SPI1_Init+0x98>)
 800083e:	2200      	movs	r2, #0
 8000840:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_SPI1_Init+0x98>)
 8000844:	2200      	movs	r2, #0
 8000846:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_SPI1_Init+0x98>)
 800084a:	2200      	movs	r2, #0
 800084c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_SPI1_Init+0x98>)
 8000850:	2200      	movs	r2, #0
 8000852:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_SPI1_Init+0x98>)
 8000856:	2200      	movs	r2, #0
 8000858:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_SPI1_Init+0x98>)
 800085c:	2200      	movs	r2, #0
 800085e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_SPI1_Init+0x98>)
 8000862:	2200      	movs	r2, #0
 8000864:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_SPI1_Init+0x98>)
 8000868:	2200      	movs	r2, #0
 800086a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_SPI1_Init+0x98>)
 800086e:	2200      	movs	r2, #0
 8000870:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <MX_SPI1_Init+0x98>)
 8000874:	2200      	movs	r2, #0
 8000876:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_SPI1_Init+0x98>)
 800087a:	2200      	movs	r2, #0
 800087c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_SPI1_Init+0x98>)
 8000880:	f007 fa4c 	bl	8007d1c <HAL_SPI_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_SPI1_Init+0x92>
  {
    Error_Handler();
 800088a:	f000 fb49 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2400024c 	.word	0x2400024c
 8000898:	40013000 	.word	0x40013000

0800089c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008a0:	4b27      	ldr	r3, [pc, #156]	; (8000940 <MX_SPI2_Init+0xa4>)
 80008a2:	4a28      	ldr	r2, [pc, #160]	; (8000944 <MX_SPI2_Init+0xa8>)
 80008a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008a6:	4b26      	ldr	r3, [pc, #152]	; (8000940 <MX_SPI2_Init+0xa4>)
 80008a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80008ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008ae:	4b24      	ldr	r3, [pc, #144]	; (8000940 <MX_SPI2_Init+0xa4>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b4:	4b22      	ldr	r3, [pc, #136]	; (8000940 <MX_SPI2_Init+0xa4>)
 80008b6:	2207      	movs	r2, #7
 80008b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ba:	4b21      	ldr	r3, [pc, #132]	; (8000940 <MX_SPI2_Init+0xa4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <MX_SPI2_Init+0xa4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008c6:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <MX_SPI2_Init+0xa4>)
 80008c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80008cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <MX_SPI2_Init+0xa4>)
 80008d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008d4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_SPI2_Init+0xa4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_SPI2_Init+0xa4>)
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_SPI2_Init+0xa4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_SPI2_Init+0xa4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_SPI2_Init+0xa4>)
 80008f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008f4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80008f6:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_SPI2_Init+0xa4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80008fc:	4b10      	ldr	r3, [pc, #64]	; (8000940 <MX_SPI2_Init+0xa4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000902:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_SPI2_Init+0xa4>)
 8000904:	2200      	movs	r2, #0
 8000906:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <MX_SPI2_Init+0xa4>)
 800090a:	2200      	movs	r2, #0
 800090c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_SPI2_Init+0xa4>)
 8000910:	2200      	movs	r2, #0
 8000912:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <MX_SPI2_Init+0xa4>)
 8000916:	2200      	movs	r2, #0
 8000918:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_SPI2_Init+0xa4>)
 800091c:	2200      	movs	r2, #0
 800091e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <MX_SPI2_Init+0xa4>)
 8000922:	2200      	movs	r2, #0
 8000924:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_SPI2_Init+0xa4>)
 8000928:	2200      	movs	r2, #0
 800092a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_SPI2_Init+0xa4>)
 800092e:	f007 f9f5 	bl	8007d1c <HAL_SPI_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000938:	f000 faf2 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	24000300 	.word	0x24000300
 8000944:	40003800 	.word	0x40003800

08000948 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094e:	f107 0310 	add.w	r3, r7, #16
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000966:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <MX_TIM2_Init+0x98>)
 8000968:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800096c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <MX_TIM2_Init+0x98>)
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_TIM2_Init+0x98>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <MX_TIM2_Init+0x98>)
 800097c:	f04f 32ff 	mov.w	r2, #4294967295
 8000980:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_TIM2_Init+0x98>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_TIM2_Init+0x98>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800098e:	4814      	ldr	r0, [pc, #80]	; (80009e0 <MX_TIM2_Init+0x98>)
 8000990:	f008 ff33 	bl	80097fa <HAL_TIM_Base_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800099a:	f000 fac1 	bl	8000f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800099e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	4619      	mov	r1, r3
 80009aa:	480d      	ldr	r0, [pc, #52]	; (80009e0 <MX_TIM2_Init+0x98>)
 80009ac:	f009 f914 	bl	8009bd8 <HAL_TIM_ConfigClockSource>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80009b6:	f000 fab3 	bl	8000f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	; (80009e0 <MX_TIM2_Init+0x98>)
 80009c8:	f009 fb5e 	bl	800a088 <HAL_TIMEx_MasterConfigSynchronization>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80009d2:	f000 faa5 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	3720      	adds	r7, #32
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	240004a4 	.word	0x240004a4

080009e4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80009e8:	4b23      	ldr	r3, [pc, #140]	; (8000a78 <MX_UART8_Init+0x94>)
 80009ea:	4a24      	ldr	r2, [pc, #144]	; (8000a7c <MX_UART8_Init+0x98>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80009ee:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <MX_UART8_Init+0x94>)
 80009f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_9B;
 80009f6:	4b20      	ldr	r3, [pc, #128]	; (8000a78 <MX_UART8_Init+0x94>)
 80009f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009fc:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80009fe:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <MX_UART8_Init+0x94>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 8000a04:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <MX_UART8_Init+0x94>)
 8000a06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a0a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_UART8_Init+0x94>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <MX_UART8_Init+0x94>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <MX_UART8_Init+0x94>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <MX_UART8_Init+0x94>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_UART8_Init+0x94>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <MX_UART8_Init+0x94>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000a30:	4811      	ldr	r0, [pc, #68]	; (8000a78 <MX_UART8_Init+0x94>)
 8000a32:	f009 fbd5 	bl	800a1e0 <HAL_UART_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_UART8_Init+0x5c>
  {
    Error_Handler();
 8000a3c:	f000 fa70 	bl	8000f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a40:	2100      	movs	r1, #0
 8000a42:	480d      	ldr	r0, [pc, #52]	; (8000a78 <MX_UART8_Init+0x94>)
 8000a44:	f00d f8ab 	bl	800db9e <HAL_UARTEx_SetTxFifoThreshold>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_UART8_Init+0x6e>
  {
    Error_Handler();
 8000a4e:	f000 fa67 	bl	8000f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a52:	2100      	movs	r1, #0
 8000a54:	4808      	ldr	r0, [pc, #32]	; (8000a78 <MX_UART8_Init+0x94>)
 8000a56:	f00d f8e0 	bl	800dc1a <HAL_UARTEx_SetRxFifoThreshold>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_UART8_Init+0x80>
  {
    Error_Handler();
 8000a60:	f000 fa5e 	bl	8000f20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_UART8_Init+0x94>)
 8000a66:	f00d f861 	bl	800db2c <HAL_UARTEx_DisableFifoMode>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_UART8_Init+0x90>
  {
    Error_Handler();
 8000a70:	f000 fa56 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	240004f0 	.word	0x240004f0
 8000a7c:	40007c00 	.word	0x40007c00

08000a80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a84:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000a86:	4a23      	ldr	r2, [pc, #140]	; (8000b14 <MX_USART1_UART_Init+0x94>)
 8000a88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a8a:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab0:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ac8:	4811      	ldr	r0, [pc, #68]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000aca:	f009 fb89 	bl	800a1e0 <HAL_UART_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ad4:	f000 fa24 	bl	8000f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad8:	2100      	movs	r1, #0
 8000ada:	480d      	ldr	r0, [pc, #52]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000adc:	f00d f85f 	bl	800db9e <HAL_UARTEx_SetTxFifoThreshold>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ae6:	f000 fa1b 	bl	8000f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aea:	2100      	movs	r1, #0
 8000aec:	4808      	ldr	r0, [pc, #32]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000aee:	f00d f894 	bl	800dc1a <HAL_UARTEx_SetRxFifoThreshold>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000af8:	f000 fa12 	bl	8000f20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_USART1_UART_Init+0x90>)
 8000afe:	f00d f815 	bl	800db2c <HAL_UARTEx_DisableFifoMode>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b08:	f000 fa0a 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	240005bc 	.word	0x240005bc
 8000b14:	40011000 	.word	0x40011000

08000b18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b1c:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b1e:	4a23      	ldr	r2, [pc, #140]	; (8000bac <MX_USART2_UART_Init+0x94>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b24:	4a22      	ldr	r2, [pc, #136]	; (8000bb0 <MX_USART2_UART_Init+0x98>)
 8000b26:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b28:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b34:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b3c:	220c      	movs	r2, #12
 8000b3e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b40:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b46:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b5e:	4812      	ldr	r0, [pc, #72]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b60:	f009 fb3e 	bl	800a1e0 <HAL_UART_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000b6a:	f000 f9d9 	bl	8000f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b6e:	2100      	movs	r1, #0
 8000b70:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b72:	f00d f814 	bl	800db9e <HAL_UARTEx_SetTxFifoThreshold>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8000b7c:	f000 f9d0 	bl	8000f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b80:	2100      	movs	r1, #0
 8000b82:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b84:	f00d f849 	bl	800dc1a <HAL_UARTEx_SetRxFifoThreshold>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8000b8e:	f000 f9c7 	bl	8000f20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_USART2_UART_Init+0x90>)
 8000b94:	f00c ffca 	bl	800db2c <HAL_UARTEx_DisableFifoMode>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8000b9e:	f000 f9bf 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	24000688 	.word	0x24000688
 8000bac:	40004400 	.word	0x40004400
 8000bb0:	000f4240 	.word	0x000f4240

08000bb4 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bba:	4b4e      	ldr	r3, [pc, #312]	; (8000cf4 <MX_DMA_Init+0x140>)
 8000bbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bc0:	4a4c      	ldr	r2, [pc, #304]	; (8000cf4 <MX_DMA_Init+0x140>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bca:	4b4a      	ldr	r3, [pc, #296]	; (8000cf4 <MX_DMA_Init+0x140>)
 8000bcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bd8:	4b46      	ldr	r3, [pc, #280]	; (8000cf4 <MX_DMA_Init+0x140>)
 8000bda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bde:	4a45      	ldr	r2, [pc, #276]	; (8000cf4 <MX_DMA_Init+0x140>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000be8:	4b42      	ldr	r3, [pc, #264]	; (8000cf4 <MX_DMA_Init+0x140>)
 8000bea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000bf6:	4b40      	ldr	r3, [pc, #256]	; (8000cf8 <MX_DMA_Init+0x144>)
 8000bf8:	4a40      	ldr	r2, [pc, #256]	; (8000cfc <MX_DMA_Init+0x148>)
 8000bfa:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
 8000bfc:	4b3e      	ldr	r3, [pc, #248]	; (8000cf8 <MX_DMA_Init+0x144>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000c02:	4b3d      	ldr	r3, [pc, #244]	; (8000cf8 <MX_DMA_Init+0x144>)
 8000c04:	2280      	movs	r2, #128	; 0x80
 8000c06:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000c08:	4b3b      	ldr	r3, [pc, #236]	; (8000cf8 <MX_DMA_Init+0x144>)
 8000c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c0e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000c10:	4b39      	ldr	r3, [pc, #228]	; (8000cf8 <MX_DMA_Init+0x144>)
 8000c12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c16:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c18:	4b37      	ldr	r3, [pc, #220]	; (8000cf8 <MX_DMA_Init+0x144>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c1e:	4b36      	ldr	r3, [pc, #216]	; (8000cf8 <MX_DMA_Init+0x144>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000c24:	4b34      	ldr	r3, [pc, #208]	; (8000cf8 <MX_DMA_Init+0x144>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c2a:	4b33      	ldr	r3, [pc, #204]	; (8000cf8 <MX_DMA_Init+0x144>)
 8000c2c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c30:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c32:	4b31      	ldr	r3, [pc, #196]	; (8000cf8 <MX_DMA_Init+0x144>)
 8000c34:	2204      	movs	r2, #4
 8000c36:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c38:	4b2f      	ldr	r3, [pc, #188]	; (8000cf8 <MX_DMA_Init+0x144>)
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000c3e:	4b2e      	ldr	r3, [pc, #184]	; (8000cf8 <MX_DMA_Init+0x144>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000c44:	4b2c      	ldr	r3, [pc, #176]	; (8000cf8 <MX_DMA_Init+0x144>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000c4a:	482b      	ldr	r0, [pc, #172]	; (8000cf8 <MX_DMA_Init+0x144>)
 8000c4c:	f001 f920 	bl	8001e90 <HAL_DMA_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_DMA_Init+0xa6>
  {
    Error_Handler( );
 8000c56:	f000 f963 	bl	8000f20 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2105      	movs	r1, #5
 8000c5e:	200b      	movs	r0, #11
 8000c60:	f001 f8ee 	bl	8001e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c64:	200b      	movs	r0, #11
 8000c66:	f001 f905 	bl	8001e74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2105      	movs	r1, #5
 8000c6e:	200c      	movs	r0, #12
 8000c70:	f001 f8e6 	bl	8001e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c74:	200c      	movs	r0, #12
 8000c76:	f001 f8fd 	bl	8001e74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2105      	movs	r1, #5
 8000c7e:	200d      	movs	r0, #13
 8000c80:	f001 f8de 	bl	8001e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000c84:	200d      	movs	r0, #13
 8000c86:	f001 f8f5 	bl	8001e74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2105      	movs	r1, #5
 8000c8e:	200e      	movs	r0, #14
 8000c90:	f001 f8d6 	bl	8001e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000c94:	200e      	movs	r0, #14
 8000c96:	f001 f8ed 	bl	8001e74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2105      	movs	r1, #5
 8000c9e:	200f      	movs	r0, #15
 8000ca0:	f001 f8ce 	bl	8001e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000ca4:	200f      	movs	r0, #15
 8000ca6:	f001 f8e5 	bl	8001e74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2105      	movs	r1, #5
 8000cae:	2010      	movs	r0, #16
 8000cb0:	f001 f8c6 	bl	8001e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000cb4:	2010      	movs	r0, #16
 8000cb6:	f001 f8dd 	bl	8001e74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2011      	movs	r0, #17
 8000cc0:	f001 f8be 	bl	8001e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000cc4:	2011      	movs	r0, #17
 8000cc6:	f001 f8d5 	bl	8001e74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2105      	movs	r1, #5
 8000cce:	202f      	movs	r0, #47	; 0x2f
 8000cd0:	f001 f8b6 	bl	8001e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000cd4:	202f      	movs	r0, #47	; 0x2f
 8000cd6:	f001 f8cd 	bl	8001e74 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2105      	movs	r1, #5
 8000cde:	2038      	movs	r0, #56	; 0x38
 8000ce0:	f001 f8ae 	bl	8001e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ce4:	2038      	movs	r0, #56	; 0x38
 8000ce6:	f001 f8c5 	bl	8001e74 <HAL_NVIC_EnableIRQ>

}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	58024400 	.word	0x58024400
 8000cf8:	24000a24 	.word	0x24000a24
 8000cfc:	40020410 	.word	0x40020410

08000d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d16:	4b6b      	ldr	r3, [pc, #428]	; (8000ec4 <MX_GPIO_Init+0x1c4>)
 8000d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1c:	4a69      	ldr	r2, [pc, #420]	; (8000ec4 <MX_GPIO_Init+0x1c4>)
 8000d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d26:	4b67      	ldr	r3, [pc, #412]	; (8000ec4 <MX_GPIO_Init+0x1c4>)
 8000d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d34:	4b63      	ldr	r3, [pc, #396]	; (8000ec4 <MX_GPIO_Init+0x1c4>)
 8000d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3a:	4a62      	ldr	r2, [pc, #392]	; (8000ec4 <MX_GPIO_Init+0x1c4>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d44:	4b5f      	ldr	r3, [pc, #380]	; (8000ec4 <MX_GPIO_Init+0x1c4>)
 8000d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	4b5c      	ldr	r3, [pc, #368]	; (8000ec4 <MX_GPIO_Init+0x1c4>)
 8000d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d58:	4a5a      	ldr	r2, [pc, #360]	; (8000ec4 <MX_GPIO_Init+0x1c4>)
 8000d5a:	f043 0302 	orr.w	r3, r3, #2
 8000d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d62:	4b58      	ldr	r3, [pc, #352]	; (8000ec4 <MX_GPIO_Init+0x1c4>)
 8000d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d70:	4b54      	ldr	r3, [pc, #336]	; (8000ec4 <MX_GPIO_Init+0x1c4>)
 8000d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d76:	4a53      	ldr	r2, [pc, #332]	; (8000ec4 <MX_GPIO_Init+0x1c4>)
 8000d78:	f043 0310 	orr.w	r3, r3, #16
 8000d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d80:	4b50      	ldr	r3, [pc, #320]	; (8000ec4 <MX_GPIO_Init+0x1c4>)
 8000d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d86:	f003 0310 	and.w	r3, r3, #16
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8e:	4b4d      	ldr	r3, [pc, #308]	; (8000ec4 <MX_GPIO_Init+0x1c4>)
 8000d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d94:	4a4b      	ldr	r2, [pc, #300]	; (8000ec4 <MX_GPIO_Init+0x1c4>)
 8000d96:	f043 0308 	orr.w	r3, r3, #8
 8000d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9e:	4b49      	ldr	r3, [pc, #292]	; (8000ec4 <MX_GPIO_Init+0x1c4>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da4:	f003 0308 	and.w	r3, r3, #8
 8000da8:	603b      	str	r3, [r7, #0]
 8000daa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CM4_GPIO_2_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	f248 4180 	movw	r1, #33920	; 0x8480
 8000db2:	4845      	ldr	r0, [pc, #276]	; (8000ec8 <MX_GPIO_Init+0x1c8>)
 8000db4:	f004 f8d6 	bl	8004f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dbe:	4843      	ldr	r0, [pc, #268]	; (8000ecc <MX_GPIO_Init+0x1cc>)
 8000dc0:	f004 f8d0 	bl	8004f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|LED_ACT_Pin|RS485_EN_Pin, GPIO_PIN_RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
 8000dca:	4841      	ldr	r0, [pc, #260]	; (8000ed0 <MX_GPIO_Init+0x1d0>)
 8000dcc:	f004 f8ca 	bl	8004f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000dd4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	4839      	ldr	r0, [pc, #228]	; (8000ecc <MX_GPIO_Init+0x1cc>)
 8000de6:	f003 fef5 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CM4_GPIO_2_Pin */
  GPIO_InitStruct.Pin = CM4_GPIO_2_Pin;
 8000dea:	2380      	movs	r3, #128	; 0x80
 8000dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000df2:	2302      	movs	r3, #2
 8000df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CM4_GPIO_2_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4831      	ldr	r0, [pc, #196]	; (8000ec8 <MX_GPIO_Init+0x1c8>)
 8000e02:	f003 fee7 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e0c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e12:	2302      	movs	r3, #2
 8000e14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	482a      	ldr	r0, [pc, #168]	; (8000ec8 <MX_GPIO_Init+0x1c8>)
 8000e1e:	f003 fed9 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8000e22:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000e26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4823      	ldr	r0, [pc, #140]	; (8000ec8 <MX_GPIO_Init+0x1c8>)
 8000e3c:	f003 feca 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_IMU_Pin */
  GPIO_InitStruct.Pin = CS_IMU_Pin;
 8000e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_IMU_GPIO_Port, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	481c      	ldr	r0, [pc, #112]	; (8000ecc <MX_GPIO_Init+0x1cc>)
 8000e5a:	f003 febb 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4619      	mov	r1, r3
 8000e76:	4816      	ldr	r0, [pc, #88]	; (8000ed0 <MX_GPIO_Init+0x1d0>)
 8000e78:	f003 feac 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 LED_ACT_Pin RS485_EN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|LED_ACT_Pin|RS485_EN_Pin;
 8000e7c:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000e80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e82:	2301      	movs	r3, #1
 8000e84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	480e      	ldr	r0, [pc, #56]	; (8000ed0 <MX_GPIO_Init+0x1d0>)
 8000e96:	f003 fe9d 	bl	8004bd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2105      	movs	r1, #5
 8000e9e:	2008      	movs	r0, #8
 8000ea0:	f000 ffce 	bl	8001e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000ea4:	2008      	movs	r0, #8
 8000ea6:	f000 ffe5 	bl	8001e74 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2105      	movs	r1, #5
 8000eae:	2017      	movs	r0, #23
 8000eb0:	f000 ffc6 	bl	8001e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000eb4:	2017      	movs	r0, #23
 8000eb6:	f000 ffdd 	bl	8001e74 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eba:	bf00      	nop
 8000ebc:	3728      	adds	r7, #40	; 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	58024400 	.word	0x58024400
 8000ec8:	58021000 	.word	0x58021000
 8000ecc:	58020400 	.word	0x58020400
 8000ed0:	58020c00 	.word	0x58020c00

08000ed4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
//	  firmware_loop();
		osDelay(1000);
 8000edc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee0:	f00d f8de 	bl	800e0a0 <osDelay>
 8000ee4:	e7fa      	b.n	8000edc <StartDefaultTask+0x8>

08000ee6 <Callback01>:
  /* USER CODE END 5 */
}

/* Callback01 function */
void Callback01(void *argument)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */

  /* USER CODE END Callback01 */
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d101      	bne.n	8000f12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f0e:	f000 fe8f 	bl	8001c30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40001000 	.word	0x40001000

08000f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f24:	b672      	cpsid	i
}
 8000f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f28:	e7fe      	b.n	8000f28 <Error_Handler+0x8>
	...

08000f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <HAL_MspInit+0x38>)
 8000f34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f38:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <HAL_MspInit+0x38>)
 8000f3a:	f043 0302 	orr.w	r3, r3, #2
 8000f3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <HAL_MspInit+0x38>)
 8000f44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	210f      	movs	r1, #15
 8000f54:	f06f 0001 	mvn.w	r0, #1
 8000f58:	f000 ff72 	bl	8001e40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	58024400 	.word	0x58024400

08000f68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b0bc      	sub	sp, #240	; 0xf0
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f80:	f107 0318 	add.w	r3, r7, #24
 8000f84:	22c0      	movs	r2, #192	; 0xc0
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f01c feb8 	bl	801dcfe <memset>
  if(hspi->Instance==SPI1)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a7d      	ldr	r2, [pc, #500]	; (8001188 <HAL_SPI_MspInit+0x220>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	f040 80a8 	bne.w	80010ea <HAL_SPI_MspInit+0x182>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000f9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000faa:	f107 0318 	add.w	r3, r7, #24
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f005 f888 	bl	80060c4 <HAL_RCCEx_PeriphCLKConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000fba:	f7ff ffb1 	bl	8000f20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fbe:	4b73      	ldr	r3, [pc, #460]	; (800118c <HAL_SPI_MspInit+0x224>)
 8000fc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fc4:	4a71      	ldr	r2, [pc, #452]	; (800118c <HAL_SPI_MspInit+0x224>)
 8000fc6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000fce:	4b6f      	ldr	r3, [pc, #444]	; (800118c <HAL_SPI_MspInit+0x224>)
 8000fd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	4b6b      	ldr	r3, [pc, #428]	; (800118c <HAL_SPI_MspInit+0x224>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe2:	4a6a      	ldr	r2, [pc, #424]	; (800118c <HAL_SPI_MspInit+0x224>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fec:	4b67      	ldr	r3, [pc, #412]	; (800118c <HAL_SPI_MspInit+0x224>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ffa:	23f0      	movs	r3, #240	; 0xf0
 8000ffc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001012:	2305      	movs	r3, #5
 8001014:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800101c:	4619      	mov	r1, r3
 800101e:	485c      	ldr	r0, [pc, #368]	; (8001190 <HAL_SPI_MspInit+0x228>)
 8001020:	f003 fdd8 	bl	8004bd4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream6;
 8001024:	4b5b      	ldr	r3, [pc, #364]	; (8001194 <HAL_SPI_MspInit+0x22c>)
 8001026:	4a5c      	ldr	r2, [pc, #368]	; (8001198 <HAL_SPI_MspInit+0x230>)
 8001028:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800102a:	4b5a      	ldr	r3, [pc, #360]	; (8001194 <HAL_SPI_MspInit+0x22c>)
 800102c:	2225      	movs	r2, #37	; 0x25
 800102e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001030:	4b58      	ldr	r3, [pc, #352]	; (8001194 <HAL_SPI_MspInit+0x22c>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001036:	4b57      	ldr	r3, [pc, #348]	; (8001194 <HAL_SPI_MspInit+0x22c>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800103c:	4b55      	ldr	r3, [pc, #340]	; (8001194 <HAL_SPI_MspInit+0x22c>)
 800103e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001042:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001044:	4b53      	ldr	r3, [pc, #332]	; (8001194 <HAL_SPI_MspInit+0x22c>)
 8001046:	2200      	movs	r2, #0
 8001048:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800104a:	4b52      	ldr	r3, [pc, #328]	; (8001194 <HAL_SPI_MspInit+0x22c>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001050:	4b50      	ldr	r3, [pc, #320]	; (8001194 <HAL_SPI_MspInit+0x22c>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001056:	4b4f      	ldr	r3, [pc, #316]	; (8001194 <HAL_SPI_MspInit+0x22c>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800105c:	4b4d      	ldr	r3, [pc, #308]	; (8001194 <HAL_SPI_MspInit+0x22c>)
 800105e:	2200      	movs	r2, #0
 8001060:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001062:	484c      	ldr	r0, [pc, #304]	; (8001194 <HAL_SPI_MspInit+0x22c>)
 8001064:	f000 ff14 	bl	8001e90 <HAL_DMA_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 800106e:	f7ff ff57 	bl	8000f20 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a47      	ldr	r2, [pc, #284]	; (8001194 <HAL_SPI_MspInit+0x22c>)
 8001076:	67da      	str	r2, [r3, #124]	; 0x7c
 8001078:	4a46      	ldr	r2, [pc, #280]	; (8001194 <HAL_SPI_MspInit+0x22c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream7;
 800107e:	4b47      	ldr	r3, [pc, #284]	; (800119c <HAL_SPI_MspInit+0x234>)
 8001080:	4a47      	ldr	r2, [pc, #284]	; (80011a0 <HAL_SPI_MspInit+0x238>)
 8001082:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001084:	4b45      	ldr	r3, [pc, #276]	; (800119c <HAL_SPI_MspInit+0x234>)
 8001086:	2226      	movs	r2, #38	; 0x26
 8001088:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800108a:	4b44      	ldr	r3, [pc, #272]	; (800119c <HAL_SPI_MspInit+0x234>)
 800108c:	2240      	movs	r2, #64	; 0x40
 800108e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001090:	4b42      	ldr	r3, [pc, #264]	; (800119c <HAL_SPI_MspInit+0x234>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001096:	4b41      	ldr	r3, [pc, #260]	; (800119c <HAL_SPI_MspInit+0x234>)
 8001098:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800109c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800109e:	4b3f      	ldr	r3, [pc, #252]	; (800119c <HAL_SPI_MspInit+0x234>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010a4:	4b3d      	ldr	r3, [pc, #244]	; (800119c <HAL_SPI_MspInit+0x234>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80010aa:	4b3c      	ldr	r3, [pc, #240]	; (800119c <HAL_SPI_MspInit+0x234>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010b0:	4b3a      	ldr	r3, [pc, #232]	; (800119c <HAL_SPI_MspInit+0x234>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010b6:	4b39      	ldr	r3, [pc, #228]	; (800119c <HAL_SPI_MspInit+0x234>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80010bc:	4837      	ldr	r0, [pc, #220]	; (800119c <HAL_SPI_MspInit+0x234>)
 80010be:	f000 fee7 	bl	8001e90 <HAL_DMA_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 80010c8:	f7ff ff2a 	bl	8000f20 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a33      	ldr	r2, [pc, #204]	; (800119c <HAL_SPI_MspInit+0x234>)
 80010d0:	679a      	str	r2, [r3, #120]	; 0x78
 80010d2:	4a32      	ldr	r2, [pc, #200]	; (800119c <HAL_SPI_MspInit+0x234>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2105      	movs	r1, #5
 80010dc:	2023      	movs	r0, #35	; 0x23
 80010de:	f000 feaf 	bl	8001e40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80010e2:	2023      	movs	r0, #35	; 0x23
 80010e4:	f000 fec6 	bl	8001e74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80010e8:	e04a      	b.n	8001180 <HAL_SPI_MspInit+0x218>
  else if(hspi->Instance==SPI2)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a2d      	ldr	r2, [pc, #180]	; (80011a4 <HAL_SPI_MspInit+0x23c>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d145      	bne.n	8001180 <HAL_SPI_MspInit+0x218>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80010f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010f8:	f04f 0300 	mov.w	r3, #0
 80010fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001100:	2300      	movs	r3, #0
 8001102:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001104:	f107 0318 	add.w	r3, r7, #24
 8001108:	4618      	mov	r0, r3
 800110a:	f004 ffdb 	bl	80060c4 <HAL_RCCEx_PeriphCLKConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <HAL_SPI_MspInit+0x1b0>
      Error_Handler();
 8001114:	f7ff ff04 	bl	8000f20 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <HAL_SPI_MspInit+0x224>)
 800111a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800111e:	4a1b      	ldr	r2, [pc, #108]	; (800118c <HAL_SPI_MspInit+0x224>)
 8001120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001124:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001128:	4b18      	ldr	r3, [pc, #96]	; (800118c <HAL_SPI_MspInit+0x224>)
 800112a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800112e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_SPI_MspInit+0x224>)
 8001138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113c:	4a13      	ldr	r2, [pc, #76]	; (800118c <HAL_SPI_MspInit+0x224>)
 800113e:	f043 0302 	orr.w	r3, r3, #2
 8001142:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <HAL_SPI_MspInit+0x224>)
 8001148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001154:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001158:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800116e:	2305      	movs	r3, #5
 8001170:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001174:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001178:	4619      	mov	r1, r3
 800117a:	480b      	ldr	r0, [pc, #44]	; (80011a8 <HAL_SPI_MspInit+0x240>)
 800117c:	f003 fd2a 	bl	8004bd4 <HAL_GPIO_Init>
}
 8001180:	bf00      	nop
 8001182:	37f0      	adds	r7, #240	; 0xf0
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40013000 	.word	0x40013000
 800118c:	58024400 	.word	0x58024400
 8001190:	58020000 	.word	0x58020000
 8001194:	240003b4 	.word	0x240003b4
 8001198:	400200a0 	.word	0x400200a0
 800119c:	2400042c 	.word	0x2400042c
 80011a0:	400200b8 	.word	0x400200b8
 80011a4:	40003800 	.word	0x40003800
 80011a8:	58020400 	.word	0x58020400

080011ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011bc:	d10e      	bne.n	80011dc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_TIM_Base_MspInit+0x3c>)
 80011c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011c4:	4a08      	ldr	r2, [pc, #32]	; (80011e8 <HAL_TIM_Base_MspInit+0x3c>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_TIM_Base_MspInit+0x3c>)
 80011d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011dc:	bf00      	nop
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	58024400 	.word	0x58024400

080011ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b0be      	sub	sp, #248	; 0xf8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001204:	f107 0320 	add.w	r3, r7, #32
 8001208:	22c0      	movs	r2, #192	; 0xc0
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f01c fd76 	bl	801dcfe <memset>
  if(huart->Instance==UART8)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4aaf      	ldr	r2, [pc, #700]	; (80014d4 <HAL_UART_MspInit+0x2e8>)
 8001218:	4293      	cmp	r3, r2
 800121a:	f040 80aa 	bne.w	8001372 <HAL_UART_MspInit+0x186>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800121e:	f04f 0202 	mov.w	r2, #2
 8001222:	f04f 0300 	mov.w	r3, #0
 8001226:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001230:	f107 0320 	add.w	r3, r7, #32
 8001234:	4618      	mov	r0, r3
 8001236:	f004 ff45 	bl	80060c4 <HAL_RCCEx_PeriphCLKConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001240:	f7ff fe6e 	bl	8000f20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001244:	4ba4      	ldr	r3, [pc, #656]	; (80014d8 <HAL_UART_MspInit+0x2ec>)
 8001246:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800124a:	4aa3      	ldr	r2, [pc, #652]	; (80014d8 <HAL_UART_MspInit+0x2ec>)
 800124c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001250:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001254:	4ba0      	ldr	r3, [pc, #640]	; (80014d8 <HAL_UART_MspInit+0x2ec>)
 8001256:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800125a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001262:	4b9d      	ldr	r3, [pc, #628]	; (80014d8 <HAL_UART_MspInit+0x2ec>)
 8001264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001268:	4a9b      	ldr	r2, [pc, #620]	; (80014d8 <HAL_UART_MspInit+0x2ec>)
 800126a:	f043 0310 	orr.w	r3, r3, #16
 800126e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001272:	4b99      	ldr	r3, [pc, #612]	; (80014d8 <HAL_UART_MspInit+0x2ec>)
 8001274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001278:	f003 0310 	and.w	r3, r3, #16
 800127c:	61bb      	str	r3, [r7, #24]
 800127e:	69bb      	ldr	r3, [r7, #24]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001280:	2303      	movs	r3, #3
 8001282:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001298:	2308      	movs	r3, #8
 800129a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800129e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012a2:	4619      	mov	r1, r3
 80012a4:	488d      	ldr	r0, [pc, #564]	; (80014dc <HAL_UART_MspInit+0x2f0>)
 80012a6:	f003 fc95 	bl	8004bd4 <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream2;
 80012aa:	4b8d      	ldr	r3, [pc, #564]	; (80014e0 <HAL_UART_MspInit+0x2f4>)
 80012ac:	4a8d      	ldr	r2, [pc, #564]	; (80014e4 <HAL_UART_MspInit+0x2f8>)
 80012ae:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 80012b0:	4b8b      	ldr	r3, [pc, #556]	; (80014e0 <HAL_UART_MspInit+0x2f4>)
 80012b2:	2251      	movs	r2, #81	; 0x51
 80012b4:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012b6:	4b8a      	ldr	r3, [pc, #552]	; (80014e0 <HAL_UART_MspInit+0x2f4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012bc:	4b88      	ldr	r3, [pc, #544]	; (80014e0 <HAL_UART_MspInit+0x2f4>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012c2:	4b87      	ldr	r3, [pc, #540]	; (80014e0 <HAL_UART_MspInit+0x2f4>)
 80012c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012c8:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ca:	4b85      	ldr	r3, [pc, #532]	; (80014e0 <HAL_UART_MspInit+0x2f4>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012d0:	4b83      	ldr	r3, [pc, #524]	; (80014e0 <HAL_UART_MspInit+0x2f4>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 80012d6:	4b82      	ldr	r3, [pc, #520]	; (80014e0 <HAL_UART_MspInit+0x2f4>)
 80012d8:	2200      	movs	r2, #0
 80012da:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012dc:	4b80      	ldr	r3, [pc, #512]	; (80014e0 <HAL_UART_MspInit+0x2f4>)
 80012de:	2200      	movs	r2, #0
 80012e0:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012e2:	4b7f      	ldr	r3, [pc, #508]	; (80014e0 <HAL_UART_MspInit+0x2f4>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 80012e8:	487d      	ldr	r0, [pc, #500]	; (80014e0 <HAL_UART_MspInit+0x2f4>)
 80012ea:	f000 fdd1 	bl	8001e90 <HAL_DMA_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80012f4:	f7ff fe14 	bl	8000f20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a79      	ldr	r2, [pc, #484]	; (80014e0 <HAL_UART_MspInit+0x2f4>)
 80012fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001300:	4a77      	ldr	r2, [pc, #476]	; (80014e0 <HAL_UART_MspInit+0x2f4>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART8_TX Init */
    hdma_uart8_tx.Instance = DMA1_Stream3;
 8001306:	4b78      	ldr	r3, [pc, #480]	; (80014e8 <HAL_UART_MspInit+0x2fc>)
 8001308:	4a78      	ldr	r2, [pc, #480]	; (80014ec <HAL_UART_MspInit+0x300>)
 800130a:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 800130c:	4b76      	ldr	r3, [pc, #472]	; (80014e8 <HAL_UART_MspInit+0x2fc>)
 800130e:	2252      	movs	r2, #82	; 0x52
 8001310:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001312:	4b75      	ldr	r3, [pc, #468]	; (80014e8 <HAL_UART_MspInit+0x2fc>)
 8001314:	2240      	movs	r2, #64	; 0x40
 8001316:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001318:	4b73      	ldr	r3, [pc, #460]	; (80014e8 <HAL_UART_MspInit+0x2fc>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 800131e:	4b72      	ldr	r3, [pc, #456]	; (80014e8 <HAL_UART_MspInit+0x2fc>)
 8001320:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001324:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001326:	4b70      	ldr	r3, [pc, #448]	; (80014e8 <HAL_UART_MspInit+0x2fc>)
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800132c:	4b6e      	ldr	r3, [pc, #440]	; (80014e8 <HAL_UART_MspInit+0x2fc>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8001332:	4b6d      	ldr	r3, [pc, #436]	; (80014e8 <HAL_UART_MspInit+0x2fc>)
 8001334:	2200      	movs	r2, #0
 8001336:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001338:	4b6b      	ldr	r3, [pc, #428]	; (80014e8 <HAL_UART_MspInit+0x2fc>)
 800133a:	2200      	movs	r2, #0
 800133c:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800133e:	4b6a      	ldr	r3, [pc, #424]	; (80014e8 <HAL_UART_MspInit+0x2fc>)
 8001340:	2200      	movs	r2, #0
 8001342:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8001344:	4868      	ldr	r0, [pc, #416]	; (80014e8 <HAL_UART_MspInit+0x2fc>)
 8001346:	f000 fda3 	bl	8001e90 <HAL_DMA_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8001350:	f7ff fde6 	bl	8000f20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a64      	ldr	r2, [pc, #400]	; (80014e8 <HAL_UART_MspInit+0x2fc>)
 8001358:	67da      	str	r2, [r3, #124]	; 0x7c
 800135a:	4a63      	ldr	r2, [pc, #396]	; (80014e8 <HAL_UART_MspInit+0x2fc>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8001360:	2200      	movs	r2, #0
 8001362:	2105      	movs	r1, #5
 8001364:	2053      	movs	r0, #83	; 0x53
 8001366:	f000 fd6b 	bl	8001e40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800136a:	2053      	movs	r0, #83	; 0x53
 800136c:	f000 fd82 	bl	8001e74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001370:	e179      	b.n	8001666 <HAL_UART_MspInit+0x47a>
  else if(huart->Instance==USART1)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a5e      	ldr	r2, [pc, #376]	; (80014f0 <HAL_UART_MspInit+0x304>)
 8001378:	4293      	cmp	r3, r2
 800137a:	f040 80c5 	bne.w	8001508 <HAL_UART_MspInit+0x31c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800137e:	f04f 0201 	mov.w	r2, #1
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800138a:	2300      	movs	r3, #0
 800138c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001390:	f107 0320 	add.w	r3, r7, #32
 8001394:	4618      	mov	r0, r3
 8001396:	f004 fe95 	bl	80060c4 <HAL_RCCEx_PeriphCLKConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 80013a0:	f7ff fdbe 	bl	8000f20 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80013a4:	4b4c      	ldr	r3, [pc, #304]	; (80014d8 <HAL_UART_MspInit+0x2ec>)
 80013a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013aa:	4a4b      	ldr	r2, [pc, #300]	; (80014d8 <HAL_UART_MspInit+0x2ec>)
 80013ac:	f043 0310 	orr.w	r3, r3, #16
 80013b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80013b4:	4b48      	ldr	r3, [pc, #288]	; (80014d8 <HAL_UART_MspInit+0x2ec>)
 80013b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4b45      	ldr	r3, [pc, #276]	; (80014d8 <HAL_UART_MspInit+0x2ec>)
 80013c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c8:	4a43      	ldr	r2, [pc, #268]	; (80014d8 <HAL_UART_MspInit+0x2ec>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d2:	4b41      	ldr	r3, [pc, #260]	; (80014d8 <HAL_UART_MspInit+0x2ec>)
 80013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013e0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013fa:	2307      	movs	r3, #7
 80013fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001404:	4619      	mov	r1, r3
 8001406:	483b      	ldr	r0, [pc, #236]	; (80014f4 <HAL_UART_MspInit+0x308>)
 8001408:	f003 fbe4 	bl	8004bd4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 800140c:	4b3a      	ldr	r3, [pc, #232]	; (80014f8 <HAL_UART_MspInit+0x30c>)
 800140e:	4a3b      	ldr	r2, [pc, #236]	; (80014fc <HAL_UART_MspInit+0x310>)
 8001410:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001412:	4b39      	ldr	r3, [pc, #228]	; (80014f8 <HAL_UART_MspInit+0x30c>)
 8001414:	2229      	movs	r2, #41	; 0x29
 8001416:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001418:	4b37      	ldr	r3, [pc, #220]	; (80014f8 <HAL_UART_MspInit+0x30c>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800141e:	4b36      	ldr	r3, [pc, #216]	; (80014f8 <HAL_UART_MspInit+0x30c>)
 8001420:	2200      	movs	r2, #0
 8001422:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001424:	4b34      	ldr	r3, [pc, #208]	; (80014f8 <HAL_UART_MspInit+0x30c>)
 8001426:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800142a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800142c:	4b32      	ldr	r3, [pc, #200]	; (80014f8 <HAL_UART_MspInit+0x30c>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001432:	4b31      	ldr	r3, [pc, #196]	; (80014f8 <HAL_UART_MspInit+0x30c>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001438:	4b2f      	ldr	r3, [pc, #188]	; (80014f8 <HAL_UART_MspInit+0x30c>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800143e:	4b2e      	ldr	r3, [pc, #184]	; (80014f8 <HAL_UART_MspInit+0x30c>)
 8001440:	2200      	movs	r2, #0
 8001442:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001444:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <HAL_UART_MspInit+0x30c>)
 8001446:	2200      	movs	r2, #0
 8001448:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800144a:	482b      	ldr	r0, [pc, #172]	; (80014f8 <HAL_UART_MspInit+0x30c>)
 800144c:	f000 fd20 	bl	8001e90 <HAL_DMA_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_UART_MspInit+0x26e>
      Error_Handler();
 8001456:	f7ff fd63 	bl	8000f20 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a26      	ldr	r2, [pc, #152]	; (80014f8 <HAL_UART_MspInit+0x30c>)
 800145e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001462:	4a25      	ldr	r2, [pc, #148]	; (80014f8 <HAL_UART_MspInit+0x30c>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8001468:	4b25      	ldr	r3, [pc, #148]	; (8001500 <HAL_UART_MspInit+0x314>)
 800146a:	4a26      	ldr	r2, [pc, #152]	; (8001504 <HAL_UART_MspInit+0x318>)
 800146c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800146e:	4b24      	ldr	r3, [pc, #144]	; (8001500 <HAL_UART_MspInit+0x314>)
 8001470:	222a      	movs	r2, #42	; 0x2a
 8001472:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001474:	4b22      	ldr	r3, [pc, #136]	; (8001500 <HAL_UART_MspInit+0x314>)
 8001476:	2240      	movs	r2, #64	; 0x40
 8001478:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800147a:	4b21      	ldr	r3, [pc, #132]	; (8001500 <HAL_UART_MspInit+0x314>)
 800147c:	2200      	movs	r2, #0
 800147e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001480:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <HAL_UART_MspInit+0x314>)
 8001482:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001486:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001488:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <HAL_UART_MspInit+0x314>)
 800148a:	2200      	movs	r2, #0
 800148c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800148e:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <HAL_UART_MspInit+0x314>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <HAL_UART_MspInit+0x314>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800149a:	4b19      	ldr	r3, [pc, #100]	; (8001500 <HAL_UART_MspInit+0x314>)
 800149c:	2200      	movs	r2, #0
 800149e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014a0:	4b17      	ldr	r3, [pc, #92]	; (8001500 <HAL_UART_MspInit+0x314>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80014a6:	4816      	ldr	r0, [pc, #88]	; (8001500 <HAL_UART_MspInit+0x314>)
 80014a8:	f000 fcf2 	bl	8001e90 <HAL_DMA_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_UART_MspInit+0x2ca>
      Error_Handler();
 80014b2:	f7ff fd35 	bl	8000f20 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a11      	ldr	r2, [pc, #68]	; (8001500 <HAL_UART_MspInit+0x314>)
 80014ba:	67da      	str	r2, [r3, #124]	; 0x7c
 80014bc:	4a10      	ldr	r2, [pc, #64]	; (8001500 <HAL_UART_MspInit+0x314>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2105      	movs	r1, #5
 80014c6:	2025      	movs	r0, #37	; 0x25
 80014c8:	f000 fcba 	bl	8001e40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014cc:	2025      	movs	r0, #37	; 0x25
 80014ce:	f000 fcd1 	bl	8001e74 <HAL_NVIC_EnableIRQ>
}
 80014d2:	e0c8      	b.n	8001666 <HAL_UART_MspInit+0x47a>
 80014d4:	40007c00 	.word	0x40007c00
 80014d8:	58024400 	.word	0x58024400
 80014dc:	58021000 	.word	0x58021000
 80014e0:	24000754 	.word	0x24000754
 80014e4:	40020040 	.word	0x40020040
 80014e8:	240007cc 	.word	0x240007cc
 80014ec:	40020058 	.word	0x40020058
 80014f0:	40011000 	.word	0x40011000
 80014f4:	58020000 	.word	0x58020000
 80014f8:	24000844 	.word	0x24000844
 80014fc:	40020010 	.word	0x40020010
 8001500:	240008bc 	.word	0x240008bc
 8001504:	40020028 	.word	0x40020028
  else if(huart->Instance==USART2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a58      	ldr	r2, [pc, #352]	; (8001670 <HAL_UART_MspInit+0x484>)
 800150e:	4293      	cmp	r3, r2
 8001510:	f040 80a9 	bne.w	8001666 <HAL_UART_MspInit+0x47a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001514:	f04f 0202 	mov.w	r2, #2
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001526:	f107 0320 	add.w	r3, r7, #32
 800152a:	4618      	mov	r0, r3
 800152c:	f004 fdca 	bl	80060c4 <HAL_RCCEx_PeriphCLKConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_UART_MspInit+0x34e>
      Error_Handler();
 8001536:	f7ff fcf3 	bl	8000f20 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800153a:	4b4e      	ldr	r3, [pc, #312]	; (8001674 <HAL_UART_MspInit+0x488>)
 800153c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001540:	4a4c      	ldr	r2, [pc, #304]	; (8001674 <HAL_UART_MspInit+0x488>)
 8001542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001546:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800154a:	4b4a      	ldr	r3, [pc, #296]	; (8001674 <HAL_UART_MspInit+0x488>)
 800154c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001558:	4b46      	ldr	r3, [pc, #280]	; (8001674 <HAL_UART_MspInit+0x488>)
 800155a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155e:	4a45      	ldr	r2, [pc, #276]	; (8001674 <HAL_UART_MspInit+0x488>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001568:	4b42      	ldr	r3, [pc, #264]	; (8001674 <HAL_UART_MspInit+0x488>)
 800156a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001576:	230c      	movs	r3, #12
 8001578:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800158e:	2307      	movs	r3, #7
 8001590:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001598:	4619      	mov	r1, r3
 800159a:	4837      	ldr	r0, [pc, #220]	; (8001678 <HAL_UART_MspInit+0x48c>)
 800159c:	f003 fb1a 	bl	8004bd4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream4;
 80015a0:	4b36      	ldr	r3, [pc, #216]	; (800167c <HAL_UART_MspInit+0x490>)
 80015a2:	4a37      	ldr	r2, [pc, #220]	; (8001680 <HAL_UART_MspInit+0x494>)
 80015a4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80015a6:	4b35      	ldr	r3, [pc, #212]	; (800167c <HAL_UART_MspInit+0x490>)
 80015a8:	222b      	movs	r2, #43	; 0x2b
 80015aa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ac:	4b33      	ldr	r3, [pc, #204]	; (800167c <HAL_UART_MspInit+0x490>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b2:	4b32      	ldr	r3, [pc, #200]	; (800167c <HAL_UART_MspInit+0x490>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015b8:	4b30      	ldr	r3, [pc, #192]	; (800167c <HAL_UART_MspInit+0x490>)
 80015ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015be:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015c0:	4b2e      	ldr	r3, [pc, #184]	; (800167c <HAL_UART_MspInit+0x490>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015c6:	4b2d      	ldr	r3, [pc, #180]	; (800167c <HAL_UART_MspInit+0x490>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80015cc:	4b2b      	ldr	r3, [pc, #172]	; (800167c <HAL_UART_MspInit+0x490>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015d2:	4b2a      	ldr	r3, [pc, #168]	; (800167c <HAL_UART_MspInit+0x490>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015d8:	4b28      	ldr	r3, [pc, #160]	; (800167c <HAL_UART_MspInit+0x490>)
 80015da:	2200      	movs	r2, #0
 80015dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80015de:	4827      	ldr	r0, [pc, #156]	; (800167c <HAL_UART_MspInit+0x490>)
 80015e0:	f000 fc56 	bl	8001e90 <HAL_DMA_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_UART_MspInit+0x402>
      Error_Handler();
 80015ea:	f7ff fc99 	bl	8000f20 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a22      	ldr	r2, [pc, #136]	; (800167c <HAL_UART_MspInit+0x490>)
 80015f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80015f6:	4a21      	ldr	r2, [pc, #132]	; (800167c <HAL_UART_MspInit+0x490>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream5;
 80015fc:	4b21      	ldr	r3, [pc, #132]	; (8001684 <HAL_UART_MspInit+0x498>)
 80015fe:	4a22      	ldr	r2, [pc, #136]	; (8001688 <HAL_UART_MspInit+0x49c>)
 8001600:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001602:	4b20      	ldr	r3, [pc, #128]	; (8001684 <HAL_UART_MspInit+0x498>)
 8001604:	222c      	movs	r2, #44	; 0x2c
 8001606:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001608:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <HAL_UART_MspInit+0x498>)
 800160a:	2240      	movs	r2, #64	; 0x40
 800160c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800160e:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <HAL_UART_MspInit+0x498>)
 8001610:	2200      	movs	r2, #0
 8001612:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <HAL_UART_MspInit+0x498>)
 8001616:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800161a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <HAL_UART_MspInit+0x498>)
 800161e:	2200      	movs	r2, #0
 8001620:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001622:	4b18      	ldr	r3, [pc, #96]	; (8001684 <HAL_UART_MspInit+0x498>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001628:	4b16      	ldr	r3, [pc, #88]	; (8001684 <HAL_UART_MspInit+0x498>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <HAL_UART_MspInit+0x498>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001634:	4b13      	ldr	r3, [pc, #76]	; (8001684 <HAL_UART_MspInit+0x498>)
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800163a:	4812      	ldr	r0, [pc, #72]	; (8001684 <HAL_UART_MspInit+0x498>)
 800163c:	f000 fc28 	bl	8001e90 <HAL_DMA_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_UART_MspInit+0x45e>
      Error_Handler();
 8001646:	f7ff fc6b 	bl	8000f20 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <HAL_UART_MspInit+0x498>)
 800164e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001650:	4a0c      	ldr	r2, [pc, #48]	; (8001684 <HAL_UART_MspInit+0x498>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2105      	movs	r1, #5
 800165a:	2026      	movs	r0, #38	; 0x26
 800165c:	f000 fbf0 	bl	8001e40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001660:	2026      	movs	r0, #38	; 0x26
 8001662:	f000 fc07 	bl	8001e74 <HAL_NVIC_EnableIRQ>
}
 8001666:	bf00      	nop
 8001668:	37f8      	adds	r7, #248	; 0xf8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40004400 	.word	0x40004400
 8001674:	58024400 	.word	0x58024400
 8001678:	58020000 	.word	0x58020000
 800167c:	24000934 	.word	0x24000934
 8001680:	40020070 	.word	0x40020070
 8001684:	240009ac 	.word	0x240009ac
 8001688:	40020088 	.word	0x40020088

0800168c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b090      	sub	sp, #64	; 0x40
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b0f      	cmp	r3, #15
 8001698:	d827      	bhi.n	80016ea <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800169a:	2200      	movs	r2, #0
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	2036      	movs	r0, #54	; 0x36
 80016a0:	f000 fbce 	bl	8001e40 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016a4:	2036      	movs	r0, #54	; 0x36
 80016a6:	f000 fbe5 	bl	8001e74 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80016aa:	4a29      	ldr	r2, [pc, #164]	; (8001750 <HAL_InitTick+0xc4>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016b0:	4b28      	ldr	r3, [pc, #160]	; (8001754 <HAL_InitTick+0xc8>)
 80016b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016b6:	4a27      	ldr	r2, [pc, #156]	; (8001754 <HAL_InitTick+0xc8>)
 80016b8:	f043 0310 	orr.w	r3, r3, #16
 80016bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016c0:	4b24      	ldr	r3, [pc, #144]	; (8001754 <HAL_InitTick+0xc8>)
 80016c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016c6:	f003 0310 	and.w	r3, r3, #16
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016ce:	f107 0210 	add.w	r2, r7, #16
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4611      	mov	r1, r2
 80016d8:	4618      	mov	r0, r3
 80016da:	f004 fcb1 	bl	8006040 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d106      	bne.n	80016f6 <HAL_InitTick+0x6a>
 80016e8:	e001      	b.n	80016ee <HAL_InitTick+0x62>
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e02b      	b.n	8001746 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016ee:	f004 fc7b 	bl	8005fe8 <HAL_RCC_GetPCLK1Freq>
 80016f2:	63f8      	str	r0, [r7, #60]	; 0x3c
 80016f4:	e004      	b.n	8001700 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016f6:	f004 fc77 	bl	8005fe8 <HAL_RCC_GetPCLK1Freq>
 80016fa:	4603      	mov	r3, r0
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001702:	4a15      	ldr	r2, [pc, #84]	; (8001758 <HAL_InitTick+0xcc>)
 8001704:	fba2 2303 	umull	r2, r3, r2, r3
 8001708:	0c9b      	lsrs	r3, r3, #18
 800170a:	3b01      	subs	r3, #1
 800170c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800170e:	4b13      	ldr	r3, [pc, #76]	; (800175c <HAL_InitTick+0xd0>)
 8001710:	4a13      	ldr	r2, [pc, #76]	; (8001760 <HAL_InitTick+0xd4>)
 8001712:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <HAL_InitTick+0xd0>)
 8001716:	f240 32e7 	movw	r2, #999	; 0x3e7
 800171a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800171c:	4a0f      	ldr	r2, [pc, #60]	; (800175c <HAL_InitTick+0xd0>)
 800171e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001720:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <HAL_InitTick+0xd0>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <HAL_InitTick+0xd0>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800172e:	480b      	ldr	r0, [pc, #44]	; (800175c <HAL_InitTick+0xd0>)
 8001730:	f008 f863 	bl	80097fa <HAL_TIM_Base_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d104      	bne.n	8001744 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800173a:	4808      	ldr	r0, [pc, #32]	; (800175c <HAL_InitTick+0xd0>)
 800173c:	f008 f8b4 	bl	80098a8 <HAL_TIM_Base_Start_IT>
 8001740:	4603      	mov	r3, r0
 8001742:	e000      	b.n	8001746 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
}
 8001746:	4618      	mov	r0, r3
 8001748:	3740      	adds	r7, #64	; 0x40
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	24000008 	.word	0x24000008
 8001754:	58024400 	.word	0x58024400
 8001758:	431bde83 	.word	0x431bde83
 800175c:	24000aa4 	.word	0x24000aa4
 8001760:	40001000 	.word	0x40001000

08001764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <NMI_Handler+0x4>

0800176a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <HardFault_Handler+0x4>

08001770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <MemManage_Handler+0x4>

08001776 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <BusFault_Handler+0x4>

0800177c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <UsageFault_Handler+0x4>

08001782 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001794:	2004      	movs	r0, #4
 8001796:	f003 fc18 	bl	8004fca <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <DMA1_Stream0_IRQHandler+0x10>)
 80017a6:	f001 fe9d 	bl	80034e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	24000844 	.word	0x24000844

080017b4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <DMA1_Stream1_IRQHandler+0x10>)
 80017ba:	f001 fe93 	bl	80034e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	240008bc 	.word	0x240008bc

080017c8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <DMA1_Stream2_IRQHandler+0x10>)
 80017ce:	f001 fe89 	bl	80034e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	24000754 	.word	0x24000754

080017dc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <DMA1_Stream3_IRQHandler+0x10>)
 80017e2:	f001 fe7f 	bl	80034e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	240007cc 	.word	0x240007cc

080017f0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <DMA1_Stream4_IRQHandler+0x10>)
 80017f6:	f001 fe75 	bl	80034e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	24000934 	.word	0x24000934

08001804 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <DMA1_Stream5_IRQHandler+0x10>)
 800180a:	f001 fe6b 	bl	80034e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	240009ac 	.word	0x240009ac

08001818 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <DMA1_Stream6_IRQHandler+0x10>)
 800181e:	f001 fe61 	bl	80034e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	240003b4 	.word	0x240003b4

0800182c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001830:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001834:	f003 fbc9 	bl	8004fca <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}

0800183c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <SPI1_IRQHandler+0x10>)
 8001842:	f007 fbad 	bl	8008fa0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2400024c 	.word	0x2400024c

08001850 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <USART1_IRQHandler+0x10>)
 8001856:	f009 f9f1 	bl	800ac3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	240005bc 	.word	0x240005bc

08001864 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <USART2_IRQHandler+0x10>)
 800186a:	f009 f9e7 	bl	800ac3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	24000688 	.word	0x24000688

08001878 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <DMA1_Stream7_IRQHandler+0x10>)
 800187e:	f001 fe31 	bl	80034e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	2400042c 	.word	0x2400042c

0800188c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <TIM6_DAC_IRQHandler+0x10>)
 8001892:	f008 f881 	bl	8009998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	24000aa4 	.word	0x24000aa4

080018a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <DMA2_Stream0_IRQHandler+0x10>)
 80018a6:	f001 fe1d 	bl	80034e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	24000a24 	.word	0x24000a24

080018b4 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <UART8_IRQHandler+0x10>)
 80018ba:	f009 f9bf 	bl	800ac3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	240004f0 	.word	0x240004f0

080018c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return 1;
 80018cc:	2301      	movs	r3, #1
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <_kill>:

int _kill(int pid, int sig)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018e2:	f01c f8db 	bl	801da9c <__errno>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2216      	movs	r2, #22
 80018ea:	601a      	str	r2, [r3, #0]
  return -1;
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <_exit>:

void _exit (int status)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001900:	f04f 31ff 	mov.w	r1, #4294967295
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ffe7 	bl	80018d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800190a:	e7fe      	b.n	800190a <_exit+0x12>

0800190c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	e00a      	b.n	8001934 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800191e:	f3af 8000 	nop.w
 8001922:	4601      	mov	r1, r0
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	60ba      	str	r2, [r7, #8]
 800192a:	b2ca      	uxtb	r2, r1
 800192c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3301      	adds	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	429a      	cmp	r2, r3
 800193a:	dbf0      	blt.n	800191e <_read+0x12>
  }

  return len;
 800193c:	687b      	ldr	r3, [r7, #4]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e009      	b.n	800196c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	60ba      	str	r2, [r7, #8]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3301      	adds	r3, #1
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	429a      	cmp	r2, r3
 8001972:	dbf1      	blt.n	8001958 <_write+0x12>
  }
  return len;
 8001974:	687b      	ldr	r3, [r7, #4]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <_close>:

int _close(int file)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019a6:	605a      	str	r2, [r3, #4]
  return 0;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <_isatty>:

int _isatty(int file)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019be:	2301      	movs	r3, #1
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f0:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <_sbrk+0x5c>)
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <_sbrk+0x60>)
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <_sbrk+0x64>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d102      	bne.n	8001a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <_sbrk+0x64>)
 8001a06:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <_sbrk+0x68>)
 8001a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <_sbrk+0x64>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d207      	bcs.n	8001a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a18:	f01c f840 	bl	801da9c <__errno>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	220c      	movs	r2, #12
 8001a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295
 8001a26:	e009      	b.n	8001a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <_sbrk+0x64>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	4a05      	ldr	r2, [pc, #20]	; (8001a4c <_sbrk+0x64>)
 8001a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	24080000 	.word	0x24080000
 8001a48:	00000400 	.word	0x00000400
 8001a4c:	24000af0 	.word	0x24000af0
 8001a50:	2401def8 	.word	0x2401def8

08001a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a58:	4b37      	ldr	r3, [pc, #220]	; (8001b38 <SystemInit+0xe4>)
 8001a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5e:	4a36      	ldr	r2, [pc, #216]	; (8001b38 <SystemInit+0xe4>)
 8001a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a68:	4b34      	ldr	r3, [pc, #208]	; (8001b3c <SystemInit+0xe8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 030f 	and.w	r3, r3, #15
 8001a70:	2b06      	cmp	r3, #6
 8001a72:	d807      	bhi.n	8001a84 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a74:	4b31      	ldr	r3, [pc, #196]	; (8001b3c <SystemInit+0xe8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f023 030f 	bic.w	r3, r3, #15
 8001a7c:	4a2f      	ldr	r2, [pc, #188]	; (8001b3c <SystemInit+0xe8>)
 8001a7e:	f043 0307 	orr.w	r3, r3, #7
 8001a82:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a84:	4b2e      	ldr	r3, [pc, #184]	; (8001b40 <SystemInit+0xec>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a2d      	ldr	r2, [pc, #180]	; (8001b40 <SystemInit+0xec>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a90:	4b2b      	ldr	r3, [pc, #172]	; (8001b40 <SystemInit+0xec>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a96:	4b2a      	ldr	r3, [pc, #168]	; (8001b40 <SystemInit+0xec>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	4929      	ldr	r1, [pc, #164]	; (8001b40 <SystemInit+0xec>)
 8001a9c:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <SystemInit+0xf0>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001aa2:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <SystemInit+0xe8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d007      	beq.n	8001abe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001aae:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <SystemInit+0xe8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f023 030f 	bic.w	r3, r3, #15
 8001ab6:	4a21      	ldr	r2, [pc, #132]	; (8001b3c <SystemInit+0xe8>)
 8001ab8:	f043 0307 	orr.w	r3, r3, #7
 8001abc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001abe:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <SystemInit+0xec>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ac4:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <SystemInit+0xec>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001aca:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <SystemInit+0xec>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <SystemInit+0xec>)
 8001ad2:	4a1d      	ldr	r2, [pc, #116]	; (8001b48 <SystemInit+0xf4>)
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <SystemInit+0xec>)
 8001ad8:	4a1c      	ldr	r2, [pc, #112]	; (8001b4c <SystemInit+0xf8>)
 8001ada:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001adc:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <SystemInit+0xec>)
 8001ade:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <SystemInit+0xfc>)
 8001ae0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <SystemInit+0xec>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ae8:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <SystemInit+0xec>)
 8001aea:	4a19      	ldr	r2, [pc, #100]	; (8001b50 <SystemInit+0xfc>)
 8001aec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001aee:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <SystemInit+0xec>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <SystemInit+0xec>)
 8001af6:	4a16      	ldr	r2, [pc, #88]	; (8001b50 <SystemInit+0xfc>)
 8001af8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <SystemInit+0xec>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <SystemInit+0xec>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <SystemInit+0xec>)
 8001b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <SystemInit+0xec>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <SystemInit+0x100>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <SystemInit+0x104>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b1e:	d202      	bcs.n	8001b26 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001b20:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <SystemInit+0x108>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <SystemInit+0x10c>)
 8001b28:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001b2c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00
 8001b3c:	52002000 	.word	0x52002000
 8001b40:	58024400 	.word	0x58024400
 8001b44:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b48:	02020200 	.word	0x02020200
 8001b4c:	01ff0000 	.word	0x01ff0000
 8001b50:	01010280 	.word	0x01010280
 8001b54:	5c001000 	.word	0x5c001000
 8001b58:	ffff0000 	.word	0xffff0000
 8001b5c:	51008108 	.word	0x51008108
 8001b60:	52004000 	.word	0x52004000

08001b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b68:	f7ff ff74 	bl	8001a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b6c:	480c      	ldr	r0, [pc, #48]	; (8001ba0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b6e:	490d      	ldr	r1, [pc, #52]	; (8001ba4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b70:	4a0d      	ldr	r2, [pc, #52]	; (8001ba8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b74:	e002      	b.n	8001b7c <LoopCopyDataInit>

08001b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7a:	3304      	adds	r3, #4

08001b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b80:	d3f9      	bcc.n	8001b76 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b82:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b84:	4c0a      	ldr	r4, [pc, #40]	; (8001bb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b88:	e001      	b.n	8001b8e <LoopFillZerobss>

08001b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b8c:	3204      	adds	r2, #4

08001b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b90:	d3fb      	bcc.n	8001b8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b92:	f01c f87f 	bl	801dc94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b96:	f7fe fd7d 	bl	8000694 <main>
  bx  lr
 8001b9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b9c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ba0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ba4:	24000230 	.word	0x24000230
  ldr r2, =_sidata
 8001ba8:	08020f20 	.word	0x08020f20
  ldr r2, =_sbss
 8001bac:	24000230 	.word	0x24000230
  ldr r4, =_ebss
 8001bb0:	2401def8 	.word	0x2401def8

08001bb4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb4:	e7fe      	b.n	8001bb4 <ADC3_IRQHandler>
	...

08001bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bbe:	2003      	movs	r0, #3
 8001bc0:	f000 f933 	bl	8001e2a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bc4:	f004 f866 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <HAL_Init+0x68>)
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	0a1b      	lsrs	r3, r3, #8
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	4913      	ldr	r1, [pc, #76]	; (8001c24 <HAL_Init+0x6c>)
 8001bd6:	5ccb      	ldrb	r3, [r1, r3]
 8001bd8:	f003 031f 	and.w	r3, r3, #31
 8001bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001be0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <HAL_Init+0x68>)
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	4a0e      	ldr	r2, [pc, #56]	; (8001c24 <HAL_Init+0x6c>)
 8001bec:	5cd3      	ldrb	r3, [r2, r3]
 8001bee:	f003 031f 	and.w	r3, r3, #31
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf8:	4a0b      	ldr	r2, [pc, #44]	; (8001c28 <HAL_Init+0x70>)
 8001bfa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bfc:	4a0b      	ldr	r2, [pc, #44]	; (8001c2c <HAL_Init+0x74>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c02:	200f      	movs	r0, #15
 8001c04:	f7ff fd42 	bl	800168c <HAL_InitTick>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e002      	b.n	8001c18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c12:	f7ff f98b 	bl	8000f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	58024400 	.word	0x58024400
 8001c24:	080205e8 	.word	0x080205e8
 8001c28:	24000004 	.word	0x24000004
 8001c2c:	24000000 	.word	0x24000000

08001c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_IncTick+0x20>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_IncTick+0x24>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <HAL_IncTick+0x24>)
 8001c42:	6013      	str	r3, [r2, #0]
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	2400000c 	.word	0x2400000c
 8001c54:	24000af4 	.word	0x24000af4

08001c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <HAL_GetTick+0x14>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	24000af4 	.word	0x24000af4

08001c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c78:	f7ff ffee 	bl	8001c58 <HAL_GetTick>
 8001c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c88:	d005      	beq.n	8001c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_Delay+0x44>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4413      	add	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c96:	bf00      	nop
 8001c98:	f7ff ffde 	bl	8001c58 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d8f7      	bhi.n	8001c98 <HAL_Delay+0x28>
  {
  }
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	2400000c 	.word	0x2400000c

08001cb8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001cbc:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <HAL_GetREVID+0x14>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	0c1b      	lsrs	r3, r3, #16
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	5c001000 	.word	0x5c001000

08001cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <__NVIC_SetPriorityGrouping+0x40>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cec:	4013      	ands	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfe:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <__NVIC_SetPriorityGrouping+0x40>)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	60d3      	str	r3, [r2, #12]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000ed00 	.word	0xe000ed00
 8001d14:	05fa0000 	.word	0x05fa0000

08001d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d1c:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <__NVIC_GetPriorityGrouping+0x18>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	f003 0307 	and.w	r3, r3, #7
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	db0b      	blt.n	8001d5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d46:	88fb      	ldrh	r3, [r7, #6]
 8001d48:	f003 021f 	and.w	r2, r3, #31
 8001d4c:	4907      	ldr	r1, [pc, #28]	; (8001d6c <__NVIC_EnableIRQ+0x38>)
 8001d4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	2001      	movs	r0, #1
 8001d56:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000e100 	.word	0xe000e100

08001d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	db0a      	blt.n	8001d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	490c      	ldr	r1, [pc, #48]	; (8001dbc <__NVIC_SetPriority+0x4c>)
 8001d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	440b      	add	r3, r1
 8001d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d98:	e00a      	b.n	8001db0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4908      	ldr	r1, [pc, #32]	; (8001dc0 <__NVIC_SetPriority+0x50>)
 8001da0:	88fb      	ldrh	r3, [r7, #6]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	3b04      	subs	r3, #4
 8001da8:	0112      	lsls	r2, r2, #4
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	440b      	add	r3, r1
 8001dae:	761a      	strb	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000e100 	.word	0xe000e100
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	; 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f1c3 0307 	rsb	r3, r3, #7
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	bf28      	it	cs
 8001de2:	2304      	movcs	r3, #4
 8001de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3304      	adds	r3, #4
 8001dea:	2b06      	cmp	r3, #6
 8001dec:	d902      	bls.n	8001df4 <NVIC_EncodePriority+0x30>
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3b03      	subs	r3, #3
 8001df2:	e000      	b.n	8001df6 <NVIC_EncodePriority+0x32>
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	401a      	ands	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	43d9      	mvns	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	4313      	orrs	r3, r2
         );
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3724      	adds	r7, #36	; 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff ff4c 	bl	8001cd0 <__NVIC_SetPriorityGrouping>
}
 8001e38:	bf00      	nop
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e4e:	f7ff ff63 	bl	8001d18 <__NVIC_GetPriorityGrouping>
 8001e52:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	68b9      	ldr	r1, [r7, #8]
 8001e58:	6978      	ldr	r0, [r7, #20]
 8001e5a:	f7ff ffb3 	bl	8001dc4 <NVIC_EncodePriority>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e64:	4611      	mov	r1, r2
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff ff82 	bl	8001d70 <__NVIC_SetPriority>
}
 8001e6c:	bf00      	nop
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff ff56 	bl	8001d34 <__NVIC_EnableIRQ>
}
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001e98:	f7ff fede 	bl	8001c58 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e316      	b.n	80024d6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a66      	ldr	r2, [pc, #408]	; (8002048 <HAL_DMA_Init+0x1b8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d04a      	beq.n	8001f48 <HAL_DMA_Init+0xb8>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a65      	ldr	r2, [pc, #404]	; (800204c <HAL_DMA_Init+0x1bc>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d045      	beq.n	8001f48 <HAL_DMA_Init+0xb8>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a63      	ldr	r2, [pc, #396]	; (8002050 <HAL_DMA_Init+0x1c0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d040      	beq.n	8001f48 <HAL_DMA_Init+0xb8>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a62      	ldr	r2, [pc, #392]	; (8002054 <HAL_DMA_Init+0x1c4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d03b      	beq.n	8001f48 <HAL_DMA_Init+0xb8>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a60      	ldr	r2, [pc, #384]	; (8002058 <HAL_DMA_Init+0x1c8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d036      	beq.n	8001f48 <HAL_DMA_Init+0xb8>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a5f      	ldr	r2, [pc, #380]	; (800205c <HAL_DMA_Init+0x1cc>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d031      	beq.n	8001f48 <HAL_DMA_Init+0xb8>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a5d      	ldr	r2, [pc, #372]	; (8002060 <HAL_DMA_Init+0x1d0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d02c      	beq.n	8001f48 <HAL_DMA_Init+0xb8>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a5c      	ldr	r2, [pc, #368]	; (8002064 <HAL_DMA_Init+0x1d4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d027      	beq.n	8001f48 <HAL_DMA_Init+0xb8>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a5a      	ldr	r2, [pc, #360]	; (8002068 <HAL_DMA_Init+0x1d8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d022      	beq.n	8001f48 <HAL_DMA_Init+0xb8>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a59      	ldr	r2, [pc, #356]	; (800206c <HAL_DMA_Init+0x1dc>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d01d      	beq.n	8001f48 <HAL_DMA_Init+0xb8>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a57      	ldr	r2, [pc, #348]	; (8002070 <HAL_DMA_Init+0x1e0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d018      	beq.n	8001f48 <HAL_DMA_Init+0xb8>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a56      	ldr	r2, [pc, #344]	; (8002074 <HAL_DMA_Init+0x1e4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d013      	beq.n	8001f48 <HAL_DMA_Init+0xb8>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a54      	ldr	r2, [pc, #336]	; (8002078 <HAL_DMA_Init+0x1e8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00e      	beq.n	8001f48 <HAL_DMA_Init+0xb8>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a53      	ldr	r2, [pc, #332]	; (800207c <HAL_DMA_Init+0x1ec>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d009      	beq.n	8001f48 <HAL_DMA_Init+0xb8>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a51      	ldr	r2, [pc, #324]	; (8002080 <HAL_DMA_Init+0x1f0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d004      	beq.n	8001f48 <HAL_DMA_Init+0xb8>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a50      	ldr	r2, [pc, #320]	; (8002084 <HAL_DMA_Init+0x1f4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d101      	bne.n	8001f4c <HAL_DMA_Init+0xbc>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <HAL_DMA_Init+0xbe>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 813b 	beq.w	80021ca <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2202      	movs	r2, #2
 8001f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a37      	ldr	r2, [pc, #220]	; (8002048 <HAL_DMA_Init+0x1b8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d04a      	beq.n	8002004 <HAL_DMA_Init+0x174>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a36      	ldr	r2, [pc, #216]	; (800204c <HAL_DMA_Init+0x1bc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d045      	beq.n	8002004 <HAL_DMA_Init+0x174>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a34      	ldr	r2, [pc, #208]	; (8002050 <HAL_DMA_Init+0x1c0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d040      	beq.n	8002004 <HAL_DMA_Init+0x174>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a33      	ldr	r2, [pc, #204]	; (8002054 <HAL_DMA_Init+0x1c4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d03b      	beq.n	8002004 <HAL_DMA_Init+0x174>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a31      	ldr	r2, [pc, #196]	; (8002058 <HAL_DMA_Init+0x1c8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d036      	beq.n	8002004 <HAL_DMA_Init+0x174>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a30      	ldr	r2, [pc, #192]	; (800205c <HAL_DMA_Init+0x1cc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d031      	beq.n	8002004 <HAL_DMA_Init+0x174>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a2e      	ldr	r2, [pc, #184]	; (8002060 <HAL_DMA_Init+0x1d0>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d02c      	beq.n	8002004 <HAL_DMA_Init+0x174>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a2d      	ldr	r2, [pc, #180]	; (8002064 <HAL_DMA_Init+0x1d4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d027      	beq.n	8002004 <HAL_DMA_Init+0x174>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a2b      	ldr	r2, [pc, #172]	; (8002068 <HAL_DMA_Init+0x1d8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d022      	beq.n	8002004 <HAL_DMA_Init+0x174>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a2a      	ldr	r2, [pc, #168]	; (800206c <HAL_DMA_Init+0x1dc>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d01d      	beq.n	8002004 <HAL_DMA_Init+0x174>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a28      	ldr	r2, [pc, #160]	; (8002070 <HAL_DMA_Init+0x1e0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d018      	beq.n	8002004 <HAL_DMA_Init+0x174>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a27      	ldr	r2, [pc, #156]	; (8002074 <HAL_DMA_Init+0x1e4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d013      	beq.n	8002004 <HAL_DMA_Init+0x174>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a25      	ldr	r2, [pc, #148]	; (8002078 <HAL_DMA_Init+0x1e8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d00e      	beq.n	8002004 <HAL_DMA_Init+0x174>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a24      	ldr	r2, [pc, #144]	; (800207c <HAL_DMA_Init+0x1ec>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d009      	beq.n	8002004 <HAL_DMA_Init+0x174>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a22      	ldr	r2, [pc, #136]	; (8002080 <HAL_DMA_Init+0x1f0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d004      	beq.n	8002004 <HAL_DMA_Init+0x174>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a21      	ldr	r2, [pc, #132]	; (8002084 <HAL_DMA_Init+0x1f4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d108      	bne.n	8002016 <HAL_DMA_Init+0x186>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0201 	bic.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	e007      	b.n	8002026 <HAL_DMA_Init+0x196>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0201 	bic.w	r2, r2, #1
 8002024:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002026:	e02f      	b.n	8002088 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002028:	f7ff fe16 	bl	8001c58 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b05      	cmp	r3, #5
 8002034:	d928      	bls.n	8002088 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2220      	movs	r2, #32
 800203a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2203      	movs	r2, #3
 8002040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e246      	b.n	80024d6 <HAL_DMA_Init+0x646>
 8002048:	40020010 	.word	0x40020010
 800204c:	40020028 	.word	0x40020028
 8002050:	40020040 	.word	0x40020040
 8002054:	40020058 	.word	0x40020058
 8002058:	40020070 	.word	0x40020070
 800205c:	40020088 	.word	0x40020088
 8002060:	400200a0 	.word	0x400200a0
 8002064:	400200b8 	.word	0x400200b8
 8002068:	40020410 	.word	0x40020410
 800206c:	40020428 	.word	0x40020428
 8002070:	40020440 	.word	0x40020440
 8002074:	40020458 	.word	0x40020458
 8002078:	40020470 	.word	0x40020470
 800207c:	40020488 	.word	0x40020488
 8002080:	400204a0 	.word	0x400204a0
 8002084:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1c8      	bne.n	8002028 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	4b83      	ldr	r3, [pc, #524]	; (80022b0 <HAL_DMA_Init+0x420>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80020ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020c6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d107      	bne.n	80020ec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	4313      	orrs	r3, r2
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80020ec:	4b71      	ldr	r3, [pc, #452]	; (80022b4 <HAL_DMA_Init+0x424>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b71      	ldr	r3, [pc, #452]	; (80022b8 <HAL_DMA_Init+0x428>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020f8:	d328      	bcc.n	800214c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b28      	cmp	r3, #40	; 0x28
 8002100:	d903      	bls.n	800210a <HAL_DMA_Init+0x27a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b2e      	cmp	r3, #46	; 0x2e
 8002108:	d917      	bls.n	800213a <HAL_DMA_Init+0x2aa>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b3e      	cmp	r3, #62	; 0x3e
 8002110:	d903      	bls.n	800211a <HAL_DMA_Init+0x28a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b42      	cmp	r3, #66	; 0x42
 8002118:	d90f      	bls.n	800213a <HAL_DMA_Init+0x2aa>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b46      	cmp	r3, #70	; 0x46
 8002120:	d903      	bls.n	800212a <HAL_DMA_Init+0x29a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b48      	cmp	r3, #72	; 0x48
 8002128:	d907      	bls.n	800213a <HAL_DMA_Init+0x2aa>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b4e      	cmp	r3, #78	; 0x4e
 8002130:	d905      	bls.n	800213e <HAL_DMA_Init+0x2ae>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b52      	cmp	r3, #82	; 0x52
 8002138:	d801      	bhi.n	800213e <HAL_DMA_Init+0x2ae>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <HAL_DMA_Init+0x2b0>
 800213e:	2300      	movs	r3, #0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800214a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f023 0307 	bic.w	r3, r3, #7
 8002162:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	4313      	orrs	r3, r2
 800216c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	2b04      	cmp	r3, #4
 8002174:	d117      	bne.n	80021a6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4313      	orrs	r3, r2
 800217e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00e      	beq.n	80021a6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f002 fb99 	bl	80048c0 <DMA_CheckFifoParam>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2240      	movs	r2, #64	; 0x40
 8002198:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e197      	b.n	80024d6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f002 fad4 	bl	800475c <DMA_CalcBaseAndBitshift>
 80021b4:	4603      	mov	r3, r0
 80021b6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021bc:	f003 031f 	and.w	r3, r3, #31
 80021c0:	223f      	movs	r2, #63	; 0x3f
 80021c2:	409a      	lsls	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	e0cd      	b.n	8002366 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a3b      	ldr	r2, [pc, #236]	; (80022bc <HAL_DMA_Init+0x42c>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d022      	beq.n	800221a <HAL_DMA_Init+0x38a>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a39      	ldr	r2, [pc, #228]	; (80022c0 <HAL_DMA_Init+0x430>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d01d      	beq.n	800221a <HAL_DMA_Init+0x38a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a38      	ldr	r2, [pc, #224]	; (80022c4 <HAL_DMA_Init+0x434>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d018      	beq.n	800221a <HAL_DMA_Init+0x38a>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a36      	ldr	r2, [pc, #216]	; (80022c8 <HAL_DMA_Init+0x438>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d013      	beq.n	800221a <HAL_DMA_Init+0x38a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a35      	ldr	r2, [pc, #212]	; (80022cc <HAL_DMA_Init+0x43c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d00e      	beq.n	800221a <HAL_DMA_Init+0x38a>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a33      	ldr	r2, [pc, #204]	; (80022d0 <HAL_DMA_Init+0x440>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d009      	beq.n	800221a <HAL_DMA_Init+0x38a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a32      	ldr	r2, [pc, #200]	; (80022d4 <HAL_DMA_Init+0x444>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d004      	beq.n	800221a <HAL_DMA_Init+0x38a>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a30      	ldr	r2, [pc, #192]	; (80022d8 <HAL_DMA_Init+0x448>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d101      	bne.n	800221e <HAL_DMA_Init+0x38e>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <HAL_DMA_Init+0x390>
 800221e:	2300      	movs	r3, #0
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 8097 	beq.w	8002354 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a24      	ldr	r2, [pc, #144]	; (80022bc <HAL_DMA_Init+0x42c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d021      	beq.n	8002274 <HAL_DMA_Init+0x3e4>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a22      	ldr	r2, [pc, #136]	; (80022c0 <HAL_DMA_Init+0x430>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d01c      	beq.n	8002274 <HAL_DMA_Init+0x3e4>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a21      	ldr	r2, [pc, #132]	; (80022c4 <HAL_DMA_Init+0x434>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d017      	beq.n	8002274 <HAL_DMA_Init+0x3e4>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a1f      	ldr	r2, [pc, #124]	; (80022c8 <HAL_DMA_Init+0x438>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d012      	beq.n	8002274 <HAL_DMA_Init+0x3e4>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a1e      	ldr	r2, [pc, #120]	; (80022cc <HAL_DMA_Init+0x43c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d00d      	beq.n	8002274 <HAL_DMA_Init+0x3e4>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <HAL_DMA_Init+0x440>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d008      	beq.n	8002274 <HAL_DMA_Init+0x3e4>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a1b      	ldr	r2, [pc, #108]	; (80022d4 <HAL_DMA_Init+0x444>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d003      	beq.n	8002274 <HAL_DMA_Init+0x3e4>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a19      	ldr	r2, [pc, #100]	; (80022d8 <HAL_DMA_Init+0x448>)
 8002272:	4293      	cmp	r3, r2
 8002274:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2202      	movs	r2, #2
 800227a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_DMA_Init+0x44c>)
 8002292:	4013      	ands	r3, r2
 8002294:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b40      	cmp	r3, #64	; 0x40
 800229c:	d020      	beq.n	80022e0 <HAL_DMA_Init+0x450>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b80      	cmp	r3, #128	; 0x80
 80022a4:	d102      	bne.n	80022ac <HAL_DMA_Init+0x41c>
 80022a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022aa:	e01a      	b.n	80022e2 <HAL_DMA_Init+0x452>
 80022ac:	2300      	movs	r3, #0
 80022ae:	e018      	b.n	80022e2 <HAL_DMA_Init+0x452>
 80022b0:	fe10803f 	.word	0xfe10803f
 80022b4:	5c001000 	.word	0x5c001000
 80022b8:	ffff0000 	.word	0xffff0000
 80022bc:	58025408 	.word	0x58025408
 80022c0:	5802541c 	.word	0x5802541c
 80022c4:	58025430 	.word	0x58025430
 80022c8:	58025444 	.word	0x58025444
 80022cc:	58025458 	.word	0x58025458
 80022d0:	5802546c 	.word	0x5802546c
 80022d4:	58025480 	.word	0x58025480
 80022d8:	58025494 	.word	0x58025494
 80022dc:	fffe000f 	.word	0xfffe000f
 80022e0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68d2      	ldr	r2, [r2, #12]
 80022e6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80022e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80022f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80022f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002300:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002308:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002310:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	4313      	orrs	r3, r2
 8002316:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	461a      	mov	r2, r3
 8002326:	4b6e      	ldr	r3, [pc, #440]	; (80024e0 <HAL_DMA_Init+0x650>)
 8002328:	4413      	add	r3, r2
 800232a:	4a6e      	ldr	r2, [pc, #440]	; (80024e4 <HAL_DMA_Init+0x654>)
 800232c:	fba2 2303 	umull	r2, r3, r2, r3
 8002330:	091b      	lsrs	r3, r3, #4
 8002332:	009a      	lsls	r2, r3, #2
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f002 fa0f 	bl	800475c <DMA_CalcBaseAndBitshift>
 800233e:	4603      	mov	r3, r0
 8002340:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002346:	f003 031f 	and.w	r3, r3, #31
 800234a:	2201      	movs	r2, #1
 800234c:	409a      	lsls	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	e008      	b.n	8002366 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2240      	movs	r2, #64	; 0x40
 8002358:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2203      	movs	r2, #3
 800235e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e0b7      	b.n	80024d6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a5f      	ldr	r2, [pc, #380]	; (80024e8 <HAL_DMA_Init+0x658>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d072      	beq.n	8002456 <HAL_DMA_Init+0x5c6>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a5d      	ldr	r2, [pc, #372]	; (80024ec <HAL_DMA_Init+0x65c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d06d      	beq.n	8002456 <HAL_DMA_Init+0x5c6>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a5c      	ldr	r2, [pc, #368]	; (80024f0 <HAL_DMA_Init+0x660>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d068      	beq.n	8002456 <HAL_DMA_Init+0x5c6>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a5a      	ldr	r2, [pc, #360]	; (80024f4 <HAL_DMA_Init+0x664>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d063      	beq.n	8002456 <HAL_DMA_Init+0x5c6>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a59      	ldr	r2, [pc, #356]	; (80024f8 <HAL_DMA_Init+0x668>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d05e      	beq.n	8002456 <HAL_DMA_Init+0x5c6>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a57      	ldr	r2, [pc, #348]	; (80024fc <HAL_DMA_Init+0x66c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d059      	beq.n	8002456 <HAL_DMA_Init+0x5c6>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a56      	ldr	r2, [pc, #344]	; (8002500 <HAL_DMA_Init+0x670>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d054      	beq.n	8002456 <HAL_DMA_Init+0x5c6>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a54      	ldr	r2, [pc, #336]	; (8002504 <HAL_DMA_Init+0x674>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d04f      	beq.n	8002456 <HAL_DMA_Init+0x5c6>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a53      	ldr	r2, [pc, #332]	; (8002508 <HAL_DMA_Init+0x678>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d04a      	beq.n	8002456 <HAL_DMA_Init+0x5c6>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a51      	ldr	r2, [pc, #324]	; (800250c <HAL_DMA_Init+0x67c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d045      	beq.n	8002456 <HAL_DMA_Init+0x5c6>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a50      	ldr	r2, [pc, #320]	; (8002510 <HAL_DMA_Init+0x680>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d040      	beq.n	8002456 <HAL_DMA_Init+0x5c6>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a4e      	ldr	r2, [pc, #312]	; (8002514 <HAL_DMA_Init+0x684>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d03b      	beq.n	8002456 <HAL_DMA_Init+0x5c6>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a4d      	ldr	r2, [pc, #308]	; (8002518 <HAL_DMA_Init+0x688>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d036      	beq.n	8002456 <HAL_DMA_Init+0x5c6>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a4b      	ldr	r2, [pc, #300]	; (800251c <HAL_DMA_Init+0x68c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d031      	beq.n	8002456 <HAL_DMA_Init+0x5c6>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a4a      	ldr	r2, [pc, #296]	; (8002520 <HAL_DMA_Init+0x690>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d02c      	beq.n	8002456 <HAL_DMA_Init+0x5c6>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a48      	ldr	r2, [pc, #288]	; (8002524 <HAL_DMA_Init+0x694>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d027      	beq.n	8002456 <HAL_DMA_Init+0x5c6>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a47      	ldr	r2, [pc, #284]	; (8002528 <HAL_DMA_Init+0x698>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d022      	beq.n	8002456 <HAL_DMA_Init+0x5c6>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a45      	ldr	r2, [pc, #276]	; (800252c <HAL_DMA_Init+0x69c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d01d      	beq.n	8002456 <HAL_DMA_Init+0x5c6>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a44      	ldr	r2, [pc, #272]	; (8002530 <HAL_DMA_Init+0x6a0>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d018      	beq.n	8002456 <HAL_DMA_Init+0x5c6>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a42      	ldr	r2, [pc, #264]	; (8002534 <HAL_DMA_Init+0x6a4>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d013      	beq.n	8002456 <HAL_DMA_Init+0x5c6>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a41      	ldr	r2, [pc, #260]	; (8002538 <HAL_DMA_Init+0x6a8>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d00e      	beq.n	8002456 <HAL_DMA_Init+0x5c6>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a3f      	ldr	r2, [pc, #252]	; (800253c <HAL_DMA_Init+0x6ac>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d009      	beq.n	8002456 <HAL_DMA_Init+0x5c6>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a3e      	ldr	r2, [pc, #248]	; (8002540 <HAL_DMA_Init+0x6b0>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d004      	beq.n	8002456 <HAL_DMA_Init+0x5c6>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a3c      	ldr	r2, [pc, #240]	; (8002544 <HAL_DMA_Init+0x6b4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d101      	bne.n	800245a <HAL_DMA_Init+0x5ca>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <HAL_DMA_Init+0x5cc>
 800245a:	2300      	movs	r3, #0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d032      	beq.n	80024c6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f002 faa9 	bl	80049b8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b80      	cmp	r3, #128	; 0x80
 800246c:	d102      	bne.n	8002474 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002488:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d010      	beq.n	80024b4 <HAL_DMA_Init+0x624>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b08      	cmp	r3, #8
 8002498:	d80c      	bhi.n	80024b4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f002 fb26 	bl	8004aec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	e008      	b.n	80024c6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	a7fdabf8 	.word	0xa7fdabf8
 80024e4:	cccccccd 	.word	0xcccccccd
 80024e8:	40020010 	.word	0x40020010
 80024ec:	40020028 	.word	0x40020028
 80024f0:	40020040 	.word	0x40020040
 80024f4:	40020058 	.word	0x40020058
 80024f8:	40020070 	.word	0x40020070
 80024fc:	40020088 	.word	0x40020088
 8002500:	400200a0 	.word	0x400200a0
 8002504:	400200b8 	.word	0x400200b8
 8002508:	40020410 	.word	0x40020410
 800250c:	40020428 	.word	0x40020428
 8002510:	40020440 	.word	0x40020440
 8002514:	40020458 	.word	0x40020458
 8002518:	40020470 	.word	0x40020470
 800251c:	40020488 	.word	0x40020488
 8002520:	400204a0 	.word	0x400204a0
 8002524:	400204b8 	.word	0x400204b8
 8002528:	58025408 	.word	0x58025408
 800252c:	5802541c 	.word	0x5802541c
 8002530:	58025430 	.word	0x58025430
 8002534:	58025444 	.word	0x58025444
 8002538:	58025458 	.word	0x58025458
 800253c:	5802546c 	.word	0x5802546c
 8002540:	58025480 	.word	0x58025480
 8002544:	58025494 	.word	0x58025494

08002548 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e226      	b.n	80029b2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_DMA_Start_IT+0x2a>
 800256e:	2302      	movs	r3, #2
 8002570:	e21f      	b.n	80029b2 <HAL_DMA_Start_IT+0x46a>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b01      	cmp	r3, #1
 8002584:	f040 820a 	bne.w	800299c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a68      	ldr	r2, [pc, #416]	; (800273c <HAL_DMA_Start_IT+0x1f4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d04a      	beq.n	8002636 <HAL_DMA_Start_IT+0xee>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a66      	ldr	r2, [pc, #408]	; (8002740 <HAL_DMA_Start_IT+0x1f8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d045      	beq.n	8002636 <HAL_DMA_Start_IT+0xee>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a65      	ldr	r2, [pc, #404]	; (8002744 <HAL_DMA_Start_IT+0x1fc>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d040      	beq.n	8002636 <HAL_DMA_Start_IT+0xee>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a63      	ldr	r2, [pc, #396]	; (8002748 <HAL_DMA_Start_IT+0x200>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d03b      	beq.n	8002636 <HAL_DMA_Start_IT+0xee>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a62      	ldr	r2, [pc, #392]	; (800274c <HAL_DMA_Start_IT+0x204>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d036      	beq.n	8002636 <HAL_DMA_Start_IT+0xee>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a60      	ldr	r2, [pc, #384]	; (8002750 <HAL_DMA_Start_IT+0x208>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d031      	beq.n	8002636 <HAL_DMA_Start_IT+0xee>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a5f      	ldr	r2, [pc, #380]	; (8002754 <HAL_DMA_Start_IT+0x20c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d02c      	beq.n	8002636 <HAL_DMA_Start_IT+0xee>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a5d      	ldr	r2, [pc, #372]	; (8002758 <HAL_DMA_Start_IT+0x210>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d027      	beq.n	8002636 <HAL_DMA_Start_IT+0xee>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a5c      	ldr	r2, [pc, #368]	; (800275c <HAL_DMA_Start_IT+0x214>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d022      	beq.n	8002636 <HAL_DMA_Start_IT+0xee>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a5a      	ldr	r2, [pc, #360]	; (8002760 <HAL_DMA_Start_IT+0x218>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d01d      	beq.n	8002636 <HAL_DMA_Start_IT+0xee>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a59      	ldr	r2, [pc, #356]	; (8002764 <HAL_DMA_Start_IT+0x21c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d018      	beq.n	8002636 <HAL_DMA_Start_IT+0xee>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a57      	ldr	r2, [pc, #348]	; (8002768 <HAL_DMA_Start_IT+0x220>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d013      	beq.n	8002636 <HAL_DMA_Start_IT+0xee>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a56      	ldr	r2, [pc, #344]	; (800276c <HAL_DMA_Start_IT+0x224>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d00e      	beq.n	8002636 <HAL_DMA_Start_IT+0xee>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a54      	ldr	r2, [pc, #336]	; (8002770 <HAL_DMA_Start_IT+0x228>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d009      	beq.n	8002636 <HAL_DMA_Start_IT+0xee>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a53      	ldr	r2, [pc, #332]	; (8002774 <HAL_DMA_Start_IT+0x22c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d004      	beq.n	8002636 <HAL_DMA_Start_IT+0xee>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a51      	ldr	r2, [pc, #324]	; (8002778 <HAL_DMA_Start_IT+0x230>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d108      	bne.n	8002648 <HAL_DMA_Start_IT+0x100>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0201 	bic.w	r2, r2, #1
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	e007      	b.n	8002658 <HAL_DMA_Start_IT+0x110>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0201 	bic.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	68b9      	ldr	r1, [r7, #8]
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f001 fed0 	bl	8004404 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a34      	ldr	r2, [pc, #208]	; (800273c <HAL_DMA_Start_IT+0x1f4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d04a      	beq.n	8002704 <HAL_DMA_Start_IT+0x1bc>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a33      	ldr	r2, [pc, #204]	; (8002740 <HAL_DMA_Start_IT+0x1f8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d045      	beq.n	8002704 <HAL_DMA_Start_IT+0x1bc>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a31      	ldr	r2, [pc, #196]	; (8002744 <HAL_DMA_Start_IT+0x1fc>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d040      	beq.n	8002704 <HAL_DMA_Start_IT+0x1bc>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a30      	ldr	r2, [pc, #192]	; (8002748 <HAL_DMA_Start_IT+0x200>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d03b      	beq.n	8002704 <HAL_DMA_Start_IT+0x1bc>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a2e      	ldr	r2, [pc, #184]	; (800274c <HAL_DMA_Start_IT+0x204>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d036      	beq.n	8002704 <HAL_DMA_Start_IT+0x1bc>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a2d      	ldr	r2, [pc, #180]	; (8002750 <HAL_DMA_Start_IT+0x208>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <HAL_DMA_Start_IT+0x1bc>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a2b      	ldr	r2, [pc, #172]	; (8002754 <HAL_DMA_Start_IT+0x20c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d02c      	beq.n	8002704 <HAL_DMA_Start_IT+0x1bc>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a2a      	ldr	r2, [pc, #168]	; (8002758 <HAL_DMA_Start_IT+0x210>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d027      	beq.n	8002704 <HAL_DMA_Start_IT+0x1bc>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a28      	ldr	r2, [pc, #160]	; (800275c <HAL_DMA_Start_IT+0x214>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d022      	beq.n	8002704 <HAL_DMA_Start_IT+0x1bc>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a27      	ldr	r2, [pc, #156]	; (8002760 <HAL_DMA_Start_IT+0x218>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d01d      	beq.n	8002704 <HAL_DMA_Start_IT+0x1bc>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a25      	ldr	r2, [pc, #148]	; (8002764 <HAL_DMA_Start_IT+0x21c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d018      	beq.n	8002704 <HAL_DMA_Start_IT+0x1bc>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a24      	ldr	r2, [pc, #144]	; (8002768 <HAL_DMA_Start_IT+0x220>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d013      	beq.n	8002704 <HAL_DMA_Start_IT+0x1bc>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a22      	ldr	r2, [pc, #136]	; (800276c <HAL_DMA_Start_IT+0x224>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d00e      	beq.n	8002704 <HAL_DMA_Start_IT+0x1bc>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a21      	ldr	r2, [pc, #132]	; (8002770 <HAL_DMA_Start_IT+0x228>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d009      	beq.n	8002704 <HAL_DMA_Start_IT+0x1bc>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a1f      	ldr	r2, [pc, #124]	; (8002774 <HAL_DMA_Start_IT+0x22c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d004      	beq.n	8002704 <HAL_DMA_Start_IT+0x1bc>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a1e      	ldr	r2, [pc, #120]	; (8002778 <HAL_DMA_Start_IT+0x230>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d101      	bne.n	8002708 <HAL_DMA_Start_IT+0x1c0>
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <HAL_DMA_Start_IT+0x1c2>
 8002708:	2300      	movs	r3, #0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d036      	beq.n	800277c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f023 021e 	bic.w	r2, r3, #30
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0216 	orr.w	r2, r2, #22
 8002720:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	2b00      	cmp	r3, #0
 8002728:	d03e      	beq.n	80027a8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 0208 	orr.w	r2, r2, #8
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	e035      	b.n	80027a8 <HAL_DMA_Start_IT+0x260>
 800273c:	40020010 	.word	0x40020010
 8002740:	40020028 	.word	0x40020028
 8002744:	40020040 	.word	0x40020040
 8002748:	40020058 	.word	0x40020058
 800274c:	40020070 	.word	0x40020070
 8002750:	40020088 	.word	0x40020088
 8002754:	400200a0 	.word	0x400200a0
 8002758:	400200b8 	.word	0x400200b8
 800275c:	40020410 	.word	0x40020410
 8002760:	40020428 	.word	0x40020428
 8002764:	40020440 	.word	0x40020440
 8002768:	40020458 	.word	0x40020458
 800276c:	40020470 	.word	0x40020470
 8002770:	40020488 	.word	0x40020488
 8002774:	400204a0 	.word	0x400204a0
 8002778:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 020e 	bic.w	r2, r3, #14
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 020a 	orr.w	r2, r2, #10
 800278e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	2b00      	cmp	r3, #0
 8002796:	d007      	beq.n	80027a8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0204 	orr.w	r2, r2, #4
 80027a6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a83      	ldr	r2, [pc, #524]	; (80029bc <HAL_DMA_Start_IT+0x474>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d072      	beq.n	8002898 <HAL_DMA_Start_IT+0x350>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a82      	ldr	r2, [pc, #520]	; (80029c0 <HAL_DMA_Start_IT+0x478>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d06d      	beq.n	8002898 <HAL_DMA_Start_IT+0x350>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a80      	ldr	r2, [pc, #512]	; (80029c4 <HAL_DMA_Start_IT+0x47c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d068      	beq.n	8002898 <HAL_DMA_Start_IT+0x350>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a7f      	ldr	r2, [pc, #508]	; (80029c8 <HAL_DMA_Start_IT+0x480>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d063      	beq.n	8002898 <HAL_DMA_Start_IT+0x350>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a7d      	ldr	r2, [pc, #500]	; (80029cc <HAL_DMA_Start_IT+0x484>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d05e      	beq.n	8002898 <HAL_DMA_Start_IT+0x350>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a7c      	ldr	r2, [pc, #496]	; (80029d0 <HAL_DMA_Start_IT+0x488>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d059      	beq.n	8002898 <HAL_DMA_Start_IT+0x350>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a7a      	ldr	r2, [pc, #488]	; (80029d4 <HAL_DMA_Start_IT+0x48c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d054      	beq.n	8002898 <HAL_DMA_Start_IT+0x350>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a79      	ldr	r2, [pc, #484]	; (80029d8 <HAL_DMA_Start_IT+0x490>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d04f      	beq.n	8002898 <HAL_DMA_Start_IT+0x350>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a77      	ldr	r2, [pc, #476]	; (80029dc <HAL_DMA_Start_IT+0x494>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d04a      	beq.n	8002898 <HAL_DMA_Start_IT+0x350>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a76      	ldr	r2, [pc, #472]	; (80029e0 <HAL_DMA_Start_IT+0x498>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d045      	beq.n	8002898 <HAL_DMA_Start_IT+0x350>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a74      	ldr	r2, [pc, #464]	; (80029e4 <HAL_DMA_Start_IT+0x49c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d040      	beq.n	8002898 <HAL_DMA_Start_IT+0x350>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a73      	ldr	r2, [pc, #460]	; (80029e8 <HAL_DMA_Start_IT+0x4a0>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d03b      	beq.n	8002898 <HAL_DMA_Start_IT+0x350>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a71      	ldr	r2, [pc, #452]	; (80029ec <HAL_DMA_Start_IT+0x4a4>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d036      	beq.n	8002898 <HAL_DMA_Start_IT+0x350>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a70      	ldr	r2, [pc, #448]	; (80029f0 <HAL_DMA_Start_IT+0x4a8>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d031      	beq.n	8002898 <HAL_DMA_Start_IT+0x350>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a6e      	ldr	r2, [pc, #440]	; (80029f4 <HAL_DMA_Start_IT+0x4ac>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d02c      	beq.n	8002898 <HAL_DMA_Start_IT+0x350>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a6d      	ldr	r2, [pc, #436]	; (80029f8 <HAL_DMA_Start_IT+0x4b0>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d027      	beq.n	8002898 <HAL_DMA_Start_IT+0x350>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a6b      	ldr	r2, [pc, #428]	; (80029fc <HAL_DMA_Start_IT+0x4b4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d022      	beq.n	8002898 <HAL_DMA_Start_IT+0x350>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a6a      	ldr	r2, [pc, #424]	; (8002a00 <HAL_DMA_Start_IT+0x4b8>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d01d      	beq.n	8002898 <HAL_DMA_Start_IT+0x350>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a68      	ldr	r2, [pc, #416]	; (8002a04 <HAL_DMA_Start_IT+0x4bc>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d018      	beq.n	8002898 <HAL_DMA_Start_IT+0x350>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a67      	ldr	r2, [pc, #412]	; (8002a08 <HAL_DMA_Start_IT+0x4c0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d013      	beq.n	8002898 <HAL_DMA_Start_IT+0x350>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a65      	ldr	r2, [pc, #404]	; (8002a0c <HAL_DMA_Start_IT+0x4c4>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d00e      	beq.n	8002898 <HAL_DMA_Start_IT+0x350>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a64      	ldr	r2, [pc, #400]	; (8002a10 <HAL_DMA_Start_IT+0x4c8>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d009      	beq.n	8002898 <HAL_DMA_Start_IT+0x350>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a62      	ldr	r2, [pc, #392]	; (8002a14 <HAL_DMA_Start_IT+0x4cc>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d004      	beq.n	8002898 <HAL_DMA_Start_IT+0x350>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a61      	ldr	r2, [pc, #388]	; (8002a18 <HAL_DMA_Start_IT+0x4d0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d101      	bne.n	800289c <HAL_DMA_Start_IT+0x354>
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <HAL_DMA_Start_IT+0x356>
 800289c:	2300      	movs	r3, #0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d01a      	beq.n	80028d8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d007      	beq.n	80028c0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028be:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d007      	beq.n	80028d8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028d6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a37      	ldr	r2, [pc, #220]	; (80029bc <HAL_DMA_Start_IT+0x474>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d04a      	beq.n	8002978 <HAL_DMA_Start_IT+0x430>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a36      	ldr	r2, [pc, #216]	; (80029c0 <HAL_DMA_Start_IT+0x478>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d045      	beq.n	8002978 <HAL_DMA_Start_IT+0x430>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a34      	ldr	r2, [pc, #208]	; (80029c4 <HAL_DMA_Start_IT+0x47c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d040      	beq.n	8002978 <HAL_DMA_Start_IT+0x430>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a33      	ldr	r2, [pc, #204]	; (80029c8 <HAL_DMA_Start_IT+0x480>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d03b      	beq.n	8002978 <HAL_DMA_Start_IT+0x430>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a31      	ldr	r2, [pc, #196]	; (80029cc <HAL_DMA_Start_IT+0x484>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d036      	beq.n	8002978 <HAL_DMA_Start_IT+0x430>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a30      	ldr	r2, [pc, #192]	; (80029d0 <HAL_DMA_Start_IT+0x488>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d031      	beq.n	8002978 <HAL_DMA_Start_IT+0x430>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a2e      	ldr	r2, [pc, #184]	; (80029d4 <HAL_DMA_Start_IT+0x48c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d02c      	beq.n	8002978 <HAL_DMA_Start_IT+0x430>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a2d      	ldr	r2, [pc, #180]	; (80029d8 <HAL_DMA_Start_IT+0x490>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d027      	beq.n	8002978 <HAL_DMA_Start_IT+0x430>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a2b      	ldr	r2, [pc, #172]	; (80029dc <HAL_DMA_Start_IT+0x494>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d022      	beq.n	8002978 <HAL_DMA_Start_IT+0x430>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a2a      	ldr	r2, [pc, #168]	; (80029e0 <HAL_DMA_Start_IT+0x498>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d01d      	beq.n	8002978 <HAL_DMA_Start_IT+0x430>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a28      	ldr	r2, [pc, #160]	; (80029e4 <HAL_DMA_Start_IT+0x49c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d018      	beq.n	8002978 <HAL_DMA_Start_IT+0x430>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a27      	ldr	r2, [pc, #156]	; (80029e8 <HAL_DMA_Start_IT+0x4a0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d013      	beq.n	8002978 <HAL_DMA_Start_IT+0x430>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a25      	ldr	r2, [pc, #148]	; (80029ec <HAL_DMA_Start_IT+0x4a4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00e      	beq.n	8002978 <HAL_DMA_Start_IT+0x430>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a24      	ldr	r2, [pc, #144]	; (80029f0 <HAL_DMA_Start_IT+0x4a8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d009      	beq.n	8002978 <HAL_DMA_Start_IT+0x430>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a22      	ldr	r2, [pc, #136]	; (80029f4 <HAL_DMA_Start_IT+0x4ac>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d004      	beq.n	8002978 <HAL_DMA_Start_IT+0x430>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a21      	ldr	r2, [pc, #132]	; (80029f8 <HAL_DMA_Start_IT+0x4b0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d108      	bne.n	800298a <HAL_DMA_Start_IT+0x442>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	e012      	b.n	80029b0 <HAL_DMA_Start_IT+0x468>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f042 0201 	orr.w	r2, r2, #1
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	e009      	b.n	80029b0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80029b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40020010 	.word	0x40020010
 80029c0:	40020028 	.word	0x40020028
 80029c4:	40020040 	.word	0x40020040
 80029c8:	40020058 	.word	0x40020058
 80029cc:	40020070 	.word	0x40020070
 80029d0:	40020088 	.word	0x40020088
 80029d4:	400200a0 	.word	0x400200a0
 80029d8:	400200b8 	.word	0x400200b8
 80029dc:	40020410 	.word	0x40020410
 80029e0:	40020428 	.word	0x40020428
 80029e4:	40020440 	.word	0x40020440
 80029e8:	40020458 	.word	0x40020458
 80029ec:	40020470 	.word	0x40020470
 80029f0:	40020488 	.word	0x40020488
 80029f4:	400204a0 	.word	0x400204a0
 80029f8:	400204b8 	.word	0x400204b8
 80029fc:	58025408 	.word	0x58025408
 8002a00:	5802541c 	.word	0x5802541c
 8002a04:	58025430 	.word	0x58025430
 8002a08:	58025444 	.word	0x58025444
 8002a0c:	58025458 	.word	0x58025458
 8002a10:	5802546c 	.word	0x5802546c
 8002a14:	58025480 	.word	0x58025480
 8002a18:	58025494 	.word	0x58025494

08002a1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002a24:	f7ff f918 	bl	8001c58 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e2dc      	b.n	8002fee <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d008      	beq.n	8002a52 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2280      	movs	r2, #128	; 0x80
 8002a44:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e2cd      	b.n	8002fee <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a76      	ldr	r2, [pc, #472]	; (8002c30 <HAL_DMA_Abort+0x214>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d04a      	beq.n	8002af2 <HAL_DMA_Abort+0xd6>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a74      	ldr	r2, [pc, #464]	; (8002c34 <HAL_DMA_Abort+0x218>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d045      	beq.n	8002af2 <HAL_DMA_Abort+0xd6>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a73      	ldr	r2, [pc, #460]	; (8002c38 <HAL_DMA_Abort+0x21c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d040      	beq.n	8002af2 <HAL_DMA_Abort+0xd6>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a71      	ldr	r2, [pc, #452]	; (8002c3c <HAL_DMA_Abort+0x220>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d03b      	beq.n	8002af2 <HAL_DMA_Abort+0xd6>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a70      	ldr	r2, [pc, #448]	; (8002c40 <HAL_DMA_Abort+0x224>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d036      	beq.n	8002af2 <HAL_DMA_Abort+0xd6>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a6e      	ldr	r2, [pc, #440]	; (8002c44 <HAL_DMA_Abort+0x228>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d031      	beq.n	8002af2 <HAL_DMA_Abort+0xd6>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a6d      	ldr	r2, [pc, #436]	; (8002c48 <HAL_DMA_Abort+0x22c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d02c      	beq.n	8002af2 <HAL_DMA_Abort+0xd6>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a6b      	ldr	r2, [pc, #428]	; (8002c4c <HAL_DMA_Abort+0x230>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d027      	beq.n	8002af2 <HAL_DMA_Abort+0xd6>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a6a      	ldr	r2, [pc, #424]	; (8002c50 <HAL_DMA_Abort+0x234>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d022      	beq.n	8002af2 <HAL_DMA_Abort+0xd6>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a68      	ldr	r2, [pc, #416]	; (8002c54 <HAL_DMA_Abort+0x238>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d01d      	beq.n	8002af2 <HAL_DMA_Abort+0xd6>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a67      	ldr	r2, [pc, #412]	; (8002c58 <HAL_DMA_Abort+0x23c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d018      	beq.n	8002af2 <HAL_DMA_Abort+0xd6>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a65      	ldr	r2, [pc, #404]	; (8002c5c <HAL_DMA_Abort+0x240>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d013      	beq.n	8002af2 <HAL_DMA_Abort+0xd6>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a64      	ldr	r2, [pc, #400]	; (8002c60 <HAL_DMA_Abort+0x244>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d00e      	beq.n	8002af2 <HAL_DMA_Abort+0xd6>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a62      	ldr	r2, [pc, #392]	; (8002c64 <HAL_DMA_Abort+0x248>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d009      	beq.n	8002af2 <HAL_DMA_Abort+0xd6>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a61      	ldr	r2, [pc, #388]	; (8002c68 <HAL_DMA_Abort+0x24c>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d004      	beq.n	8002af2 <HAL_DMA_Abort+0xd6>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a5f      	ldr	r2, [pc, #380]	; (8002c6c <HAL_DMA_Abort+0x250>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d101      	bne.n	8002af6 <HAL_DMA_Abort+0xda>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <HAL_DMA_Abort+0xdc>
 8002af6:	2300      	movs	r3, #0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d013      	beq.n	8002b24 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 021e 	bic.w	r2, r2, #30
 8002b0a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695a      	ldr	r2, [r3, #20]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b1a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	e00a      	b.n	8002b3a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 020e 	bic.w	r2, r2, #14
 8002b32:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a3c      	ldr	r2, [pc, #240]	; (8002c30 <HAL_DMA_Abort+0x214>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d072      	beq.n	8002c2a <HAL_DMA_Abort+0x20e>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a3a      	ldr	r2, [pc, #232]	; (8002c34 <HAL_DMA_Abort+0x218>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d06d      	beq.n	8002c2a <HAL_DMA_Abort+0x20e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a39      	ldr	r2, [pc, #228]	; (8002c38 <HAL_DMA_Abort+0x21c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d068      	beq.n	8002c2a <HAL_DMA_Abort+0x20e>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a37      	ldr	r2, [pc, #220]	; (8002c3c <HAL_DMA_Abort+0x220>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d063      	beq.n	8002c2a <HAL_DMA_Abort+0x20e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a36      	ldr	r2, [pc, #216]	; (8002c40 <HAL_DMA_Abort+0x224>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d05e      	beq.n	8002c2a <HAL_DMA_Abort+0x20e>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a34      	ldr	r2, [pc, #208]	; (8002c44 <HAL_DMA_Abort+0x228>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d059      	beq.n	8002c2a <HAL_DMA_Abort+0x20e>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a33      	ldr	r2, [pc, #204]	; (8002c48 <HAL_DMA_Abort+0x22c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d054      	beq.n	8002c2a <HAL_DMA_Abort+0x20e>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a31      	ldr	r2, [pc, #196]	; (8002c4c <HAL_DMA_Abort+0x230>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d04f      	beq.n	8002c2a <HAL_DMA_Abort+0x20e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a30      	ldr	r2, [pc, #192]	; (8002c50 <HAL_DMA_Abort+0x234>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d04a      	beq.n	8002c2a <HAL_DMA_Abort+0x20e>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a2e      	ldr	r2, [pc, #184]	; (8002c54 <HAL_DMA_Abort+0x238>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d045      	beq.n	8002c2a <HAL_DMA_Abort+0x20e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a2d      	ldr	r2, [pc, #180]	; (8002c58 <HAL_DMA_Abort+0x23c>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d040      	beq.n	8002c2a <HAL_DMA_Abort+0x20e>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a2b      	ldr	r2, [pc, #172]	; (8002c5c <HAL_DMA_Abort+0x240>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d03b      	beq.n	8002c2a <HAL_DMA_Abort+0x20e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a2a      	ldr	r2, [pc, #168]	; (8002c60 <HAL_DMA_Abort+0x244>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d036      	beq.n	8002c2a <HAL_DMA_Abort+0x20e>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a28      	ldr	r2, [pc, #160]	; (8002c64 <HAL_DMA_Abort+0x248>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d031      	beq.n	8002c2a <HAL_DMA_Abort+0x20e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a27      	ldr	r2, [pc, #156]	; (8002c68 <HAL_DMA_Abort+0x24c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d02c      	beq.n	8002c2a <HAL_DMA_Abort+0x20e>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a25      	ldr	r2, [pc, #148]	; (8002c6c <HAL_DMA_Abort+0x250>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d027      	beq.n	8002c2a <HAL_DMA_Abort+0x20e>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a24      	ldr	r2, [pc, #144]	; (8002c70 <HAL_DMA_Abort+0x254>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d022      	beq.n	8002c2a <HAL_DMA_Abort+0x20e>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a22      	ldr	r2, [pc, #136]	; (8002c74 <HAL_DMA_Abort+0x258>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d01d      	beq.n	8002c2a <HAL_DMA_Abort+0x20e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a21      	ldr	r2, [pc, #132]	; (8002c78 <HAL_DMA_Abort+0x25c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d018      	beq.n	8002c2a <HAL_DMA_Abort+0x20e>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a1f      	ldr	r2, [pc, #124]	; (8002c7c <HAL_DMA_Abort+0x260>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d013      	beq.n	8002c2a <HAL_DMA_Abort+0x20e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a1e      	ldr	r2, [pc, #120]	; (8002c80 <HAL_DMA_Abort+0x264>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d00e      	beq.n	8002c2a <HAL_DMA_Abort+0x20e>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1c      	ldr	r2, [pc, #112]	; (8002c84 <HAL_DMA_Abort+0x268>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d009      	beq.n	8002c2a <HAL_DMA_Abort+0x20e>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a1b      	ldr	r2, [pc, #108]	; (8002c88 <HAL_DMA_Abort+0x26c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d004      	beq.n	8002c2a <HAL_DMA_Abort+0x20e>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a19      	ldr	r2, [pc, #100]	; (8002c8c <HAL_DMA_Abort+0x270>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d132      	bne.n	8002c90 <HAL_DMA_Abort+0x274>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e031      	b.n	8002c92 <HAL_DMA_Abort+0x276>
 8002c2e:	bf00      	nop
 8002c30:	40020010 	.word	0x40020010
 8002c34:	40020028 	.word	0x40020028
 8002c38:	40020040 	.word	0x40020040
 8002c3c:	40020058 	.word	0x40020058
 8002c40:	40020070 	.word	0x40020070
 8002c44:	40020088 	.word	0x40020088
 8002c48:	400200a0 	.word	0x400200a0
 8002c4c:	400200b8 	.word	0x400200b8
 8002c50:	40020410 	.word	0x40020410
 8002c54:	40020428 	.word	0x40020428
 8002c58:	40020440 	.word	0x40020440
 8002c5c:	40020458 	.word	0x40020458
 8002c60:	40020470 	.word	0x40020470
 8002c64:	40020488 	.word	0x40020488
 8002c68:	400204a0 	.word	0x400204a0
 8002c6c:	400204b8 	.word	0x400204b8
 8002c70:	58025408 	.word	0x58025408
 8002c74:	5802541c 	.word	0x5802541c
 8002c78:	58025430 	.word	0x58025430
 8002c7c:	58025444 	.word	0x58025444
 8002c80:	58025458 	.word	0x58025458
 8002c84:	5802546c 	.word	0x5802546c
 8002c88:	58025480 	.word	0x58025480
 8002c8c:	58025494 	.word	0x58025494
 8002c90:	2300      	movs	r3, #0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d007      	beq.n	8002ca6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ca4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a6d      	ldr	r2, [pc, #436]	; (8002e60 <HAL_DMA_Abort+0x444>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d04a      	beq.n	8002d46 <HAL_DMA_Abort+0x32a>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a6b      	ldr	r2, [pc, #428]	; (8002e64 <HAL_DMA_Abort+0x448>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d045      	beq.n	8002d46 <HAL_DMA_Abort+0x32a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a6a      	ldr	r2, [pc, #424]	; (8002e68 <HAL_DMA_Abort+0x44c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d040      	beq.n	8002d46 <HAL_DMA_Abort+0x32a>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a68      	ldr	r2, [pc, #416]	; (8002e6c <HAL_DMA_Abort+0x450>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d03b      	beq.n	8002d46 <HAL_DMA_Abort+0x32a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a67      	ldr	r2, [pc, #412]	; (8002e70 <HAL_DMA_Abort+0x454>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d036      	beq.n	8002d46 <HAL_DMA_Abort+0x32a>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a65      	ldr	r2, [pc, #404]	; (8002e74 <HAL_DMA_Abort+0x458>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d031      	beq.n	8002d46 <HAL_DMA_Abort+0x32a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a64      	ldr	r2, [pc, #400]	; (8002e78 <HAL_DMA_Abort+0x45c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d02c      	beq.n	8002d46 <HAL_DMA_Abort+0x32a>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a62      	ldr	r2, [pc, #392]	; (8002e7c <HAL_DMA_Abort+0x460>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d027      	beq.n	8002d46 <HAL_DMA_Abort+0x32a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a61      	ldr	r2, [pc, #388]	; (8002e80 <HAL_DMA_Abort+0x464>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d022      	beq.n	8002d46 <HAL_DMA_Abort+0x32a>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a5f      	ldr	r2, [pc, #380]	; (8002e84 <HAL_DMA_Abort+0x468>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d01d      	beq.n	8002d46 <HAL_DMA_Abort+0x32a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a5e      	ldr	r2, [pc, #376]	; (8002e88 <HAL_DMA_Abort+0x46c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d018      	beq.n	8002d46 <HAL_DMA_Abort+0x32a>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a5c      	ldr	r2, [pc, #368]	; (8002e8c <HAL_DMA_Abort+0x470>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d013      	beq.n	8002d46 <HAL_DMA_Abort+0x32a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a5b      	ldr	r2, [pc, #364]	; (8002e90 <HAL_DMA_Abort+0x474>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d00e      	beq.n	8002d46 <HAL_DMA_Abort+0x32a>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a59      	ldr	r2, [pc, #356]	; (8002e94 <HAL_DMA_Abort+0x478>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d009      	beq.n	8002d46 <HAL_DMA_Abort+0x32a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a58      	ldr	r2, [pc, #352]	; (8002e98 <HAL_DMA_Abort+0x47c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d004      	beq.n	8002d46 <HAL_DMA_Abort+0x32a>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a56      	ldr	r2, [pc, #344]	; (8002e9c <HAL_DMA_Abort+0x480>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d108      	bne.n	8002d58 <HAL_DMA_Abort+0x33c>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0201 	bic.w	r2, r2, #1
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	e007      	b.n	8002d68 <HAL_DMA_Abort+0x34c>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0201 	bic.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002d68:	e013      	b.n	8002d92 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d6a:	f7fe ff75 	bl	8001c58 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b05      	cmp	r3, #5
 8002d76:	d90c      	bls.n	8002d92 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2203      	movs	r2, #3
 8002d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e12d      	b.n	8002fee <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1e5      	bne.n	8002d6a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a2f      	ldr	r2, [pc, #188]	; (8002e60 <HAL_DMA_Abort+0x444>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d04a      	beq.n	8002e3e <HAL_DMA_Abort+0x422>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a2d      	ldr	r2, [pc, #180]	; (8002e64 <HAL_DMA_Abort+0x448>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d045      	beq.n	8002e3e <HAL_DMA_Abort+0x422>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a2c      	ldr	r2, [pc, #176]	; (8002e68 <HAL_DMA_Abort+0x44c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d040      	beq.n	8002e3e <HAL_DMA_Abort+0x422>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a2a      	ldr	r2, [pc, #168]	; (8002e6c <HAL_DMA_Abort+0x450>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d03b      	beq.n	8002e3e <HAL_DMA_Abort+0x422>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a29      	ldr	r2, [pc, #164]	; (8002e70 <HAL_DMA_Abort+0x454>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d036      	beq.n	8002e3e <HAL_DMA_Abort+0x422>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a27      	ldr	r2, [pc, #156]	; (8002e74 <HAL_DMA_Abort+0x458>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d031      	beq.n	8002e3e <HAL_DMA_Abort+0x422>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a26      	ldr	r2, [pc, #152]	; (8002e78 <HAL_DMA_Abort+0x45c>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d02c      	beq.n	8002e3e <HAL_DMA_Abort+0x422>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a24      	ldr	r2, [pc, #144]	; (8002e7c <HAL_DMA_Abort+0x460>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d027      	beq.n	8002e3e <HAL_DMA_Abort+0x422>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a23      	ldr	r2, [pc, #140]	; (8002e80 <HAL_DMA_Abort+0x464>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d022      	beq.n	8002e3e <HAL_DMA_Abort+0x422>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a21      	ldr	r2, [pc, #132]	; (8002e84 <HAL_DMA_Abort+0x468>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d01d      	beq.n	8002e3e <HAL_DMA_Abort+0x422>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a20      	ldr	r2, [pc, #128]	; (8002e88 <HAL_DMA_Abort+0x46c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d018      	beq.n	8002e3e <HAL_DMA_Abort+0x422>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a1e      	ldr	r2, [pc, #120]	; (8002e8c <HAL_DMA_Abort+0x470>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d013      	beq.n	8002e3e <HAL_DMA_Abort+0x422>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a1d      	ldr	r2, [pc, #116]	; (8002e90 <HAL_DMA_Abort+0x474>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00e      	beq.n	8002e3e <HAL_DMA_Abort+0x422>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a1b      	ldr	r2, [pc, #108]	; (8002e94 <HAL_DMA_Abort+0x478>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d009      	beq.n	8002e3e <HAL_DMA_Abort+0x422>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a1a      	ldr	r2, [pc, #104]	; (8002e98 <HAL_DMA_Abort+0x47c>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d004      	beq.n	8002e3e <HAL_DMA_Abort+0x422>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a18      	ldr	r2, [pc, #96]	; (8002e9c <HAL_DMA_Abort+0x480>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d101      	bne.n	8002e42 <HAL_DMA_Abort+0x426>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <HAL_DMA_Abort+0x428>
 8002e42:	2300      	movs	r3, #0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d02b      	beq.n	8002ea0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e52:	f003 031f 	and.w	r3, r3, #31
 8002e56:	223f      	movs	r2, #63	; 0x3f
 8002e58:	409a      	lsls	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	609a      	str	r2, [r3, #8]
 8002e5e:	e02a      	b.n	8002eb6 <HAL_DMA_Abort+0x49a>
 8002e60:	40020010 	.word	0x40020010
 8002e64:	40020028 	.word	0x40020028
 8002e68:	40020040 	.word	0x40020040
 8002e6c:	40020058 	.word	0x40020058
 8002e70:	40020070 	.word	0x40020070
 8002e74:	40020088 	.word	0x40020088
 8002e78:	400200a0 	.word	0x400200a0
 8002e7c:	400200b8 	.word	0x400200b8
 8002e80:	40020410 	.word	0x40020410
 8002e84:	40020428 	.word	0x40020428
 8002e88:	40020440 	.word	0x40020440
 8002e8c:	40020458 	.word	0x40020458
 8002e90:	40020470 	.word	0x40020470
 8002e94:	40020488 	.word	0x40020488
 8002e98:	400204a0 	.word	0x400204a0
 8002e9c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eaa:	f003 031f 	and.w	r3, r3, #31
 8002eae:	2201      	movs	r2, #1
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a4f      	ldr	r2, [pc, #316]	; (8002ff8 <HAL_DMA_Abort+0x5dc>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d072      	beq.n	8002fa6 <HAL_DMA_Abort+0x58a>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a4d      	ldr	r2, [pc, #308]	; (8002ffc <HAL_DMA_Abort+0x5e0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d06d      	beq.n	8002fa6 <HAL_DMA_Abort+0x58a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a4c      	ldr	r2, [pc, #304]	; (8003000 <HAL_DMA_Abort+0x5e4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d068      	beq.n	8002fa6 <HAL_DMA_Abort+0x58a>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a4a      	ldr	r2, [pc, #296]	; (8003004 <HAL_DMA_Abort+0x5e8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d063      	beq.n	8002fa6 <HAL_DMA_Abort+0x58a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a49      	ldr	r2, [pc, #292]	; (8003008 <HAL_DMA_Abort+0x5ec>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d05e      	beq.n	8002fa6 <HAL_DMA_Abort+0x58a>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a47      	ldr	r2, [pc, #284]	; (800300c <HAL_DMA_Abort+0x5f0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d059      	beq.n	8002fa6 <HAL_DMA_Abort+0x58a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a46      	ldr	r2, [pc, #280]	; (8003010 <HAL_DMA_Abort+0x5f4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d054      	beq.n	8002fa6 <HAL_DMA_Abort+0x58a>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a44      	ldr	r2, [pc, #272]	; (8003014 <HAL_DMA_Abort+0x5f8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d04f      	beq.n	8002fa6 <HAL_DMA_Abort+0x58a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a43      	ldr	r2, [pc, #268]	; (8003018 <HAL_DMA_Abort+0x5fc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d04a      	beq.n	8002fa6 <HAL_DMA_Abort+0x58a>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a41      	ldr	r2, [pc, #260]	; (800301c <HAL_DMA_Abort+0x600>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d045      	beq.n	8002fa6 <HAL_DMA_Abort+0x58a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a40      	ldr	r2, [pc, #256]	; (8003020 <HAL_DMA_Abort+0x604>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d040      	beq.n	8002fa6 <HAL_DMA_Abort+0x58a>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a3e      	ldr	r2, [pc, #248]	; (8003024 <HAL_DMA_Abort+0x608>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d03b      	beq.n	8002fa6 <HAL_DMA_Abort+0x58a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a3d      	ldr	r2, [pc, #244]	; (8003028 <HAL_DMA_Abort+0x60c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d036      	beq.n	8002fa6 <HAL_DMA_Abort+0x58a>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a3b      	ldr	r2, [pc, #236]	; (800302c <HAL_DMA_Abort+0x610>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d031      	beq.n	8002fa6 <HAL_DMA_Abort+0x58a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a3a      	ldr	r2, [pc, #232]	; (8003030 <HAL_DMA_Abort+0x614>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d02c      	beq.n	8002fa6 <HAL_DMA_Abort+0x58a>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a38      	ldr	r2, [pc, #224]	; (8003034 <HAL_DMA_Abort+0x618>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d027      	beq.n	8002fa6 <HAL_DMA_Abort+0x58a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a37      	ldr	r2, [pc, #220]	; (8003038 <HAL_DMA_Abort+0x61c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d022      	beq.n	8002fa6 <HAL_DMA_Abort+0x58a>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a35      	ldr	r2, [pc, #212]	; (800303c <HAL_DMA_Abort+0x620>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d01d      	beq.n	8002fa6 <HAL_DMA_Abort+0x58a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a34      	ldr	r2, [pc, #208]	; (8003040 <HAL_DMA_Abort+0x624>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d018      	beq.n	8002fa6 <HAL_DMA_Abort+0x58a>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a32      	ldr	r2, [pc, #200]	; (8003044 <HAL_DMA_Abort+0x628>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d013      	beq.n	8002fa6 <HAL_DMA_Abort+0x58a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a31      	ldr	r2, [pc, #196]	; (8003048 <HAL_DMA_Abort+0x62c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d00e      	beq.n	8002fa6 <HAL_DMA_Abort+0x58a>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a2f      	ldr	r2, [pc, #188]	; (800304c <HAL_DMA_Abort+0x630>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d009      	beq.n	8002fa6 <HAL_DMA_Abort+0x58a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a2e      	ldr	r2, [pc, #184]	; (8003050 <HAL_DMA_Abort+0x634>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d004      	beq.n	8002fa6 <HAL_DMA_Abort+0x58a>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a2c      	ldr	r2, [pc, #176]	; (8003054 <HAL_DMA_Abort+0x638>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d101      	bne.n	8002faa <HAL_DMA_Abort+0x58e>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <HAL_DMA_Abort+0x590>
 8002faa:	2300      	movs	r3, #0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d015      	beq.n	8002fdc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002fb8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00c      	beq.n	8002fdc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fd0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002fda:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40020010 	.word	0x40020010
 8002ffc:	40020028 	.word	0x40020028
 8003000:	40020040 	.word	0x40020040
 8003004:	40020058 	.word	0x40020058
 8003008:	40020070 	.word	0x40020070
 800300c:	40020088 	.word	0x40020088
 8003010:	400200a0 	.word	0x400200a0
 8003014:	400200b8 	.word	0x400200b8
 8003018:	40020410 	.word	0x40020410
 800301c:	40020428 	.word	0x40020428
 8003020:	40020440 	.word	0x40020440
 8003024:	40020458 	.word	0x40020458
 8003028:	40020470 	.word	0x40020470
 800302c:	40020488 	.word	0x40020488
 8003030:	400204a0 	.word	0x400204a0
 8003034:	400204b8 	.word	0x400204b8
 8003038:	58025408 	.word	0x58025408
 800303c:	5802541c 	.word	0x5802541c
 8003040:	58025430 	.word	0x58025430
 8003044:	58025444 	.word	0x58025444
 8003048:	58025458 	.word	0x58025458
 800304c:	5802546c 	.word	0x5802546c
 8003050:	58025480 	.word	0x58025480
 8003054:	58025494 	.word	0x58025494

08003058 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e237      	b.n	80034da <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d004      	beq.n	8003080 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2280      	movs	r2, #128	; 0x80
 800307a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e22c      	b.n	80034da <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a5c      	ldr	r2, [pc, #368]	; (80031f8 <HAL_DMA_Abort_IT+0x1a0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d04a      	beq.n	8003120 <HAL_DMA_Abort_IT+0xc8>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a5b      	ldr	r2, [pc, #364]	; (80031fc <HAL_DMA_Abort_IT+0x1a4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d045      	beq.n	8003120 <HAL_DMA_Abort_IT+0xc8>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a59      	ldr	r2, [pc, #356]	; (8003200 <HAL_DMA_Abort_IT+0x1a8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d040      	beq.n	8003120 <HAL_DMA_Abort_IT+0xc8>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a58      	ldr	r2, [pc, #352]	; (8003204 <HAL_DMA_Abort_IT+0x1ac>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d03b      	beq.n	8003120 <HAL_DMA_Abort_IT+0xc8>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a56      	ldr	r2, [pc, #344]	; (8003208 <HAL_DMA_Abort_IT+0x1b0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d036      	beq.n	8003120 <HAL_DMA_Abort_IT+0xc8>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a55      	ldr	r2, [pc, #340]	; (800320c <HAL_DMA_Abort_IT+0x1b4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d031      	beq.n	8003120 <HAL_DMA_Abort_IT+0xc8>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a53      	ldr	r2, [pc, #332]	; (8003210 <HAL_DMA_Abort_IT+0x1b8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d02c      	beq.n	8003120 <HAL_DMA_Abort_IT+0xc8>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a52      	ldr	r2, [pc, #328]	; (8003214 <HAL_DMA_Abort_IT+0x1bc>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d027      	beq.n	8003120 <HAL_DMA_Abort_IT+0xc8>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a50      	ldr	r2, [pc, #320]	; (8003218 <HAL_DMA_Abort_IT+0x1c0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d022      	beq.n	8003120 <HAL_DMA_Abort_IT+0xc8>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a4f      	ldr	r2, [pc, #316]	; (800321c <HAL_DMA_Abort_IT+0x1c4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d01d      	beq.n	8003120 <HAL_DMA_Abort_IT+0xc8>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a4d      	ldr	r2, [pc, #308]	; (8003220 <HAL_DMA_Abort_IT+0x1c8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d018      	beq.n	8003120 <HAL_DMA_Abort_IT+0xc8>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a4c      	ldr	r2, [pc, #304]	; (8003224 <HAL_DMA_Abort_IT+0x1cc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d013      	beq.n	8003120 <HAL_DMA_Abort_IT+0xc8>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a4a      	ldr	r2, [pc, #296]	; (8003228 <HAL_DMA_Abort_IT+0x1d0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00e      	beq.n	8003120 <HAL_DMA_Abort_IT+0xc8>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a49      	ldr	r2, [pc, #292]	; (800322c <HAL_DMA_Abort_IT+0x1d4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d009      	beq.n	8003120 <HAL_DMA_Abort_IT+0xc8>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a47      	ldr	r2, [pc, #284]	; (8003230 <HAL_DMA_Abort_IT+0x1d8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d004      	beq.n	8003120 <HAL_DMA_Abort_IT+0xc8>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a46      	ldr	r2, [pc, #280]	; (8003234 <HAL_DMA_Abort_IT+0x1dc>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d101      	bne.n	8003124 <HAL_DMA_Abort_IT+0xcc>
 8003120:	2301      	movs	r3, #1
 8003122:	e000      	b.n	8003126 <HAL_DMA_Abort_IT+0xce>
 8003124:	2300      	movs	r3, #0
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 8086 	beq.w	8003238 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2204      	movs	r2, #4
 8003130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a2f      	ldr	r2, [pc, #188]	; (80031f8 <HAL_DMA_Abort_IT+0x1a0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d04a      	beq.n	80031d4 <HAL_DMA_Abort_IT+0x17c>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a2e      	ldr	r2, [pc, #184]	; (80031fc <HAL_DMA_Abort_IT+0x1a4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d045      	beq.n	80031d4 <HAL_DMA_Abort_IT+0x17c>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a2c      	ldr	r2, [pc, #176]	; (8003200 <HAL_DMA_Abort_IT+0x1a8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d040      	beq.n	80031d4 <HAL_DMA_Abort_IT+0x17c>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a2b      	ldr	r2, [pc, #172]	; (8003204 <HAL_DMA_Abort_IT+0x1ac>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d03b      	beq.n	80031d4 <HAL_DMA_Abort_IT+0x17c>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a29      	ldr	r2, [pc, #164]	; (8003208 <HAL_DMA_Abort_IT+0x1b0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d036      	beq.n	80031d4 <HAL_DMA_Abort_IT+0x17c>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a28      	ldr	r2, [pc, #160]	; (800320c <HAL_DMA_Abort_IT+0x1b4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d031      	beq.n	80031d4 <HAL_DMA_Abort_IT+0x17c>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a26      	ldr	r2, [pc, #152]	; (8003210 <HAL_DMA_Abort_IT+0x1b8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d02c      	beq.n	80031d4 <HAL_DMA_Abort_IT+0x17c>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a25      	ldr	r2, [pc, #148]	; (8003214 <HAL_DMA_Abort_IT+0x1bc>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d027      	beq.n	80031d4 <HAL_DMA_Abort_IT+0x17c>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a23      	ldr	r2, [pc, #140]	; (8003218 <HAL_DMA_Abort_IT+0x1c0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d022      	beq.n	80031d4 <HAL_DMA_Abort_IT+0x17c>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a22      	ldr	r2, [pc, #136]	; (800321c <HAL_DMA_Abort_IT+0x1c4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d01d      	beq.n	80031d4 <HAL_DMA_Abort_IT+0x17c>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a20      	ldr	r2, [pc, #128]	; (8003220 <HAL_DMA_Abort_IT+0x1c8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d018      	beq.n	80031d4 <HAL_DMA_Abort_IT+0x17c>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a1f      	ldr	r2, [pc, #124]	; (8003224 <HAL_DMA_Abort_IT+0x1cc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d013      	beq.n	80031d4 <HAL_DMA_Abort_IT+0x17c>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a1d      	ldr	r2, [pc, #116]	; (8003228 <HAL_DMA_Abort_IT+0x1d0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00e      	beq.n	80031d4 <HAL_DMA_Abort_IT+0x17c>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a1c      	ldr	r2, [pc, #112]	; (800322c <HAL_DMA_Abort_IT+0x1d4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d009      	beq.n	80031d4 <HAL_DMA_Abort_IT+0x17c>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a1a      	ldr	r2, [pc, #104]	; (8003230 <HAL_DMA_Abort_IT+0x1d8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d004      	beq.n	80031d4 <HAL_DMA_Abort_IT+0x17c>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a19      	ldr	r2, [pc, #100]	; (8003234 <HAL_DMA_Abort_IT+0x1dc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d108      	bne.n	80031e6 <HAL_DMA_Abort_IT+0x18e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0201 	bic.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	e178      	b.n	80034d8 <HAL_DMA_Abort_IT+0x480>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0201 	bic.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	e16f      	b.n	80034d8 <HAL_DMA_Abort_IT+0x480>
 80031f8:	40020010 	.word	0x40020010
 80031fc:	40020028 	.word	0x40020028
 8003200:	40020040 	.word	0x40020040
 8003204:	40020058 	.word	0x40020058
 8003208:	40020070 	.word	0x40020070
 800320c:	40020088 	.word	0x40020088
 8003210:	400200a0 	.word	0x400200a0
 8003214:	400200b8 	.word	0x400200b8
 8003218:	40020410 	.word	0x40020410
 800321c:	40020428 	.word	0x40020428
 8003220:	40020440 	.word	0x40020440
 8003224:	40020458 	.word	0x40020458
 8003228:	40020470 	.word	0x40020470
 800322c:	40020488 	.word	0x40020488
 8003230:	400204a0 	.word	0x400204a0
 8003234:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 020e 	bic.w	r2, r2, #14
 8003246:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a6c      	ldr	r2, [pc, #432]	; (8003400 <HAL_DMA_Abort_IT+0x3a8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d04a      	beq.n	80032e8 <HAL_DMA_Abort_IT+0x290>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a6b      	ldr	r2, [pc, #428]	; (8003404 <HAL_DMA_Abort_IT+0x3ac>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d045      	beq.n	80032e8 <HAL_DMA_Abort_IT+0x290>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a69      	ldr	r2, [pc, #420]	; (8003408 <HAL_DMA_Abort_IT+0x3b0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d040      	beq.n	80032e8 <HAL_DMA_Abort_IT+0x290>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a68      	ldr	r2, [pc, #416]	; (800340c <HAL_DMA_Abort_IT+0x3b4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d03b      	beq.n	80032e8 <HAL_DMA_Abort_IT+0x290>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a66      	ldr	r2, [pc, #408]	; (8003410 <HAL_DMA_Abort_IT+0x3b8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d036      	beq.n	80032e8 <HAL_DMA_Abort_IT+0x290>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a65      	ldr	r2, [pc, #404]	; (8003414 <HAL_DMA_Abort_IT+0x3bc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d031      	beq.n	80032e8 <HAL_DMA_Abort_IT+0x290>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a63      	ldr	r2, [pc, #396]	; (8003418 <HAL_DMA_Abort_IT+0x3c0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d02c      	beq.n	80032e8 <HAL_DMA_Abort_IT+0x290>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a62      	ldr	r2, [pc, #392]	; (800341c <HAL_DMA_Abort_IT+0x3c4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d027      	beq.n	80032e8 <HAL_DMA_Abort_IT+0x290>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a60      	ldr	r2, [pc, #384]	; (8003420 <HAL_DMA_Abort_IT+0x3c8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d022      	beq.n	80032e8 <HAL_DMA_Abort_IT+0x290>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a5f      	ldr	r2, [pc, #380]	; (8003424 <HAL_DMA_Abort_IT+0x3cc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d01d      	beq.n	80032e8 <HAL_DMA_Abort_IT+0x290>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a5d      	ldr	r2, [pc, #372]	; (8003428 <HAL_DMA_Abort_IT+0x3d0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d018      	beq.n	80032e8 <HAL_DMA_Abort_IT+0x290>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a5c      	ldr	r2, [pc, #368]	; (800342c <HAL_DMA_Abort_IT+0x3d4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d013      	beq.n	80032e8 <HAL_DMA_Abort_IT+0x290>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a5a      	ldr	r2, [pc, #360]	; (8003430 <HAL_DMA_Abort_IT+0x3d8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00e      	beq.n	80032e8 <HAL_DMA_Abort_IT+0x290>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a59      	ldr	r2, [pc, #356]	; (8003434 <HAL_DMA_Abort_IT+0x3dc>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d009      	beq.n	80032e8 <HAL_DMA_Abort_IT+0x290>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a57      	ldr	r2, [pc, #348]	; (8003438 <HAL_DMA_Abort_IT+0x3e0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d004      	beq.n	80032e8 <HAL_DMA_Abort_IT+0x290>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a56      	ldr	r2, [pc, #344]	; (800343c <HAL_DMA_Abort_IT+0x3e4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d108      	bne.n	80032fa <HAL_DMA_Abort_IT+0x2a2>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0201 	bic.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	e007      	b.n	800330a <HAL_DMA_Abort_IT+0x2b2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0201 	bic.w	r2, r2, #1
 8003308:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a3c      	ldr	r2, [pc, #240]	; (8003400 <HAL_DMA_Abort_IT+0x3a8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d072      	beq.n	80033fa <HAL_DMA_Abort_IT+0x3a2>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a3a      	ldr	r2, [pc, #232]	; (8003404 <HAL_DMA_Abort_IT+0x3ac>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d06d      	beq.n	80033fa <HAL_DMA_Abort_IT+0x3a2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a39      	ldr	r2, [pc, #228]	; (8003408 <HAL_DMA_Abort_IT+0x3b0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d068      	beq.n	80033fa <HAL_DMA_Abort_IT+0x3a2>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a37      	ldr	r2, [pc, #220]	; (800340c <HAL_DMA_Abort_IT+0x3b4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d063      	beq.n	80033fa <HAL_DMA_Abort_IT+0x3a2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a36      	ldr	r2, [pc, #216]	; (8003410 <HAL_DMA_Abort_IT+0x3b8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d05e      	beq.n	80033fa <HAL_DMA_Abort_IT+0x3a2>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a34      	ldr	r2, [pc, #208]	; (8003414 <HAL_DMA_Abort_IT+0x3bc>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d059      	beq.n	80033fa <HAL_DMA_Abort_IT+0x3a2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a33      	ldr	r2, [pc, #204]	; (8003418 <HAL_DMA_Abort_IT+0x3c0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d054      	beq.n	80033fa <HAL_DMA_Abort_IT+0x3a2>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a31      	ldr	r2, [pc, #196]	; (800341c <HAL_DMA_Abort_IT+0x3c4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d04f      	beq.n	80033fa <HAL_DMA_Abort_IT+0x3a2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a30      	ldr	r2, [pc, #192]	; (8003420 <HAL_DMA_Abort_IT+0x3c8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d04a      	beq.n	80033fa <HAL_DMA_Abort_IT+0x3a2>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a2e      	ldr	r2, [pc, #184]	; (8003424 <HAL_DMA_Abort_IT+0x3cc>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d045      	beq.n	80033fa <HAL_DMA_Abort_IT+0x3a2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a2d      	ldr	r2, [pc, #180]	; (8003428 <HAL_DMA_Abort_IT+0x3d0>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d040      	beq.n	80033fa <HAL_DMA_Abort_IT+0x3a2>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a2b      	ldr	r2, [pc, #172]	; (800342c <HAL_DMA_Abort_IT+0x3d4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d03b      	beq.n	80033fa <HAL_DMA_Abort_IT+0x3a2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a2a      	ldr	r2, [pc, #168]	; (8003430 <HAL_DMA_Abort_IT+0x3d8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d036      	beq.n	80033fa <HAL_DMA_Abort_IT+0x3a2>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a28      	ldr	r2, [pc, #160]	; (8003434 <HAL_DMA_Abort_IT+0x3dc>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d031      	beq.n	80033fa <HAL_DMA_Abort_IT+0x3a2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a27      	ldr	r2, [pc, #156]	; (8003438 <HAL_DMA_Abort_IT+0x3e0>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d02c      	beq.n	80033fa <HAL_DMA_Abort_IT+0x3a2>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a25      	ldr	r2, [pc, #148]	; (800343c <HAL_DMA_Abort_IT+0x3e4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d027      	beq.n	80033fa <HAL_DMA_Abort_IT+0x3a2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a24      	ldr	r2, [pc, #144]	; (8003440 <HAL_DMA_Abort_IT+0x3e8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d022      	beq.n	80033fa <HAL_DMA_Abort_IT+0x3a2>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a22      	ldr	r2, [pc, #136]	; (8003444 <HAL_DMA_Abort_IT+0x3ec>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d01d      	beq.n	80033fa <HAL_DMA_Abort_IT+0x3a2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a21      	ldr	r2, [pc, #132]	; (8003448 <HAL_DMA_Abort_IT+0x3f0>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d018      	beq.n	80033fa <HAL_DMA_Abort_IT+0x3a2>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a1f      	ldr	r2, [pc, #124]	; (800344c <HAL_DMA_Abort_IT+0x3f4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d013      	beq.n	80033fa <HAL_DMA_Abort_IT+0x3a2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a1e      	ldr	r2, [pc, #120]	; (8003450 <HAL_DMA_Abort_IT+0x3f8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00e      	beq.n	80033fa <HAL_DMA_Abort_IT+0x3a2>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a1c      	ldr	r2, [pc, #112]	; (8003454 <HAL_DMA_Abort_IT+0x3fc>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d009      	beq.n	80033fa <HAL_DMA_Abort_IT+0x3a2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a1b      	ldr	r2, [pc, #108]	; (8003458 <HAL_DMA_Abort_IT+0x400>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d004      	beq.n	80033fa <HAL_DMA_Abort_IT+0x3a2>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a19      	ldr	r2, [pc, #100]	; (800345c <HAL_DMA_Abort_IT+0x404>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d132      	bne.n	8003460 <HAL_DMA_Abort_IT+0x408>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e031      	b.n	8003462 <HAL_DMA_Abort_IT+0x40a>
 80033fe:	bf00      	nop
 8003400:	40020010 	.word	0x40020010
 8003404:	40020028 	.word	0x40020028
 8003408:	40020040 	.word	0x40020040
 800340c:	40020058 	.word	0x40020058
 8003410:	40020070 	.word	0x40020070
 8003414:	40020088 	.word	0x40020088
 8003418:	400200a0 	.word	0x400200a0
 800341c:	400200b8 	.word	0x400200b8
 8003420:	40020410 	.word	0x40020410
 8003424:	40020428 	.word	0x40020428
 8003428:	40020440 	.word	0x40020440
 800342c:	40020458 	.word	0x40020458
 8003430:	40020470 	.word	0x40020470
 8003434:	40020488 	.word	0x40020488
 8003438:	400204a0 	.word	0x400204a0
 800343c:	400204b8 	.word	0x400204b8
 8003440:	58025408 	.word	0x58025408
 8003444:	5802541c 	.word	0x5802541c
 8003448:	58025430 	.word	0x58025430
 800344c:	58025444 	.word	0x58025444
 8003450:	58025458 	.word	0x58025458
 8003454:	5802546c 	.word	0x5802546c
 8003458:	58025480 	.word	0x58025480
 800345c:	58025494 	.word	0x58025494
 8003460:	2300      	movs	r3, #0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d028      	beq.n	80034b8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003470:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003474:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003480:	f003 031f 	and.w	r3, r3, #31
 8003484:	2201      	movs	r2, #1
 8003486:	409a      	lsls	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003494:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00c      	beq.n	80034b8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034ac:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80034b6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop

080034e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08a      	sub	sp, #40	; 0x28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034f0:	4b67      	ldr	r3, [pc, #412]	; (8003690 <HAL_DMA_IRQHandler+0x1ac>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a67      	ldr	r2, [pc, #412]	; (8003694 <HAL_DMA_IRQHandler+0x1b0>)
 80034f6:	fba2 2303 	umull	r2, r3, r2, r3
 80034fa:	0a9b      	lsrs	r3, r3, #10
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003502:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003508:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a5f      	ldr	r2, [pc, #380]	; (8003698 <HAL_DMA_IRQHandler+0x1b4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d04a      	beq.n	80035b6 <HAL_DMA_IRQHandler+0xd2>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a5d      	ldr	r2, [pc, #372]	; (800369c <HAL_DMA_IRQHandler+0x1b8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d045      	beq.n	80035b6 <HAL_DMA_IRQHandler+0xd2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a5c      	ldr	r2, [pc, #368]	; (80036a0 <HAL_DMA_IRQHandler+0x1bc>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d040      	beq.n	80035b6 <HAL_DMA_IRQHandler+0xd2>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a5a      	ldr	r2, [pc, #360]	; (80036a4 <HAL_DMA_IRQHandler+0x1c0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d03b      	beq.n	80035b6 <HAL_DMA_IRQHandler+0xd2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a59      	ldr	r2, [pc, #356]	; (80036a8 <HAL_DMA_IRQHandler+0x1c4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d036      	beq.n	80035b6 <HAL_DMA_IRQHandler+0xd2>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a57      	ldr	r2, [pc, #348]	; (80036ac <HAL_DMA_IRQHandler+0x1c8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d031      	beq.n	80035b6 <HAL_DMA_IRQHandler+0xd2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a56      	ldr	r2, [pc, #344]	; (80036b0 <HAL_DMA_IRQHandler+0x1cc>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d02c      	beq.n	80035b6 <HAL_DMA_IRQHandler+0xd2>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a54      	ldr	r2, [pc, #336]	; (80036b4 <HAL_DMA_IRQHandler+0x1d0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d027      	beq.n	80035b6 <HAL_DMA_IRQHandler+0xd2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a53      	ldr	r2, [pc, #332]	; (80036b8 <HAL_DMA_IRQHandler+0x1d4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d022      	beq.n	80035b6 <HAL_DMA_IRQHandler+0xd2>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a51      	ldr	r2, [pc, #324]	; (80036bc <HAL_DMA_IRQHandler+0x1d8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d01d      	beq.n	80035b6 <HAL_DMA_IRQHandler+0xd2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a50      	ldr	r2, [pc, #320]	; (80036c0 <HAL_DMA_IRQHandler+0x1dc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d018      	beq.n	80035b6 <HAL_DMA_IRQHandler+0xd2>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a4e      	ldr	r2, [pc, #312]	; (80036c4 <HAL_DMA_IRQHandler+0x1e0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d013      	beq.n	80035b6 <HAL_DMA_IRQHandler+0xd2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a4d      	ldr	r2, [pc, #308]	; (80036c8 <HAL_DMA_IRQHandler+0x1e4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d00e      	beq.n	80035b6 <HAL_DMA_IRQHandler+0xd2>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a4b      	ldr	r2, [pc, #300]	; (80036cc <HAL_DMA_IRQHandler+0x1e8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d009      	beq.n	80035b6 <HAL_DMA_IRQHandler+0xd2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a4a      	ldr	r2, [pc, #296]	; (80036d0 <HAL_DMA_IRQHandler+0x1ec>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d004      	beq.n	80035b6 <HAL_DMA_IRQHandler+0xd2>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a48      	ldr	r2, [pc, #288]	; (80036d4 <HAL_DMA_IRQHandler+0x1f0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d101      	bne.n	80035ba <HAL_DMA_IRQHandler+0xd6>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <HAL_DMA_IRQHandler+0xd8>
 80035ba:	2300      	movs	r3, #0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 842b 	beq.w	8003e18 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c6:	f003 031f 	and.w	r3, r3, #31
 80035ca:	2208      	movs	r2, #8
 80035cc:	409a      	lsls	r2, r3
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 80a2 	beq.w	800371c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a2e      	ldr	r2, [pc, #184]	; (8003698 <HAL_DMA_IRQHandler+0x1b4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d04a      	beq.n	8003678 <HAL_DMA_IRQHandler+0x194>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a2d      	ldr	r2, [pc, #180]	; (800369c <HAL_DMA_IRQHandler+0x1b8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d045      	beq.n	8003678 <HAL_DMA_IRQHandler+0x194>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a2b      	ldr	r2, [pc, #172]	; (80036a0 <HAL_DMA_IRQHandler+0x1bc>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d040      	beq.n	8003678 <HAL_DMA_IRQHandler+0x194>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a2a      	ldr	r2, [pc, #168]	; (80036a4 <HAL_DMA_IRQHandler+0x1c0>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d03b      	beq.n	8003678 <HAL_DMA_IRQHandler+0x194>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a28      	ldr	r2, [pc, #160]	; (80036a8 <HAL_DMA_IRQHandler+0x1c4>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d036      	beq.n	8003678 <HAL_DMA_IRQHandler+0x194>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a27      	ldr	r2, [pc, #156]	; (80036ac <HAL_DMA_IRQHandler+0x1c8>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d031      	beq.n	8003678 <HAL_DMA_IRQHandler+0x194>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a25      	ldr	r2, [pc, #148]	; (80036b0 <HAL_DMA_IRQHandler+0x1cc>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d02c      	beq.n	8003678 <HAL_DMA_IRQHandler+0x194>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a24      	ldr	r2, [pc, #144]	; (80036b4 <HAL_DMA_IRQHandler+0x1d0>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d027      	beq.n	8003678 <HAL_DMA_IRQHandler+0x194>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a22      	ldr	r2, [pc, #136]	; (80036b8 <HAL_DMA_IRQHandler+0x1d4>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d022      	beq.n	8003678 <HAL_DMA_IRQHandler+0x194>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a21      	ldr	r2, [pc, #132]	; (80036bc <HAL_DMA_IRQHandler+0x1d8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d01d      	beq.n	8003678 <HAL_DMA_IRQHandler+0x194>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1f      	ldr	r2, [pc, #124]	; (80036c0 <HAL_DMA_IRQHandler+0x1dc>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d018      	beq.n	8003678 <HAL_DMA_IRQHandler+0x194>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a1e      	ldr	r2, [pc, #120]	; (80036c4 <HAL_DMA_IRQHandler+0x1e0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d013      	beq.n	8003678 <HAL_DMA_IRQHandler+0x194>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a1c      	ldr	r2, [pc, #112]	; (80036c8 <HAL_DMA_IRQHandler+0x1e4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d00e      	beq.n	8003678 <HAL_DMA_IRQHandler+0x194>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a1b      	ldr	r2, [pc, #108]	; (80036cc <HAL_DMA_IRQHandler+0x1e8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d009      	beq.n	8003678 <HAL_DMA_IRQHandler+0x194>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a19      	ldr	r2, [pc, #100]	; (80036d0 <HAL_DMA_IRQHandler+0x1ec>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d004      	beq.n	8003678 <HAL_DMA_IRQHandler+0x194>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a18      	ldr	r2, [pc, #96]	; (80036d4 <HAL_DMA_IRQHandler+0x1f0>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d12f      	bne.n	80036d8 <HAL_DMA_IRQHandler+0x1f4>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b00      	cmp	r3, #0
 8003684:	bf14      	ite	ne
 8003686:	2301      	movne	r3, #1
 8003688:	2300      	moveq	r3, #0
 800368a:	b2db      	uxtb	r3, r3
 800368c:	e02e      	b.n	80036ec <HAL_DMA_IRQHandler+0x208>
 800368e:	bf00      	nop
 8003690:	24000000 	.word	0x24000000
 8003694:	1b4e81b5 	.word	0x1b4e81b5
 8003698:	40020010 	.word	0x40020010
 800369c:	40020028 	.word	0x40020028
 80036a0:	40020040 	.word	0x40020040
 80036a4:	40020058 	.word	0x40020058
 80036a8:	40020070 	.word	0x40020070
 80036ac:	40020088 	.word	0x40020088
 80036b0:	400200a0 	.word	0x400200a0
 80036b4:	400200b8 	.word	0x400200b8
 80036b8:	40020410 	.word	0x40020410
 80036bc:	40020428 	.word	0x40020428
 80036c0:	40020440 	.word	0x40020440
 80036c4:	40020458 	.word	0x40020458
 80036c8:	40020470 	.word	0x40020470
 80036cc:	40020488 	.word	0x40020488
 80036d0:	400204a0 	.word	0x400204a0
 80036d4:	400204b8 	.word	0x400204b8
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	bf14      	ite	ne
 80036e6:	2301      	movne	r3, #1
 80036e8:	2300      	moveq	r3, #0
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d015      	beq.n	800371c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0204 	bic.w	r2, r2, #4
 80036fe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003704:	f003 031f 	and.w	r3, r3, #31
 8003708:	2208      	movs	r2, #8
 800370a:	409a      	lsls	r2, r3
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003714:	f043 0201 	orr.w	r2, r3, #1
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003720:	f003 031f 	and.w	r3, r3, #31
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	fa22 f303 	lsr.w	r3, r2, r3
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d06e      	beq.n	8003810 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a69      	ldr	r2, [pc, #420]	; (80038dc <HAL_DMA_IRQHandler+0x3f8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d04a      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x2ee>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a67      	ldr	r2, [pc, #412]	; (80038e0 <HAL_DMA_IRQHandler+0x3fc>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d045      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x2ee>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a66      	ldr	r2, [pc, #408]	; (80038e4 <HAL_DMA_IRQHandler+0x400>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d040      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x2ee>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a64      	ldr	r2, [pc, #400]	; (80038e8 <HAL_DMA_IRQHandler+0x404>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d03b      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x2ee>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a63      	ldr	r2, [pc, #396]	; (80038ec <HAL_DMA_IRQHandler+0x408>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d036      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x2ee>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a61      	ldr	r2, [pc, #388]	; (80038f0 <HAL_DMA_IRQHandler+0x40c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d031      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x2ee>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a60      	ldr	r2, [pc, #384]	; (80038f4 <HAL_DMA_IRQHandler+0x410>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d02c      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x2ee>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a5e      	ldr	r2, [pc, #376]	; (80038f8 <HAL_DMA_IRQHandler+0x414>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d027      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x2ee>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a5d      	ldr	r2, [pc, #372]	; (80038fc <HAL_DMA_IRQHandler+0x418>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d022      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x2ee>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a5b      	ldr	r2, [pc, #364]	; (8003900 <HAL_DMA_IRQHandler+0x41c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d01d      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x2ee>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a5a      	ldr	r2, [pc, #360]	; (8003904 <HAL_DMA_IRQHandler+0x420>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d018      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x2ee>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a58      	ldr	r2, [pc, #352]	; (8003908 <HAL_DMA_IRQHandler+0x424>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d013      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x2ee>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a57      	ldr	r2, [pc, #348]	; (800390c <HAL_DMA_IRQHandler+0x428>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d00e      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x2ee>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a55      	ldr	r2, [pc, #340]	; (8003910 <HAL_DMA_IRQHandler+0x42c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d009      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x2ee>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a54      	ldr	r2, [pc, #336]	; (8003914 <HAL_DMA_IRQHandler+0x430>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d004      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x2ee>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a52      	ldr	r2, [pc, #328]	; (8003918 <HAL_DMA_IRQHandler+0x434>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d10a      	bne.n	80037e8 <HAL_DMA_IRQHandler+0x304>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037dc:	2b00      	cmp	r3, #0
 80037de:	bf14      	ite	ne
 80037e0:	2301      	movne	r3, #1
 80037e2:	2300      	moveq	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	e003      	b.n	80037f0 <HAL_DMA_IRQHandler+0x30c>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2300      	movs	r3, #0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00d      	beq.n	8003810 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f8:	f003 031f 	and.w	r3, r3, #31
 80037fc:	2201      	movs	r2, #1
 80037fe:	409a      	lsls	r2, r3
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003808:	f043 0202 	orr.w	r2, r3, #2
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003814:	f003 031f 	and.w	r3, r3, #31
 8003818:	2204      	movs	r2, #4
 800381a:	409a      	lsls	r2, r3
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	4013      	ands	r3, r2
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 808f 	beq.w	8003944 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a2c      	ldr	r2, [pc, #176]	; (80038dc <HAL_DMA_IRQHandler+0x3f8>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d04a      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x3e2>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a2a      	ldr	r2, [pc, #168]	; (80038e0 <HAL_DMA_IRQHandler+0x3fc>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d045      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x3e2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a29      	ldr	r2, [pc, #164]	; (80038e4 <HAL_DMA_IRQHandler+0x400>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d040      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x3e2>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a27      	ldr	r2, [pc, #156]	; (80038e8 <HAL_DMA_IRQHandler+0x404>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d03b      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x3e2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a26      	ldr	r2, [pc, #152]	; (80038ec <HAL_DMA_IRQHandler+0x408>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d036      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x3e2>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a24      	ldr	r2, [pc, #144]	; (80038f0 <HAL_DMA_IRQHandler+0x40c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d031      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x3e2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a23      	ldr	r2, [pc, #140]	; (80038f4 <HAL_DMA_IRQHandler+0x410>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d02c      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x3e2>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a21      	ldr	r2, [pc, #132]	; (80038f8 <HAL_DMA_IRQHandler+0x414>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d027      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x3e2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a20      	ldr	r2, [pc, #128]	; (80038fc <HAL_DMA_IRQHandler+0x418>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d022      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x3e2>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a1e      	ldr	r2, [pc, #120]	; (8003900 <HAL_DMA_IRQHandler+0x41c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d01d      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x3e2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a1d      	ldr	r2, [pc, #116]	; (8003904 <HAL_DMA_IRQHandler+0x420>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d018      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x3e2>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a1b      	ldr	r2, [pc, #108]	; (8003908 <HAL_DMA_IRQHandler+0x424>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d013      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x3e2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a1a      	ldr	r2, [pc, #104]	; (800390c <HAL_DMA_IRQHandler+0x428>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d00e      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x3e2>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a18      	ldr	r2, [pc, #96]	; (8003910 <HAL_DMA_IRQHandler+0x42c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d009      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x3e2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a17      	ldr	r2, [pc, #92]	; (8003914 <HAL_DMA_IRQHandler+0x430>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d004      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x3e2>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a15      	ldr	r2, [pc, #84]	; (8003918 <HAL_DMA_IRQHandler+0x434>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d12a      	bne.n	800391c <HAL_DMA_IRQHandler+0x438>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bf14      	ite	ne
 80038d4:	2301      	movne	r3, #1
 80038d6:	2300      	moveq	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	e023      	b.n	8003924 <HAL_DMA_IRQHandler+0x440>
 80038dc:	40020010 	.word	0x40020010
 80038e0:	40020028 	.word	0x40020028
 80038e4:	40020040 	.word	0x40020040
 80038e8:	40020058 	.word	0x40020058
 80038ec:	40020070 	.word	0x40020070
 80038f0:	40020088 	.word	0x40020088
 80038f4:	400200a0 	.word	0x400200a0
 80038f8:	400200b8 	.word	0x400200b8
 80038fc:	40020410 	.word	0x40020410
 8003900:	40020428 	.word	0x40020428
 8003904:	40020440 	.word	0x40020440
 8003908:	40020458 	.word	0x40020458
 800390c:	40020470 	.word	0x40020470
 8003910:	40020488 	.word	0x40020488
 8003914:	400204a0 	.word	0x400204a0
 8003918:	400204b8 	.word	0x400204b8
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2300      	movs	r3, #0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00d      	beq.n	8003944 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392c:	f003 031f 	and.w	r3, r3, #31
 8003930:	2204      	movs	r2, #4
 8003932:	409a      	lsls	r2, r3
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	f043 0204 	orr.w	r2, r3, #4
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003948:	f003 031f 	and.w	r3, r3, #31
 800394c:	2210      	movs	r2, #16
 800394e:	409a      	lsls	r2, r3
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	4013      	ands	r3, r2
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80a6 	beq.w	8003aa6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a85      	ldr	r2, [pc, #532]	; (8003b74 <HAL_DMA_IRQHandler+0x690>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d04a      	beq.n	80039fa <HAL_DMA_IRQHandler+0x516>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a83      	ldr	r2, [pc, #524]	; (8003b78 <HAL_DMA_IRQHandler+0x694>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d045      	beq.n	80039fa <HAL_DMA_IRQHandler+0x516>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a82      	ldr	r2, [pc, #520]	; (8003b7c <HAL_DMA_IRQHandler+0x698>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d040      	beq.n	80039fa <HAL_DMA_IRQHandler+0x516>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a80      	ldr	r2, [pc, #512]	; (8003b80 <HAL_DMA_IRQHandler+0x69c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d03b      	beq.n	80039fa <HAL_DMA_IRQHandler+0x516>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a7f      	ldr	r2, [pc, #508]	; (8003b84 <HAL_DMA_IRQHandler+0x6a0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d036      	beq.n	80039fa <HAL_DMA_IRQHandler+0x516>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a7d      	ldr	r2, [pc, #500]	; (8003b88 <HAL_DMA_IRQHandler+0x6a4>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d031      	beq.n	80039fa <HAL_DMA_IRQHandler+0x516>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a7c      	ldr	r2, [pc, #496]	; (8003b8c <HAL_DMA_IRQHandler+0x6a8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d02c      	beq.n	80039fa <HAL_DMA_IRQHandler+0x516>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a7a      	ldr	r2, [pc, #488]	; (8003b90 <HAL_DMA_IRQHandler+0x6ac>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d027      	beq.n	80039fa <HAL_DMA_IRQHandler+0x516>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a79      	ldr	r2, [pc, #484]	; (8003b94 <HAL_DMA_IRQHandler+0x6b0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d022      	beq.n	80039fa <HAL_DMA_IRQHandler+0x516>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a77      	ldr	r2, [pc, #476]	; (8003b98 <HAL_DMA_IRQHandler+0x6b4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d01d      	beq.n	80039fa <HAL_DMA_IRQHandler+0x516>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a76      	ldr	r2, [pc, #472]	; (8003b9c <HAL_DMA_IRQHandler+0x6b8>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d018      	beq.n	80039fa <HAL_DMA_IRQHandler+0x516>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a74      	ldr	r2, [pc, #464]	; (8003ba0 <HAL_DMA_IRQHandler+0x6bc>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d013      	beq.n	80039fa <HAL_DMA_IRQHandler+0x516>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a73      	ldr	r2, [pc, #460]	; (8003ba4 <HAL_DMA_IRQHandler+0x6c0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d00e      	beq.n	80039fa <HAL_DMA_IRQHandler+0x516>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a71      	ldr	r2, [pc, #452]	; (8003ba8 <HAL_DMA_IRQHandler+0x6c4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d009      	beq.n	80039fa <HAL_DMA_IRQHandler+0x516>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a70      	ldr	r2, [pc, #448]	; (8003bac <HAL_DMA_IRQHandler+0x6c8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d004      	beq.n	80039fa <HAL_DMA_IRQHandler+0x516>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a6e      	ldr	r2, [pc, #440]	; (8003bb0 <HAL_DMA_IRQHandler+0x6cc>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d10a      	bne.n	8003a10 <HAL_DMA_IRQHandler+0x52c>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	bf14      	ite	ne
 8003a08:	2301      	movne	r3, #1
 8003a0a:	2300      	moveq	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	e009      	b.n	8003a24 <HAL_DMA_IRQHandler+0x540>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	bf14      	ite	ne
 8003a1e:	2301      	movne	r3, #1
 8003a20:	2300      	moveq	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d03e      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2c:	f003 031f 	and.w	r3, r3, #31
 8003a30:	2210      	movs	r2, #16
 8003a32:	409a      	lsls	r2, r3
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d018      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d108      	bne.n	8003a66 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d024      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	4798      	blx	r3
 8003a64:	e01f      	b.n	8003aa6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d01b      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	4798      	blx	r3
 8003a76:	e016      	b.n	8003aa6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d107      	bne.n	8003a96 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0208 	bic.w	r2, r2, #8
 8003a94:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aaa:	f003 031f 	and.w	r3, r3, #31
 8003aae:	2220      	movs	r2, #32
 8003ab0:	409a      	lsls	r2, r3
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 8110 	beq.w	8003cdc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a2c      	ldr	r2, [pc, #176]	; (8003b74 <HAL_DMA_IRQHandler+0x690>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d04a      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x678>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a2b      	ldr	r2, [pc, #172]	; (8003b78 <HAL_DMA_IRQHandler+0x694>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d045      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x678>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a29      	ldr	r2, [pc, #164]	; (8003b7c <HAL_DMA_IRQHandler+0x698>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d040      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x678>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a28      	ldr	r2, [pc, #160]	; (8003b80 <HAL_DMA_IRQHandler+0x69c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d03b      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x678>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a26      	ldr	r2, [pc, #152]	; (8003b84 <HAL_DMA_IRQHandler+0x6a0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d036      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x678>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a25      	ldr	r2, [pc, #148]	; (8003b88 <HAL_DMA_IRQHandler+0x6a4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d031      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x678>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a23      	ldr	r2, [pc, #140]	; (8003b8c <HAL_DMA_IRQHandler+0x6a8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d02c      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x678>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a22      	ldr	r2, [pc, #136]	; (8003b90 <HAL_DMA_IRQHandler+0x6ac>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d027      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x678>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a20      	ldr	r2, [pc, #128]	; (8003b94 <HAL_DMA_IRQHandler+0x6b0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d022      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x678>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a1f      	ldr	r2, [pc, #124]	; (8003b98 <HAL_DMA_IRQHandler+0x6b4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d01d      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x678>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a1d      	ldr	r2, [pc, #116]	; (8003b9c <HAL_DMA_IRQHandler+0x6b8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d018      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x678>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a1c      	ldr	r2, [pc, #112]	; (8003ba0 <HAL_DMA_IRQHandler+0x6bc>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d013      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x678>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a1a      	ldr	r2, [pc, #104]	; (8003ba4 <HAL_DMA_IRQHandler+0x6c0>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00e      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x678>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a19      	ldr	r2, [pc, #100]	; (8003ba8 <HAL_DMA_IRQHandler+0x6c4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d009      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x678>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a17      	ldr	r2, [pc, #92]	; (8003bac <HAL_DMA_IRQHandler+0x6c8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d004      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x678>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a16      	ldr	r2, [pc, #88]	; (8003bb0 <HAL_DMA_IRQHandler+0x6cc>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d12b      	bne.n	8003bb4 <HAL_DMA_IRQHandler+0x6d0>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0310 	and.w	r3, r3, #16
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	bf14      	ite	ne
 8003b6a:	2301      	movne	r3, #1
 8003b6c:	2300      	moveq	r3, #0
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	e02a      	b.n	8003bc8 <HAL_DMA_IRQHandler+0x6e4>
 8003b72:	bf00      	nop
 8003b74:	40020010 	.word	0x40020010
 8003b78:	40020028 	.word	0x40020028
 8003b7c:	40020040 	.word	0x40020040
 8003b80:	40020058 	.word	0x40020058
 8003b84:	40020070 	.word	0x40020070
 8003b88:	40020088 	.word	0x40020088
 8003b8c:	400200a0 	.word	0x400200a0
 8003b90:	400200b8 	.word	0x400200b8
 8003b94:	40020410 	.word	0x40020410
 8003b98:	40020428 	.word	0x40020428
 8003b9c:	40020440 	.word	0x40020440
 8003ba0:	40020458 	.word	0x40020458
 8003ba4:	40020470 	.word	0x40020470
 8003ba8:	40020488 	.word	0x40020488
 8003bac:	400204a0 	.word	0x400204a0
 8003bb0:	400204b8 	.word	0x400204b8
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	bf14      	ite	ne
 8003bc2:	2301      	movne	r3, #1
 8003bc4:	2300      	moveq	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 8087 	beq.w	8003cdc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd2:	f003 031f 	and.w	r3, r3, #31
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	409a      	lsls	r2, r3
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d139      	bne.n	8003c5e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0216 	bic.w	r2, r2, #22
 8003bf8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	695a      	ldr	r2, [r3, #20]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c08:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d103      	bne.n	8003c1a <HAL_DMA_IRQHandler+0x736>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d007      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 0208 	bic.w	r2, r2, #8
 8003c28:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2e:	f003 031f 	and.w	r3, r3, #31
 8003c32:	223f      	movs	r2, #63	; 0x3f
 8003c34:	409a      	lsls	r2, r3
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 834a 	beq.w	80042e8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	4798      	blx	r3
          }
          return;
 8003c5c:	e344      	b.n	80042e8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d018      	beq.n	8003c9e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d108      	bne.n	8003c8c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d02c      	beq.n	8003cdc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	4798      	blx	r3
 8003c8a:	e027      	b.n	8003cdc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d023      	beq.n	8003cdc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	4798      	blx	r3
 8003c9c:	e01e      	b.n	8003cdc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10f      	bne.n	8003ccc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0210 	bic.w	r2, r2, #16
 8003cba:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 8306 	beq.w	80042f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 8088 	beq.w	8003e04 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a7a      	ldr	r2, [pc, #488]	; (8003eec <HAL_DMA_IRQHandler+0xa08>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d04a      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x8b8>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a79      	ldr	r2, [pc, #484]	; (8003ef0 <HAL_DMA_IRQHandler+0xa0c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d045      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x8b8>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a77      	ldr	r2, [pc, #476]	; (8003ef4 <HAL_DMA_IRQHandler+0xa10>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d040      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x8b8>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a76      	ldr	r2, [pc, #472]	; (8003ef8 <HAL_DMA_IRQHandler+0xa14>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d03b      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x8b8>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a74      	ldr	r2, [pc, #464]	; (8003efc <HAL_DMA_IRQHandler+0xa18>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d036      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x8b8>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a73      	ldr	r2, [pc, #460]	; (8003f00 <HAL_DMA_IRQHandler+0xa1c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d031      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x8b8>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a71      	ldr	r2, [pc, #452]	; (8003f04 <HAL_DMA_IRQHandler+0xa20>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d02c      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x8b8>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a70      	ldr	r2, [pc, #448]	; (8003f08 <HAL_DMA_IRQHandler+0xa24>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d027      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x8b8>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a6e      	ldr	r2, [pc, #440]	; (8003f0c <HAL_DMA_IRQHandler+0xa28>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d022      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x8b8>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a6d      	ldr	r2, [pc, #436]	; (8003f10 <HAL_DMA_IRQHandler+0xa2c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d01d      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x8b8>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a6b      	ldr	r2, [pc, #428]	; (8003f14 <HAL_DMA_IRQHandler+0xa30>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d018      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x8b8>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a6a      	ldr	r2, [pc, #424]	; (8003f18 <HAL_DMA_IRQHandler+0xa34>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d013      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x8b8>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a68      	ldr	r2, [pc, #416]	; (8003f1c <HAL_DMA_IRQHandler+0xa38>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d00e      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x8b8>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a67      	ldr	r2, [pc, #412]	; (8003f20 <HAL_DMA_IRQHandler+0xa3c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d009      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x8b8>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a65      	ldr	r2, [pc, #404]	; (8003f24 <HAL_DMA_IRQHandler+0xa40>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d004      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x8b8>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a64      	ldr	r2, [pc, #400]	; (8003f28 <HAL_DMA_IRQHandler+0xa44>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d108      	bne.n	8003dae <HAL_DMA_IRQHandler+0x8ca>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0201 	bic.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	e007      	b.n	8003dbe <HAL_DMA_IRQHandler+0x8da>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0201 	bic.w	r2, r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d307      	bcc.n	8003dda <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1f2      	bne.n	8003dbe <HAL_DMA_IRQHandler+0x8da>
 8003dd8:	e000      	b.n	8003ddc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003dda:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d004      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2203      	movs	r2, #3
 8003dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003df2:	e003      	b.n	8003dfc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 8272 	beq.w	80042f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	4798      	blx	r3
 8003e16:	e26c      	b.n	80042f2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a43      	ldr	r2, [pc, #268]	; (8003f2c <HAL_DMA_IRQHandler+0xa48>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d022      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x984>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a42      	ldr	r2, [pc, #264]	; (8003f30 <HAL_DMA_IRQHandler+0xa4c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d01d      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x984>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a40      	ldr	r2, [pc, #256]	; (8003f34 <HAL_DMA_IRQHandler+0xa50>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d018      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x984>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a3f      	ldr	r2, [pc, #252]	; (8003f38 <HAL_DMA_IRQHandler+0xa54>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d013      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x984>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a3d      	ldr	r2, [pc, #244]	; (8003f3c <HAL_DMA_IRQHandler+0xa58>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d00e      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x984>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a3c      	ldr	r2, [pc, #240]	; (8003f40 <HAL_DMA_IRQHandler+0xa5c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d009      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x984>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a3a      	ldr	r2, [pc, #232]	; (8003f44 <HAL_DMA_IRQHandler+0xa60>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d004      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x984>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a39      	ldr	r2, [pc, #228]	; (8003f48 <HAL_DMA_IRQHandler+0xa64>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d101      	bne.n	8003e6c <HAL_DMA_IRQHandler+0x988>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e000      	b.n	8003e6e <HAL_DMA_IRQHandler+0x98a>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 823f 	beq.w	80042f2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e80:	f003 031f 	and.w	r3, r3, #31
 8003e84:	2204      	movs	r2, #4
 8003e86:	409a      	lsls	r2, r3
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 80cd 	beq.w	800402c <HAL_DMA_IRQHandler+0xb48>
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 80c7 	beq.w	800402c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea2:	f003 031f 	and.w	r3, r3, #31
 8003ea6:	2204      	movs	r2, #4
 8003ea8:	409a      	lsls	r2, r3
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d049      	beq.n	8003f4c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d109      	bne.n	8003ed6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 8210 	beq.w	80042ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ed4:	e20a      	b.n	80042ec <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 8206 	beq.w	80042ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ee8:	e200      	b.n	80042ec <HAL_DMA_IRQHandler+0xe08>
 8003eea:	bf00      	nop
 8003eec:	40020010 	.word	0x40020010
 8003ef0:	40020028 	.word	0x40020028
 8003ef4:	40020040 	.word	0x40020040
 8003ef8:	40020058 	.word	0x40020058
 8003efc:	40020070 	.word	0x40020070
 8003f00:	40020088 	.word	0x40020088
 8003f04:	400200a0 	.word	0x400200a0
 8003f08:	400200b8 	.word	0x400200b8
 8003f0c:	40020410 	.word	0x40020410
 8003f10:	40020428 	.word	0x40020428
 8003f14:	40020440 	.word	0x40020440
 8003f18:	40020458 	.word	0x40020458
 8003f1c:	40020470 	.word	0x40020470
 8003f20:	40020488 	.word	0x40020488
 8003f24:	400204a0 	.word	0x400204a0
 8003f28:	400204b8 	.word	0x400204b8
 8003f2c:	58025408 	.word	0x58025408
 8003f30:	5802541c 	.word	0x5802541c
 8003f34:	58025430 	.word	0x58025430
 8003f38:	58025444 	.word	0x58025444
 8003f3c:	58025458 	.word	0x58025458
 8003f40:	5802546c 	.word	0x5802546c
 8003f44:	58025480 	.word	0x58025480
 8003f48:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f003 0320 	and.w	r3, r3, #32
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d160      	bne.n	8004018 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a7f      	ldr	r2, [pc, #508]	; (8004158 <HAL_DMA_IRQHandler+0xc74>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d04a      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xb12>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a7d      	ldr	r2, [pc, #500]	; (800415c <HAL_DMA_IRQHandler+0xc78>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d045      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xb12>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a7c      	ldr	r2, [pc, #496]	; (8004160 <HAL_DMA_IRQHandler+0xc7c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d040      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xb12>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a7a      	ldr	r2, [pc, #488]	; (8004164 <HAL_DMA_IRQHandler+0xc80>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d03b      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xb12>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a79      	ldr	r2, [pc, #484]	; (8004168 <HAL_DMA_IRQHandler+0xc84>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d036      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xb12>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a77      	ldr	r2, [pc, #476]	; (800416c <HAL_DMA_IRQHandler+0xc88>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d031      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xb12>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a76      	ldr	r2, [pc, #472]	; (8004170 <HAL_DMA_IRQHandler+0xc8c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d02c      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xb12>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a74      	ldr	r2, [pc, #464]	; (8004174 <HAL_DMA_IRQHandler+0xc90>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d027      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xb12>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a73      	ldr	r2, [pc, #460]	; (8004178 <HAL_DMA_IRQHandler+0xc94>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d022      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xb12>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a71      	ldr	r2, [pc, #452]	; (800417c <HAL_DMA_IRQHandler+0xc98>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d01d      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xb12>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a70      	ldr	r2, [pc, #448]	; (8004180 <HAL_DMA_IRQHandler+0xc9c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d018      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xb12>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a6e      	ldr	r2, [pc, #440]	; (8004184 <HAL_DMA_IRQHandler+0xca0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d013      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xb12>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a6d      	ldr	r2, [pc, #436]	; (8004188 <HAL_DMA_IRQHandler+0xca4>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00e      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xb12>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a6b      	ldr	r2, [pc, #428]	; (800418c <HAL_DMA_IRQHandler+0xca8>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d009      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xb12>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a6a      	ldr	r2, [pc, #424]	; (8004190 <HAL_DMA_IRQHandler+0xcac>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d004      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xb12>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a68      	ldr	r2, [pc, #416]	; (8004194 <HAL_DMA_IRQHandler+0xcb0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d108      	bne.n	8004008 <HAL_DMA_IRQHandler+0xb24>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0208 	bic.w	r2, r2, #8
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	e007      	b.n	8004018 <HAL_DMA_IRQHandler+0xb34>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0204 	bic.w	r2, r2, #4
 8004016:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 8165 	beq.w	80042ec <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800402a:	e15f      	b.n	80042ec <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004030:	f003 031f 	and.w	r3, r3, #31
 8004034:	2202      	movs	r2, #2
 8004036:	409a      	lsls	r2, r3
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	4013      	ands	r3, r2
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80c5 	beq.w	80041cc <HAL_DMA_IRQHandler+0xce8>
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 80bf 	beq.w	80041cc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004052:	f003 031f 	and.w	r3, r3, #31
 8004056:	2202      	movs	r2, #2
 8004058:	409a      	lsls	r2, r3
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d018      	beq.n	800409a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d109      	bne.n	8004086 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 813a 	beq.w	80042f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004084:	e134      	b.n	80042f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 8130 	beq.w	80042f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004098:	e12a      	b.n	80042f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f003 0320 	and.w	r3, r3, #32
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f040 8089 	bne.w	80041b8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a2b      	ldr	r2, [pc, #172]	; (8004158 <HAL_DMA_IRQHandler+0xc74>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d04a      	beq.n	8004146 <HAL_DMA_IRQHandler+0xc62>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a29      	ldr	r2, [pc, #164]	; (800415c <HAL_DMA_IRQHandler+0xc78>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d045      	beq.n	8004146 <HAL_DMA_IRQHandler+0xc62>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a28      	ldr	r2, [pc, #160]	; (8004160 <HAL_DMA_IRQHandler+0xc7c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d040      	beq.n	8004146 <HAL_DMA_IRQHandler+0xc62>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a26      	ldr	r2, [pc, #152]	; (8004164 <HAL_DMA_IRQHandler+0xc80>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d03b      	beq.n	8004146 <HAL_DMA_IRQHandler+0xc62>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a25      	ldr	r2, [pc, #148]	; (8004168 <HAL_DMA_IRQHandler+0xc84>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d036      	beq.n	8004146 <HAL_DMA_IRQHandler+0xc62>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a23      	ldr	r2, [pc, #140]	; (800416c <HAL_DMA_IRQHandler+0xc88>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d031      	beq.n	8004146 <HAL_DMA_IRQHandler+0xc62>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a22      	ldr	r2, [pc, #136]	; (8004170 <HAL_DMA_IRQHandler+0xc8c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d02c      	beq.n	8004146 <HAL_DMA_IRQHandler+0xc62>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a20      	ldr	r2, [pc, #128]	; (8004174 <HAL_DMA_IRQHandler+0xc90>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d027      	beq.n	8004146 <HAL_DMA_IRQHandler+0xc62>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a1f      	ldr	r2, [pc, #124]	; (8004178 <HAL_DMA_IRQHandler+0xc94>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d022      	beq.n	8004146 <HAL_DMA_IRQHandler+0xc62>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a1d      	ldr	r2, [pc, #116]	; (800417c <HAL_DMA_IRQHandler+0xc98>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d01d      	beq.n	8004146 <HAL_DMA_IRQHandler+0xc62>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a1c      	ldr	r2, [pc, #112]	; (8004180 <HAL_DMA_IRQHandler+0xc9c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d018      	beq.n	8004146 <HAL_DMA_IRQHandler+0xc62>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a1a      	ldr	r2, [pc, #104]	; (8004184 <HAL_DMA_IRQHandler+0xca0>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d013      	beq.n	8004146 <HAL_DMA_IRQHandler+0xc62>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a19      	ldr	r2, [pc, #100]	; (8004188 <HAL_DMA_IRQHandler+0xca4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00e      	beq.n	8004146 <HAL_DMA_IRQHandler+0xc62>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a17      	ldr	r2, [pc, #92]	; (800418c <HAL_DMA_IRQHandler+0xca8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d009      	beq.n	8004146 <HAL_DMA_IRQHandler+0xc62>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a16      	ldr	r2, [pc, #88]	; (8004190 <HAL_DMA_IRQHandler+0xcac>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d004      	beq.n	8004146 <HAL_DMA_IRQHandler+0xc62>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a14      	ldr	r2, [pc, #80]	; (8004194 <HAL_DMA_IRQHandler+0xcb0>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d128      	bne.n	8004198 <HAL_DMA_IRQHandler+0xcb4>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0214 	bic.w	r2, r2, #20
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	e027      	b.n	80041a8 <HAL_DMA_IRQHandler+0xcc4>
 8004158:	40020010 	.word	0x40020010
 800415c:	40020028 	.word	0x40020028
 8004160:	40020040 	.word	0x40020040
 8004164:	40020058 	.word	0x40020058
 8004168:	40020070 	.word	0x40020070
 800416c:	40020088 	.word	0x40020088
 8004170:	400200a0 	.word	0x400200a0
 8004174:	400200b8 	.word	0x400200b8
 8004178:	40020410 	.word	0x40020410
 800417c:	40020428 	.word	0x40020428
 8004180:	40020440 	.word	0x40020440
 8004184:	40020458 	.word	0x40020458
 8004188:	40020470 	.word	0x40020470
 800418c:	40020488 	.word	0x40020488
 8004190:	400204a0 	.word	0x400204a0
 8004194:	400204b8 	.word	0x400204b8
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 020a 	bic.w	r2, r2, #10
 80041a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 8097 	beq.w	80042f0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041ca:	e091      	b.n	80042f0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d0:	f003 031f 	and.w	r3, r3, #31
 80041d4:	2208      	movs	r2, #8
 80041d6:	409a      	lsls	r2, r3
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	4013      	ands	r3, r2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 8088 	beq.w	80042f2 <HAL_DMA_IRQHandler+0xe0e>
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 8082 	beq.w	80042f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a41      	ldr	r2, [pc, #260]	; (80042f8 <HAL_DMA_IRQHandler+0xe14>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d04a      	beq.n	800428e <HAL_DMA_IRQHandler+0xdaa>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a3f      	ldr	r2, [pc, #252]	; (80042fc <HAL_DMA_IRQHandler+0xe18>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d045      	beq.n	800428e <HAL_DMA_IRQHandler+0xdaa>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a3e      	ldr	r2, [pc, #248]	; (8004300 <HAL_DMA_IRQHandler+0xe1c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d040      	beq.n	800428e <HAL_DMA_IRQHandler+0xdaa>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a3c      	ldr	r2, [pc, #240]	; (8004304 <HAL_DMA_IRQHandler+0xe20>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d03b      	beq.n	800428e <HAL_DMA_IRQHandler+0xdaa>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a3b      	ldr	r2, [pc, #236]	; (8004308 <HAL_DMA_IRQHandler+0xe24>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d036      	beq.n	800428e <HAL_DMA_IRQHandler+0xdaa>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a39      	ldr	r2, [pc, #228]	; (800430c <HAL_DMA_IRQHandler+0xe28>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d031      	beq.n	800428e <HAL_DMA_IRQHandler+0xdaa>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a38      	ldr	r2, [pc, #224]	; (8004310 <HAL_DMA_IRQHandler+0xe2c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d02c      	beq.n	800428e <HAL_DMA_IRQHandler+0xdaa>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a36      	ldr	r2, [pc, #216]	; (8004314 <HAL_DMA_IRQHandler+0xe30>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d027      	beq.n	800428e <HAL_DMA_IRQHandler+0xdaa>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a35      	ldr	r2, [pc, #212]	; (8004318 <HAL_DMA_IRQHandler+0xe34>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d022      	beq.n	800428e <HAL_DMA_IRQHandler+0xdaa>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a33      	ldr	r2, [pc, #204]	; (800431c <HAL_DMA_IRQHandler+0xe38>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d01d      	beq.n	800428e <HAL_DMA_IRQHandler+0xdaa>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a32      	ldr	r2, [pc, #200]	; (8004320 <HAL_DMA_IRQHandler+0xe3c>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d018      	beq.n	800428e <HAL_DMA_IRQHandler+0xdaa>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a30      	ldr	r2, [pc, #192]	; (8004324 <HAL_DMA_IRQHandler+0xe40>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d013      	beq.n	800428e <HAL_DMA_IRQHandler+0xdaa>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a2f      	ldr	r2, [pc, #188]	; (8004328 <HAL_DMA_IRQHandler+0xe44>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d00e      	beq.n	800428e <HAL_DMA_IRQHandler+0xdaa>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a2d      	ldr	r2, [pc, #180]	; (800432c <HAL_DMA_IRQHandler+0xe48>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d009      	beq.n	800428e <HAL_DMA_IRQHandler+0xdaa>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a2c      	ldr	r2, [pc, #176]	; (8004330 <HAL_DMA_IRQHandler+0xe4c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d004      	beq.n	800428e <HAL_DMA_IRQHandler+0xdaa>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a2a      	ldr	r2, [pc, #168]	; (8004334 <HAL_DMA_IRQHandler+0xe50>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d108      	bne.n	80042a0 <HAL_DMA_IRQHandler+0xdbc>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 021c 	bic.w	r2, r2, #28
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	e007      	b.n	80042b0 <HAL_DMA_IRQHandler+0xdcc>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 020e 	bic.w	r2, r2, #14
 80042ae:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b4:	f003 031f 	and.w	r3, r3, #31
 80042b8:	2201      	movs	r2, #1
 80042ba:	409a      	lsls	r2, r3
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d009      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	4798      	blx	r3
 80042e6:	e004      	b.n	80042f2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80042e8:	bf00      	nop
 80042ea:	e002      	b.n	80042f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042ec:	bf00      	nop
 80042ee:	e000      	b.n	80042f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042f0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80042f2:	3728      	adds	r7, #40	; 0x28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40020010 	.word	0x40020010
 80042fc:	40020028 	.word	0x40020028
 8004300:	40020040 	.word	0x40020040
 8004304:	40020058 	.word	0x40020058
 8004308:	40020070 	.word	0x40020070
 800430c:	40020088 	.word	0x40020088
 8004310:	400200a0 	.word	0x400200a0
 8004314:	400200b8 	.word	0x400200b8
 8004318:	40020410 	.word	0x40020410
 800431c:	40020428 	.word	0x40020428
 8004320:	40020440 	.word	0x40020440
 8004324:	40020458 	.word	0x40020458
 8004328:	40020470 	.word	0x40020470
 800432c:	40020488 	.word	0x40020488
 8004330:	400204a0 	.word	0x400204a0
 8004334:	400204b8 	.word	0x400204b8

08004338 <HAL_DMA_RegisterCallback>:
  * @param  pCallback:            pointer to private callback function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	460b      	mov	r3, r1
 8004342:	607a      	str	r2, [r7, #4]
 8004344:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	75fb      	strb	r3, [r7, #23]

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_DMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e045      	b.n	80043e0 <HAL_DMA_RegisterCallback+0xa8>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800435a:	2b01      	cmp	r3, #1
 800435c:	d101      	bne.n	8004362 <HAL_DMA_RegisterCallback+0x2a>
 800435e:	2302      	movs	r3, #2
 8004360:	e03e      	b.n	80043e0 <HAL_DMA_RegisterCallback+0xa8>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b01      	cmp	r3, #1
 8004374:	d12d      	bne.n	80043d2 <HAL_DMA_RegisterCallback+0x9a>
  {
    switch (CallbackID)
 8004376:	7afb      	ldrb	r3, [r7, #11]
 8004378:	2b05      	cmp	r3, #5
 800437a:	d827      	bhi.n	80043cc <HAL_DMA_RegisterCallback+0x94>
 800437c:	a201      	add	r2, pc, #4	; (adr r2, 8004384 <HAL_DMA_RegisterCallback+0x4c>)
 800437e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004382:	bf00      	nop
 8004384:	0800439d 	.word	0x0800439d
 8004388:	080043a5 	.word	0x080043a5
 800438c:	080043ad 	.word	0x080043ad
 8004390:	080043b5 	.word	0x080043b5
 8004394:	080043bd 	.word	0x080043bd
 8004398:	080043c5 	.word	0x080043c5
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80043a2:	e018      	b.n	80043d6 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80043aa:	e014      	b.n	80043d6 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80043b2:	e010      	b.n	80043d6 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80043ba:	e00c      	b.n	80043d6 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80043c2:	e008      	b.n	80043d6 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80043ca:	e004      	b.n	80043d6 <HAL_DMA_RegisterCallback+0x9e>

    default:
      status =  HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	75fb      	strb	r3, [r7, #23]
      break;
 80043d0:	e001      	b.n	80043d6 <HAL_DMA_RegisterCallback+0x9e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80043de:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	371c      	adds	r7, #28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
 8004410:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004416:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a7f      	ldr	r2, [pc, #508]	; (8004620 <DMA_SetConfig+0x21c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d072      	beq.n	800450e <DMA_SetConfig+0x10a>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a7d      	ldr	r2, [pc, #500]	; (8004624 <DMA_SetConfig+0x220>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d06d      	beq.n	800450e <DMA_SetConfig+0x10a>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a7c      	ldr	r2, [pc, #496]	; (8004628 <DMA_SetConfig+0x224>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d068      	beq.n	800450e <DMA_SetConfig+0x10a>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a7a      	ldr	r2, [pc, #488]	; (800462c <DMA_SetConfig+0x228>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d063      	beq.n	800450e <DMA_SetConfig+0x10a>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a79      	ldr	r2, [pc, #484]	; (8004630 <DMA_SetConfig+0x22c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d05e      	beq.n	800450e <DMA_SetConfig+0x10a>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a77      	ldr	r2, [pc, #476]	; (8004634 <DMA_SetConfig+0x230>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d059      	beq.n	800450e <DMA_SetConfig+0x10a>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a76      	ldr	r2, [pc, #472]	; (8004638 <DMA_SetConfig+0x234>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d054      	beq.n	800450e <DMA_SetConfig+0x10a>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a74      	ldr	r2, [pc, #464]	; (800463c <DMA_SetConfig+0x238>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d04f      	beq.n	800450e <DMA_SetConfig+0x10a>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a73      	ldr	r2, [pc, #460]	; (8004640 <DMA_SetConfig+0x23c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d04a      	beq.n	800450e <DMA_SetConfig+0x10a>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a71      	ldr	r2, [pc, #452]	; (8004644 <DMA_SetConfig+0x240>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d045      	beq.n	800450e <DMA_SetConfig+0x10a>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a70      	ldr	r2, [pc, #448]	; (8004648 <DMA_SetConfig+0x244>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d040      	beq.n	800450e <DMA_SetConfig+0x10a>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a6e      	ldr	r2, [pc, #440]	; (800464c <DMA_SetConfig+0x248>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d03b      	beq.n	800450e <DMA_SetConfig+0x10a>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a6d      	ldr	r2, [pc, #436]	; (8004650 <DMA_SetConfig+0x24c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d036      	beq.n	800450e <DMA_SetConfig+0x10a>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a6b      	ldr	r2, [pc, #428]	; (8004654 <DMA_SetConfig+0x250>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d031      	beq.n	800450e <DMA_SetConfig+0x10a>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a6a      	ldr	r2, [pc, #424]	; (8004658 <DMA_SetConfig+0x254>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d02c      	beq.n	800450e <DMA_SetConfig+0x10a>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a68      	ldr	r2, [pc, #416]	; (800465c <DMA_SetConfig+0x258>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d027      	beq.n	800450e <DMA_SetConfig+0x10a>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a67      	ldr	r2, [pc, #412]	; (8004660 <DMA_SetConfig+0x25c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d022      	beq.n	800450e <DMA_SetConfig+0x10a>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a65      	ldr	r2, [pc, #404]	; (8004664 <DMA_SetConfig+0x260>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d01d      	beq.n	800450e <DMA_SetConfig+0x10a>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a64      	ldr	r2, [pc, #400]	; (8004668 <DMA_SetConfig+0x264>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d018      	beq.n	800450e <DMA_SetConfig+0x10a>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a62      	ldr	r2, [pc, #392]	; (800466c <DMA_SetConfig+0x268>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d013      	beq.n	800450e <DMA_SetConfig+0x10a>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a61      	ldr	r2, [pc, #388]	; (8004670 <DMA_SetConfig+0x26c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d00e      	beq.n	800450e <DMA_SetConfig+0x10a>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a5f      	ldr	r2, [pc, #380]	; (8004674 <DMA_SetConfig+0x270>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d009      	beq.n	800450e <DMA_SetConfig+0x10a>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a5e      	ldr	r2, [pc, #376]	; (8004678 <DMA_SetConfig+0x274>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d004      	beq.n	800450e <DMA_SetConfig+0x10a>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a5c      	ldr	r2, [pc, #368]	; (800467c <DMA_SetConfig+0x278>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d101      	bne.n	8004512 <DMA_SetConfig+0x10e>
 800450e:	2301      	movs	r3, #1
 8004510:	e000      	b.n	8004514 <DMA_SetConfig+0x110>
 8004512:	2300      	movs	r3, #0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00d      	beq.n	8004534 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004520:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004526:	2b00      	cmp	r3, #0
 8004528:	d004      	beq.n	8004534 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004532:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a39      	ldr	r2, [pc, #228]	; (8004620 <DMA_SetConfig+0x21c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d04a      	beq.n	80045d4 <DMA_SetConfig+0x1d0>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a38      	ldr	r2, [pc, #224]	; (8004624 <DMA_SetConfig+0x220>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d045      	beq.n	80045d4 <DMA_SetConfig+0x1d0>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a36      	ldr	r2, [pc, #216]	; (8004628 <DMA_SetConfig+0x224>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d040      	beq.n	80045d4 <DMA_SetConfig+0x1d0>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a35      	ldr	r2, [pc, #212]	; (800462c <DMA_SetConfig+0x228>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d03b      	beq.n	80045d4 <DMA_SetConfig+0x1d0>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a33      	ldr	r2, [pc, #204]	; (8004630 <DMA_SetConfig+0x22c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d036      	beq.n	80045d4 <DMA_SetConfig+0x1d0>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a32      	ldr	r2, [pc, #200]	; (8004634 <DMA_SetConfig+0x230>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d031      	beq.n	80045d4 <DMA_SetConfig+0x1d0>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a30      	ldr	r2, [pc, #192]	; (8004638 <DMA_SetConfig+0x234>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d02c      	beq.n	80045d4 <DMA_SetConfig+0x1d0>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a2f      	ldr	r2, [pc, #188]	; (800463c <DMA_SetConfig+0x238>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d027      	beq.n	80045d4 <DMA_SetConfig+0x1d0>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a2d      	ldr	r2, [pc, #180]	; (8004640 <DMA_SetConfig+0x23c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d022      	beq.n	80045d4 <DMA_SetConfig+0x1d0>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a2c      	ldr	r2, [pc, #176]	; (8004644 <DMA_SetConfig+0x240>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d01d      	beq.n	80045d4 <DMA_SetConfig+0x1d0>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a2a      	ldr	r2, [pc, #168]	; (8004648 <DMA_SetConfig+0x244>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d018      	beq.n	80045d4 <DMA_SetConfig+0x1d0>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a29      	ldr	r2, [pc, #164]	; (800464c <DMA_SetConfig+0x248>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d013      	beq.n	80045d4 <DMA_SetConfig+0x1d0>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a27      	ldr	r2, [pc, #156]	; (8004650 <DMA_SetConfig+0x24c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00e      	beq.n	80045d4 <DMA_SetConfig+0x1d0>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a26      	ldr	r2, [pc, #152]	; (8004654 <DMA_SetConfig+0x250>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d009      	beq.n	80045d4 <DMA_SetConfig+0x1d0>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a24      	ldr	r2, [pc, #144]	; (8004658 <DMA_SetConfig+0x254>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d004      	beq.n	80045d4 <DMA_SetConfig+0x1d0>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a23      	ldr	r2, [pc, #140]	; (800465c <DMA_SetConfig+0x258>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d101      	bne.n	80045d8 <DMA_SetConfig+0x1d4>
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <DMA_SetConfig+0x1d6>
 80045d8:	2300      	movs	r3, #0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d059      	beq.n	8004692 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e2:	f003 031f 	and.w	r3, r3, #31
 80045e6:	223f      	movs	r2, #63	; 0x3f
 80045e8:	409a      	lsls	r2, r3
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045fc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	2b40      	cmp	r3, #64	; 0x40
 800460c:	d138      	bne.n	8004680 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800461e:	e086      	b.n	800472e <DMA_SetConfig+0x32a>
 8004620:	40020010 	.word	0x40020010
 8004624:	40020028 	.word	0x40020028
 8004628:	40020040 	.word	0x40020040
 800462c:	40020058 	.word	0x40020058
 8004630:	40020070 	.word	0x40020070
 8004634:	40020088 	.word	0x40020088
 8004638:	400200a0 	.word	0x400200a0
 800463c:	400200b8 	.word	0x400200b8
 8004640:	40020410 	.word	0x40020410
 8004644:	40020428 	.word	0x40020428
 8004648:	40020440 	.word	0x40020440
 800464c:	40020458 	.word	0x40020458
 8004650:	40020470 	.word	0x40020470
 8004654:	40020488 	.word	0x40020488
 8004658:	400204a0 	.word	0x400204a0
 800465c:	400204b8 	.word	0x400204b8
 8004660:	58025408 	.word	0x58025408
 8004664:	5802541c 	.word	0x5802541c
 8004668:	58025430 	.word	0x58025430
 800466c:	58025444 	.word	0x58025444
 8004670:	58025458 	.word	0x58025458
 8004674:	5802546c 	.word	0x5802546c
 8004678:	58025480 	.word	0x58025480
 800467c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	60da      	str	r2, [r3, #12]
}
 8004690:	e04d      	b.n	800472e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a29      	ldr	r2, [pc, #164]	; (800473c <DMA_SetConfig+0x338>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d022      	beq.n	80046e2 <DMA_SetConfig+0x2de>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a27      	ldr	r2, [pc, #156]	; (8004740 <DMA_SetConfig+0x33c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d01d      	beq.n	80046e2 <DMA_SetConfig+0x2de>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a26      	ldr	r2, [pc, #152]	; (8004744 <DMA_SetConfig+0x340>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d018      	beq.n	80046e2 <DMA_SetConfig+0x2de>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a24      	ldr	r2, [pc, #144]	; (8004748 <DMA_SetConfig+0x344>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d013      	beq.n	80046e2 <DMA_SetConfig+0x2de>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a23      	ldr	r2, [pc, #140]	; (800474c <DMA_SetConfig+0x348>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00e      	beq.n	80046e2 <DMA_SetConfig+0x2de>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a21      	ldr	r2, [pc, #132]	; (8004750 <DMA_SetConfig+0x34c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d009      	beq.n	80046e2 <DMA_SetConfig+0x2de>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a20      	ldr	r2, [pc, #128]	; (8004754 <DMA_SetConfig+0x350>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d004      	beq.n	80046e2 <DMA_SetConfig+0x2de>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a1e      	ldr	r2, [pc, #120]	; (8004758 <DMA_SetConfig+0x354>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d101      	bne.n	80046e6 <DMA_SetConfig+0x2e2>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <DMA_SetConfig+0x2e4>
 80046e6:	2300      	movs	r3, #0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d020      	beq.n	800472e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f0:	f003 031f 	and.w	r3, r3, #31
 80046f4:	2201      	movs	r2, #1
 80046f6:	409a      	lsls	r2, r3
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	2b40      	cmp	r3, #64	; 0x40
 800470a:	d108      	bne.n	800471e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	60da      	str	r2, [r3, #12]
}
 800471c:	e007      	b.n	800472e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	60da      	str	r2, [r3, #12]
}
 800472e:	bf00      	nop
 8004730:	371c      	adds	r7, #28
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	58025408 	.word	0x58025408
 8004740:	5802541c 	.word	0x5802541c
 8004744:	58025430 	.word	0x58025430
 8004748:	58025444 	.word	0x58025444
 800474c:	58025458 	.word	0x58025458
 8004750:	5802546c 	.word	0x5802546c
 8004754:	58025480 	.word	0x58025480
 8004758:	58025494 	.word	0x58025494

0800475c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a42      	ldr	r2, [pc, #264]	; (8004874 <DMA_CalcBaseAndBitshift+0x118>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d04a      	beq.n	8004804 <DMA_CalcBaseAndBitshift+0xa8>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a41      	ldr	r2, [pc, #260]	; (8004878 <DMA_CalcBaseAndBitshift+0x11c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d045      	beq.n	8004804 <DMA_CalcBaseAndBitshift+0xa8>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a3f      	ldr	r2, [pc, #252]	; (800487c <DMA_CalcBaseAndBitshift+0x120>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d040      	beq.n	8004804 <DMA_CalcBaseAndBitshift+0xa8>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a3e      	ldr	r2, [pc, #248]	; (8004880 <DMA_CalcBaseAndBitshift+0x124>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d03b      	beq.n	8004804 <DMA_CalcBaseAndBitshift+0xa8>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a3c      	ldr	r2, [pc, #240]	; (8004884 <DMA_CalcBaseAndBitshift+0x128>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d036      	beq.n	8004804 <DMA_CalcBaseAndBitshift+0xa8>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a3b      	ldr	r2, [pc, #236]	; (8004888 <DMA_CalcBaseAndBitshift+0x12c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d031      	beq.n	8004804 <DMA_CalcBaseAndBitshift+0xa8>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a39      	ldr	r2, [pc, #228]	; (800488c <DMA_CalcBaseAndBitshift+0x130>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d02c      	beq.n	8004804 <DMA_CalcBaseAndBitshift+0xa8>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a38      	ldr	r2, [pc, #224]	; (8004890 <DMA_CalcBaseAndBitshift+0x134>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d027      	beq.n	8004804 <DMA_CalcBaseAndBitshift+0xa8>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a36      	ldr	r2, [pc, #216]	; (8004894 <DMA_CalcBaseAndBitshift+0x138>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d022      	beq.n	8004804 <DMA_CalcBaseAndBitshift+0xa8>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a35      	ldr	r2, [pc, #212]	; (8004898 <DMA_CalcBaseAndBitshift+0x13c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d01d      	beq.n	8004804 <DMA_CalcBaseAndBitshift+0xa8>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a33      	ldr	r2, [pc, #204]	; (800489c <DMA_CalcBaseAndBitshift+0x140>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d018      	beq.n	8004804 <DMA_CalcBaseAndBitshift+0xa8>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a32      	ldr	r2, [pc, #200]	; (80048a0 <DMA_CalcBaseAndBitshift+0x144>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d013      	beq.n	8004804 <DMA_CalcBaseAndBitshift+0xa8>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a30      	ldr	r2, [pc, #192]	; (80048a4 <DMA_CalcBaseAndBitshift+0x148>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d00e      	beq.n	8004804 <DMA_CalcBaseAndBitshift+0xa8>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a2f      	ldr	r2, [pc, #188]	; (80048a8 <DMA_CalcBaseAndBitshift+0x14c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d009      	beq.n	8004804 <DMA_CalcBaseAndBitshift+0xa8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a2d      	ldr	r2, [pc, #180]	; (80048ac <DMA_CalcBaseAndBitshift+0x150>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d004      	beq.n	8004804 <DMA_CalcBaseAndBitshift+0xa8>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a2c      	ldr	r2, [pc, #176]	; (80048b0 <DMA_CalcBaseAndBitshift+0x154>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d101      	bne.n	8004808 <DMA_CalcBaseAndBitshift+0xac>
 8004804:	2301      	movs	r3, #1
 8004806:	e000      	b.n	800480a <DMA_CalcBaseAndBitshift+0xae>
 8004808:	2300      	movs	r3, #0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d024      	beq.n	8004858 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	b2db      	uxtb	r3, r3
 8004814:	3b10      	subs	r3, #16
 8004816:	4a27      	ldr	r2, [pc, #156]	; (80048b4 <DMA_CalcBaseAndBitshift+0x158>)
 8004818:	fba2 2303 	umull	r2, r3, r2, r3
 800481c:	091b      	lsrs	r3, r3, #4
 800481e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f003 0307 	and.w	r3, r3, #7
 8004826:	4a24      	ldr	r2, [pc, #144]	; (80048b8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004828:	5cd3      	ldrb	r3, [r2, r3]
 800482a:	461a      	mov	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2b03      	cmp	r3, #3
 8004834:	d908      	bls.n	8004848 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	4b1f      	ldr	r3, [pc, #124]	; (80048bc <DMA_CalcBaseAndBitshift+0x160>)
 800483e:	4013      	ands	r3, r2
 8004840:	1d1a      	adds	r2, r3, #4
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	659a      	str	r2, [r3, #88]	; 0x58
 8004846:	e00d      	b.n	8004864 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	4b1b      	ldr	r3, [pc, #108]	; (80048bc <DMA_CalcBaseAndBitshift+0x160>)
 8004850:	4013      	ands	r3, r2
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6593      	str	r3, [r2, #88]	; 0x58
 8004856:	e005      	b.n	8004864 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004868:	4618      	mov	r0, r3
 800486a:	3714      	adds	r7, #20
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr
 8004874:	40020010 	.word	0x40020010
 8004878:	40020028 	.word	0x40020028
 800487c:	40020040 	.word	0x40020040
 8004880:	40020058 	.word	0x40020058
 8004884:	40020070 	.word	0x40020070
 8004888:	40020088 	.word	0x40020088
 800488c:	400200a0 	.word	0x400200a0
 8004890:	400200b8 	.word	0x400200b8
 8004894:	40020410 	.word	0x40020410
 8004898:	40020428 	.word	0x40020428
 800489c:	40020440 	.word	0x40020440
 80048a0:	40020458 	.word	0x40020458
 80048a4:	40020470 	.word	0x40020470
 80048a8:	40020488 	.word	0x40020488
 80048ac:	400204a0 	.word	0x400204a0
 80048b0:	400204b8 	.word	0x400204b8
 80048b4:	aaaaaaab 	.word	0xaaaaaaab
 80048b8:	080205f8 	.word	0x080205f8
 80048bc:	fffffc00 	.word	0xfffffc00

080048c0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048c8:	2300      	movs	r3, #0
 80048ca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d120      	bne.n	8004916 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d8:	2b03      	cmp	r3, #3
 80048da:	d858      	bhi.n	800498e <DMA_CheckFifoParam+0xce>
 80048dc:	a201      	add	r2, pc, #4	; (adr r2, 80048e4 <DMA_CheckFifoParam+0x24>)
 80048de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e2:	bf00      	nop
 80048e4:	080048f5 	.word	0x080048f5
 80048e8:	08004907 	.word	0x08004907
 80048ec:	080048f5 	.word	0x080048f5
 80048f0:	0800498f 	.word	0x0800498f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d048      	beq.n	8004992 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004904:	e045      	b.n	8004992 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800490e:	d142      	bne.n	8004996 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004914:	e03f      	b.n	8004996 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800491e:	d123      	bne.n	8004968 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	2b03      	cmp	r3, #3
 8004926:	d838      	bhi.n	800499a <DMA_CheckFifoParam+0xda>
 8004928:	a201      	add	r2, pc, #4	; (adr r2, 8004930 <DMA_CheckFifoParam+0x70>)
 800492a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492e:	bf00      	nop
 8004930:	08004941 	.word	0x08004941
 8004934:	08004947 	.word	0x08004947
 8004938:	08004941 	.word	0x08004941
 800493c:	08004959 	.word	0x08004959
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	73fb      	strb	r3, [r7, #15]
        break;
 8004944:	e030      	b.n	80049a8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d025      	beq.n	800499e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004956:	e022      	b.n	800499e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004960:	d11f      	bne.n	80049a2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004966:	e01c      	b.n	80049a2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496c:	2b02      	cmp	r3, #2
 800496e:	d902      	bls.n	8004976 <DMA_CheckFifoParam+0xb6>
 8004970:	2b03      	cmp	r3, #3
 8004972:	d003      	beq.n	800497c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004974:	e018      	b.n	80049a8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	73fb      	strb	r3, [r7, #15]
        break;
 800497a:	e015      	b.n	80049a8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00e      	beq.n	80049a6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	73fb      	strb	r3, [r7, #15]
    break;
 800498c:	e00b      	b.n	80049a6 <DMA_CheckFifoParam+0xe6>
        break;
 800498e:	bf00      	nop
 8004990:	e00a      	b.n	80049a8 <DMA_CheckFifoParam+0xe8>
        break;
 8004992:	bf00      	nop
 8004994:	e008      	b.n	80049a8 <DMA_CheckFifoParam+0xe8>
        break;
 8004996:	bf00      	nop
 8004998:	e006      	b.n	80049a8 <DMA_CheckFifoParam+0xe8>
        break;
 800499a:	bf00      	nop
 800499c:	e004      	b.n	80049a8 <DMA_CheckFifoParam+0xe8>
        break;
 800499e:	bf00      	nop
 80049a0:	e002      	b.n	80049a8 <DMA_CheckFifoParam+0xe8>
        break;
 80049a2:	bf00      	nop
 80049a4:	e000      	b.n	80049a8 <DMA_CheckFifoParam+0xe8>
    break;
 80049a6:	bf00      	nop
    }
  }

  return status;
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop

080049b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a38      	ldr	r2, [pc, #224]	; (8004aac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d022      	beq.n	8004a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a36      	ldr	r2, [pc, #216]	; (8004ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d01d      	beq.n	8004a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a35      	ldr	r2, [pc, #212]	; (8004ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d018      	beq.n	8004a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a33      	ldr	r2, [pc, #204]	; (8004ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d013      	beq.n	8004a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a32      	ldr	r2, [pc, #200]	; (8004abc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d00e      	beq.n	8004a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a30      	ldr	r2, [pc, #192]	; (8004ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d009      	beq.n	8004a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a2f      	ldr	r2, [pc, #188]	; (8004ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d004      	beq.n	8004a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a2d      	ldr	r2, [pc, #180]	; (8004ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d101      	bne.n	8004a1a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004a16:	2301      	movs	r3, #1
 8004a18:	e000      	b.n	8004a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d01a      	beq.n	8004a56 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	3b08      	subs	r3, #8
 8004a28:	4a28      	ldr	r2, [pc, #160]	; (8004acc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2e:	091b      	lsrs	r3, r3, #4
 8004a30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	4b26      	ldr	r3, [pc, #152]	; (8004ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004a36:	4413      	add	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a24      	ldr	r2, [pc, #144]	; (8004ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004a44:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f003 031f 	and.w	r3, r3, #31
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	409a      	lsls	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004a54:	e024      	b.n	8004aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	3b10      	subs	r3, #16
 8004a5e:	4a1e      	ldr	r2, [pc, #120]	; (8004ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004a60:	fba2 2303 	umull	r2, r3, r2, r3
 8004a64:	091b      	lsrs	r3, r3, #4
 8004a66:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	4a1c      	ldr	r2, [pc, #112]	; (8004adc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d806      	bhi.n	8004a7e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	4a1b      	ldr	r2, [pc, #108]	; (8004ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d902      	bls.n	8004a7e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	3308      	adds	r3, #8
 8004a7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4b18      	ldr	r3, [pc, #96]	; (8004ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	461a      	mov	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a16      	ldr	r2, [pc, #88]	; (8004ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004a90:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f003 031f 	and.w	r3, r3, #31
 8004a98:	2201      	movs	r2, #1
 8004a9a:	409a      	lsls	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004aa0:	bf00      	nop
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	58025408 	.word	0x58025408
 8004ab0:	5802541c 	.word	0x5802541c
 8004ab4:	58025430 	.word	0x58025430
 8004ab8:	58025444 	.word	0x58025444
 8004abc:	58025458 	.word	0x58025458
 8004ac0:	5802546c 	.word	0x5802546c
 8004ac4:	58025480 	.word	0x58025480
 8004ac8:	58025494 	.word	0x58025494
 8004acc:	cccccccd 	.word	0xcccccccd
 8004ad0:	16009600 	.word	0x16009600
 8004ad4:	58025880 	.word	0x58025880
 8004ad8:	aaaaaaab 	.word	0xaaaaaaab
 8004adc:	400204b8 	.word	0x400204b8
 8004ae0:	4002040f 	.word	0x4002040f
 8004ae4:	10008200 	.word	0x10008200
 8004ae8:	40020880 	.word	0x40020880

08004aec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d04a      	beq.n	8004b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d847      	bhi.n	8004b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a25      	ldr	r2, [pc, #148]	; (8004ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d022      	beq.n	8004b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a24      	ldr	r2, [pc, #144]	; (8004ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d01d      	beq.n	8004b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a22      	ldr	r2, [pc, #136]	; (8004bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d018      	beq.n	8004b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a21      	ldr	r2, [pc, #132]	; (8004bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d013      	beq.n	8004b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a1f      	ldr	r2, [pc, #124]	; (8004bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00e      	beq.n	8004b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a1e      	ldr	r2, [pc, #120]	; (8004bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d009      	beq.n	8004b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a1c      	ldr	r2, [pc, #112]	; (8004bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d004      	beq.n	8004b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a1b      	ldr	r2, [pc, #108]	; (8004bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d101      	bne.n	8004b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e000      	b.n	8004b5e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	4b17      	ldr	r3, [pc, #92]	; (8004bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004b66:	4413      	add	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a15      	ldr	r2, [pc, #84]	; (8004bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004b74:	671a      	str	r2, [r3, #112]	; 0x70
 8004b76:	e009      	b.n	8004b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	4b14      	ldr	r3, [pc, #80]	; (8004bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	461a      	mov	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a11      	ldr	r2, [pc, #68]	; (8004bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004b8a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	2201      	movs	r2, #1
 8004b92:	409a      	lsls	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004b98:	bf00      	nop
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr
 8004ba4:	58025408 	.word	0x58025408
 8004ba8:	5802541c 	.word	0x5802541c
 8004bac:	58025430 	.word	0x58025430
 8004bb0:	58025444 	.word	0x58025444
 8004bb4:	58025458 	.word	0x58025458
 8004bb8:	5802546c 	.word	0x5802546c
 8004bbc:	58025480 	.word	0x58025480
 8004bc0:	58025494 	.word	0x58025494
 8004bc4:	1600963f 	.word	0x1600963f
 8004bc8:	58025940 	.word	0x58025940
 8004bcc:	1000823f 	.word	0x1000823f
 8004bd0:	40020940 	.word	0x40020940

08004bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b089      	sub	sp, #36	; 0x24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004be2:	4b89      	ldr	r3, [pc, #548]	; (8004e08 <HAL_GPIO_Init+0x234>)
 8004be4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004be6:	e194      	b.n	8004f12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	2101      	movs	r1, #1
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 8186 	beq.w	8004f0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f003 0303 	and.w	r3, r3, #3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d005      	beq.n	8004c18 <HAL_GPIO_Init+0x44>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f003 0303 	and.w	r3, r3, #3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d130      	bne.n	8004c7a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	2203      	movs	r2, #3
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	43db      	mvns	r3, r3
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c4e:	2201      	movs	r2, #1
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	43db      	mvns	r3, r3
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	091b      	lsrs	r3, r3, #4
 8004c64:	f003 0201 	and.w	r2, r3, #1
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	2b03      	cmp	r3, #3
 8004c84:	d017      	beq.n	8004cb6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	2203      	movs	r2, #3
 8004c92:	fa02 f303 	lsl.w	r3, r2, r3
 8004c96:	43db      	mvns	r3, r3
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	689a      	ldr	r2, [r3, #8]
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d123      	bne.n	8004d0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	08da      	lsrs	r2, r3, #3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3208      	adds	r2, #8
 8004cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	220f      	movs	r2, #15
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	43db      	mvns	r3, r3
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	691a      	ldr	r2, [r3, #16]
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	08da      	lsrs	r2, r3, #3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3208      	adds	r2, #8
 8004d04:	69b9      	ldr	r1, [r7, #24]
 8004d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	2203      	movs	r2, #3
 8004d16:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1a:	43db      	mvns	r3, r3
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f003 0203 	and.w	r2, r3, #3
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 80e0 	beq.w	8004f0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d4c:	4b2f      	ldr	r3, [pc, #188]	; (8004e0c <HAL_GPIO_Init+0x238>)
 8004d4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d52:	4a2e      	ldr	r2, [pc, #184]	; (8004e0c <HAL_GPIO_Init+0x238>)
 8004d54:	f043 0302 	orr.w	r3, r3, #2
 8004d58:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004d5c:	4b2b      	ldr	r3, [pc, #172]	; (8004e0c <HAL_GPIO_Init+0x238>)
 8004d5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d6a:	4a29      	ldr	r2, [pc, #164]	; (8004e10 <HAL_GPIO_Init+0x23c>)
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	089b      	lsrs	r3, r3, #2
 8004d70:	3302      	adds	r3, #2
 8004d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	220f      	movs	r2, #15
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	43db      	mvns	r3, r3
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a20      	ldr	r2, [pc, #128]	; (8004e14 <HAL_GPIO_Init+0x240>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d052      	beq.n	8004e3c <HAL_GPIO_Init+0x268>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a1f      	ldr	r2, [pc, #124]	; (8004e18 <HAL_GPIO_Init+0x244>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d031      	beq.n	8004e02 <HAL_GPIO_Init+0x22e>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a1e      	ldr	r2, [pc, #120]	; (8004e1c <HAL_GPIO_Init+0x248>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d02b      	beq.n	8004dfe <HAL_GPIO_Init+0x22a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a1d      	ldr	r2, [pc, #116]	; (8004e20 <HAL_GPIO_Init+0x24c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d025      	beq.n	8004dfa <HAL_GPIO_Init+0x226>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a1c      	ldr	r2, [pc, #112]	; (8004e24 <HAL_GPIO_Init+0x250>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d01f      	beq.n	8004df6 <HAL_GPIO_Init+0x222>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a1b      	ldr	r2, [pc, #108]	; (8004e28 <HAL_GPIO_Init+0x254>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d019      	beq.n	8004df2 <HAL_GPIO_Init+0x21e>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a1a      	ldr	r2, [pc, #104]	; (8004e2c <HAL_GPIO_Init+0x258>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d013      	beq.n	8004dee <HAL_GPIO_Init+0x21a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a19      	ldr	r2, [pc, #100]	; (8004e30 <HAL_GPIO_Init+0x25c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00d      	beq.n	8004dea <HAL_GPIO_Init+0x216>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a18      	ldr	r2, [pc, #96]	; (8004e34 <HAL_GPIO_Init+0x260>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d007      	beq.n	8004de6 <HAL_GPIO_Init+0x212>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a17      	ldr	r2, [pc, #92]	; (8004e38 <HAL_GPIO_Init+0x264>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d101      	bne.n	8004de2 <HAL_GPIO_Init+0x20e>
 8004dde:	2309      	movs	r3, #9
 8004de0:	e02d      	b.n	8004e3e <HAL_GPIO_Init+0x26a>
 8004de2:	230a      	movs	r3, #10
 8004de4:	e02b      	b.n	8004e3e <HAL_GPIO_Init+0x26a>
 8004de6:	2308      	movs	r3, #8
 8004de8:	e029      	b.n	8004e3e <HAL_GPIO_Init+0x26a>
 8004dea:	2307      	movs	r3, #7
 8004dec:	e027      	b.n	8004e3e <HAL_GPIO_Init+0x26a>
 8004dee:	2306      	movs	r3, #6
 8004df0:	e025      	b.n	8004e3e <HAL_GPIO_Init+0x26a>
 8004df2:	2305      	movs	r3, #5
 8004df4:	e023      	b.n	8004e3e <HAL_GPIO_Init+0x26a>
 8004df6:	2304      	movs	r3, #4
 8004df8:	e021      	b.n	8004e3e <HAL_GPIO_Init+0x26a>
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e01f      	b.n	8004e3e <HAL_GPIO_Init+0x26a>
 8004dfe:	2302      	movs	r3, #2
 8004e00:	e01d      	b.n	8004e3e <HAL_GPIO_Init+0x26a>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e01b      	b.n	8004e3e <HAL_GPIO_Init+0x26a>
 8004e06:	bf00      	nop
 8004e08:	58000080 	.word	0x58000080
 8004e0c:	58024400 	.word	0x58024400
 8004e10:	58000400 	.word	0x58000400
 8004e14:	58020000 	.word	0x58020000
 8004e18:	58020400 	.word	0x58020400
 8004e1c:	58020800 	.word	0x58020800
 8004e20:	58020c00 	.word	0x58020c00
 8004e24:	58021000 	.word	0x58021000
 8004e28:	58021400 	.word	0x58021400
 8004e2c:	58021800 	.word	0x58021800
 8004e30:	58021c00 	.word	0x58021c00
 8004e34:	58022000 	.word	0x58022000
 8004e38:	58022400 	.word	0x58022400
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	69fa      	ldr	r2, [r7, #28]
 8004e40:	f002 0203 	and.w	r2, r2, #3
 8004e44:	0092      	lsls	r2, r2, #2
 8004e46:	4093      	lsls	r3, r2
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e4e:	4938      	ldr	r1, [pc, #224]	; (8004f30 <HAL_GPIO_Init+0x35c>)
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	089b      	lsrs	r3, r3, #2
 8004e54:	3302      	adds	r3, #2
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	43db      	mvns	r3, r3
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004e82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	43db      	mvns	r3, r3
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004eb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	43db      	mvns	r3, r3
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	43db      	mvns	r3, r3
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f47f ae63 	bne.w	8004be8 <HAL_GPIO_Init+0x14>
  }
}
 8004f22:	bf00      	nop
 8004f24:	bf00      	nop
 8004f26:	3724      	adds	r7, #36	; 0x24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	58000400 	.word	0x58000400

08004f34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691a      	ldr	r2, [r3, #16]
 8004f44:	887b      	ldrh	r3, [r7, #2]
 8004f46:	4013      	ands	r3, r2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	73fb      	strb	r3, [r7, #15]
 8004f50:	e001      	b.n	8004f56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f52:	2300      	movs	r3, #0
 8004f54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	807b      	strh	r3, [r7, #2]
 8004f70:	4613      	mov	r3, r2
 8004f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f74:	787b      	ldrb	r3, [r7, #1]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f7a:	887a      	ldrh	r2, [r7, #2]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004f80:	e003      	b.n	8004f8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004f82:	887b      	ldrh	r3, [r7, #2]
 8004f84:	041a      	lsls	r2, r3, #16
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	619a      	str	r2, [r3, #24]
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b085      	sub	sp, #20
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004fa8:	887a      	ldrh	r2, [r7, #2]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	4013      	ands	r3, r2
 8004fae:	041a      	lsls	r2, r3, #16
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	43d9      	mvns	r1, r3
 8004fb4:	887b      	ldrh	r3, [r7, #2]
 8004fb6:	400b      	ands	r3, r1
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	619a      	str	r2, [r3, #24]
}
 8004fbe:	bf00      	nop
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b082      	sub	sp, #8
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fdc:	88fb      	ldrh	r3, [r7, #6]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d008      	beq.n	8004ff6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004fe4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fe8:	88fb      	ldrh	r3, [r7, #6]
 8004fea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004fee:	88fb      	ldrh	r3, [r7, #6]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f018 f93d 	bl	801d270 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004ff6:	bf00      	nop
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005008:	4b19      	ldr	r3, [pc, #100]	; (8005070 <HAL_PWREx_ConfigSupply+0x70>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b04      	cmp	r3, #4
 8005012:	d00a      	beq.n	800502a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005014:	4b16      	ldr	r3, [pc, #88]	; (8005070 <HAL_PWREx_ConfigSupply+0x70>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	429a      	cmp	r2, r3
 8005020:	d001      	beq.n	8005026 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e01f      	b.n	8005066 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005026:	2300      	movs	r3, #0
 8005028:	e01d      	b.n	8005066 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800502a:	4b11      	ldr	r3, [pc, #68]	; (8005070 <HAL_PWREx_ConfigSupply+0x70>)
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f023 0207 	bic.w	r2, r3, #7
 8005032:	490f      	ldr	r1, [pc, #60]	; (8005070 <HAL_PWREx_ConfigSupply+0x70>)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4313      	orrs	r3, r2
 8005038:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800503a:	f7fc fe0d 	bl	8001c58 <HAL_GetTick>
 800503e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005040:	e009      	b.n	8005056 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005042:	f7fc fe09 	bl	8001c58 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005050:	d901      	bls.n	8005056 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e007      	b.n	8005066 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005056:	4b06      	ldr	r3, [pc, #24]	; (8005070 <HAL_PWREx_ConfigSupply+0x70>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800505e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005062:	d1ee      	bne.n	8005042 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	58024800 	.word	0x58024800

08005074 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08c      	sub	sp, #48	; 0x30
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d102      	bne.n	8005088 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	f000 bc48 	b.w	8005918 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 8088 	beq.w	80051a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005096:	4b99      	ldr	r3, [pc, #612]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800509e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80050a0:	4b96      	ldr	r3, [pc, #600]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 80050a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80050a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a8:	2b10      	cmp	r3, #16
 80050aa:	d007      	beq.n	80050bc <HAL_RCC_OscConfig+0x48>
 80050ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ae:	2b18      	cmp	r3, #24
 80050b0:	d111      	bne.n	80050d6 <HAL_RCC_OscConfig+0x62>
 80050b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b4:	f003 0303 	and.w	r3, r3, #3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d10c      	bne.n	80050d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050bc:	4b8f      	ldr	r3, [pc, #572]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d06d      	beq.n	80051a4 <HAL_RCC_OscConfig+0x130>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d169      	bne.n	80051a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	f000 bc21 	b.w	8005918 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050de:	d106      	bne.n	80050ee <HAL_RCC_OscConfig+0x7a>
 80050e0:	4b86      	ldr	r3, [pc, #536]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a85      	ldr	r2, [pc, #532]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 80050e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ea:	6013      	str	r3, [r2, #0]
 80050ec:	e02e      	b.n	800514c <HAL_RCC_OscConfig+0xd8>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10c      	bne.n	8005110 <HAL_RCC_OscConfig+0x9c>
 80050f6:	4b81      	ldr	r3, [pc, #516]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a80      	ldr	r2, [pc, #512]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 80050fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005100:	6013      	str	r3, [r2, #0]
 8005102:	4b7e      	ldr	r3, [pc, #504]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a7d      	ldr	r2, [pc, #500]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 8005108:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	e01d      	b.n	800514c <HAL_RCC_OscConfig+0xd8>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005118:	d10c      	bne.n	8005134 <HAL_RCC_OscConfig+0xc0>
 800511a:	4b78      	ldr	r3, [pc, #480]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a77      	ldr	r2, [pc, #476]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 8005120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	4b75      	ldr	r3, [pc, #468]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a74      	ldr	r2, [pc, #464]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 800512c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	e00b      	b.n	800514c <HAL_RCC_OscConfig+0xd8>
 8005134:	4b71      	ldr	r3, [pc, #452]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a70      	ldr	r2, [pc, #448]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 800513a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800513e:	6013      	str	r3, [r2, #0]
 8005140:	4b6e      	ldr	r3, [pc, #440]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a6d      	ldr	r2, [pc, #436]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 8005146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800514a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d013      	beq.n	800517c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005154:	f7fc fd80 	bl	8001c58 <HAL_GetTick>
 8005158:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800515c:	f7fc fd7c 	bl	8001c58 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b64      	cmp	r3, #100	; 0x64
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e3d4      	b.n	8005918 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800516e:	4b63      	ldr	r3, [pc, #396]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0f0      	beq.n	800515c <HAL_RCC_OscConfig+0xe8>
 800517a:	e014      	b.n	80051a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517c:	f7fc fd6c 	bl	8001c58 <HAL_GetTick>
 8005180:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005184:	f7fc fd68 	bl	8001c58 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b64      	cmp	r3, #100	; 0x64
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e3c0      	b.n	8005918 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005196:	4b59      	ldr	r3, [pc, #356]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1f0      	bne.n	8005184 <HAL_RCC_OscConfig+0x110>
 80051a2:	e000      	b.n	80051a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 80ca 	beq.w	8005348 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051b4:	4b51      	ldr	r3, [pc, #324]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051be:	4b4f      	ldr	r3, [pc, #316]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 80051c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d007      	beq.n	80051da <HAL_RCC_OscConfig+0x166>
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	2b18      	cmp	r3, #24
 80051ce:	d156      	bne.n	800527e <HAL_RCC_OscConfig+0x20a>
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d151      	bne.n	800527e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051da:	4b48      	ldr	r3, [pc, #288]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d005      	beq.n	80051f2 <HAL_RCC_OscConfig+0x17e>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e392      	b.n	8005918 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80051f2:	4b42      	ldr	r3, [pc, #264]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f023 0219 	bic.w	r2, r3, #25
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	493f      	ldr	r1, [pc, #252]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 8005200:	4313      	orrs	r3, r2
 8005202:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005204:	f7fc fd28 	bl	8001c58 <HAL_GetTick>
 8005208:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800520a:	e008      	b.n	800521e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800520c:	f7fc fd24 	bl	8001c58 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e37c      	b.n	8005918 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800521e:	4b37      	ldr	r3, [pc, #220]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0304 	and.w	r3, r3, #4
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0f0      	beq.n	800520c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800522a:	f7fc fd45 	bl	8001cb8 <HAL_GetREVID>
 800522e:	4603      	mov	r3, r0
 8005230:	f241 0203 	movw	r2, #4099	; 0x1003
 8005234:	4293      	cmp	r3, r2
 8005236:	d817      	bhi.n	8005268 <HAL_RCC_OscConfig+0x1f4>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	2b40      	cmp	r3, #64	; 0x40
 800523e:	d108      	bne.n	8005252 <HAL_RCC_OscConfig+0x1de>
 8005240:	4b2e      	ldr	r3, [pc, #184]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005248:	4a2c      	ldr	r2, [pc, #176]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 800524a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800524e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005250:	e07a      	b.n	8005348 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005252:	4b2a      	ldr	r3, [pc, #168]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	031b      	lsls	r3, r3, #12
 8005260:	4926      	ldr	r1, [pc, #152]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 8005262:	4313      	orrs	r3, r2
 8005264:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005266:	e06f      	b.n	8005348 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005268:	4b24      	ldr	r3, [pc, #144]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	061b      	lsls	r3, r3, #24
 8005276:	4921      	ldr	r1, [pc, #132]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 8005278:	4313      	orrs	r3, r2
 800527a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800527c:	e064      	b.n	8005348 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d047      	beq.n	8005316 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005286:	4b1d      	ldr	r3, [pc, #116]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f023 0219 	bic.w	r2, r3, #25
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	491a      	ldr	r1, [pc, #104]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 8005294:	4313      	orrs	r3, r2
 8005296:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005298:	f7fc fcde 	bl	8001c58 <HAL_GetTick>
 800529c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800529e:	e008      	b.n	80052b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052a0:	f7fc fcda 	bl	8001c58 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e332      	b.n	8005918 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052b2:	4b12      	ldr	r3, [pc, #72]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0304 	and.w	r3, r3, #4
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0f0      	beq.n	80052a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052be:	f7fc fcfb 	bl	8001cb8 <HAL_GetREVID>
 80052c2:	4603      	mov	r3, r0
 80052c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d819      	bhi.n	8005300 <HAL_RCC_OscConfig+0x28c>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	2b40      	cmp	r3, #64	; 0x40
 80052d2:	d108      	bne.n	80052e6 <HAL_RCC_OscConfig+0x272>
 80052d4:	4b09      	ldr	r3, [pc, #36]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80052dc:	4a07      	ldr	r2, [pc, #28]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 80052de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052e2:	6053      	str	r3, [r2, #4]
 80052e4:	e030      	b.n	8005348 <HAL_RCC_OscConfig+0x2d4>
 80052e6:	4b05      	ldr	r3, [pc, #20]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	031b      	lsls	r3, r3, #12
 80052f4:	4901      	ldr	r1, [pc, #4]	; (80052fc <HAL_RCC_OscConfig+0x288>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	604b      	str	r3, [r1, #4]
 80052fa:	e025      	b.n	8005348 <HAL_RCC_OscConfig+0x2d4>
 80052fc:	58024400 	.word	0x58024400
 8005300:	4b9a      	ldr	r3, [pc, #616]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	061b      	lsls	r3, r3, #24
 800530e:	4997      	ldr	r1, [pc, #604]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 8005310:	4313      	orrs	r3, r2
 8005312:	604b      	str	r3, [r1, #4]
 8005314:	e018      	b.n	8005348 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005316:	4b95      	ldr	r3, [pc, #596]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a94      	ldr	r2, [pc, #592]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 800531c:	f023 0301 	bic.w	r3, r3, #1
 8005320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005322:	f7fc fc99 	bl	8001c58 <HAL_GetTick>
 8005326:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800532a:	f7fc fc95 	bl	8001c58 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e2ed      	b.n	8005918 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800533c:	4b8b      	ldr	r3, [pc, #556]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1f0      	bne.n	800532a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0310 	and.w	r3, r3, #16
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 80a9 	beq.w	80054a8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005356:	4b85      	ldr	r3, [pc, #532]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800535e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005360:	4b82      	ldr	r3, [pc, #520]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 8005362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005364:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	2b08      	cmp	r3, #8
 800536a:	d007      	beq.n	800537c <HAL_RCC_OscConfig+0x308>
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	2b18      	cmp	r3, #24
 8005370:	d13a      	bne.n	80053e8 <HAL_RCC_OscConfig+0x374>
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f003 0303 	and.w	r3, r3, #3
 8005378:	2b01      	cmp	r3, #1
 800537a:	d135      	bne.n	80053e8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800537c:	4b7b      	ldr	r3, [pc, #492]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <HAL_RCC_OscConfig+0x320>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	2b80      	cmp	r3, #128	; 0x80
 800538e:	d001      	beq.n	8005394 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e2c1      	b.n	8005918 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005394:	f7fc fc90 	bl	8001cb8 <HAL_GetREVID>
 8005398:	4603      	mov	r3, r0
 800539a:	f241 0203 	movw	r2, #4099	; 0x1003
 800539e:	4293      	cmp	r3, r2
 80053a0:	d817      	bhi.n	80053d2 <HAL_RCC_OscConfig+0x35e>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d108      	bne.n	80053bc <HAL_RCC_OscConfig+0x348>
 80053aa:	4b70      	ldr	r3, [pc, #448]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80053b2:	4a6e      	ldr	r2, [pc, #440]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 80053b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053b8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053ba:	e075      	b.n	80054a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053bc:	4b6b      	ldr	r3, [pc, #428]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	069b      	lsls	r3, r3, #26
 80053ca:	4968      	ldr	r1, [pc, #416]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053d0:	e06a      	b.n	80054a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053d2:	4b66      	ldr	r3, [pc, #408]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	061b      	lsls	r3, r3, #24
 80053e0:	4962      	ldr	r1, [pc, #392]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053e6:	e05f      	b.n	80054a8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	69db      	ldr	r3, [r3, #28]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d042      	beq.n	8005476 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80053f0:	4b5e      	ldr	r3, [pc, #376]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a5d      	ldr	r2, [pc, #372]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 80053f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fc:	f7fc fc2c 	bl	8001c58 <HAL_GetTick>
 8005400:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005404:	f7fc fc28 	bl	8001c58 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e280      	b.n	8005918 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005416:	4b55      	ldr	r3, [pc, #340]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0f0      	beq.n	8005404 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005422:	f7fc fc49 	bl	8001cb8 <HAL_GetREVID>
 8005426:	4603      	mov	r3, r0
 8005428:	f241 0203 	movw	r2, #4099	; 0x1003
 800542c:	4293      	cmp	r3, r2
 800542e:	d817      	bhi.n	8005460 <HAL_RCC_OscConfig+0x3ec>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	2b20      	cmp	r3, #32
 8005436:	d108      	bne.n	800544a <HAL_RCC_OscConfig+0x3d6>
 8005438:	4b4c      	ldr	r3, [pc, #304]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005440:	4a4a      	ldr	r2, [pc, #296]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 8005442:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005446:	6053      	str	r3, [r2, #4]
 8005448:	e02e      	b.n	80054a8 <HAL_RCC_OscConfig+0x434>
 800544a:	4b48      	ldr	r3, [pc, #288]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	069b      	lsls	r3, r3, #26
 8005458:	4944      	ldr	r1, [pc, #272]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 800545a:	4313      	orrs	r3, r2
 800545c:	604b      	str	r3, [r1, #4]
 800545e:	e023      	b.n	80054a8 <HAL_RCC_OscConfig+0x434>
 8005460:	4b42      	ldr	r3, [pc, #264]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	061b      	lsls	r3, r3, #24
 800546e:	493f      	ldr	r1, [pc, #252]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 8005470:	4313      	orrs	r3, r2
 8005472:	60cb      	str	r3, [r1, #12]
 8005474:	e018      	b.n	80054a8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005476:	4b3d      	ldr	r3, [pc, #244]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a3c      	ldr	r2, [pc, #240]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 800547c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005482:	f7fc fbe9 	bl	8001c58 <HAL_GetTick>
 8005486:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005488:	e008      	b.n	800549c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800548a:	f7fc fbe5 	bl	8001c58 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d901      	bls.n	800549c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e23d      	b.n	8005918 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800549c:	4b33      	ldr	r3, [pc, #204]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1f0      	bne.n	800548a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0308 	and.w	r3, r3, #8
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d036      	beq.n	8005522 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d019      	beq.n	80054f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054bc:	4b2b      	ldr	r3, [pc, #172]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 80054be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054c0:	4a2a      	ldr	r2, [pc, #168]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 80054c2:	f043 0301 	orr.w	r3, r3, #1
 80054c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c8:	f7fc fbc6 	bl	8001c58 <HAL_GetTick>
 80054cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054d0:	f7fc fbc2 	bl	8001c58 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e21a      	b.n	8005918 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054e2:	4b22      	ldr	r3, [pc, #136]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 80054e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d0f0      	beq.n	80054d0 <HAL_RCC_OscConfig+0x45c>
 80054ee:	e018      	b.n	8005522 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054f0:	4b1e      	ldr	r3, [pc, #120]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 80054f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054f4:	4a1d      	ldr	r2, [pc, #116]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 80054f6:	f023 0301 	bic.w	r3, r3, #1
 80054fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054fc:	f7fc fbac 	bl	8001c58 <HAL_GetTick>
 8005500:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005504:	f7fc fba8 	bl	8001c58 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e200      	b.n	8005918 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005516:	4b15      	ldr	r3, [pc, #84]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 8005518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1f0      	bne.n	8005504 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0320 	and.w	r3, r3, #32
 800552a:	2b00      	cmp	r3, #0
 800552c:	d039      	beq.n	80055a2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d01c      	beq.n	8005570 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005536:	4b0d      	ldr	r3, [pc, #52]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a0c      	ldr	r2, [pc, #48]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 800553c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005540:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005542:	f7fc fb89 	bl	8001c58 <HAL_GetTick>
 8005546:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005548:	e008      	b.n	800555c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800554a:	f7fc fb85 	bl	8001c58 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d901      	bls.n	800555c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e1dd      	b.n	8005918 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800555c:	4b03      	ldr	r3, [pc, #12]	; (800556c <HAL_RCC_OscConfig+0x4f8>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0f0      	beq.n	800554a <HAL_RCC_OscConfig+0x4d6>
 8005568:	e01b      	b.n	80055a2 <HAL_RCC_OscConfig+0x52e>
 800556a:	bf00      	nop
 800556c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005570:	4b9b      	ldr	r3, [pc, #620]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a9a      	ldr	r2, [pc, #616]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 8005576:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800557a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800557c:	f7fc fb6c 	bl	8001c58 <HAL_GetTick>
 8005580:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005582:	e008      	b.n	8005596 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005584:	f7fc fb68 	bl	8001c58 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e1c0      	b.n	8005918 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005596:	4b92      	ldr	r3, [pc, #584]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1f0      	bne.n	8005584 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0304 	and.w	r3, r3, #4
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 8081 	beq.w	80056b2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80055b0:	4b8c      	ldr	r3, [pc, #560]	; (80057e4 <HAL_RCC_OscConfig+0x770>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a8b      	ldr	r2, [pc, #556]	; (80057e4 <HAL_RCC_OscConfig+0x770>)
 80055b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055bc:	f7fc fb4c 	bl	8001c58 <HAL_GetTick>
 80055c0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055c4:	f7fc fb48 	bl	8001c58 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b64      	cmp	r3, #100	; 0x64
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e1a0      	b.n	8005918 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055d6:	4b83      	ldr	r3, [pc, #524]	; (80057e4 <HAL_RCC_OscConfig+0x770>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d0f0      	beq.n	80055c4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d106      	bne.n	80055f8 <HAL_RCC_OscConfig+0x584>
 80055ea:	4b7d      	ldr	r3, [pc, #500]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 80055ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ee:	4a7c      	ldr	r2, [pc, #496]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 80055f0:	f043 0301 	orr.w	r3, r3, #1
 80055f4:	6713      	str	r3, [r2, #112]	; 0x70
 80055f6:	e02d      	b.n	8005654 <HAL_RCC_OscConfig+0x5e0>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10c      	bne.n	800561a <HAL_RCC_OscConfig+0x5a6>
 8005600:	4b77      	ldr	r3, [pc, #476]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 8005602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005604:	4a76      	ldr	r2, [pc, #472]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 8005606:	f023 0301 	bic.w	r3, r3, #1
 800560a:	6713      	str	r3, [r2, #112]	; 0x70
 800560c:	4b74      	ldr	r3, [pc, #464]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 800560e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005610:	4a73      	ldr	r2, [pc, #460]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 8005612:	f023 0304 	bic.w	r3, r3, #4
 8005616:	6713      	str	r3, [r2, #112]	; 0x70
 8005618:	e01c      	b.n	8005654 <HAL_RCC_OscConfig+0x5e0>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	2b05      	cmp	r3, #5
 8005620:	d10c      	bne.n	800563c <HAL_RCC_OscConfig+0x5c8>
 8005622:	4b6f      	ldr	r3, [pc, #444]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 8005624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005626:	4a6e      	ldr	r2, [pc, #440]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 8005628:	f043 0304 	orr.w	r3, r3, #4
 800562c:	6713      	str	r3, [r2, #112]	; 0x70
 800562e:	4b6c      	ldr	r3, [pc, #432]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 8005630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005632:	4a6b      	ldr	r2, [pc, #428]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 8005634:	f043 0301 	orr.w	r3, r3, #1
 8005638:	6713      	str	r3, [r2, #112]	; 0x70
 800563a:	e00b      	b.n	8005654 <HAL_RCC_OscConfig+0x5e0>
 800563c:	4b68      	ldr	r3, [pc, #416]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 800563e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005640:	4a67      	ldr	r2, [pc, #412]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 8005642:	f023 0301 	bic.w	r3, r3, #1
 8005646:	6713      	str	r3, [r2, #112]	; 0x70
 8005648:	4b65      	ldr	r3, [pc, #404]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 800564a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564c:	4a64      	ldr	r2, [pc, #400]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 800564e:	f023 0304 	bic.w	r3, r3, #4
 8005652:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d015      	beq.n	8005688 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800565c:	f7fc fafc 	bl	8001c58 <HAL_GetTick>
 8005660:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005662:	e00a      	b.n	800567a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005664:	f7fc faf8 	bl	8001c58 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005672:	4293      	cmp	r3, r2
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e14e      	b.n	8005918 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800567a:	4b59      	ldr	r3, [pc, #356]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 800567c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d0ee      	beq.n	8005664 <HAL_RCC_OscConfig+0x5f0>
 8005686:	e014      	b.n	80056b2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005688:	f7fc fae6 	bl	8001c58 <HAL_GetTick>
 800568c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800568e:	e00a      	b.n	80056a6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005690:	f7fc fae2 	bl	8001c58 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	f241 3288 	movw	r2, #5000	; 0x1388
 800569e:	4293      	cmp	r3, r2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e138      	b.n	8005918 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056a6:	4b4e      	ldr	r3, [pc, #312]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 80056a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1ee      	bne.n	8005690 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 812d 	beq.w	8005916 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80056bc:	4b48      	ldr	r3, [pc, #288]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056c4:	2b18      	cmp	r3, #24
 80056c6:	f000 80bd 	beq.w	8005844 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	f040 809e 	bne.w	8005810 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056d4:	4b42      	ldr	r3, [pc, #264]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a41      	ldr	r2, [pc, #260]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 80056da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e0:	f7fc faba 	bl	8001c58 <HAL_GetTick>
 80056e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056e6:	e008      	b.n	80056fa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056e8:	f7fc fab6 	bl	8001c58 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e10e      	b.n	8005918 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056fa:	4b39      	ldr	r3, [pc, #228]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1f0      	bne.n	80056e8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005706:	4b36      	ldr	r3, [pc, #216]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 8005708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800570a:	4b37      	ldr	r3, [pc, #220]	; (80057e8 <HAL_RCC_OscConfig+0x774>)
 800570c:	4013      	ands	r3, r2
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005716:	0112      	lsls	r2, r2, #4
 8005718:	430a      	orrs	r2, r1
 800571a:	4931      	ldr	r1, [pc, #196]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 800571c:	4313      	orrs	r3, r2
 800571e:	628b      	str	r3, [r1, #40]	; 0x28
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005724:	3b01      	subs	r3, #1
 8005726:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572e:	3b01      	subs	r3, #1
 8005730:	025b      	lsls	r3, r3, #9
 8005732:	b29b      	uxth	r3, r3
 8005734:	431a      	orrs	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573a:	3b01      	subs	r3, #1
 800573c:	041b      	lsls	r3, r3, #16
 800573e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005742:	431a      	orrs	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005748:	3b01      	subs	r3, #1
 800574a:	061b      	lsls	r3, r3, #24
 800574c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005750:	4923      	ldr	r1, [pc, #140]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 8005752:	4313      	orrs	r3, r2
 8005754:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005756:	4b22      	ldr	r3, [pc, #136]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 8005758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575a:	4a21      	ldr	r2, [pc, #132]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 800575c:	f023 0301 	bic.w	r3, r3, #1
 8005760:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005762:	4b1f      	ldr	r3, [pc, #124]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 8005764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005766:	4b21      	ldr	r3, [pc, #132]	; (80057ec <HAL_RCC_OscConfig+0x778>)
 8005768:	4013      	ands	r3, r2
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800576e:	00d2      	lsls	r2, r2, #3
 8005770:	491b      	ldr	r1, [pc, #108]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 8005772:	4313      	orrs	r3, r2
 8005774:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005776:	4b1a      	ldr	r3, [pc, #104]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 8005778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577a:	f023 020c 	bic.w	r2, r3, #12
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	4917      	ldr	r1, [pc, #92]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 8005784:	4313      	orrs	r3, r2
 8005786:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005788:	4b15      	ldr	r3, [pc, #84]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 800578a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578c:	f023 0202 	bic.w	r2, r3, #2
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005794:	4912      	ldr	r1, [pc, #72]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 8005796:	4313      	orrs	r3, r2
 8005798:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800579a:	4b11      	ldr	r3, [pc, #68]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 800579c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579e:	4a10      	ldr	r2, [pc, #64]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 80057a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057a6:	4b0e      	ldr	r3, [pc, #56]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 80057a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057aa:	4a0d      	ldr	r2, [pc, #52]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 80057ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80057b2:	4b0b      	ldr	r3, [pc, #44]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 80057b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b6:	4a0a      	ldr	r2, [pc, #40]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 80057b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80057be:	4b08      	ldr	r3, [pc, #32]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 80057c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c2:	4a07      	ldr	r2, [pc, #28]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 80057c4:	f043 0301 	orr.w	r3, r3, #1
 80057c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057ca:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a04      	ldr	r2, [pc, #16]	; (80057e0 <HAL_RCC_OscConfig+0x76c>)
 80057d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d6:	f7fc fa3f 	bl	8001c58 <HAL_GetTick>
 80057da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057dc:	e011      	b.n	8005802 <HAL_RCC_OscConfig+0x78e>
 80057de:	bf00      	nop
 80057e0:	58024400 	.word	0x58024400
 80057e4:	58024800 	.word	0x58024800
 80057e8:	fffffc0c 	.word	0xfffffc0c
 80057ec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f0:	f7fc fa32 	bl	8001c58 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e08a      	b.n	8005918 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005802:	4b47      	ldr	r3, [pc, #284]	; (8005920 <HAL_RCC_OscConfig+0x8ac>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0f0      	beq.n	80057f0 <HAL_RCC_OscConfig+0x77c>
 800580e:	e082      	b.n	8005916 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005810:	4b43      	ldr	r3, [pc, #268]	; (8005920 <HAL_RCC_OscConfig+0x8ac>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a42      	ldr	r2, [pc, #264]	; (8005920 <HAL_RCC_OscConfig+0x8ac>)
 8005816:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800581a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581c:	f7fc fa1c 	bl	8001c58 <HAL_GetTick>
 8005820:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005824:	f7fc fa18 	bl	8001c58 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e070      	b.n	8005918 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005836:	4b3a      	ldr	r3, [pc, #232]	; (8005920 <HAL_RCC_OscConfig+0x8ac>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1f0      	bne.n	8005824 <HAL_RCC_OscConfig+0x7b0>
 8005842:	e068      	b.n	8005916 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005844:	4b36      	ldr	r3, [pc, #216]	; (8005920 <HAL_RCC_OscConfig+0x8ac>)
 8005846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005848:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800584a:	4b35      	ldr	r3, [pc, #212]	; (8005920 <HAL_RCC_OscConfig+0x8ac>)
 800584c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	2b01      	cmp	r3, #1
 8005856:	d031      	beq.n	80058bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	f003 0203 	and.w	r2, r3, #3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005862:	429a      	cmp	r2, r3
 8005864:	d12a      	bne.n	80058bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	091b      	lsrs	r3, r3, #4
 800586a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005872:	429a      	cmp	r2, r3
 8005874:	d122      	bne.n	80058bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005880:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005882:	429a      	cmp	r2, r3
 8005884:	d11a      	bne.n	80058bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	0a5b      	lsrs	r3, r3, #9
 800588a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005892:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005894:	429a      	cmp	r2, r3
 8005896:	d111      	bne.n	80058bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	0c1b      	lsrs	r3, r3, #16
 800589c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d108      	bne.n	80058bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	0e1b      	lsrs	r3, r3, #24
 80058ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d001      	beq.n	80058c0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e02b      	b.n	8005918 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80058c0:	4b17      	ldr	r3, [pc, #92]	; (8005920 <HAL_RCC_OscConfig+0x8ac>)
 80058c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c4:	08db      	lsrs	r3, r3, #3
 80058c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058ca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d01f      	beq.n	8005916 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80058d6:	4b12      	ldr	r3, [pc, #72]	; (8005920 <HAL_RCC_OscConfig+0x8ac>)
 80058d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058da:	4a11      	ldr	r2, [pc, #68]	; (8005920 <HAL_RCC_OscConfig+0x8ac>)
 80058dc:	f023 0301 	bic.w	r3, r3, #1
 80058e0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058e2:	f7fc f9b9 	bl	8001c58 <HAL_GetTick>
 80058e6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80058e8:	bf00      	nop
 80058ea:	f7fc f9b5 	bl	8001c58 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d0f9      	beq.n	80058ea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80058f6:	4b0a      	ldr	r3, [pc, #40]	; (8005920 <HAL_RCC_OscConfig+0x8ac>)
 80058f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058fa:	4b0a      	ldr	r3, [pc, #40]	; (8005924 <HAL_RCC_OscConfig+0x8b0>)
 80058fc:	4013      	ands	r3, r2
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005902:	00d2      	lsls	r2, r2, #3
 8005904:	4906      	ldr	r1, [pc, #24]	; (8005920 <HAL_RCC_OscConfig+0x8ac>)
 8005906:	4313      	orrs	r3, r2
 8005908:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800590a:	4b05      	ldr	r3, [pc, #20]	; (8005920 <HAL_RCC_OscConfig+0x8ac>)
 800590c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590e:	4a04      	ldr	r2, [pc, #16]	; (8005920 <HAL_RCC_OscConfig+0x8ac>)
 8005910:	f043 0301 	orr.w	r3, r3, #1
 8005914:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3730      	adds	r7, #48	; 0x30
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	58024400 	.word	0x58024400
 8005924:	ffff0007 	.word	0xffff0007

08005928 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e19c      	b.n	8005c76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800593c:	4b8a      	ldr	r3, [pc, #552]	; (8005b68 <HAL_RCC_ClockConfig+0x240>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 030f 	and.w	r3, r3, #15
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	429a      	cmp	r2, r3
 8005948:	d910      	bls.n	800596c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800594a:	4b87      	ldr	r3, [pc, #540]	; (8005b68 <HAL_RCC_ClockConfig+0x240>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f023 020f 	bic.w	r2, r3, #15
 8005952:	4985      	ldr	r1, [pc, #532]	; (8005b68 <HAL_RCC_ClockConfig+0x240>)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	4313      	orrs	r3, r2
 8005958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800595a:	4b83      	ldr	r3, [pc, #524]	; (8005b68 <HAL_RCC_ClockConfig+0x240>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	429a      	cmp	r2, r3
 8005966:	d001      	beq.n	800596c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e184      	b.n	8005c76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b00      	cmp	r3, #0
 8005976:	d010      	beq.n	800599a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691a      	ldr	r2, [r3, #16]
 800597c:	4b7b      	ldr	r3, [pc, #492]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005984:	429a      	cmp	r2, r3
 8005986:	d908      	bls.n	800599a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005988:	4b78      	ldr	r3, [pc, #480]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	4975      	ldr	r1, [pc, #468]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 8005996:	4313      	orrs	r3, r2
 8005998:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0308 	and.w	r3, r3, #8
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d010      	beq.n	80059c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	695a      	ldr	r2, [r3, #20]
 80059aa:	4b70      	ldr	r3, [pc, #448]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d908      	bls.n	80059c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80059b6:	4b6d      	ldr	r3, [pc, #436]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	496a      	ldr	r1, [pc, #424]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0310 	and.w	r3, r3, #16
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d010      	beq.n	80059f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	699a      	ldr	r2, [r3, #24]
 80059d8:	4b64      	ldr	r3, [pc, #400]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 80059da:	69db      	ldr	r3, [r3, #28]
 80059dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d908      	bls.n	80059f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80059e4:	4b61      	ldr	r3, [pc, #388]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 80059e6:	69db      	ldr	r3, [r3, #28]
 80059e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	495e      	ldr	r1, [pc, #376]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d010      	beq.n	8005a24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	69da      	ldr	r2, [r3, #28]
 8005a06:	4b59      	ldr	r3, [pc, #356]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d908      	bls.n	8005a24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a12:	4b56      	ldr	r3, [pc, #344]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	4953      	ldr	r1, [pc, #332]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d010      	beq.n	8005a52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	4b4d      	ldr	r3, [pc, #308]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	f003 030f 	and.w	r3, r3, #15
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d908      	bls.n	8005a52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a40:	4b4a      	ldr	r3, [pc, #296]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	f023 020f 	bic.w	r2, r3, #15
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	4947      	ldr	r1, [pc, #284]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d055      	beq.n	8005b0a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005a5e:	4b43      	ldr	r3, [pc, #268]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	4940      	ldr	r1, [pc, #256]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d107      	bne.n	8005a88 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a78:	4b3c      	ldr	r3, [pc, #240]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d121      	bne.n	8005ac8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e0f6      	b.n	8005c76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	2b03      	cmp	r3, #3
 8005a8e:	d107      	bne.n	8005aa0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a90:	4b36      	ldr	r3, [pc, #216]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d115      	bne.n	8005ac8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e0ea      	b.n	8005c76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d107      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005aa8:	4b30      	ldr	r3, [pc, #192]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d109      	bne.n	8005ac8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e0de      	b.n	8005c76 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ab8:	4b2c      	ldr	r3, [pc, #176]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e0d6      	b.n	8005c76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ac8:	4b28      	ldr	r3, [pc, #160]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	f023 0207 	bic.w	r2, r3, #7
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	4925      	ldr	r1, [pc, #148]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ada:	f7fc f8bd 	bl	8001c58 <HAL_GetTick>
 8005ade:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ae0:	e00a      	b.n	8005af8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ae2:	f7fc f8b9 	bl	8001c58 <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d901      	bls.n	8005af8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e0be      	b.n	8005c76 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005af8:	4b1c      	ldr	r3, [pc, #112]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d1eb      	bne.n	8005ae2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d010      	beq.n	8005b38 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	4b14      	ldr	r3, [pc, #80]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	f003 030f 	and.w	r3, r3, #15
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d208      	bcs.n	8005b38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b26:	4b11      	ldr	r3, [pc, #68]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	f023 020f 	bic.w	r2, r3, #15
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	490e      	ldr	r1, [pc, #56]	; (8005b6c <HAL_RCC_ClockConfig+0x244>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b38:	4b0b      	ldr	r3, [pc, #44]	; (8005b68 <HAL_RCC_ClockConfig+0x240>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 030f 	and.w	r3, r3, #15
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d214      	bcs.n	8005b70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b46:	4b08      	ldr	r3, [pc, #32]	; (8005b68 <HAL_RCC_ClockConfig+0x240>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f023 020f 	bic.w	r2, r3, #15
 8005b4e:	4906      	ldr	r1, [pc, #24]	; (8005b68 <HAL_RCC_ClockConfig+0x240>)
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b56:	4b04      	ldr	r3, [pc, #16]	; (8005b68 <HAL_RCC_ClockConfig+0x240>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 030f 	and.w	r3, r3, #15
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d005      	beq.n	8005b70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e086      	b.n	8005c76 <HAL_RCC_ClockConfig+0x34e>
 8005b68:	52002000 	.word	0x52002000
 8005b6c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d010      	beq.n	8005b9e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691a      	ldr	r2, [r3, #16]
 8005b80:	4b3f      	ldr	r3, [pc, #252]	; (8005c80 <HAL_RCC_ClockConfig+0x358>)
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d208      	bcs.n	8005b9e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b8c:	4b3c      	ldr	r3, [pc, #240]	; (8005c80 <HAL_RCC_ClockConfig+0x358>)
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	4939      	ldr	r1, [pc, #228]	; (8005c80 <HAL_RCC_ClockConfig+0x358>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0308 	and.w	r3, r3, #8
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d010      	beq.n	8005bcc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	695a      	ldr	r2, [r3, #20]
 8005bae:	4b34      	ldr	r3, [pc, #208]	; (8005c80 <HAL_RCC_ClockConfig+0x358>)
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d208      	bcs.n	8005bcc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005bba:	4b31      	ldr	r3, [pc, #196]	; (8005c80 <HAL_RCC_ClockConfig+0x358>)
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	492e      	ldr	r1, [pc, #184]	; (8005c80 <HAL_RCC_ClockConfig+0x358>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0310 	and.w	r3, r3, #16
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d010      	beq.n	8005bfa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	699a      	ldr	r2, [r3, #24]
 8005bdc:	4b28      	ldr	r3, [pc, #160]	; (8005c80 <HAL_RCC_ClockConfig+0x358>)
 8005bde:	69db      	ldr	r3, [r3, #28]
 8005be0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d208      	bcs.n	8005bfa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005be8:	4b25      	ldr	r3, [pc, #148]	; (8005c80 <HAL_RCC_ClockConfig+0x358>)
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	4922      	ldr	r1, [pc, #136]	; (8005c80 <HAL_RCC_ClockConfig+0x358>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0320 	and.w	r3, r3, #32
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d010      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69da      	ldr	r2, [r3, #28]
 8005c0a:	4b1d      	ldr	r3, [pc, #116]	; (8005c80 <HAL_RCC_ClockConfig+0x358>)
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d208      	bcs.n	8005c28 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005c16:	4b1a      	ldr	r3, [pc, #104]	; (8005c80 <HAL_RCC_ClockConfig+0x358>)
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	4917      	ldr	r1, [pc, #92]	; (8005c80 <HAL_RCC_ClockConfig+0x358>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c28:	f000 f834 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	4b14      	ldr	r3, [pc, #80]	; (8005c80 <HAL_RCC_ClockConfig+0x358>)
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	0a1b      	lsrs	r3, r3, #8
 8005c34:	f003 030f 	and.w	r3, r3, #15
 8005c38:	4912      	ldr	r1, [pc, #72]	; (8005c84 <HAL_RCC_ClockConfig+0x35c>)
 8005c3a:	5ccb      	ldrb	r3, [r1, r3]
 8005c3c:	f003 031f 	and.w	r3, r3, #31
 8005c40:	fa22 f303 	lsr.w	r3, r2, r3
 8005c44:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c46:	4b0e      	ldr	r3, [pc, #56]	; (8005c80 <HAL_RCC_ClockConfig+0x358>)
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	f003 030f 	and.w	r3, r3, #15
 8005c4e:	4a0d      	ldr	r2, [pc, #52]	; (8005c84 <HAL_RCC_ClockConfig+0x35c>)
 8005c50:	5cd3      	ldrb	r3, [r2, r3]
 8005c52:	f003 031f 	and.w	r3, r3, #31
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	fa22 f303 	lsr.w	r3, r2, r3
 8005c5c:	4a0a      	ldr	r2, [pc, #40]	; (8005c88 <HAL_RCC_ClockConfig+0x360>)
 8005c5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c60:	4a0a      	ldr	r2, [pc, #40]	; (8005c8c <HAL_RCC_ClockConfig+0x364>)
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005c66:	4b0a      	ldr	r3, [pc, #40]	; (8005c90 <HAL_RCC_ClockConfig+0x368>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fb fd0e 	bl	800168c <HAL_InitTick>
 8005c70:	4603      	mov	r3, r0
 8005c72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	58024400 	.word	0x58024400
 8005c84:	080205e8 	.word	0x080205e8
 8005c88:	24000004 	.word	0x24000004
 8005c8c:	24000000 	.word	0x24000000
 8005c90:	24000008 	.word	0x24000008

08005c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b089      	sub	sp, #36	; 0x24
 8005c98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c9a:	4bb3      	ldr	r3, [pc, #716]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ca2:	2b18      	cmp	r3, #24
 8005ca4:	f200 8155 	bhi.w	8005f52 <HAL_RCC_GetSysClockFreq+0x2be>
 8005ca8:	a201      	add	r2, pc, #4	; (adr r2, 8005cb0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cae:	bf00      	nop
 8005cb0:	08005d15 	.word	0x08005d15
 8005cb4:	08005f53 	.word	0x08005f53
 8005cb8:	08005f53 	.word	0x08005f53
 8005cbc:	08005f53 	.word	0x08005f53
 8005cc0:	08005f53 	.word	0x08005f53
 8005cc4:	08005f53 	.word	0x08005f53
 8005cc8:	08005f53 	.word	0x08005f53
 8005ccc:	08005f53 	.word	0x08005f53
 8005cd0:	08005d3b 	.word	0x08005d3b
 8005cd4:	08005f53 	.word	0x08005f53
 8005cd8:	08005f53 	.word	0x08005f53
 8005cdc:	08005f53 	.word	0x08005f53
 8005ce0:	08005f53 	.word	0x08005f53
 8005ce4:	08005f53 	.word	0x08005f53
 8005ce8:	08005f53 	.word	0x08005f53
 8005cec:	08005f53 	.word	0x08005f53
 8005cf0:	08005d41 	.word	0x08005d41
 8005cf4:	08005f53 	.word	0x08005f53
 8005cf8:	08005f53 	.word	0x08005f53
 8005cfc:	08005f53 	.word	0x08005f53
 8005d00:	08005f53 	.word	0x08005f53
 8005d04:	08005f53 	.word	0x08005f53
 8005d08:	08005f53 	.word	0x08005f53
 8005d0c:	08005f53 	.word	0x08005f53
 8005d10:	08005d47 	.word	0x08005d47
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d14:	4b94      	ldr	r3, [pc, #592]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0320 	and.w	r3, r3, #32
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d009      	beq.n	8005d34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d20:	4b91      	ldr	r3, [pc, #580]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	08db      	lsrs	r3, r3, #3
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	4a90      	ldr	r2, [pc, #576]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d30:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005d32:	e111      	b.n	8005f58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d34:	4b8d      	ldr	r3, [pc, #564]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d36:	61bb      	str	r3, [r7, #24]
      break;
 8005d38:	e10e      	b.n	8005f58 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005d3a:	4b8d      	ldr	r3, [pc, #564]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d3c:	61bb      	str	r3, [r7, #24]
      break;
 8005d3e:	e10b      	b.n	8005f58 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005d40:	4b8c      	ldr	r3, [pc, #560]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005d42:	61bb      	str	r3, [r7, #24]
      break;
 8005d44:	e108      	b.n	8005f58 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d46:	4b88      	ldr	r3, [pc, #544]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4a:	f003 0303 	and.w	r3, r3, #3
 8005d4e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005d50:	4b85      	ldr	r3, [pc, #532]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d54:	091b      	lsrs	r3, r3, #4
 8005d56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d5a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005d5c:	4b82      	ldr	r3, [pc, #520]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d66:	4b80      	ldr	r3, [pc, #512]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6a:	08db      	lsrs	r3, r3, #3
 8005d6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	fb02 f303 	mul.w	r3, r2, r3
 8005d76:	ee07 3a90 	vmov	s15, r3
 8005d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d7e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 80e1 	beq.w	8005f4c <HAL_RCC_GetSysClockFreq+0x2b8>
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	f000 8083 	beq.w	8005e98 <HAL_RCC_GetSysClockFreq+0x204>
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	f200 80a1 	bhi.w	8005edc <HAL_RCC_GetSysClockFreq+0x248>
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d003      	beq.n	8005da8 <HAL_RCC_GetSysClockFreq+0x114>
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d056      	beq.n	8005e54 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005da6:	e099      	b.n	8005edc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005da8:	4b6f      	ldr	r3, [pc, #444]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0320 	and.w	r3, r3, #32
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d02d      	beq.n	8005e10 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005db4:	4b6c      	ldr	r3, [pc, #432]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	08db      	lsrs	r3, r3, #3
 8005dba:	f003 0303 	and.w	r3, r3, #3
 8005dbe:	4a6b      	ldr	r2, [pc, #428]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	ee07 3a90 	vmov	s15, r3
 8005dcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	ee07 3a90 	vmov	s15, r3
 8005dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dde:	4b62      	ldr	r3, [pc, #392]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de6:	ee07 3a90 	vmov	s15, r3
 8005dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dee:	ed97 6a02 	vldr	s12, [r7, #8]
 8005df2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005f78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e0a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005e0e:	e087      	b.n	8005f20 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	ee07 3a90 	vmov	s15, r3
 8005e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005f7c <HAL_RCC_GetSysClockFreq+0x2e8>
 8005e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e22:	4b51      	ldr	r3, [pc, #324]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e2a:	ee07 3a90 	vmov	s15, r3
 8005e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e32:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e36:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005f78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e52:	e065      	b.n	8005f20 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	ee07 3a90 	vmov	s15, r3
 8005e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e5e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005f80 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e66:	4b40      	ldr	r3, [pc, #256]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e6e:	ee07 3a90 	vmov	s15, r3
 8005e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e76:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e7a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005f78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e96:	e043      	b.n	8005f20 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	ee07 3a90 	vmov	s15, r3
 8005e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005f84 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eaa:	4b2f      	ldr	r3, [pc, #188]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb2:	ee07 3a90 	vmov	s15, r3
 8005eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eba:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ebe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005f78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005eda:	e021      	b.n	8005f20 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005f80 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eee:	4b1e      	ldr	r3, [pc, #120]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef6:	ee07 3a90 	vmov	s15, r3
 8005efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f02:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005f78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f1e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005f20:	4b11      	ldr	r3, [pc, #68]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f24:	0a5b      	lsrs	r3, r3, #9
 8005f26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	ee07 3a90 	vmov	s15, r3
 8005f34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f38:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f44:	ee17 3a90 	vmov	r3, s15
 8005f48:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005f4a:	e005      	b.n	8005f58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	61bb      	str	r3, [r7, #24]
      break;
 8005f50:	e002      	b.n	8005f58 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005f52:	4b07      	ldr	r3, [pc, #28]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f54:	61bb      	str	r3, [r7, #24]
      break;
 8005f56:	bf00      	nop
  }

  return sysclockfreq;
 8005f58:	69bb      	ldr	r3, [r7, #24]
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3724      	adds	r7, #36	; 0x24
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	58024400 	.word	0x58024400
 8005f6c:	03d09000 	.word	0x03d09000
 8005f70:	003d0900 	.word	0x003d0900
 8005f74:	017d7840 	.word	0x017d7840
 8005f78:	46000000 	.word	0x46000000
 8005f7c:	4c742400 	.word	0x4c742400
 8005f80:	4a742400 	.word	0x4a742400
 8005f84:	4bbebc20 	.word	0x4bbebc20

08005f88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005f8e:	f7ff fe81 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8005f92:	4602      	mov	r2, r0
 8005f94:	4b10      	ldr	r3, [pc, #64]	; (8005fd8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	0a1b      	lsrs	r3, r3, #8
 8005f9a:	f003 030f 	and.w	r3, r3, #15
 8005f9e:	490f      	ldr	r1, [pc, #60]	; (8005fdc <HAL_RCC_GetHCLKFreq+0x54>)
 8005fa0:	5ccb      	ldrb	r3, [r1, r3]
 8005fa2:	f003 031f 	and.w	r3, r3, #31
 8005fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8005faa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005fac:	4b0a      	ldr	r3, [pc, #40]	; (8005fd8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	f003 030f 	and.w	r3, r3, #15
 8005fb4:	4a09      	ldr	r2, [pc, #36]	; (8005fdc <HAL_RCC_GetHCLKFreq+0x54>)
 8005fb6:	5cd3      	ldrb	r3, [r2, r3]
 8005fb8:	f003 031f 	and.w	r3, r3, #31
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc2:	4a07      	ldr	r2, [pc, #28]	; (8005fe0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005fc4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005fc6:	4a07      	ldr	r2, [pc, #28]	; (8005fe4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005fcc:	4b04      	ldr	r3, [pc, #16]	; (8005fe0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005fce:	681b      	ldr	r3, [r3, #0]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	58024400 	.word	0x58024400
 8005fdc:	080205e8 	.word	0x080205e8
 8005fe0:	24000004 	.word	0x24000004
 8005fe4:	24000000 	.word	0x24000000

08005fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005fec:	f7ff ffcc 	bl	8005f88 <HAL_RCC_GetHCLKFreq>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	4b06      	ldr	r3, [pc, #24]	; (800600c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	091b      	lsrs	r3, r3, #4
 8005ff8:	f003 0307 	and.w	r3, r3, #7
 8005ffc:	4904      	ldr	r1, [pc, #16]	; (8006010 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ffe:	5ccb      	ldrb	r3, [r1, r3]
 8006000:	f003 031f 	and.w	r3, r3, #31
 8006004:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006008:	4618      	mov	r0, r3
 800600a:	bd80      	pop	{r7, pc}
 800600c:	58024400 	.word	0x58024400
 8006010:	080205e8 	.word	0x080205e8

08006014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006018:	f7ff ffb6 	bl	8005f88 <HAL_RCC_GetHCLKFreq>
 800601c:	4602      	mov	r2, r0
 800601e:	4b06      	ldr	r3, [pc, #24]	; (8006038 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	0a1b      	lsrs	r3, r3, #8
 8006024:	f003 0307 	and.w	r3, r3, #7
 8006028:	4904      	ldr	r1, [pc, #16]	; (800603c <HAL_RCC_GetPCLK2Freq+0x28>)
 800602a:	5ccb      	ldrb	r3, [r1, r3]
 800602c:	f003 031f 	and.w	r3, r3, #31
 8006030:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006034:	4618      	mov	r0, r3
 8006036:	bd80      	pop	{r7, pc}
 8006038:	58024400 	.word	0x58024400
 800603c:	080205e8 	.word	0x080205e8

08006040 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	223f      	movs	r2, #63	; 0x3f
 800604e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006050:	4b1a      	ldr	r3, [pc, #104]	; (80060bc <HAL_RCC_GetClockConfig+0x7c>)
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	f003 0207 	and.w	r2, r3, #7
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800605c:	4b17      	ldr	r3, [pc, #92]	; (80060bc <HAL_RCC_GetClockConfig+0x7c>)
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006068:	4b14      	ldr	r3, [pc, #80]	; (80060bc <HAL_RCC_GetClockConfig+0x7c>)
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	f003 020f 	and.w	r2, r3, #15
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006074:	4b11      	ldr	r3, [pc, #68]	; (80060bc <HAL_RCC_GetClockConfig+0x7c>)
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006080:	4b0e      	ldr	r3, [pc, #56]	; (80060bc <HAL_RCC_GetClockConfig+0x7c>)
 8006082:	69db      	ldr	r3, [r3, #28]
 8006084:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800608c:	4b0b      	ldr	r3, [pc, #44]	; (80060bc <HAL_RCC_GetClockConfig+0x7c>)
 800608e:	69db      	ldr	r3, [r3, #28]
 8006090:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006098:	4b08      	ldr	r3, [pc, #32]	; (80060bc <HAL_RCC_GetClockConfig+0x7c>)
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80060a4:	4b06      	ldr	r3, [pc, #24]	; (80060c0 <HAL_RCC_GetClockConfig+0x80>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 020f 	and.w	r2, r3, #15
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	601a      	str	r2, [r3, #0]
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	58024400 	.word	0x58024400
 80060c0:	52002000 	.word	0x52002000

080060c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060c8:	b0ca      	sub	sp, #296	; 0x128
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060d0:	2300      	movs	r3, #0
 80060d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060d6:	2300      	movs	r3, #0
 80060d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80060e8:	2500      	movs	r5, #0
 80060ea:	ea54 0305 	orrs.w	r3, r4, r5
 80060ee:	d049      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80060f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060fa:	d02f      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80060fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006100:	d828      	bhi.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006102:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006106:	d01a      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006108:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800610c:	d822      	bhi.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006112:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006116:	d007      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006118:	e01c      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800611a:	4bb8      	ldr	r3, [pc, #736]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800611c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611e:	4ab7      	ldr	r2, [pc, #732]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006124:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006126:	e01a      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800612c:	3308      	adds	r3, #8
 800612e:	2102      	movs	r1, #2
 8006130:	4618      	mov	r0, r3
 8006132:	f001 fc8f 	bl	8007a54 <RCCEx_PLL2_Config>
 8006136:	4603      	mov	r3, r0
 8006138:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800613c:	e00f      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800613e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006142:	3328      	adds	r3, #40	; 0x28
 8006144:	2102      	movs	r1, #2
 8006146:	4618      	mov	r0, r3
 8006148:	f001 fd36 	bl	8007bb8 <RCCEx_PLL3_Config>
 800614c:	4603      	mov	r3, r0
 800614e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006152:	e004      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800615a:	e000      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800615c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800615e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10a      	bne.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006166:	4ba5      	ldr	r3, [pc, #660]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800616a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800616e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006174:	4aa1      	ldr	r2, [pc, #644]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006176:	430b      	orrs	r3, r1
 8006178:	6513      	str	r3, [r2, #80]	; 0x50
 800617a:	e003      	b.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800617c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006180:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006190:	f04f 0900 	mov.w	r9, #0
 8006194:	ea58 0309 	orrs.w	r3, r8, r9
 8006198:	d047      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800619a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800619e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061a0:	2b04      	cmp	r3, #4
 80061a2:	d82a      	bhi.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x136>
 80061a4:	a201      	add	r2, pc, #4	; (adr r2, 80061ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80061a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061aa:	bf00      	nop
 80061ac:	080061c1 	.word	0x080061c1
 80061b0:	080061cf 	.word	0x080061cf
 80061b4:	080061e5 	.word	0x080061e5
 80061b8:	08006203 	.word	0x08006203
 80061bc:	08006203 	.word	0x08006203
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061c0:	4b8e      	ldr	r3, [pc, #568]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c4:	4a8d      	ldr	r2, [pc, #564]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061cc:	e01a      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061d2:	3308      	adds	r3, #8
 80061d4:	2100      	movs	r1, #0
 80061d6:	4618      	mov	r0, r3
 80061d8:	f001 fc3c 	bl	8007a54 <RCCEx_PLL2_Config>
 80061dc:	4603      	mov	r3, r0
 80061de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061e2:	e00f      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061e8:	3328      	adds	r3, #40	; 0x28
 80061ea:	2100      	movs	r1, #0
 80061ec:	4618      	mov	r0, r3
 80061ee:	f001 fce3 	bl	8007bb8 <RCCEx_PLL3_Config>
 80061f2:	4603      	mov	r3, r0
 80061f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061f8:	e004      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006200:	e000      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006202:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006204:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10a      	bne.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800620c:	4b7b      	ldr	r3, [pc, #492]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800620e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006210:	f023 0107 	bic.w	r1, r3, #7
 8006214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800621a:	4a78      	ldr	r2, [pc, #480]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800621c:	430b      	orrs	r3, r1
 800621e:	6513      	str	r3, [r2, #80]	; 0x50
 8006220:	e003      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006222:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006226:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800622a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800622e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006232:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006236:	f04f 0b00 	mov.w	fp, #0
 800623a:	ea5a 030b 	orrs.w	r3, sl, fp
 800623e:	d04c      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800624a:	d030      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800624c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006250:	d829      	bhi.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006252:	2bc0      	cmp	r3, #192	; 0xc0
 8006254:	d02d      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006256:	2bc0      	cmp	r3, #192	; 0xc0
 8006258:	d825      	bhi.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800625a:	2b80      	cmp	r3, #128	; 0x80
 800625c:	d018      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800625e:	2b80      	cmp	r3, #128	; 0x80
 8006260:	d821      	bhi.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006266:	2b40      	cmp	r3, #64	; 0x40
 8006268:	d007      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800626a:	e01c      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800626c:	4b63      	ldr	r3, [pc, #396]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800626e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006270:	4a62      	ldr	r2, [pc, #392]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006276:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006278:	e01c      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800627a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800627e:	3308      	adds	r3, #8
 8006280:	2100      	movs	r1, #0
 8006282:	4618      	mov	r0, r3
 8006284:	f001 fbe6 	bl	8007a54 <RCCEx_PLL2_Config>
 8006288:	4603      	mov	r3, r0
 800628a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800628e:	e011      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006294:	3328      	adds	r3, #40	; 0x28
 8006296:	2100      	movs	r1, #0
 8006298:	4618      	mov	r0, r3
 800629a:	f001 fc8d 	bl	8007bb8 <RCCEx_PLL3_Config>
 800629e:	4603      	mov	r3, r0
 80062a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80062a4:	e006      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80062ac:	e002      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80062ae:	bf00      	nop
 80062b0:	e000      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80062b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10a      	bne.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80062bc:	4b4f      	ldr	r3, [pc, #316]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80062c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ca:	4a4c      	ldr	r2, [pc, #304]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062cc:	430b      	orrs	r3, r1
 80062ce:	6513      	str	r3, [r2, #80]	; 0x50
 80062d0:	e003      	b.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80062da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80062e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80062ea:	2300      	movs	r3, #0
 80062ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80062f0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80062f4:	460b      	mov	r3, r1
 80062f6:	4313      	orrs	r3, r2
 80062f8:	d053      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80062fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006302:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006306:	d035      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006308:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800630c:	d82e      	bhi.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800630e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006312:	d031      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006314:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006318:	d828      	bhi.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800631a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800631e:	d01a      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006320:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006324:	d822      	bhi.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800632a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800632e:	d007      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006330:	e01c      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006332:	4b32      	ldr	r3, [pc, #200]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006336:	4a31      	ldr	r2, [pc, #196]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800633c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800633e:	e01c      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006340:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006344:	3308      	adds	r3, #8
 8006346:	2100      	movs	r1, #0
 8006348:	4618      	mov	r0, r3
 800634a:	f001 fb83 	bl	8007a54 <RCCEx_PLL2_Config>
 800634e:	4603      	mov	r3, r0
 8006350:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006354:	e011      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800635a:	3328      	adds	r3, #40	; 0x28
 800635c:	2100      	movs	r1, #0
 800635e:	4618      	mov	r0, r3
 8006360:	f001 fc2a 	bl	8007bb8 <RCCEx_PLL3_Config>
 8006364:	4603      	mov	r3, r0
 8006366:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800636a:	e006      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006372:	e002      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006374:	bf00      	nop
 8006376:	e000      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006378:	bf00      	nop
    }

    if (ret == HAL_OK)
 800637a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10b      	bne.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006382:	4b1e      	ldr	r3, [pc, #120]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006386:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800638a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800638e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006392:	4a1a      	ldr	r2, [pc, #104]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006394:	430b      	orrs	r3, r1
 8006396:	6593      	str	r3, [r2, #88]	; 0x58
 8006398:	e003      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800639a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800639e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80063a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063aa:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80063ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063b2:	2300      	movs	r3, #0
 80063b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063b8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80063bc:	460b      	mov	r3, r1
 80063be:	4313      	orrs	r3, r2
 80063c0:	d056      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80063c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80063ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063ce:	d038      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80063d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063d4:	d831      	bhi.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80063da:	d034      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80063dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80063e0:	d82b      	bhi.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063e6:	d01d      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80063e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063ec:	d825      	bhi.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d006      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80063f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063f6:	d00a      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80063f8:	e01f      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063fa:	bf00      	nop
 80063fc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006400:	4ba2      	ldr	r3, [pc, #648]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006404:	4aa1      	ldr	r2, [pc, #644]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800640a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800640c:	e01c      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800640e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006412:	3308      	adds	r3, #8
 8006414:	2100      	movs	r1, #0
 8006416:	4618      	mov	r0, r3
 8006418:	f001 fb1c 	bl	8007a54 <RCCEx_PLL2_Config>
 800641c:	4603      	mov	r3, r0
 800641e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006422:	e011      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006428:	3328      	adds	r3, #40	; 0x28
 800642a:	2100      	movs	r1, #0
 800642c:	4618      	mov	r0, r3
 800642e:	f001 fbc3 	bl	8007bb8 <RCCEx_PLL3_Config>
 8006432:	4603      	mov	r3, r0
 8006434:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006438:	e006      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006440:	e002      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006442:	bf00      	nop
 8006444:	e000      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006446:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006448:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10b      	bne.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006450:	4b8e      	ldr	r3, [pc, #568]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006454:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800645c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006460:	4a8a      	ldr	r2, [pc, #552]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006462:	430b      	orrs	r3, r1
 8006464:	6593      	str	r3, [r2, #88]	; 0x58
 8006466:	e003      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006468:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800646c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006478:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800647c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006480:	2300      	movs	r3, #0
 8006482:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006486:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800648a:	460b      	mov	r3, r1
 800648c:	4313      	orrs	r3, r2
 800648e:	d03a      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006496:	2b30      	cmp	r3, #48	; 0x30
 8006498:	d01f      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x416>
 800649a:	2b30      	cmp	r3, #48	; 0x30
 800649c:	d819      	bhi.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800649e:	2b20      	cmp	r3, #32
 80064a0:	d00c      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80064a2:	2b20      	cmp	r3, #32
 80064a4:	d815      	bhi.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d019      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80064aa:	2b10      	cmp	r3, #16
 80064ac:	d111      	bne.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064ae:	4b77      	ldr	r3, [pc, #476]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b2:	4a76      	ldr	r2, [pc, #472]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80064ba:	e011      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064c0:	3308      	adds	r3, #8
 80064c2:	2102      	movs	r1, #2
 80064c4:	4618      	mov	r0, r3
 80064c6:	f001 fac5 	bl	8007a54 <RCCEx_PLL2_Config>
 80064ca:	4603      	mov	r3, r0
 80064cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80064d0:	e006      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80064d8:	e002      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80064da:	bf00      	nop
 80064dc:	e000      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80064de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10a      	bne.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80064e8:	4b68      	ldr	r3, [pc, #416]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ec:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80064f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064f6:	4a65      	ldr	r2, [pc, #404]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064f8:	430b      	orrs	r3, r1
 80064fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80064fc:	e003      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006502:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800650a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006512:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006516:	2300      	movs	r3, #0
 8006518:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800651c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006520:	460b      	mov	r3, r1
 8006522:	4313      	orrs	r3, r2
 8006524:	d051      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800652a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800652c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006530:	d035      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006532:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006536:	d82e      	bhi.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006538:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800653c:	d031      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800653e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006542:	d828      	bhi.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006544:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006548:	d01a      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800654a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800654e:	d822      	bhi.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006558:	d007      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800655a:	e01c      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800655c:	4b4b      	ldr	r3, [pc, #300]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800655e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006560:	4a4a      	ldr	r2, [pc, #296]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006566:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006568:	e01c      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800656a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800656e:	3308      	adds	r3, #8
 8006570:	2100      	movs	r1, #0
 8006572:	4618      	mov	r0, r3
 8006574:	f001 fa6e 	bl	8007a54 <RCCEx_PLL2_Config>
 8006578:	4603      	mov	r3, r0
 800657a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800657e:	e011      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006584:	3328      	adds	r3, #40	; 0x28
 8006586:	2100      	movs	r1, #0
 8006588:	4618      	mov	r0, r3
 800658a:	f001 fb15 	bl	8007bb8 <RCCEx_PLL3_Config>
 800658e:	4603      	mov	r3, r0
 8006590:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006594:	e006      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800659c:	e002      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800659e:	bf00      	nop
 80065a0:	e000      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80065a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10a      	bne.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80065ac:	4b37      	ldr	r3, [pc, #220]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80065b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ba:	4a34      	ldr	r2, [pc, #208]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065bc:	430b      	orrs	r3, r1
 80065be:	6513      	str	r3, [r2, #80]	; 0x50
 80065c0:	e003      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80065ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80065d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065da:	2300      	movs	r3, #0
 80065dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80065e0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80065e4:	460b      	mov	r3, r1
 80065e6:	4313      	orrs	r3, r2
 80065e8:	d056      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80065ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065f4:	d033      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80065f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065fa:	d82c      	bhi.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006600:	d02f      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006602:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006606:	d826      	bhi.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006608:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800660c:	d02b      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800660e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006612:	d820      	bhi.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006614:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006618:	d012      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800661a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800661e:	d81a      	bhi.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006620:	2b00      	cmp	r3, #0
 8006622:	d022      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006628:	d115      	bne.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800662a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800662e:	3308      	adds	r3, #8
 8006630:	2101      	movs	r1, #1
 8006632:	4618      	mov	r0, r3
 8006634:	f001 fa0e 	bl	8007a54 <RCCEx_PLL2_Config>
 8006638:	4603      	mov	r3, r0
 800663a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800663e:	e015      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006644:	3328      	adds	r3, #40	; 0x28
 8006646:	2101      	movs	r1, #1
 8006648:	4618      	mov	r0, r3
 800664a:	f001 fab5 	bl	8007bb8 <RCCEx_PLL3_Config>
 800664e:	4603      	mov	r3, r0
 8006650:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006654:	e00a      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800665c:	e006      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800665e:	bf00      	nop
 8006660:	e004      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006662:	bf00      	nop
 8006664:	e002      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006666:	bf00      	nop
 8006668:	e000      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800666a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800666c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10d      	bne.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006674:	4b05      	ldr	r3, [pc, #20]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006678:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800667c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006680:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006682:	4a02      	ldr	r2, [pc, #8]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006684:	430b      	orrs	r3, r1
 8006686:	6513      	str	r3, [r2, #80]	; 0x50
 8006688:	e006      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800668a:	bf00      	nop
 800668c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006690:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006694:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800669c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80066a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066a8:	2300      	movs	r3, #0
 80066aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066ae:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4313      	orrs	r3, r2
 80066b6:	d055      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80066b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066c4:	d033      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80066c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066ca:	d82c      	bhi.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80066cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066d0:	d02f      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80066d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066d6:	d826      	bhi.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80066d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066dc:	d02b      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80066de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066e2:	d820      	bhi.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80066e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066e8:	d012      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80066ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066ee:	d81a      	bhi.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d022      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80066f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066f8:	d115      	bne.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066fe:	3308      	adds	r3, #8
 8006700:	2101      	movs	r1, #1
 8006702:	4618      	mov	r0, r3
 8006704:	f001 f9a6 	bl	8007a54 <RCCEx_PLL2_Config>
 8006708:	4603      	mov	r3, r0
 800670a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800670e:	e015      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006714:	3328      	adds	r3, #40	; 0x28
 8006716:	2101      	movs	r1, #1
 8006718:	4618      	mov	r0, r3
 800671a:	f001 fa4d 	bl	8007bb8 <RCCEx_PLL3_Config>
 800671e:	4603      	mov	r3, r0
 8006720:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006724:	e00a      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800672c:	e006      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800672e:	bf00      	nop
 8006730:	e004      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006732:	bf00      	nop
 8006734:	e002      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006736:	bf00      	nop
 8006738:	e000      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800673a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800673c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10b      	bne.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006744:	4ba3      	ldr	r3, [pc, #652]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006748:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800674c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006750:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006754:	4a9f      	ldr	r2, [pc, #636]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006756:	430b      	orrs	r3, r1
 8006758:	6593      	str	r3, [r2, #88]	; 0x58
 800675a:	e003      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800675c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006760:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006770:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006774:	2300      	movs	r3, #0
 8006776:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800677a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800677e:	460b      	mov	r3, r1
 8006780:	4313      	orrs	r3, r2
 8006782:	d037      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800678e:	d00e      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006794:	d816      	bhi.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006796:	2b00      	cmp	r3, #0
 8006798:	d018      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800679a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800679e:	d111      	bne.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067a0:	4b8c      	ldr	r3, [pc, #560]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a4:	4a8b      	ldr	r2, [pc, #556]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80067ac:	e00f      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067b2:	3308      	adds	r3, #8
 80067b4:	2101      	movs	r1, #1
 80067b6:	4618      	mov	r0, r3
 80067b8:	f001 f94c 	bl	8007a54 <RCCEx_PLL2_Config>
 80067bc:	4603      	mov	r3, r0
 80067be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80067c2:	e004      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067ca:	e000      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80067cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10a      	bne.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80067d6:	4b7f      	ldr	r3, [pc, #508]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067da:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80067de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e4:	4a7b      	ldr	r2, [pc, #492]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067e6:	430b      	orrs	r3, r1
 80067e8:	6513      	str	r3, [r2, #80]	; 0x50
 80067ea:	e003      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80067f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006800:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006804:	2300      	movs	r3, #0
 8006806:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800680a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800680e:	460b      	mov	r3, r1
 8006810:	4313      	orrs	r3, r2
 8006812:	d039      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800681a:	2b03      	cmp	r3, #3
 800681c:	d81c      	bhi.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800681e:	a201      	add	r2, pc, #4	; (adr r2, 8006824 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006824:	08006861 	.word	0x08006861
 8006828:	08006835 	.word	0x08006835
 800682c:	08006843 	.word	0x08006843
 8006830:	08006861 	.word	0x08006861
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006834:	4b67      	ldr	r3, [pc, #412]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006838:	4a66      	ldr	r2, [pc, #408]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800683a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800683e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006840:	e00f      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006846:	3308      	adds	r3, #8
 8006848:	2102      	movs	r1, #2
 800684a:	4618      	mov	r0, r3
 800684c:	f001 f902 	bl	8007a54 <RCCEx_PLL2_Config>
 8006850:	4603      	mov	r3, r0
 8006852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006856:	e004      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800685e:	e000      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006862:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10a      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800686a:	4b5a      	ldr	r3, [pc, #360]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800686c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800686e:	f023 0103 	bic.w	r1, r3, #3
 8006872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006878:	4a56      	ldr	r2, [pc, #344]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800687a:	430b      	orrs	r3, r1
 800687c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800687e:	e003      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006880:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006884:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800688c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006890:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006894:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006898:	2300      	movs	r3, #0
 800689a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800689e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80068a2:	460b      	mov	r3, r1
 80068a4:	4313      	orrs	r3, r2
 80068a6:	f000 809f 	beq.w	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068aa:	4b4b      	ldr	r3, [pc, #300]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a4a      	ldr	r2, [pc, #296]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80068b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068b6:	f7fb f9cf 	bl	8001c58 <HAL_GetTick>
 80068ba:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068be:	e00b      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068c0:	f7fb f9ca 	bl	8001c58 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	2b64      	cmp	r3, #100	; 0x64
 80068ce:	d903      	bls.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80068d6:	e005      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068d8:	4b3f      	ldr	r3, [pc, #252]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d0ed      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80068e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d179      	bne.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80068ec:	4b39      	ldr	r3, [pc, #228]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80068f8:	4053      	eors	r3, r2
 80068fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d015      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006902:	4b34      	ldr	r3, [pc, #208]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800690a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800690e:	4b31      	ldr	r3, [pc, #196]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006912:	4a30      	ldr	r2, [pc, #192]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006918:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800691a:	4b2e      	ldr	r3, [pc, #184]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800691c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800691e:	4a2d      	ldr	r2, [pc, #180]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006924:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006926:	4a2b      	ldr	r2, [pc, #172]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006928:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800692c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800692e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006932:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800693a:	d118      	bne.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800693c:	f7fb f98c 	bl	8001c58 <HAL_GetTick>
 8006940:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006944:	e00d      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006946:	f7fb f987 	bl	8001c58 <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006950:	1ad2      	subs	r2, r2, r3
 8006952:	f241 3388 	movw	r3, #5000	; 0x1388
 8006956:	429a      	cmp	r2, r3
 8006958:	d903      	bls.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8006960:	e005      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006962:	4b1c      	ldr	r3, [pc, #112]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d0eb      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800696e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006972:	2b00      	cmp	r3, #0
 8006974:	d129      	bne.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800697a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800697e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006986:	d10e      	bne.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006988:	4b12      	ldr	r3, [pc, #72]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006994:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006998:	091a      	lsrs	r2, r3, #4
 800699a:	4b10      	ldr	r3, [pc, #64]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800699c:	4013      	ands	r3, r2
 800699e:	4a0d      	ldr	r2, [pc, #52]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069a0:	430b      	orrs	r3, r1
 80069a2:	6113      	str	r3, [r2, #16]
 80069a4:	e005      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80069a6:	4b0b      	ldr	r3, [pc, #44]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	4a0a      	ldr	r2, [pc, #40]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80069b0:	6113      	str	r3, [r2, #16]
 80069b2:	4b08      	ldr	r3, [pc, #32]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80069b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80069be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069c2:	4a04      	ldr	r2, [pc, #16]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069c4:	430b      	orrs	r3, r1
 80069c6:	6713      	str	r3, [r2, #112]	; 0x70
 80069c8:	e00e      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80069d2:	e009      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80069d4:	58024400 	.word	0x58024400
 80069d8:	58024800 	.word	0x58024800
 80069dc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80069e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f0:	f002 0301 	and.w	r3, r2, #1
 80069f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069f8:	2300      	movs	r3, #0
 80069fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006a02:	460b      	mov	r3, r1
 8006a04:	4313      	orrs	r3, r2
 8006a06:	f000 8089 	beq.w	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a10:	2b28      	cmp	r3, #40	; 0x28
 8006a12:	d86b      	bhi.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006a14:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1a:	bf00      	nop
 8006a1c:	08006af5 	.word	0x08006af5
 8006a20:	08006aed 	.word	0x08006aed
 8006a24:	08006aed 	.word	0x08006aed
 8006a28:	08006aed 	.word	0x08006aed
 8006a2c:	08006aed 	.word	0x08006aed
 8006a30:	08006aed 	.word	0x08006aed
 8006a34:	08006aed 	.word	0x08006aed
 8006a38:	08006aed 	.word	0x08006aed
 8006a3c:	08006ac1 	.word	0x08006ac1
 8006a40:	08006aed 	.word	0x08006aed
 8006a44:	08006aed 	.word	0x08006aed
 8006a48:	08006aed 	.word	0x08006aed
 8006a4c:	08006aed 	.word	0x08006aed
 8006a50:	08006aed 	.word	0x08006aed
 8006a54:	08006aed 	.word	0x08006aed
 8006a58:	08006aed 	.word	0x08006aed
 8006a5c:	08006ad7 	.word	0x08006ad7
 8006a60:	08006aed 	.word	0x08006aed
 8006a64:	08006aed 	.word	0x08006aed
 8006a68:	08006aed 	.word	0x08006aed
 8006a6c:	08006aed 	.word	0x08006aed
 8006a70:	08006aed 	.word	0x08006aed
 8006a74:	08006aed 	.word	0x08006aed
 8006a78:	08006aed 	.word	0x08006aed
 8006a7c:	08006af5 	.word	0x08006af5
 8006a80:	08006aed 	.word	0x08006aed
 8006a84:	08006aed 	.word	0x08006aed
 8006a88:	08006aed 	.word	0x08006aed
 8006a8c:	08006aed 	.word	0x08006aed
 8006a90:	08006aed 	.word	0x08006aed
 8006a94:	08006aed 	.word	0x08006aed
 8006a98:	08006aed 	.word	0x08006aed
 8006a9c:	08006af5 	.word	0x08006af5
 8006aa0:	08006aed 	.word	0x08006aed
 8006aa4:	08006aed 	.word	0x08006aed
 8006aa8:	08006aed 	.word	0x08006aed
 8006aac:	08006aed 	.word	0x08006aed
 8006ab0:	08006aed 	.word	0x08006aed
 8006ab4:	08006aed 	.word	0x08006aed
 8006ab8:	08006aed 	.word	0x08006aed
 8006abc:	08006af5 	.word	0x08006af5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ac4:	3308      	adds	r3, #8
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 ffc3 	bl	8007a54 <RCCEx_PLL2_Config>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006ad4:	e00f      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ada:	3328      	adds	r3, #40	; 0x28
 8006adc:	2101      	movs	r1, #1
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f001 f86a 	bl	8007bb8 <RCCEx_PLL3_Config>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006aea:	e004      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006af2:	e000      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006af6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10a      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006afe:	4bbf      	ldr	r3, [pc, #764]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b02:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b0c:	4abb      	ldr	r2, [pc, #748]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b0e:	430b      	orrs	r3, r1
 8006b10:	6553      	str	r3, [r2, #84]	; 0x54
 8006b12:	e003      	b.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	f002 0302 	and.w	r3, r2, #2
 8006b28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006b32:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006b36:	460b      	mov	r3, r1
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	d041      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b42:	2b05      	cmp	r3, #5
 8006b44:	d824      	bhi.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006b46:	a201      	add	r2, pc, #4	; (adr r2, 8006b4c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4c:	08006b99 	.word	0x08006b99
 8006b50:	08006b65 	.word	0x08006b65
 8006b54:	08006b7b 	.word	0x08006b7b
 8006b58:	08006b99 	.word	0x08006b99
 8006b5c:	08006b99 	.word	0x08006b99
 8006b60:	08006b99 	.word	0x08006b99
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b68:	3308      	adds	r3, #8
 8006b6a:	2101      	movs	r1, #1
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f000 ff71 	bl	8007a54 <RCCEx_PLL2_Config>
 8006b72:	4603      	mov	r3, r0
 8006b74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006b78:	e00f      	b.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b7e:	3328      	adds	r3, #40	; 0x28
 8006b80:	2101      	movs	r1, #1
 8006b82:	4618      	mov	r0, r3
 8006b84:	f001 f818 	bl	8007bb8 <RCCEx_PLL3_Config>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006b8e:	e004      	b.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b96:	e000      	b.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10a      	bne.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006ba2:	4b96      	ldr	r3, [pc, #600]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba6:	f023 0107 	bic.w	r1, r3, #7
 8006baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bb0:	4a92      	ldr	r2, [pc, #584]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006bb2:	430b      	orrs	r3, r1
 8006bb4:	6553      	str	r3, [r2, #84]	; 0x54
 8006bb6:	e003      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bbc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc8:	f002 0304 	and.w	r3, r2, #4
 8006bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bd6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	d044      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006be8:	2b05      	cmp	r3, #5
 8006bea:	d825      	bhi.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006bec:	a201      	add	r2, pc, #4	; (adr r2, 8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf2:	bf00      	nop
 8006bf4:	08006c41 	.word	0x08006c41
 8006bf8:	08006c0d 	.word	0x08006c0d
 8006bfc:	08006c23 	.word	0x08006c23
 8006c00:	08006c41 	.word	0x08006c41
 8006c04:	08006c41 	.word	0x08006c41
 8006c08:	08006c41 	.word	0x08006c41
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c10:	3308      	adds	r3, #8
 8006c12:	2101      	movs	r1, #1
 8006c14:	4618      	mov	r0, r3
 8006c16:	f000 ff1d 	bl	8007a54 <RCCEx_PLL2_Config>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006c20:	e00f      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c26:	3328      	adds	r3, #40	; 0x28
 8006c28:	2101      	movs	r1, #1
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f000 ffc4 	bl	8007bb8 <RCCEx_PLL3_Config>
 8006c30:	4603      	mov	r3, r0
 8006c32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006c36:	e004      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c3e:	e000      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10b      	bne.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c4a:	4b6c      	ldr	r3, [pc, #432]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c4e:	f023 0107 	bic.w	r1, r3, #7
 8006c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c5a:	4a68      	ldr	r2, [pc, #416]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c5c:	430b      	orrs	r3, r1
 8006c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8006c60:	e003      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c72:	f002 0320 	and.w	r3, r2, #32
 8006c76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006c84:	460b      	mov	r3, r1
 8006c86:	4313      	orrs	r3, r2
 8006c88:	d055      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c96:	d033      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c9c:	d82c      	bhi.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca2:	d02f      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca8:	d826      	bhi.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006caa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cae:	d02b      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006cb0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cb4:	d820      	bhi.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006cb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cba:	d012      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006cbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cc0:	d81a      	bhi.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d022      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006cc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cca:	d115      	bne.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cd0:	3308      	adds	r3, #8
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 febd 	bl	8007a54 <RCCEx_PLL2_Config>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006ce0:	e015      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ce6:	3328      	adds	r3, #40	; 0x28
 8006ce8:	2102      	movs	r1, #2
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 ff64 	bl	8007bb8 <RCCEx_PLL3_Config>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006cf6:	e00a      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006cfe:	e006      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006d00:	bf00      	nop
 8006d02:	e004      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006d04:	bf00      	nop
 8006d06:	e002      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006d08:	bf00      	nop
 8006d0a:	e000      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10b      	bne.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d16:	4b39      	ldr	r3, [pc, #228]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d1a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d26:	4a35      	ldr	r2, [pc, #212]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d28:	430b      	orrs	r3, r1
 8006d2a:	6553      	str	r3, [r2, #84]	; 0x54
 8006d2c:	e003      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006d42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d46:	2300      	movs	r3, #0
 8006d48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006d4c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006d50:	460b      	mov	r3, r1
 8006d52:	4313      	orrs	r3, r2
 8006d54:	d058      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d5e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006d62:	d033      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006d64:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006d68:	d82c      	bhi.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d6e:	d02f      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d74:	d826      	bhi.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006d76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d7a:	d02b      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006d7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d80:	d820      	bhi.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d86:	d012      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d8c:	d81a      	bhi.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d022      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d96:	d115      	bne.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d9c:	3308      	adds	r3, #8
 8006d9e:	2100      	movs	r1, #0
 8006da0:	4618      	mov	r0, r3
 8006da2:	f000 fe57 	bl	8007a54 <RCCEx_PLL2_Config>
 8006da6:	4603      	mov	r3, r0
 8006da8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006dac:	e015      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006db2:	3328      	adds	r3, #40	; 0x28
 8006db4:	2102      	movs	r1, #2
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 fefe 	bl	8007bb8 <RCCEx_PLL3_Config>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006dc2:	e00a      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006dca:	e006      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006dcc:	bf00      	nop
 8006dce:	e004      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006dd0:	bf00      	nop
 8006dd2:	e002      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006dd4:	bf00      	nop
 8006dd6:	e000      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10e      	bne.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006de2:	4b06      	ldr	r3, [pc, #24]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006de6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006df2:	4a02      	ldr	r2, [pc, #8]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006df4:	430b      	orrs	r3, r1
 8006df6:	6593      	str	r3, [r2, #88]	; 0x58
 8006df8:	e006      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006dfa:	bf00      	nop
 8006dfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e10:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006e14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e18:	2300      	movs	r3, #0
 8006e1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e1e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006e22:	460b      	mov	r3, r1
 8006e24:	4313      	orrs	r3, r2
 8006e26:	d055      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e30:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006e34:	d033      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006e36:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006e3a:	d82c      	bhi.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006e3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e40:	d02f      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e46:	d826      	bhi.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006e48:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006e4c:	d02b      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006e4e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006e52:	d820      	bhi.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006e54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e58:	d012      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006e5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e5e:	d81a      	bhi.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d022      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e68:	d115      	bne.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e6e:	3308      	adds	r3, #8
 8006e70:	2100      	movs	r1, #0
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 fdee 	bl	8007a54 <RCCEx_PLL2_Config>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006e7e:	e015      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e84:	3328      	adds	r3, #40	; 0x28
 8006e86:	2102      	movs	r1, #2
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f000 fe95 	bl	8007bb8 <RCCEx_PLL3_Config>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006e94:	e00a      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e9c:	e006      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006e9e:	bf00      	nop
 8006ea0:	e004      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006ea2:	bf00      	nop
 8006ea4:	e002      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006ea6:	bf00      	nop
 8006ea8:	e000      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006eaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10b      	bne.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006eb4:	4ba1      	ldr	r3, [pc, #644]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eb8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ec0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ec4:	4a9d      	ldr	r2, [pc, #628]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ec6:	430b      	orrs	r3, r1
 8006ec8:	6593      	str	r3, [r2, #88]	; 0x58
 8006eca:	e003      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ed0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006edc:	f002 0308 	and.w	r3, r2, #8
 8006ee0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006eea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006eee:	460b      	mov	r3, r1
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	d01e      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f00:	d10c      	bne.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f06:	3328      	adds	r3, #40	; 0x28
 8006f08:	2102      	movs	r1, #2
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 fe54 	bl	8007bb8 <RCCEx_PLL3_Config>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d002      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006f1c:	4b87      	ldr	r3, [pc, #540]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f2c:	4a83      	ldr	r2, [pc, #524]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f2e:	430b      	orrs	r3, r1
 8006f30:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3a:	f002 0310 	and.w	r3, r2, #16
 8006f3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f42:	2300      	movs	r3, #0
 8006f44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006f48:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	d01e      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f5e:	d10c      	bne.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f64:	3328      	adds	r3, #40	; 0x28
 8006f66:	2102      	movs	r1, #2
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 fe25 	bl	8007bb8 <RCCEx_PLL3_Config>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d002      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f7a:	4b70      	ldr	r3, [pc, #448]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f8a:	4a6c      	ldr	r2, [pc, #432]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f8c:	430b      	orrs	r3, r1
 8006f8e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f98:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006f9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fa6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006faa:	460b      	mov	r3, r1
 8006fac:	4313      	orrs	r3, r2
 8006fae:	d03e      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006fb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fbc:	d022      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006fbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fc2:	d81b      	bhi.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d003      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fcc:	d00b      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006fce:	e015      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fd4:	3308      	adds	r3, #8
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f000 fd3b 	bl	8007a54 <RCCEx_PLL2_Config>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006fe4:	e00f      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fea:	3328      	adds	r3, #40	; 0x28
 8006fec:	2102      	movs	r1, #2
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 fde2 	bl	8007bb8 <RCCEx_PLL3_Config>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006ffa:	e004      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007002:	e000      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007006:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10b      	bne.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800700e:	4b4b      	ldr	r3, [pc, #300]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007012:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800701a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800701e:	4a47      	ldr	r2, [pc, #284]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007020:	430b      	orrs	r3, r1
 8007022:	6593      	str	r3, [r2, #88]	; 0x58
 8007024:	e003      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007026:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800702a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800702e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007036:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800703a:	67bb      	str	r3, [r7, #120]	; 0x78
 800703c:	2300      	movs	r3, #0
 800703e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007040:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007044:	460b      	mov	r3, r1
 8007046:	4313      	orrs	r3, r2
 8007048:	d03b      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800704a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800704e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007052:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007056:	d01f      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007058:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800705c:	d818      	bhi.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800705e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007062:	d003      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007064:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007068:	d007      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800706a:	e011      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800706c:	4b33      	ldr	r3, [pc, #204]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800706e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007070:	4a32      	ldr	r2, [pc, #200]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007076:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007078:	e00f      	b.n	800709a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800707a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800707e:	3328      	adds	r3, #40	; 0x28
 8007080:	2101      	movs	r1, #1
 8007082:	4618      	mov	r0, r3
 8007084:	f000 fd98 	bl	8007bb8 <RCCEx_PLL3_Config>
 8007088:	4603      	mov	r3, r0
 800708a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800708e:	e004      	b.n	800709a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007096:	e000      	b.n	800709a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800709a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10b      	bne.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070a2:	4b26      	ldr	r3, [pc, #152]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80070aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b2:	4a22      	ldr	r2, [pc, #136]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070b4:	430b      	orrs	r3, r1
 80070b6:	6553      	str	r3, [r2, #84]	; 0x54
 80070b8:	e003      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80070c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ca:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80070ce:	673b      	str	r3, [r7, #112]	; 0x70
 80070d0:	2300      	movs	r3, #0
 80070d2:	677b      	str	r3, [r7, #116]	; 0x74
 80070d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80070d8:	460b      	mov	r3, r1
 80070da:	4313      	orrs	r3, r2
 80070dc:	d034      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80070de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d003      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80070e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070ec:	d007      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80070ee:	e011      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070f0:	4b12      	ldr	r3, [pc, #72]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f4:	4a11      	ldr	r2, [pc, #68]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80070fc:	e00e      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007102:	3308      	adds	r3, #8
 8007104:	2102      	movs	r1, #2
 8007106:	4618      	mov	r0, r3
 8007108:	f000 fca4 	bl	8007a54 <RCCEx_PLL2_Config>
 800710c:	4603      	mov	r3, r0
 800710e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007112:	e003      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800711a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800711c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10d      	bne.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007124:	4b05      	ldr	r3, [pc, #20]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007128:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800712c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007132:	4a02      	ldr	r2, [pc, #8]	; (800713c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007134:	430b      	orrs	r3, r1
 8007136:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007138:	e006      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800713a:	bf00      	nop
 800713c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007140:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007144:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800714c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007150:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007154:	66bb      	str	r3, [r7, #104]	; 0x68
 8007156:	2300      	movs	r3, #0
 8007158:	66fb      	str	r3, [r7, #108]	; 0x6c
 800715a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800715e:	460b      	mov	r3, r1
 8007160:	4313      	orrs	r3, r2
 8007162:	d00c      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007168:	3328      	adds	r3, #40	; 0x28
 800716a:	2102      	movs	r1, #2
 800716c:	4618      	mov	r0, r3
 800716e:	f000 fd23 	bl	8007bb8 <RCCEx_PLL3_Config>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d002      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800717e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007186:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800718a:	663b      	str	r3, [r7, #96]	; 0x60
 800718c:	2300      	movs	r3, #0
 800718e:	667b      	str	r3, [r7, #100]	; 0x64
 8007190:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007194:	460b      	mov	r3, r1
 8007196:	4313      	orrs	r3, r2
 8007198:	d038      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800719a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800719e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071a6:	d018      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80071a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071ac:	d811      	bhi.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80071ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071b2:	d014      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80071b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071b8:	d80b      	bhi.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d011      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80071be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071c2:	d106      	bne.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071c4:	4bc3      	ldr	r3, [pc, #780]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c8:	4ac2      	ldr	r2, [pc, #776]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80071d0:	e008      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80071d8:	e004      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80071da:	bf00      	nop
 80071dc:	e002      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80071de:	bf00      	nop
 80071e0:	e000      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80071e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10b      	bne.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80071ec:	4bb9      	ldr	r3, [pc, #740]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80071f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071fc:	4ab5      	ldr	r2, [pc, #724]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071fe:	430b      	orrs	r3, r1
 8007200:	6553      	str	r3, [r2, #84]	; 0x54
 8007202:	e003      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007204:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007208:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800720c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007214:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007218:	65bb      	str	r3, [r7, #88]	; 0x58
 800721a:	2300      	movs	r3, #0
 800721c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800721e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007222:	460b      	mov	r3, r1
 8007224:	4313      	orrs	r3, r2
 8007226:	d009      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007228:	4baa      	ldr	r3, [pc, #680]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800722a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800722c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007236:	4aa7      	ldr	r2, [pc, #668]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007238:	430b      	orrs	r3, r1
 800723a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800723c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007244:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007248:	653b      	str	r3, [r7, #80]	; 0x50
 800724a:	2300      	movs	r3, #0
 800724c:	657b      	str	r3, [r7, #84]	; 0x54
 800724e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007252:	460b      	mov	r3, r1
 8007254:	4313      	orrs	r3, r2
 8007256:	d00a      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007258:	4b9e      	ldr	r3, [pc, #632]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007264:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007268:	4a9a      	ldr	r2, [pc, #616]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800726a:	430b      	orrs	r3, r1
 800726c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800726e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007276:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800727a:	64bb      	str	r3, [r7, #72]	; 0x48
 800727c:	2300      	movs	r3, #0
 800727e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007280:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007284:	460b      	mov	r3, r1
 8007286:	4313      	orrs	r3, r2
 8007288:	d009      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800728a:	4b92      	ldr	r3, [pc, #584]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800728c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800728e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007298:	4a8e      	ldr	r2, [pc, #568]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800729a:	430b      	orrs	r3, r1
 800729c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800729e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80072aa:	643b      	str	r3, [r7, #64]	; 0x40
 80072ac:	2300      	movs	r3, #0
 80072ae:	647b      	str	r3, [r7, #68]	; 0x44
 80072b0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80072b4:	460b      	mov	r3, r1
 80072b6:	4313      	orrs	r3, r2
 80072b8:	d00e      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072ba:	4b86      	ldr	r3, [pc, #536]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	4a85      	ldr	r2, [pc, #532]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072c4:	6113      	str	r3, [r2, #16]
 80072c6:	4b83      	ldr	r3, [pc, #524]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072c8:	6919      	ldr	r1, [r3, #16]
 80072ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80072d2:	4a80      	ldr	r2, [pc, #512]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072d4:	430b      	orrs	r3, r1
 80072d6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80072d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80072e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80072e6:	2300      	movs	r3, #0
 80072e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072ea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80072ee:	460b      	mov	r3, r1
 80072f0:	4313      	orrs	r3, r2
 80072f2:	d009      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80072f4:	4b77      	ldr	r3, [pc, #476]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072f8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80072fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007302:	4a74      	ldr	r2, [pc, #464]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007304:	430b      	orrs	r3, r1
 8007306:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007310:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007314:	633b      	str	r3, [r7, #48]	; 0x30
 8007316:	2300      	movs	r3, #0
 8007318:	637b      	str	r3, [r7, #52]	; 0x34
 800731a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800731e:	460b      	mov	r3, r1
 8007320:	4313      	orrs	r3, r2
 8007322:	d00a      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007324:	4b6b      	ldr	r3, [pc, #428]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007328:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800732c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007334:	4a67      	ldr	r2, [pc, #412]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007336:	430b      	orrs	r3, r1
 8007338:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800733a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800733e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007342:	2100      	movs	r1, #0
 8007344:	62b9      	str	r1, [r7, #40]	; 0x28
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800734c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007350:	460b      	mov	r3, r1
 8007352:	4313      	orrs	r3, r2
 8007354:	d011      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800735a:	3308      	adds	r3, #8
 800735c:	2100      	movs	r1, #0
 800735e:	4618      	mov	r0, r3
 8007360:	f000 fb78 	bl	8007a54 <RCCEx_PLL2_Config>
 8007364:	4603      	mov	r3, r0
 8007366:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800736a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007372:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007376:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800737a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800737e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007382:	2100      	movs	r1, #0
 8007384:	6239      	str	r1, [r7, #32]
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	627b      	str	r3, [r7, #36]	; 0x24
 800738c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007390:	460b      	mov	r3, r1
 8007392:	4313      	orrs	r3, r2
 8007394:	d011      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800739a:	3308      	adds	r3, #8
 800739c:	2101      	movs	r1, #1
 800739e:	4618      	mov	r0, r3
 80073a0:	f000 fb58 	bl	8007a54 <RCCEx_PLL2_Config>
 80073a4:	4603      	mov	r3, r0
 80073a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80073aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80073ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c2:	2100      	movs	r1, #0
 80073c4:	61b9      	str	r1, [r7, #24]
 80073c6:	f003 0304 	and.w	r3, r3, #4
 80073ca:	61fb      	str	r3, [r7, #28]
 80073cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80073d0:	460b      	mov	r3, r1
 80073d2:	4313      	orrs	r3, r2
 80073d4:	d011      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073da:	3308      	adds	r3, #8
 80073dc:	2102      	movs	r1, #2
 80073de:	4618      	mov	r0, r3
 80073e0:	f000 fb38 	bl	8007a54 <RCCEx_PLL2_Config>
 80073e4:	4603      	mov	r3, r0
 80073e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80073ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80073fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007402:	2100      	movs	r1, #0
 8007404:	6139      	str	r1, [r7, #16]
 8007406:	f003 0308 	and.w	r3, r3, #8
 800740a:	617b      	str	r3, [r7, #20]
 800740c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007410:	460b      	mov	r3, r1
 8007412:	4313      	orrs	r3, r2
 8007414:	d011      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800741a:	3328      	adds	r3, #40	; 0x28
 800741c:	2100      	movs	r1, #0
 800741e:	4618      	mov	r0, r3
 8007420:	f000 fbca 	bl	8007bb8 <RCCEx_PLL3_Config>
 8007424:	4603      	mov	r3, r0
 8007426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800742a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800742e:	2b00      	cmp	r3, #0
 8007430:	d003      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007432:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007436:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800743a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800743e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007442:	2100      	movs	r1, #0
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	f003 0310 	and.w	r3, r3, #16
 800744a:	60fb      	str	r3, [r7, #12]
 800744c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007450:	460b      	mov	r3, r1
 8007452:	4313      	orrs	r3, r2
 8007454:	d011      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800745a:	3328      	adds	r3, #40	; 0x28
 800745c:	2101      	movs	r1, #1
 800745e:	4618      	mov	r0, r3
 8007460:	f000 fbaa 	bl	8007bb8 <RCCEx_PLL3_Config>
 8007464:	4603      	mov	r3, r0
 8007466:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800746a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800746e:	2b00      	cmp	r3, #0
 8007470:	d003      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007472:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007476:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800747a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800747e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007482:	2100      	movs	r1, #0
 8007484:	6039      	str	r1, [r7, #0]
 8007486:	f003 0320 	and.w	r3, r3, #32
 800748a:	607b      	str	r3, [r7, #4]
 800748c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007490:	460b      	mov	r3, r1
 8007492:	4313      	orrs	r3, r2
 8007494:	d011      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800749a:	3328      	adds	r3, #40	; 0x28
 800749c:	2102      	movs	r1, #2
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 fb8a 	bl	8007bb8 <RCCEx_PLL3_Config>
 80074a4:	4603      	mov	r3, r0
 80074a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80074aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80074ba:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	e000      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80074ce:	46bd      	mov	sp, r7
 80074d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074d4:	58024400 	.word	0x58024400

080074d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80074dc:	f7fe fd54 	bl	8005f88 <HAL_RCC_GetHCLKFreq>
 80074e0:	4602      	mov	r2, r0
 80074e2:	4b06      	ldr	r3, [pc, #24]	; (80074fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	091b      	lsrs	r3, r3, #4
 80074e8:	f003 0307 	and.w	r3, r3, #7
 80074ec:	4904      	ldr	r1, [pc, #16]	; (8007500 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80074ee:	5ccb      	ldrb	r3, [r1, r3]
 80074f0:	f003 031f 	and.w	r3, r3, #31
 80074f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	58024400 	.word	0x58024400
 8007500:	080205e8 	.word	0x080205e8

08007504 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007504:	b480      	push	{r7}
 8007506:	b089      	sub	sp, #36	; 0x24
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800750c:	4ba1      	ldr	r3, [pc, #644]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800750e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007510:	f003 0303 	and.w	r3, r3, #3
 8007514:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007516:	4b9f      	ldr	r3, [pc, #636]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751a:	0b1b      	lsrs	r3, r3, #12
 800751c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007520:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007522:	4b9c      	ldr	r3, [pc, #624]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007526:	091b      	lsrs	r3, r3, #4
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800752e:	4b99      	ldr	r3, [pc, #612]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007532:	08db      	lsrs	r3, r3, #3
 8007534:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	fb02 f303 	mul.w	r3, r2, r3
 800753e:	ee07 3a90 	vmov	s15, r3
 8007542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007546:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 8111 	beq.w	8007774 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	2b02      	cmp	r3, #2
 8007556:	f000 8083 	beq.w	8007660 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	2b02      	cmp	r3, #2
 800755e:	f200 80a1 	bhi.w	80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d003      	beq.n	8007570 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d056      	beq.n	800761c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800756e:	e099      	b.n	80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007570:	4b88      	ldr	r3, [pc, #544]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0320 	and.w	r3, r3, #32
 8007578:	2b00      	cmp	r3, #0
 800757a:	d02d      	beq.n	80075d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800757c:	4b85      	ldr	r3, [pc, #532]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	08db      	lsrs	r3, r3, #3
 8007582:	f003 0303 	and.w	r3, r3, #3
 8007586:	4a84      	ldr	r2, [pc, #528]	; (8007798 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007588:	fa22 f303 	lsr.w	r3, r2, r3
 800758c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	ee07 3a90 	vmov	s15, r3
 8007594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	ee07 3a90 	vmov	s15, r3
 800759e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a6:	4b7b      	ldr	r3, [pc, #492]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ae:	ee07 3a90 	vmov	s15, r3
 80075b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800779c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80075d6:	e087      	b.n	80076e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	ee07 3a90 	vmov	s15, r3
 80075de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80077a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80075e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ea:	4b6a      	ldr	r3, [pc, #424]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f2:	ee07 3a90 	vmov	s15, r3
 80075f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80075fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800779c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800760a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800760e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800761a:	e065      	b.n	80076e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	ee07 3a90 	vmov	s15, r3
 8007622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007626:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80077a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800762a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800762e:	4b59      	ldr	r3, [pc, #356]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007636:	ee07 3a90 	vmov	s15, r3
 800763a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800763e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007642:	eddf 5a56 	vldr	s11, [pc, #344]	; 800779c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800764a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800764e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800765a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800765e:	e043      	b.n	80076e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	ee07 3a90 	vmov	s15, r3
 8007666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80077a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800766e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007672:	4b48      	ldr	r3, [pc, #288]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800767a:	ee07 3a90 	vmov	s15, r3
 800767e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007682:	ed97 6a03 	vldr	s12, [r7, #12]
 8007686:	eddf 5a45 	vldr	s11, [pc, #276]	; 800779c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800768a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800768e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800769a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800769e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076a2:	e021      	b.n	80076e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	ee07 3a90 	vmov	s15, r3
 80076aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80077a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80076b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b6:	4b37      	ldr	r3, [pc, #220]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076be:	ee07 3a90 	vmov	s15, r3
 80076c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800779c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80076e8:	4b2a      	ldr	r3, [pc, #168]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ec:	0a5b      	lsrs	r3, r3, #9
 80076ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076f2:	ee07 3a90 	vmov	s15, r3
 80076f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007702:	edd7 6a07 	vldr	s13, [r7, #28]
 8007706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800770a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800770e:	ee17 2a90 	vmov	r2, s15
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007716:	4b1f      	ldr	r3, [pc, #124]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771a:	0c1b      	lsrs	r3, r3, #16
 800771c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007720:	ee07 3a90 	vmov	s15, r3
 8007724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007728:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800772c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007730:	edd7 6a07 	vldr	s13, [r7, #28]
 8007734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800773c:	ee17 2a90 	vmov	r2, s15
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007744:	4b13      	ldr	r3, [pc, #76]	; (8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007748:	0e1b      	lsrs	r3, r3, #24
 800774a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800774e:	ee07 3a90 	vmov	s15, r3
 8007752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007756:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800775a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800775e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800776a:	ee17 2a90 	vmov	r2, s15
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007772:	e008      	b.n	8007786 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	609a      	str	r2, [r3, #8]
}
 8007786:	bf00      	nop
 8007788:	3724      	adds	r7, #36	; 0x24
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	58024400 	.word	0x58024400
 8007798:	03d09000 	.word	0x03d09000
 800779c:	46000000 	.word	0x46000000
 80077a0:	4c742400 	.word	0x4c742400
 80077a4:	4a742400 	.word	0x4a742400
 80077a8:	4bbebc20 	.word	0x4bbebc20

080077ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b089      	sub	sp, #36	; 0x24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077b4:	4ba1      	ldr	r3, [pc, #644]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b8:	f003 0303 	and.w	r3, r3, #3
 80077bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80077be:	4b9f      	ldr	r3, [pc, #636]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c2:	0d1b      	lsrs	r3, r3, #20
 80077c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80077ca:	4b9c      	ldr	r3, [pc, #624]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ce:	0a1b      	lsrs	r3, r3, #8
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80077d6:	4b99      	ldr	r3, [pc, #612]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077da:	08db      	lsrs	r3, r3, #3
 80077dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	fb02 f303 	mul.w	r3, r2, r3
 80077e6:	ee07 3a90 	vmov	s15, r3
 80077ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 8111 	beq.w	8007a1c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	f000 8083 	beq.w	8007908 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	2b02      	cmp	r3, #2
 8007806:	f200 80a1 	bhi.w	800794c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d003      	beq.n	8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d056      	beq.n	80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007816:	e099      	b.n	800794c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007818:	4b88      	ldr	r3, [pc, #544]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0320 	and.w	r3, r3, #32
 8007820:	2b00      	cmp	r3, #0
 8007822:	d02d      	beq.n	8007880 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007824:	4b85      	ldr	r3, [pc, #532]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	08db      	lsrs	r3, r3, #3
 800782a:	f003 0303 	and.w	r3, r3, #3
 800782e:	4a84      	ldr	r2, [pc, #528]	; (8007a40 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007830:	fa22 f303 	lsr.w	r3, r2, r3
 8007834:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	ee07 3a90 	vmov	s15, r3
 800783c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	ee07 3a90 	vmov	s15, r3
 8007846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800784a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800784e:	4b7b      	ldr	r3, [pc, #492]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007856:	ee07 3a90 	vmov	s15, r3
 800785a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800785e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007862:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007a44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800786a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800786e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800787a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800787e:	e087      	b.n	8007990 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	ee07 3a90 	vmov	s15, r3
 8007886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800788a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007a48 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800788e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007892:	4b6a      	ldr	r3, [pc, #424]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800789a:	ee07 3a90 	vmov	s15, r3
 800789e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80078a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007a44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078c2:	e065      	b.n	8007990 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	ee07 3a90 	vmov	s15, r3
 80078ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007a4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80078d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078d6:	4b59      	ldr	r3, [pc, #356]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078de:	ee07 3a90 	vmov	s15, r3
 80078e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80078ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007a44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007902:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007906:	e043      	b.n	8007990 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	ee07 3a90 	vmov	s15, r3
 800790e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007912:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007a50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800791a:	4b48      	ldr	r3, [pc, #288]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800791c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007922:	ee07 3a90 	vmov	s15, r3
 8007926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800792a:	ed97 6a03 	vldr	s12, [r7, #12]
 800792e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007a44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800793a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800793e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007946:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800794a:	e021      	b.n	8007990 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	ee07 3a90 	vmov	s15, r3
 8007952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007956:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007a4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800795a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800795e:	4b37      	ldr	r3, [pc, #220]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007966:	ee07 3a90 	vmov	s15, r3
 800796a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800796e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007972:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007a44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800797a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800797e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800798a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800798e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007990:	4b2a      	ldr	r3, [pc, #168]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007994:	0a5b      	lsrs	r3, r3, #9
 8007996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800799a:	ee07 3a90 	vmov	s15, r3
 800799e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80079ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079b6:	ee17 2a90 	vmov	r2, s15
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80079be:	4b1f      	ldr	r3, [pc, #124]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c2:	0c1b      	lsrs	r3, r3, #16
 80079c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079c8:	ee07 3a90 	vmov	s15, r3
 80079cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80079dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079e4:	ee17 2a90 	vmov	r2, s15
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80079ec:	4b13      	ldr	r3, [pc, #76]	; (8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f0:	0e1b      	lsrs	r3, r3, #24
 80079f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079f6:	ee07 3a90 	vmov	s15, r3
 80079fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a06:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a12:	ee17 2a90 	vmov	r2, s15
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007a1a:	e008      	b.n	8007a2e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	609a      	str	r2, [r3, #8]
}
 8007a2e:	bf00      	nop
 8007a30:	3724      	adds	r7, #36	; 0x24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	58024400 	.word	0x58024400
 8007a40:	03d09000 	.word	0x03d09000
 8007a44:	46000000 	.word	0x46000000
 8007a48:	4c742400 	.word	0x4c742400
 8007a4c:	4a742400 	.word	0x4a742400
 8007a50:	4bbebc20 	.word	0x4bbebc20

08007a54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a62:	4b53      	ldr	r3, [pc, #332]	; (8007bb0 <RCCEx_PLL2_Config+0x15c>)
 8007a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a66:	f003 0303 	and.w	r3, r3, #3
 8007a6a:	2b03      	cmp	r3, #3
 8007a6c:	d101      	bne.n	8007a72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e099      	b.n	8007ba6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007a72:	4b4f      	ldr	r3, [pc, #316]	; (8007bb0 <RCCEx_PLL2_Config+0x15c>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a4e      	ldr	r2, [pc, #312]	; (8007bb0 <RCCEx_PLL2_Config+0x15c>)
 8007a78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a7e:	f7fa f8eb 	bl	8001c58 <HAL_GetTick>
 8007a82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a84:	e008      	b.n	8007a98 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a86:	f7fa f8e7 	bl	8001c58 <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d901      	bls.n	8007a98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e086      	b.n	8007ba6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a98:	4b45      	ldr	r3, [pc, #276]	; (8007bb0 <RCCEx_PLL2_Config+0x15c>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1f0      	bne.n	8007a86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007aa4:	4b42      	ldr	r3, [pc, #264]	; (8007bb0 <RCCEx_PLL2_Config+0x15c>)
 8007aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	031b      	lsls	r3, r3, #12
 8007ab2:	493f      	ldr	r1, [pc, #252]	; (8007bb0 <RCCEx_PLL2_Config+0x15c>)
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	628b      	str	r3, [r1, #40]	; 0x28
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	3b01      	subs	r3, #1
 8007abe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	025b      	lsls	r3, r3, #9
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	431a      	orrs	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	041b      	lsls	r3, r3, #16
 8007ad6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007ada:	431a      	orrs	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	061b      	lsls	r3, r3, #24
 8007ae4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ae8:	4931      	ldr	r1, [pc, #196]	; (8007bb0 <RCCEx_PLL2_Config+0x15c>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007aee:	4b30      	ldr	r3, [pc, #192]	; (8007bb0 <RCCEx_PLL2_Config+0x15c>)
 8007af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	492d      	ldr	r1, [pc, #180]	; (8007bb0 <RCCEx_PLL2_Config+0x15c>)
 8007afc:	4313      	orrs	r3, r2
 8007afe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007b00:	4b2b      	ldr	r3, [pc, #172]	; (8007bb0 <RCCEx_PLL2_Config+0x15c>)
 8007b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b04:	f023 0220 	bic.w	r2, r3, #32
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	4928      	ldr	r1, [pc, #160]	; (8007bb0 <RCCEx_PLL2_Config+0x15c>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007b12:	4b27      	ldr	r3, [pc, #156]	; (8007bb0 <RCCEx_PLL2_Config+0x15c>)
 8007b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b16:	4a26      	ldr	r2, [pc, #152]	; (8007bb0 <RCCEx_PLL2_Config+0x15c>)
 8007b18:	f023 0310 	bic.w	r3, r3, #16
 8007b1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b1e:	4b24      	ldr	r3, [pc, #144]	; (8007bb0 <RCCEx_PLL2_Config+0x15c>)
 8007b20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b22:	4b24      	ldr	r3, [pc, #144]	; (8007bb4 <RCCEx_PLL2_Config+0x160>)
 8007b24:	4013      	ands	r3, r2
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	69d2      	ldr	r2, [r2, #28]
 8007b2a:	00d2      	lsls	r2, r2, #3
 8007b2c:	4920      	ldr	r1, [pc, #128]	; (8007bb0 <RCCEx_PLL2_Config+0x15c>)
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007b32:	4b1f      	ldr	r3, [pc, #124]	; (8007bb0 <RCCEx_PLL2_Config+0x15c>)
 8007b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b36:	4a1e      	ldr	r2, [pc, #120]	; (8007bb0 <RCCEx_PLL2_Config+0x15c>)
 8007b38:	f043 0310 	orr.w	r3, r3, #16
 8007b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d106      	bne.n	8007b52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007b44:	4b1a      	ldr	r3, [pc, #104]	; (8007bb0 <RCCEx_PLL2_Config+0x15c>)
 8007b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b48:	4a19      	ldr	r2, [pc, #100]	; (8007bb0 <RCCEx_PLL2_Config+0x15c>)
 8007b4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b50:	e00f      	b.n	8007b72 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d106      	bne.n	8007b66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007b58:	4b15      	ldr	r3, [pc, #84]	; (8007bb0 <RCCEx_PLL2_Config+0x15c>)
 8007b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5c:	4a14      	ldr	r2, [pc, #80]	; (8007bb0 <RCCEx_PLL2_Config+0x15c>)
 8007b5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b64:	e005      	b.n	8007b72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007b66:	4b12      	ldr	r3, [pc, #72]	; (8007bb0 <RCCEx_PLL2_Config+0x15c>)
 8007b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6a:	4a11      	ldr	r2, [pc, #68]	; (8007bb0 <RCCEx_PLL2_Config+0x15c>)
 8007b6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007b72:	4b0f      	ldr	r3, [pc, #60]	; (8007bb0 <RCCEx_PLL2_Config+0x15c>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a0e      	ldr	r2, [pc, #56]	; (8007bb0 <RCCEx_PLL2_Config+0x15c>)
 8007b78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b7e:	f7fa f86b 	bl	8001c58 <HAL_GetTick>
 8007b82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b84:	e008      	b.n	8007b98 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b86:	f7fa f867 	bl	8001c58 <HAL_GetTick>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d901      	bls.n	8007b98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b94:	2303      	movs	r3, #3
 8007b96:	e006      	b.n	8007ba6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b98:	4b05      	ldr	r3, [pc, #20]	; (8007bb0 <RCCEx_PLL2_Config+0x15c>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d0f0      	beq.n	8007b86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	58024400 	.word	0x58024400
 8007bb4:	ffff0007 	.word	0xffff0007

08007bb8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007bc6:	4b53      	ldr	r3, [pc, #332]	; (8007d14 <RCCEx_PLL3_Config+0x15c>)
 8007bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bca:	f003 0303 	and.w	r3, r3, #3
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d101      	bne.n	8007bd6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e099      	b.n	8007d0a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007bd6:	4b4f      	ldr	r3, [pc, #316]	; (8007d14 <RCCEx_PLL3_Config+0x15c>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a4e      	ldr	r2, [pc, #312]	; (8007d14 <RCCEx_PLL3_Config+0x15c>)
 8007bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007be0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007be2:	f7fa f839 	bl	8001c58 <HAL_GetTick>
 8007be6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007be8:	e008      	b.n	8007bfc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007bea:	f7fa f835 	bl	8001c58 <HAL_GetTick>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d901      	bls.n	8007bfc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e086      	b.n	8007d0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bfc:	4b45      	ldr	r3, [pc, #276]	; (8007d14 <RCCEx_PLL3_Config+0x15c>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1f0      	bne.n	8007bea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007c08:	4b42      	ldr	r3, [pc, #264]	; (8007d14 <RCCEx_PLL3_Config+0x15c>)
 8007c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	051b      	lsls	r3, r3, #20
 8007c16:	493f      	ldr	r1, [pc, #252]	; (8007d14 <RCCEx_PLL3_Config+0x15c>)
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	628b      	str	r3, [r1, #40]	; 0x28
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	3b01      	subs	r3, #1
 8007c22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	025b      	lsls	r3, r3, #9
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	431a      	orrs	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	3b01      	subs	r3, #1
 8007c38:	041b      	lsls	r3, r3, #16
 8007c3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c3e:	431a      	orrs	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	3b01      	subs	r3, #1
 8007c46:	061b      	lsls	r3, r3, #24
 8007c48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c4c:	4931      	ldr	r1, [pc, #196]	; (8007d14 <RCCEx_PLL3_Config+0x15c>)
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007c52:	4b30      	ldr	r3, [pc, #192]	; (8007d14 <RCCEx_PLL3_Config+0x15c>)
 8007c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	695b      	ldr	r3, [r3, #20]
 8007c5e:	492d      	ldr	r1, [pc, #180]	; (8007d14 <RCCEx_PLL3_Config+0x15c>)
 8007c60:	4313      	orrs	r3, r2
 8007c62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007c64:	4b2b      	ldr	r3, [pc, #172]	; (8007d14 <RCCEx_PLL3_Config+0x15c>)
 8007c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c68:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	699b      	ldr	r3, [r3, #24]
 8007c70:	4928      	ldr	r1, [pc, #160]	; (8007d14 <RCCEx_PLL3_Config+0x15c>)
 8007c72:	4313      	orrs	r3, r2
 8007c74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007c76:	4b27      	ldr	r3, [pc, #156]	; (8007d14 <RCCEx_PLL3_Config+0x15c>)
 8007c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7a:	4a26      	ldr	r2, [pc, #152]	; (8007d14 <RCCEx_PLL3_Config+0x15c>)
 8007c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007c82:	4b24      	ldr	r3, [pc, #144]	; (8007d14 <RCCEx_PLL3_Config+0x15c>)
 8007c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c86:	4b24      	ldr	r3, [pc, #144]	; (8007d18 <RCCEx_PLL3_Config+0x160>)
 8007c88:	4013      	ands	r3, r2
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	69d2      	ldr	r2, [r2, #28]
 8007c8e:	00d2      	lsls	r2, r2, #3
 8007c90:	4920      	ldr	r1, [pc, #128]	; (8007d14 <RCCEx_PLL3_Config+0x15c>)
 8007c92:	4313      	orrs	r3, r2
 8007c94:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007c96:	4b1f      	ldr	r3, [pc, #124]	; (8007d14 <RCCEx_PLL3_Config+0x15c>)
 8007c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9a:	4a1e      	ldr	r2, [pc, #120]	; (8007d14 <RCCEx_PLL3_Config+0x15c>)
 8007c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d106      	bne.n	8007cb6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007ca8:	4b1a      	ldr	r3, [pc, #104]	; (8007d14 <RCCEx_PLL3_Config+0x15c>)
 8007caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cac:	4a19      	ldr	r2, [pc, #100]	; (8007d14 <RCCEx_PLL3_Config+0x15c>)
 8007cae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007cb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007cb4:	e00f      	b.n	8007cd6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d106      	bne.n	8007cca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007cbc:	4b15      	ldr	r3, [pc, #84]	; (8007d14 <RCCEx_PLL3_Config+0x15c>)
 8007cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc0:	4a14      	ldr	r2, [pc, #80]	; (8007d14 <RCCEx_PLL3_Config+0x15c>)
 8007cc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007cc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007cc8:	e005      	b.n	8007cd6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007cca:	4b12      	ldr	r3, [pc, #72]	; (8007d14 <RCCEx_PLL3_Config+0x15c>)
 8007ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cce:	4a11      	ldr	r2, [pc, #68]	; (8007d14 <RCCEx_PLL3_Config+0x15c>)
 8007cd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007cd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007cd6:	4b0f      	ldr	r3, [pc, #60]	; (8007d14 <RCCEx_PLL3_Config+0x15c>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a0e      	ldr	r2, [pc, #56]	; (8007d14 <RCCEx_PLL3_Config+0x15c>)
 8007cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ce0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ce2:	f7f9 ffb9 	bl	8001c58 <HAL_GetTick>
 8007ce6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ce8:	e008      	b.n	8007cfc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cea:	f7f9 ffb5 	bl	8001c58 <HAL_GetTick>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d901      	bls.n	8007cfc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e006      	b.n	8007d0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cfc:	4b05      	ldr	r3, [pc, #20]	; (8007d14 <RCCEx_PLL3_Config+0x15c>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d0f0      	beq.n	8007cea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	58024400 	.word	0x58024400
 8007d18:	ffff0007 	.word	0xffff0007

08007d1c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d101      	bne.n	8007d2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e158      	b.n	8007fe0 <HAL_SPI_Init+0x2c4>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a5f      	ldr	r2, [pc, #380]	; (8007eb8 <HAL_SPI_Init+0x19c>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d00f      	beq.n	8007d5e <HAL_SPI_Init+0x42>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a5e      	ldr	r2, [pc, #376]	; (8007ebc <HAL_SPI_Init+0x1a0>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d00a      	beq.n	8007d5e <HAL_SPI_Init+0x42>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a5c      	ldr	r2, [pc, #368]	; (8007ec0 <HAL_SPI_Init+0x1a4>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d005      	beq.n	8007d5e <HAL_SPI_Init+0x42>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	2b0f      	cmp	r3, #15
 8007d58:	d901      	bls.n	8007d5e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e140      	b.n	8007fe0 <HAL_SPI_Init+0x2c4>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f001 fd30 	bl	80097c4 <SPI_GetPacketSize>
 8007d64:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a53      	ldr	r2, [pc, #332]	; (8007eb8 <HAL_SPI_Init+0x19c>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d00c      	beq.n	8007d8a <HAL_SPI_Init+0x6e>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a51      	ldr	r2, [pc, #324]	; (8007ebc <HAL_SPI_Init+0x1a0>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d007      	beq.n	8007d8a <HAL_SPI_Init+0x6e>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a50      	ldr	r2, [pc, #320]	; (8007ec0 <HAL_SPI_Init+0x1a4>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d002      	beq.n	8007d8a <HAL_SPI_Init+0x6e>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2b08      	cmp	r3, #8
 8007d88:	d811      	bhi.n	8007dae <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007d8e:	4a4a      	ldr	r2, [pc, #296]	; (8007eb8 <HAL_SPI_Init+0x19c>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d009      	beq.n	8007da8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a48      	ldr	r2, [pc, #288]	; (8007ebc <HAL_SPI_Init+0x1a0>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d004      	beq.n	8007da8 <HAL_SPI_Init+0x8c>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a47      	ldr	r2, [pc, #284]	; (8007ec0 <HAL_SPI_Init+0x1a4>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d104      	bne.n	8007db2 <HAL_SPI_Init+0x96>
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2b10      	cmp	r3, #16
 8007dac:	d901      	bls.n	8007db2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e116      	b.n	8007fe0 <HAL_SPI_Init+0x2c4>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d135      	bne.n	8007e2a <HAL_SPI_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a3e      	ldr	r2, [pc, #248]	; (8007ec4 <HAL_SPI_Init+0x1a8>)
 8007dca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a3d      	ldr	r2, [pc, #244]	; (8007ec8 <HAL_SPI_Init+0x1ac>)
 8007dd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a3c      	ldr	r2, [pc, #240]	; (8007ecc <HAL_SPI_Init+0x1b0>)
 8007dda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a3b      	ldr	r2, [pc, #236]	; (8007ed0 <HAL_SPI_Init+0x1b4>)
 8007de2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a3a      	ldr	r2, [pc, #232]	; (8007ed4 <HAL_SPI_Init+0x1b8>)
 8007dea:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a39      	ldr	r2, [pc, #228]	; (8007ed8 <HAL_SPI_Init+0x1bc>)
 8007df2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a38      	ldr	r2, [pc, #224]	; (8007edc <HAL_SPI_Init+0x1c0>)
 8007dfa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a37      	ldr	r2, [pc, #220]	; (8007ee0 <HAL_SPI_Init+0x1c4>)
 8007e02:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    hspi->SuspendCallback      = HAL_SPI_SuspendCallback;      /* Legacy weak SuspendCallback      */
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a36      	ldr	r2, [pc, #216]	; (8007ee4 <HAL_SPI_Init+0x1c8>)
 8007e0a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

    if (hspi->MspInitCallback == NULL)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d103      	bne.n	8007e20 <HAL_SPI_Init+0x104>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a33      	ldr	r2, [pc, #204]	; (8007ee8 <HAL_SPI_Init+0x1cc>)
 8007e1c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2202      	movs	r2, #2
 8007e2e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f022 0201 	bic.w	r2, r2, #1
 8007e40:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007e4c:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e56:	d119      	bne.n	8007e8c <HAL_SPI_Init+0x170>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e60:	d103      	bne.n	8007e6a <HAL_SPI_Init+0x14e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d008      	beq.n	8007e7c <HAL_SPI_Init+0x160>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10c      	bne.n	8007e8c <HAL_SPI_Init+0x170>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007e76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e7a:	d107      	bne.n	8007e8c <HAL_SPI_Init+0x170>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e8a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d029      	beq.n	8007eec <HAL_SPI_Init+0x1d0>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	2b06      	cmp	r3, #6
 8007e9e:	d925      	bls.n	8007eec <HAL_SPI_Init+0x1d0>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	601a      	str	r2, [r3, #0]
 8007eb6:	e021      	b.n	8007efc <HAL_SPI_Init+0x1e0>
 8007eb8:	40013000 	.word	0x40013000
 8007ebc:	40003800 	.word	0x40003800
 8007ec0:	40003c00 	.word	0x40003c00
 8007ec4:	08009355 	.word	0x08009355
 8007ec8:	08009369 	.word	0x08009369
 8007ecc:	0800937d 	.word	0x0800937d
 8007ed0:	08009391 	.word	0x08009391
 8007ed4:	080093a5 	.word	0x080093a5
 8007ed8:	080093b9 	.word	0x080093b9
 8007edc:	080093cd 	.word	0x080093cd
 8007ee0:	080093e1 	.word	0x080093e1
 8007ee4:	080093f5 	.word	0x080093f5
 8007ee8:	08000f69 	.word	0x08000f69
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007efa:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	69da      	ldr	r2, [r3, #28]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f04:	431a      	orrs	r2, r3
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	431a      	orrs	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f0e:	ea42 0103 	orr.w	r1, r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	68da      	ldr	r2, [r3, #12]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	430a      	orrs	r2, r1
 8007f1c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f26:	431a      	orrs	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2c:	431a      	orrs	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	431a      	orrs	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	431a      	orrs	r2, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	431a      	orrs	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a1b      	ldr	r3, [r3, #32]
 8007f44:	431a      	orrs	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	431a      	orrs	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f50:	431a      	orrs	r2, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	431a      	orrs	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f5c:	ea42 0103 	orr.w	r1, r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	430a      	orrs	r2, r1
 8007f6a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d113      	bne.n	8007f9c <HAL_SPI_Init+0x280>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f86:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f9a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f022 0201 	bic.w	r2, r2, #1
 8007faa:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00a      	beq.n	8007fce <HAL_SPI_Init+0x2b2>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	430a      	orrs	r2, r1
 8007fcc:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3710      	adds	r7, #16
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <HAL_SPI_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_RegisterCallback(SPI_HandleTypeDef *hspi, HAL_SPI_CallbackIDTypeDef CallbackID,
                                           pSPI_CallbackTypeDef pCallback)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b087      	sub	sp, #28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	607a      	str	r2, [r7, #4]
 8007ff4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d109      	bne.n	8008014 <HAL_SPI_RegisterCallback+0x2c>
  {
    /* Update the error code */
    hspi->ErrorCode |= HAL_SPI_ERROR_INVALID_CALLBACK;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008006:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e09f      	b.n	8008154 <HAL_SPI_RegisterCallback+0x16c>
  }
  /* Lock the process */
  __HAL_LOCK(hspi);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800801a:	2b01      	cmp	r3, #1
 800801c:	d101      	bne.n	8008022 <HAL_SPI_RegisterCallback+0x3a>
 800801e:	2302      	movs	r3, #2
 8008020:	e098      	b.n	8008154 <HAL_SPI_RegisterCallback+0x16c>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (HAL_SPI_STATE_READY == hspi->State)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b01      	cmp	r3, #1
 8008034:	d15e      	bne.n	80080f4 <HAL_SPI_RegisterCallback+0x10c>
  {
    switch (CallbackID)
 8008036:	7afb      	ldrb	r3, [r7, #11]
 8008038:	2b0a      	cmp	r3, #10
 800803a:	d850      	bhi.n	80080de <HAL_SPI_RegisterCallback+0xf6>
 800803c:	a201      	add	r2, pc, #4	; (adr r2, 8008044 <HAL_SPI_RegisterCallback+0x5c>)
 800803e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008042:	bf00      	nop
 8008044:	08008071 	.word	0x08008071
 8008048:	0800807b 	.word	0x0800807b
 800804c:	08008085 	.word	0x08008085
 8008050:	0800808f 	.word	0x0800808f
 8008054:	08008099 	.word	0x08008099
 8008058:	080080a3 	.word	0x080080a3
 800805c:	080080ad 	.word	0x080080ad
 8008060:	080080b7 	.word	0x080080b7
 8008064:	080080c1 	.word	0x080080c1
 8008068:	080080cb 	.word	0x080080cb
 800806c:	080080d5 	.word	0x080080d5
    {
      case HAL_SPI_TX_COMPLETE_CB_ID :
        hspi->TxCpltCallback = pCallback;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8008078:	e067      	b.n	800814a <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_RX_COMPLETE_CB_ID :
        hspi->RxCpltCallback = pCallback;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8008082:	e062      	b.n	800814a <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_TX_RX_COMPLETE_CB_ID :
        hspi->TxRxCpltCallback = pCallback;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 800808c:	e05d      	b.n	800814a <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_TX_HALF_COMPLETE_CB_ID :
        hspi->TxHalfCpltCallback = pCallback;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8008096:	e058      	b.n	800814a <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_RX_HALF_COMPLETE_CB_ID :
        hspi->RxHalfCpltCallback = pCallback;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 80080a0:	e053      	b.n	800814a <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID :
        hspi->TxRxHalfCpltCallback = pCallback;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 80080aa:	e04e      	b.n	800814a <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_ERROR_CB_ID :
        hspi->ErrorCallback = pCallback;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 80080b4:	e049      	b.n	800814a <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_ABORT_CB_ID :
        hspi->AbortCpltCallback = pCallback;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 80080be:	e044      	b.n	800814a <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_SUSPEND_CB_ID :
        hspi->SuspendCallback = pCallback;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 80080c8:	e03f      	b.n	800814a <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 80080d2:	e03a      	b.n	800814a <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 80080dc:	e035      	b.n	800814a <HAL_SPI_RegisterCallback+0x162>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Return error status */
        status =  HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	75fb      	strb	r3, [r7, #23]
        break;
 80080f2:	e02a      	b.n	800814a <HAL_SPI_RegisterCallback+0x162>
    }
  }
  else if (HAL_SPI_STATE_RESET == hspi->State)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d11a      	bne.n	8008136 <HAL_SPI_RegisterCallback+0x14e>
  {
    switch (CallbackID)
 8008100:	7afb      	ldrb	r3, [r7, #11]
 8008102:	2b09      	cmp	r3, #9
 8008104:	d002      	beq.n	800810c <HAL_SPI_RegisterCallback+0x124>
 8008106:	2b0a      	cmp	r3, #10
 8008108:	d005      	beq.n	8008116 <HAL_SPI_RegisterCallback+0x12e>
 800810a:	e009      	b.n	8008120 <HAL_SPI_RegisterCallback+0x138>
    {
      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8008114:	e019      	b.n	800814a <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800811e:	e014      	b.n	800814a <HAL_SPI_RegisterCallback+0x162>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008126:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Return error status */
        status =  HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	75fb      	strb	r3, [r7, #23]
        break;
 8008134:	e009      	b.n	800814a <HAL_SPI_RegisterCallback+0x162>
    }
  }
  else
  {
    /* Update the error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800813c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return error status */
    status =  HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return status;
 8008152:	7dfb      	ldrb	r3, [r7, #23]
}
 8008154:	4618      	mov	r0, r3
 8008156:	371c      	adds	r7, #28
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b08a      	sub	sp, #40	; 0x28
 8008164:	af02      	add	r7, sp, #8
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	603b      	str	r3, [r7, #0]
 800816c:	4613      	mov	r3, r2
 800816e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	3320      	adds	r3, #32
 8008176:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008178:	2300      	movs	r3, #0
 800817a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008182:	2b01      	cmp	r3, #1
 8008184:	d101      	bne.n	800818a <HAL_SPI_Transmit+0x2a>
 8008186:	2302      	movs	r3, #2
 8008188:	e1e1      	b.n	800854e <HAL_SPI_Transmit+0x3ee>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008192:	f7f9 fd61 	bl	8001c58 <HAL_GetTick>
 8008196:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d007      	beq.n	80081b4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80081a4:	2302      	movs	r3, #2
 80081a6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80081b0:	7efb      	ldrb	r3, [r7, #27]
 80081b2:	e1cc      	b.n	800854e <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d002      	beq.n	80081c0 <HAL_SPI_Transmit+0x60>
 80081ba:	88fb      	ldrh	r3, [r7, #6]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d107      	bne.n	80081d0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80081cc:	7efb      	ldrb	r3, [r7, #27]
 80081ce:	e1be      	b.n	800854e <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2203      	movs	r2, #3
 80081d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	88fa      	ldrh	r2, [r7, #6]
 80081ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	88fa      	ldrh	r2, [r7, #6]
 80081f2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2200      	movs	r2, #0
 8008210:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008220:	d108      	bne.n	8008234 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008230:	601a      	str	r2, [r3, #0]
 8008232:	e009      	b.n	8008248 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8008246:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	685a      	ldr	r2, [r3, #4]
 800824e:	4b96      	ldr	r3, [pc, #600]	; (80084a8 <HAL_SPI_Transmit+0x348>)
 8008250:	4013      	ands	r3, r2
 8008252:	88f9      	ldrh	r1, [r7, #6]
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	6812      	ldr	r2, [r2, #0]
 8008258:	430b      	orrs	r3, r1
 800825a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f042 0201 	orr.w	r2, r2, #1
 800826a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008274:	d107      	bne.n	8008286 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008284:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	2b0f      	cmp	r3, #15
 800828c:	d947      	bls.n	800831e <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800828e:	e03f      	b.n	8008310 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	f003 0302 	and.w	r3, r3, #2
 800829a:	2b02      	cmp	r3, #2
 800829c:	d114      	bne.n	80082c8 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	6812      	ldr	r2, [r2, #0]
 80082a8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082ae:	1d1a      	adds	r2, r3, #4
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	3b01      	subs	r3, #1
 80082be:	b29a      	uxth	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80082c6:	e023      	b.n	8008310 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082c8:	f7f9 fcc6 	bl	8001c58 <HAL_GetTick>
 80082cc:	4602      	mov	r2, r0
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d803      	bhi.n	80082e0 <HAL_SPI_Transmit+0x180>
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082de:	d102      	bne.n	80082e6 <HAL_SPI_Transmit+0x186>
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d114      	bne.n	8008310 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f001 f99e 	bl	8009628 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800830c:	2303      	movs	r3, #3
 800830e:	e11e      	b.n	800854e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008316:	b29b      	uxth	r3, r3
 8008318:	2b00      	cmp	r3, #0
 800831a:	d1b9      	bne.n	8008290 <HAL_SPI_Transmit+0x130>
 800831c:	e0f1      	b.n	8008502 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	2b07      	cmp	r3, #7
 8008324:	f240 80e6 	bls.w	80084f4 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008328:	e05d      	b.n	80083e6 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	695b      	ldr	r3, [r3, #20]
 8008330:	f003 0302 	and.w	r3, r3, #2
 8008334:	2b02      	cmp	r3, #2
 8008336:	d132      	bne.n	800839e <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800833e:	b29b      	uxth	r3, r3
 8008340:	2b01      	cmp	r3, #1
 8008342:	d918      	bls.n	8008376 <HAL_SPI_Transmit+0x216>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008348:	2b00      	cmp	r3, #0
 800834a:	d014      	beq.n	8008376 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	6812      	ldr	r2, [r2, #0]
 8008356:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800835c:	1d1a      	adds	r2, r3, #4
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008368:	b29b      	uxth	r3, r3
 800836a:	3b02      	subs	r3, #2
 800836c:	b29a      	uxth	r2, r3
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008374:	e037      	b.n	80083e6 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800837a:	881a      	ldrh	r2, [r3, #0]
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008384:	1c9a      	adds	r2, r3, #2
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008390:	b29b      	uxth	r3, r3
 8008392:	3b01      	subs	r3, #1
 8008394:	b29a      	uxth	r2, r3
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800839c:	e023      	b.n	80083e6 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800839e:	f7f9 fc5b 	bl	8001c58 <HAL_GetTick>
 80083a2:	4602      	mov	r2, r0
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	683a      	ldr	r2, [r7, #0]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d803      	bhi.n	80083b6 <HAL_SPI_Transmit+0x256>
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083b4:	d102      	bne.n	80083bc <HAL_SPI_Transmit+0x25c>
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d114      	bne.n	80083e6 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f001 f933 	bl	8009628 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e0b3      	b.n	800854e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d19b      	bne.n	800832a <HAL_SPI_Transmit+0x1ca>
 80083f2:	e086      	b.n	8008502 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	f003 0302 	and.w	r3, r3, #2
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d154      	bne.n	80084ac <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008408:	b29b      	uxth	r3, r3
 800840a:	2b03      	cmp	r3, #3
 800840c:	d918      	bls.n	8008440 <HAL_SPI_Transmit+0x2e0>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008412:	2b40      	cmp	r3, #64	; 0x40
 8008414:	d914      	bls.n	8008440 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	6812      	ldr	r2, [r2, #0]
 8008420:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008426:	1d1a      	adds	r2, r3, #4
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008432:	b29b      	uxth	r3, r3
 8008434:	3b04      	subs	r3, #4
 8008436:	b29a      	uxth	r2, r3
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800843e:	e059      	b.n	80084f4 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008446:	b29b      	uxth	r3, r3
 8008448:	2b01      	cmp	r3, #1
 800844a:	d917      	bls.n	800847c <HAL_SPI_Transmit+0x31c>
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008450:	2b00      	cmp	r3, #0
 8008452:	d013      	beq.n	800847c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008458:	881a      	ldrh	r2, [r3, #0]
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008462:	1c9a      	adds	r2, r3, #2
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800846e:	b29b      	uxth	r3, r3
 8008470:	3b02      	subs	r3, #2
 8008472:	b29a      	uxth	r2, r3
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800847a:	e03b      	b.n	80084f4 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3320      	adds	r3, #32
 8008486:	7812      	ldrb	r2, [r2, #0]
 8008488:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800848e:	1c5a      	adds	r2, r3, #1
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800849a:	b29b      	uxth	r3, r3
 800849c:	3b01      	subs	r3, #1
 800849e:	b29a      	uxth	r2, r3
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80084a6:	e025      	b.n	80084f4 <HAL_SPI_Transmit+0x394>
 80084a8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084ac:	f7f9 fbd4 	bl	8001c58 <HAL_GetTick>
 80084b0:	4602      	mov	r2, r0
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d803      	bhi.n	80084c4 <HAL_SPI_Transmit+0x364>
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c2:	d102      	bne.n	80084ca <HAL_SPI_Transmit+0x36a>
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d114      	bne.n	80084f4 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f001 f8ac 	bl	8009628 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80084f0:	2303      	movs	r3, #3
 80084f2:	e02c      	b.n	800854e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f47f af79 	bne.w	80083f4 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	2200      	movs	r2, #0
 800850a:	2108      	movs	r1, #8
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f001 f92b 	bl	8009768 <SPI_WaitOnFlagUntilTimeout>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d007      	beq.n	8008528 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800851e:	f043 0220 	orr.w	r2, r3, #32
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f001 f87d 	bl	8009628 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	e000      	b.n	800854e <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800854c:	7efb      	ldrb	r3, [r7, #27]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3720      	adds	r7, #32
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop

08008558 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b088      	sub	sp, #32
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	603b      	str	r3, [r7, #0]
 8008564:	4613      	mov	r3, r2
 8008566:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008568:	2300      	movs	r3, #0
 800856a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	3330      	adds	r3, #48	; 0x30
 8008572:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800857a:	2b01      	cmp	r3, #1
 800857c:	d101      	bne.n	8008582 <HAL_SPI_Receive+0x2a>
 800857e:	2302      	movs	r3, #2
 8008580:	e173      	b.n	800886a <HAL_SPI_Receive+0x312>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2201      	movs	r2, #1
 8008586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800858a:	f7f9 fb65 	bl	8001c58 <HAL_GetTick>
 800858e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008596:	b2db      	uxtb	r3, r3
 8008598:	2b01      	cmp	r3, #1
 800859a:	d007      	beq.n	80085ac <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800859c:	2302      	movs	r3, #2
 800859e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80085a8:	7ffb      	ldrb	r3, [r7, #31]
 80085aa:	e15e      	b.n	800886a <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d002      	beq.n	80085b8 <HAL_SPI_Receive+0x60>
 80085b2:	88fb      	ldrh	r3, [r7, #6]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d107      	bne.n	80085c8 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80085c4:	7ffb      	ldrb	r3, [r7, #31]
 80085c6:	e150      	b.n	800886a <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2204      	movs	r2, #4
 80085cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	88fa      	ldrh	r2, [r7, #6]
 80085e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	88fa      	ldrh	r2, [r7, #6]
 80085ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2200      	movs	r2, #0
 80085f2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008618:	d108      	bne.n	800862c <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008628:	601a      	str	r2, [r3, #0]
 800862a:	e009      	b.n	8008640 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800863e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	685a      	ldr	r2, [r3, #4]
 8008646:	4b8b      	ldr	r3, [pc, #556]	; (8008874 <HAL_SPI_Receive+0x31c>)
 8008648:	4013      	ands	r3, r2
 800864a:	88f9      	ldrh	r1, [r7, #6]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	6812      	ldr	r2, [r2, #0]
 8008650:	430b      	orrs	r3, r1
 8008652:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f042 0201 	orr.w	r2, r2, #1
 8008662:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800866c:	d107      	bne.n	800867e <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800867c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	2b0f      	cmp	r3, #15
 8008684:	d948      	bls.n	8008718 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008686:	e040      	b.n	800870a <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	695a      	ldr	r2, [r3, #20]
 800868e:	f248 0308 	movw	r3, #32776	; 0x8008
 8008692:	4013      	ands	r3, r2
 8008694:	2b00      	cmp	r3, #0
 8008696:	d014      	beq.n	80086c2 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80086a2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086a8:	1d1a      	adds	r2, r3, #4
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	3b01      	subs	r3, #1
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80086c0:	e023      	b.n	800870a <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086c2:	f7f9 fac9 	bl	8001c58 <HAL_GetTick>
 80086c6:	4602      	mov	r2, r0
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d803      	bhi.n	80086da <HAL_SPI_Receive+0x182>
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d8:	d102      	bne.n	80086e0 <HAL_SPI_Receive+0x188>
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d114      	bne.n	800870a <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f000 ffa1 	bl	8009628 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008706:	2303      	movs	r3, #3
 8008708:	e0af      	b.n	800886a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008710:	b29b      	uxth	r3, r3
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1b8      	bne.n	8008688 <HAL_SPI_Receive+0x130>
 8008716:	e095      	b.n	8008844 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	2b07      	cmp	r3, #7
 800871e:	f240 808b 	bls.w	8008838 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008722:	e03f      	b.n	80087a4 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	695b      	ldr	r3, [r3, #20]
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	2b01      	cmp	r3, #1
 8008730:	d114      	bne.n	800875c <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008736:	69ba      	ldr	r2, [r7, #24]
 8008738:	8812      	ldrh	r2, [r2, #0]
 800873a:	b292      	uxth	r2, r2
 800873c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008742:	1c9a      	adds	r2, r3, #2
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800874e:	b29b      	uxth	r3, r3
 8008750:	3b01      	subs	r3, #1
 8008752:	b29a      	uxth	r2, r3
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800875a:	e023      	b.n	80087a4 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800875c:	f7f9 fa7c 	bl	8001c58 <HAL_GetTick>
 8008760:	4602      	mov	r2, r0
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	1ad3      	subs	r3, r2, r3
 8008766:	683a      	ldr	r2, [r7, #0]
 8008768:	429a      	cmp	r2, r3
 800876a:	d803      	bhi.n	8008774 <HAL_SPI_Receive+0x21c>
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008772:	d102      	bne.n	800877a <HAL_SPI_Receive+0x222>
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d114      	bne.n	80087a4 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f000 ff54 	bl	8009628 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800878e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80087a0:	2303      	movs	r3, #3
 80087a2:	e062      	b.n	800886a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1b9      	bne.n	8008724 <HAL_SPI_Receive+0x1cc>
 80087b0:	e048      	b.n	8008844 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	695b      	ldr	r3, [r3, #20]
 80087b8:	f003 0301 	and.w	r3, r3, #1
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d117      	bne.n	80087f0 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087cc:	7812      	ldrb	r2, [r2, #0]
 80087ce:	b2d2      	uxtb	r2, r2
 80087d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087d6:	1c5a      	adds	r2, r3, #1
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	3b01      	subs	r3, #1
 80087e6:	b29a      	uxth	r2, r3
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80087ee:	e023      	b.n	8008838 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087f0:	f7f9 fa32 	bl	8001c58 <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	683a      	ldr	r2, [r7, #0]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d803      	bhi.n	8008808 <HAL_SPI_Receive+0x2b0>
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008806:	d102      	bne.n	800880e <HAL_SPI_Receive+0x2b6>
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d114      	bne.n	8008838 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f000 ff0a 	bl	8009628 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2200      	movs	r2, #0
 8008818:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008822:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e018      	b.n	800886a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800883e:	b29b      	uxth	r3, r3
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1b6      	bne.n	80087b2 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f000 feef 	bl	8009628 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2201      	movs	r2, #1
 8008856:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008860:	2b00      	cmp	r3, #0
 8008862:	d001      	beq.n	8008868 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	e000      	b.n	800886a <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 8008868:	7ffb      	ldrb	r3, [r7, #31]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3720      	adds	r7, #32
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	ffff0000 	.word	0xffff0000

08008878 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b086      	sub	sp, #24
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	4613      	mov	r3, r2
 8008884:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008890:	2b01      	cmp	r3, #1
 8008892:	d101      	bne.n	8008898 <HAL_SPI_Transmit_DMA+0x20>
 8008894:	2302      	movs	r3, #2
 8008896:	e137      	b.n	8008b08 <HAL_SPI_Transmit_DMA+0x290>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d007      	beq.n	80088bc <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 80088ac:	2302      	movs	r3, #2
 80088ae:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80088b8:	7dfb      	ldrb	r3, [r7, #23]
 80088ba:	e125      	b.n	8008b08 <HAL_SPI_Transmit_DMA+0x290>
  }

  if ((pData == NULL) || (Size == 0UL))
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d002      	beq.n	80088c8 <HAL_SPI_Transmit_DMA+0x50>
 80088c2:	88fb      	ldrh	r3, [r7, #6]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d107      	bne.n	80088d8 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80088d4:	7dfb      	ldrb	r3, [r7, #23]
 80088d6:	e117      	b.n	8008b08 <HAL_SPI_Transmit_DMA+0x290>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2203      	movs	r2, #3
 80088dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	88fa      	ldrh	r2, [r7, #6]
 80088f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	88fa      	ldrh	r2, [r7, #6]
 80088fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008928:	d108      	bne.n	800893c <HAL_SPI_Transmit_DMA+0xc4>
  {
    SPI_1LINE_TX(hspi);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008938:	601a      	str	r2, [r3, #0]
 800893a:	e009      	b.n	8008950 <HAL_SPI_Transmit_DMA+0xd8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800894e:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	2b0f      	cmp	r3, #15
 8008956:	d905      	bls.n	8008964 <HAL_SPI_Transmit_DMA+0xec>
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008962:	d10f      	bne.n	8008984 <HAL_SPI_Transmit_DMA+0x10c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008968:	2b07      	cmp	r3, #7
 800896a:	d913      	bls.n	8008994 <HAL_SPI_Transmit_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008970:	699b      	ldr	r3, [r3, #24]
 8008972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008976:	d00d      	beq.n	8008994 <HAL_SPI_Transmit_DMA+0x11c>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800897c:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800897e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008982:	d007      	beq.n	8008994 <HAL_SPI_Transmit_DMA+0x11c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8008984:	2301      	movs	r3, #1
 8008986:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008990:	7dfb      	ldrb	r3, [r7, #23]
 8008992:	e0b9      	b.n	8008b08 <HAL_SPI_Transmit_DMA+0x290>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	2b07      	cmp	r3, #7
 800899a:	d820      	bhi.n	80089de <HAL_SPI_Transmit_DMA+0x166>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089a0:	699b      	ldr	r3, [r3, #24]
 80089a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089a6:	d109      	bne.n	80089bc <HAL_SPI_Transmit_DMA+0x144>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	3301      	adds	r3, #1
 80089b2:	105b      	asrs	r3, r3, #1
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089c6:	d11e      	bne.n	8008a06 <HAL_SPI_Transmit_DMA+0x18e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	3303      	adds	r3, #3
 80089d2:	109b      	asrs	r3, r3, #2
 80089d4:	b29a      	uxth	r2, r3
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80089dc:	e013      	b.n	8008a06 <HAL_SPI_Transmit_DMA+0x18e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	2b0f      	cmp	r3, #15
 80089e4:	d80f      	bhi.n	8008a06 <HAL_SPI_Transmit_DMA+0x18e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089ea:	699b      	ldr	r3, [r3, #24]
 80089ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089f0:	d109      	bne.n	8008a06 <HAL_SPI_Transmit_DMA+0x18e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	3301      	adds	r3, #1
 80089fc:	105b      	asrs	r3, r3, #1
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a0a:	4a41      	ldr	r2, [pc, #260]	; (8008b10 <HAL_SPI_Transmit_DMA+0x298>)
 8008a0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a12:	4a40      	ldr	r2, [pc, #256]	; (8008b14 <HAL_SPI_Transmit_DMA+0x29c>)
 8008a14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a1a:	4a3f      	ldr	r2, [pc, #252]	; (8008b18 <HAL_SPI_Transmit_DMA+0x2a0>)
 8008a1c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a22:	2200      	movs	r2, #0
 8008a24:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	689a      	ldr	r2, [r3, #8]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a34:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a3e:	4619      	mov	r1, r3
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3320      	adds	r3, #32
 8008a46:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008a4e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008a50:	f7f9 fd7a 	bl	8002548 <HAL_DMA_Start_IT>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d013      	beq.n	8008a82 <HAL_SPI_Transmit_DMA+0x20a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a60:	f043 0210 	orr.w	r2, r3, #16
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8008a7e:	7dfb      	ldrb	r3, [r7, #23]
 8008a80:	e042      	b.n	8008b08 <HAL_SPI_Transmit_DMA+0x290>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a86:	69db      	ldr	r3, [r3, #28]
 8008a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a8c:	d108      	bne.n	8008aa0 <HAL_SPI_Transmit_DMA+0x228>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	6859      	ldr	r1, [r3, #4]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	4b20      	ldr	r3, [pc, #128]	; (8008b1c <HAL_SPI_Transmit_DMA+0x2a4>)
 8008a9a:	400b      	ands	r3, r1
 8008a9c:	6053      	str	r3, [r2, #4]
 8008a9e:	e009      	b.n	8008ab4 <HAL_SPI_Transmit_DMA+0x23c>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	685a      	ldr	r2, [r3, #4]
 8008aa6:	4b1d      	ldr	r3, [pc, #116]	; (8008b1c <HAL_SPI_Transmit_DMA+0x2a4>)
 8008aa8:	4013      	ands	r3, r2
 8008aaa:	88f9      	ldrh	r1, [r7, #6]
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	6812      	ldr	r2, [r2, #0]
 8008ab0:	430b      	orrs	r3, r1
 8008ab2:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	689a      	ldr	r2, [r3, #8]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ac2:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	691a      	ldr	r2, [r3, #16]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 8008ad2:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f042 0201 	orr.w	r2, r2, #1
 8008ae2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008aec:	d107      	bne.n	8008afe <HAL_SPI_Transmit_DMA+0x286>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008afc:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8008b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3718      	adds	r7, #24
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	0800949d 	.word	0x0800949d
 8008b14:	08009409 	.word	0x08009409
 8008b18:	080094dd 	.word	0x080094dd
 8008b1c:	ffff0000 	.word	0xffff0000

08008b20 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d101      	bne.n	8008b40 <HAL_SPI_Receive_DMA+0x20>
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	e134      	b.n	8008daa <HAL_SPI_Receive_DMA+0x28a>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d007      	beq.n	8008b64 <HAL_SPI_Receive_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8008b54:	2302      	movs	r3, #2
 8008b56:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008b60:	7dfb      	ldrb	r3, [r7, #23]
 8008b62:	e122      	b.n	8008daa <HAL_SPI_Receive_DMA+0x28a>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d002      	beq.n	8008b70 <HAL_SPI_Receive_DMA+0x50>
 8008b6a:	88fb      	ldrh	r3, [r7, #6]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d107      	bne.n	8008b80 <HAL_SPI_Receive_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008b7c:	7dfb      	ldrb	r3, [r7, #23]
 8008b7e:	e114      	b.n	8008daa <HAL_SPI_Receive_DMA+0x28a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2204      	movs	r2, #4
 8008b84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	68ba      	ldr	r2, [r7, #8]
 8008b94:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	88fa      	ldrh	r2, [r7, #6]
 8008b9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	88fa      	ldrh	r2, [r7, #6]
 8008ba2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008bca:	d108      	bne.n	8008bde <HAL_SPI_Receive_DMA+0xbe>
  {
    SPI_1LINE_RX(hspi);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008bda:	601a      	str	r2, [r3, #0]
 8008bdc:	e009      	b.n	8008bf2 <HAL_SPI_Receive_DMA+0xd2>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008bf0:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	2b0f      	cmp	r3, #15
 8008bf8:	d905      	bls.n	8008c06 <HAL_SPI_Receive_DMA+0xe6>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bfe:	699b      	ldr	r3, [r3, #24]
 8008c00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c04:	d10f      	bne.n	8008c26 <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008c0a:	2b07      	cmp	r3, #7
 8008c0c:	d913      	bls.n	8008c36 <HAL_SPI_Receive_DMA+0x116>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c18:	d00d      	beq.n	8008c36 <HAL_SPI_Receive_DMA+0x116>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c1e:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008c20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c24:	d007      	beq.n	8008c36 <HAL_SPI_Receive_DMA+0x116>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008c32:	7dfb      	ldrb	r3, [r7, #23]
 8008c34:	e0b9      	b.n	8008daa <HAL_SPI_Receive_DMA+0x28a>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	689a      	ldr	r2, [r3, #8]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008c44:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	2b07      	cmp	r3, #7
 8008c4c:	d820      	bhi.n	8008c90 <HAL_SPI_Receive_DMA+0x170>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c58:	d109      	bne.n	8008c6e <HAL_SPI_Receive_DMA+0x14e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	3301      	adds	r3, #1
 8008c64:	105b      	asrs	r3, r3, #1
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c72:	699b      	ldr	r3, [r3, #24]
 8008c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c78:	d11e      	bne.n	8008cb8 <HAL_SPI_Receive_DMA+0x198>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	3303      	adds	r3, #3
 8008c84:	109b      	asrs	r3, r3, #2
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008c8e:	e013      	b.n	8008cb8 <HAL_SPI_Receive_DMA+0x198>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	2b0f      	cmp	r3, #15
 8008c96:	d80f      	bhi.n	8008cb8 <HAL_SPI_Receive_DMA+0x198>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ca2:	d109      	bne.n	8008cb8 <HAL_SPI_Receive_DMA+0x198>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	3301      	adds	r3, #1
 8008cae:	105b      	asrs	r3, r3, #1
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cbc:	4a3d      	ldr	r2, [pc, #244]	; (8008db4 <HAL_SPI_Receive_DMA+0x294>)
 8008cbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cc4:	4a3c      	ldr	r2, [pc, #240]	; (8008db8 <HAL_SPI_Receive_DMA+0x298>)
 8008cc6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ccc:	4a3b      	ldr	r2, [pc, #236]	; (8008dbc <HAL_SPI_Receive_DMA+0x29c>)
 8008cce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	3330      	adds	r3, #48	; 0x30
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ce8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008cf0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8008cf2:	f7f9 fc29 	bl	8002548 <HAL_DMA_Start_IT>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d013      	beq.n	8008d24 <HAL_SPI_Receive_DMA+0x204>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d02:	f043 0210 	orr.w	r2, r3, #16
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8008d20:	7dfb      	ldrb	r3, [r7, #23]
 8008d22:	e042      	b.n	8008daa <HAL_SPI_Receive_DMA+0x28a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d28:	69db      	ldr	r3, [r3, #28]
 8008d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d2e:	d108      	bne.n	8008d42 <HAL_SPI_Receive_DMA+0x222>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	6859      	ldr	r1, [r3, #4]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	4b21      	ldr	r3, [pc, #132]	; (8008dc0 <HAL_SPI_Receive_DMA+0x2a0>)
 8008d3c:	400b      	ands	r3, r1
 8008d3e:	6053      	str	r3, [r2, #4]
 8008d40:	e009      	b.n	8008d56 <HAL_SPI_Receive_DMA+0x236>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	685a      	ldr	r2, [r3, #4]
 8008d48:	4b1d      	ldr	r3, [pc, #116]	; (8008dc0 <HAL_SPI_Receive_DMA+0x2a0>)
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	88f9      	ldrh	r1, [r7, #6]
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	6812      	ldr	r2, [r2, #0]
 8008d52:	430b      	orrs	r3, r1
 8008d54:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	689a      	ldr	r2, [r3, #8]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d64:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	691a      	ldr	r2, [r3, #16]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8008d74:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f042 0201 	orr.w	r2, r2, #1
 8008d84:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d8e:	d107      	bne.n	8008da0 <HAL_SPI_Receive_DMA+0x280>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d9e:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8008da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3718      	adds	r7, #24
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	080094bd 	.word	0x080094bd
 8008db8:	08009453 	.word	0x08009453
 8008dbc:	080094dd 	.word	0x080094dd
 8008dc0:	ffff0000 	.word	0xffff0000

08008dc4 <HAL_SPI_Abort>:
  *          + Set handle State to READY.
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;

  __IO uint32_t count;

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d101      	bne.n	8008dda <HAL_SPI_Abort+0x16>
 8008dd6:	2302      	movs	r3, #2
 8008dd8:	e0d9      	b.n	8008f8e <HAL_SPI_Abort+0x1ca>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set hspi->state to aborting to avoid any interaction */
  hspi->State = HAL_SPI_STATE_ABORT;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2207      	movs	r2, #7
 8008de6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	73fb      	strb	r3, [r7, #15]
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 8008dee:	4b6a      	ldr	r3, [pc, #424]	; (8008f98 <HAL_SPI_Abort+0x1d4>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a6a      	ldr	r2, [pc, #424]	; (8008f9c <HAL_SPI_Abort+0x1d8>)
 8008df4:	fba2 2303 	umull	r2, r3, r2, r3
 8008df8:	0a5b      	lsrs	r3, r3, #9
 8008dfa:	2264      	movs	r2, #100	; 0x64
 8008dfc:	fb02 f303 	mul.w	r3, r2, r3
 8008e00:	60bb      	str	r3, [r7, #8]

  /* If master communication on going, make sure current frame is done before closing the connection */
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e10:	d15b      	bne.n	8008eca <HAL_SPI_Abort+0x106>
  {
    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	691a      	ldr	r2, [r3, #16]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f022 0208 	bic.w	r2, r2, #8
 8008e20:	611a      	str	r2, [r3, #16]
    do
    {
      count--;
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	3b01      	subs	r3, #1
 8008e26:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d108      	bne.n	8008e40 <HAL_SPI_Abort+0x7c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8008e3e:	e006      	b.n	8008e4e <HAL_SPI_Abort+0x8a>
      }
    }
    while (HAL_IS_BIT_SET(hspi->Instance->IER, SPI_IT_EOT));
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	f003 0308 	and.w	r3, r3, #8
 8008e4a:	2b08      	cmp	r3, #8
 8008e4c:	d0e9      	beq.n	8008e22 <HAL_SPI_Abort+0x5e>

    /* Request a Suspend transfer */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSUSP);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e5c:	601a      	str	r2, [r3, #0]
    do
    {
      count--;
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	3b01      	subs	r3, #1
 8008e62:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d108      	bne.n	8008e7c <HAL_SPI_Abort+0xb8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8008e7a:	e007      	b.n	8008e8c <HAL_SPI_Abort+0xc8>
      }
    }
    while (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART));
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e8a:	d0e8      	beq.n	8008e5e <HAL_SPI_Abort+0x9a>

    /* Clear SUSP flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	699a      	ldr	r2, [r3, #24]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e9a:	619a      	str	r2, [r3, #24]
    do
    {
      count--;
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d108      	bne.n	8008eba <HAL_SPI_Abort+0xf6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8008eb8:	e007      	b.n	8008eca <HAL_SPI_Abort+0x106>
      }
    }
    while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_SUSP));
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	695b      	ldr	r3, [r3, #20]
 8008ec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ec8:	d0e8      	beq.n	8008e9c <HAL_SPI_Abort+0xd8>
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN))
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ed8:	d11b      	bne.n	8008f12 <HAL_SPI_Abort+0x14e>
  {
    if (hspi->hdmatx != NULL)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d017      	beq.n	8008f12 <HAL_SPI_Abort+0x14e>
    {
      /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
      hspi->hdmatx->XferAbortCallback = NULL;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7f9 fd94 	bl	8002a1c <HAL_DMA_Abort>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00b      	beq.n	8008f12 <HAL_SPI_Abort+0x14e>
      {
        if (HAL_DMA_GetError(hspi->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fb fa74 	bl	80043ec <HAL_DMA_GetError>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b20      	cmp	r3, #32
 8008f08:	d103      	bne.n	8008f12 <HAL_SPI_Abort+0x14e>
        {
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2240      	movs	r2, #64	; 0x40
 8008f0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f20:	d11b      	bne.n	8008f5a <HAL_SPI_Abort+0x196>
  {
    if (hspi->hdmarx != NULL)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d017      	beq.n	8008f5a <HAL_SPI_Abort+0x196>
    {
      /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
      hspi->hdmarx->XferAbortCallback = NULL;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f2e:	2200      	movs	r2, #0
 8008f30:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7f9 fd70 	bl	8002a1c <HAL_DMA_Abort>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00b      	beq.n	8008f5a <HAL_SPI_Abort+0x196>
      {
        if (HAL_DMA_GetError(hspi->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fb fa50 	bl	80043ec <HAL_DMA_GetError>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b20      	cmp	r3, #32
 8008f50:	d103      	bne.n	8008f5a <HAL_SPI_Abort+0x196>
        {
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2240      	movs	r2, #64	; 0x40
 8008f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
  }

  /* Proceed with abort procedure */
  SPI_AbortTransfer(hspi);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 fb00 	bl	8009560 <SPI_AbortTransfer>

  /* Check error during Abort procedure */
  if (HAL_IS_BIT_SET(hspi->ErrorCode, HAL_SPI_ERROR_ABORT))
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f6a:	2b40      	cmp	r3, #64	; 0x40
 8008f6c:	d102      	bne.n	8008f74 <HAL_SPI_Abort+0x1b0>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	73fb      	strb	r3, [r7, #15]
 8008f72:	e003      	b.n	8008f7c <HAL_SPI_Abort+0x1b8>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return errorcode;
 8008f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	24000000 	.word	0x24000000
 8008f9c:	057619f1 	.word	0x057619f1

08008fa0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b08a      	sub	sp, #40	; 0x28
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008fb8:	6a3a      	ldr	r2, [r7, #32]
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008fd2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3330      	adds	r3, #48	; 0x30
 8008fda:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d012      	beq.n	800900c <HAL_SPI_IRQHandler+0x6c>
 8008fe6:	6a3b      	ldr	r3, [r7, #32]
 8008fe8:	f003 0308 	and.w	r3, r3, #8
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00d      	beq.n	800900c <HAL_SPI_IRQHandler+0x6c>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	699a      	ldr	r2, [r3, #24]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ffe:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	4798      	blx	r3
#else
    HAL_SPI_SuspendCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800900a:	e19c      	b.n	8009346 <HAL_SPI_IRQHandler+0x3a6>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009012:	2b00      	cmp	r3, #0
 8009014:	d113      	bne.n	800903e <HAL_SPI_IRQHandler+0x9e>
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	f003 0320 	and.w	r3, r3, #32
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10e      	bne.n	800903e <HAL_SPI_IRQHandler+0x9e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009026:	2b00      	cmp	r3, #0
 8009028:	d009      	beq.n	800903e <HAL_SPI_IRQHandler+0x9e>
  {
    hspi->TxISR(hspi);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	4798      	blx	r3
    hspi->RxISR(hspi);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	4798      	blx	r3
    handled = 1UL;
 800903a:	2301      	movs	r3, #1
 800903c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10f      	bne.n	8009068 <HAL_SPI_IRQHandler+0xc8>
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	f003 0301 	and.w	r3, r3, #1
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00a      	beq.n	8009068 <HAL_SPI_IRQHandler+0xc8>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009058:	2b00      	cmp	r3, #0
 800905a:	d105      	bne.n	8009068 <HAL_SPI_IRQHandler+0xc8>
  {
    hspi->RxISR(hspi);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	4798      	blx	r3
    handled = 1UL;
 8009064:	2301      	movs	r3, #1
 8009066:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	f003 0320 	and.w	r3, r3, #32
 800906e:	2b00      	cmp	r3, #0
 8009070:	d10f      	bne.n	8009092 <HAL_SPI_IRQHandler+0xf2>
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	f003 0302 	and.w	r3, r3, #2
 8009078:	2b00      	cmp	r3, #0
 800907a:	d00a      	beq.n	8009092 <HAL_SPI_IRQHandler+0xf2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009082:	2b00      	cmp	r3, #0
 8009084:	d105      	bne.n	8009092 <HAL_SPI_IRQHandler+0xf2>
  {
    hspi->TxISR(hspi);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	4798      	blx	r3
    handled = 1UL;
 800908e:	2301      	movs	r3, #1
 8009090:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8009092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009094:	2b00      	cmp	r3, #0
 8009096:	f040 8151 	bne.w	800933c <HAL_SPI_IRQHandler+0x39c>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	f003 0308 	and.w	r3, r3, #8
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f000 8093 	beq.w	80091cc <HAL_SPI_IRQHandler+0x22c>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	699a      	ldr	r2, [r3, #24]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f042 0208 	orr.w	r2, r2, #8
 80090b4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	699a      	ldr	r2, [r3, #24]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f042 0210 	orr.w	r2, r2, #16
 80090c4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	699a      	ldr	r2, [r3, #24]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090d4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	691a      	ldr	r2, [r3, #16]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f022 0208 	bic.w	r2, r2, #8
 80090e4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d13d      	bne.n	8009170 <HAL_SPI_IRQHandler+0x1d0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80090f4:	e036      	b.n	8009164 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	2b0f      	cmp	r3, #15
 80090fc:	d90b      	bls.n	8009116 <HAL_SPI_IRQHandler+0x176>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009106:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009108:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800910e:	1d1a      	adds	r2, r3, #4
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	665a      	str	r2, [r3, #100]	; 0x64
 8009114:	e01d      	b.n	8009152 <HAL_SPI_IRQHandler+0x1b2>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	2b07      	cmp	r3, #7
 800911c:	d90b      	bls.n	8009136 <HAL_SPI_IRQHandler+0x196>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	8812      	ldrh	r2, [r2, #0]
 8009126:	b292      	uxth	r2, r2
 8009128:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800912e:	1c9a      	adds	r2, r3, #2
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	665a      	str	r2, [r3, #100]	; 0x64
 8009134:	e00d      	b.n	8009152 <HAL_SPI_IRQHandler+0x1b2>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009142:	7812      	ldrb	r2, [r2, #0]
 8009144:	b2d2      	uxtb	r2, r2
 8009146:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800914c:	1c5a      	adds	r2, r3, #1
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009158:	b29b      	uxth	r3, r3
 800915a:	3b01      	subs	r3, #1
 800915c:	b29a      	uxth	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800916a:	b29b      	uxth	r3, r3
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1c2      	bne.n	80090f6 <HAL_SPI_IRQHandler+0x156>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fa59 	bl	8009628 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2201      	movs	r2, #1
 800917a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009184:	2b00      	cmp	r3, #0
 8009186:	d005      	beq.n	8009194 <HAL_SPI_IRQHandler+0x1f4>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009192:	e0d8      	b.n	8009346 <HAL_SPI_IRQHandler+0x3a6>
    }

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009194:	7cfb      	ldrb	r3, [r7, #19]
 8009196:	2b05      	cmp	r3, #5
 8009198:	d105      	bne.n	80091a6 <HAL_SPI_IRQHandler+0x206>
    {
      hspi->TxRxCpltCallback(hspi);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	4798      	blx	r3
    else
    {
      /* End of the appropriate call */
    }

    return;
 80091a4:	e0cc      	b.n	8009340 <HAL_SPI_IRQHandler+0x3a0>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80091a6:	7cfb      	ldrb	r3, [r7, #19]
 80091a8:	2b04      	cmp	r3, #4
 80091aa:	d105      	bne.n	80091b8 <HAL_SPI_IRQHandler+0x218>
      hspi->RxCpltCallback(hspi);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	4798      	blx	r3
    return;
 80091b6:	e0c3      	b.n	8009340 <HAL_SPI_IRQHandler+0x3a0>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80091b8:	7cfb      	ldrb	r3, [r7, #19]
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	f040 80c0 	bne.w	8009340 <HAL_SPI_IRQHandler+0x3a0>
      hspi->TxCpltCallback(hspi);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	4798      	blx	r3
    return;
 80091ca:	e0b9      	b.n	8009340 <HAL_SPI_IRQHandler+0x3a0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f000 80b7 	beq.w	8009346 <HAL_SPI_IRQHandler+0x3a6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00f      	beq.n	8009202 <HAL_SPI_IRQHandler+0x262>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091e8:	f043 0204 	orr.w	r2, r3, #4
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	699a      	ldr	r2, [r3, #24]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009200:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00f      	beq.n	800922c <HAL_SPI_IRQHandler+0x28c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009212:	f043 0201 	orr.w	r2, r3, #1
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	699a      	ldr	r2, [r3, #24]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800922a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00f      	beq.n	8009256 <HAL_SPI_IRQHandler+0x2b6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800923c:	f043 0208 	orr.w	r2, r3, #8
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	699a      	ldr	r2, [r3, #24]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009254:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	f003 0320 	and.w	r3, r3, #32
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00f      	beq.n	8009280 <HAL_SPI_IRQHandler+0x2e0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009266:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	699a      	ldr	r2, [r3, #24]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f042 0220 	orr.w	r2, r2, #32
 800927e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009286:	2b00      	cmp	r3, #0
 8009288:	d05c      	beq.n	8009344 <HAL_SPI_IRQHandler+0x3a4>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f022 0201 	bic.w	r2, r2, #1
 8009298:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	6919      	ldr	r1, [r3, #16]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	4b29      	ldr	r3, [pc, #164]	; (800934c <HAL_SPI_IRQHandler+0x3ac>)
 80092a6:	400b      	ands	r3, r1
 80092a8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80092b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80092b4:	d138      	bne.n	8009328 <HAL_SPI_IRQHandler+0x388>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	689a      	ldr	r2, [r3, #8]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80092c4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d013      	beq.n	80092f6 <HAL_SPI_IRQHandler+0x356>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092d2:	4a1f      	ldr	r2, [pc, #124]	; (8009350 <HAL_SPI_IRQHandler+0x3b0>)
 80092d4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092da:	4618      	mov	r0, r3
 80092dc:	f7f9 febc 	bl	8003058 <HAL_DMA_Abort_IT>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d007      	beq.n	80092f6 <HAL_SPI_IRQHandler+0x356>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d022      	beq.n	8009344 <HAL_SPI_IRQHandler+0x3a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009302:	4a13      	ldr	r2, [pc, #76]	; (8009350 <HAL_SPI_IRQHandler+0x3b0>)
 8009304:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800930a:	4618      	mov	r0, r3
 800930c:	f7f9 fea4 	bl	8003058 <HAL_DMA_Abort_IT>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d016      	beq.n	8009344 <HAL_SPI_IRQHandler+0x3a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800931c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009326:	e00d      	b.n	8009344 <HAL_SPI_IRQHandler+0x3a4>
        hspi->State = HAL_SPI_STATE_READY;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        hspi->ErrorCallback(hspi);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	4798      	blx	r3
    return;
 800933a:	e003      	b.n	8009344 <HAL_SPI_IRQHandler+0x3a4>
    return;
 800933c:	bf00      	nop
 800933e:	e002      	b.n	8009346 <HAL_SPI_IRQHandler+0x3a6>
    return;
 8009340:	bf00      	nop
 8009342:	e000      	b.n	8009346 <HAL_SPI_IRQHandler+0x3a6>
    return;
 8009344:	bf00      	nop
  }
}
 8009346:	3728      	adds	r7, #40	; 0x28
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}
 800934c:	fffffc94 	.word	0xfffffc94
 8009350:	08009527 	.word	0x08009527

08009354 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800935c:	bf00      	nop
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009370:	bf00      	nop
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009384:	bf00      	nop
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009398:	bf00      	nop
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80093ac:	bf00      	nop
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80093c0:	bf00      	nop
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80093d4:	bf00      	nop
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 80093e8:	bf00      	nop
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80093fc:	bf00      	nop
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009414:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800941c:	b2db      	uxtb	r3, r3
 800941e:	2b07      	cmp	r3, #7
 8009420:	d013      	beq.n	800944a <SPI_DMATransmitCplt+0x42>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009426:	69db      	ldr	r3, [r3, #28]
 8009428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800942c:	d105      	bne.n	800943a <SPI_DMATransmitCplt+0x32>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	4798      	blx	r3
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8009438:	e007      	b.n	800944a <SPI_DMATransmitCplt+0x42>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	691a      	ldr	r2, [r3, #16]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f042 0208 	orr.w	r2, r2, #8
 8009448:	611a      	str	r2, [r3, #16]
}
 800944a:	bf00      	nop
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009452:	b580      	push	{r7, lr}
 8009454:	b084      	sub	sp, #16
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945e:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009466:	b2db      	uxtb	r3, r3
 8009468:	2b07      	cmp	r3, #7
 800946a:	d013      	beq.n	8009494 <SPI_DMAReceiveCplt+0x42>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009470:	69db      	ldr	r3, [r3, #28]
 8009472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009476:	d105      	bne.n	8009484 <SPI_DMAReceiveCplt+0x32>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	4798      	blx	r3
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8009482:	e007      	b.n	8009494 <SPI_DMAReceiveCplt+0x42>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	691a      	ldr	r2, [r3, #16]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f042 0208 	orr.w	r2, r2, #8
 8009492:	611a      	str	r2, [r3, #16]
}
 8009494:	bf00      	nop
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094b0:	68f8      	ldr	r0, [r7, #12]
 80094b2:	4798      	blx	r3
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80094b4:	bf00      	nop
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	4798      	blx	r3
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80094d4:	bf00      	nop
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e8:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f7fa ff7e 	bl	80043ec <HAL_DMA_GetError>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d013      	beq.n	800951e <SPI_DMAError+0x42>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	f000 f896 	bl	8009628 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009502:	f043 0210 	orr.w	r2, r3, #16
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800951a:	68f8      	ldr	r0, [r7, #12]
 800951c:	4798      	blx	r3
#else
    HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800951e:	bf00      	nop
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b084      	sub	sp, #16
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009532:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2200      	movs	r2, #0
 8009538:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2200      	movs	r2, #0
 8009540:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009556:	bf00      	nop
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
	...

08009560 <SPI_AbortTransfer>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTransfer(SPI_HandleTypeDef *hspi)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f022 0201 	bic.w	r2, r2, #1
 8009576:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	6919      	ldr	r1, [r3, #16]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	4b28      	ldr	r3, [pc, #160]	; (8009624 <SPI_AbortTransfer+0xc4>)
 8009584:	400b      	ands	r3, r1
 8009586:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Clear the Status flags in the SR register */
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	699a      	ldr	r2, [r3, #24]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f042 0208 	orr.w	r2, r2, #8
 8009596:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	699a      	ldr	r2, [r3, #24]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f042 0210 	orr.w	r2, r2, #16
 80095a6:	619a      	str	r2, [r3, #24]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	689a      	ldr	r2, [r3, #8]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80095b6:	609a      	str	r2, [r3, #8]

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	699a      	ldr	r2, [r3, #24]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095c6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	699a      	ldr	r2, [r3, #24]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f042 0220 	orr.w	r2, r2, #32
 80095d6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	699a      	ldr	r2, [r3, #24]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095e6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	699a      	ldr	r2, [r3, #24]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095f6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	699a      	ldr	r2, [r3, #24]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009606:	619a      	str	r2, [r3, #24]

#if (USE_SPI_CRC != 0U)
  __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
#endif /* USE_SPI_CRC */

  hspi->TxXferCount = (uint16_t)0UL;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009618:	bf00      	nop
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr
 8009624:	fffffc90 	.word	0xfffffc90

08009628 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	695b      	ldr	r3, [r3, #20]
 8009636:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	699a      	ldr	r2, [r3, #24]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f042 0208 	orr.w	r2, r2, #8
 8009646:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	699a      	ldr	r2, [r3, #24]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f042 0210 	orr.w	r2, r2, #16
 8009656:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f022 0201 	bic.w	r2, r2, #1
 8009666:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	6919      	ldr	r1, [r3, #16]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	4b3c      	ldr	r3, [pc, #240]	; (8009764 <SPI_CloseTransfer+0x13c>)
 8009674:	400b      	ands	r3, r1
 8009676:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	689a      	ldr	r2, [r3, #8]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009686:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800968e:	b2db      	uxtb	r3, r3
 8009690:	2b04      	cmp	r3, #4
 8009692:	d014      	beq.n	80096be <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f003 0320 	and.w	r3, r3, #32
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00f      	beq.n	80096be <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	699a      	ldr	r2, [r3, #24]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f042 0220 	orr.w	r2, r2, #32
 80096bc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	2b03      	cmp	r3, #3
 80096c8:	d014      	beq.n	80096f4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d00f      	beq.n	80096f4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096da:	f043 0204 	orr.w	r2, r3, #4
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	699a      	ldr	r2, [r3, #24]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096f2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00f      	beq.n	800971e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009704:	f043 0201 	orr.w	r2, r3, #1
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	699a      	ldr	r2, [r3, #24]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800971c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00f      	beq.n	8009748 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800972e:	f043 0208 	orr.w	r2, r3, #8
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	699a      	ldr	r2, [r3, #24]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009746:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009758:	bf00      	nop
 800975a:	3714      	adds	r7, #20
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr
 8009764:	fffffc90 	.word	0xfffffc90

08009768 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	603b      	str	r3, [r7, #0]
 8009774:	4613      	mov	r3, r2
 8009776:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009778:	e010      	b.n	800979c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800977a:	f7f8 fa6d 	bl	8001c58 <HAL_GetTick>
 800977e:	4602      	mov	r2, r0
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	1ad3      	subs	r3, r2, r3
 8009784:	683a      	ldr	r2, [r7, #0]
 8009786:	429a      	cmp	r2, r3
 8009788:	d803      	bhi.n	8009792 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009790:	d102      	bne.n	8009798 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d101      	bne.n	800979c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009798:	2303      	movs	r3, #3
 800979a:	e00f      	b.n	80097bc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	695a      	ldr	r2, [r3, #20]
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	4013      	ands	r3, r2
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	bf0c      	ite	eq
 80097ac:	2301      	moveq	r3, #1
 80097ae:	2300      	movne	r3, #0
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	461a      	mov	r2, r3
 80097b4:	79fb      	ldrb	r3, [r7, #7]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d0df      	beq.n	800977a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b085      	sub	sp, #20
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097d0:	095b      	lsrs	r3, r3, #5
 80097d2:	3301      	adds	r3, #1
 80097d4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	3301      	adds	r3, #1
 80097dc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	3307      	adds	r3, #7
 80097e2:	08db      	lsrs	r3, r3, #3
 80097e4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	fb02 f303 	mul.w	r3, r2, r3
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3714      	adds	r7, #20
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr

080097fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b082      	sub	sp, #8
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d101      	bne.n	800980c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	e049      	b.n	80098a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009812:	b2db      	uxtb	r3, r3
 8009814:	2b00      	cmp	r3, #0
 8009816:	d106      	bne.n	8009826 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f7f7 fcc3 	bl	80011ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2202      	movs	r2, #2
 800982a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	3304      	adds	r3, #4
 8009836:	4619      	mov	r1, r3
 8009838:	4610      	mov	r0, r2
 800983a:	f000 faed 	bl	8009e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2201      	movs	r2, #1
 8009842:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2201      	movs	r2, #1
 800984a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2201      	movs	r2, #1
 8009852:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2201      	movs	r2, #1
 800985a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2201      	movs	r2, #1
 8009862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2201      	movs	r2, #1
 800986a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2201      	movs	r2, #1
 8009872:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2201      	movs	r2, #1
 800987a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2201      	movs	r2, #1
 8009882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2201      	movs	r2, #1
 800988a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2201      	movs	r2, #1
 8009892:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2201      	movs	r2, #1
 800989a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3708      	adds	r7, #8
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d001      	beq.n	80098c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	e054      	b.n	800996a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2202      	movs	r2, #2
 80098c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	68da      	ldr	r2, [r3, #12]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f042 0201 	orr.w	r2, r2, #1
 80098d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a26      	ldr	r2, [pc, #152]	; (8009978 <HAL_TIM_Base_Start_IT+0xd0>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d022      	beq.n	8009928 <HAL_TIM_Base_Start_IT+0x80>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098ea:	d01d      	beq.n	8009928 <HAL_TIM_Base_Start_IT+0x80>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a22      	ldr	r2, [pc, #136]	; (800997c <HAL_TIM_Base_Start_IT+0xd4>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d018      	beq.n	8009928 <HAL_TIM_Base_Start_IT+0x80>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a21      	ldr	r2, [pc, #132]	; (8009980 <HAL_TIM_Base_Start_IT+0xd8>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d013      	beq.n	8009928 <HAL_TIM_Base_Start_IT+0x80>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a1f      	ldr	r2, [pc, #124]	; (8009984 <HAL_TIM_Base_Start_IT+0xdc>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d00e      	beq.n	8009928 <HAL_TIM_Base_Start_IT+0x80>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a1e      	ldr	r2, [pc, #120]	; (8009988 <HAL_TIM_Base_Start_IT+0xe0>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d009      	beq.n	8009928 <HAL_TIM_Base_Start_IT+0x80>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a1c      	ldr	r2, [pc, #112]	; (800998c <HAL_TIM_Base_Start_IT+0xe4>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d004      	beq.n	8009928 <HAL_TIM_Base_Start_IT+0x80>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a1b      	ldr	r2, [pc, #108]	; (8009990 <HAL_TIM_Base_Start_IT+0xe8>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d115      	bne.n	8009954 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	689a      	ldr	r2, [r3, #8]
 800992e:	4b19      	ldr	r3, [pc, #100]	; (8009994 <HAL_TIM_Base_Start_IT+0xec>)
 8009930:	4013      	ands	r3, r2
 8009932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2b06      	cmp	r3, #6
 8009938:	d015      	beq.n	8009966 <HAL_TIM_Base_Start_IT+0xbe>
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009940:	d011      	beq.n	8009966 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f042 0201 	orr.w	r2, r2, #1
 8009950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009952:	e008      	b.n	8009966 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f042 0201 	orr.w	r2, r2, #1
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	e000      	b.n	8009968 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009966:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3714      	adds	r7, #20
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	40010000 	.word	0x40010000
 800997c:	40000400 	.word	0x40000400
 8009980:	40000800 	.word	0x40000800
 8009984:	40000c00 	.word	0x40000c00
 8009988:	40010400 	.word	0x40010400
 800998c:	40001800 	.word	0x40001800
 8009990:	40014000 	.word	0x40014000
 8009994:	00010007 	.word	0x00010007

08009998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	f003 0302 	and.w	r3, r3, #2
 80099aa:	2b02      	cmp	r3, #2
 80099ac:	d122      	bne.n	80099f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	f003 0302 	and.w	r3, r3, #2
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d11b      	bne.n	80099f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f06f 0202 	mvn.w	r2, #2
 80099c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2201      	movs	r2, #1
 80099ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	699b      	ldr	r3, [r3, #24]
 80099d2:	f003 0303 	and.w	r3, r3, #3
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d003      	beq.n	80099e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 f9fe 	bl	8009ddc <HAL_TIM_IC_CaptureCallback>
 80099e0:	e005      	b.n	80099ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 f9f0 	bl	8009dc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 fa01 	bl	8009df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	691b      	ldr	r3, [r3, #16]
 80099fa:	f003 0304 	and.w	r3, r3, #4
 80099fe:	2b04      	cmp	r3, #4
 8009a00:	d122      	bne.n	8009a48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	f003 0304 	and.w	r3, r3, #4
 8009a0c:	2b04      	cmp	r3, #4
 8009a0e:	d11b      	bne.n	8009a48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f06f 0204 	mvn.w	r2, #4
 8009a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2202      	movs	r2, #2
 8009a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	699b      	ldr	r3, [r3, #24]
 8009a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d003      	beq.n	8009a36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 f9d4 	bl	8009ddc <HAL_TIM_IC_CaptureCallback>
 8009a34:	e005      	b.n	8009a42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 f9c6 	bl	8009dc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 f9d7 	bl	8009df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	f003 0308 	and.w	r3, r3, #8
 8009a52:	2b08      	cmp	r3, #8
 8009a54:	d122      	bne.n	8009a9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	f003 0308 	and.w	r3, r3, #8
 8009a60:	2b08      	cmp	r3, #8
 8009a62:	d11b      	bne.n	8009a9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f06f 0208 	mvn.w	r2, #8
 8009a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2204      	movs	r2, #4
 8009a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	69db      	ldr	r3, [r3, #28]
 8009a7a:	f003 0303 	and.w	r3, r3, #3
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d003      	beq.n	8009a8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f9aa 	bl	8009ddc <HAL_TIM_IC_CaptureCallback>
 8009a88:	e005      	b.n	8009a96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 f99c 	bl	8009dc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 f9ad 	bl	8009df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	f003 0310 	and.w	r3, r3, #16
 8009aa6:	2b10      	cmp	r3, #16
 8009aa8:	d122      	bne.n	8009af0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	f003 0310 	and.w	r3, r3, #16
 8009ab4:	2b10      	cmp	r3, #16
 8009ab6:	d11b      	bne.n	8009af0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f06f 0210 	mvn.w	r2, #16
 8009ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2208      	movs	r2, #8
 8009ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	69db      	ldr	r3, [r3, #28]
 8009ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d003      	beq.n	8009ade <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 f980 	bl	8009ddc <HAL_TIM_IC_CaptureCallback>
 8009adc:	e005      	b.n	8009aea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 f972 	bl	8009dc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 f983 	bl	8009df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	691b      	ldr	r3, [r3, #16]
 8009af6:	f003 0301 	and.w	r3, r3, #1
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d10e      	bne.n	8009b1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	f003 0301 	and.w	r3, r3, #1
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d107      	bne.n	8009b1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f06f 0201 	mvn.w	r2, #1
 8009b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f7f7 f9f0 	bl	8000efc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b26:	2b80      	cmp	r3, #128	; 0x80
 8009b28:	d10e      	bne.n	8009b48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b34:	2b80      	cmp	r3, #128	; 0x80
 8009b36:	d107      	bne.n	8009b48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 fb38 	bl	800a1b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b56:	d10e      	bne.n	8009b76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b62:	2b80      	cmp	r3, #128	; 0x80
 8009b64:	d107      	bne.n	8009b76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 fb2b 	bl	800a1cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b80:	2b40      	cmp	r3, #64	; 0x40
 8009b82:	d10e      	bne.n	8009ba2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b8e:	2b40      	cmp	r3, #64	; 0x40
 8009b90:	d107      	bne.n	8009ba2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 f931 	bl	8009e04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	f003 0320 	and.w	r3, r3, #32
 8009bac:	2b20      	cmp	r3, #32
 8009bae:	d10e      	bne.n	8009bce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	f003 0320 	and.w	r3, r3, #32
 8009bba:	2b20      	cmp	r3, #32
 8009bbc:	d107      	bne.n	8009bce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f06f 0220 	mvn.w	r2, #32
 8009bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 faeb 	bl	800a1a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009bce:	bf00      	nop
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
	...

08009bd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009be2:	2300      	movs	r3, #0
 8009be4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d101      	bne.n	8009bf4 <HAL_TIM_ConfigClockSource+0x1c>
 8009bf0:	2302      	movs	r3, #2
 8009bf2:	e0dc      	b.n	8009dae <HAL_TIM_ConfigClockSource+0x1d6>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2202      	movs	r2, #2
 8009c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c0c:	68ba      	ldr	r2, [r7, #8]
 8009c0e:	4b6a      	ldr	r3, [pc, #424]	; (8009db8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009c10:	4013      	ands	r3, r2
 8009c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68ba      	ldr	r2, [r7, #8]
 8009c22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a64      	ldr	r2, [pc, #400]	; (8009dbc <HAL_TIM_ConfigClockSource+0x1e4>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	f000 80a9 	beq.w	8009d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8009c30:	4a62      	ldr	r2, [pc, #392]	; (8009dbc <HAL_TIM_ConfigClockSource+0x1e4>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	f200 80ae 	bhi.w	8009d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c38:	4a61      	ldr	r2, [pc, #388]	; (8009dc0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	f000 80a1 	beq.w	8009d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8009c40:	4a5f      	ldr	r2, [pc, #380]	; (8009dc0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	f200 80a6 	bhi.w	8009d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c48:	4a5e      	ldr	r2, [pc, #376]	; (8009dc4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	f000 8099 	beq.w	8009d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8009c50:	4a5c      	ldr	r2, [pc, #368]	; (8009dc4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	f200 809e 	bhi.w	8009d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009c5c:	f000 8091 	beq.w	8009d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8009c60:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009c64:	f200 8096 	bhi.w	8009d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c6c:	f000 8089 	beq.w	8009d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8009c70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c74:	f200 808e 	bhi.w	8009d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c7c:	d03e      	beq.n	8009cfc <HAL_TIM_ConfigClockSource+0x124>
 8009c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c82:	f200 8087 	bhi.w	8009d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c8a:	f000 8086 	beq.w	8009d9a <HAL_TIM_ConfigClockSource+0x1c2>
 8009c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c92:	d87f      	bhi.n	8009d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c94:	2b70      	cmp	r3, #112	; 0x70
 8009c96:	d01a      	beq.n	8009cce <HAL_TIM_ConfigClockSource+0xf6>
 8009c98:	2b70      	cmp	r3, #112	; 0x70
 8009c9a:	d87b      	bhi.n	8009d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c9c:	2b60      	cmp	r3, #96	; 0x60
 8009c9e:	d050      	beq.n	8009d42 <HAL_TIM_ConfigClockSource+0x16a>
 8009ca0:	2b60      	cmp	r3, #96	; 0x60
 8009ca2:	d877      	bhi.n	8009d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ca4:	2b50      	cmp	r3, #80	; 0x50
 8009ca6:	d03c      	beq.n	8009d22 <HAL_TIM_ConfigClockSource+0x14a>
 8009ca8:	2b50      	cmp	r3, #80	; 0x50
 8009caa:	d873      	bhi.n	8009d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8009cac:	2b40      	cmp	r3, #64	; 0x40
 8009cae:	d058      	beq.n	8009d62 <HAL_TIM_ConfigClockSource+0x18a>
 8009cb0:	2b40      	cmp	r3, #64	; 0x40
 8009cb2:	d86f      	bhi.n	8009d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8009cb4:	2b30      	cmp	r3, #48	; 0x30
 8009cb6:	d064      	beq.n	8009d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8009cb8:	2b30      	cmp	r3, #48	; 0x30
 8009cba:	d86b      	bhi.n	8009d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8009cbc:	2b20      	cmp	r3, #32
 8009cbe:	d060      	beq.n	8009d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8009cc0:	2b20      	cmp	r3, #32
 8009cc2:	d867      	bhi.n	8009d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d05c      	beq.n	8009d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8009cc8:	2b10      	cmp	r3, #16
 8009cca:	d05a      	beq.n	8009d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8009ccc:	e062      	b.n	8009d94 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6818      	ldr	r0, [r3, #0]
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	6899      	ldr	r1, [r3, #8]
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	685a      	ldr	r2, [r3, #4]
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	f000 f9b3 	bl	800a048 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	689b      	ldr	r3, [r3, #8]
 8009ce8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009cf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	68ba      	ldr	r2, [r7, #8]
 8009cf8:	609a      	str	r2, [r3, #8]
      break;
 8009cfa:	e04f      	b.n	8009d9c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6818      	ldr	r0, [r3, #0]
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	6899      	ldr	r1, [r3, #8]
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	685a      	ldr	r2, [r3, #4]
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	f000 f99c 	bl	800a048 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	689a      	ldr	r2, [r3, #8]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d1e:	609a      	str	r2, [r3, #8]
      break;
 8009d20:	e03c      	b.n	8009d9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6818      	ldr	r0, [r3, #0]
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	6859      	ldr	r1, [r3, #4]
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	68db      	ldr	r3, [r3, #12]
 8009d2e:	461a      	mov	r2, r3
 8009d30:	f000 f90c 	bl	8009f4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2150      	movs	r1, #80	; 0x50
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f000 f966 	bl	800a00c <TIM_ITRx_SetConfig>
      break;
 8009d40:	e02c      	b.n	8009d9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6818      	ldr	r0, [r3, #0]
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	6859      	ldr	r1, [r3, #4]
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	461a      	mov	r2, r3
 8009d50:	f000 f92b 	bl	8009faa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2160      	movs	r1, #96	; 0x60
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f000 f956 	bl	800a00c <TIM_ITRx_SetConfig>
      break;
 8009d60:	e01c      	b.n	8009d9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6818      	ldr	r0, [r3, #0]
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	6859      	ldr	r1, [r3, #4]
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	f000 f8ec 	bl	8009f4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2140      	movs	r1, #64	; 0x40
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f000 f946 	bl	800a00c <TIM_ITRx_SetConfig>
      break;
 8009d80:	e00c      	b.n	8009d9c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	4610      	mov	r0, r2
 8009d8e:	f000 f93d 	bl	800a00c <TIM_ITRx_SetConfig>
      break;
 8009d92:	e003      	b.n	8009d9c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009d94:	2301      	movs	r3, #1
 8009d96:	73fb      	strb	r3, [r7, #15]
      break;
 8009d98:	e000      	b.n	8009d9c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009d9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	ffceff88 	.word	0xffceff88
 8009dbc:	00100040 	.word	0x00100040
 8009dc0:	00100030 	.word	0x00100030
 8009dc4:	00100020 	.word	0x00100020

08009dc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009dd0:	bf00      	nop
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009df8:	bf00      	nop
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a40      	ldr	r2, [pc, #256]	; (8009f2c <TIM_Base_SetConfig+0x114>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d013      	beq.n	8009e58 <TIM_Base_SetConfig+0x40>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e36:	d00f      	beq.n	8009e58 <TIM_Base_SetConfig+0x40>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a3d      	ldr	r2, [pc, #244]	; (8009f30 <TIM_Base_SetConfig+0x118>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d00b      	beq.n	8009e58 <TIM_Base_SetConfig+0x40>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4a3c      	ldr	r2, [pc, #240]	; (8009f34 <TIM_Base_SetConfig+0x11c>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d007      	beq.n	8009e58 <TIM_Base_SetConfig+0x40>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4a3b      	ldr	r2, [pc, #236]	; (8009f38 <TIM_Base_SetConfig+0x120>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d003      	beq.n	8009e58 <TIM_Base_SetConfig+0x40>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	4a3a      	ldr	r2, [pc, #232]	; (8009f3c <TIM_Base_SetConfig+0x124>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d108      	bne.n	8009e6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	4313      	orrs	r3, r2
 8009e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4a2f      	ldr	r2, [pc, #188]	; (8009f2c <TIM_Base_SetConfig+0x114>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d01f      	beq.n	8009eb2 <TIM_Base_SetConfig+0x9a>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e78:	d01b      	beq.n	8009eb2 <TIM_Base_SetConfig+0x9a>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4a2c      	ldr	r2, [pc, #176]	; (8009f30 <TIM_Base_SetConfig+0x118>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d017      	beq.n	8009eb2 <TIM_Base_SetConfig+0x9a>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4a2b      	ldr	r2, [pc, #172]	; (8009f34 <TIM_Base_SetConfig+0x11c>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d013      	beq.n	8009eb2 <TIM_Base_SetConfig+0x9a>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4a2a      	ldr	r2, [pc, #168]	; (8009f38 <TIM_Base_SetConfig+0x120>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d00f      	beq.n	8009eb2 <TIM_Base_SetConfig+0x9a>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	4a29      	ldr	r2, [pc, #164]	; (8009f3c <TIM_Base_SetConfig+0x124>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d00b      	beq.n	8009eb2 <TIM_Base_SetConfig+0x9a>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	4a28      	ldr	r2, [pc, #160]	; (8009f40 <TIM_Base_SetConfig+0x128>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d007      	beq.n	8009eb2 <TIM_Base_SetConfig+0x9a>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	4a27      	ldr	r2, [pc, #156]	; (8009f44 <TIM_Base_SetConfig+0x12c>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d003      	beq.n	8009eb2 <TIM_Base_SetConfig+0x9a>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4a26      	ldr	r2, [pc, #152]	; (8009f48 <TIM_Base_SetConfig+0x130>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d108      	bne.n	8009ec4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009eb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	695b      	ldr	r3, [r3, #20]
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	68fa      	ldr	r2, [r7, #12]
 8009ed6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	689a      	ldr	r2, [r3, #8]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4a10      	ldr	r2, [pc, #64]	; (8009f2c <TIM_Base_SetConfig+0x114>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d00f      	beq.n	8009f10 <TIM_Base_SetConfig+0xf8>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	4a12      	ldr	r2, [pc, #72]	; (8009f3c <TIM_Base_SetConfig+0x124>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d00b      	beq.n	8009f10 <TIM_Base_SetConfig+0xf8>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	4a11      	ldr	r2, [pc, #68]	; (8009f40 <TIM_Base_SetConfig+0x128>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d007      	beq.n	8009f10 <TIM_Base_SetConfig+0xf8>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4a10      	ldr	r2, [pc, #64]	; (8009f44 <TIM_Base_SetConfig+0x12c>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d003      	beq.n	8009f10 <TIM_Base_SetConfig+0xf8>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4a0f      	ldr	r2, [pc, #60]	; (8009f48 <TIM_Base_SetConfig+0x130>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d103      	bne.n	8009f18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	691a      	ldr	r2, [r3, #16]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	615a      	str	r2, [r3, #20]
}
 8009f1e:	bf00      	nop
 8009f20:	3714      	adds	r7, #20
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	40010000 	.word	0x40010000
 8009f30:	40000400 	.word	0x40000400
 8009f34:	40000800 	.word	0x40000800
 8009f38:	40000c00 	.word	0x40000c00
 8009f3c:	40010400 	.word	0x40010400
 8009f40:	40014000 	.word	0x40014000
 8009f44:	40014400 	.word	0x40014400
 8009f48:	40014800 	.word	0x40014800

08009f4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b087      	sub	sp, #28
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6a1b      	ldr	r3, [r3, #32]
 8009f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	6a1b      	ldr	r3, [r3, #32]
 8009f62:	f023 0201 	bic.w	r2, r3, #1
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	699b      	ldr	r3, [r3, #24]
 8009f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	011b      	lsls	r3, r3, #4
 8009f7c:	693a      	ldr	r2, [r7, #16]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	f023 030a 	bic.w	r3, r3, #10
 8009f88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f8a:	697a      	ldr	r2, [r7, #20]
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	693a      	ldr	r2, [r7, #16]
 8009f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	697a      	ldr	r2, [r7, #20]
 8009f9c:	621a      	str	r2, [r3, #32]
}
 8009f9e:	bf00      	nop
 8009fa0:	371c      	adds	r7, #28
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr

08009faa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009faa:	b480      	push	{r7}
 8009fac:	b087      	sub	sp, #28
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	60f8      	str	r0, [r7, #12]
 8009fb2:	60b9      	str	r1, [r7, #8]
 8009fb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6a1b      	ldr	r3, [r3, #32]
 8009fba:	f023 0210 	bic.w	r2, r3, #16
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	699b      	ldr	r3, [r3, #24]
 8009fc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6a1b      	ldr	r3, [r3, #32]
 8009fcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009fd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	031b      	lsls	r3, r3, #12
 8009fda:	697a      	ldr	r2, [r7, #20]
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009fe6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	011b      	lsls	r3, r3, #4
 8009fec:	693a      	ldr	r2, [r7, #16]
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	697a      	ldr	r2, [r7, #20]
 8009ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	621a      	str	r2, [r3, #32]
}
 8009ffe:	bf00      	nop
 800a000:	371c      	adds	r7, #28
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr
	...

0800a00c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a01c:	68fa      	ldr	r2, [r7, #12]
 800a01e:	4b09      	ldr	r3, [pc, #36]	; (800a044 <TIM_ITRx_SetConfig+0x38>)
 800a020:	4013      	ands	r3, r2
 800a022:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a024:	683a      	ldr	r2, [r7, #0]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	4313      	orrs	r3, r2
 800a02a:	f043 0307 	orr.w	r3, r3, #7
 800a02e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	609a      	str	r2, [r3, #8]
}
 800a036:	bf00      	nop
 800a038:	3714      	adds	r7, #20
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	ffcfff8f 	.word	0xffcfff8f

0800a048 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a048:	b480      	push	{r7}
 800a04a:	b087      	sub	sp, #28
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	607a      	str	r2, [r7, #4]
 800a054:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a062:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	021a      	lsls	r2, r3, #8
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	431a      	orrs	r2, r3
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	4313      	orrs	r3, r2
 800a070:	697a      	ldr	r2, [r7, #20]
 800a072:	4313      	orrs	r3, r2
 800a074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	697a      	ldr	r2, [r7, #20]
 800a07a:	609a      	str	r2, [r3, #8]
}
 800a07c:	bf00      	nop
 800a07e:	371c      	adds	r7, #28
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a088:	b480      	push	{r7}
 800a08a:	b085      	sub	sp, #20
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d101      	bne.n	800a0a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a09c:	2302      	movs	r3, #2
 800a09e:	e06d      	b.n	800a17c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2202      	movs	r2, #2
 800a0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a30      	ldr	r2, [pc, #192]	; (800a188 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d004      	beq.n	800a0d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a2f      	ldr	r2, [pc, #188]	; (800a18c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d108      	bne.n	800a0e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a0da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	68fa      	ldr	r2, [r7, #12]
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68fa      	ldr	r2, [r7, #12]
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a20      	ldr	r2, [pc, #128]	; (800a188 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d022      	beq.n	800a150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a112:	d01d      	beq.n	800a150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a1d      	ldr	r2, [pc, #116]	; (800a190 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d018      	beq.n	800a150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a1c      	ldr	r2, [pc, #112]	; (800a194 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d013      	beq.n	800a150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a1a      	ldr	r2, [pc, #104]	; (800a198 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d00e      	beq.n	800a150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a15      	ldr	r2, [pc, #84]	; (800a18c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d009      	beq.n	800a150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a16      	ldr	r2, [pc, #88]	; (800a19c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d004      	beq.n	800a150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a15      	ldr	r2, [pc, #84]	; (800a1a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d10c      	bne.n	800a16a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a156:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	68ba      	ldr	r2, [r7, #8]
 800a15e:	4313      	orrs	r3, r2
 800a160:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68ba      	ldr	r2, [r7, #8]
 800a168:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2201      	movs	r2, #1
 800a16e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3714      	adds	r7, #20
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr
 800a188:	40010000 	.word	0x40010000
 800a18c:	40010400 	.word	0x40010400
 800a190:	40000400 	.word	0x40000400
 800a194:	40000800 	.word	0x40000800
 800a198:	40000c00 	.word	0x40000c00
 800a19c:	40001800 	.word	0x40001800
 800a1a0:	40014000 	.word	0x40014000

0800a1a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a1ac:	bf00      	nop
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a1d4:	bf00      	nop
 800a1d6:	370c      	adds	r7, #12
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d101      	bne.n	800a1f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e050      	b.n	800a294 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d114      	bne.n	800a226 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f001 f9fd 	bl	800b604 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800a210:	2b00      	cmp	r3, #0
 800a212:	d103      	bne.n	800a21c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	4a21      	ldr	r2, [pc, #132]	; (800a29c <HAL_UART_Init+0xbc>)
 800a218:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2224      	movs	r2, #36	; 0x24
 800a22a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f022 0201 	bic.w	r2, r2, #1
 800a23c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f001 fa32 	bl	800b6a8 <UART_SetConfig>
 800a244:	4603      	mov	r3, r0
 800a246:	2b01      	cmp	r3, #1
 800a248:	d101      	bne.n	800a24e <HAL_UART_Init+0x6e>
  {
    return HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	e022      	b.n	800a294 <HAL_UART_Init+0xb4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a252:	2b00      	cmp	r3, #0
 800a254:	d002      	beq.n	800a25c <HAL_UART_Init+0x7c>
  {
    UART_AdvFeatureConfig(huart);
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f001 ff8e 	bl	800c178 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	685a      	ldr	r2, [r3, #4]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a26a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	689a      	ldr	r2, [r3, #8]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a27a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f042 0201 	orr.w	r2, r2, #1
 800a28a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f002 f815 	bl	800c2bc <UART_CheckIdleState>
 800a292:	4603      	mov	r3, r0
}
 800a294:	4618      	mov	r0, r3
 800a296:	3708      	adds	r7, #8
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	080011ed 	.word	0x080011ed

0800a2a0 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b087      	sub	sp, #28
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	607a      	str	r2, [r7, #4]
 800a2ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d109      	bne.n	800a2cc <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    return HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e09c      	b.n	800a406 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2d2:	2b20      	cmp	r3, #32
 800a2d4:	d16c      	bne.n	800a3b0 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800a2d6:	7afb      	ldrb	r3, [r7, #11]
 800a2d8:	2b0c      	cmp	r3, #12
 800a2da:	d85e      	bhi.n	800a39a <HAL_UART_RegisterCallback+0xfa>
 800a2dc:	a201      	add	r2, pc, #4	; (adr r2, 800a2e4 <HAL_UART_RegisterCallback+0x44>)
 800a2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e2:	bf00      	nop
 800a2e4:	0800a319 	.word	0x0800a319
 800a2e8:	0800a323 	.word	0x0800a323
 800a2ec:	0800a32d 	.word	0x0800a32d
 800a2f0:	0800a337 	.word	0x0800a337
 800a2f4:	0800a341 	.word	0x0800a341
 800a2f8:	0800a34b 	.word	0x0800a34b
 800a2fc:	0800a355 	.word	0x0800a355
 800a300:	0800a35f 	.word	0x0800a35f
 800a304:	0800a369 	.word	0x0800a369
 800a308:	0800a373 	.word	0x0800a373
 800a30c:	0800a37d 	.word	0x0800a37d
 800a310:	0800a387 	.word	0x0800a387
 800a314:	0800a391 	.word	0x0800a391
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800a320:	e070      	b.n	800a404 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 800a32a:	e06b      	b.n	800a404 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800a334:	e066      	b.n	800a404 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800a33e:	e061      	b.n	800a404 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800a348:	e05c      	b.n	800a404 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800a352:	e057      	b.n	800a404 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800a35c:	e052      	b.n	800a404 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800a366:	e04d      	b.n	800a404 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 800a370:	e048      	b.n	800a404 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 800a37a:	e043      	b.n	800a404 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 800a384:	e03e      	b.n	800a404 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 800a38e:	e039      	b.n	800a404 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	687a      	ldr	r2, [r7, #4]
 800a394:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 800a398:	e034      	b.n	800a404 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        status =  HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	75fb      	strb	r3, [r7, #23]
        break;
 800a3ae:	e029      	b.n	800a404 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d11a      	bne.n	800a3f0 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800a3ba:	7afb      	ldrb	r3, [r7, #11]
 800a3bc:	2b0b      	cmp	r3, #11
 800a3be:	d002      	beq.n	800a3c6 <HAL_UART_RegisterCallback+0x126>
 800a3c0:	2b0c      	cmp	r3, #12
 800a3c2:	d005      	beq.n	800a3d0 <HAL_UART_RegisterCallback+0x130>
 800a3c4:	e009      	b.n	800a3da <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 800a3ce:	e019      	b.n	800a404 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 800a3d8:	e014      	b.n	800a404 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        status =  HAL_ERROR;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	75fb      	strb	r3, [r7, #23]
        break;
 800a3ee:	e009      	b.n	800a404 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    status =  HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a404:	7dfb      	ldrb	r3, [r7, #23]
}
 800a406:	4618      	mov	r0, r3
 800a408:	371c      	adds	r7, #28
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr
 800a412:	bf00      	nop

0800a414 <HAL_UART_RegisterRxEventCallback>:
  * @param  huart     Uart handle
  * @param  pCallback Pointer to the Rx Event Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterRxEventCallback(UART_HandleTypeDef *huart, pUART_RxEventCallbackTypeDef pCallback)
{
 800a414:	b480      	push	{r7}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a41e:	2300      	movs	r3, #0
 800a420:	73fb      	strb	r3, [r7, #15]

  if (pCallback == NULL)
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d109      	bne.n	800a43c <HAL_UART_RegisterRxEventCallback+0x28>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a42e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    return HAL_ERROR;
 800a438:	2301      	movs	r3, #1
 800a43a:	e023      	b.n	800a484 <HAL_UART_RegisterRxEventCallback+0x70>
  }

  /* Process locked */
  __HAL_LOCK(huart);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a442:	2b01      	cmp	r3, #1
 800a444:	d101      	bne.n	800a44a <HAL_UART_RegisterRxEventCallback+0x36>
 800a446:	2302      	movs	r3, #2
 800a448:	e01c      	b.n	800a484 <HAL_UART_RegisterRxEventCallback+0x70>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2201      	movs	r2, #1
 800a44e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  if (huart->gState == HAL_UART_STATE_READY)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a458:	2b20      	cmp	r3, #32
 800a45a:	d104      	bne.n	800a466 <HAL_UART_RegisterRxEventCallback+0x52>
  {
    huart->RxEventCallback = pCallback;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	683a      	ldr	r2, [r7, #0]
 800a460:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800a464:	e009      	b.n	800a47a <HAL_UART_RegisterRxEventCallback+0x66>
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a46c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    status =  HAL_ERROR;
 800a476:	2301      	movs	r3, #1
 800a478:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2200      	movs	r2, #0
 800a47e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 800a482:	7bfb      	ldrb	r3, [r7, #15]
}
 800a484:	4618      	mov	r0, r3
 800a486:	3714      	adds	r7, #20
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a490:	b480      	push	{r7}
 800a492:	b091      	sub	sp, #68	; 0x44
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	4613      	mov	r3, r2
 800a49c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4a4:	2b20      	cmp	r3, #32
 800a4a6:	d178      	bne.n	800a59a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d002      	beq.n	800a4b4 <HAL_UART_Transmit_IT+0x24>
 800a4ae:	88fb      	ldrh	r3, [r7, #6]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d101      	bne.n	800a4b8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e071      	b.n	800a59c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	68ba      	ldr	r2, [r7, #8]
 800a4bc:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	88fa      	ldrh	r2, [r7, #6]
 800a4c2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	88fa      	ldrh	r2, [r7, #6]
 800a4ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2221      	movs	r2, #33	; 0x21
 800a4e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4ec:	d12a      	bne.n	800a544 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4f6:	d107      	bne.n	800a508 <HAL_UART_Transmit_IT+0x78>
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	691b      	ldr	r3, [r3, #16]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d103      	bne.n	800a508 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	4a29      	ldr	r2, [pc, #164]	; (800a5a8 <HAL_UART_Transmit_IT+0x118>)
 800a504:	679a      	str	r2, [r3, #120]	; 0x78
 800a506:	e002      	b.n	800a50e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	4a28      	ldr	r2, [pc, #160]	; (800a5ac <HAL_UART_Transmit_IT+0x11c>)
 800a50c:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	3308      	adds	r3, #8
 800a514:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a518:	e853 3f00 	ldrex	r3, [r3]
 800a51c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a520:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a524:	63bb      	str	r3, [r7, #56]	; 0x38
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	3308      	adds	r3, #8
 800a52c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a52e:	637a      	str	r2, [r7, #52]	; 0x34
 800a530:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a532:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a534:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a536:	e841 2300 	strex	r3, r2, [r1]
 800a53a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d1e5      	bne.n	800a50e <HAL_UART_Transmit_IT+0x7e>
 800a542:	e028      	b.n	800a596 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a54c:	d107      	bne.n	800a55e <HAL_UART_Transmit_IT+0xce>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	691b      	ldr	r3, [r3, #16]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d103      	bne.n	800a55e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	4a15      	ldr	r2, [pc, #84]	; (800a5b0 <HAL_UART_Transmit_IT+0x120>)
 800a55a:	679a      	str	r2, [r3, #120]	; 0x78
 800a55c:	e002      	b.n	800a564 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	4a14      	ldr	r2, [pc, #80]	; (800a5b4 <HAL_UART_Transmit_IT+0x124>)
 800a562:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	e853 3f00 	ldrex	r3, [r3]
 800a570:	613b      	str	r3, [r7, #16]
   return(result);
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a578:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	461a      	mov	r2, r3
 800a580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a582:	623b      	str	r3, [r7, #32]
 800a584:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a586:	69f9      	ldr	r1, [r7, #28]
 800a588:	6a3a      	ldr	r2, [r7, #32]
 800a58a:	e841 2300 	strex	r3, r2, [r1]
 800a58e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1e6      	bne.n	800a564 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800a596:	2300      	movs	r3, #0
 800a598:	e000      	b.n	800a59c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800a59a:	2302      	movs	r3, #2
  }
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3744      	adds	r7, #68	; 0x44
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr
 800a5a8:	0800cf4d 	.word	0x0800cf4d
 800a5ac:	0800ce6d 	.word	0x0800ce6d
 800a5b0:	0800cdab 	.word	0x0800cdab
 800a5b4:	0800ccf3 	.word	0x0800ccf3

0800a5b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b08a      	sub	sp, #40	; 0x28
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5cc:	2b20      	cmp	r3, #32
 800a5ce:	d137      	bne.n	800a640 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d002      	beq.n	800a5dc <HAL_UART_Receive_IT+0x24>
 800a5d6:	88fb      	ldrh	r3, [r7, #6]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d101      	bne.n	800a5e0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	e030      	b.n	800a642 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a18      	ldr	r2, [pc, #96]	; (800a64c <HAL_UART_Receive_IT+0x94>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d01f      	beq.n	800a630 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d018      	beq.n	800a630 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	e853 3f00 	ldrex	r3, [r3]
 800a60a:	613b      	str	r3, [r7, #16]
   return(result);
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a612:	627b      	str	r3, [r7, #36]	; 0x24
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	461a      	mov	r2, r3
 800a61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61c:	623b      	str	r3, [r7, #32]
 800a61e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a620:	69f9      	ldr	r1, [r7, #28]
 800a622:	6a3a      	ldr	r2, [r7, #32]
 800a624:	e841 2300 	strex	r3, r2, [r1]
 800a628:	61bb      	str	r3, [r7, #24]
   return(result);
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d1e6      	bne.n	800a5fe <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a630:	88fb      	ldrh	r3, [r7, #6]
 800a632:	461a      	mov	r2, r3
 800a634:	68b9      	ldr	r1, [r7, #8]
 800a636:	68f8      	ldr	r0, [r7, #12]
 800a638:	f001 ff52 	bl	800c4e0 <UART_Start_Receive_IT>
 800a63c:	4603      	mov	r3, r0
 800a63e:	e000      	b.n	800a642 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a640:	2302      	movs	r3, #2
  }
}
 800a642:	4618      	mov	r0, r3
 800a644:	3728      	adds	r7, #40	; 0x28
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	58000c00 	.word	0x58000c00

0800a650 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b08a      	sub	sp, #40	; 0x28
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	4613      	mov	r3, r2
 800a65c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a664:	2b20      	cmp	r3, #32
 800a666:	d167      	bne.n	800a738 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d002      	beq.n	800a674 <HAL_UART_Transmit_DMA+0x24>
 800a66e:	88fb      	ldrh	r3, [r7, #6]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d101      	bne.n	800a678 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a674:	2301      	movs	r3, #1
 800a676:	e060      	b.n	800a73a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	68ba      	ldr	r2, [r7, #8]
 800a67c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	88fa      	ldrh	r2, [r7, #6]
 800a682:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	88fa      	ldrh	r2, [r7, #6]
 800a68a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2200      	movs	r2, #0
 800a692:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2221      	movs	r2, #33	; 0x21
 800a69a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d028      	beq.n	800a6f8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6aa:	4a26      	ldr	r2, [pc, #152]	; (800a744 <HAL_UART_Transmit_DMA+0xf4>)
 800a6ac:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6b2:	4a25      	ldr	r2, [pc, #148]	; (800a748 <HAL_UART_Transmit_DMA+0xf8>)
 800a6b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6ba:	4a24      	ldr	r2, [pc, #144]	; (800a74c <HAL_UART_Transmit_DMA+0xfc>)
 800a6bc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	3328      	adds	r3, #40	; 0x28
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	88fb      	ldrh	r3, [r7, #6]
 800a6da:	f7f7 ff35 	bl	8002548 <HAL_DMA_Start_IT>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d009      	beq.n	800a6f8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2210      	movs	r2, #16
 800a6e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2220      	movs	r2, #32
 800a6f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	e020      	b.n	800a73a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	2240      	movs	r2, #64	; 0x40
 800a6fe:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	3308      	adds	r3, #8
 800a706:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	e853 3f00 	ldrex	r3, [r3]
 800a70e:	613b      	str	r3, [r7, #16]
   return(result);
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a716:	627b      	str	r3, [r7, #36]	; 0x24
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	3308      	adds	r3, #8
 800a71e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a720:	623a      	str	r2, [r7, #32]
 800a722:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a724:	69f9      	ldr	r1, [r7, #28]
 800a726:	6a3a      	ldr	r2, [r7, #32]
 800a728:	e841 2300 	strex	r3, r2, [r1]
 800a72c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d1e5      	bne.n	800a700 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a734:	2300      	movs	r3, #0
 800a736:	e000      	b.n	800a73a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a738:	2302      	movs	r3, #2
  }
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3728      	adds	r7, #40	; 0x28
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	0800c9c1 	.word	0x0800c9c1
 800a748:	0800ca5b 	.word	0x0800ca5b
 800a74c:	0800cbf1 	.word	0x0800cbf1

0800a750 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b090      	sub	sp, #64	; 0x40
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a75e:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a766:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a772:	2b80      	cmp	r3, #128	; 0x80
 800a774:	d139      	bne.n	800a7ea <HAL_UART_DMAStop+0x9a>
 800a776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a778:	2b21      	cmp	r3, #33	; 0x21
 800a77a:	d136      	bne.n	800a7ea <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	3308      	adds	r3, #8
 800a782:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a784:	6a3b      	ldr	r3, [r7, #32]
 800a786:	e853 3f00 	ldrex	r3, [r3]
 800a78a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a78c:	69fb      	ldr	r3, [r7, #28]
 800a78e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a792:	637b      	str	r3, [r7, #52]	; 0x34
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	3308      	adds	r3, #8
 800a79a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a79c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a79e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7a4:	e841 2300 	strex	r3, r2, [r1]
 800a7a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d1e5      	bne.n	800a77c <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d015      	beq.n	800a7e4 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f7f8 f92d 	bl	8002a1c <HAL_DMA_Abort>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d00d      	beq.n	800a7e4 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7f9 fe0d 	bl	80043ec <HAL_DMA_GetError>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	2b20      	cmp	r3, #32
 800a7d6:	d105      	bne.n	800a7e4 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2210      	movs	r2, #16
 800a7dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 800a7e0:	2303      	movs	r3, #3
 800a7e2:	e047      	b.n	800a874 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f002 f843 	bl	800c870 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7f4:	2b40      	cmp	r3, #64	; 0x40
 800a7f6:	d13c      	bne.n	800a872 <HAL_UART_DMAStop+0x122>
 800a7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fa:	2b22      	cmp	r3, #34	; 0x22
 800a7fc:	d139      	bne.n	800a872 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	3308      	adds	r3, #8
 800a804:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	e853 3f00 	ldrex	r3, [r3]
 800a80c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a814:	633b      	str	r3, [r7, #48]	; 0x30
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	3308      	adds	r3, #8
 800a81c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a81e:	61ba      	str	r2, [r7, #24]
 800a820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a822:	6979      	ldr	r1, [r7, #20]
 800a824:	69ba      	ldr	r2, [r7, #24]
 800a826:	e841 2300 	strex	r3, r2, [r1]
 800a82a:	613b      	str	r3, [r7, #16]
   return(result);
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d1e5      	bne.n	800a7fe <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d017      	beq.n	800a86c <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a842:	4618      	mov	r0, r3
 800a844:	f7f8 f8ea 	bl	8002a1c <HAL_DMA_Abort>
 800a848:	4603      	mov	r3, r0
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d00e      	beq.n	800a86c <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a854:	4618      	mov	r0, r3
 800a856:	f7f9 fdc9 	bl	80043ec <HAL_DMA_GetError>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b20      	cmp	r3, #32
 800a85e:	d105      	bne.n	800a86c <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2210      	movs	r2, #16
 800a864:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 800a868:	2303      	movs	r3, #3
 800a86a:	e003      	b.n	800a874 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f002 f841 	bl	800c8f4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	3740      	adds	r7, #64	; 0x40
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b0a0      	sub	sp, #128	; 0x80
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a88c:	e853 3f00 	ldrex	r3, [r3]
 800a890:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800a892:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a894:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800a898:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	461a      	mov	r2, r3
 800a8a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a8a2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a8a4:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a8a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a8aa:	e841 2300 	strex	r3, r2, [r1]
 800a8ae:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a8b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d1e6      	bne.n	800a884 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	3308      	adds	r3, #8
 800a8bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8c0:	e853 3f00 	ldrex	r3, [r3]
 800a8c4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a8c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8c8:	4b72      	ldr	r3, [pc, #456]	; (800aa94 <HAL_UART_Abort+0x218>)
 800a8ca:	4013      	ands	r3, r2
 800a8cc:	67bb      	str	r3, [r7, #120]	; 0x78
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	3308      	adds	r3, #8
 800a8d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a8d6:	657a      	str	r2, [r7, #84]	; 0x54
 800a8d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a8dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a8de:	e841 2300 	strex	r3, r2, [r1]
 800a8e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a8e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d1e5      	bne.n	800a8b6 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d118      	bne.n	800a924 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8fa:	e853 3f00 	ldrex	r3, [r3]
 800a8fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a902:	f023 0310 	bic.w	r3, r3, #16
 800a906:	677b      	str	r3, [r7, #116]	; 0x74
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	461a      	mov	r2, r3
 800a90e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a910:	643b      	str	r3, [r7, #64]	; 0x40
 800a912:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a914:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a916:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a918:	e841 2300 	strex	r3, r2, [r1]
 800a91c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a920:	2b00      	cmp	r3, #0
 800a922:	d1e6      	bne.n	800a8f2 <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a92e:	2b80      	cmp	r3, #128	; 0x80
 800a930:	d137      	bne.n	800a9a2 <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	3308      	adds	r3, #8
 800a938:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a93a:	6a3b      	ldr	r3, [r7, #32]
 800a93c:	e853 3f00 	ldrex	r3, [r3]
 800a940:	61fb      	str	r3, [r7, #28]
   return(result);
 800a942:	69fb      	ldr	r3, [r7, #28]
 800a944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a948:	673b      	str	r3, [r7, #112]	; 0x70
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	3308      	adds	r3, #8
 800a950:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a952:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a954:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a956:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a95a:	e841 2300 	strex	r3, r2, [r1]
 800a95e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a962:	2b00      	cmp	r3, #0
 800a964:	d1e5      	bne.n	800a932 <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d019      	beq.n	800a9a2 <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a972:	2200      	movs	r2, #0
 800a974:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7f8 f84e 	bl	8002a1c <HAL_DMA_Abort>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00d      	beq.n	800a9a2 <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7f9 fd2e 	bl	80043ec <HAL_DMA_GetError>
 800a990:	4603      	mov	r3, r0
 800a992:	2b20      	cmp	r3, #32
 800a994:	d105      	bne.n	800a9a2 <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2210      	movs	r2, #16
 800a99a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 800a99e:	2303      	movs	r3, #3
 800a9a0:	e073      	b.n	800aa8a <HAL_UART_Abort+0x20e>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9ac:	2b40      	cmp	r3, #64	; 0x40
 800a9ae:	d13b      	bne.n	800aa28 <HAL_UART_Abort+0x1ac>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	3308      	adds	r3, #8
 800a9b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	e853 3f00 	ldrex	r3, [r3]
 800a9be:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	3308      	adds	r3, #8
 800a9ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a9d0:	61ba      	str	r2, [r7, #24]
 800a9d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d4:	6979      	ldr	r1, [r7, #20]
 800a9d6:	69ba      	ldr	r2, [r7, #24]
 800a9d8:	e841 2300 	strex	r3, r2, [r1]
 800a9dc:	613b      	str	r3, [r7, #16]
   return(result);
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d1e5      	bne.n	800a9b0 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d01c      	beq.n	800aa28 <HAL_UART_Abort+0x1ac>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7f8 f80c 	bl	8002a1c <HAL_DMA_Abort>
 800aa04:	4603      	mov	r3, r0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d00e      	beq.n	800aa28 <HAL_UART_Abort+0x1ac>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7f9 fceb 	bl	80043ec <HAL_DMA_GetError>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b20      	cmp	r3, #32
 800aa1a:	d105      	bne.n	800aa28 <HAL_UART_Abort+0x1ac>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2210      	movs	r2, #16
 800aa20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 800aa24:	2303      	movs	r3, #3
 800aa26:	e030      	b.n	800aa8a <HAL_UART_Abort+0x20e>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	220f      	movs	r2, #15
 800aa3e:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa48:	d107      	bne.n	800aa5a <HAL_UART_Abort+0x1de>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	699a      	ldr	r2, [r3, #24]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f042 0210 	orr.w	r2, r2, #16
 800aa58:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	699a      	ldr	r2, [r3, #24]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f042 0208 	orr.w	r2, r2, #8
 800aa68:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2220      	movs	r2, #32
 800aa6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2220      	movs	r2, #32
 800aa76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	66da      	str	r2, [r3, #108]	; 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800aa88:	2300      	movs	r3, #0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3780      	adds	r7, #128	; 0x80
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	ef7ffffe 	.word	0xef7ffffe

0800aa98 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b09a      	sub	sp, #104	; 0x68
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aaa8:	e853 3f00 	ldrex	r3, [r3]
 800aaac:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800aaae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aab0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aab4:	667b      	str	r3, [r7, #100]	; 0x64
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	461a      	mov	r2, r3
 800aabc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aabe:	657b      	str	r3, [r7, #84]	; 0x54
 800aac0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aac4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aac6:	e841 2300 	strex	r3, r2, [r1]
 800aaca:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800aacc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d1e6      	bne.n	800aaa0 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	3308      	adds	r3, #8
 800aad8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aadc:	e853 3f00 	ldrex	r3, [r3]
 800aae0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aae4:	4b53      	ldr	r3, [pc, #332]	; (800ac34 <HAL_UART_AbortReceive_IT+0x19c>)
 800aae6:	4013      	ands	r3, r2
 800aae8:	663b      	str	r3, [r7, #96]	; 0x60
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	3308      	adds	r3, #8
 800aaf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aaf2:	643a      	str	r2, [r7, #64]	; 0x40
 800aaf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aaf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aafa:	e841 2300 	strex	r3, r2, [r1]
 800aafe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d1e5      	bne.n	800aad2 <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d118      	bne.n	800ab40 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab14:	6a3b      	ldr	r3, [r7, #32]
 800ab16:	e853 3f00 	ldrex	r3, [r3]
 800ab1a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	f023 0310 	bic.w	r3, r3, #16
 800ab22:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	461a      	mov	r2, r3
 800ab2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab2e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab34:	e841 2300 	strex	r3, r2, [r1]
 800ab38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d1e6      	bne.n	800ab0e <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab4a:	2b40      	cmp	r3, #64	; 0x40
 800ab4c:	d156      	bne.n	800abfc <HAL_UART_AbortReceive_IT+0x164>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	3308      	adds	r3, #8
 800ab54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	e853 3f00 	ldrex	r3, [r3]
 800ab5c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab64:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	3308      	adds	r3, #8
 800ab6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab6e:	61ba      	str	r2, [r7, #24]
 800ab70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab72:	6979      	ldr	r1, [r7, #20]
 800ab74:	69ba      	ldr	r2, [r7, #24]
 800ab76:	e841 2300 	strex	r3, r2, [r1]
 800ab7a:	613b      	str	r3, [r7, #16]
   return(result);
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d1e5      	bne.n	800ab4e <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d017      	beq.n	800abbc <HAL_UART_AbortReceive_IT+0x124>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab92:	4a29      	ldr	r2, [pc, #164]	; (800ac38 <HAL_UART_AbortReceive_IT+0x1a0>)
 800ab94:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7f8 fa5b 	bl	8003058 <HAL_DMA_Abort_IT>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d040      	beq.n	800ac2a <HAL_UART_AbortReceive_IT+0x192>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800abb6:	4610      	mov	r0, r2
 800abb8:	4798      	blx	r3
 800abba:	e036      	b.n	800ac2a <HAL_UART_AbortReceive_IT+0x192>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	220f      	movs	r2, #15
 800abd0:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	699a      	ldr	r2, [r3, #24]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f042 0208 	orr.w	r2, r2, #8
 800abe0:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2220      	movs	r2, #32
 800abe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2200      	movs	r2, #0
 800abee:	66da      	str	r2, [r3, #108]	; 0x6c

      /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	4798      	blx	r3
 800abfa:	e016      	b.n	800ac2a <HAL_UART_AbortReceive_IT+0x192>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2200      	movs	r2, #0
 800ac00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	220f      	movs	r2, #15
 800ac10:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2220      	movs	r2, #32
 800ac16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	4798      	blx	r3
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800ac2a:	2300      	movs	r3, #0
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3768      	adds	r7, #104	; 0x68
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}
 800ac34:	effffffe 	.word	0xeffffffe
 800ac38:	0800cca5 	.word	0x0800cca5

0800ac3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b0ba      	sub	sp, #232	; 0xe8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	69db      	ldr	r3, [r3, #28]
 800ac4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ac62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ac66:	f640 030f 	movw	r3, #2063	; 0x80f
 800ac6a:	4013      	ands	r3, r2
 800ac6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ac70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d11b      	bne.n	800acb0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ac78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac7c:	f003 0320 	and.w	r3, r3, #32
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d015      	beq.n	800acb0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ac84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac88:	f003 0320 	and.w	r3, r3, #32
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d105      	bne.n	800ac9c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ac90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d009      	beq.n	800acb0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f000 8387 	beq.w	800b3b4 <HAL_UART_IRQHandler+0x778>
      {
        huart->RxISR(huart);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	4798      	blx	r3
      }
      return;
 800acae:	e381      	b.n	800b3b4 <HAL_UART_IRQHandler+0x778>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800acb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	f000 8129 	beq.w	800af0c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800acba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800acbe:	4b90      	ldr	r3, [pc, #576]	; (800af00 <HAL_UART_IRQHandler+0x2c4>)
 800acc0:	4013      	ands	r3, r2
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d106      	bne.n	800acd4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800acc6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800acca:	4b8e      	ldr	r3, [pc, #568]	; (800af04 <HAL_UART_IRQHandler+0x2c8>)
 800accc:	4013      	ands	r3, r2
 800acce:	2b00      	cmp	r3, #0
 800acd0:	f000 811c 	beq.w	800af0c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800acd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acd8:	f003 0301 	and.w	r3, r3, #1
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d011      	beq.n	800ad04 <HAL_UART_IRQHandler+0xc8>
 800ace0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ace4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d00b      	beq.n	800ad04 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	2201      	movs	r2, #1
 800acf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acfa:	f043 0201 	orr.w	r2, r3, #1
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad08:	f003 0302 	and.w	r3, r3, #2
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d011      	beq.n	800ad34 <HAL_UART_IRQHandler+0xf8>
 800ad10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad14:	f003 0301 	and.w	r3, r3, #1
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d00b      	beq.n	800ad34 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2202      	movs	r2, #2
 800ad22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad2a:	f043 0204 	orr.w	r2, r3, #4
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad38:	f003 0304 	and.w	r3, r3, #4
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d011      	beq.n	800ad64 <HAL_UART_IRQHandler+0x128>
 800ad40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad44:	f003 0301 	and.w	r3, r3, #1
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00b      	beq.n	800ad64 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	2204      	movs	r2, #4
 800ad52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad5a:	f043 0202 	orr.w	r2, r3, #2
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ad64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad68:	f003 0308 	and.w	r3, r3, #8
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d017      	beq.n	800ada0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ad70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad74:	f003 0320 	and.w	r3, r3, #32
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d105      	bne.n	800ad88 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ad7c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ad80:	4b5f      	ldr	r3, [pc, #380]	; (800af00 <HAL_UART_IRQHandler+0x2c4>)
 800ad82:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d00b      	beq.n	800ada0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	2208      	movs	r2, #8
 800ad8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad96:	f043 0208 	orr.w	r2, r3, #8
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ada0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ada4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d012      	beq.n	800add2 <HAL_UART_IRQHandler+0x196>
 800adac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d00c      	beq.n	800add2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800adc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adc8:	f043 0220 	orr.w	r2, r3, #32
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800add8:	2b00      	cmp	r3, #0
 800adda:	f000 82ed 	beq.w	800b3b8 <HAL_UART_IRQHandler+0x77c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800adde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ade2:	f003 0320 	and.w	r3, r3, #32
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d013      	beq.n	800ae12 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800adea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adee:	f003 0320 	and.w	r3, r3, #32
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d105      	bne.n	800ae02 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800adf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d007      	beq.n	800ae12 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d003      	beq.n	800ae12 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	689b      	ldr	r3, [r3, #8]
 800ae22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae26:	2b40      	cmp	r3, #64	; 0x40
 800ae28:	d005      	beq.n	800ae36 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ae2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ae2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d058      	beq.n	800aee8 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f001 fd5c 	bl	800c8f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	689b      	ldr	r3, [r3, #8]
 800ae42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae46:	2b40      	cmp	r3, #64	; 0x40
 800ae48:	d148      	bne.n	800aedc <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	3308      	adds	r3, #8
 800ae50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ae58:	e853 3f00 	ldrex	r3, [r3]
 800ae5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ae60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	3308      	adds	r3, #8
 800ae72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ae76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ae7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ae82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ae86:	e841 2300 	strex	r3, r2, [r1]
 800ae8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ae8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d1d9      	bne.n	800ae4a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d017      	beq.n	800aed0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aea6:	4a18      	ldr	r2, [pc, #96]	; (800af08 <HAL_UART_IRQHandler+0x2cc>)
 800aea8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7f8 f8d1 	bl	8003058 <HAL_DMA_Abort_IT>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d01f      	beq.n	800aefc <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800aeca:	4610      	mov	r0, r2
 800aecc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aece:	e015      	b.n	800aefc <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aeda:	e00f      	b.n	800aefc <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aee6:	e009      	b.n	800aefc <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2200      	movs	r2, #0
 800aef6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800aefa:	e25d      	b.n	800b3b8 <HAL_UART_IRQHandler+0x77c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aefc:	bf00      	nop
    return;
 800aefe:	e25b      	b.n	800b3b8 <HAL_UART_IRQHandler+0x77c>
 800af00:	10000001 	.word	0x10000001
 800af04:	04000120 	.word	0x04000120
 800af08:	0800cc75 	.word	0x0800cc75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af10:	2b01      	cmp	r3, #1
 800af12:	f040 81eb 	bne.w	800b2ec <HAL_UART_IRQHandler+0x6b0>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800af16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af1a:	f003 0310 	and.w	r3, r3, #16
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f000 81e4 	beq.w	800b2ec <HAL_UART_IRQHandler+0x6b0>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800af24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af28:	f003 0310 	and.w	r3, r3, #16
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	f000 81dd 	beq.w	800b2ec <HAL_UART_IRQHandler+0x6b0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2210      	movs	r2, #16
 800af38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af44:	2b40      	cmp	r3, #64	; 0x40
 800af46:	f040 8153 	bne.w	800b1f0 <HAL_UART_IRQHandler+0x5b4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4a97      	ldr	r2, [pc, #604]	; (800b1b0 <HAL_UART_IRQHandler+0x574>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d068      	beq.n	800b02a <HAL_UART_IRQHandler+0x3ee>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a94      	ldr	r2, [pc, #592]	; (800b1b4 <HAL_UART_IRQHandler+0x578>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d061      	beq.n	800b02a <HAL_UART_IRQHandler+0x3ee>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a92      	ldr	r2, [pc, #584]	; (800b1b8 <HAL_UART_IRQHandler+0x57c>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d05a      	beq.n	800b02a <HAL_UART_IRQHandler+0x3ee>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a8f      	ldr	r2, [pc, #572]	; (800b1bc <HAL_UART_IRQHandler+0x580>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d053      	beq.n	800b02a <HAL_UART_IRQHandler+0x3ee>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4a8d      	ldr	r2, [pc, #564]	; (800b1c0 <HAL_UART_IRQHandler+0x584>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d04c      	beq.n	800b02a <HAL_UART_IRQHandler+0x3ee>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a8a      	ldr	r2, [pc, #552]	; (800b1c4 <HAL_UART_IRQHandler+0x588>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d045      	beq.n	800b02a <HAL_UART_IRQHandler+0x3ee>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4a88      	ldr	r2, [pc, #544]	; (800b1c8 <HAL_UART_IRQHandler+0x58c>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d03e      	beq.n	800b02a <HAL_UART_IRQHandler+0x3ee>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4a85      	ldr	r2, [pc, #532]	; (800b1cc <HAL_UART_IRQHandler+0x590>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d037      	beq.n	800b02a <HAL_UART_IRQHandler+0x3ee>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a83      	ldr	r2, [pc, #524]	; (800b1d0 <HAL_UART_IRQHandler+0x594>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d030      	beq.n	800b02a <HAL_UART_IRQHandler+0x3ee>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a80      	ldr	r2, [pc, #512]	; (800b1d4 <HAL_UART_IRQHandler+0x598>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d029      	beq.n	800b02a <HAL_UART_IRQHandler+0x3ee>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a7e      	ldr	r2, [pc, #504]	; (800b1d8 <HAL_UART_IRQHandler+0x59c>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d022      	beq.n	800b02a <HAL_UART_IRQHandler+0x3ee>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a7b      	ldr	r2, [pc, #492]	; (800b1dc <HAL_UART_IRQHandler+0x5a0>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d01b      	beq.n	800b02a <HAL_UART_IRQHandler+0x3ee>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4a79      	ldr	r2, [pc, #484]	; (800b1e0 <HAL_UART_IRQHandler+0x5a4>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d014      	beq.n	800b02a <HAL_UART_IRQHandler+0x3ee>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a76      	ldr	r2, [pc, #472]	; (800b1e4 <HAL_UART_IRQHandler+0x5a8>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d00d      	beq.n	800b02a <HAL_UART_IRQHandler+0x3ee>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a74      	ldr	r2, [pc, #464]	; (800b1e8 <HAL_UART_IRQHandler+0x5ac>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d006      	beq.n	800b02a <HAL_UART_IRQHandler+0x3ee>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a71      	ldr	r2, [pc, #452]	; (800b1ec <HAL_UART_IRQHandler+0x5b0>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d106      	bne.n	800b038 <HAL_UART_IRQHandler+0x3fc>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	b29b      	uxth	r3, r3
 800b036:	e005      	b.n	800b044 <HAL_UART_IRQHandler+0x408>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	b29b      	uxth	r3, r3
 800b044:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b048:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	f000 81b5 	beq.w	800b3bc <HAL_UART_IRQHandler+0x780>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b058:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b05c:	429a      	cmp	r2, r3
 800b05e:	f080 81ad 	bcs.w	800b3bc <HAL_UART_IRQHandler+0x780>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b068:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b072:	69db      	ldr	r3, [r3, #28]
 800b074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b078:	f000 8087 	beq.w	800b18a <HAL_UART_IRQHandler+0x54e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b084:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b088:	e853 3f00 	ldrex	r3, [r3]
 800b08c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b090:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b098:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b0a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b0aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b0b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b0b6:	e841 2300 	strex	r3, r2, [r1]
 800b0ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b0be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d1da      	bne.n	800b07c <HAL_UART_IRQHandler+0x440>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	3308      	adds	r3, #8
 800b0cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b0d0:	e853 3f00 	ldrex	r3, [r3]
 800b0d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b0d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b0d8:	f023 0301 	bic.w	r3, r3, #1
 800b0dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	3308      	adds	r3, #8
 800b0e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b0ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b0ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b0f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b0f6:	e841 2300 	strex	r3, r2, [r1]
 800b0fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b0fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d1e1      	bne.n	800b0c6 <HAL_UART_IRQHandler+0x48a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	3308      	adds	r3, #8
 800b108:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b10a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b10c:	e853 3f00 	ldrex	r3, [r3]
 800b110:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b118:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	3308      	adds	r3, #8
 800b122:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b126:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b128:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b12a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b12c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b12e:	e841 2300 	strex	r3, r2, [r1]
 800b132:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b134:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b136:	2b00      	cmp	r3, #0
 800b138:	d1e3      	bne.n	800b102 <HAL_UART_IRQHandler+0x4c6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2220      	movs	r2, #32
 800b13e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b14e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b150:	e853 3f00 	ldrex	r3, [r3]
 800b154:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b158:	f023 0310 	bic.w	r3, r3, #16
 800b15c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	461a      	mov	r2, r3
 800b166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b16a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b16c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b16e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b170:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b172:	e841 2300 	strex	r3, r2, [r1]
 800b176:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d1e4      	bne.n	800b148 <HAL_UART_IRQHandler+0x50c>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b184:	4618      	mov	r0, r3
 800b186:	f7f7 fc49 	bl	8002a1c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2202      	movs	r2, #2
 800b18e:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 800b19c:	687a      	ldr	r2, [r7, #4]
 800b19e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 800b1a2:	b292      	uxth	r2, r2
 800b1a4:	1a8a      	subs	r2, r1, r2
 800b1a6:	b292      	uxth	r2, r2
 800b1a8:	4611      	mov	r1, r2
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b1ae:	e105      	b.n	800b3bc <HAL_UART_IRQHandler+0x780>
 800b1b0:	40020010 	.word	0x40020010
 800b1b4:	40020028 	.word	0x40020028
 800b1b8:	40020040 	.word	0x40020040
 800b1bc:	40020058 	.word	0x40020058
 800b1c0:	40020070 	.word	0x40020070
 800b1c4:	40020088 	.word	0x40020088
 800b1c8:	400200a0 	.word	0x400200a0
 800b1cc:	400200b8 	.word	0x400200b8
 800b1d0:	40020410 	.word	0x40020410
 800b1d4:	40020428 	.word	0x40020428
 800b1d8:	40020440 	.word	0x40020440
 800b1dc:	40020458 	.word	0x40020458
 800b1e0:	40020470 	.word	0x40020470
 800b1e4:	40020488 	.word	0x40020488
 800b1e8:	400204a0 	.word	0x400204a0
 800b1ec:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	1ad3      	subs	r3, r2, r3
 800b200:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	f000 80d7 	beq.w	800b3c0 <HAL_UART_IRQHandler+0x784>
          && (nb_rx_data > 0U))
 800b212:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b216:	2b00      	cmp	r3, #0
 800b218:	f000 80d2 	beq.w	800b3c0 <HAL_UART_IRQHandler+0x784>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b224:	e853 3f00 	ldrex	r3, [r3]
 800b228:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b22a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b22c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b230:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	461a      	mov	r2, r3
 800b23a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b23e:	647b      	str	r3, [r7, #68]	; 0x44
 800b240:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b242:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b244:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b246:	e841 2300 	strex	r3, r2, [r1]
 800b24a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b24c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d1e4      	bne.n	800b21c <HAL_UART_IRQHandler+0x5e0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	3308      	adds	r3, #8
 800b258:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25c:	e853 3f00 	ldrex	r3, [r3]
 800b260:	623b      	str	r3, [r7, #32]
   return(result);
 800b262:	6a3a      	ldr	r2, [r7, #32]
 800b264:	4b59      	ldr	r3, [pc, #356]	; (800b3cc <HAL_UART_IRQHandler+0x790>)
 800b266:	4013      	ands	r3, r2
 800b268:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	3308      	adds	r3, #8
 800b272:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b276:	633a      	str	r2, [r7, #48]	; 0x30
 800b278:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b27a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b27c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b27e:	e841 2300 	strex	r3, r2, [r1]
 800b282:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b286:	2b00      	cmp	r3, #0
 800b288:	d1e3      	bne.n	800b252 <HAL_UART_IRQHandler+0x616>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2220      	movs	r2, #32
 800b28e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2200      	movs	r2, #0
 800b29c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	e853 3f00 	ldrex	r3, [r3]
 800b2aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f023 0310 	bic.w	r3, r3, #16
 800b2b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b2c0:	61fb      	str	r3, [r7, #28]
 800b2c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c4:	69b9      	ldr	r1, [r7, #24]
 800b2c6:	69fa      	ldr	r2, [r7, #28]
 800b2c8:	e841 2300 	strex	r3, r2, [r1]
 800b2cc:	617b      	str	r3, [r7, #20]
   return(result);
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d1e4      	bne.n	800b29e <HAL_UART_IRQHandler+0x662>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2202      	movs	r2, #2
 800b2d8:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b2e0:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800b2e4:	4611      	mov	r1, r2
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b2ea:	e069      	b.n	800b3c0 <HAL_UART_IRQHandler+0x784>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b2ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d010      	beq.n	800b31a <HAL_UART_IRQHandler+0x6de>
 800b2f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b300:	2b00      	cmp	r3, #0
 800b302:	d00a      	beq.n	800b31a <HAL_UART_IRQHandler+0x6de>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b30c:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b318:	e055      	b.n	800b3c6 <HAL_UART_IRQHandler+0x78a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b31a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b31e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b322:	2b00      	cmp	r3, #0
 800b324:	d014      	beq.n	800b350 <HAL_UART_IRQHandler+0x714>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b32a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d105      	bne.n	800b33e <HAL_UART_IRQHandler+0x702>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b336:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d008      	beq.n	800b350 <HAL_UART_IRQHandler+0x714>
  {
    if (huart->TxISR != NULL)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b342:	2b00      	cmp	r3, #0
 800b344:	d03e      	beq.n	800b3c4 <HAL_UART_IRQHandler+0x788>
    {
      huart->TxISR(huart);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	4798      	blx	r3
    }
    return;
 800b34e:	e039      	b.n	800b3c4 <HAL_UART_IRQHandler+0x788>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d009      	beq.n	800b370 <HAL_UART_IRQHandler+0x734>
 800b35c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b364:	2b00      	cmp	r3, #0
 800b366:	d003      	beq.n	800b370 <HAL_UART_IRQHandler+0x734>
  {
    UART_EndTransmit_IT(huart);
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f001 fe64 	bl	800d036 <UART_EndTransmit_IT>
    return;
 800b36e:	e02a      	b.n	800b3c6 <HAL_UART_IRQHandler+0x78a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b374:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d00b      	beq.n	800b394 <HAL_UART_IRQHandler+0x758>
 800b37c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b380:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b384:	2b00      	cmp	r3, #0
 800b386:	d005      	beq.n	800b394 <HAL_UART_IRQHandler+0x758>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b392:	e018      	b.n	800b3c6 <HAL_UART_IRQHandler+0x78a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d012      	beq.n	800b3c6 <HAL_UART_IRQHandler+0x78a>
 800b3a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	da0e      	bge.n	800b3c6 <HAL_UART_IRQHandler+0x78a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b3b2:	e008      	b.n	800b3c6 <HAL_UART_IRQHandler+0x78a>
      return;
 800b3b4:	bf00      	nop
 800b3b6:	e006      	b.n	800b3c6 <HAL_UART_IRQHandler+0x78a>
    return;
 800b3b8:	bf00      	nop
 800b3ba:	e004      	b.n	800b3c6 <HAL_UART_IRQHandler+0x78a>
      return;
 800b3bc:	bf00      	nop
 800b3be:	e002      	b.n	800b3c6 <HAL_UART_IRQHandler+0x78a>
      return;
 800b3c0:	bf00      	nop
 800b3c2:	e000      	b.n	800b3c6 <HAL_UART_IRQHandler+0x78a>
    return;
 800b3c4:	bf00      	nop
  }
}
 800b3c6:	37e8      	adds	r7, #232	; 0xe8
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	effffffe 	.word	0xeffffffe

0800b3d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b3d8:	bf00      	nop
 800b3da:	370c      	adds	r7, #12
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr

0800b3e4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b083      	sub	sp, #12
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b3ec:	bf00      	nop
 800b3ee:	370c      	adds	r7, #12
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b400:	bf00      	nop
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b414:	bf00      	nop
 800b416:	370c      	adds	r7, #12
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr

0800b420 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b420:	b480      	push	{r7}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b428:	bf00      	nop
 800b42a:	370c      	adds	r7, #12
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr

0800b434 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b434:	b480      	push	{r7}
 800b436:	b083      	sub	sp, #12
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b43c:	bf00      	nop
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr

0800b448 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b448:	b480      	push	{r7}
 800b44a:	b083      	sub	sp, #12
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b450:	bf00      	nop
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b464:	bf00      	nop
 800b466:	370c      	adds	r7, #12
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b470:	b480      	push	{r7}
 800b472:	b083      	sub	sp, #12
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	460b      	mov	r3, r1
 800b47a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b47c:	bf00      	nop
 800b47e:	370c      	adds	r7, #12
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr

0800b488 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800b488:	b480      	push	{r7}
 800b48a:	b08f      	sub	sp, #60	; 0x3c
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b496:	2b01      	cmp	r3, #1
 800b498:	d101      	bne.n	800b49e <HAL_HalfDuplex_EnableTransmitter+0x16>
 800b49a:	2302      	movs	r3, #2
 800b49c:	e042      	b.n	800b524 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2224      	movs	r2, #36	; 0x24
 800b4aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b4:	6a3b      	ldr	r3, [r7, #32]
 800b4b6:	e853 3f00 	ldrex	r3, [r3]
 800b4ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	f023 030c 	bic.w	r3, r3, #12
 800b4c2:	637b      	str	r3, [r7, #52]	; 0x34
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4ce:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4d4:	e841 2300 	strex	r3, r2, [r1]
 800b4d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d1e6      	bne.n	800b4ae <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	e853 3f00 	ldrex	r3, [r3]
 800b4ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	f043 0308 	orr.w	r3, r3, #8
 800b4f4:	633b      	str	r3, [r7, #48]	; 0x30
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fe:	61bb      	str	r3, [r7, #24]
 800b500:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b502:	6979      	ldr	r1, [r7, #20]
 800b504:	69ba      	ldr	r2, [r7, #24]
 800b506:	e841 2300 	strex	r3, r2, [r1]
 800b50a:	613b      	str	r3, [r7, #16]
   return(result);
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d1e6      	bne.n	800b4e0 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2220      	movs	r2, #32
 800b516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b522:	2300      	movs	r3, #0
}
 800b524:	4618      	mov	r0, r3
 800b526:	373c      	adds	r7, #60	; 0x3c
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr

0800b530 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800b530:	b480      	push	{r7}
 800b532:	b08f      	sub	sp, #60	; 0x3c
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d101      	bne.n	800b546 <HAL_HalfDuplex_EnableReceiver+0x16>
 800b542:	2302      	movs	r3, #2
 800b544:	e042      	b.n	800b5cc <HAL_HalfDuplex_EnableReceiver+0x9c>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2201      	movs	r2, #1
 800b54a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2224      	movs	r2, #36	; 0x24
 800b552:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b55c:	6a3b      	ldr	r3, [r7, #32]
 800b55e:	e853 3f00 	ldrex	r3, [r3]
 800b562:	61fb      	str	r3, [r7, #28]
   return(result);
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	f023 030c 	bic.w	r3, r3, #12
 800b56a:	637b      	str	r3, [r7, #52]	; 0x34
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	461a      	mov	r2, r3
 800b572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b574:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b576:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b578:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b57a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b57c:	e841 2300 	strex	r3, r2, [r1]
 800b580:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b584:	2b00      	cmp	r3, #0
 800b586:	d1e6      	bne.n	800b556 <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	e853 3f00 	ldrex	r3, [r3]
 800b594:	60bb      	str	r3, [r7, #8]
   return(result);
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	f043 0304 	orr.w	r3, r3, #4
 800b59c:	633b      	str	r3, [r7, #48]	; 0x30
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a6:	61bb      	str	r3, [r7, #24]
 800b5a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5aa:	6979      	ldr	r1, [r7, #20]
 800b5ac:	69ba      	ldr	r2, [r7, #24]
 800b5ae:	e841 2300 	strex	r3, r2, [r1]
 800b5b2:	613b      	str	r3, [r7, #16]
   return(result);
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d1e6      	bne.n	800b588 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2220      	movs	r2, #32
 800b5be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b5ca:	2300      	movs	r3, #0
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	373c      	adds	r7, #60	; 0x3c
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5e6:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5ee:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800b5f0:	68fa      	ldr	r2, [r7, #12]
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	4313      	orrs	r3, r2
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3714      	adds	r7, #20
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr
	...

0800b604 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b604:	b480      	push	{r7}
 800b606:	b083      	sub	sp, #12
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	4a1a      	ldr	r2, [pc, #104]	; (800b678 <UART_InitCallbacksToDefault+0x74>)
 800b610:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	4a19      	ldr	r2, [pc, #100]	; (800b67c <UART_InitCallbacksToDefault+0x78>)
 800b618:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	4a18      	ldr	r2, [pc, #96]	; (800b680 <UART_InitCallbacksToDefault+0x7c>)
 800b620:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	4a17      	ldr	r2, [pc, #92]	; (800b684 <UART_InitCallbacksToDefault+0x80>)
 800b628:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	4a16      	ldr	r2, [pc, #88]	; (800b688 <UART_InitCallbacksToDefault+0x84>)
 800b630:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	4a15      	ldr	r2, [pc, #84]	; (800b68c <UART_InitCallbacksToDefault+0x88>)
 800b638:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	4a14      	ldr	r2, [pc, #80]	; (800b690 <UART_InitCallbacksToDefault+0x8c>)
 800b640:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	4a13      	ldr	r2, [pc, #76]	; (800b694 <UART_InitCallbacksToDefault+0x90>)
 800b648:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	4a12      	ldr	r2, [pc, #72]	; (800b698 <UART_InitCallbacksToDefault+0x94>)
 800b650:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	4a11      	ldr	r2, [pc, #68]	; (800b69c <UART_InitCallbacksToDefault+0x98>)
 800b658:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4a10      	ldr	r2, [pc, #64]	; (800b6a0 <UART_InitCallbacksToDefault+0x9c>)
 800b660:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	4a0f      	ldr	r2, [pc, #60]	; (800b6a4 <UART_InitCallbacksToDefault+0xa0>)
 800b668:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

}
 800b66c:	bf00      	nop
 800b66e:	370c      	adds	r7, #12
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr
 800b678:	0800b3e5 	.word	0x0800b3e5
 800b67c:	0800b3d1 	.word	0x0800b3d1
 800b680:	0800b40d 	.word	0x0800b40d
 800b684:	0800b3f9 	.word	0x0800b3f9
 800b688:	0800b421 	.word	0x0800b421
 800b68c:	0800b435 	.word	0x0800b435
 800b690:	0800b449 	.word	0x0800b449
 800b694:	0800b45d 	.word	0x0800b45d
 800b698:	0800daf1 	.word	0x0800daf1
 800b69c:	0800db05 	.word	0x0800db05
 800b6a0:	0800db19 	.word	0x0800db19
 800b6a4:	0800b471 	.word	0x0800b471

0800b6a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b6a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6ac:	b092      	sub	sp, #72	; 0x48
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	689a      	ldr	r2, [r3, #8]
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	691b      	ldr	r3, [r3, #16]
 800b6c0:	431a      	orrs	r2, r3
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	695b      	ldr	r3, [r3, #20]
 800b6c6:	431a      	orrs	r2, r3
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	69db      	ldr	r3, [r3, #28]
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	4bbe      	ldr	r3, [pc, #760]	; (800b9d0 <UART_SetConfig+0x328>)
 800b6d8:	4013      	ands	r3, r2
 800b6da:	697a      	ldr	r2, [r7, #20]
 800b6dc:	6812      	ldr	r2, [r2, #0]
 800b6de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b6e0:	430b      	orrs	r3, r1
 800b6e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	68da      	ldr	r2, [r3, #12]
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	430a      	orrs	r2, r1
 800b6f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	699b      	ldr	r3, [r3, #24]
 800b6fe:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4ab3      	ldr	r2, [pc, #716]	; (800b9d4 <UART_SetConfig+0x32c>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d004      	beq.n	800b714 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	6a1b      	ldr	r3, [r3, #32]
 800b70e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b710:	4313      	orrs	r3, r2
 800b712:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	689a      	ldr	r2, [r3, #8]
 800b71a:	4baf      	ldr	r3, [pc, #700]	; (800b9d8 <UART_SetConfig+0x330>)
 800b71c:	4013      	ands	r3, r2
 800b71e:	697a      	ldr	r2, [r7, #20]
 800b720:	6812      	ldr	r2, [r2, #0]
 800b722:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b724:	430b      	orrs	r3, r1
 800b726:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b72e:	f023 010f 	bic.w	r1, r3, #15
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	430a      	orrs	r2, r1
 800b73c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	4aa6      	ldr	r2, [pc, #664]	; (800b9dc <UART_SetConfig+0x334>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d177      	bne.n	800b838 <UART_SetConfig+0x190>
 800b748:	4ba5      	ldr	r3, [pc, #660]	; (800b9e0 <UART_SetConfig+0x338>)
 800b74a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b74c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b750:	2b28      	cmp	r3, #40	; 0x28
 800b752:	d86d      	bhi.n	800b830 <UART_SetConfig+0x188>
 800b754:	a201      	add	r2, pc, #4	; (adr r2, 800b75c <UART_SetConfig+0xb4>)
 800b756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b75a:	bf00      	nop
 800b75c:	0800b801 	.word	0x0800b801
 800b760:	0800b831 	.word	0x0800b831
 800b764:	0800b831 	.word	0x0800b831
 800b768:	0800b831 	.word	0x0800b831
 800b76c:	0800b831 	.word	0x0800b831
 800b770:	0800b831 	.word	0x0800b831
 800b774:	0800b831 	.word	0x0800b831
 800b778:	0800b831 	.word	0x0800b831
 800b77c:	0800b809 	.word	0x0800b809
 800b780:	0800b831 	.word	0x0800b831
 800b784:	0800b831 	.word	0x0800b831
 800b788:	0800b831 	.word	0x0800b831
 800b78c:	0800b831 	.word	0x0800b831
 800b790:	0800b831 	.word	0x0800b831
 800b794:	0800b831 	.word	0x0800b831
 800b798:	0800b831 	.word	0x0800b831
 800b79c:	0800b811 	.word	0x0800b811
 800b7a0:	0800b831 	.word	0x0800b831
 800b7a4:	0800b831 	.word	0x0800b831
 800b7a8:	0800b831 	.word	0x0800b831
 800b7ac:	0800b831 	.word	0x0800b831
 800b7b0:	0800b831 	.word	0x0800b831
 800b7b4:	0800b831 	.word	0x0800b831
 800b7b8:	0800b831 	.word	0x0800b831
 800b7bc:	0800b819 	.word	0x0800b819
 800b7c0:	0800b831 	.word	0x0800b831
 800b7c4:	0800b831 	.word	0x0800b831
 800b7c8:	0800b831 	.word	0x0800b831
 800b7cc:	0800b831 	.word	0x0800b831
 800b7d0:	0800b831 	.word	0x0800b831
 800b7d4:	0800b831 	.word	0x0800b831
 800b7d8:	0800b831 	.word	0x0800b831
 800b7dc:	0800b821 	.word	0x0800b821
 800b7e0:	0800b831 	.word	0x0800b831
 800b7e4:	0800b831 	.word	0x0800b831
 800b7e8:	0800b831 	.word	0x0800b831
 800b7ec:	0800b831 	.word	0x0800b831
 800b7f0:	0800b831 	.word	0x0800b831
 800b7f4:	0800b831 	.word	0x0800b831
 800b7f8:	0800b831 	.word	0x0800b831
 800b7fc:	0800b829 	.word	0x0800b829
 800b800:	2301      	movs	r3, #1
 800b802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b806:	e222      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b808:	2304      	movs	r3, #4
 800b80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b80e:	e21e      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b810:	2308      	movs	r3, #8
 800b812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b816:	e21a      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b818:	2310      	movs	r3, #16
 800b81a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b81e:	e216      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b820:	2320      	movs	r3, #32
 800b822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b826:	e212      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b828:	2340      	movs	r3, #64	; 0x40
 800b82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b82e:	e20e      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b830:	2380      	movs	r3, #128	; 0x80
 800b832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b836:	e20a      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a69      	ldr	r2, [pc, #420]	; (800b9e4 <UART_SetConfig+0x33c>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d130      	bne.n	800b8a4 <UART_SetConfig+0x1fc>
 800b842:	4b67      	ldr	r3, [pc, #412]	; (800b9e0 <UART_SetConfig+0x338>)
 800b844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b846:	f003 0307 	and.w	r3, r3, #7
 800b84a:	2b05      	cmp	r3, #5
 800b84c:	d826      	bhi.n	800b89c <UART_SetConfig+0x1f4>
 800b84e:	a201      	add	r2, pc, #4	; (adr r2, 800b854 <UART_SetConfig+0x1ac>)
 800b850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b854:	0800b86d 	.word	0x0800b86d
 800b858:	0800b875 	.word	0x0800b875
 800b85c:	0800b87d 	.word	0x0800b87d
 800b860:	0800b885 	.word	0x0800b885
 800b864:	0800b88d 	.word	0x0800b88d
 800b868:	0800b895 	.word	0x0800b895
 800b86c:	2300      	movs	r3, #0
 800b86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b872:	e1ec      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b874:	2304      	movs	r3, #4
 800b876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b87a:	e1e8      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b87c:	2308      	movs	r3, #8
 800b87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b882:	e1e4      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b884:	2310      	movs	r3, #16
 800b886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b88a:	e1e0      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b88c:	2320      	movs	r3, #32
 800b88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b892:	e1dc      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b894:	2340      	movs	r3, #64	; 0x40
 800b896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b89a:	e1d8      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b89c:	2380      	movs	r3, #128	; 0x80
 800b89e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8a2:	e1d4      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4a4f      	ldr	r2, [pc, #316]	; (800b9e8 <UART_SetConfig+0x340>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d130      	bne.n	800b910 <UART_SetConfig+0x268>
 800b8ae:	4b4c      	ldr	r3, [pc, #304]	; (800b9e0 <UART_SetConfig+0x338>)
 800b8b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8b2:	f003 0307 	and.w	r3, r3, #7
 800b8b6:	2b05      	cmp	r3, #5
 800b8b8:	d826      	bhi.n	800b908 <UART_SetConfig+0x260>
 800b8ba:	a201      	add	r2, pc, #4	; (adr r2, 800b8c0 <UART_SetConfig+0x218>)
 800b8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c0:	0800b8d9 	.word	0x0800b8d9
 800b8c4:	0800b8e1 	.word	0x0800b8e1
 800b8c8:	0800b8e9 	.word	0x0800b8e9
 800b8cc:	0800b8f1 	.word	0x0800b8f1
 800b8d0:	0800b8f9 	.word	0x0800b8f9
 800b8d4:	0800b901 	.word	0x0800b901
 800b8d8:	2300      	movs	r3, #0
 800b8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8de:	e1b6      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b8e0:	2304      	movs	r3, #4
 800b8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8e6:	e1b2      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b8e8:	2308      	movs	r3, #8
 800b8ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8ee:	e1ae      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b8f0:	2310      	movs	r3, #16
 800b8f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8f6:	e1aa      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b8f8:	2320      	movs	r3, #32
 800b8fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8fe:	e1a6      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b900:	2340      	movs	r3, #64	; 0x40
 800b902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b906:	e1a2      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b908:	2380      	movs	r3, #128	; 0x80
 800b90a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b90e:	e19e      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	4a35      	ldr	r2, [pc, #212]	; (800b9ec <UART_SetConfig+0x344>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d130      	bne.n	800b97c <UART_SetConfig+0x2d4>
 800b91a:	4b31      	ldr	r3, [pc, #196]	; (800b9e0 <UART_SetConfig+0x338>)
 800b91c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b91e:	f003 0307 	and.w	r3, r3, #7
 800b922:	2b05      	cmp	r3, #5
 800b924:	d826      	bhi.n	800b974 <UART_SetConfig+0x2cc>
 800b926:	a201      	add	r2, pc, #4	; (adr r2, 800b92c <UART_SetConfig+0x284>)
 800b928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b92c:	0800b945 	.word	0x0800b945
 800b930:	0800b94d 	.word	0x0800b94d
 800b934:	0800b955 	.word	0x0800b955
 800b938:	0800b95d 	.word	0x0800b95d
 800b93c:	0800b965 	.word	0x0800b965
 800b940:	0800b96d 	.word	0x0800b96d
 800b944:	2300      	movs	r3, #0
 800b946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b94a:	e180      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b94c:	2304      	movs	r3, #4
 800b94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b952:	e17c      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b954:	2308      	movs	r3, #8
 800b956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b95a:	e178      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b95c:	2310      	movs	r3, #16
 800b95e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b962:	e174      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b964:	2320      	movs	r3, #32
 800b966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b96a:	e170      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b96c:	2340      	movs	r3, #64	; 0x40
 800b96e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b972:	e16c      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b974:	2380      	movs	r3, #128	; 0x80
 800b976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b97a:	e168      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a1b      	ldr	r2, [pc, #108]	; (800b9f0 <UART_SetConfig+0x348>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d142      	bne.n	800ba0c <UART_SetConfig+0x364>
 800b986:	4b16      	ldr	r3, [pc, #88]	; (800b9e0 <UART_SetConfig+0x338>)
 800b988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b98a:	f003 0307 	and.w	r3, r3, #7
 800b98e:	2b05      	cmp	r3, #5
 800b990:	d838      	bhi.n	800ba04 <UART_SetConfig+0x35c>
 800b992:	a201      	add	r2, pc, #4	; (adr r2, 800b998 <UART_SetConfig+0x2f0>)
 800b994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b998:	0800b9b1 	.word	0x0800b9b1
 800b99c:	0800b9b9 	.word	0x0800b9b9
 800b9a0:	0800b9c1 	.word	0x0800b9c1
 800b9a4:	0800b9c9 	.word	0x0800b9c9
 800b9a8:	0800b9f5 	.word	0x0800b9f5
 800b9ac:	0800b9fd 	.word	0x0800b9fd
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9b6:	e14a      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b9b8:	2304      	movs	r3, #4
 800b9ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9be:	e146      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b9c0:	2308      	movs	r3, #8
 800b9c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9c6:	e142      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b9c8:	2310      	movs	r3, #16
 800b9ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9ce:	e13e      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b9d0:	cfff69f3 	.word	0xcfff69f3
 800b9d4:	58000c00 	.word	0x58000c00
 800b9d8:	11fff4ff 	.word	0x11fff4ff
 800b9dc:	40011000 	.word	0x40011000
 800b9e0:	58024400 	.word	0x58024400
 800b9e4:	40004400 	.word	0x40004400
 800b9e8:	40004800 	.word	0x40004800
 800b9ec:	40004c00 	.word	0x40004c00
 800b9f0:	40005000 	.word	0x40005000
 800b9f4:	2320      	movs	r3, #32
 800b9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9fa:	e128      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800b9fc:	2340      	movs	r3, #64	; 0x40
 800b9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba02:	e124      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800ba04:	2380      	movs	r3, #128	; 0x80
 800ba06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba0a:	e120      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4acb      	ldr	r2, [pc, #812]	; (800bd40 <UART_SetConfig+0x698>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d176      	bne.n	800bb04 <UART_SetConfig+0x45c>
 800ba16:	4bcb      	ldr	r3, [pc, #812]	; (800bd44 <UART_SetConfig+0x69c>)
 800ba18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ba1e:	2b28      	cmp	r3, #40	; 0x28
 800ba20:	d86c      	bhi.n	800bafc <UART_SetConfig+0x454>
 800ba22:	a201      	add	r2, pc, #4	; (adr r2, 800ba28 <UART_SetConfig+0x380>)
 800ba24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba28:	0800bacd 	.word	0x0800bacd
 800ba2c:	0800bafd 	.word	0x0800bafd
 800ba30:	0800bafd 	.word	0x0800bafd
 800ba34:	0800bafd 	.word	0x0800bafd
 800ba38:	0800bafd 	.word	0x0800bafd
 800ba3c:	0800bafd 	.word	0x0800bafd
 800ba40:	0800bafd 	.word	0x0800bafd
 800ba44:	0800bafd 	.word	0x0800bafd
 800ba48:	0800bad5 	.word	0x0800bad5
 800ba4c:	0800bafd 	.word	0x0800bafd
 800ba50:	0800bafd 	.word	0x0800bafd
 800ba54:	0800bafd 	.word	0x0800bafd
 800ba58:	0800bafd 	.word	0x0800bafd
 800ba5c:	0800bafd 	.word	0x0800bafd
 800ba60:	0800bafd 	.word	0x0800bafd
 800ba64:	0800bafd 	.word	0x0800bafd
 800ba68:	0800badd 	.word	0x0800badd
 800ba6c:	0800bafd 	.word	0x0800bafd
 800ba70:	0800bafd 	.word	0x0800bafd
 800ba74:	0800bafd 	.word	0x0800bafd
 800ba78:	0800bafd 	.word	0x0800bafd
 800ba7c:	0800bafd 	.word	0x0800bafd
 800ba80:	0800bafd 	.word	0x0800bafd
 800ba84:	0800bafd 	.word	0x0800bafd
 800ba88:	0800bae5 	.word	0x0800bae5
 800ba8c:	0800bafd 	.word	0x0800bafd
 800ba90:	0800bafd 	.word	0x0800bafd
 800ba94:	0800bafd 	.word	0x0800bafd
 800ba98:	0800bafd 	.word	0x0800bafd
 800ba9c:	0800bafd 	.word	0x0800bafd
 800baa0:	0800bafd 	.word	0x0800bafd
 800baa4:	0800bafd 	.word	0x0800bafd
 800baa8:	0800baed 	.word	0x0800baed
 800baac:	0800bafd 	.word	0x0800bafd
 800bab0:	0800bafd 	.word	0x0800bafd
 800bab4:	0800bafd 	.word	0x0800bafd
 800bab8:	0800bafd 	.word	0x0800bafd
 800babc:	0800bafd 	.word	0x0800bafd
 800bac0:	0800bafd 	.word	0x0800bafd
 800bac4:	0800bafd 	.word	0x0800bafd
 800bac8:	0800baf5 	.word	0x0800baf5
 800bacc:	2301      	movs	r3, #1
 800bace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bad2:	e0bc      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800bad4:	2304      	movs	r3, #4
 800bad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bada:	e0b8      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800badc:	2308      	movs	r3, #8
 800bade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bae2:	e0b4      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800bae4:	2310      	movs	r3, #16
 800bae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800baea:	e0b0      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800baec:	2320      	movs	r3, #32
 800baee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800baf2:	e0ac      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800baf4:	2340      	movs	r3, #64	; 0x40
 800baf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bafa:	e0a8      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800bafc:	2380      	movs	r3, #128	; 0x80
 800bafe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb02:	e0a4      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4a8f      	ldr	r2, [pc, #572]	; (800bd48 <UART_SetConfig+0x6a0>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d130      	bne.n	800bb70 <UART_SetConfig+0x4c8>
 800bb0e:	4b8d      	ldr	r3, [pc, #564]	; (800bd44 <UART_SetConfig+0x69c>)
 800bb10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb12:	f003 0307 	and.w	r3, r3, #7
 800bb16:	2b05      	cmp	r3, #5
 800bb18:	d826      	bhi.n	800bb68 <UART_SetConfig+0x4c0>
 800bb1a:	a201      	add	r2, pc, #4	; (adr r2, 800bb20 <UART_SetConfig+0x478>)
 800bb1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb20:	0800bb39 	.word	0x0800bb39
 800bb24:	0800bb41 	.word	0x0800bb41
 800bb28:	0800bb49 	.word	0x0800bb49
 800bb2c:	0800bb51 	.word	0x0800bb51
 800bb30:	0800bb59 	.word	0x0800bb59
 800bb34:	0800bb61 	.word	0x0800bb61
 800bb38:	2300      	movs	r3, #0
 800bb3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb3e:	e086      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800bb40:	2304      	movs	r3, #4
 800bb42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb46:	e082      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800bb48:	2308      	movs	r3, #8
 800bb4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb4e:	e07e      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800bb50:	2310      	movs	r3, #16
 800bb52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb56:	e07a      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800bb58:	2320      	movs	r3, #32
 800bb5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb5e:	e076      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800bb60:	2340      	movs	r3, #64	; 0x40
 800bb62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb66:	e072      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800bb68:	2380      	movs	r3, #128	; 0x80
 800bb6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb6e:	e06e      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4a75      	ldr	r2, [pc, #468]	; (800bd4c <UART_SetConfig+0x6a4>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d130      	bne.n	800bbdc <UART_SetConfig+0x534>
 800bb7a:	4b72      	ldr	r3, [pc, #456]	; (800bd44 <UART_SetConfig+0x69c>)
 800bb7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb7e:	f003 0307 	and.w	r3, r3, #7
 800bb82:	2b05      	cmp	r3, #5
 800bb84:	d826      	bhi.n	800bbd4 <UART_SetConfig+0x52c>
 800bb86:	a201      	add	r2, pc, #4	; (adr r2, 800bb8c <UART_SetConfig+0x4e4>)
 800bb88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb8c:	0800bba5 	.word	0x0800bba5
 800bb90:	0800bbad 	.word	0x0800bbad
 800bb94:	0800bbb5 	.word	0x0800bbb5
 800bb98:	0800bbbd 	.word	0x0800bbbd
 800bb9c:	0800bbc5 	.word	0x0800bbc5
 800bba0:	0800bbcd 	.word	0x0800bbcd
 800bba4:	2300      	movs	r3, #0
 800bba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbaa:	e050      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800bbac:	2304      	movs	r3, #4
 800bbae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbb2:	e04c      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800bbb4:	2308      	movs	r3, #8
 800bbb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbba:	e048      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800bbbc:	2310      	movs	r3, #16
 800bbbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbc2:	e044      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800bbc4:	2320      	movs	r3, #32
 800bbc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbca:	e040      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800bbcc:	2340      	movs	r3, #64	; 0x40
 800bbce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbd2:	e03c      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800bbd4:	2380      	movs	r3, #128	; 0x80
 800bbd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbda:	e038      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4a5b      	ldr	r2, [pc, #364]	; (800bd50 <UART_SetConfig+0x6a8>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d130      	bne.n	800bc48 <UART_SetConfig+0x5a0>
 800bbe6:	4b57      	ldr	r3, [pc, #348]	; (800bd44 <UART_SetConfig+0x69c>)
 800bbe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbea:	f003 0307 	and.w	r3, r3, #7
 800bbee:	2b05      	cmp	r3, #5
 800bbf0:	d826      	bhi.n	800bc40 <UART_SetConfig+0x598>
 800bbf2:	a201      	add	r2, pc, #4	; (adr r2, 800bbf8 <UART_SetConfig+0x550>)
 800bbf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf8:	0800bc11 	.word	0x0800bc11
 800bbfc:	0800bc19 	.word	0x0800bc19
 800bc00:	0800bc21 	.word	0x0800bc21
 800bc04:	0800bc29 	.word	0x0800bc29
 800bc08:	0800bc31 	.word	0x0800bc31
 800bc0c:	0800bc39 	.word	0x0800bc39
 800bc10:	2302      	movs	r3, #2
 800bc12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc16:	e01a      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800bc18:	2304      	movs	r3, #4
 800bc1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc1e:	e016      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800bc20:	2308      	movs	r3, #8
 800bc22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc26:	e012      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800bc28:	2310      	movs	r3, #16
 800bc2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc2e:	e00e      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800bc30:	2320      	movs	r3, #32
 800bc32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc36:	e00a      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800bc38:	2340      	movs	r3, #64	; 0x40
 800bc3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc3e:	e006      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800bc40:	2380      	movs	r3, #128	; 0x80
 800bc42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc46:	e002      	b.n	800bc4e <UART_SetConfig+0x5a6>
 800bc48:	2380      	movs	r3, #128	; 0x80
 800bc4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4a3f      	ldr	r2, [pc, #252]	; (800bd50 <UART_SetConfig+0x6a8>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	f040 80f8 	bne.w	800be4a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bc5a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bc5e:	2b20      	cmp	r3, #32
 800bc60:	dc46      	bgt.n	800bcf0 <UART_SetConfig+0x648>
 800bc62:	2b02      	cmp	r3, #2
 800bc64:	f2c0 8082 	blt.w	800bd6c <UART_SetConfig+0x6c4>
 800bc68:	3b02      	subs	r3, #2
 800bc6a:	2b1e      	cmp	r3, #30
 800bc6c:	d87e      	bhi.n	800bd6c <UART_SetConfig+0x6c4>
 800bc6e:	a201      	add	r2, pc, #4	; (adr r2, 800bc74 <UART_SetConfig+0x5cc>)
 800bc70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc74:	0800bcf7 	.word	0x0800bcf7
 800bc78:	0800bd6d 	.word	0x0800bd6d
 800bc7c:	0800bcff 	.word	0x0800bcff
 800bc80:	0800bd6d 	.word	0x0800bd6d
 800bc84:	0800bd6d 	.word	0x0800bd6d
 800bc88:	0800bd6d 	.word	0x0800bd6d
 800bc8c:	0800bd0f 	.word	0x0800bd0f
 800bc90:	0800bd6d 	.word	0x0800bd6d
 800bc94:	0800bd6d 	.word	0x0800bd6d
 800bc98:	0800bd6d 	.word	0x0800bd6d
 800bc9c:	0800bd6d 	.word	0x0800bd6d
 800bca0:	0800bd6d 	.word	0x0800bd6d
 800bca4:	0800bd6d 	.word	0x0800bd6d
 800bca8:	0800bd6d 	.word	0x0800bd6d
 800bcac:	0800bd1f 	.word	0x0800bd1f
 800bcb0:	0800bd6d 	.word	0x0800bd6d
 800bcb4:	0800bd6d 	.word	0x0800bd6d
 800bcb8:	0800bd6d 	.word	0x0800bd6d
 800bcbc:	0800bd6d 	.word	0x0800bd6d
 800bcc0:	0800bd6d 	.word	0x0800bd6d
 800bcc4:	0800bd6d 	.word	0x0800bd6d
 800bcc8:	0800bd6d 	.word	0x0800bd6d
 800bccc:	0800bd6d 	.word	0x0800bd6d
 800bcd0:	0800bd6d 	.word	0x0800bd6d
 800bcd4:	0800bd6d 	.word	0x0800bd6d
 800bcd8:	0800bd6d 	.word	0x0800bd6d
 800bcdc:	0800bd6d 	.word	0x0800bd6d
 800bce0:	0800bd6d 	.word	0x0800bd6d
 800bce4:	0800bd6d 	.word	0x0800bd6d
 800bce8:	0800bd6d 	.word	0x0800bd6d
 800bcec:	0800bd5f 	.word	0x0800bd5f
 800bcf0:	2b40      	cmp	r3, #64	; 0x40
 800bcf2:	d037      	beq.n	800bd64 <UART_SetConfig+0x6bc>
 800bcf4:	e03a      	b.n	800bd6c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bcf6:	f7fb fbef 	bl	80074d8 <HAL_RCCEx_GetD3PCLK1Freq>
 800bcfa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bcfc:	e03c      	b.n	800bd78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7fb fbfe 	bl	8007504 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd0c:	e034      	b.n	800bd78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd0e:	f107 0318 	add.w	r3, r7, #24
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7fb fd4a 	bl	80077ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bd18:	69fb      	ldr	r3, [r7, #28]
 800bd1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd1c:	e02c      	b.n	800bd78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd1e:	4b09      	ldr	r3, [pc, #36]	; (800bd44 <UART_SetConfig+0x69c>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f003 0320 	and.w	r3, r3, #32
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d016      	beq.n	800bd58 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bd2a:	4b06      	ldr	r3, [pc, #24]	; (800bd44 <UART_SetConfig+0x69c>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	08db      	lsrs	r3, r3, #3
 800bd30:	f003 0303 	and.w	r3, r3, #3
 800bd34:	4a07      	ldr	r2, [pc, #28]	; (800bd54 <UART_SetConfig+0x6ac>)
 800bd36:	fa22 f303 	lsr.w	r3, r2, r3
 800bd3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bd3c:	e01c      	b.n	800bd78 <UART_SetConfig+0x6d0>
 800bd3e:	bf00      	nop
 800bd40:	40011400 	.word	0x40011400
 800bd44:	58024400 	.word	0x58024400
 800bd48:	40007800 	.word	0x40007800
 800bd4c:	40007c00 	.word	0x40007c00
 800bd50:	58000c00 	.word	0x58000c00
 800bd54:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800bd58:	4b9d      	ldr	r3, [pc, #628]	; (800bfd0 <UART_SetConfig+0x928>)
 800bd5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd5c:	e00c      	b.n	800bd78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bd5e:	4b9d      	ldr	r3, [pc, #628]	; (800bfd4 <UART_SetConfig+0x92c>)
 800bd60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd62:	e009      	b.n	800bd78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd6a:	e005      	b.n	800bd78 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bd70:	2301      	movs	r3, #1
 800bd72:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bd76:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bd78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	f000 81de 	beq.w	800c13c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd84:	4a94      	ldr	r2, [pc, #592]	; (800bfd8 <UART_SetConfig+0x930>)
 800bd86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd8e:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd92:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	685a      	ldr	r2, [r3, #4]
 800bd98:	4613      	mov	r3, r2
 800bd9a:	005b      	lsls	r3, r3, #1
 800bd9c:	4413      	add	r3, r2
 800bd9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d305      	bcc.n	800bdb0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bdaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d903      	bls.n	800bdb8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bdb6:	e1c1      	b.n	800c13c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdba:	2200      	movs	r2, #0
 800bdbc:	60bb      	str	r3, [r7, #8]
 800bdbe:	60fa      	str	r2, [r7, #12]
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc4:	4a84      	ldr	r2, [pc, #528]	; (800bfd8 <UART_SetConfig+0x930>)
 800bdc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	2200      	movs	r2, #0
 800bdce:	603b      	str	r3, [r7, #0]
 800bdd0:	607a      	str	r2, [r7, #4]
 800bdd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bdda:	f7f4 fad9 	bl	8000390 <__aeabi_uldivmod>
 800bdde:	4602      	mov	r2, r0
 800bde0:	460b      	mov	r3, r1
 800bde2:	4610      	mov	r0, r2
 800bde4:	4619      	mov	r1, r3
 800bde6:	f04f 0200 	mov.w	r2, #0
 800bdea:	f04f 0300 	mov.w	r3, #0
 800bdee:	020b      	lsls	r3, r1, #8
 800bdf0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bdf4:	0202      	lsls	r2, r0, #8
 800bdf6:	6979      	ldr	r1, [r7, #20]
 800bdf8:	6849      	ldr	r1, [r1, #4]
 800bdfa:	0849      	lsrs	r1, r1, #1
 800bdfc:	2000      	movs	r0, #0
 800bdfe:	460c      	mov	r4, r1
 800be00:	4605      	mov	r5, r0
 800be02:	eb12 0804 	adds.w	r8, r2, r4
 800be06:	eb43 0905 	adc.w	r9, r3, r5
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	469a      	mov	sl, r3
 800be12:	4693      	mov	fp, r2
 800be14:	4652      	mov	r2, sl
 800be16:	465b      	mov	r3, fp
 800be18:	4640      	mov	r0, r8
 800be1a:	4649      	mov	r1, r9
 800be1c:	f7f4 fab8 	bl	8000390 <__aeabi_uldivmod>
 800be20:	4602      	mov	r2, r0
 800be22:	460b      	mov	r3, r1
 800be24:	4613      	mov	r3, r2
 800be26:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800be28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be2e:	d308      	bcc.n	800be42 <UART_SetConfig+0x79a>
 800be30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be36:	d204      	bcs.n	800be42 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be3e:	60da      	str	r2, [r3, #12]
 800be40:	e17c      	b.n	800c13c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800be42:	2301      	movs	r3, #1
 800be44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800be48:	e178      	b.n	800c13c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	69db      	ldr	r3, [r3, #28]
 800be4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be52:	f040 80c5 	bne.w	800bfe0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800be56:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800be5a:	2b20      	cmp	r3, #32
 800be5c:	dc48      	bgt.n	800bef0 <UART_SetConfig+0x848>
 800be5e:	2b00      	cmp	r3, #0
 800be60:	db7b      	blt.n	800bf5a <UART_SetConfig+0x8b2>
 800be62:	2b20      	cmp	r3, #32
 800be64:	d879      	bhi.n	800bf5a <UART_SetConfig+0x8b2>
 800be66:	a201      	add	r2, pc, #4	; (adr r2, 800be6c <UART_SetConfig+0x7c4>)
 800be68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be6c:	0800bef7 	.word	0x0800bef7
 800be70:	0800beff 	.word	0x0800beff
 800be74:	0800bf5b 	.word	0x0800bf5b
 800be78:	0800bf5b 	.word	0x0800bf5b
 800be7c:	0800bf07 	.word	0x0800bf07
 800be80:	0800bf5b 	.word	0x0800bf5b
 800be84:	0800bf5b 	.word	0x0800bf5b
 800be88:	0800bf5b 	.word	0x0800bf5b
 800be8c:	0800bf17 	.word	0x0800bf17
 800be90:	0800bf5b 	.word	0x0800bf5b
 800be94:	0800bf5b 	.word	0x0800bf5b
 800be98:	0800bf5b 	.word	0x0800bf5b
 800be9c:	0800bf5b 	.word	0x0800bf5b
 800bea0:	0800bf5b 	.word	0x0800bf5b
 800bea4:	0800bf5b 	.word	0x0800bf5b
 800bea8:	0800bf5b 	.word	0x0800bf5b
 800beac:	0800bf27 	.word	0x0800bf27
 800beb0:	0800bf5b 	.word	0x0800bf5b
 800beb4:	0800bf5b 	.word	0x0800bf5b
 800beb8:	0800bf5b 	.word	0x0800bf5b
 800bebc:	0800bf5b 	.word	0x0800bf5b
 800bec0:	0800bf5b 	.word	0x0800bf5b
 800bec4:	0800bf5b 	.word	0x0800bf5b
 800bec8:	0800bf5b 	.word	0x0800bf5b
 800becc:	0800bf5b 	.word	0x0800bf5b
 800bed0:	0800bf5b 	.word	0x0800bf5b
 800bed4:	0800bf5b 	.word	0x0800bf5b
 800bed8:	0800bf5b 	.word	0x0800bf5b
 800bedc:	0800bf5b 	.word	0x0800bf5b
 800bee0:	0800bf5b 	.word	0x0800bf5b
 800bee4:	0800bf5b 	.word	0x0800bf5b
 800bee8:	0800bf5b 	.word	0x0800bf5b
 800beec:	0800bf4d 	.word	0x0800bf4d
 800bef0:	2b40      	cmp	r3, #64	; 0x40
 800bef2:	d02e      	beq.n	800bf52 <UART_SetConfig+0x8aa>
 800bef4:	e031      	b.n	800bf5a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bef6:	f7fa f877 	bl	8005fe8 <HAL_RCC_GetPCLK1Freq>
 800befa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800befc:	e033      	b.n	800bf66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800befe:	f7fa f889 	bl	8006014 <HAL_RCC_GetPCLK2Freq>
 800bf02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bf04:	e02f      	b.n	800bf66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7fb fafa 	bl	8007504 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bf10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf14:	e027      	b.n	800bf66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf16:	f107 0318 	add.w	r3, r7, #24
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f7fb fc46 	bl	80077ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bf20:	69fb      	ldr	r3, [r7, #28]
 800bf22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf24:	e01f      	b.n	800bf66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf26:	4b2d      	ldr	r3, [pc, #180]	; (800bfdc <UART_SetConfig+0x934>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f003 0320 	and.w	r3, r3, #32
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d009      	beq.n	800bf46 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bf32:	4b2a      	ldr	r3, [pc, #168]	; (800bfdc <UART_SetConfig+0x934>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	08db      	lsrs	r3, r3, #3
 800bf38:	f003 0303 	and.w	r3, r3, #3
 800bf3c:	4a24      	ldr	r2, [pc, #144]	; (800bfd0 <UART_SetConfig+0x928>)
 800bf3e:	fa22 f303 	lsr.w	r3, r2, r3
 800bf42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bf44:	e00f      	b.n	800bf66 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bf46:	4b22      	ldr	r3, [pc, #136]	; (800bfd0 <UART_SetConfig+0x928>)
 800bf48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf4a:	e00c      	b.n	800bf66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bf4c:	4b21      	ldr	r3, [pc, #132]	; (800bfd4 <UART_SetConfig+0x92c>)
 800bf4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf50:	e009      	b.n	800bf66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf58:	e005      	b.n	800bf66 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bf5e:	2301      	movs	r3, #1
 800bf60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bf64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bf66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	f000 80e7 	beq.w	800c13c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf72:	4a19      	ldr	r2, [pc, #100]	; (800bfd8 <UART_SetConfig+0x930>)
 800bf74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf78:	461a      	mov	r2, r3
 800bf7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf7c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf80:	005a      	lsls	r2, r3, #1
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	085b      	lsrs	r3, r3, #1
 800bf88:	441a      	add	r2, r3
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf92:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf96:	2b0f      	cmp	r3, #15
 800bf98:	d916      	bls.n	800bfc8 <UART_SetConfig+0x920>
 800bf9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfa0:	d212      	bcs.n	800bfc8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bfa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa4:	b29b      	uxth	r3, r3
 800bfa6:	f023 030f 	bic.w	r3, r3, #15
 800bfaa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bfac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfae:	085b      	lsrs	r3, r3, #1
 800bfb0:	b29b      	uxth	r3, r3
 800bfb2:	f003 0307 	and.w	r3, r3, #7
 800bfb6:	b29a      	uxth	r2, r3
 800bfb8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bfc4:	60da      	str	r2, [r3, #12]
 800bfc6:	e0b9      	b.n	800c13c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bfc8:	2301      	movs	r3, #1
 800bfca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bfce:	e0b5      	b.n	800c13c <UART_SetConfig+0xa94>
 800bfd0:	03d09000 	.word	0x03d09000
 800bfd4:	003d0900 	.word	0x003d0900
 800bfd8:	08020600 	.word	0x08020600
 800bfdc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bfe0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bfe4:	2b20      	cmp	r3, #32
 800bfe6:	dc49      	bgt.n	800c07c <UART_SetConfig+0x9d4>
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	db7c      	blt.n	800c0e6 <UART_SetConfig+0xa3e>
 800bfec:	2b20      	cmp	r3, #32
 800bfee:	d87a      	bhi.n	800c0e6 <UART_SetConfig+0xa3e>
 800bff0:	a201      	add	r2, pc, #4	; (adr r2, 800bff8 <UART_SetConfig+0x950>)
 800bff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff6:	bf00      	nop
 800bff8:	0800c083 	.word	0x0800c083
 800bffc:	0800c08b 	.word	0x0800c08b
 800c000:	0800c0e7 	.word	0x0800c0e7
 800c004:	0800c0e7 	.word	0x0800c0e7
 800c008:	0800c093 	.word	0x0800c093
 800c00c:	0800c0e7 	.word	0x0800c0e7
 800c010:	0800c0e7 	.word	0x0800c0e7
 800c014:	0800c0e7 	.word	0x0800c0e7
 800c018:	0800c0a3 	.word	0x0800c0a3
 800c01c:	0800c0e7 	.word	0x0800c0e7
 800c020:	0800c0e7 	.word	0x0800c0e7
 800c024:	0800c0e7 	.word	0x0800c0e7
 800c028:	0800c0e7 	.word	0x0800c0e7
 800c02c:	0800c0e7 	.word	0x0800c0e7
 800c030:	0800c0e7 	.word	0x0800c0e7
 800c034:	0800c0e7 	.word	0x0800c0e7
 800c038:	0800c0b3 	.word	0x0800c0b3
 800c03c:	0800c0e7 	.word	0x0800c0e7
 800c040:	0800c0e7 	.word	0x0800c0e7
 800c044:	0800c0e7 	.word	0x0800c0e7
 800c048:	0800c0e7 	.word	0x0800c0e7
 800c04c:	0800c0e7 	.word	0x0800c0e7
 800c050:	0800c0e7 	.word	0x0800c0e7
 800c054:	0800c0e7 	.word	0x0800c0e7
 800c058:	0800c0e7 	.word	0x0800c0e7
 800c05c:	0800c0e7 	.word	0x0800c0e7
 800c060:	0800c0e7 	.word	0x0800c0e7
 800c064:	0800c0e7 	.word	0x0800c0e7
 800c068:	0800c0e7 	.word	0x0800c0e7
 800c06c:	0800c0e7 	.word	0x0800c0e7
 800c070:	0800c0e7 	.word	0x0800c0e7
 800c074:	0800c0e7 	.word	0x0800c0e7
 800c078:	0800c0d9 	.word	0x0800c0d9
 800c07c:	2b40      	cmp	r3, #64	; 0x40
 800c07e:	d02e      	beq.n	800c0de <UART_SetConfig+0xa36>
 800c080:	e031      	b.n	800c0e6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c082:	f7f9 ffb1 	bl	8005fe8 <HAL_RCC_GetPCLK1Freq>
 800c086:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c088:	e033      	b.n	800c0f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c08a:	f7f9 ffc3 	bl	8006014 <HAL_RCC_GetPCLK2Freq>
 800c08e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c090:	e02f      	b.n	800c0f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c096:	4618      	mov	r0, r3
 800c098:	f7fb fa34 	bl	8007504 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0a0:	e027      	b.n	800c0f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0a2:	f107 0318 	add.w	r3, r7, #24
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7fb fb80 	bl	80077ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c0ac:	69fb      	ldr	r3, [r7, #28]
 800c0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0b0:	e01f      	b.n	800c0f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0b2:	4b2d      	ldr	r3, [pc, #180]	; (800c168 <UART_SetConfig+0xac0>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f003 0320 	and.w	r3, r3, #32
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d009      	beq.n	800c0d2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c0be:	4b2a      	ldr	r3, [pc, #168]	; (800c168 <UART_SetConfig+0xac0>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	08db      	lsrs	r3, r3, #3
 800c0c4:	f003 0303 	and.w	r3, r3, #3
 800c0c8:	4a28      	ldr	r2, [pc, #160]	; (800c16c <UART_SetConfig+0xac4>)
 800c0ca:	fa22 f303 	lsr.w	r3, r2, r3
 800c0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c0d0:	e00f      	b.n	800c0f2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c0d2:	4b26      	ldr	r3, [pc, #152]	; (800c16c <UART_SetConfig+0xac4>)
 800c0d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0d6:	e00c      	b.n	800c0f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c0d8:	4b25      	ldr	r3, [pc, #148]	; (800c170 <UART_SetConfig+0xac8>)
 800c0da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0dc:	e009      	b.n	800c0f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0e4:	e005      	b.n	800c0f2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c0f0:	bf00      	nop
    }

    if (pclk != 0U)
 800c0f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d021      	beq.n	800c13c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0fc:	4a1d      	ldr	r2, [pc, #116]	; (800c174 <UART_SetConfig+0xacc>)
 800c0fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c102:	461a      	mov	r2, r3
 800c104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c106:	fbb3 f2f2 	udiv	r2, r3, r2
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	085b      	lsrs	r3, r3, #1
 800c110:	441a      	add	r2, r3
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	fbb2 f3f3 	udiv	r3, r2, r3
 800c11a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11e:	2b0f      	cmp	r3, #15
 800c120:	d909      	bls.n	800c136 <UART_SetConfig+0xa8e>
 800c122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c128:	d205      	bcs.n	800c136 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12c:	b29a      	uxth	r2, r3
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	60da      	str	r2, [r3, #12]
 800c134:	e002      	b.n	800c13c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c136:	2301      	movs	r3, #1
 800c138:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	2201      	movs	r2, #1
 800c140:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	2201      	movs	r2, #1
 800c148:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	2200      	movs	r2, #0
 800c150:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	2200      	movs	r2, #0
 800c156:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c158:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3748      	adds	r7, #72	; 0x48
 800c160:	46bd      	mov	sp, r7
 800c162:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c166:	bf00      	nop
 800c168:	58024400 	.word	0x58024400
 800c16c:	03d09000 	.word	0x03d09000
 800c170:	003d0900 	.word	0x003d0900
 800c174:	08020600 	.word	0x08020600

0800c178 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c178:	b480      	push	{r7}
 800c17a:	b083      	sub	sp, #12
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c184:	f003 0301 	and.w	r3, r3, #1
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d00a      	beq.n	800c1a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	685b      	ldr	r3, [r3, #4]
 800c192:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	430a      	orrs	r2, r1
 800c1a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1a6:	f003 0302 	and.w	r3, r3, #2
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d00a      	beq.n	800c1c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	430a      	orrs	r2, r1
 800c1c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1c8:	f003 0304 	and.w	r3, r3, #4
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d00a      	beq.n	800c1e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	430a      	orrs	r2, r1
 800c1e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ea:	f003 0308 	and.w	r3, r3, #8
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d00a      	beq.n	800c208 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	430a      	orrs	r2, r1
 800c206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c20c:	f003 0310 	and.w	r3, r3, #16
 800c210:	2b00      	cmp	r3, #0
 800c212:	d00a      	beq.n	800c22a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	689b      	ldr	r3, [r3, #8]
 800c21a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	430a      	orrs	r2, r1
 800c228:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c22e:	f003 0320 	and.w	r3, r3, #32
 800c232:	2b00      	cmp	r3, #0
 800c234:	d00a      	beq.n	800c24c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	430a      	orrs	r2, r1
 800c24a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c254:	2b00      	cmp	r3, #0
 800c256:	d01a      	beq.n	800c28e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	430a      	orrs	r2, r1
 800c26c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c276:	d10a      	bne.n	800c28e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	430a      	orrs	r2, r1
 800c28c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00a      	beq.n	800c2b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	430a      	orrs	r2, r1
 800c2ae:	605a      	str	r2, [r3, #4]
  }
}
 800c2b0:	bf00      	nop
 800c2b2:	370c      	adds	r7, #12
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr

0800c2bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b098      	sub	sp, #96	; 0x60
 800c2c0:	af02      	add	r7, sp, #8
 800c2c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c2cc:	f7f5 fcc4 	bl	8001c58 <HAL_GetTick>
 800c2d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f003 0308 	and.w	r3, r3, #8
 800c2dc:	2b08      	cmp	r3, #8
 800c2de:	d12f      	bne.n	800c340 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c2e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c2e4:	9300      	str	r3, [sp, #0]
 800c2e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 f88e 	bl	800c410 <UART_WaitOnFlagUntilTimeout>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d022      	beq.n	800c340 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c302:	e853 3f00 	ldrex	r3, [r3]
 800c306:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c30a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c30e:	653b      	str	r3, [r7, #80]	; 0x50
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	461a      	mov	r2, r3
 800c316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c318:	647b      	str	r3, [r7, #68]	; 0x44
 800c31a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c31c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c31e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c320:	e841 2300 	strex	r3, r2, [r1]
 800c324:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d1e6      	bne.n	800c2fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2220      	movs	r2, #32
 800c330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2200      	movs	r2, #0
 800c338:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c33c:	2303      	movs	r3, #3
 800c33e:	e063      	b.n	800c408 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f003 0304 	and.w	r3, r3, #4
 800c34a:	2b04      	cmp	r3, #4
 800c34c:	d149      	bne.n	800c3e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c34e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c352:	9300      	str	r3, [sp, #0]
 800c354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c356:	2200      	movs	r2, #0
 800c358:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f000 f857 	bl	800c410 <UART_WaitOnFlagUntilTimeout>
 800c362:	4603      	mov	r3, r0
 800c364:	2b00      	cmp	r3, #0
 800c366:	d03c      	beq.n	800c3e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c370:	e853 3f00 	ldrex	r3, [r3]
 800c374:	623b      	str	r3, [r7, #32]
   return(result);
 800c376:	6a3b      	ldr	r3, [r7, #32]
 800c378:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c37c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	461a      	mov	r2, r3
 800c384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c386:	633b      	str	r3, [r7, #48]	; 0x30
 800c388:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c38a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c38c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c38e:	e841 2300 	strex	r3, r2, [r1]
 800c392:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c396:	2b00      	cmp	r3, #0
 800c398:	d1e6      	bne.n	800c368 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	3308      	adds	r3, #8
 800c3a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	e853 3f00 	ldrex	r3, [r3]
 800c3a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f023 0301 	bic.w	r3, r3, #1
 800c3b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	3308      	adds	r3, #8
 800c3b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c3ba:	61fa      	str	r2, [r7, #28]
 800c3bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3be:	69b9      	ldr	r1, [r7, #24]
 800c3c0:	69fa      	ldr	r2, [r7, #28]
 800c3c2:	e841 2300 	strex	r3, r2, [r1]
 800c3c6:	617b      	str	r3, [r7, #20]
   return(result);
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d1e5      	bne.n	800c39a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2220      	movs	r2, #32
 800c3d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c3de:	2303      	movs	r3, #3
 800c3e0:	e012      	b.n	800c408 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2220      	movs	r2, #32
 800c3e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2220      	movs	r2, #32
 800c3ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2200      	movs	r2, #0
 800c402:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c406:	2300      	movs	r3, #0
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3758      	adds	r7, #88	; 0x58
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	603b      	str	r3, [r7, #0]
 800c41c:	4613      	mov	r3, r2
 800c41e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c420:	e049      	b.n	800c4b6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c422:	69bb      	ldr	r3, [r7, #24]
 800c424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c428:	d045      	beq.n	800c4b6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c42a:	f7f5 fc15 	bl	8001c58 <HAL_GetTick>
 800c42e:	4602      	mov	r2, r0
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	1ad3      	subs	r3, r2, r3
 800c434:	69ba      	ldr	r2, [r7, #24]
 800c436:	429a      	cmp	r2, r3
 800c438:	d302      	bcc.n	800c440 <UART_WaitOnFlagUntilTimeout+0x30>
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d101      	bne.n	800c444 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c440:	2303      	movs	r3, #3
 800c442:	e048      	b.n	800c4d6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f003 0304 	and.w	r3, r3, #4
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d031      	beq.n	800c4b6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	69db      	ldr	r3, [r3, #28]
 800c458:	f003 0308 	and.w	r3, r3, #8
 800c45c:	2b08      	cmp	r3, #8
 800c45e:	d110      	bne.n	800c482 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	2208      	movs	r2, #8
 800c466:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800c468:	68f8      	ldr	r0, [r7, #12]
 800c46a:	f000 fa43 	bl	800c8f4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	2208      	movs	r2, #8
 800c472:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	2200      	movs	r2, #0
 800c47a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800c47e:	2301      	movs	r3, #1
 800c480:	e029      	b.n	800c4d6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	69db      	ldr	r3, [r3, #28]
 800c488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c48c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c490:	d111      	bne.n	800c4b6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c49a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c49c:	68f8      	ldr	r0, [r7, #12]
 800c49e:	f000 fa29 	bl	800c8f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2220      	movs	r2, #32
 800c4a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c4b2:	2303      	movs	r3, #3
 800c4b4:	e00f      	b.n	800c4d6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	69da      	ldr	r2, [r3, #28]
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	4013      	ands	r3, r2
 800c4c0:	68ba      	ldr	r2, [r7, #8]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	bf0c      	ite	eq
 800c4c6:	2301      	moveq	r3, #1
 800c4c8:	2300      	movne	r3, #0
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	461a      	mov	r2, r3
 800c4ce:	79fb      	ldrb	r3, [r7, #7]
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d0a6      	beq.n	800c422 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c4d4:	2300      	movs	r3, #0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3710      	adds	r7, #16
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
	...

0800c4e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b0a3      	sub	sp, #140	; 0x8c
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	60f8      	str	r0, [r7, #12]
 800c4e8:	60b9      	str	r1, [r7, #8]
 800c4ea:	4613      	mov	r3, r2
 800c4ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	68ba      	ldr	r2, [r7, #8]
 800c4f2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	88fa      	ldrh	r2, [r7, #6]
 800c4f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	88fa      	ldrh	r2, [r7, #6]
 800c500:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	2200      	movs	r2, #0
 800c508:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	689b      	ldr	r3, [r3, #8]
 800c50e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c512:	d10e      	bne.n	800c532 <UART_Start_Receive_IT+0x52>
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	691b      	ldr	r3, [r3, #16]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d105      	bne.n	800c528 <UART_Start_Receive_IT+0x48>
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c522:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c526:	e02d      	b.n	800c584 <UART_Start_Receive_IT+0xa4>
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	22ff      	movs	r2, #255	; 0xff
 800c52c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c530:	e028      	b.n	800c584 <UART_Start_Receive_IT+0xa4>
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	689b      	ldr	r3, [r3, #8]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d10d      	bne.n	800c556 <UART_Start_Receive_IT+0x76>
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	691b      	ldr	r3, [r3, #16]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d104      	bne.n	800c54c <UART_Start_Receive_IT+0x6c>
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	22ff      	movs	r2, #255	; 0xff
 800c546:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c54a:	e01b      	b.n	800c584 <UART_Start_Receive_IT+0xa4>
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	227f      	movs	r2, #127	; 0x7f
 800c550:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c554:	e016      	b.n	800c584 <UART_Start_Receive_IT+0xa4>
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	689b      	ldr	r3, [r3, #8]
 800c55a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c55e:	d10d      	bne.n	800c57c <UART_Start_Receive_IT+0x9c>
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	691b      	ldr	r3, [r3, #16]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d104      	bne.n	800c572 <UART_Start_Receive_IT+0x92>
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	227f      	movs	r2, #127	; 0x7f
 800c56c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c570:	e008      	b.n	800c584 <UART_Start_Receive_IT+0xa4>
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	223f      	movs	r2, #63	; 0x3f
 800c576:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c57a:	e003      	b.n	800c584 <UART_Start_Receive_IT+0xa4>
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2200      	movs	r2, #0
 800c580:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2200      	movs	r2, #0
 800c588:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2222      	movs	r2, #34	; 0x22
 800c590:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	3308      	adds	r3, #8
 800c59a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c59c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c59e:	e853 3f00 	ldrex	r3, [r3]
 800c5a2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c5a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c5a6:	f043 0301 	orr.w	r3, r3, #1
 800c5aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	3308      	adds	r3, #8
 800c5b4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c5b8:	673a      	str	r2, [r7, #112]	; 0x70
 800c5ba:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5bc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c5be:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c5c0:	e841 2300 	strex	r3, r2, [r1]
 800c5c4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800c5c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d1e3      	bne.n	800c594 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5d4:	d14f      	bne.n	800c676 <UART_Start_Receive_IT+0x196>
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c5dc:	88fa      	ldrh	r2, [r7, #6]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d349      	bcc.n	800c676 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	689b      	ldr	r3, [r3, #8]
 800c5e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5ea:	d107      	bne.n	800c5fc <UART_Start_Receive_IT+0x11c>
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	691b      	ldr	r3, [r3, #16]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d103      	bne.n	800c5fc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	4a47      	ldr	r2, [pc, #284]	; (800c714 <UART_Start_Receive_IT+0x234>)
 800c5f8:	675a      	str	r2, [r3, #116]	; 0x74
 800c5fa:	e002      	b.n	800c602 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	4a46      	ldr	r2, [pc, #280]	; (800c718 <UART_Start_Receive_IT+0x238>)
 800c600:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	691b      	ldr	r3, [r3, #16]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d01a      	beq.n	800c640 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c612:	e853 3f00 	ldrex	r3, [r3]
 800c616:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c61a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c61e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	461a      	mov	r2, r3
 800c628:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c62c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c62e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c630:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c632:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c634:	e841 2300 	strex	r3, r2, [r1]
 800c638:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c63a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d1e4      	bne.n	800c60a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	3308      	adds	r3, #8
 800c646:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c64a:	e853 3f00 	ldrex	r3, [r3]
 800c64e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c656:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	3308      	adds	r3, #8
 800c65e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c660:	64ba      	str	r2, [r7, #72]	; 0x48
 800c662:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c664:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c666:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c668:	e841 2300 	strex	r3, r2, [r1]
 800c66c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c66e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c670:	2b00      	cmp	r3, #0
 800c672:	d1e5      	bne.n	800c640 <UART_Start_Receive_IT+0x160>
 800c674:	e046      	b.n	800c704 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	689b      	ldr	r3, [r3, #8]
 800c67a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c67e:	d107      	bne.n	800c690 <UART_Start_Receive_IT+0x1b0>
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	691b      	ldr	r3, [r3, #16]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d103      	bne.n	800c690 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	4a24      	ldr	r2, [pc, #144]	; (800c71c <UART_Start_Receive_IT+0x23c>)
 800c68c:	675a      	str	r2, [r3, #116]	; 0x74
 800c68e:	e002      	b.n	800c696 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	4a23      	ldr	r2, [pc, #140]	; (800c720 <UART_Start_Receive_IT+0x240>)
 800c694:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	691b      	ldr	r3, [r3, #16]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d019      	beq.n	800c6d2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a6:	e853 3f00 	ldrex	r3, [r3]
 800c6aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ae:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c6b2:	677b      	str	r3, [r7, #116]	; 0x74
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c6bc:	637b      	str	r3, [r7, #52]	; 0x34
 800c6be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c6c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6c4:	e841 2300 	strex	r3, r2, [r1]
 800c6c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d1e6      	bne.n	800c69e <UART_Start_Receive_IT+0x1be>
 800c6d0:	e018      	b.n	800c704 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	e853 3f00 	ldrex	r3, [r3]
 800c6de:	613b      	str	r3, [r7, #16]
   return(result);
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	f043 0320 	orr.w	r3, r3, #32
 800c6e6:	67bb      	str	r3, [r7, #120]	; 0x78
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c6f0:	623b      	str	r3, [r7, #32]
 800c6f2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6f4:	69f9      	ldr	r1, [r7, #28]
 800c6f6:	6a3a      	ldr	r2, [r7, #32]
 800c6f8:	e841 2300 	strex	r3, r2, [r1]
 800c6fc:	61bb      	str	r3, [r7, #24]
   return(result);
 800c6fe:	69bb      	ldr	r3, [r7, #24]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d1e6      	bne.n	800c6d2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800c704:	2300      	movs	r3, #0
}
 800c706:	4618      	mov	r0, r3
 800c708:	378c      	adds	r7, #140	; 0x8c
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr
 800c712:	bf00      	nop
 800c714:	0800d77d 	.word	0x0800d77d
 800c718:	0800d411 	.word	0x0800d411
 800c71c:	0800d251 	.word	0x0800d251
 800c720:	0800d091 	.word	0x0800d091

0800c724 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b096      	sub	sp, #88	; 0x58
 800c728:	af00      	add	r7, sp, #0
 800c72a:	60f8      	str	r0, [r7, #12]
 800c72c:	60b9      	str	r1, [r7, #8]
 800c72e:	4613      	mov	r3, r2
 800c730:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	68ba      	ldr	r2, [r7, #8]
 800c736:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	88fa      	ldrh	r2, [r7, #6]
 800c73c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2200      	movs	r2, #0
 800c744:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2222      	movs	r2, #34	; 0x22
 800c74c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c756:	2b00      	cmp	r3, #0
 800c758:	d02d      	beq.n	800c7b6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c760:	4a40      	ldr	r2, [pc, #256]	; (800c864 <UART_Start_Receive_DMA+0x140>)
 800c762:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c76a:	4a3f      	ldr	r2, [pc, #252]	; (800c868 <UART_Start_Receive_DMA+0x144>)
 800c76c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c774:	4a3d      	ldr	r2, [pc, #244]	; (800c86c <UART_Start_Receive_DMA+0x148>)
 800c776:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c77e:	2200      	movs	r2, #0
 800c780:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	3324      	adds	r3, #36	; 0x24
 800c78e:	4619      	mov	r1, r3
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c794:	461a      	mov	r2, r3
 800c796:	88fb      	ldrh	r3, [r7, #6]
 800c798:	f7f5 fed6 	bl	8002548 <HAL_DMA_Start_IT>
 800c79c:	4603      	mov	r3, r0
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d009      	beq.n	800c7b6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2210      	movs	r2, #16
 800c7a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	2220      	movs	r2, #32
 800c7ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	e051      	b.n	800c85a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	691b      	ldr	r3, [r3, #16]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d018      	beq.n	800c7f0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7c6:	e853 3f00 	ldrex	r3, [r3]
 800c7ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7d2:	657b      	str	r3, [r7, #84]	; 0x54
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	461a      	mov	r2, r3
 800c7da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800c7de:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c7e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c7e4:	e841 2300 	strex	r3, r2, [r1]
 800c7e8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c7ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d1e6      	bne.n	800c7be <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	3308      	adds	r3, #8
 800c7f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fa:	e853 3f00 	ldrex	r3, [r3]
 800c7fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c802:	f043 0301 	orr.w	r3, r3, #1
 800c806:	653b      	str	r3, [r7, #80]	; 0x50
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	3308      	adds	r3, #8
 800c80e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c810:	637a      	str	r2, [r7, #52]	; 0x34
 800c812:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c814:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c818:	e841 2300 	strex	r3, r2, [r1]
 800c81c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c820:	2b00      	cmp	r3, #0
 800c822:	d1e5      	bne.n	800c7f0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	3308      	adds	r3, #8
 800c82a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	e853 3f00 	ldrex	r3, [r3]
 800c832:	613b      	str	r3, [r7, #16]
   return(result);
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c83a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	3308      	adds	r3, #8
 800c842:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c844:	623a      	str	r2, [r7, #32]
 800c846:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c848:	69f9      	ldr	r1, [r7, #28]
 800c84a:	6a3a      	ldr	r2, [r7, #32]
 800c84c:	e841 2300 	strex	r3, r2, [r1]
 800c850:	61bb      	str	r3, [r7, #24]
   return(result);
 800c852:	69bb      	ldr	r3, [r7, #24]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d1e5      	bne.n	800c824 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c858:	2300      	movs	r3, #0
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3758      	adds	r7, #88	; 0x58
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
 800c862:	bf00      	nop
 800c864:	0800ca7b 	.word	0x0800ca7b
 800c868:	0800cbab 	.word	0x0800cbab
 800c86c:	0800cbf1 	.word	0x0800cbf1

0800c870 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c870:	b480      	push	{r7}
 800c872:	b08f      	sub	sp, #60	; 0x3c
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c87e:	6a3b      	ldr	r3, [r7, #32]
 800c880:	e853 3f00 	ldrex	r3, [r3]
 800c884:	61fb      	str	r3, [r7, #28]
   return(result);
 800c886:	69fb      	ldr	r3, [r7, #28]
 800c888:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c88c:	637b      	str	r3, [r7, #52]	; 0x34
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	461a      	mov	r2, r3
 800c894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c896:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c898:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c89a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c89c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c89e:	e841 2300 	strex	r3, r2, [r1]
 800c8a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d1e6      	bne.n	800c878 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	3308      	adds	r3, #8
 800c8b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	e853 3f00 	ldrex	r3, [r3]
 800c8b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c8c0:	633b      	str	r3, [r7, #48]	; 0x30
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	3308      	adds	r3, #8
 800c8c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8ca:	61ba      	str	r2, [r7, #24]
 800c8cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ce:	6979      	ldr	r1, [r7, #20]
 800c8d0:	69ba      	ldr	r2, [r7, #24]
 800c8d2:	e841 2300 	strex	r3, r2, [r1]
 800c8d6:	613b      	str	r3, [r7, #16]
   return(result);
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d1e5      	bne.n	800c8aa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2220      	movs	r2, #32
 800c8e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800c8e6:	bf00      	nop
 800c8e8:	373c      	adds	r7, #60	; 0x3c
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f0:	4770      	bx	lr
	...

0800c8f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b095      	sub	sp, #84	; 0x54
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c904:	e853 3f00 	ldrex	r3, [r3]
 800c908:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c90c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c910:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	461a      	mov	r2, r3
 800c918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c91a:	643b      	str	r3, [r7, #64]	; 0x40
 800c91c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c91e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c920:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c922:	e841 2300 	strex	r3, r2, [r1]
 800c926:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d1e6      	bne.n	800c8fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	3308      	adds	r3, #8
 800c934:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c936:	6a3b      	ldr	r3, [r7, #32]
 800c938:	e853 3f00 	ldrex	r3, [r3]
 800c93c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c93e:	69fa      	ldr	r2, [r7, #28]
 800c940:	4b1e      	ldr	r3, [pc, #120]	; (800c9bc <UART_EndRxTransfer+0xc8>)
 800c942:	4013      	ands	r3, r2
 800c944:	64bb      	str	r3, [r7, #72]	; 0x48
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	3308      	adds	r3, #8
 800c94c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c94e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c950:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c952:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c956:	e841 2300 	strex	r3, r2, [r1]
 800c95a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d1e5      	bne.n	800c92e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c966:	2b01      	cmp	r3, #1
 800c968:	d118      	bne.n	800c99c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	e853 3f00 	ldrex	r3, [r3]
 800c976:	60bb      	str	r3, [r7, #8]
   return(result);
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	f023 0310 	bic.w	r3, r3, #16
 800c97e:	647b      	str	r3, [r7, #68]	; 0x44
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	461a      	mov	r2, r3
 800c986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c988:	61bb      	str	r3, [r7, #24]
 800c98a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c98c:	6979      	ldr	r1, [r7, #20]
 800c98e:	69ba      	ldr	r2, [r7, #24]
 800c990:	e841 2300 	strex	r3, r2, [r1]
 800c994:	613b      	str	r3, [r7, #16]
   return(result);
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d1e6      	bne.n	800c96a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2220      	movs	r2, #32
 800c9a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c9b0:	bf00      	nop
 800c9b2:	3754      	adds	r7, #84	; 0x54
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr
 800c9bc:	effffffe 	.word	0xeffffffe

0800c9c0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b090      	sub	sp, #64	; 0x40
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9cc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	69db      	ldr	r3, [r3, #28]
 800c9d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9d6:	d037      	beq.n	800ca48 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800c9d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c9e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	3308      	adds	r3, #8
 800c9e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ea:	e853 3f00 	ldrex	r3, [r3]
 800c9ee:	623b      	str	r3, [r7, #32]
   return(result);
 800c9f0:	6a3b      	ldr	r3, [r7, #32]
 800c9f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c9f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c9f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	3308      	adds	r3, #8
 800c9fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca00:	633a      	str	r2, [r7, #48]	; 0x30
 800ca02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca08:	e841 2300 	strex	r3, r2, [r1]
 800ca0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ca0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d1e5      	bne.n	800c9e0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ca14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	e853 3f00 	ldrex	r3, [r3]
 800ca20:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca28:	637b      	str	r3, [r7, #52]	; 0x34
 800ca2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	461a      	mov	r2, r3
 800ca30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca32:	61fb      	str	r3, [r7, #28]
 800ca34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca36:	69b9      	ldr	r1, [r7, #24]
 800ca38:	69fa      	ldr	r2, [r7, #28]
 800ca3a:	e841 2300 	strex	r3, r2, [r1]
 800ca3e:	617b      	str	r3, [r7, #20]
   return(result);
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d1e6      	bne.n	800ca14 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ca46:	e004      	b.n	800ca52 <UART_DMATransmitCplt+0x92>
    huart->TxCpltCallback(huart);
 800ca48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ca4e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ca50:	4798      	blx	r3
}
 800ca52:	bf00      	nop
 800ca54:	3740      	adds	r7, #64	; 0x40
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}

0800ca5a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ca5a:	b580      	push	{r7, lr}
 800ca5c:	b084      	sub	sp, #16
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca66:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca6e:	68f8      	ldr	r0, [r7, #12]
 800ca70:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca72:	bf00      	nop
 800ca74:	3710      	adds	r7, #16
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}

0800ca7a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ca7a:	b580      	push	{r7, lr}
 800ca7c:	b09c      	sub	sp, #112	; 0x70
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca86:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	69db      	ldr	r3, [r3, #28]
 800ca8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca90:	d071      	beq.n	800cb76 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ca92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca94:	2200      	movs	r2, #0
 800ca96:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ca9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caa2:	e853 3f00 	ldrex	r3, [r3]
 800caa6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800caa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800caaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800caae:	66bb      	str	r3, [r7, #104]	; 0x68
 800cab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	461a      	mov	r2, r3
 800cab6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cab8:	65bb      	str	r3, [r7, #88]	; 0x58
 800caba:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cabc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cabe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cac0:	e841 2300 	strex	r3, r2, [r1]
 800cac4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d1e6      	bne.n	800ca9a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cacc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	3308      	adds	r3, #8
 800cad2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad6:	e853 3f00 	ldrex	r3, [r3]
 800cada:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cadc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cade:	f023 0301 	bic.w	r3, r3, #1
 800cae2:	667b      	str	r3, [r7, #100]	; 0x64
 800cae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	3308      	adds	r3, #8
 800caea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800caec:	647a      	str	r2, [r7, #68]	; 0x44
 800caee:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caf0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800caf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800caf4:	e841 2300 	strex	r3, r2, [r1]
 800caf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cafa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d1e5      	bne.n	800cacc <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	3308      	adds	r3, #8
 800cb06:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0a:	e853 3f00 	ldrex	r3, [r3]
 800cb0e:	623b      	str	r3, [r7, #32]
   return(result);
 800cb10:	6a3b      	ldr	r3, [r7, #32]
 800cb12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb16:	663b      	str	r3, [r7, #96]	; 0x60
 800cb18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	3308      	adds	r3, #8
 800cb1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cb20:	633a      	str	r2, [r7, #48]	; 0x30
 800cb22:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb28:	e841 2300 	strex	r3, r2, [r1]
 800cb2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1e5      	bne.n	800cb00 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cb34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb36:	2220      	movs	r2, #32
 800cb38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	d118      	bne.n	800cb76 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	e853 3f00 	ldrex	r3, [r3]
 800cb50:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	f023 0310 	bic.w	r3, r3, #16
 800cb58:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cb5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	461a      	mov	r2, r3
 800cb60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb62:	61fb      	str	r3, [r7, #28]
 800cb64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb66:	69b9      	ldr	r1, [r7, #24]
 800cb68:	69fa      	ldr	r2, [r7, #28]
 800cb6a:	e841 2300 	strex	r3, r2, [r1]
 800cb6e:	617b      	str	r3, [r7, #20]
   return(result);
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d1e6      	bne.n	800cb44 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb78:	2200      	movs	r2, #0
 800cb7a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	d109      	bne.n	800cb98 <UART_DMAReceiveCplt+0x11e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800cb84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb86:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800cb8a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cb8c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800cb90:	4611      	mov	r1, r2
 800cb92:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cb94:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cb96:	e004      	b.n	800cba2 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800cb98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cb9e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cba0:	4798      	blx	r3
}
 800cba2:	bf00      	nop
 800cba4:	3770      	adds	r7, #112	; 0x70
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}

0800cbaa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cbaa:	b580      	push	{r7, lr}
 800cbac:	b084      	sub	sp, #16
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbb6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2201      	movs	r2, #1
 800cbbc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbc2:	2b01      	cmp	r3, #1
 800cbc4:	d10b      	bne.n	800cbde <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800cbd2:	0852      	lsrs	r2, r2, #1
 800cbd4:	b292      	uxth	r2, r2
 800cbd6:	4611      	mov	r1, r2
 800cbd8:	68f8      	ldr	r0, [r7, #12]
 800cbda:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cbdc:	e004      	b.n	800cbe8 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cbe4:	68f8      	ldr	r0, [r7, #12]
 800cbe6:	4798      	blx	r3
}
 800cbe8:	bf00      	nop
 800cbea:	3710      	adds	r7, #16
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b086      	sub	sp, #24
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbfc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc04:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc0c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	689b      	ldr	r3, [r3, #8]
 800cc14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc18:	2b80      	cmp	r3, #128	; 0x80
 800cc1a:	d109      	bne.n	800cc30 <UART_DMAError+0x40>
 800cc1c:	693b      	ldr	r3, [r7, #16]
 800cc1e:	2b21      	cmp	r3, #33	; 0x21
 800cc20:	d106      	bne.n	800cc30 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	2200      	movs	r2, #0
 800cc26:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800cc2a:	6978      	ldr	r0, [r7, #20]
 800cc2c:	f7ff fe20 	bl	800c870 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	689b      	ldr	r3, [r3, #8]
 800cc36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc3a:	2b40      	cmp	r3, #64	; 0x40
 800cc3c:	d109      	bne.n	800cc52 <UART_DMAError+0x62>
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	2b22      	cmp	r3, #34	; 0x22
 800cc42:	d106      	bne.n	800cc52 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	2200      	movs	r2, #0
 800cc48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800cc4c:	6978      	ldr	r0, [r7, #20]
 800cc4e:	f7ff fe51 	bl	800c8f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc58:	f043 0210 	orr.w	r2, r3, #16
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cc68:	6978      	ldr	r0, [r7, #20]
 800cc6a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc6c:	bf00      	nop
 800cc6e:	3718      	adds	r7, #24
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	2200      	movs	r2, #0
 800cc86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cc98:	68f8      	ldr	r0, [r7, #12]
 800cc9a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc9c:	bf00      	nop
 800cc9e:	3710      	adds	r7, #16
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccb0:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	220f      	movs	r2, #15
 800ccc0:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	699a      	ldr	r2, [r3, #24]
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	f042 0208 	orr.w	r2, r2, #8
 800ccd0:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2220      	movs	r2, #32
 800ccd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Call user Abort complete callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cce6:	68f8      	ldr	r0, [r7, #12]
 800cce8:	4798      	blx	r3
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ccea:	bf00      	nop
 800ccec:	3710      	adds	r7, #16
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}

0800ccf2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ccf2:	b480      	push	{r7}
 800ccf4:	b08f      	sub	sp, #60	; 0x3c
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd00:	2b21      	cmp	r3, #33	; 0x21
 800cd02:	d14c      	bne.n	800cd9e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d132      	bne.n	800cd76 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd16:	6a3b      	ldr	r3, [r7, #32]
 800cd18:	e853 3f00 	ldrex	r3, [r3]
 800cd1c:	61fb      	str	r3, [r7, #28]
   return(result);
 800cd1e:	69fb      	ldr	r3, [r7, #28]
 800cd20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd24:	637b      	str	r3, [r7, #52]	; 0x34
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd30:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd36:	e841 2300 	strex	r3, r2, [r1]
 800cd3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d1e6      	bne.n	800cd10 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	e853 3f00 	ldrex	r3, [r3]
 800cd4e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd56:	633b      	str	r3, [r7, #48]	; 0x30
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd60:	61bb      	str	r3, [r7, #24]
 800cd62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd64:	6979      	ldr	r1, [r7, #20]
 800cd66:	69ba      	ldr	r2, [r7, #24]
 800cd68:	e841 2300 	strex	r3, r2, [r1]
 800cd6c:	613b      	str	r3, [r7, #16]
   return(result);
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d1e6      	bne.n	800cd42 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800cd74:	e013      	b.n	800cd9e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd7a:	781a      	ldrb	r2, [r3, #0]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd86:	1c5a      	adds	r2, r3, #1
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cd92:	b29b      	uxth	r3, r3
 800cd94:	3b01      	subs	r3, #1
 800cd96:	b29a      	uxth	r2, r3
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800cd9e:	bf00      	nop
 800cda0:	373c      	adds	r7, #60	; 0x3c
 800cda2:	46bd      	mov	sp, r7
 800cda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda8:	4770      	bx	lr

0800cdaa <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cdaa:	b480      	push	{r7}
 800cdac:	b091      	sub	sp, #68	; 0x44
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdb8:	2b21      	cmp	r3, #33	; 0x21
 800cdba:	d151      	bne.n	800ce60 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d132      	bne.n	800ce2e <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd0:	e853 3f00 	ldrex	r3, [r3]
 800cdd4:	623b      	str	r3, [r7, #32]
   return(result);
 800cdd6:	6a3b      	ldr	r3, [r7, #32]
 800cdd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cddc:	63bb      	str	r3, [r7, #56]	; 0x38
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	461a      	mov	r2, r3
 800cde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde6:	633b      	str	r3, [r7, #48]	; 0x30
 800cde8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cdec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdee:	e841 2300 	strex	r3, r2, [r1]
 800cdf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d1e6      	bne.n	800cdc8 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	e853 3f00 	ldrex	r3, [r3]
 800ce06:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce0e:	637b      	str	r3, [r7, #52]	; 0x34
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	461a      	mov	r2, r3
 800ce16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce18:	61fb      	str	r3, [r7, #28]
 800ce1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce1c:	69b9      	ldr	r1, [r7, #24]
 800ce1e:	69fa      	ldr	r2, [r7, #28]
 800ce20:	e841 2300 	strex	r3, r2, [r1]
 800ce24:	617b      	str	r3, [r7, #20]
   return(result);
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d1e6      	bne.n	800cdfa <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800ce2c:	e018      	b.n	800ce60 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce32:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ce34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce36:	881b      	ldrh	r3, [r3, #0]
 800ce38:	461a      	mov	r2, r3
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ce42:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce48:	1c9a      	adds	r2, r3, #2
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ce54:	b29b      	uxth	r3, r3
 800ce56:	3b01      	subs	r3, #1
 800ce58:	b29a      	uxth	r2, r3
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800ce60:	bf00      	nop
 800ce62:	3744      	adds	r7, #68	; 0x44
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr

0800ce6c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b091      	sub	sp, #68	; 0x44
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce7a:	2b21      	cmp	r3, #33	; 0x21
 800ce7c:	d160      	bne.n	800cf40 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ce84:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ce86:	e057      	b.n	800cf38 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ce8e:	b29b      	uxth	r3, r3
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d133      	bne.n	800cefc <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	3308      	adds	r3, #8
 800ce9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9e:	e853 3f00 	ldrex	r3, [r3]
 800cea2:	623b      	str	r3, [r7, #32]
   return(result);
 800cea4:	6a3b      	ldr	r3, [r7, #32]
 800cea6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ceaa:	63bb      	str	r3, [r7, #56]	; 0x38
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	3308      	adds	r3, #8
 800ceb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ceb4:	633a      	str	r2, [r7, #48]	; 0x30
 800ceb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ceba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cebc:	e841 2300 	strex	r3, r2, [r1]
 800cec0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d1e5      	bne.n	800ce94 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	e853 3f00 	ldrex	r3, [r3]
 800ced4:	60fb      	str	r3, [r7, #12]
   return(result);
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cedc:	637b      	str	r3, [r7, #52]	; 0x34
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	461a      	mov	r2, r3
 800cee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cee6:	61fb      	str	r3, [r7, #28]
 800cee8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceea:	69b9      	ldr	r1, [r7, #24]
 800ceec:	69fa      	ldr	r2, [r7, #28]
 800ceee:	e841 2300 	strex	r3, r2, [r1]
 800cef2:	617b      	str	r3, [r7, #20]
   return(result);
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d1e6      	bne.n	800cec8 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800cefa:	e021      	b.n	800cf40 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	69db      	ldr	r3, [r3, #28]
 800cf02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d013      	beq.n	800cf32 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf0e:	781a      	ldrb	r2, [r3, #0]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf1a:	1c5a      	adds	r2, r3, #1
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cf26:	b29b      	uxth	r3, r3
 800cf28:	3b01      	subs	r3, #1
 800cf2a:	b29a      	uxth	r2, r3
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800cf32:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cf34:	3b01      	subs	r3, #1
 800cf36:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800cf38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d1a4      	bne.n	800ce88 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800cf3e:	e7ff      	b.n	800cf40 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800cf40:	bf00      	nop
 800cf42:	3744      	adds	r7, #68	; 0x44
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr

0800cf4c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b091      	sub	sp, #68	; 0x44
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf5a:	2b21      	cmp	r3, #33	; 0x21
 800cf5c:	d165      	bne.n	800d02a <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cf64:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800cf66:	e05c      	b.n	800d022 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cf6e:	b29b      	uxth	r3, r3
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d133      	bne.n	800cfdc <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	3308      	adds	r3, #8
 800cf7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf7c:	6a3b      	ldr	r3, [r7, #32]
 800cf7e:	e853 3f00 	ldrex	r3, [r3]
 800cf82:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf84:	69fb      	ldr	r3, [r7, #28]
 800cf86:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cf8a:	637b      	str	r3, [r7, #52]	; 0x34
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	3308      	adds	r3, #8
 800cf92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf94:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cf96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf9c:	e841 2300 	strex	r3, r2, [r1]
 800cfa0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d1e5      	bne.n	800cf74 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	e853 3f00 	ldrex	r3, [r3]
 800cfb4:	60bb      	str	r3, [r7, #8]
   return(result);
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfbc:	633b      	str	r3, [r7, #48]	; 0x30
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc6:	61bb      	str	r3, [r7, #24]
 800cfc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfca:	6979      	ldr	r1, [r7, #20]
 800cfcc:	69ba      	ldr	r2, [r7, #24]
 800cfce:	e841 2300 	strex	r3, r2, [r1]
 800cfd2:	613b      	str	r3, [r7, #16]
   return(result);
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d1e6      	bne.n	800cfa8 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800cfda:	e026      	b.n	800d02a <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	69db      	ldr	r3, [r3, #28]
 800cfe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d018      	beq.n	800d01c <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfee:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800cff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff2:	881b      	ldrh	r3, [r3, #0]
 800cff4:	461a      	mov	r2, r3
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cffe:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d004:	1c9a      	adds	r2, r3, #2
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d010:	b29b      	uxth	r3, r3
 800d012:	3b01      	subs	r3, #1
 800d014:	b29a      	uxth	r2, r3
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d01c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d01e:	3b01      	subs	r3, #1
 800d020:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800d022:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d024:	2b00      	cmp	r3, #0
 800d026:	d19f      	bne.n	800cf68 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800d028:	e7ff      	b.n	800d02a <UART_TxISR_16BIT_FIFOEN+0xde>
 800d02a:	bf00      	nop
 800d02c:	3744      	adds	r7, #68	; 0x44
 800d02e:	46bd      	mov	sp, r7
 800d030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d034:	4770      	bx	lr

0800d036 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d036:	b580      	push	{r7, lr}
 800d038:	b088      	sub	sp, #32
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	e853 3f00 	ldrex	r3, [r3]
 800d04a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d052:	61fb      	str	r3, [r7, #28]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	461a      	mov	r2, r3
 800d05a:	69fb      	ldr	r3, [r7, #28]
 800d05c:	61bb      	str	r3, [r7, #24]
 800d05e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d060:	6979      	ldr	r1, [r7, #20]
 800d062:	69ba      	ldr	r2, [r7, #24]
 800d064:	e841 2300 	strex	r3, r2, [r1]
 800d068:	613b      	str	r3, [r7, #16]
   return(result);
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d1e6      	bne.n	800d03e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2220      	movs	r2, #32
 800d074:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2200      	movs	r2, #0
 800d07c:	679a      	str	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d088:	bf00      	nop
 800d08a:	3720      	adds	r7, #32
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}

0800d090 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b09c      	sub	sp, #112	; 0x70
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d09e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0a8:	2b22      	cmp	r3, #34	; 0x22
 800d0aa:	f040 80c2 	bne.w	800d232 <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d0b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d0bc:	b2d9      	uxtb	r1, r3
 800d0be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d0c2:	b2da      	uxtb	r2, r3
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0c8:	400a      	ands	r2, r1
 800d0ca:	b2d2      	uxtb	r2, r2
 800d0cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0d2:	1c5a      	adds	r2, r3, #1
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d0de:	b29b      	uxth	r3, r3
 800d0e0:	3b01      	subs	r3, #1
 800d0e2:	b29a      	uxth	r2, r3
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d0f0:	b29b      	uxth	r3, r3
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	f040 80a5 	bne.w	800d242 <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d100:	e853 3f00 	ldrex	r3, [r3]
 800d104:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d108:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d10c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	461a      	mov	r2, r3
 800d114:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d116:	65bb      	str	r3, [r7, #88]	; 0x58
 800d118:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d11a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d11c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d11e:	e841 2300 	strex	r3, r2, [r1]
 800d122:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d126:	2b00      	cmp	r3, #0
 800d128:	d1e6      	bne.n	800d0f8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	3308      	adds	r3, #8
 800d130:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d134:	e853 3f00 	ldrex	r3, [r3]
 800d138:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d13a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d13c:	f023 0301 	bic.w	r3, r3, #1
 800d140:	667b      	str	r3, [r7, #100]	; 0x64
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	3308      	adds	r3, #8
 800d148:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d14a:	647a      	str	r2, [r7, #68]	; 0x44
 800d14c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d14e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d150:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d152:	e841 2300 	strex	r3, r2, [r1]
 800d156:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d1e5      	bne.n	800d12a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2220      	movs	r2, #32
 800d162:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2200      	movs	r2, #0
 800d16a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2200      	movs	r2, #0
 800d170:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	4a35      	ldr	r2, [pc, #212]	; (800d24c <UART_RxISR_8BIT+0x1bc>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d01f      	beq.n	800d1bc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d186:	2b00      	cmp	r3, #0
 800d188:	d018      	beq.n	800d1bc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d192:	e853 3f00 	ldrex	r3, [r3]
 800d196:	623b      	str	r3, [r7, #32]
   return(result);
 800d198:	6a3b      	ldr	r3, [r7, #32]
 800d19a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d19e:	663b      	str	r3, [r7, #96]	; 0x60
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1a8:	633b      	str	r3, [r7, #48]	; 0x30
 800d1aa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d1ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1b0:	e841 2300 	strex	r3, r2, [r1]
 800d1b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d1e6      	bne.n	800d18a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	d130      	bne.n	800d226 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	e853 3f00 	ldrex	r3, [r3]
 800d1d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f023 0310 	bic.w	r3, r3, #16
 800d1de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1e8:	61fb      	str	r3, [r7, #28]
 800d1ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ec:	69b9      	ldr	r1, [r7, #24]
 800d1ee:	69fa      	ldr	r2, [r7, #28]
 800d1f0:	e841 2300 	strex	r3, r2, [r1]
 800d1f4:	617b      	str	r3, [r7, #20]
   return(result);
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d1e6      	bne.n	800d1ca <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	69db      	ldr	r3, [r3, #28]
 800d202:	f003 0310 	and.w	r3, r3, #16
 800d206:	2b10      	cmp	r3, #16
 800d208:	d103      	bne.n	800d212 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	2210      	movs	r2, #16
 800d210:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d218:	687a      	ldr	r2, [r7, #4]
 800d21a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800d21e:	4611      	mov	r1, r2
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d224:	e00d      	b.n	800d242 <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	4798      	blx	r3
}
 800d230:	e007      	b.n	800d242 <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	699a      	ldr	r2, [r3, #24]
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	f042 0208 	orr.w	r2, r2, #8
 800d240:	619a      	str	r2, [r3, #24]
}
 800d242:	bf00      	nop
 800d244:	3770      	adds	r7, #112	; 0x70
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}
 800d24a:	bf00      	nop
 800d24c:	58000c00 	.word	0x58000c00

0800d250 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b09c      	sub	sp, #112	; 0x70
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d25e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d268:	2b22      	cmp	r3, #34	; 0x22
 800d26a:	f040 80c2 	bne.w	800d3f2 <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d274:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d27c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d27e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800d282:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d286:	4013      	ands	r3, r2
 800d288:	b29a      	uxth	r2, r3
 800d28a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d28c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d292:	1c9a      	adds	r2, r3, #2
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	3b01      	subs	r3, #1
 800d2a2:	b29a      	uxth	r2, r3
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	f040 80a5 	bne.w	800d402 <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2c0:	e853 3f00 	ldrex	r3, [r3]
 800d2c4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d2c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d2cc:	667b      	str	r3, [r7, #100]	; 0x64
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d2d6:	657b      	str	r3, [r7, #84]	; 0x54
 800d2d8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d2dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d2de:	e841 2300 	strex	r3, r2, [r1]
 800d2e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d2e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d1e6      	bne.n	800d2b8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	3308      	adds	r3, #8
 800d2f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2f4:	e853 3f00 	ldrex	r3, [r3]
 800d2f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2fc:	f023 0301 	bic.w	r3, r3, #1
 800d300:	663b      	str	r3, [r7, #96]	; 0x60
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	3308      	adds	r3, #8
 800d308:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d30a:	643a      	str	r2, [r7, #64]	; 0x40
 800d30c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d30e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d310:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d312:	e841 2300 	strex	r3, r2, [r1]
 800d316:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d1e5      	bne.n	800d2ea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2220      	movs	r2, #32
 800d322:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2200      	movs	r2, #0
 800d32a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2200      	movs	r2, #0
 800d330:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	4a35      	ldr	r2, [pc, #212]	; (800d40c <UART_RxISR_16BIT+0x1bc>)
 800d338:	4293      	cmp	r3, r2
 800d33a:	d01f      	beq.n	800d37c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	685b      	ldr	r3, [r3, #4]
 800d342:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d346:	2b00      	cmp	r3, #0
 800d348:	d018      	beq.n	800d37c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d350:	6a3b      	ldr	r3, [r7, #32]
 800d352:	e853 3f00 	ldrex	r3, [r3]
 800d356:	61fb      	str	r3, [r7, #28]
   return(result);
 800d358:	69fb      	ldr	r3, [r7, #28]
 800d35a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d35e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	461a      	mov	r2, r3
 800d366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d36a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d36c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d36e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d370:	e841 2300 	strex	r3, r2, [r1]
 800d374:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d1e6      	bne.n	800d34a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d380:	2b01      	cmp	r3, #1
 800d382:	d130      	bne.n	800d3e6 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2200      	movs	r2, #0
 800d388:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	e853 3f00 	ldrex	r3, [r3]
 800d396:	60bb      	str	r3, [r7, #8]
   return(result);
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	f023 0310 	bic.w	r3, r3, #16
 800d39e:	65bb      	str	r3, [r7, #88]	; 0x58
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d3a8:	61bb      	str	r3, [r7, #24]
 800d3aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3ac:	6979      	ldr	r1, [r7, #20]
 800d3ae:	69ba      	ldr	r2, [r7, #24]
 800d3b0:	e841 2300 	strex	r3, r2, [r1]
 800d3b4:	613b      	str	r3, [r7, #16]
   return(result);
 800d3b6:	693b      	ldr	r3, [r7, #16]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d1e6      	bne.n	800d38a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	69db      	ldr	r3, [r3, #28]
 800d3c2:	f003 0310 	and.w	r3, r3, #16
 800d3c6:	2b10      	cmp	r3, #16
 800d3c8:	d103      	bne.n	800d3d2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	2210      	movs	r2, #16
 800d3d0:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d3d8:	687a      	ldr	r2, [r7, #4]
 800d3da:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800d3de:	4611      	mov	r1, r2
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d3e4:	e00d      	b.n	800d402 <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	4798      	blx	r3
}
 800d3f0:	e007      	b.n	800d402 <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	699a      	ldr	r2, [r3, #24]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f042 0208 	orr.w	r2, r2, #8
 800d400:	619a      	str	r2, [r3, #24]
}
 800d402:	bf00      	nop
 800d404:	3770      	adds	r7, #112	; 0x70
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	58000c00 	.word	0x58000c00

0800d410 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b0ac      	sub	sp, #176	; 0xb0
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d41e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	69db      	ldr	r3, [r3, #28]
 800d428:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	689b      	ldr	r3, [r3, #8]
 800d43c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d446:	2b22      	cmp	r3, #34	; 0x22
 800d448:	f040 8186 	bne.w	800d758 <UART_RxISR_8BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d452:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d456:	e129      	b.n	800d6ac <UART_RxISR_8BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d45e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d462:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800d466:	b2d9      	uxtb	r1, r3
 800d468:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800d46c:	b2da      	uxtb	r2, r3
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d472:	400a      	ands	r2, r1
 800d474:	b2d2      	uxtb	r2, r2
 800d476:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d47c:	1c5a      	adds	r2, r3, #1
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d488:	b29b      	uxth	r3, r3
 800d48a:	3b01      	subs	r3, #1
 800d48c:	b29a      	uxth	r2, r3
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	69db      	ldr	r3, [r3, #28]
 800d49a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d49e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d4a2:	f003 0307 	and.w	r3, r3, #7
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d055      	beq.n	800d556 <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d4aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d4ae:	f003 0301 	and.w	r3, r3, #1
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d011      	beq.n	800d4da <UART_RxISR_8BIT_FIFOEN+0xca>
 800d4b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d4ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d00b      	beq.n	800d4da <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4d0:	f043 0201 	orr.w	r2, r3, #1
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d4da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d4de:	f003 0302 	and.w	r3, r3, #2
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d011      	beq.n	800d50a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d4e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d4ea:	f003 0301 	and.w	r3, r3, #1
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d00b      	beq.n	800d50a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	2202      	movs	r2, #2
 800d4f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d500:	f043 0204 	orr.w	r2, r3, #4
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d50a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d50e:	f003 0304 	and.w	r3, r3, #4
 800d512:	2b00      	cmp	r3, #0
 800d514:	d011      	beq.n	800d53a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d516:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d51a:	f003 0301 	and.w	r3, r3, #1
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d00b      	beq.n	800d53a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	2204      	movs	r2, #4
 800d528:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d530:	f043 0202 	orr.w	r2, r3, #2
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d540:	2b00      	cmp	r3, #0
 800d542:	d008      	beq.n	800d556 <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2200      	movs	r2, #0
 800d552:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d55c:	b29b      	uxth	r3, r3
 800d55e:	2b00      	cmp	r3, #0
 800d560:	f040 80a4 	bne.w	800d6ac <UART_RxISR_8BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d56a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d56c:	e853 3f00 	ldrex	r3, [r3]
 800d570:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800d572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d578:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	461a      	mov	r2, r3
 800d582:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d586:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d588:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d58a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d58c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d58e:	e841 2300 	strex	r3, r2, [r1]
 800d592:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800d594:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d596:	2b00      	cmp	r3, #0
 800d598:	d1e4      	bne.n	800d564 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	3308      	adds	r3, #8
 800d5a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5a4:	e853 3f00 	ldrex	r3, [r3]
 800d5a8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800d5aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d5ac:	4b70      	ldr	r3, [pc, #448]	; (800d770 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800d5ae:	4013      	ands	r3, r2
 800d5b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	3308      	adds	r3, #8
 800d5ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d5be:	66ba      	str	r2, [r7, #104]	; 0x68
 800d5c0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5c2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d5c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d5c6:	e841 2300 	strex	r3, r2, [r1]
 800d5ca:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d5cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d1e3      	bne.n	800d59a <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2220      	movs	r2, #32
 800d5d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	4a62      	ldr	r2, [pc, #392]	; (800d774 <UART_RxISR_8BIT_FIFOEN+0x364>)
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	d021      	beq.n	800d634 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	685b      	ldr	r3, [r3, #4]
 800d5f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d01a      	beq.n	800d634 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d606:	e853 3f00 	ldrex	r3, [r3]
 800d60a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d60c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d60e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	461a      	mov	r2, r3
 800d61c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d620:	657b      	str	r3, [r7, #84]	; 0x54
 800d622:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d624:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d626:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d628:	e841 2300 	strex	r3, r2, [r1]
 800d62c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d62e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d630:	2b00      	cmp	r3, #0
 800d632:	d1e4      	bne.n	800d5fe <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d638:	2b01      	cmp	r3, #1
 800d63a:	d132      	bne.n	800d6a2 <UART_RxISR_8BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2200      	movs	r2, #0
 800d640:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d64a:	e853 3f00 	ldrex	r3, [r3]
 800d64e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d652:	f023 0310 	bic.w	r3, r3, #16
 800d656:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	461a      	mov	r2, r3
 800d660:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d664:	643b      	str	r3, [r7, #64]	; 0x40
 800d666:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d668:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d66a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d66c:	e841 2300 	strex	r3, r2, [r1]
 800d670:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d674:	2b00      	cmp	r3, #0
 800d676:	d1e4      	bne.n	800d642 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	69db      	ldr	r3, [r3, #28]
 800d67e:	f003 0310 	and.w	r3, r3, #16
 800d682:	2b10      	cmp	r3, #16
 800d684:	d103      	bne.n	800d68e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	2210      	movs	r2, #16
 800d68c:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800d69a:	4611      	mov	r1, r2
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	4798      	blx	r3
 800d6a0:	e004      	b.n	800d6ac <UART_RxISR_8BIT_FIFOEN+0x29c>
        else
        {
          /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	4798      	blx	r3
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d6ac:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d006      	beq.n	800d6c2 <UART_RxISR_8BIT_FIFOEN+0x2b2>
 800d6b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d6b8:	f003 0320 	and.w	r3, r3, #32
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	f47f aecb 	bne.w	800d458 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d6c8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d6cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d049      	beq.n	800d768 <UART_RxISR_8BIT_FIFOEN+0x358>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d6da:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	d242      	bcs.n	800d768 <UART_RxISR_8BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	3308      	adds	r3, #8
 800d6e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ea:	6a3b      	ldr	r3, [r7, #32]
 800d6ec:	e853 3f00 	ldrex	r3, [r3]
 800d6f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d6f2:	69fb      	ldr	r3, [r7, #28]
 800d6f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d6f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	3308      	adds	r3, #8
 800d702:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d706:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d708:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d70a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d70c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d70e:	e841 2300 	strex	r3, r2, [r1]
 800d712:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d716:	2b00      	cmp	r3, #0
 800d718:	d1e3      	bne.n	800d6e2 <UART_RxISR_8BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	4a16      	ldr	r2, [pc, #88]	; (800d778 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800d71e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	e853 3f00 	ldrex	r3, [r3]
 800d72c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	f043 0320 	orr.w	r3, r3, #32
 800d734:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	461a      	mov	r2, r3
 800d73e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d742:	61bb      	str	r3, [r7, #24]
 800d744:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d746:	6979      	ldr	r1, [r7, #20]
 800d748:	69ba      	ldr	r2, [r7, #24]
 800d74a:	e841 2300 	strex	r3, r2, [r1]
 800d74e:	613b      	str	r3, [r7, #16]
   return(result);
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d1e4      	bne.n	800d720 <UART_RxISR_8BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d756:	e007      	b.n	800d768 <UART_RxISR_8BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	699a      	ldr	r2, [r3, #24]
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	f042 0208 	orr.w	r2, r2, #8
 800d766:	619a      	str	r2, [r3, #24]
}
 800d768:	bf00      	nop
 800d76a:	37b0      	adds	r7, #176	; 0xb0
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	effffffe 	.word	0xeffffffe
 800d774:	58000c00 	.word	0x58000c00
 800d778:	0800d091 	.word	0x0800d091

0800d77c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b0ae      	sub	sp, #184	; 0xb8
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d78a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	69db      	ldr	r3, [r3, #28]
 800d794:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	689b      	ldr	r3, [r3, #8]
 800d7a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7b2:	2b22      	cmp	r3, #34	; 0x22
 800d7b4:	f040 818a 	bne.w	800dacc <UART_RxISR_16BIT_FIFOEN+0x350>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d7be:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d7c2:	e12d      	b.n	800da20 <UART_RxISR_16BIT_FIFOEN+0x2a4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ca:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800d7d6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800d7da:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800d7de:	4013      	ands	r3, r2
 800d7e0:	b29a      	uxth	r2, r3
 800d7e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d7e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7ec:	1c9a      	adds	r2, r3, #2
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d7f8:	b29b      	uxth	r3, r3
 800d7fa:	3b01      	subs	r3, #1
 800d7fc:	b29a      	uxth	r2, r3
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	69db      	ldr	r3, [r3, #28]
 800d80a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d80e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d812:	f003 0307 	and.w	r3, r3, #7
 800d816:	2b00      	cmp	r3, #0
 800d818:	d055      	beq.n	800d8c6 <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d81a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d81e:	f003 0301 	and.w	r3, r3, #1
 800d822:	2b00      	cmp	r3, #0
 800d824:	d011      	beq.n	800d84a <UART_RxISR_16BIT_FIFOEN+0xce>
 800d826:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d82a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d00b      	beq.n	800d84a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	2201      	movs	r2, #1
 800d838:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d840:	f043 0201 	orr.w	r2, r3, #1
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d84a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d84e:	f003 0302 	and.w	r3, r3, #2
 800d852:	2b00      	cmp	r3, #0
 800d854:	d011      	beq.n	800d87a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d856:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d85a:	f003 0301 	and.w	r3, r3, #1
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d00b      	beq.n	800d87a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	2202      	movs	r2, #2
 800d868:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d870:	f043 0204 	orr.w	r2, r3, #4
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d87a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d87e:	f003 0304 	and.w	r3, r3, #4
 800d882:	2b00      	cmp	r3, #0
 800d884:	d011      	beq.n	800d8aa <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d886:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d88a:	f003 0301 	and.w	r3, r3, #1
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d00b      	beq.n	800d8aa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	2204      	movs	r2, #4
 800d898:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8a0:	f043 0202 	orr.w	r2, r3, #2
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d008      	beq.n	800d8c6 <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d8cc:	b29b      	uxth	r3, r3
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	f040 80a6 	bne.w	800da20 <UART_RxISR_16BIT_FIFOEN+0x2a4>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8dc:	e853 3f00 	ldrex	r3, [r3]
 800d8e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d8e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d8e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d8e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d8f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d8fa:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d8fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d902:	e841 2300 	strex	r3, r2, [r1]
 800d906:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d908:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d1e2      	bne.n	800d8d4 <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	3308      	adds	r3, #8
 800d914:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d916:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d918:	e853 3f00 	ldrex	r3, [r3]
 800d91c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d91e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d920:	4b70      	ldr	r3, [pc, #448]	; (800dae4 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800d922:	4013      	ands	r3, r2
 800d924:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	3308      	adds	r3, #8
 800d92e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d932:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d934:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d936:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d938:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d93a:	e841 2300 	strex	r3, r2, [r1]
 800d93e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d942:	2b00      	cmp	r3, #0
 800d944:	d1e3      	bne.n	800d90e <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2220      	movs	r2, #32
 800d94a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2200      	movs	r2, #0
 800d952:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2200      	movs	r2, #0
 800d958:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	4a62      	ldr	r2, [pc, #392]	; (800dae8 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800d960:	4293      	cmp	r3, r2
 800d962:	d021      	beq.n	800d9a8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	685b      	ldr	r3, [r3, #4]
 800d96a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d01a      	beq.n	800d9a8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d97a:	e853 3f00 	ldrex	r3, [r3]
 800d97e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d982:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d986:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	461a      	mov	r2, r3
 800d990:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d994:	65bb      	str	r3, [r7, #88]	; 0x58
 800d996:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d998:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d99a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d99c:	e841 2300 	strex	r3, r2, [r1]
 800d9a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d9a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d1e4      	bne.n	800d972 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9ac:	2b01      	cmp	r3, #1
 800d9ae:	d132      	bne.n	800da16 <UART_RxISR_16BIT_FIFOEN+0x29a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9be:	e853 3f00 	ldrex	r3, [r3]
 800d9c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d9c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9c6:	f023 0310 	bic.w	r3, r3, #16
 800d9ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	461a      	mov	r2, r3
 800d9d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d9d8:	647b      	str	r3, [r7, #68]	; 0x44
 800d9da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d9de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d9e0:	e841 2300 	strex	r3, r2, [r1]
 800d9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d9e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d1e4      	bne.n	800d9b6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	69db      	ldr	r3, [r3, #28]
 800d9f2:	f003 0310 	and.w	r3, r3, #16
 800d9f6:	2b10      	cmp	r3, #16
 800d9f8:	d103      	bne.n	800da02 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	2210      	movs	r2, #16
 800da00:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800da08:	687a      	ldr	r2, [r7, #4]
 800da0a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800da0e:	4611      	mov	r1, r2
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	4798      	blx	r3
 800da14:	e004      	b.n	800da20 <UART_RxISR_16BIT_FIFOEN+0x2a4>
        else
        {
          /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	4798      	blx	r3
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800da20:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800da24:	2b00      	cmp	r3, #0
 800da26:	d006      	beq.n	800da36 <UART_RxISR_16BIT_FIFOEN+0x2ba>
 800da28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800da2c:	f003 0320 	and.w	r3, r3, #32
 800da30:	2b00      	cmp	r3, #0
 800da32:	f47f aec7 	bne.w	800d7c4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da3c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800da40:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800da44:	2b00      	cmp	r3, #0
 800da46:	d049      	beq.n	800dadc <UART_RxISR_16BIT_FIFOEN+0x360>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800da4e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800da52:	429a      	cmp	r2, r3
 800da54:	d242      	bcs.n	800dadc <UART_RxISR_16BIT_FIFOEN+0x360>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	3308      	adds	r3, #8
 800da5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da60:	e853 3f00 	ldrex	r3, [r3]
 800da64:	623b      	str	r3, [r7, #32]
   return(result);
 800da66:	6a3b      	ldr	r3, [r7, #32]
 800da68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800da6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	3308      	adds	r3, #8
 800da76:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800da7a:	633a      	str	r2, [r7, #48]	; 0x30
 800da7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da82:	e841 2300 	strex	r3, r2, [r1]
 800da86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800da88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d1e3      	bne.n	800da56 <UART_RxISR_16BIT_FIFOEN+0x2da>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	4a16      	ldr	r2, [pc, #88]	; (800daec <UART_RxISR_16BIT_FIFOEN+0x370>)
 800da92:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	e853 3f00 	ldrex	r3, [r3]
 800daa0:	60fb      	str	r3, [r7, #12]
   return(result);
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	f043 0320 	orr.w	r3, r3, #32
 800daa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	461a      	mov	r2, r3
 800dab2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dab6:	61fb      	str	r3, [r7, #28]
 800dab8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daba:	69b9      	ldr	r1, [r7, #24]
 800dabc:	69fa      	ldr	r2, [r7, #28]
 800dabe:	e841 2300 	strex	r3, r2, [r1]
 800dac2:	617b      	str	r3, [r7, #20]
   return(result);
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d1e4      	bne.n	800da94 <UART_RxISR_16BIT_FIFOEN+0x318>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800daca:	e007      	b.n	800dadc <UART_RxISR_16BIT_FIFOEN+0x360>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	699a      	ldr	r2, [r3, #24]
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	f042 0208 	orr.w	r2, r2, #8
 800dada:	619a      	str	r2, [r3, #24]
}
 800dadc:	bf00      	nop
 800dade:	37b8      	adds	r7, #184	; 0xb8
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}
 800dae4:	effffffe 	.word	0xeffffffe
 800dae8:	58000c00 	.word	0x58000c00
 800daec:	0800d251 	.word	0x0800d251

0800daf0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b083      	sub	sp, #12
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800daf8:	bf00      	nop
 800dafa:	370c      	adds	r7, #12
 800dafc:	46bd      	mov	sp, r7
 800dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db02:	4770      	bx	lr

0800db04 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800db04:	b480      	push	{r7}
 800db06:	b083      	sub	sp, #12
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800db0c:	bf00      	nop
 800db0e:	370c      	adds	r7, #12
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr

0800db18 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800db18:	b480      	push	{r7}
 800db1a:	b083      	sub	sp, #12
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800db20:	bf00      	nop
 800db22:	370c      	adds	r7, #12
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr

0800db2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800db2c:	b480      	push	{r7}
 800db2e:	b085      	sub	sp, #20
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d101      	bne.n	800db42 <HAL_UARTEx_DisableFifoMode+0x16>
 800db3e:	2302      	movs	r3, #2
 800db40:	e027      	b.n	800db92 <HAL_UARTEx_DisableFifoMode+0x66>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2201      	movs	r2, #1
 800db46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2224      	movs	r2, #36	; 0x24
 800db4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f022 0201 	bic.w	r2, r2, #1
 800db68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800db70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2200      	movs	r2, #0
 800db76:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	68fa      	ldr	r2, [r7, #12]
 800db7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2220      	movs	r2, #32
 800db84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2200      	movs	r2, #0
 800db8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800db90:	2300      	movs	r3, #0
}
 800db92:	4618      	mov	r0, r3
 800db94:	3714      	adds	r7, #20
 800db96:	46bd      	mov	sp, r7
 800db98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9c:	4770      	bx	lr

0800db9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800db9e:	b580      	push	{r7, lr}
 800dba0:	b084      	sub	sp, #16
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	6078      	str	r0, [r7, #4]
 800dba6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dbae:	2b01      	cmp	r3, #1
 800dbb0:	d101      	bne.n	800dbb6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dbb2:	2302      	movs	r3, #2
 800dbb4:	e02d      	b.n	800dc12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2201      	movs	r2, #1
 800dbba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2224      	movs	r2, #36	; 0x24
 800dbc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	681a      	ldr	r2, [r3, #0]
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	f022 0201 	bic.w	r2, r2, #1
 800dbdc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	689b      	ldr	r3, [r3, #8]
 800dbe4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	683a      	ldr	r2, [r7, #0]
 800dbee:	430a      	orrs	r2, r1
 800dbf0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f000 f8a4 	bl	800dd40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	68fa      	ldr	r2, [r7, #12]
 800dbfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2220      	movs	r2, #32
 800dc04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dc10:	2300      	movs	r3, #0
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3710      	adds	r7, #16
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}

0800dc1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc1a:	b580      	push	{r7, lr}
 800dc1c:	b084      	sub	sp, #16
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	6078      	str	r0, [r7, #4]
 800dc22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	d101      	bne.n	800dc32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dc2e:	2302      	movs	r3, #2
 800dc30:	e02d      	b.n	800dc8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2201      	movs	r2, #1
 800dc36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2224      	movs	r2, #36	; 0x24
 800dc3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	681a      	ldr	r2, [r3, #0]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	f022 0201 	bic.w	r2, r2, #1
 800dc58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	689b      	ldr	r3, [r3, #8]
 800dc60:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	683a      	ldr	r2, [r7, #0]
 800dc6a:	430a      	orrs	r2, r1
 800dc6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f000 f866 	bl	800dd40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	68fa      	ldr	r2, [r7, #12]
 800dc7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2220      	movs	r2, #32
 800dc80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2200      	movs	r2, #0
 800dc88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dc8c:	2300      	movs	r3, #0
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3710      	adds	r7, #16
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}

0800dc96 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dc96:	b580      	push	{r7, lr}
 800dc98:	b08c      	sub	sp, #48	; 0x30
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	60f8      	str	r0, [r7, #12]
 800dc9e:	60b9      	str	r1, [r7, #8]
 800dca0:	4613      	mov	r3, r2
 800dca2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dcaa:	2b20      	cmp	r3, #32
 800dcac:	d142      	bne.n	800dd34 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d002      	beq.n	800dcba <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800dcb4:	88fb      	ldrh	r3, [r7, #6]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d101      	bne.n	800dcbe <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800dcba:	2301      	movs	r3, #1
 800dcbc:	e03b      	b.n	800dd36 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2201      	movs	r2, #1
 800dcc2:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800dcca:	88fb      	ldrh	r3, [r7, #6]
 800dccc:	461a      	mov	r2, r3
 800dcce:	68b9      	ldr	r1, [r7, #8]
 800dcd0:	68f8      	ldr	r0, [r7, #12]
 800dcd2:	f7fe fd27 	bl	800c724 <UART_Start_Receive_DMA>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800dcdc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d124      	bne.n	800dd2e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dce8:	2b01      	cmp	r3, #1
 800dcea:	d11d      	bne.n	800dd28 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	2210      	movs	r2, #16
 800dcf2:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcfa:	69bb      	ldr	r3, [r7, #24]
 800dcfc:	e853 3f00 	ldrex	r3, [r3]
 800dd00:	617b      	str	r3, [r7, #20]
   return(result);
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	f043 0310 	orr.w	r3, r3, #16
 800dd08:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	461a      	mov	r2, r3
 800dd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd12:	627b      	str	r3, [r7, #36]	; 0x24
 800dd14:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd16:	6a39      	ldr	r1, [r7, #32]
 800dd18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd1a:	e841 2300 	strex	r3, r2, [r1]
 800dd1e:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd20:	69fb      	ldr	r3, [r7, #28]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d1e6      	bne.n	800dcf4 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800dd26:	e002      	b.n	800dd2e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800dd28:	2301      	movs	r3, #1
 800dd2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800dd2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd32:	e000      	b.n	800dd36 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800dd34:	2302      	movs	r3, #2
  }
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	3730      	adds	r7, #48	; 0x30
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}
	...

0800dd40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b085      	sub	sp, #20
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d108      	bne.n	800dd62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2201      	movs	r2, #1
 800dd54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2201      	movs	r2, #1
 800dd5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dd60:	e031      	b.n	800ddc6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dd62:	2310      	movs	r3, #16
 800dd64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dd66:	2310      	movs	r3, #16
 800dd68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	689b      	ldr	r3, [r3, #8]
 800dd70:	0e5b      	lsrs	r3, r3, #25
 800dd72:	b2db      	uxtb	r3, r3
 800dd74:	f003 0307 	and.w	r3, r3, #7
 800dd78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	689b      	ldr	r3, [r3, #8]
 800dd80:	0f5b      	lsrs	r3, r3, #29
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	f003 0307 	and.w	r3, r3, #7
 800dd88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd8a:	7bbb      	ldrb	r3, [r7, #14]
 800dd8c:	7b3a      	ldrb	r2, [r7, #12]
 800dd8e:	4911      	ldr	r1, [pc, #68]	; (800ddd4 <UARTEx_SetNbDataToProcess+0x94>)
 800dd90:	5c8a      	ldrb	r2, [r1, r2]
 800dd92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dd96:	7b3a      	ldrb	r2, [r7, #12]
 800dd98:	490f      	ldr	r1, [pc, #60]	; (800ddd8 <UARTEx_SetNbDataToProcess+0x98>)
 800dd9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd9c:	fb93 f3f2 	sdiv	r3, r3, r2
 800dda0:	b29a      	uxth	r2, r3
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dda8:	7bfb      	ldrb	r3, [r7, #15]
 800ddaa:	7b7a      	ldrb	r2, [r7, #13]
 800ddac:	4909      	ldr	r1, [pc, #36]	; (800ddd4 <UARTEx_SetNbDataToProcess+0x94>)
 800ddae:	5c8a      	ldrb	r2, [r1, r2]
 800ddb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ddb4:	7b7a      	ldrb	r2, [r7, #13]
 800ddb6:	4908      	ldr	r1, [pc, #32]	; (800ddd8 <UARTEx_SetNbDataToProcess+0x98>)
 800ddb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ddba:	fb93 f3f2 	sdiv	r3, r3, r2
 800ddbe:	b29a      	uxth	r2, r3
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ddc6:	bf00      	nop
 800ddc8:	3714      	adds	r7, #20
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr
 800ddd2:	bf00      	nop
 800ddd4:	08020618 	.word	0x08020618
 800ddd8:	08020620 	.word	0x08020620

0800dddc <__NVIC_SetPriority>:
{
 800dddc:	b480      	push	{r7}
 800ddde:	b083      	sub	sp, #12
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	4603      	mov	r3, r0
 800dde4:	6039      	str	r1, [r7, #0]
 800dde6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800dde8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	db0a      	blt.n	800de06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	b2da      	uxtb	r2, r3
 800ddf4:	490c      	ldr	r1, [pc, #48]	; (800de28 <__NVIC_SetPriority+0x4c>)
 800ddf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ddfa:	0112      	lsls	r2, r2, #4
 800ddfc:	b2d2      	uxtb	r2, r2
 800ddfe:	440b      	add	r3, r1
 800de00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800de04:	e00a      	b.n	800de1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	b2da      	uxtb	r2, r3
 800de0a:	4908      	ldr	r1, [pc, #32]	; (800de2c <__NVIC_SetPriority+0x50>)
 800de0c:	88fb      	ldrh	r3, [r7, #6]
 800de0e:	f003 030f 	and.w	r3, r3, #15
 800de12:	3b04      	subs	r3, #4
 800de14:	0112      	lsls	r2, r2, #4
 800de16:	b2d2      	uxtb	r2, r2
 800de18:	440b      	add	r3, r1
 800de1a:	761a      	strb	r2, [r3, #24]
}
 800de1c:	bf00      	nop
 800de1e:	370c      	adds	r7, #12
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr
 800de28:	e000e100 	.word	0xe000e100
 800de2c:	e000ed00 	.word	0xe000ed00

0800de30 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800de30:	b580      	push	{r7, lr}
 800de32:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800de34:	4b05      	ldr	r3, [pc, #20]	; (800de4c <SysTick_Handler+0x1c>)
 800de36:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800de38:	f002 fcae 	bl	8010798 <xTaskGetSchedulerState>
 800de3c:	4603      	mov	r3, r0
 800de3e:	2b01      	cmp	r3, #1
 800de40:	d001      	beq.n	800de46 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800de42:	f003 fed1 	bl	8011be8 <xPortSysTickHandler>
  }
}
 800de46:	bf00      	nop
 800de48:	bd80      	pop	{r7, pc}
 800de4a:	bf00      	nop
 800de4c:	e000e010 	.word	0xe000e010

0800de50 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800de50:	b580      	push	{r7, lr}
 800de52:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800de54:	2100      	movs	r1, #0
 800de56:	f06f 0004 	mvn.w	r0, #4
 800de5a:	f7ff ffbf 	bl	800dddc <__NVIC_SetPriority>
#endif
}
 800de5e:	bf00      	nop
 800de60:	bd80      	pop	{r7, pc}
	...

0800de64 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800de64:	b480      	push	{r7}
 800de66:	b083      	sub	sp, #12
 800de68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de6a:	f3ef 8305 	mrs	r3, IPSR
 800de6e:	603b      	str	r3, [r7, #0]
  return(result);
 800de70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800de72:	2b00      	cmp	r3, #0
 800de74:	d003      	beq.n	800de7e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800de76:	f06f 0305 	mvn.w	r3, #5
 800de7a:	607b      	str	r3, [r7, #4]
 800de7c:	e00c      	b.n	800de98 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800de7e:	4b0a      	ldr	r3, [pc, #40]	; (800dea8 <osKernelInitialize+0x44>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d105      	bne.n	800de92 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800de86:	4b08      	ldr	r3, [pc, #32]	; (800dea8 <osKernelInitialize+0x44>)
 800de88:	2201      	movs	r2, #1
 800de8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800de8c:	2300      	movs	r3, #0
 800de8e:	607b      	str	r3, [r7, #4]
 800de90:	e002      	b.n	800de98 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800de92:	f04f 33ff 	mov.w	r3, #4294967295
 800de96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800de98:	687b      	ldr	r3, [r7, #4]
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	370c      	adds	r7, #12
 800de9e:	46bd      	mov	sp, r7
 800dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea4:	4770      	bx	lr
 800dea6:	bf00      	nop
 800dea8:	24000af8 	.word	0x24000af8

0800deac <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800deac:	b580      	push	{r7, lr}
 800deae:	b082      	sub	sp, #8
 800deb0:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800deb2:	f002 fc71 	bl	8010798 <xTaskGetSchedulerState>
 800deb6:	4603      	mov	r3, r0
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d004      	beq.n	800dec6 <osKernelGetState+0x1a>
 800debc:	2b02      	cmp	r3, #2
 800debe:	d105      	bne.n	800decc <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800dec0:	2302      	movs	r3, #2
 800dec2:	607b      	str	r3, [r7, #4]
      break;
 800dec4:	e00c      	b.n	800dee0 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800dec6:	2303      	movs	r3, #3
 800dec8:	607b      	str	r3, [r7, #4]
      break;
 800deca:	e009      	b.n	800dee0 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800decc:	4b07      	ldr	r3, [pc, #28]	; (800deec <osKernelGetState+0x40>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	2b01      	cmp	r3, #1
 800ded2:	d102      	bne.n	800deda <osKernelGetState+0x2e>
        state = osKernelReady;
 800ded4:	2301      	movs	r3, #1
 800ded6:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800ded8:	e001      	b.n	800dede <osKernelGetState+0x32>
        state = osKernelInactive;
 800deda:	2300      	movs	r3, #0
 800dedc:	607b      	str	r3, [r7, #4]
      break;
 800dede:	bf00      	nop
  }

  return (state);
 800dee0:	687b      	ldr	r3, [r7, #4]
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3708      	adds	r7, #8
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	bf00      	nop
 800deec:	24000af8 	.word	0x24000af8

0800def0 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800def0:	b580      	push	{r7, lr}
 800def2:	b082      	sub	sp, #8
 800def4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800def6:	f3ef 8305 	mrs	r3, IPSR
 800defa:	603b      	str	r3, [r7, #0]
  return(result);
 800defc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800defe:	2b00      	cmp	r3, #0
 800df00:	d003      	beq.n	800df0a <osKernelStart+0x1a>
    stat = osErrorISR;
 800df02:	f06f 0305 	mvn.w	r3, #5
 800df06:	607b      	str	r3, [r7, #4]
 800df08:	e010      	b.n	800df2c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800df0a:	4b0b      	ldr	r3, [pc, #44]	; (800df38 <osKernelStart+0x48>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	2b01      	cmp	r3, #1
 800df10:	d109      	bne.n	800df26 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800df12:	f7ff ff9d 	bl	800de50 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800df16:	4b08      	ldr	r3, [pc, #32]	; (800df38 <osKernelStart+0x48>)
 800df18:	2202      	movs	r2, #2
 800df1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800df1c:	f001 ffbe 	bl	800fe9c <vTaskStartScheduler>
      stat = osOK;
 800df20:	2300      	movs	r3, #0
 800df22:	607b      	str	r3, [r7, #4]
 800df24:	e002      	b.n	800df2c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800df26:	f04f 33ff 	mov.w	r3, #4294967295
 800df2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800df2c:	687b      	ldr	r3, [r7, #4]
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3708      	adds	r7, #8
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}
 800df36:	bf00      	nop
 800df38:	24000af8 	.word	0x24000af8

0800df3c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b082      	sub	sp, #8
 800df40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df42:	f3ef 8305 	mrs	r3, IPSR
 800df46:	603b      	str	r3, [r7, #0]
  return(result);
 800df48:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d003      	beq.n	800df56 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800df4e:	f002 f8d1 	bl	80100f4 <xTaskGetTickCountFromISR>
 800df52:	6078      	str	r0, [r7, #4]
 800df54:	e002      	b.n	800df5c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800df56:	f002 f8bd 	bl	80100d4 <xTaskGetTickCount>
 800df5a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800df5c:	687b      	ldr	r3, [r7, #4]
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3708      	adds	r7, #8
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}

0800df66 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800df66:	b580      	push	{r7, lr}
 800df68:	b08e      	sub	sp, #56	; 0x38
 800df6a:	af04      	add	r7, sp, #16
 800df6c:	60f8      	str	r0, [r7, #12]
 800df6e:	60b9      	str	r1, [r7, #8]
 800df70:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800df72:	2300      	movs	r3, #0
 800df74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df76:	f3ef 8305 	mrs	r3, IPSR
 800df7a:	617b      	str	r3, [r7, #20]
  return(result);
 800df7c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d17e      	bne.n	800e080 <osThreadNew+0x11a>
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d07b      	beq.n	800e080 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800df88:	2380      	movs	r3, #128	; 0x80
 800df8a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800df8c:	2318      	movs	r3, #24
 800df8e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800df90:	2300      	movs	r3, #0
 800df92:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800df94:	f04f 33ff 	mov.w	r3, #4294967295
 800df98:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d045      	beq.n	800e02c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d002      	beq.n	800dfae <osThreadNew+0x48>
        name = attr->name;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	699b      	ldr	r3, [r3, #24]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d002      	beq.n	800dfbc <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	699b      	ldr	r3, [r3, #24]
 800dfba:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dfbc:	69fb      	ldr	r3, [r7, #28]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d008      	beq.n	800dfd4 <osThreadNew+0x6e>
 800dfc2:	69fb      	ldr	r3, [r7, #28]
 800dfc4:	2b38      	cmp	r3, #56	; 0x38
 800dfc6:	d805      	bhi.n	800dfd4 <osThreadNew+0x6e>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	685b      	ldr	r3, [r3, #4]
 800dfcc:	f003 0301 	and.w	r3, r3, #1
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d001      	beq.n	800dfd8 <osThreadNew+0x72>
        return (NULL);
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	e054      	b.n	800e082 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	695b      	ldr	r3, [r3, #20]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d003      	beq.n	800dfe8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	695b      	ldr	r3, [r3, #20]
 800dfe4:	089b      	lsrs	r3, r3, #2
 800dfe6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	689b      	ldr	r3, [r3, #8]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d00e      	beq.n	800e00e <osThreadNew+0xa8>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	68db      	ldr	r3, [r3, #12]
 800dff4:	2bbb      	cmp	r3, #187	; 0xbb
 800dff6:	d90a      	bls.n	800e00e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d006      	beq.n	800e00e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	695b      	ldr	r3, [r3, #20]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d002      	beq.n	800e00e <osThreadNew+0xa8>
        mem = 1;
 800e008:	2301      	movs	r3, #1
 800e00a:	61bb      	str	r3, [r7, #24]
 800e00c:	e010      	b.n	800e030 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	689b      	ldr	r3, [r3, #8]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d10c      	bne.n	800e030 <osThreadNew+0xca>
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	68db      	ldr	r3, [r3, #12]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d108      	bne.n	800e030 <osThreadNew+0xca>
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	691b      	ldr	r3, [r3, #16]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d104      	bne.n	800e030 <osThreadNew+0xca>
          mem = 0;
 800e026:	2300      	movs	r3, #0
 800e028:	61bb      	str	r3, [r7, #24]
 800e02a:	e001      	b.n	800e030 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e02c:	2300      	movs	r3, #0
 800e02e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e030:	69bb      	ldr	r3, [r7, #24]
 800e032:	2b01      	cmp	r3, #1
 800e034:	d110      	bne.n	800e058 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e03a:	687a      	ldr	r2, [r7, #4]
 800e03c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e03e:	9202      	str	r2, [sp, #8]
 800e040:	9301      	str	r3, [sp, #4]
 800e042:	69fb      	ldr	r3, [r7, #28]
 800e044:	9300      	str	r3, [sp, #0]
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	6a3a      	ldr	r2, [r7, #32]
 800e04a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e04c:	68f8      	ldr	r0, [r7, #12]
 800e04e:	f001 fc49 	bl	800f8e4 <xTaskCreateStatic>
 800e052:	4603      	mov	r3, r0
 800e054:	613b      	str	r3, [r7, #16]
 800e056:	e013      	b.n	800e080 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e058:	69bb      	ldr	r3, [r7, #24]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d110      	bne.n	800e080 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e05e:	6a3b      	ldr	r3, [r7, #32]
 800e060:	b29a      	uxth	r2, r3
 800e062:	f107 0310 	add.w	r3, r7, #16
 800e066:	9301      	str	r3, [sp, #4]
 800e068:	69fb      	ldr	r3, [r7, #28]
 800e06a:	9300      	str	r3, [sp, #0]
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e070:	68f8      	ldr	r0, [r7, #12]
 800e072:	f001 fc94 	bl	800f99e <xTaskCreate>
 800e076:	4603      	mov	r3, r0
 800e078:	2b01      	cmp	r3, #1
 800e07a:	d001      	beq.n	800e080 <osThreadNew+0x11a>
            hTask = NULL;
 800e07c:	2300      	movs	r3, #0
 800e07e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e080:	693b      	ldr	r3, [r7, #16]
}
 800e082:	4618      	mov	r0, r3
 800e084:	3728      	adds	r7, #40	; 0x28
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}

0800e08a <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800e08a:	b580      	push	{r7, lr}
 800e08c:	b082      	sub	sp, #8
 800e08e:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800e090:	f002 fb72 	bl	8010778 <xTaskGetCurrentTaskHandle>
 800e094:	6078      	str	r0, [r7, #4]

  return (id);
 800e096:	687b      	ldr	r3, [r7, #4]
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3708      	adds	r7, #8
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b084      	sub	sp, #16
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e0a8:	f3ef 8305 	mrs	r3, IPSR
 800e0ac:	60bb      	str	r3, [r7, #8]
  return(result);
 800e0ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d003      	beq.n	800e0bc <osDelay+0x1c>
    stat = osErrorISR;
 800e0b4:	f06f 0305 	mvn.w	r3, #5
 800e0b8:	60fb      	str	r3, [r7, #12]
 800e0ba:	e007      	b.n	800e0cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d002      	beq.n	800e0cc <osDelay+0x2c>
      vTaskDelay(ticks);
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f001 feb4 	bl	800fe34 <vTaskDelay>
    }
  }

  return (stat);
 800e0cc:	68fb      	ldr	r3, [r7, #12]
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3710      	adds	r7, #16
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}

0800e0d6 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800e0d6:	b580      	push	{r7, lr}
 800e0d8:	b086      	sub	sp, #24
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e0de:	f3ef 8305 	mrs	r3, IPSR
 800e0e2:	60fb      	str	r3, [r7, #12]
  return(result);
 800e0e4:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d003      	beq.n	800e0f2 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800e0ea:	f06f 0305 	mvn.w	r3, #5
 800e0ee:	617b      	str	r3, [r7, #20]
 800e0f0:	e019      	b.n	800e126 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800e0f6:	f001 ffed 	bl	80100d4 <xTaskGetTickCount>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800e0fe:	68bb      	ldr	r3, [r7, #8]
 800e100:	687a      	ldr	r2, [r7, #4]
 800e102:	1ad3      	subs	r3, r2, r3
 800e104:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d009      	beq.n	800e120 <osDelayUntil+0x4a>
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	db06      	blt.n	800e120 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800e112:	f107 0308 	add.w	r3, r7, #8
 800e116:	6939      	ldr	r1, [r7, #16]
 800e118:	4618      	mov	r0, r3
 800e11a:	f001 fe0d 	bl	800fd38 <vTaskDelayUntil>
 800e11e:	e002      	b.n	800e126 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800e120:	f06f 0303 	mvn.w	r3, #3
 800e124:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800e126:	697b      	ldr	r3, [r7, #20]
}
 800e128:	4618      	mov	r0, r3
 800e12a:	3718      	adds	r7, #24
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}

0800e130 <TimerCallback>:

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800e130:	b580      	push	{r7, lr}
 800e132:	b084      	sub	sp, #16
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f003 fb75 	bl	8011828 <pvTimerGetTimerID>
 800e13e:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d005      	beq.n	800e152 <TimerCallback+0x22>
    callb->func (callb->arg);
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	68fa      	ldr	r2, [r7, #12]
 800e14c:	6852      	ldr	r2, [r2, #4]
 800e14e:	4610      	mov	r0, r2
 800e150:	4798      	blx	r3
  }
}
 800e152:	bf00      	nop
 800e154:	3710      	adds	r7, #16
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}
	...

0800e15c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b08c      	sub	sp, #48	; 0x30
 800e160:	af02      	add	r7, sp, #8
 800e162:	60f8      	str	r0, [r7, #12]
 800e164:	607a      	str	r2, [r7, #4]
 800e166:	603b      	str	r3, [r7, #0]
 800e168:	460b      	mov	r3, r1
 800e16a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800e16c:	2300      	movs	r3, #0
 800e16e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e170:	f3ef 8305 	mrs	r3, IPSR
 800e174:	613b      	str	r3, [r7, #16]
  return(result);
 800e176:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d163      	bne.n	800e244 <osTimerNew+0xe8>
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d060      	beq.n	800e244 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800e182:	2008      	movs	r0, #8
 800e184:	f003 fdc0 	bl	8011d08 <pvPortMalloc>
 800e188:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d059      	beq.n	800e244 <osTimerNew+0xe8>
      callb->func = func;
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	68fa      	ldr	r2, [r7, #12]
 800e194:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	687a      	ldr	r2, [r7, #4]
 800e19a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800e19c:	7afb      	ldrb	r3, [r7, #11]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d102      	bne.n	800e1a8 <osTimerNew+0x4c>
        reload = pdFALSE;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	61fb      	str	r3, [r7, #28]
 800e1a6:	e001      	b.n	800e1ac <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800e1ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e1b0:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d01c      	beq.n	800e1f6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d002      	beq.n	800e1ca <osTimerNew+0x6e>
          name = attr->name;
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	689b      	ldr	r3, [r3, #8]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d006      	beq.n	800e1e0 <osTimerNew+0x84>
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	68db      	ldr	r3, [r3, #12]
 800e1d6:	2b2b      	cmp	r3, #43	; 0x2b
 800e1d8:	d902      	bls.n	800e1e0 <osTimerNew+0x84>
          mem = 1;
 800e1da:	2301      	movs	r3, #1
 800e1dc:	61bb      	str	r3, [r7, #24]
 800e1de:	e00c      	b.n	800e1fa <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	689b      	ldr	r3, [r3, #8]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d108      	bne.n	800e1fa <osTimerNew+0x9e>
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	68db      	ldr	r3, [r3, #12]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d104      	bne.n	800e1fa <osTimerNew+0x9e>
            mem = 0;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	61bb      	str	r3, [r7, #24]
 800e1f4:	e001      	b.n	800e1fa <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800e1fa:	69bb      	ldr	r3, [r7, #24]
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	d10c      	bne.n	800e21a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	689b      	ldr	r3, [r3, #8]
 800e204:	9301      	str	r3, [sp, #4]
 800e206:	4b12      	ldr	r3, [pc, #72]	; (800e250 <osTimerNew+0xf4>)
 800e208:	9300      	str	r3, [sp, #0]
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	69fa      	ldr	r2, [r7, #28]
 800e20e:	2101      	movs	r1, #1
 800e210:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e212:	f002 ff8a 	bl	801112a <xTimerCreateStatic>
 800e216:	6238      	str	r0, [r7, #32]
 800e218:	e00b      	b.n	800e232 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800e21a:	69bb      	ldr	r3, [r7, #24]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d108      	bne.n	800e232 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800e220:	4b0b      	ldr	r3, [pc, #44]	; (800e250 <osTimerNew+0xf4>)
 800e222:	9300      	str	r3, [sp, #0]
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	69fa      	ldr	r2, [r7, #28]
 800e228:	2101      	movs	r1, #1
 800e22a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e22c:	f002 ff5c 	bl	80110e8 <xTimerCreate>
 800e230:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800e232:	6a3b      	ldr	r3, [r7, #32]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d105      	bne.n	800e244 <osTimerNew+0xe8>
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d002      	beq.n	800e244 <osTimerNew+0xe8>
        vPortFree (callb);
 800e23e:	6978      	ldr	r0, [r7, #20]
 800e240:	f003 fe2e 	bl	8011ea0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800e244:	6a3b      	ldr	r3, [r7, #32]
}
 800e246:	4618      	mov	r0, r3
 800e248:	3728      	adds	r7, #40	; 0x28
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop
 800e250:	0800e131 	.word	0x0800e131

0800e254 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e254:	b580      	push	{r7, lr}
 800e256:	b08a      	sub	sp, #40	; 0x28
 800e258:	af02      	add	r7, sp, #8
 800e25a:	60f8      	str	r0, [r7, #12]
 800e25c:	60b9      	str	r1, [r7, #8]
 800e25e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e260:	2300      	movs	r3, #0
 800e262:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e264:	f3ef 8305 	mrs	r3, IPSR
 800e268:	613b      	str	r3, [r7, #16]
  return(result);
 800e26a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d175      	bne.n	800e35c <osSemaphoreNew+0x108>
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d072      	beq.n	800e35c <osSemaphoreNew+0x108>
 800e276:	68ba      	ldr	r2, [r7, #8]
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d86e      	bhi.n	800e35c <osSemaphoreNew+0x108>
    mem = -1;
 800e27e:	f04f 33ff 	mov.w	r3, #4294967295
 800e282:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d015      	beq.n	800e2b6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	689b      	ldr	r3, [r3, #8]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d006      	beq.n	800e2a0 <osSemaphoreNew+0x4c>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	68db      	ldr	r3, [r3, #12]
 800e296:	2b4f      	cmp	r3, #79	; 0x4f
 800e298:	d902      	bls.n	800e2a0 <osSemaphoreNew+0x4c>
        mem = 1;
 800e29a:	2301      	movs	r3, #1
 800e29c:	61bb      	str	r3, [r7, #24]
 800e29e:	e00c      	b.n	800e2ba <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	689b      	ldr	r3, [r3, #8]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d108      	bne.n	800e2ba <osSemaphoreNew+0x66>
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	68db      	ldr	r3, [r3, #12]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d104      	bne.n	800e2ba <osSemaphoreNew+0x66>
          mem = 0;
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	61bb      	str	r3, [r7, #24]
 800e2b4:	e001      	b.n	800e2ba <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2c0:	d04c      	beq.n	800e35c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	2b01      	cmp	r3, #1
 800e2c6:	d128      	bne.n	800e31a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800e2c8:	69bb      	ldr	r3, [r7, #24]
 800e2ca:	2b01      	cmp	r3, #1
 800e2cc:	d10a      	bne.n	800e2e4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	689b      	ldr	r3, [r3, #8]
 800e2d2:	2203      	movs	r2, #3
 800e2d4:	9200      	str	r2, [sp, #0]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	2100      	movs	r1, #0
 800e2da:	2001      	movs	r0, #1
 800e2dc:	f000 fb5c 	bl	800e998 <xQueueGenericCreateStatic>
 800e2e0:	61f8      	str	r0, [r7, #28]
 800e2e2:	e005      	b.n	800e2f0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800e2e4:	2203      	movs	r2, #3
 800e2e6:	2100      	movs	r1, #0
 800e2e8:	2001      	movs	r0, #1
 800e2ea:	f000 fbcd 	bl	800ea88 <xQueueGenericCreate>
 800e2ee:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e2f0:	69fb      	ldr	r3, [r7, #28]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d022      	beq.n	800e33c <osSemaphoreNew+0xe8>
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d01f      	beq.n	800e33c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	2200      	movs	r2, #0
 800e300:	2100      	movs	r1, #0
 800e302:	69f8      	ldr	r0, [r7, #28]
 800e304:	f000 fc88 	bl	800ec18 <xQueueGenericSend>
 800e308:	4603      	mov	r3, r0
 800e30a:	2b01      	cmp	r3, #1
 800e30c:	d016      	beq.n	800e33c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800e30e:	69f8      	ldr	r0, [r7, #28]
 800e310:	f001 f914 	bl	800f53c <vQueueDelete>
            hSemaphore = NULL;
 800e314:	2300      	movs	r3, #0
 800e316:	61fb      	str	r3, [r7, #28]
 800e318:	e010      	b.n	800e33c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800e31a:	69bb      	ldr	r3, [r7, #24]
 800e31c:	2b01      	cmp	r3, #1
 800e31e:	d108      	bne.n	800e332 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	689b      	ldr	r3, [r3, #8]
 800e324:	461a      	mov	r2, r3
 800e326:	68b9      	ldr	r1, [r7, #8]
 800e328:	68f8      	ldr	r0, [r7, #12]
 800e32a:	f000 fc0a 	bl	800eb42 <xQueueCreateCountingSemaphoreStatic>
 800e32e:	61f8      	str	r0, [r7, #28]
 800e330:	e004      	b.n	800e33c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e332:	68b9      	ldr	r1, [r7, #8]
 800e334:	68f8      	ldr	r0, [r7, #12]
 800e336:	f000 fc3b 	bl	800ebb0 <xQueueCreateCountingSemaphore>
 800e33a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e33c:	69fb      	ldr	r3, [r7, #28]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d00c      	beq.n	800e35c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d003      	beq.n	800e350 <osSemaphoreNew+0xfc>
          name = attr->name;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	617b      	str	r3, [r7, #20]
 800e34e:	e001      	b.n	800e354 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800e350:	2300      	movs	r3, #0
 800e352:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e354:	6979      	ldr	r1, [r7, #20]
 800e356:	69f8      	ldr	r0, [r7, #28]
 800e358:	f001 fa3c 	bl	800f7d4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e35c:	69fb      	ldr	r3, [r7, #28]
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3720      	adds	r7, #32
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}
	...

0800e368 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e368:	b580      	push	{r7, lr}
 800e36a:	b086      	sub	sp, #24
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e376:	2300      	movs	r3, #0
 800e378:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d103      	bne.n	800e388 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800e380:	f06f 0303 	mvn.w	r3, #3
 800e384:	617b      	str	r3, [r7, #20]
 800e386:	e039      	b.n	800e3fc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e388:	f3ef 8305 	mrs	r3, IPSR
 800e38c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e38e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e390:	2b00      	cmp	r3, #0
 800e392:	d022      	beq.n	800e3da <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d003      	beq.n	800e3a2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800e39a:	f06f 0303 	mvn.w	r3, #3
 800e39e:	617b      	str	r3, [r7, #20]
 800e3a0:	e02c      	b.n	800e3fc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e3a6:	f107 0308 	add.w	r3, r7, #8
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	2100      	movs	r1, #0
 800e3ae:	6938      	ldr	r0, [r7, #16]
 800e3b0:	f001 f844 	bl	800f43c <xQueueReceiveFromISR>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	2b01      	cmp	r3, #1
 800e3b8:	d003      	beq.n	800e3c2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800e3ba:	f06f 0302 	mvn.w	r3, #2
 800e3be:	617b      	str	r3, [r7, #20]
 800e3c0:	e01c      	b.n	800e3fc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d019      	beq.n	800e3fc <osSemaphoreAcquire+0x94>
 800e3c8:	4b0f      	ldr	r3, [pc, #60]	; (800e408 <osSemaphoreAcquire+0xa0>)
 800e3ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3ce:	601a      	str	r2, [r3, #0]
 800e3d0:	f3bf 8f4f 	dsb	sy
 800e3d4:	f3bf 8f6f 	isb	sy
 800e3d8:	e010      	b.n	800e3fc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e3da:	6839      	ldr	r1, [r7, #0]
 800e3dc:	6938      	ldr	r0, [r7, #16]
 800e3de:	f000 ff21 	bl	800f224 <xQueueSemaphoreTake>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	2b01      	cmp	r3, #1
 800e3e6:	d009      	beq.n	800e3fc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d003      	beq.n	800e3f6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800e3ee:	f06f 0301 	mvn.w	r3, #1
 800e3f2:	617b      	str	r3, [r7, #20]
 800e3f4:	e002      	b.n	800e3fc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800e3f6:	f06f 0302 	mvn.w	r3, #2
 800e3fa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e3fc:	697b      	ldr	r3, [r7, #20]
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	3718      	adds	r7, #24
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}
 800e406:	bf00      	nop
 800e408:	e000ed04 	.word	0xe000ed04

0800e40c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b086      	sub	sp, #24
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e418:	2300      	movs	r3, #0
 800e41a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e41c:	693b      	ldr	r3, [r7, #16]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d103      	bne.n	800e42a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800e422:	f06f 0303 	mvn.w	r3, #3
 800e426:	617b      	str	r3, [r7, #20]
 800e428:	e02c      	b.n	800e484 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e42a:	f3ef 8305 	mrs	r3, IPSR
 800e42e:	60fb      	str	r3, [r7, #12]
  return(result);
 800e430:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e432:	2b00      	cmp	r3, #0
 800e434:	d01a      	beq.n	800e46c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800e436:	2300      	movs	r3, #0
 800e438:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e43a:	f107 0308 	add.w	r3, r7, #8
 800e43e:	4619      	mov	r1, r3
 800e440:	6938      	ldr	r0, [r7, #16]
 800e442:	f000 fd82 	bl	800ef4a <xQueueGiveFromISR>
 800e446:	4603      	mov	r3, r0
 800e448:	2b01      	cmp	r3, #1
 800e44a:	d003      	beq.n	800e454 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800e44c:	f06f 0302 	mvn.w	r3, #2
 800e450:	617b      	str	r3, [r7, #20]
 800e452:	e017      	b.n	800e484 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d014      	beq.n	800e484 <osSemaphoreRelease+0x78>
 800e45a:	4b0d      	ldr	r3, [pc, #52]	; (800e490 <osSemaphoreRelease+0x84>)
 800e45c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e460:	601a      	str	r2, [r3, #0]
 800e462:	f3bf 8f4f 	dsb	sy
 800e466:	f3bf 8f6f 	isb	sy
 800e46a:	e00b      	b.n	800e484 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e46c:	2300      	movs	r3, #0
 800e46e:	2200      	movs	r2, #0
 800e470:	2100      	movs	r1, #0
 800e472:	6938      	ldr	r0, [r7, #16]
 800e474:	f000 fbd0 	bl	800ec18 <xQueueGenericSend>
 800e478:	4603      	mov	r3, r0
 800e47a:	2b01      	cmp	r3, #1
 800e47c:	d002      	beq.n	800e484 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800e47e:	f06f 0302 	mvn.w	r3, #2
 800e482:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800e484:	697b      	ldr	r3, [r7, #20]
}
 800e486:	4618      	mov	r0, r3
 800e488:	3718      	adds	r7, #24
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	bf00      	nop
 800e490:	e000ed04 	.word	0xe000ed04

0800e494 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e494:	b580      	push	{r7, lr}
 800e496:	b08a      	sub	sp, #40	; 0x28
 800e498:	af02      	add	r7, sp, #8
 800e49a:	60f8      	str	r0, [r7, #12]
 800e49c:	60b9      	str	r1, [r7, #8]
 800e49e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e4a4:	f3ef 8305 	mrs	r3, IPSR
 800e4a8:	613b      	str	r3, [r7, #16]
  return(result);
 800e4aa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d15f      	bne.n	800e570 <osMessageQueueNew+0xdc>
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d05c      	beq.n	800e570 <osMessageQueueNew+0xdc>
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d059      	beq.n	800e570 <osMessageQueueNew+0xdc>
    mem = -1;
 800e4bc:	f04f 33ff 	mov.w	r3, #4294967295
 800e4c0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d029      	beq.n	800e51c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	689b      	ldr	r3, [r3, #8]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d012      	beq.n	800e4f6 <osMessageQueueNew+0x62>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	68db      	ldr	r3, [r3, #12]
 800e4d4:	2b4f      	cmp	r3, #79	; 0x4f
 800e4d6:	d90e      	bls.n	800e4f6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d00a      	beq.n	800e4f6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	695a      	ldr	r2, [r3, #20]
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	68b9      	ldr	r1, [r7, #8]
 800e4e8:	fb01 f303 	mul.w	r3, r1, r3
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d302      	bcc.n	800e4f6 <osMessageQueueNew+0x62>
        mem = 1;
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	61bb      	str	r3, [r7, #24]
 800e4f4:	e014      	b.n	800e520 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	689b      	ldr	r3, [r3, #8]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d110      	bne.n	800e520 <osMessageQueueNew+0x8c>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	68db      	ldr	r3, [r3, #12]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d10c      	bne.n	800e520 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d108      	bne.n	800e520 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	695b      	ldr	r3, [r3, #20]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d104      	bne.n	800e520 <osMessageQueueNew+0x8c>
          mem = 0;
 800e516:	2300      	movs	r3, #0
 800e518:	61bb      	str	r3, [r7, #24]
 800e51a:	e001      	b.n	800e520 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800e51c:	2300      	movs	r3, #0
 800e51e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e520:	69bb      	ldr	r3, [r7, #24]
 800e522:	2b01      	cmp	r3, #1
 800e524:	d10b      	bne.n	800e53e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	691a      	ldr	r2, [r3, #16]
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	689b      	ldr	r3, [r3, #8]
 800e52e:	2100      	movs	r1, #0
 800e530:	9100      	str	r1, [sp, #0]
 800e532:	68b9      	ldr	r1, [r7, #8]
 800e534:	68f8      	ldr	r0, [r7, #12]
 800e536:	f000 fa2f 	bl	800e998 <xQueueGenericCreateStatic>
 800e53a:	61f8      	str	r0, [r7, #28]
 800e53c:	e008      	b.n	800e550 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800e53e:	69bb      	ldr	r3, [r7, #24]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d105      	bne.n	800e550 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800e544:	2200      	movs	r2, #0
 800e546:	68b9      	ldr	r1, [r7, #8]
 800e548:	68f8      	ldr	r0, [r7, #12]
 800e54a:	f000 fa9d 	bl	800ea88 <xQueueGenericCreate>
 800e54e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e550:	69fb      	ldr	r3, [r7, #28]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d00c      	beq.n	800e570 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d003      	beq.n	800e564 <osMessageQueueNew+0xd0>
        name = attr->name;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	617b      	str	r3, [r7, #20]
 800e562:	e001      	b.n	800e568 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800e564:	2300      	movs	r3, #0
 800e566:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800e568:	6979      	ldr	r1, [r7, #20]
 800e56a:	69f8      	ldr	r0, [r7, #28]
 800e56c:	f001 f932 	bl	800f7d4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e570:	69fb      	ldr	r3, [r7, #28]
}
 800e572:	4618      	mov	r0, r3
 800e574:	3720      	adds	r7, #32
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
	...

0800e57c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b088      	sub	sp, #32
 800e580:	af00      	add	r7, sp, #0
 800e582:	60f8      	str	r0, [r7, #12]
 800e584:	60b9      	str	r1, [r7, #8]
 800e586:	603b      	str	r3, [r7, #0]
 800e588:	4613      	mov	r3, r2
 800e58a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e590:	2300      	movs	r3, #0
 800e592:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e594:	f3ef 8305 	mrs	r3, IPSR
 800e598:	617b      	str	r3, [r7, #20]
  return(result);
 800e59a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d028      	beq.n	800e5f2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e5a0:	69bb      	ldr	r3, [r7, #24]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d005      	beq.n	800e5b2 <osMessageQueuePut+0x36>
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d002      	beq.n	800e5b2 <osMessageQueuePut+0x36>
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d003      	beq.n	800e5ba <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800e5b2:	f06f 0303 	mvn.w	r3, #3
 800e5b6:	61fb      	str	r3, [r7, #28]
 800e5b8:	e038      	b.n	800e62c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e5be:	f107 0210 	add.w	r2, r7, #16
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	68b9      	ldr	r1, [r7, #8]
 800e5c6:	69b8      	ldr	r0, [r7, #24]
 800e5c8:	f000 fc24 	bl	800ee14 <xQueueGenericSendFromISR>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	2b01      	cmp	r3, #1
 800e5d0:	d003      	beq.n	800e5da <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800e5d2:	f06f 0302 	mvn.w	r3, #2
 800e5d6:	61fb      	str	r3, [r7, #28]
 800e5d8:	e028      	b.n	800e62c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d025      	beq.n	800e62c <osMessageQueuePut+0xb0>
 800e5e0:	4b15      	ldr	r3, [pc, #84]	; (800e638 <osMessageQueuePut+0xbc>)
 800e5e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5e6:	601a      	str	r2, [r3, #0]
 800e5e8:	f3bf 8f4f 	dsb	sy
 800e5ec:	f3bf 8f6f 	isb	sy
 800e5f0:	e01c      	b.n	800e62c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e5f2:	69bb      	ldr	r3, [r7, #24]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d002      	beq.n	800e5fe <osMessageQueuePut+0x82>
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d103      	bne.n	800e606 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800e5fe:	f06f 0303 	mvn.w	r3, #3
 800e602:	61fb      	str	r3, [r7, #28]
 800e604:	e012      	b.n	800e62c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e606:	2300      	movs	r3, #0
 800e608:	683a      	ldr	r2, [r7, #0]
 800e60a:	68b9      	ldr	r1, [r7, #8]
 800e60c:	69b8      	ldr	r0, [r7, #24]
 800e60e:	f000 fb03 	bl	800ec18 <xQueueGenericSend>
 800e612:	4603      	mov	r3, r0
 800e614:	2b01      	cmp	r3, #1
 800e616:	d009      	beq.n	800e62c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d003      	beq.n	800e626 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800e61e:	f06f 0301 	mvn.w	r3, #1
 800e622:	61fb      	str	r3, [r7, #28]
 800e624:	e002      	b.n	800e62c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800e626:	f06f 0302 	mvn.w	r3, #2
 800e62a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e62c:	69fb      	ldr	r3, [r7, #28]
}
 800e62e:	4618      	mov	r0, r3
 800e630:	3720      	adds	r7, #32
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}
 800e636:	bf00      	nop
 800e638:	e000ed04 	.word	0xe000ed04

0800e63c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b088      	sub	sp, #32
 800e640:	af00      	add	r7, sp, #0
 800e642:	60f8      	str	r0, [r7, #12]
 800e644:	60b9      	str	r1, [r7, #8]
 800e646:	607a      	str	r2, [r7, #4]
 800e648:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e64e:	2300      	movs	r3, #0
 800e650:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e652:	f3ef 8305 	mrs	r3, IPSR
 800e656:	617b      	str	r3, [r7, #20]
  return(result);
 800e658:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d028      	beq.n	800e6b0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e65e:	69bb      	ldr	r3, [r7, #24]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d005      	beq.n	800e670 <osMessageQueueGet+0x34>
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d002      	beq.n	800e670 <osMessageQueueGet+0x34>
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d003      	beq.n	800e678 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800e670:	f06f 0303 	mvn.w	r3, #3
 800e674:	61fb      	str	r3, [r7, #28]
 800e676:	e037      	b.n	800e6e8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800e678:	2300      	movs	r3, #0
 800e67a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e67c:	f107 0310 	add.w	r3, r7, #16
 800e680:	461a      	mov	r2, r3
 800e682:	68b9      	ldr	r1, [r7, #8]
 800e684:	69b8      	ldr	r0, [r7, #24]
 800e686:	f000 fed9 	bl	800f43c <xQueueReceiveFromISR>
 800e68a:	4603      	mov	r3, r0
 800e68c:	2b01      	cmp	r3, #1
 800e68e:	d003      	beq.n	800e698 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800e690:	f06f 0302 	mvn.w	r3, #2
 800e694:	61fb      	str	r3, [r7, #28]
 800e696:	e027      	b.n	800e6e8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800e698:	693b      	ldr	r3, [r7, #16]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d024      	beq.n	800e6e8 <osMessageQueueGet+0xac>
 800e69e:	4b15      	ldr	r3, [pc, #84]	; (800e6f4 <osMessageQueueGet+0xb8>)
 800e6a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6a4:	601a      	str	r2, [r3, #0]
 800e6a6:	f3bf 8f4f 	dsb	sy
 800e6aa:	f3bf 8f6f 	isb	sy
 800e6ae:	e01b      	b.n	800e6e8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e6b0:	69bb      	ldr	r3, [r7, #24]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d002      	beq.n	800e6bc <osMessageQueueGet+0x80>
 800e6b6:	68bb      	ldr	r3, [r7, #8]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d103      	bne.n	800e6c4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800e6bc:	f06f 0303 	mvn.w	r3, #3
 800e6c0:	61fb      	str	r3, [r7, #28]
 800e6c2:	e011      	b.n	800e6e8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e6c4:	683a      	ldr	r2, [r7, #0]
 800e6c6:	68b9      	ldr	r1, [r7, #8]
 800e6c8:	69b8      	ldr	r0, [r7, #24]
 800e6ca:	f000 fccb 	bl	800f064 <xQueueReceive>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	2b01      	cmp	r3, #1
 800e6d2:	d009      	beq.n	800e6e8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d003      	beq.n	800e6e2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800e6da:	f06f 0301 	mvn.w	r3, #1
 800e6de:	61fb      	str	r3, [r7, #28]
 800e6e0:	e002      	b.n	800e6e8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800e6e2:	f06f 0302 	mvn.w	r3, #2
 800e6e6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e6e8:	69fb      	ldr	r3, [r7, #28]
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3720      	adds	r7, #32
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	e000ed04 	.word	0xe000ed04

0800e6f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e6f8:	b480      	push	{r7}
 800e6fa:	b085      	sub	sp, #20
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	60f8      	str	r0, [r7, #12]
 800e700:	60b9      	str	r1, [r7, #8]
 800e702:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	4a07      	ldr	r2, [pc, #28]	; (800e724 <vApplicationGetIdleTaskMemory+0x2c>)
 800e708:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	4a06      	ldr	r2, [pc, #24]	; (800e728 <vApplicationGetIdleTaskMemory+0x30>)
 800e70e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2280      	movs	r2, #128	; 0x80
 800e714:	601a      	str	r2, [r3, #0]
}
 800e716:	bf00      	nop
 800e718:	3714      	adds	r7, #20
 800e71a:	46bd      	mov	sp, r7
 800e71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e720:	4770      	bx	lr
 800e722:	bf00      	nop
 800e724:	24000afc 	.word	0x24000afc
 800e728:	24000bb8 	.word	0x24000bb8

0800e72c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e72c:	b480      	push	{r7}
 800e72e:	b085      	sub	sp, #20
 800e730:	af00      	add	r7, sp, #0
 800e732:	60f8      	str	r0, [r7, #12]
 800e734:	60b9      	str	r1, [r7, #8]
 800e736:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	4a07      	ldr	r2, [pc, #28]	; (800e758 <vApplicationGetTimerTaskMemory+0x2c>)
 800e73c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	4a06      	ldr	r2, [pc, #24]	; (800e75c <vApplicationGetTimerTaskMemory+0x30>)
 800e742:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e74a:	601a      	str	r2, [r3, #0]
}
 800e74c:	bf00      	nop
 800e74e:	3714      	adds	r7, #20
 800e750:	46bd      	mov	sp, r7
 800e752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e756:	4770      	bx	lr
 800e758:	24000db8 	.word	0x24000db8
 800e75c:	24000e74 	.word	0x24000e74

0800e760 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e760:	b480      	push	{r7}
 800e762:	b083      	sub	sp, #12
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f103 0208 	add.w	r2, r3, #8
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f04f 32ff 	mov.w	r2, #4294967295
 800e778:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f103 0208 	add.w	r2, r3, #8
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f103 0208 	add.w	r2, r3, #8
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2200      	movs	r2, #0
 800e792:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e794:	bf00      	nop
 800e796:	370c      	adds	r7, #12
 800e798:	46bd      	mov	sp, r7
 800e79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79e:	4770      	bx	lr

0800e7a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e7a0:	b480      	push	{r7}
 800e7a2:	b083      	sub	sp, #12
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e7ae:	bf00      	nop
 800e7b0:	370c      	adds	r7, #12
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b8:	4770      	bx	lr

0800e7ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e7ba:	b480      	push	{r7}
 800e7bc:	b085      	sub	sp, #20
 800e7be:	af00      	add	r7, sp, #0
 800e7c0:	6078      	str	r0, [r7, #4]
 800e7c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	685b      	ldr	r3, [r3, #4]
 800e7c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	68fa      	ldr	r2, [r7, #12]
 800e7ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	689a      	ldr	r2, [r3, #8]
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	689b      	ldr	r3, [r3, #8]
 800e7dc:	683a      	ldr	r2, [r7, #0]
 800e7de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	683a      	ldr	r2, [r7, #0]
 800e7e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	687a      	ldr	r2, [r7, #4]
 800e7ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	1c5a      	adds	r2, r3, #1
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	601a      	str	r2, [r3, #0]
}
 800e7f6:	bf00      	nop
 800e7f8:	3714      	adds	r7, #20
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e800:	4770      	bx	lr

0800e802 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e802:	b480      	push	{r7}
 800e804:	b085      	sub	sp, #20
 800e806:	af00      	add	r7, sp, #0
 800e808:	6078      	str	r0, [r7, #4]
 800e80a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e818:	d103      	bne.n	800e822 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	691b      	ldr	r3, [r3, #16]
 800e81e:	60fb      	str	r3, [r7, #12]
 800e820:	e00c      	b.n	800e83c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	3308      	adds	r3, #8
 800e826:	60fb      	str	r3, [r7, #12]
 800e828:	e002      	b.n	800e830 <vListInsert+0x2e>
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	685b      	ldr	r3, [r3, #4]
 800e82e:	60fb      	str	r3, [r7, #12]
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	685b      	ldr	r3, [r3, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	68ba      	ldr	r2, [r7, #8]
 800e838:	429a      	cmp	r2, r3
 800e83a:	d2f6      	bcs.n	800e82a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	685a      	ldr	r2, [r3, #4]
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	685b      	ldr	r3, [r3, #4]
 800e848:	683a      	ldr	r2, [r7, #0]
 800e84a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	68fa      	ldr	r2, [r7, #12]
 800e850:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	683a      	ldr	r2, [r7, #0]
 800e856:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	687a      	ldr	r2, [r7, #4]
 800e85c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	1c5a      	adds	r2, r3, #1
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	601a      	str	r2, [r3, #0]
}
 800e868:	bf00      	nop
 800e86a:	3714      	adds	r7, #20
 800e86c:	46bd      	mov	sp, r7
 800e86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e872:	4770      	bx	lr

0800e874 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e874:	b480      	push	{r7}
 800e876:	b085      	sub	sp, #20
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	691b      	ldr	r3, [r3, #16]
 800e880:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	685b      	ldr	r3, [r3, #4]
 800e886:	687a      	ldr	r2, [r7, #4]
 800e888:	6892      	ldr	r2, [r2, #8]
 800e88a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	689b      	ldr	r3, [r3, #8]
 800e890:	687a      	ldr	r2, [r7, #4]
 800e892:	6852      	ldr	r2, [r2, #4]
 800e894:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	685b      	ldr	r3, [r3, #4]
 800e89a:	687a      	ldr	r2, [r7, #4]
 800e89c:	429a      	cmp	r2, r3
 800e89e:	d103      	bne.n	800e8a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	689a      	ldr	r2, [r3, #8]
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	1e5a      	subs	r2, r3, #1
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	681b      	ldr	r3, [r3, #0]
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	3714      	adds	r7, #20
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c6:	4770      	bx	lr

0800e8c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b084      	sub	sp, #16
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
 800e8d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d10a      	bne.n	800e8f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e0:	f383 8811 	msr	BASEPRI, r3
 800e8e4:	f3bf 8f6f 	isb	sy
 800e8e8:	f3bf 8f4f 	dsb	sy
 800e8ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e8ee:	bf00      	nop
 800e8f0:	e7fe      	b.n	800e8f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e8f2:	f003 f8e7 	bl	8011ac4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	681a      	ldr	r2, [r3, #0]
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8fe:	68f9      	ldr	r1, [r7, #12]
 800e900:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e902:	fb01 f303 	mul.w	r3, r1, r3
 800e906:	441a      	add	r2, r3
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	2200      	movs	r2, #0
 800e910:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	681a      	ldr	r2, [r3, #0]
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	681a      	ldr	r2, [r3, #0]
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e922:	3b01      	subs	r3, #1
 800e924:	68f9      	ldr	r1, [r7, #12]
 800e926:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e928:	fb01 f303 	mul.w	r3, r1, r3
 800e92c:	441a      	add	r2, r3
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	22ff      	movs	r2, #255	; 0xff
 800e936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	22ff      	movs	r2, #255	; 0xff
 800e93e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d114      	bne.n	800e972 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	691b      	ldr	r3, [r3, #16]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d01a      	beq.n	800e986 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	3310      	adds	r3, #16
 800e954:	4618      	mov	r0, r3
 800e956:	f001 fd4d 	bl	80103f4 <xTaskRemoveFromEventList>
 800e95a:	4603      	mov	r3, r0
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d012      	beq.n	800e986 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e960:	4b0c      	ldr	r3, [pc, #48]	; (800e994 <xQueueGenericReset+0xcc>)
 800e962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e966:	601a      	str	r2, [r3, #0]
 800e968:	f3bf 8f4f 	dsb	sy
 800e96c:	f3bf 8f6f 	isb	sy
 800e970:	e009      	b.n	800e986 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	3310      	adds	r3, #16
 800e976:	4618      	mov	r0, r3
 800e978:	f7ff fef2 	bl	800e760 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	3324      	adds	r3, #36	; 0x24
 800e980:	4618      	mov	r0, r3
 800e982:	f7ff feed 	bl	800e760 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e986:	f003 f8cd 	bl	8011b24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e98a:	2301      	movs	r3, #1
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	3710      	adds	r7, #16
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}
 800e994:	e000ed04 	.word	0xe000ed04

0800e998 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b08e      	sub	sp, #56	; 0x38
 800e99c:	af02      	add	r7, sp, #8
 800e99e:	60f8      	str	r0, [r7, #12]
 800e9a0:	60b9      	str	r1, [r7, #8]
 800e9a2:	607a      	str	r2, [r7, #4]
 800e9a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d10a      	bne.n	800e9c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9b0:	f383 8811 	msr	BASEPRI, r3
 800e9b4:	f3bf 8f6f 	isb	sy
 800e9b8:	f3bf 8f4f 	dsb	sy
 800e9bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e9be:	bf00      	nop
 800e9c0:	e7fe      	b.n	800e9c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d10a      	bne.n	800e9de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9cc:	f383 8811 	msr	BASEPRI, r3
 800e9d0:	f3bf 8f6f 	isb	sy
 800e9d4:	f3bf 8f4f 	dsb	sy
 800e9d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e9da:	bf00      	nop
 800e9dc:	e7fe      	b.n	800e9dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d002      	beq.n	800e9ea <xQueueGenericCreateStatic+0x52>
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d001      	beq.n	800e9ee <xQueueGenericCreateStatic+0x56>
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	e000      	b.n	800e9f0 <xQueueGenericCreateStatic+0x58>
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d10a      	bne.n	800ea0a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f8:	f383 8811 	msr	BASEPRI, r3
 800e9fc:	f3bf 8f6f 	isb	sy
 800ea00:	f3bf 8f4f 	dsb	sy
 800ea04:	623b      	str	r3, [r7, #32]
}
 800ea06:	bf00      	nop
 800ea08:	e7fe      	b.n	800ea08 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d102      	bne.n	800ea16 <xQueueGenericCreateStatic+0x7e>
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d101      	bne.n	800ea1a <xQueueGenericCreateStatic+0x82>
 800ea16:	2301      	movs	r3, #1
 800ea18:	e000      	b.n	800ea1c <xQueueGenericCreateStatic+0x84>
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d10a      	bne.n	800ea36 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ea20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea24:	f383 8811 	msr	BASEPRI, r3
 800ea28:	f3bf 8f6f 	isb	sy
 800ea2c:	f3bf 8f4f 	dsb	sy
 800ea30:	61fb      	str	r3, [r7, #28]
}
 800ea32:	bf00      	nop
 800ea34:	e7fe      	b.n	800ea34 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ea36:	2350      	movs	r3, #80	; 0x50
 800ea38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	2b50      	cmp	r3, #80	; 0x50
 800ea3e:	d00a      	beq.n	800ea56 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ea40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea44:	f383 8811 	msr	BASEPRI, r3
 800ea48:	f3bf 8f6f 	isb	sy
 800ea4c:	f3bf 8f4f 	dsb	sy
 800ea50:	61bb      	str	r3, [r7, #24]
}
 800ea52:	bf00      	nop
 800ea54:	e7fe      	b.n	800ea54 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ea56:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ea5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d00d      	beq.n	800ea7e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ea62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea64:	2201      	movs	r2, #1
 800ea66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ea6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ea6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea70:	9300      	str	r3, [sp, #0]
 800ea72:	4613      	mov	r3, r2
 800ea74:	687a      	ldr	r2, [r7, #4]
 800ea76:	68b9      	ldr	r1, [r7, #8]
 800ea78:	68f8      	ldr	r0, [r7, #12]
 800ea7a:	f000 f83f 	bl	800eafc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ea7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ea80:	4618      	mov	r0, r3
 800ea82:	3730      	adds	r7, #48	; 0x30
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}

0800ea88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b08a      	sub	sp, #40	; 0x28
 800ea8c:	af02      	add	r7, sp, #8
 800ea8e:	60f8      	str	r0, [r7, #12]
 800ea90:	60b9      	str	r1, [r7, #8]
 800ea92:	4613      	mov	r3, r2
 800ea94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d10a      	bne.n	800eab2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ea9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa0:	f383 8811 	msr	BASEPRI, r3
 800eaa4:	f3bf 8f6f 	isb	sy
 800eaa8:	f3bf 8f4f 	dsb	sy
 800eaac:	613b      	str	r3, [r7, #16]
}
 800eaae:	bf00      	nop
 800eab0:	e7fe      	b.n	800eab0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	68ba      	ldr	r2, [r7, #8]
 800eab6:	fb02 f303 	mul.w	r3, r2, r3
 800eaba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800eabc:	69fb      	ldr	r3, [r7, #28]
 800eabe:	3350      	adds	r3, #80	; 0x50
 800eac0:	4618      	mov	r0, r3
 800eac2:	f003 f921 	bl	8011d08 <pvPortMalloc>
 800eac6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800eac8:	69bb      	ldr	r3, [r7, #24]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d011      	beq.n	800eaf2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800eace:	69bb      	ldr	r3, [r7, #24]
 800ead0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	3350      	adds	r3, #80	; 0x50
 800ead6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ead8:	69bb      	ldr	r3, [r7, #24]
 800eada:	2200      	movs	r2, #0
 800eadc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800eae0:	79fa      	ldrb	r2, [r7, #7]
 800eae2:	69bb      	ldr	r3, [r7, #24]
 800eae4:	9300      	str	r3, [sp, #0]
 800eae6:	4613      	mov	r3, r2
 800eae8:	697a      	ldr	r2, [r7, #20]
 800eaea:	68b9      	ldr	r1, [r7, #8]
 800eaec:	68f8      	ldr	r0, [r7, #12]
 800eaee:	f000 f805 	bl	800eafc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800eaf2:	69bb      	ldr	r3, [r7, #24]
	}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3720      	adds	r7, #32
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}

0800eafc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b084      	sub	sp, #16
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	60f8      	str	r0, [r7, #12]
 800eb04:	60b9      	str	r1, [r7, #8]
 800eb06:	607a      	str	r2, [r7, #4]
 800eb08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d103      	bne.n	800eb18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800eb10:	69bb      	ldr	r3, [r7, #24]
 800eb12:	69ba      	ldr	r2, [r7, #24]
 800eb14:	601a      	str	r2, [r3, #0]
 800eb16:	e002      	b.n	800eb1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800eb18:	69bb      	ldr	r3, [r7, #24]
 800eb1a:	687a      	ldr	r2, [r7, #4]
 800eb1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800eb1e:	69bb      	ldr	r3, [r7, #24]
 800eb20:	68fa      	ldr	r2, [r7, #12]
 800eb22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800eb24:	69bb      	ldr	r3, [r7, #24]
 800eb26:	68ba      	ldr	r2, [r7, #8]
 800eb28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800eb2a:	2101      	movs	r1, #1
 800eb2c:	69b8      	ldr	r0, [r7, #24]
 800eb2e:	f7ff fecb 	bl	800e8c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800eb32:	69bb      	ldr	r3, [r7, #24]
 800eb34:	78fa      	ldrb	r2, [r7, #3]
 800eb36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800eb3a:	bf00      	nop
 800eb3c:	3710      	adds	r7, #16
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd80      	pop	{r7, pc}

0800eb42 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800eb42:	b580      	push	{r7, lr}
 800eb44:	b08a      	sub	sp, #40	; 0x28
 800eb46:	af02      	add	r7, sp, #8
 800eb48:	60f8      	str	r0, [r7, #12]
 800eb4a:	60b9      	str	r1, [r7, #8]
 800eb4c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d10a      	bne.n	800eb6a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800eb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb58:	f383 8811 	msr	BASEPRI, r3
 800eb5c:	f3bf 8f6f 	isb	sy
 800eb60:	f3bf 8f4f 	dsb	sy
 800eb64:	61bb      	str	r3, [r7, #24]
}
 800eb66:	bf00      	nop
 800eb68:	e7fe      	b.n	800eb68 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800eb6a:	68ba      	ldr	r2, [r7, #8]
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d90a      	bls.n	800eb88 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800eb72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb76:	f383 8811 	msr	BASEPRI, r3
 800eb7a:	f3bf 8f6f 	isb	sy
 800eb7e:	f3bf 8f4f 	dsb	sy
 800eb82:	617b      	str	r3, [r7, #20]
}
 800eb84:	bf00      	nop
 800eb86:	e7fe      	b.n	800eb86 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800eb88:	2302      	movs	r3, #2
 800eb8a:	9300      	str	r3, [sp, #0]
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	2100      	movs	r1, #0
 800eb92:	68f8      	ldr	r0, [r7, #12]
 800eb94:	f7ff ff00 	bl	800e998 <xQueueGenericCreateStatic>
 800eb98:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800eb9a:	69fb      	ldr	r3, [r7, #28]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d002      	beq.n	800eba6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800eba0:	69fb      	ldr	r3, [r7, #28]
 800eba2:	68ba      	ldr	r2, [r7, #8]
 800eba4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800eba6:	69fb      	ldr	r3, [r7, #28]
	}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3720      	adds	r7, #32
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}

0800ebb0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b086      	sub	sp, #24
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d10a      	bne.n	800ebd6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800ebc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc4:	f383 8811 	msr	BASEPRI, r3
 800ebc8:	f3bf 8f6f 	isb	sy
 800ebcc:	f3bf 8f4f 	dsb	sy
 800ebd0:	613b      	str	r3, [r7, #16]
}
 800ebd2:	bf00      	nop
 800ebd4:	e7fe      	b.n	800ebd4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ebd6:	683a      	ldr	r2, [r7, #0]
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d90a      	bls.n	800ebf4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800ebde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebe2:	f383 8811 	msr	BASEPRI, r3
 800ebe6:	f3bf 8f6f 	isb	sy
 800ebea:	f3bf 8f4f 	dsb	sy
 800ebee:	60fb      	str	r3, [r7, #12]
}
 800ebf0:	bf00      	nop
 800ebf2:	e7fe      	b.n	800ebf2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ebf4:	2202      	movs	r2, #2
 800ebf6:	2100      	movs	r1, #0
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f7ff ff45 	bl	800ea88 <xQueueGenericCreate>
 800ebfe:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d002      	beq.n	800ec0c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	683a      	ldr	r2, [r7, #0]
 800ec0a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ec0c:	697b      	ldr	r3, [r7, #20]
	}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3718      	adds	r7, #24
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}
	...

0800ec18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b08e      	sub	sp, #56	; 0x38
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	60f8      	str	r0, [r7, #12]
 800ec20:	60b9      	str	r1, [r7, #8]
 800ec22:	607a      	str	r2, [r7, #4]
 800ec24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ec26:	2300      	movs	r3, #0
 800ec28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ec2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d10a      	bne.n	800ec4a <xQueueGenericSend+0x32>
	__asm volatile
 800ec34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec38:	f383 8811 	msr	BASEPRI, r3
 800ec3c:	f3bf 8f6f 	isb	sy
 800ec40:	f3bf 8f4f 	dsb	sy
 800ec44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ec46:	bf00      	nop
 800ec48:	e7fe      	b.n	800ec48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d103      	bne.n	800ec58 <xQueueGenericSend+0x40>
 800ec50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d101      	bne.n	800ec5c <xQueueGenericSend+0x44>
 800ec58:	2301      	movs	r3, #1
 800ec5a:	e000      	b.n	800ec5e <xQueueGenericSend+0x46>
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d10a      	bne.n	800ec78 <xQueueGenericSend+0x60>
	__asm volatile
 800ec62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec66:	f383 8811 	msr	BASEPRI, r3
 800ec6a:	f3bf 8f6f 	isb	sy
 800ec6e:	f3bf 8f4f 	dsb	sy
 800ec72:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ec74:	bf00      	nop
 800ec76:	e7fe      	b.n	800ec76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	2b02      	cmp	r3, #2
 800ec7c:	d103      	bne.n	800ec86 <xQueueGenericSend+0x6e>
 800ec7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec82:	2b01      	cmp	r3, #1
 800ec84:	d101      	bne.n	800ec8a <xQueueGenericSend+0x72>
 800ec86:	2301      	movs	r3, #1
 800ec88:	e000      	b.n	800ec8c <xQueueGenericSend+0x74>
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d10a      	bne.n	800eca6 <xQueueGenericSend+0x8e>
	__asm volatile
 800ec90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec94:	f383 8811 	msr	BASEPRI, r3
 800ec98:	f3bf 8f6f 	isb	sy
 800ec9c:	f3bf 8f4f 	dsb	sy
 800eca0:	623b      	str	r3, [r7, #32]
}
 800eca2:	bf00      	nop
 800eca4:	e7fe      	b.n	800eca4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eca6:	f001 fd77 	bl	8010798 <xTaskGetSchedulerState>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d102      	bne.n	800ecb6 <xQueueGenericSend+0x9e>
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d101      	bne.n	800ecba <xQueueGenericSend+0xa2>
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	e000      	b.n	800ecbc <xQueueGenericSend+0xa4>
 800ecba:	2300      	movs	r3, #0
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d10a      	bne.n	800ecd6 <xQueueGenericSend+0xbe>
	__asm volatile
 800ecc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecc4:	f383 8811 	msr	BASEPRI, r3
 800ecc8:	f3bf 8f6f 	isb	sy
 800eccc:	f3bf 8f4f 	dsb	sy
 800ecd0:	61fb      	str	r3, [r7, #28]
}
 800ecd2:	bf00      	nop
 800ecd4:	e7fe      	b.n	800ecd4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ecd6:	f002 fef5 	bl	8011ac4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ecda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ecde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ece2:	429a      	cmp	r2, r3
 800ece4:	d302      	bcc.n	800ecec <xQueueGenericSend+0xd4>
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	2b02      	cmp	r3, #2
 800ecea:	d129      	bne.n	800ed40 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ecec:	683a      	ldr	r2, [r7, #0]
 800ecee:	68b9      	ldr	r1, [r7, #8]
 800ecf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ecf2:	f000 fc5e 	bl	800f5b2 <prvCopyDataToQueue>
 800ecf6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ecf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d010      	beq.n	800ed22 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed02:	3324      	adds	r3, #36	; 0x24
 800ed04:	4618      	mov	r0, r3
 800ed06:	f001 fb75 	bl	80103f4 <xTaskRemoveFromEventList>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d013      	beq.n	800ed38 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ed10:	4b3f      	ldr	r3, [pc, #252]	; (800ee10 <xQueueGenericSend+0x1f8>)
 800ed12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed16:	601a      	str	r2, [r3, #0]
 800ed18:	f3bf 8f4f 	dsb	sy
 800ed1c:	f3bf 8f6f 	isb	sy
 800ed20:	e00a      	b.n	800ed38 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ed22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d007      	beq.n	800ed38 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ed28:	4b39      	ldr	r3, [pc, #228]	; (800ee10 <xQueueGenericSend+0x1f8>)
 800ed2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed2e:	601a      	str	r2, [r3, #0]
 800ed30:	f3bf 8f4f 	dsb	sy
 800ed34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ed38:	f002 fef4 	bl	8011b24 <vPortExitCritical>
				return pdPASS;
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	e063      	b.n	800ee08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d103      	bne.n	800ed4e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ed46:	f002 feed 	bl	8011b24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	e05c      	b.n	800ee08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ed4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d106      	bne.n	800ed62 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ed54:	f107 0314 	add.w	r3, r7, #20
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f001 fbaf 	bl	80104bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ed5e:	2301      	movs	r3, #1
 800ed60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ed62:	f002 fedf 	bl	8011b24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ed66:	f001 f909 	bl	800ff7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ed6a:	f002 feab 	bl	8011ac4 <vPortEnterCritical>
 800ed6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed74:	b25b      	sxtb	r3, r3
 800ed76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed7a:	d103      	bne.n	800ed84 <xQueueGenericSend+0x16c>
 800ed7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7e:	2200      	movs	r2, #0
 800ed80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed8a:	b25b      	sxtb	r3, r3
 800ed8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed90:	d103      	bne.n	800ed9a <xQueueGenericSend+0x182>
 800ed92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed94:	2200      	movs	r2, #0
 800ed96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ed9a:	f002 fec3 	bl	8011b24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ed9e:	1d3a      	adds	r2, r7, #4
 800eda0:	f107 0314 	add.w	r3, r7, #20
 800eda4:	4611      	mov	r1, r2
 800eda6:	4618      	mov	r0, r3
 800eda8:	f001 fb9e 	bl	80104e8 <xTaskCheckForTimeOut>
 800edac:	4603      	mov	r3, r0
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d124      	bne.n	800edfc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800edb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800edb4:	f000 fcf5 	bl	800f7a2 <prvIsQueueFull>
 800edb8:	4603      	mov	r3, r0
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d018      	beq.n	800edf0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800edbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc0:	3310      	adds	r3, #16
 800edc2:	687a      	ldr	r2, [r7, #4]
 800edc4:	4611      	mov	r1, r2
 800edc6:	4618      	mov	r0, r3
 800edc8:	f001 fac4 	bl	8010354 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800edcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800edce:	f000 fc80 	bl	800f6d2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800edd2:	f001 f8e1 	bl	800ff98 <xTaskResumeAll>
 800edd6:	4603      	mov	r3, r0
 800edd8:	2b00      	cmp	r3, #0
 800edda:	f47f af7c 	bne.w	800ecd6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800edde:	4b0c      	ldr	r3, [pc, #48]	; (800ee10 <xQueueGenericSend+0x1f8>)
 800ede0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ede4:	601a      	str	r2, [r3, #0]
 800ede6:	f3bf 8f4f 	dsb	sy
 800edea:	f3bf 8f6f 	isb	sy
 800edee:	e772      	b.n	800ecd6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800edf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800edf2:	f000 fc6e 	bl	800f6d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800edf6:	f001 f8cf 	bl	800ff98 <xTaskResumeAll>
 800edfa:	e76c      	b.n	800ecd6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800edfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800edfe:	f000 fc68 	bl	800f6d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ee02:	f001 f8c9 	bl	800ff98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ee06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ee08:	4618      	mov	r0, r3
 800ee0a:	3738      	adds	r7, #56	; 0x38
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}
 800ee10:	e000ed04 	.word	0xe000ed04

0800ee14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b090      	sub	sp, #64	; 0x40
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	60f8      	str	r0, [r7, #12]
 800ee1c:	60b9      	str	r1, [r7, #8]
 800ee1e:	607a      	str	r2, [r7, #4]
 800ee20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ee26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d10a      	bne.n	800ee42 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ee2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee30:	f383 8811 	msr	BASEPRI, r3
 800ee34:	f3bf 8f6f 	isb	sy
 800ee38:	f3bf 8f4f 	dsb	sy
 800ee3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ee3e:	bf00      	nop
 800ee40:	e7fe      	b.n	800ee40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d103      	bne.n	800ee50 <xQueueGenericSendFromISR+0x3c>
 800ee48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d101      	bne.n	800ee54 <xQueueGenericSendFromISR+0x40>
 800ee50:	2301      	movs	r3, #1
 800ee52:	e000      	b.n	800ee56 <xQueueGenericSendFromISR+0x42>
 800ee54:	2300      	movs	r3, #0
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d10a      	bne.n	800ee70 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ee5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee5e:	f383 8811 	msr	BASEPRI, r3
 800ee62:	f3bf 8f6f 	isb	sy
 800ee66:	f3bf 8f4f 	dsb	sy
 800ee6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ee6c:	bf00      	nop
 800ee6e:	e7fe      	b.n	800ee6e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	2b02      	cmp	r3, #2
 800ee74:	d103      	bne.n	800ee7e <xQueueGenericSendFromISR+0x6a>
 800ee76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee7a:	2b01      	cmp	r3, #1
 800ee7c:	d101      	bne.n	800ee82 <xQueueGenericSendFromISR+0x6e>
 800ee7e:	2301      	movs	r3, #1
 800ee80:	e000      	b.n	800ee84 <xQueueGenericSendFromISR+0x70>
 800ee82:	2300      	movs	r3, #0
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d10a      	bne.n	800ee9e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ee88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee8c:	f383 8811 	msr	BASEPRI, r3
 800ee90:	f3bf 8f6f 	isb	sy
 800ee94:	f3bf 8f4f 	dsb	sy
 800ee98:	623b      	str	r3, [r7, #32]
}
 800ee9a:	bf00      	nop
 800ee9c:	e7fe      	b.n	800ee9c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ee9e:	f002 fef3 	bl	8011c88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800eea2:	f3ef 8211 	mrs	r2, BASEPRI
 800eea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeaa:	f383 8811 	msr	BASEPRI, r3
 800eeae:	f3bf 8f6f 	isb	sy
 800eeb2:	f3bf 8f4f 	dsb	sy
 800eeb6:	61fa      	str	r2, [r7, #28]
 800eeb8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800eeba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eebc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d302      	bcc.n	800eed0 <xQueueGenericSendFromISR+0xbc>
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	2b02      	cmp	r3, #2
 800eece:	d12f      	bne.n	800ef30 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800eed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eeda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eede:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eee0:	683a      	ldr	r2, [r7, #0]
 800eee2:	68b9      	ldr	r1, [r7, #8]
 800eee4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eee6:	f000 fb64 	bl	800f5b2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800eeea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800eeee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eef2:	d112      	bne.n	800ef1a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d016      	beq.n	800ef2a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eefe:	3324      	adds	r3, #36	; 0x24
 800ef00:	4618      	mov	r0, r3
 800ef02:	f001 fa77 	bl	80103f4 <xTaskRemoveFromEventList>
 800ef06:	4603      	mov	r3, r0
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d00e      	beq.n	800ef2a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d00b      	beq.n	800ef2a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2201      	movs	r2, #1
 800ef16:	601a      	str	r2, [r3, #0]
 800ef18:	e007      	b.n	800ef2a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ef1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ef1e:	3301      	adds	r3, #1
 800ef20:	b2db      	uxtb	r3, r3
 800ef22:	b25a      	sxtb	r2, r3
 800ef24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ef2a:	2301      	movs	r3, #1
 800ef2c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ef2e:	e001      	b.n	800ef34 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ef30:	2300      	movs	r3, #0
 800ef32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef36:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ef3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ef40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	3740      	adds	r7, #64	; 0x40
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}

0800ef4a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ef4a:	b580      	push	{r7, lr}
 800ef4c:	b08e      	sub	sp, #56	; 0x38
 800ef4e:	af00      	add	r7, sp, #0
 800ef50:	6078      	str	r0, [r7, #4]
 800ef52:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ef58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d10a      	bne.n	800ef74 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ef5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef62:	f383 8811 	msr	BASEPRI, r3
 800ef66:	f3bf 8f6f 	isb	sy
 800ef6a:	f3bf 8f4f 	dsb	sy
 800ef6e:	623b      	str	r3, [r7, #32]
}
 800ef70:	bf00      	nop
 800ef72:	e7fe      	b.n	800ef72 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ef74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d00a      	beq.n	800ef92 <xQueueGiveFromISR+0x48>
	__asm volatile
 800ef7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef80:	f383 8811 	msr	BASEPRI, r3
 800ef84:	f3bf 8f6f 	isb	sy
 800ef88:	f3bf 8f4f 	dsb	sy
 800ef8c:	61fb      	str	r3, [r7, #28]
}
 800ef8e:	bf00      	nop
 800ef90:	e7fe      	b.n	800ef90 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ef92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d103      	bne.n	800efa2 <xQueueGiveFromISR+0x58>
 800ef9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef9c:	689b      	ldr	r3, [r3, #8]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d101      	bne.n	800efa6 <xQueueGiveFromISR+0x5c>
 800efa2:	2301      	movs	r3, #1
 800efa4:	e000      	b.n	800efa8 <xQueueGiveFromISR+0x5e>
 800efa6:	2300      	movs	r3, #0
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d10a      	bne.n	800efc2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800efac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efb0:	f383 8811 	msr	BASEPRI, r3
 800efb4:	f3bf 8f6f 	isb	sy
 800efb8:	f3bf 8f4f 	dsb	sy
 800efbc:	61bb      	str	r3, [r7, #24]
}
 800efbe:	bf00      	nop
 800efc0:	e7fe      	b.n	800efc0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800efc2:	f002 fe61 	bl	8011c88 <vPortValidateInterruptPriority>
	__asm volatile
 800efc6:	f3ef 8211 	mrs	r2, BASEPRI
 800efca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efce:	f383 8811 	msr	BASEPRI, r3
 800efd2:	f3bf 8f6f 	isb	sy
 800efd6:	f3bf 8f4f 	dsb	sy
 800efda:	617a      	str	r2, [r7, #20]
 800efdc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800efde:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800efe0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800efe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efe6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800efe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efee:	429a      	cmp	r2, r3
 800eff0:	d22b      	bcs.n	800f04a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800eff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800effc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800effe:	1c5a      	adds	r2, r3, #1
 800f000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f002:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f004:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f00c:	d112      	bne.n	800f034 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f012:	2b00      	cmp	r3, #0
 800f014:	d016      	beq.n	800f044 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f018:	3324      	adds	r3, #36	; 0x24
 800f01a:	4618      	mov	r0, r3
 800f01c:	f001 f9ea 	bl	80103f4 <xTaskRemoveFromEventList>
 800f020:	4603      	mov	r3, r0
 800f022:	2b00      	cmp	r3, #0
 800f024:	d00e      	beq.n	800f044 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d00b      	beq.n	800f044 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	2201      	movs	r2, #1
 800f030:	601a      	str	r2, [r3, #0]
 800f032:	e007      	b.n	800f044 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f038:	3301      	adds	r3, #1
 800f03a:	b2db      	uxtb	r3, r3
 800f03c:	b25a      	sxtb	r2, r3
 800f03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f044:	2301      	movs	r3, #1
 800f046:	637b      	str	r3, [r7, #52]	; 0x34
 800f048:	e001      	b.n	800f04e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f04a:	2300      	movs	r3, #0
 800f04c:	637b      	str	r3, [r7, #52]	; 0x34
 800f04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f050:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	f383 8811 	msr	BASEPRI, r3
}
 800f058:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f05c:	4618      	mov	r0, r3
 800f05e:	3738      	adds	r7, #56	; 0x38
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}

0800f064 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b08c      	sub	sp, #48	; 0x30
 800f068:	af00      	add	r7, sp, #0
 800f06a:	60f8      	str	r0, [r7, #12]
 800f06c:	60b9      	str	r1, [r7, #8]
 800f06e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f070:	2300      	movs	r3, #0
 800f072:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d10a      	bne.n	800f094 <xQueueReceive+0x30>
	__asm volatile
 800f07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f082:	f383 8811 	msr	BASEPRI, r3
 800f086:	f3bf 8f6f 	isb	sy
 800f08a:	f3bf 8f4f 	dsb	sy
 800f08e:	623b      	str	r3, [r7, #32]
}
 800f090:	bf00      	nop
 800f092:	e7fe      	b.n	800f092 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d103      	bne.n	800f0a2 <xQueueReceive+0x3e>
 800f09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f09c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d101      	bne.n	800f0a6 <xQueueReceive+0x42>
 800f0a2:	2301      	movs	r3, #1
 800f0a4:	e000      	b.n	800f0a8 <xQueueReceive+0x44>
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d10a      	bne.n	800f0c2 <xQueueReceive+0x5e>
	__asm volatile
 800f0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0b0:	f383 8811 	msr	BASEPRI, r3
 800f0b4:	f3bf 8f6f 	isb	sy
 800f0b8:	f3bf 8f4f 	dsb	sy
 800f0bc:	61fb      	str	r3, [r7, #28]
}
 800f0be:	bf00      	nop
 800f0c0:	e7fe      	b.n	800f0c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f0c2:	f001 fb69 	bl	8010798 <xTaskGetSchedulerState>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d102      	bne.n	800f0d2 <xQueueReceive+0x6e>
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d101      	bne.n	800f0d6 <xQueueReceive+0x72>
 800f0d2:	2301      	movs	r3, #1
 800f0d4:	e000      	b.n	800f0d8 <xQueueReceive+0x74>
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d10a      	bne.n	800f0f2 <xQueueReceive+0x8e>
	__asm volatile
 800f0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e0:	f383 8811 	msr	BASEPRI, r3
 800f0e4:	f3bf 8f6f 	isb	sy
 800f0e8:	f3bf 8f4f 	dsb	sy
 800f0ec:	61bb      	str	r3, [r7, #24]
}
 800f0ee:	bf00      	nop
 800f0f0:	e7fe      	b.n	800f0f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f0f2:	f002 fce7 	bl	8011ac4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d01f      	beq.n	800f142 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f102:	68b9      	ldr	r1, [r7, #8]
 800f104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f106:	f000 fabe 	bl	800f686 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f10c:	1e5a      	subs	r2, r3, #1
 800f10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f110:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f114:	691b      	ldr	r3, [r3, #16]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d00f      	beq.n	800f13a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f11c:	3310      	adds	r3, #16
 800f11e:	4618      	mov	r0, r3
 800f120:	f001 f968 	bl	80103f4 <xTaskRemoveFromEventList>
 800f124:	4603      	mov	r3, r0
 800f126:	2b00      	cmp	r3, #0
 800f128:	d007      	beq.n	800f13a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f12a:	4b3d      	ldr	r3, [pc, #244]	; (800f220 <xQueueReceive+0x1bc>)
 800f12c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f130:	601a      	str	r2, [r3, #0]
 800f132:	f3bf 8f4f 	dsb	sy
 800f136:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f13a:	f002 fcf3 	bl	8011b24 <vPortExitCritical>
				return pdPASS;
 800f13e:	2301      	movs	r3, #1
 800f140:	e069      	b.n	800f216 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d103      	bne.n	800f150 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f148:	f002 fcec 	bl	8011b24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f14c:	2300      	movs	r3, #0
 800f14e:	e062      	b.n	800f216 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f152:	2b00      	cmp	r3, #0
 800f154:	d106      	bne.n	800f164 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f156:	f107 0310 	add.w	r3, r7, #16
 800f15a:	4618      	mov	r0, r3
 800f15c:	f001 f9ae 	bl	80104bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f160:	2301      	movs	r3, #1
 800f162:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f164:	f002 fcde 	bl	8011b24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f168:	f000 ff08 	bl	800ff7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f16c:	f002 fcaa 	bl	8011ac4 <vPortEnterCritical>
 800f170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f172:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f176:	b25b      	sxtb	r3, r3
 800f178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f17c:	d103      	bne.n	800f186 <xQueueReceive+0x122>
 800f17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f180:	2200      	movs	r2, #0
 800f182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f188:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f18c:	b25b      	sxtb	r3, r3
 800f18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f192:	d103      	bne.n	800f19c <xQueueReceive+0x138>
 800f194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f196:	2200      	movs	r2, #0
 800f198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f19c:	f002 fcc2 	bl	8011b24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f1a0:	1d3a      	adds	r2, r7, #4
 800f1a2:	f107 0310 	add.w	r3, r7, #16
 800f1a6:	4611      	mov	r1, r2
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f001 f99d 	bl	80104e8 <xTaskCheckForTimeOut>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d123      	bne.n	800f1fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f1b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1b6:	f000 fade 	bl	800f776 <prvIsQueueEmpty>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d017      	beq.n	800f1f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1c2:	3324      	adds	r3, #36	; 0x24
 800f1c4:	687a      	ldr	r2, [r7, #4]
 800f1c6:	4611      	mov	r1, r2
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f001 f8c3 	bl	8010354 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f1ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1d0:	f000 fa7f 	bl	800f6d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f1d4:	f000 fee0 	bl	800ff98 <xTaskResumeAll>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d189      	bne.n	800f0f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f1de:	4b10      	ldr	r3, [pc, #64]	; (800f220 <xQueueReceive+0x1bc>)
 800f1e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1e4:	601a      	str	r2, [r3, #0]
 800f1e6:	f3bf 8f4f 	dsb	sy
 800f1ea:	f3bf 8f6f 	isb	sy
 800f1ee:	e780      	b.n	800f0f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f1f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1f2:	f000 fa6e 	bl	800f6d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f1f6:	f000 fecf 	bl	800ff98 <xTaskResumeAll>
 800f1fa:	e77a      	b.n	800f0f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f1fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1fe:	f000 fa68 	bl	800f6d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f202:	f000 fec9 	bl	800ff98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f208:	f000 fab5 	bl	800f776 <prvIsQueueEmpty>
 800f20c:	4603      	mov	r3, r0
 800f20e:	2b00      	cmp	r3, #0
 800f210:	f43f af6f 	beq.w	800f0f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f214:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f216:	4618      	mov	r0, r3
 800f218:	3730      	adds	r7, #48	; 0x30
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}
 800f21e:	bf00      	nop
 800f220:	e000ed04 	.word	0xe000ed04

0800f224 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b08e      	sub	sp, #56	; 0x38
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
 800f22c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f22e:	2300      	movs	r3, #0
 800f230:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f236:	2300      	movs	r3, #0
 800f238:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d10a      	bne.n	800f256 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800f240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f244:	f383 8811 	msr	BASEPRI, r3
 800f248:	f3bf 8f6f 	isb	sy
 800f24c:	f3bf 8f4f 	dsb	sy
 800f250:	623b      	str	r3, [r7, #32]
}
 800f252:	bf00      	nop
 800f254:	e7fe      	b.n	800f254 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d00a      	beq.n	800f274 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800f25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f262:	f383 8811 	msr	BASEPRI, r3
 800f266:	f3bf 8f6f 	isb	sy
 800f26a:	f3bf 8f4f 	dsb	sy
 800f26e:	61fb      	str	r3, [r7, #28]
}
 800f270:	bf00      	nop
 800f272:	e7fe      	b.n	800f272 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f274:	f001 fa90 	bl	8010798 <xTaskGetSchedulerState>
 800f278:	4603      	mov	r3, r0
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d102      	bne.n	800f284 <xQueueSemaphoreTake+0x60>
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d101      	bne.n	800f288 <xQueueSemaphoreTake+0x64>
 800f284:	2301      	movs	r3, #1
 800f286:	e000      	b.n	800f28a <xQueueSemaphoreTake+0x66>
 800f288:	2300      	movs	r3, #0
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d10a      	bne.n	800f2a4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800f28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f292:	f383 8811 	msr	BASEPRI, r3
 800f296:	f3bf 8f6f 	isb	sy
 800f29a:	f3bf 8f4f 	dsb	sy
 800f29e:	61bb      	str	r3, [r7, #24]
}
 800f2a0:	bf00      	nop
 800f2a2:	e7fe      	b.n	800f2a2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f2a4:	f002 fc0e 	bl	8011ac4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d024      	beq.n	800f2fe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b6:	1e5a      	subs	r2, r3, #1
 800f2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d104      	bne.n	800f2ce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f2c4:	f001 fbde 	bl	8010a84 <pvTaskIncrementMutexHeldCount>
 800f2c8:	4602      	mov	r2, r0
 800f2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2cc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d0:	691b      	ldr	r3, [r3, #16]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d00f      	beq.n	800f2f6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d8:	3310      	adds	r3, #16
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f001 f88a 	bl	80103f4 <xTaskRemoveFromEventList>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d007      	beq.n	800f2f6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f2e6:	4b54      	ldr	r3, [pc, #336]	; (800f438 <xQueueSemaphoreTake+0x214>)
 800f2e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2ec:	601a      	str	r2, [r3, #0]
 800f2ee:	f3bf 8f4f 	dsb	sy
 800f2f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f2f6:	f002 fc15 	bl	8011b24 <vPortExitCritical>
				return pdPASS;
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	e097      	b.n	800f42e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d111      	bne.n	800f328 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f306:	2b00      	cmp	r3, #0
 800f308:	d00a      	beq.n	800f320 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800f30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f30e:	f383 8811 	msr	BASEPRI, r3
 800f312:	f3bf 8f6f 	isb	sy
 800f316:	f3bf 8f4f 	dsb	sy
 800f31a:	617b      	str	r3, [r7, #20]
}
 800f31c:	bf00      	nop
 800f31e:	e7fe      	b.n	800f31e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f320:	f002 fc00 	bl	8011b24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f324:	2300      	movs	r3, #0
 800f326:	e082      	b.n	800f42e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d106      	bne.n	800f33c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f32e:	f107 030c 	add.w	r3, r7, #12
 800f332:	4618      	mov	r0, r3
 800f334:	f001 f8c2 	bl	80104bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f338:	2301      	movs	r3, #1
 800f33a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f33c:	f002 fbf2 	bl	8011b24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f340:	f000 fe1c 	bl	800ff7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f344:	f002 fbbe 	bl	8011ac4 <vPortEnterCritical>
 800f348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f34a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f34e:	b25b      	sxtb	r3, r3
 800f350:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f354:	d103      	bne.n	800f35e <xQueueSemaphoreTake+0x13a>
 800f356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f358:	2200      	movs	r2, #0
 800f35a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f360:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f364:	b25b      	sxtb	r3, r3
 800f366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f36a:	d103      	bne.n	800f374 <xQueueSemaphoreTake+0x150>
 800f36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f36e:	2200      	movs	r2, #0
 800f370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f374:	f002 fbd6 	bl	8011b24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f378:	463a      	mov	r2, r7
 800f37a:	f107 030c 	add.w	r3, r7, #12
 800f37e:	4611      	mov	r1, r2
 800f380:	4618      	mov	r0, r3
 800f382:	f001 f8b1 	bl	80104e8 <xTaskCheckForTimeOut>
 800f386:	4603      	mov	r3, r0
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d132      	bne.n	800f3f2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f38c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f38e:	f000 f9f2 	bl	800f776 <prvIsQueueEmpty>
 800f392:	4603      	mov	r3, r0
 800f394:	2b00      	cmp	r3, #0
 800f396:	d026      	beq.n	800f3e6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d109      	bne.n	800f3b4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800f3a0:	f002 fb90 	bl	8011ac4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a6:	689b      	ldr	r3, [r3, #8]
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f001 fa13 	bl	80107d4 <xTaskPriorityInherit>
 800f3ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f3b0:	f002 fbb8 	bl	8011b24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b6:	3324      	adds	r3, #36	; 0x24
 800f3b8:	683a      	ldr	r2, [r7, #0]
 800f3ba:	4611      	mov	r1, r2
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f000 ffc9 	bl	8010354 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f3c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3c4:	f000 f985 	bl	800f6d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f3c8:	f000 fde6 	bl	800ff98 <xTaskResumeAll>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	f47f af68 	bne.w	800f2a4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f3d4:	4b18      	ldr	r3, [pc, #96]	; (800f438 <xQueueSemaphoreTake+0x214>)
 800f3d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3da:	601a      	str	r2, [r3, #0]
 800f3dc:	f3bf 8f4f 	dsb	sy
 800f3e0:	f3bf 8f6f 	isb	sy
 800f3e4:	e75e      	b.n	800f2a4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f3e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3e8:	f000 f973 	bl	800f6d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f3ec:	f000 fdd4 	bl	800ff98 <xTaskResumeAll>
 800f3f0:	e758      	b.n	800f2a4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f3f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3f4:	f000 f96d 	bl	800f6d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f3f8:	f000 fdce 	bl	800ff98 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f3fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3fe:	f000 f9ba 	bl	800f776 <prvIsQueueEmpty>
 800f402:	4603      	mov	r3, r0
 800f404:	2b00      	cmp	r3, #0
 800f406:	f43f af4d 	beq.w	800f2a4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d00d      	beq.n	800f42c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800f410:	f002 fb58 	bl	8011ac4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f414:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f416:	f000 f8b4 	bl	800f582 <prvGetDisinheritPriorityAfterTimeout>
 800f41a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f41e:	689b      	ldr	r3, [r3, #8]
 800f420:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f422:	4618      	mov	r0, r3
 800f424:	f001 faac 	bl	8010980 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f428:	f002 fb7c 	bl	8011b24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f42c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f42e:	4618      	mov	r0, r3
 800f430:	3738      	adds	r7, #56	; 0x38
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}
 800f436:	bf00      	nop
 800f438:	e000ed04 	.word	0xe000ed04

0800f43c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b08e      	sub	sp, #56	; 0x38
 800f440:	af00      	add	r7, sp, #0
 800f442:	60f8      	str	r0, [r7, #12]
 800f444:	60b9      	str	r1, [r7, #8]
 800f446:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d10a      	bne.n	800f468 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f456:	f383 8811 	msr	BASEPRI, r3
 800f45a:	f3bf 8f6f 	isb	sy
 800f45e:	f3bf 8f4f 	dsb	sy
 800f462:	623b      	str	r3, [r7, #32]
}
 800f464:	bf00      	nop
 800f466:	e7fe      	b.n	800f466 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d103      	bne.n	800f476 <xQueueReceiveFromISR+0x3a>
 800f46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f472:	2b00      	cmp	r3, #0
 800f474:	d101      	bne.n	800f47a <xQueueReceiveFromISR+0x3e>
 800f476:	2301      	movs	r3, #1
 800f478:	e000      	b.n	800f47c <xQueueReceiveFromISR+0x40>
 800f47a:	2300      	movs	r3, #0
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d10a      	bne.n	800f496 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f484:	f383 8811 	msr	BASEPRI, r3
 800f488:	f3bf 8f6f 	isb	sy
 800f48c:	f3bf 8f4f 	dsb	sy
 800f490:	61fb      	str	r3, [r7, #28]
}
 800f492:	bf00      	nop
 800f494:	e7fe      	b.n	800f494 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f496:	f002 fbf7 	bl	8011c88 <vPortValidateInterruptPriority>
	__asm volatile
 800f49a:	f3ef 8211 	mrs	r2, BASEPRI
 800f49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4a2:	f383 8811 	msr	BASEPRI, r3
 800f4a6:	f3bf 8f6f 	isb	sy
 800f4aa:	f3bf 8f4f 	dsb	sy
 800f4ae:	61ba      	str	r2, [r7, #24]
 800f4b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f4b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d02f      	beq.n	800f522 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f4c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f4cc:	68b9      	ldr	r1, [r7, #8]
 800f4ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f4d0:	f000 f8d9 	bl	800f686 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d6:	1e5a      	subs	r2, r3, #1
 800f4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f4dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f4e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4e4:	d112      	bne.n	800f50c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e8:	691b      	ldr	r3, [r3, #16]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d016      	beq.n	800f51c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f0:	3310      	adds	r3, #16
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f000 ff7e 	bl	80103f4 <xTaskRemoveFromEventList>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d00e      	beq.n	800f51c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d00b      	beq.n	800f51c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2201      	movs	r2, #1
 800f508:	601a      	str	r2, [r3, #0]
 800f50a:	e007      	b.n	800f51c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f50c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f510:	3301      	adds	r3, #1
 800f512:	b2db      	uxtb	r3, r3
 800f514:	b25a      	sxtb	r2, r3
 800f516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f51c:	2301      	movs	r3, #1
 800f51e:	637b      	str	r3, [r7, #52]	; 0x34
 800f520:	e001      	b.n	800f526 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f522:	2300      	movs	r3, #0
 800f524:	637b      	str	r3, [r7, #52]	; 0x34
 800f526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f528:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f52a:	693b      	ldr	r3, [r7, #16]
 800f52c:	f383 8811 	msr	BASEPRI, r3
}
 800f530:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f534:	4618      	mov	r0, r3
 800f536:	3738      	adds	r7, #56	; 0x38
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}

0800f53c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b084      	sub	sp, #16
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d10a      	bne.n	800f564 <vQueueDelete+0x28>
	__asm volatile
 800f54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f552:	f383 8811 	msr	BASEPRI, r3
 800f556:	f3bf 8f6f 	isb	sy
 800f55a:	f3bf 8f4f 	dsb	sy
 800f55e:	60bb      	str	r3, [r7, #8]
}
 800f560:	bf00      	nop
 800f562:	e7fe      	b.n	800f562 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f564:	68f8      	ldr	r0, [r7, #12]
 800f566:	f000 f95f 	bl	800f828 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f570:	2b00      	cmp	r3, #0
 800f572:	d102      	bne.n	800f57a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800f574:	68f8      	ldr	r0, [r7, #12]
 800f576:	f002 fc93 	bl	8011ea0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f57a:	bf00      	nop
 800f57c:	3710      	adds	r7, #16
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}

0800f582 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f582:	b480      	push	{r7}
 800f584:	b085      	sub	sp, #20
 800f586:	af00      	add	r7, sp, #0
 800f588:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d006      	beq.n	800f5a0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f59c:	60fb      	str	r3, [r7, #12]
 800f59e:	e001      	b.n	800f5a4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
	}
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	3714      	adds	r7, #20
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b0:	4770      	bx	lr

0800f5b2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f5b2:	b580      	push	{r7, lr}
 800f5b4:	b086      	sub	sp, #24
 800f5b6:	af00      	add	r7, sp, #0
 800f5b8:	60f8      	str	r0, [r7, #12]
 800f5ba:	60b9      	str	r1, [r7, #8]
 800f5bc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5c6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d10d      	bne.n	800f5ec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d14d      	bne.n	800f674 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	689b      	ldr	r3, [r3, #8]
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f001 f961 	bl	80108a4 <xTaskPriorityDisinherit>
 800f5e2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	609a      	str	r2, [r3, #8]
 800f5ea:	e043      	b.n	800f674 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d119      	bne.n	800f626 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	6858      	ldr	r0, [r3, #4]
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5fa:	461a      	mov	r2, r3
 800f5fc:	68b9      	ldr	r1, [r7, #8]
 800f5fe:	f00e fb70 	bl	801dce2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	685a      	ldr	r2, [r3, #4]
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f60a:	441a      	add	r2, r3
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	685a      	ldr	r2, [r3, #4]
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	689b      	ldr	r3, [r3, #8]
 800f618:	429a      	cmp	r2, r3
 800f61a:	d32b      	bcc.n	800f674 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	681a      	ldr	r2, [r3, #0]
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	605a      	str	r2, [r3, #4]
 800f624:	e026      	b.n	800f674 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	68d8      	ldr	r0, [r3, #12]
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f62e:	461a      	mov	r2, r3
 800f630:	68b9      	ldr	r1, [r7, #8]
 800f632:	f00e fb56 	bl	801dce2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	68da      	ldr	r2, [r3, #12]
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f63e:	425b      	negs	r3, r3
 800f640:	441a      	add	r2, r3
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	68da      	ldr	r2, [r3, #12]
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	429a      	cmp	r2, r3
 800f650:	d207      	bcs.n	800f662 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	689a      	ldr	r2, [r3, #8]
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f65a:	425b      	negs	r3, r3
 800f65c:	441a      	add	r2, r3
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2b02      	cmp	r3, #2
 800f666:	d105      	bne.n	800f674 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f668:	693b      	ldr	r3, [r7, #16]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d002      	beq.n	800f674 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	3b01      	subs	r3, #1
 800f672:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	1c5a      	adds	r2, r3, #1
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f67c:	697b      	ldr	r3, [r7, #20]
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3718      	adds	r7, #24
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}

0800f686 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f686:	b580      	push	{r7, lr}
 800f688:	b082      	sub	sp, #8
 800f68a:	af00      	add	r7, sp, #0
 800f68c:	6078      	str	r0, [r7, #4]
 800f68e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f694:	2b00      	cmp	r3, #0
 800f696:	d018      	beq.n	800f6ca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	68da      	ldr	r2, [r3, #12]
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6a0:	441a      	add	r2, r3
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	68da      	ldr	r2, [r3, #12]
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	689b      	ldr	r3, [r3, #8]
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	d303      	bcc.n	800f6ba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681a      	ldr	r2, [r3, #0]
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	68d9      	ldr	r1, [r3, #12]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	6838      	ldr	r0, [r7, #0]
 800f6c6:	f00e fb0c 	bl	801dce2 <memcpy>
	}
}
 800f6ca:	bf00      	nop
 800f6cc:	3708      	adds	r7, #8
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}

0800f6d2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f6d2:	b580      	push	{r7, lr}
 800f6d4:	b084      	sub	sp, #16
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f6da:	f002 f9f3 	bl	8011ac4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f6e4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f6e6:	e011      	b.n	800f70c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d012      	beq.n	800f716 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	3324      	adds	r3, #36	; 0x24
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f000 fe7d 	bl	80103f4 <xTaskRemoveFromEventList>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d001      	beq.n	800f704 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f700:	f000 ff54 	bl	80105ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f704:	7bfb      	ldrb	r3, [r7, #15]
 800f706:	3b01      	subs	r3, #1
 800f708:	b2db      	uxtb	r3, r3
 800f70a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f70c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f710:	2b00      	cmp	r3, #0
 800f712:	dce9      	bgt.n	800f6e8 <prvUnlockQueue+0x16>
 800f714:	e000      	b.n	800f718 <prvUnlockQueue+0x46>
					break;
 800f716:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	22ff      	movs	r2, #255	; 0xff
 800f71c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f720:	f002 fa00 	bl	8011b24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f724:	f002 f9ce 	bl	8011ac4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f72e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f730:	e011      	b.n	800f756 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	691b      	ldr	r3, [r3, #16]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d012      	beq.n	800f760 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	3310      	adds	r3, #16
 800f73e:	4618      	mov	r0, r3
 800f740:	f000 fe58 	bl	80103f4 <xTaskRemoveFromEventList>
 800f744:	4603      	mov	r3, r0
 800f746:	2b00      	cmp	r3, #0
 800f748:	d001      	beq.n	800f74e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f74a:	f000 ff2f 	bl	80105ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f74e:	7bbb      	ldrb	r3, [r7, #14]
 800f750:	3b01      	subs	r3, #1
 800f752:	b2db      	uxtb	r3, r3
 800f754:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f756:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	dce9      	bgt.n	800f732 <prvUnlockQueue+0x60>
 800f75e:	e000      	b.n	800f762 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f760:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	22ff      	movs	r2, #255	; 0xff
 800f766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f76a:	f002 f9db 	bl	8011b24 <vPortExitCritical>
}
 800f76e:	bf00      	nop
 800f770:	3710      	adds	r7, #16
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}

0800f776 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f776:	b580      	push	{r7, lr}
 800f778:	b084      	sub	sp, #16
 800f77a:	af00      	add	r7, sp, #0
 800f77c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f77e:	f002 f9a1 	bl	8011ac4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f786:	2b00      	cmp	r3, #0
 800f788:	d102      	bne.n	800f790 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f78a:	2301      	movs	r3, #1
 800f78c:	60fb      	str	r3, [r7, #12]
 800f78e:	e001      	b.n	800f794 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f790:	2300      	movs	r3, #0
 800f792:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f794:	f002 f9c6 	bl	8011b24 <vPortExitCritical>

	return xReturn;
 800f798:	68fb      	ldr	r3, [r7, #12]
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3710      	adds	r7, #16
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}

0800f7a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f7a2:	b580      	push	{r7, lr}
 800f7a4:	b084      	sub	sp, #16
 800f7a6:	af00      	add	r7, sp, #0
 800f7a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f7aa:	f002 f98b 	bl	8011ac4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7b6:	429a      	cmp	r2, r3
 800f7b8:	d102      	bne.n	800f7c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	60fb      	str	r3, [r7, #12]
 800f7be:	e001      	b.n	800f7c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f7c4:	f002 f9ae 	bl	8011b24 <vPortExitCritical>

	return xReturn;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3710      	adds	r7, #16
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}
	...

0800f7d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f7d4:	b480      	push	{r7}
 800f7d6:	b085      	sub	sp, #20
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
 800f7dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f7de:	2300      	movs	r3, #0
 800f7e0:	60fb      	str	r3, [r7, #12]
 800f7e2:	e014      	b.n	800f80e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f7e4:	4a0f      	ldr	r2, [pc, #60]	; (800f824 <vQueueAddToRegistry+0x50>)
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d10b      	bne.n	800f808 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f7f0:	490c      	ldr	r1, [pc, #48]	; (800f824 <vQueueAddToRegistry+0x50>)
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	683a      	ldr	r2, [r7, #0]
 800f7f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f7fa:	4a0a      	ldr	r2, [pc, #40]	; (800f824 <vQueueAddToRegistry+0x50>)
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	00db      	lsls	r3, r3, #3
 800f800:	4413      	add	r3, r2
 800f802:	687a      	ldr	r2, [r7, #4]
 800f804:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f806:	e006      	b.n	800f816 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	3301      	adds	r3, #1
 800f80c:	60fb      	str	r3, [r7, #12]
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	2b07      	cmp	r3, #7
 800f812:	d9e7      	bls.n	800f7e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f814:	bf00      	nop
 800f816:	bf00      	nop
 800f818:	3714      	adds	r7, #20
 800f81a:	46bd      	mov	sp, r7
 800f81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f820:	4770      	bx	lr
 800f822:	bf00      	nop
 800f824:	24001274 	.word	0x24001274

0800f828 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f828:	b480      	push	{r7}
 800f82a:	b085      	sub	sp, #20
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f830:	2300      	movs	r3, #0
 800f832:	60fb      	str	r3, [r7, #12]
 800f834:	e016      	b.n	800f864 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f836:	4a10      	ldr	r2, [pc, #64]	; (800f878 <vQueueUnregisterQueue+0x50>)
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	00db      	lsls	r3, r3, #3
 800f83c:	4413      	add	r3, r2
 800f83e:	685b      	ldr	r3, [r3, #4]
 800f840:	687a      	ldr	r2, [r7, #4]
 800f842:	429a      	cmp	r2, r3
 800f844:	d10b      	bne.n	800f85e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f846:	4a0c      	ldr	r2, [pc, #48]	; (800f878 <vQueueUnregisterQueue+0x50>)
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	2100      	movs	r1, #0
 800f84c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f850:	4a09      	ldr	r2, [pc, #36]	; (800f878 <vQueueUnregisterQueue+0x50>)
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	00db      	lsls	r3, r3, #3
 800f856:	4413      	add	r3, r2
 800f858:	2200      	movs	r2, #0
 800f85a:	605a      	str	r2, [r3, #4]
				break;
 800f85c:	e006      	b.n	800f86c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	3301      	adds	r3, #1
 800f862:	60fb      	str	r3, [r7, #12]
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	2b07      	cmp	r3, #7
 800f868:	d9e5      	bls.n	800f836 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f86a:	bf00      	nop
 800f86c:	bf00      	nop
 800f86e:	3714      	adds	r7, #20
 800f870:	46bd      	mov	sp, r7
 800f872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f876:	4770      	bx	lr
 800f878:	24001274 	.word	0x24001274

0800f87c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b086      	sub	sp, #24
 800f880:	af00      	add	r7, sp, #0
 800f882:	60f8      	str	r0, [r7, #12]
 800f884:	60b9      	str	r1, [r7, #8]
 800f886:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f88c:	f002 f91a 	bl	8011ac4 <vPortEnterCritical>
 800f890:	697b      	ldr	r3, [r7, #20]
 800f892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f896:	b25b      	sxtb	r3, r3
 800f898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f89c:	d103      	bne.n	800f8a6 <vQueueWaitForMessageRestricted+0x2a>
 800f89e:	697b      	ldr	r3, [r7, #20]
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f8a6:	697b      	ldr	r3, [r7, #20]
 800f8a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f8ac:	b25b      	sxtb	r3, r3
 800f8ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8b2:	d103      	bne.n	800f8bc <vQueueWaitForMessageRestricted+0x40>
 800f8b4:	697b      	ldr	r3, [r7, #20]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f8bc:	f002 f932 	bl	8011b24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d106      	bne.n	800f8d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f8c8:	697b      	ldr	r3, [r7, #20]
 800f8ca:	3324      	adds	r3, #36	; 0x24
 800f8cc:	687a      	ldr	r2, [r7, #4]
 800f8ce:	68b9      	ldr	r1, [r7, #8]
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f000 fd63 	bl	801039c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f8d6:	6978      	ldr	r0, [r7, #20]
 800f8d8:	f7ff fefb 	bl	800f6d2 <prvUnlockQueue>
	}
 800f8dc:	bf00      	nop
 800f8de:	3718      	adds	r7, #24
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b08e      	sub	sp, #56	; 0x38
 800f8e8:	af04      	add	r7, sp, #16
 800f8ea:	60f8      	str	r0, [r7, #12]
 800f8ec:	60b9      	str	r1, [r7, #8]
 800f8ee:	607a      	str	r2, [r7, #4]
 800f8f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f8f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d10a      	bne.n	800f90e <xTaskCreateStatic+0x2a>
	__asm volatile
 800f8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8fc:	f383 8811 	msr	BASEPRI, r3
 800f900:	f3bf 8f6f 	isb	sy
 800f904:	f3bf 8f4f 	dsb	sy
 800f908:	623b      	str	r3, [r7, #32]
}
 800f90a:	bf00      	nop
 800f90c:	e7fe      	b.n	800f90c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f910:	2b00      	cmp	r3, #0
 800f912:	d10a      	bne.n	800f92a <xTaskCreateStatic+0x46>
	__asm volatile
 800f914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f918:	f383 8811 	msr	BASEPRI, r3
 800f91c:	f3bf 8f6f 	isb	sy
 800f920:	f3bf 8f4f 	dsb	sy
 800f924:	61fb      	str	r3, [r7, #28]
}
 800f926:	bf00      	nop
 800f928:	e7fe      	b.n	800f928 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f92a:	23bc      	movs	r3, #188	; 0xbc
 800f92c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f92e:	693b      	ldr	r3, [r7, #16]
 800f930:	2bbc      	cmp	r3, #188	; 0xbc
 800f932:	d00a      	beq.n	800f94a <xTaskCreateStatic+0x66>
	__asm volatile
 800f934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f938:	f383 8811 	msr	BASEPRI, r3
 800f93c:	f3bf 8f6f 	isb	sy
 800f940:	f3bf 8f4f 	dsb	sy
 800f944:	61bb      	str	r3, [r7, #24]
}
 800f946:	bf00      	nop
 800f948:	e7fe      	b.n	800f948 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f94a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d01e      	beq.n	800f990 <xTaskCreateStatic+0xac>
 800f952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f954:	2b00      	cmp	r3, #0
 800f956:	d01b      	beq.n	800f990 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f95a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f95e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f960:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f964:	2202      	movs	r2, #2
 800f966:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f96a:	2300      	movs	r3, #0
 800f96c:	9303      	str	r3, [sp, #12]
 800f96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f970:	9302      	str	r3, [sp, #8]
 800f972:	f107 0314 	add.w	r3, r7, #20
 800f976:	9301      	str	r3, [sp, #4]
 800f978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f97a:	9300      	str	r3, [sp, #0]
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	687a      	ldr	r2, [r7, #4]
 800f980:	68b9      	ldr	r1, [r7, #8]
 800f982:	68f8      	ldr	r0, [r7, #12]
 800f984:	f000 f850 	bl	800fa28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f988:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f98a:	f000 f8f3 	bl	800fb74 <prvAddNewTaskToReadyList>
 800f98e:	e001      	b.n	800f994 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f990:	2300      	movs	r3, #0
 800f992:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f994:	697b      	ldr	r3, [r7, #20]
	}
 800f996:	4618      	mov	r0, r3
 800f998:	3728      	adds	r7, #40	; 0x28
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}

0800f99e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f99e:	b580      	push	{r7, lr}
 800f9a0:	b08c      	sub	sp, #48	; 0x30
 800f9a2:	af04      	add	r7, sp, #16
 800f9a4:	60f8      	str	r0, [r7, #12]
 800f9a6:	60b9      	str	r1, [r7, #8]
 800f9a8:	603b      	str	r3, [r7, #0]
 800f9aa:	4613      	mov	r3, r2
 800f9ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f9ae:	88fb      	ldrh	r3, [r7, #6]
 800f9b0:	009b      	lsls	r3, r3, #2
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f002 f9a8 	bl	8011d08 <pvPortMalloc>
 800f9b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f9ba:	697b      	ldr	r3, [r7, #20]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d00e      	beq.n	800f9de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f9c0:	20bc      	movs	r0, #188	; 0xbc
 800f9c2:	f002 f9a1 	bl	8011d08 <pvPortMalloc>
 800f9c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f9c8:	69fb      	ldr	r3, [r7, #28]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d003      	beq.n	800f9d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f9ce:	69fb      	ldr	r3, [r7, #28]
 800f9d0:	697a      	ldr	r2, [r7, #20]
 800f9d2:	631a      	str	r2, [r3, #48]	; 0x30
 800f9d4:	e005      	b.n	800f9e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f9d6:	6978      	ldr	r0, [r7, #20]
 800f9d8:	f002 fa62 	bl	8011ea0 <vPortFree>
 800f9dc:	e001      	b.n	800f9e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f9e2:	69fb      	ldr	r3, [r7, #28]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d017      	beq.n	800fa18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f9e8:	69fb      	ldr	r3, [r7, #28]
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f9f0:	88fa      	ldrh	r2, [r7, #6]
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	9303      	str	r3, [sp, #12]
 800f9f6:	69fb      	ldr	r3, [r7, #28]
 800f9f8:	9302      	str	r3, [sp, #8]
 800f9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9fc:	9301      	str	r3, [sp, #4]
 800f9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa00:	9300      	str	r3, [sp, #0]
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	68b9      	ldr	r1, [r7, #8]
 800fa06:	68f8      	ldr	r0, [r7, #12]
 800fa08:	f000 f80e 	bl	800fa28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fa0c:	69f8      	ldr	r0, [r7, #28]
 800fa0e:	f000 f8b1 	bl	800fb74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fa12:	2301      	movs	r3, #1
 800fa14:	61bb      	str	r3, [r7, #24]
 800fa16:	e002      	b.n	800fa1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fa18:	f04f 33ff 	mov.w	r3, #4294967295
 800fa1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fa1e:	69bb      	ldr	r3, [r7, #24]
	}
 800fa20:	4618      	mov	r0, r3
 800fa22:	3720      	adds	r7, #32
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}

0800fa28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b088      	sub	sp, #32
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	60f8      	str	r0, [r7, #12]
 800fa30:	60b9      	str	r1, [r7, #8]
 800fa32:	607a      	str	r2, [r7, #4]
 800fa34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fa36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	009b      	lsls	r3, r3, #2
 800fa3e:	461a      	mov	r2, r3
 800fa40:	21a5      	movs	r1, #165	; 0xa5
 800fa42:	f00e f95c 	bl	801dcfe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fa46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa4a:	6879      	ldr	r1, [r7, #4]
 800fa4c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800fa50:	440b      	add	r3, r1
 800fa52:	009b      	lsls	r3, r3, #2
 800fa54:	4413      	add	r3, r2
 800fa56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fa58:	69bb      	ldr	r3, [r7, #24]
 800fa5a:	f023 0307 	bic.w	r3, r3, #7
 800fa5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fa60:	69bb      	ldr	r3, [r7, #24]
 800fa62:	f003 0307 	and.w	r3, r3, #7
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d00a      	beq.n	800fa80 <prvInitialiseNewTask+0x58>
	__asm volatile
 800fa6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa6e:	f383 8811 	msr	BASEPRI, r3
 800fa72:	f3bf 8f6f 	isb	sy
 800fa76:	f3bf 8f4f 	dsb	sy
 800fa7a:	617b      	str	r3, [r7, #20]
}
 800fa7c:	bf00      	nop
 800fa7e:	e7fe      	b.n	800fa7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d01f      	beq.n	800fac6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fa86:	2300      	movs	r3, #0
 800fa88:	61fb      	str	r3, [r7, #28]
 800fa8a:	e012      	b.n	800fab2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fa8c:	68ba      	ldr	r2, [r7, #8]
 800fa8e:	69fb      	ldr	r3, [r7, #28]
 800fa90:	4413      	add	r3, r2
 800fa92:	7819      	ldrb	r1, [r3, #0]
 800fa94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa96:	69fb      	ldr	r3, [r7, #28]
 800fa98:	4413      	add	r3, r2
 800fa9a:	3334      	adds	r3, #52	; 0x34
 800fa9c:	460a      	mov	r2, r1
 800fa9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800faa0:	68ba      	ldr	r2, [r7, #8]
 800faa2:	69fb      	ldr	r3, [r7, #28]
 800faa4:	4413      	add	r3, r2
 800faa6:	781b      	ldrb	r3, [r3, #0]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d006      	beq.n	800faba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800faac:	69fb      	ldr	r3, [r7, #28]
 800faae:	3301      	adds	r3, #1
 800fab0:	61fb      	str	r3, [r7, #28]
 800fab2:	69fb      	ldr	r3, [r7, #28]
 800fab4:	2b0f      	cmp	r3, #15
 800fab6:	d9e9      	bls.n	800fa8c <prvInitialiseNewTask+0x64>
 800fab8:	e000      	b.n	800fabc <prvInitialiseNewTask+0x94>
			{
				break;
 800faba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fabe:	2200      	movs	r2, #0
 800fac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fac4:	e003      	b.n	800face <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac8:	2200      	movs	r2, #0
 800faca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800face:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fad0:	2b37      	cmp	r3, #55	; 0x37
 800fad2:	d901      	bls.n	800fad8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fad4:	2337      	movs	r3, #55	; 0x37
 800fad6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fadc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fae2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fae6:	2200      	movs	r2, #0
 800fae8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800faea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faec:	3304      	adds	r3, #4
 800faee:	4618      	mov	r0, r3
 800faf0:	f7fe fe56 	bl	800e7a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800faf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf6:	3318      	adds	r3, #24
 800faf8:	4618      	mov	r0, r3
 800fafa:	f7fe fe51 	bl	800e7a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fb14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb16:	2200      	movs	r2, #0
 800fb18:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb1e:	2200      	movs	r2, #0
 800fb20:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800fb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb26:	3354      	adds	r3, #84	; 0x54
 800fb28:	2260      	movs	r2, #96	; 0x60
 800fb2a:	2100      	movs	r1, #0
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	f00e f8e6 	bl	801dcfe <memset>
 800fb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb34:	4a0c      	ldr	r2, [pc, #48]	; (800fb68 <prvInitialiseNewTask+0x140>)
 800fb36:	659a      	str	r2, [r3, #88]	; 0x58
 800fb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb3a:	4a0c      	ldr	r2, [pc, #48]	; (800fb6c <prvInitialiseNewTask+0x144>)
 800fb3c:	65da      	str	r2, [r3, #92]	; 0x5c
 800fb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb40:	4a0b      	ldr	r2, [pc, #44]	; (800fb70 <prvInitialiseNewTask+0x148>)
 800fb42:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fb44:	683a      	ldr	r2, [r7, #0]
 800fb46:	68f9      	ldr	r1, [r7, #12]
 800fb48:	69b8      	ldr	r0, [r7, #24]
 800fb4a:	f001 fe8d 	bl	8011868 <pxPortInitialiseStack>
 800fb4e:	4602      	mov	r2, r0
 800fb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb52:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d002      	beq.n	800fb60 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fb60:	bf00      	nop
 800fb62:	3720      	adds	r7, #32
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}
 800fb68:	08020b40 	.word	0x08020b40
 800fb6c:	08020b60 	.word	0x08020b60
 800fb70:	08020b20 	.word	0x08020b20

0800fb74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b082      	sub	sp, #8
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fb7c:	f001 ffa2 	bl	8011ac4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fb80:	4b2d      	ldr	r3, [pc, #180]	; (800fc38 <prvAddNewTaskToReadyList+0xc4>)
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	3301      	adds	r3, #1
 800fb86:	4a2c      	ldr	r2, [pc, #176]	; (800fc38 <prvAddNewTaskToReadyList+0xc4>)
 800fb88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fb8a:	4b2c      	ldr	r3, [pc, #176]	; (800fc3c <prvAddNewTaskToReadyList+0xc8>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d109      	bne.n	800fba6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fb92:	4a2a      	ldr	r2, [pc, #168]	; (800fc3c <prvAddNewTaskToReadyList+0xc8>)
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fb98:	4b27      	ldr	r3, [pc, #156]	; (800fc38 <prvAddNewTaskToReadyList+0xc4>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	2b01      	cmp	r3, #1
 800fb9e:	d110      	bne.n	800fbc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fba0:	f000 fd28 	bl	80105f4 <prvInitialiseTaskLists>
 800fba4:	e00d      	b.n	800fbc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fba6:	4b26      	ldr	r3, [pc, #152]	; (800fc40 <prvAddNewTaskToReadyList+0xcc>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d109      	bne.n	800fbc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fbae:	4b23      	ldr	r3, [pc, #140]	; (800fc3c <prvAddNewTaskToReadyList+0xc8>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbb8:	429a      	cmp	r2, r3
 800fbba:	d802      	bhi.n	800fbc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fbbc:	4a1f      	ldr	r2, [pc, #124]	; (800fc3c <prvAddNewTaskToReadyList+0xc8>)
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fbc2:	4b20      	ldr	r3, [pc, #128]	; (800fc44 <prvAddNewTaskToReadyList+0xd0>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	3301      	adds	r3, #1
 800fbc8:	4a1e      	ldr	r2, [pc, #120]	; (800fc44 <prvAddNewTaskToReadyList+0xd0>)
 800fbca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fbcc:	4b1d      	ldr	r3, [pc, #116]	; (800fc44 <prvAddNewTaskToReadyList+0xd0>)
 800fbce:	681a      	ldr	r2, [r3, #0]
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbd8:	4b1b      	ldr	r3, [pc, #108]	; (800fc48 <prvAddNewTaskToReadyList+0xd4>)
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	d903      	bls.n	800fbe8 <prvAddNewTaskToReadyList+0x74>
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbe4:	4a18      	ldr	r2, [pc, #96]	; (800fc48 <prvAddNewTaskToReadyList+0xd4>)
 800fbe6:	6013      	str	r3, [r2, #0]
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbec:	4613      	mov	r3, r2
 800fbee:	009b      	lsls	r3, r3, #2
 800fbf0:	4413      	add	r3, r2
 800fbf2:	009b      	lsls	r3, r3, #2
 800fbf4:	4a15      	ldr	r2, [pc, #84]	; (800fc4c <prvAddNewTaskToReadyList+0xd8>)
 800fbf6:	441a      	add	r2, r3
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	3304      	adds	r3, #4
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	4610      	mov	r0, r2
 800fc00:	f7fe fddb 	bl	800e7ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fc04:	f001 ff8e 	bl	8011b24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fc08:	4b0d      	ldr	r3, [pc, #52]	; (800fc40 <prvAddNewTaskToReadyList+0xcc>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d00e      	beq.n	800fc2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fc10:	4b0a      	ldr	r3, [pc, #40]	; (800fc3c <prvAddNewTaskToReadyList+0xc8>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc1a:	429a      	cmp	r2, r3
 800fc1c:	d207      	bcs.n	800fc2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fc1e:	4b0c      	ldr	r3, [pc, #48]	; (800fc50 <prvAddNewTaskToReadyList+0xdc>)
 800fc20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc24:	601a      	str	r2, [r3, #0]
 800fc26:	f3bf 8f4f 	dsb	sy
 800fc2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fc2e:	bf00      	nop
 800fc30:	3708      	adds	r7, #8
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}
 800fc36:	bf00      	nop
 800fc38:	24001788 	.word	0x24001788
 800fc3c:	240012b4 	.word	0x240012b4
 800fc40:	24001794 	.word	0x24001794
 800fc44:	240017a4 	.word	0x240017a4
 800fc48:	24001790 	.word	0x24001790
 800fc4c:	240012b8 	.word	0x240012b8
 800fc50:	e000ed04 	.word	0xe000ed04

0800fc54 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b084      	sub	sp, #16
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800fc5c:	f001 ff32 	bl	8011ac4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d102      	bne.n	800fc6c <vTaskDelete+0x18>
 800fc66:	4b2c      	ldr	r3, [pc, #176]	; (800fd18 <vTaskDelete+0xc4>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	e000      	b.n	800fc6e <vTaskDelete+0x1a>
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	3304      	adds	r3, #4
 800fc74:	4618      	mov	r0, r3
 800fc76:	f7fe fdfd 	bl	800e874 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d004      	beq.n	800fc8c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	3318      	adds	r3, #24
 800fc86:	4618      	mov	r0, r3
 800fc88:	f7fe fdf4 	bl	800e874 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800fc8c:	4b23      	ldr	r3, [pc, #140]	; (800fd1c <vTaskDelete+0xc8>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	3301      	adds	r3, #1
 800fc92:	4a22      	ldr	r2, [pc, #136]	; (800fd1c <vTaskDelete+0xc8>)
 800fc94:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800fc96:	4b20      	ldr	r3, [pc, #128]	; (800fd18 <vTaskDelete+0xc4>)
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	68fa      	ldr	r2, [r7, #12]
 800fc9c:	429a      	cmp	r2, r3
 800fc9e:	d10b      	bne.n	800fcb8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	3304      	adds	r3, #4
 800fca4:	4619      	mov	r1, r3
 800fca6:	481e      	ldr	r0, [pc, #120]	; (800fd20 <vTaskDelete+0xcc>)
 800fca8:	f7fe fd87 	bl	800e7ba <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800fcac:	4b1d      	ldr	r3, [pc, #116]	; (800fd24 <vTaskDelete+0xd0>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	3301      	adds	r3, #1
 800fcb2:	4a1c      	ldr	r2, [pc, #112]	; (800fd24 <vTaskDelete+0xd0>)
 800fcb4:	6013      	str	r3, [r2, #0]
 800fcb6:	e009      	b.n	800fccc <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800fcb8:	4b1b      	ldr	r3, [pc, #108]	; (800fd28 <vTaskDelete+0xd4>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	3b01      	subs	r3, #1
 800fcbe:	4a1a      	ldr	r2, [pc, #104]	; (800fd28 <vTaskDelete+0xd4>)
 800fcc0:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800fcc2:	68f8      	ldr	r0, [r7, #12]
 800fcc4:	f000 fd04 	bl	80106d0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800fcc8:	f000 fd36 	bl	8010738 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800fccc:	f001 ff2a 	bl	8011b24 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800fcd0:	4b16      	ldr	r3, [pc, #88]	; (800fd2c <vTaskDelete+0xd8>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d01b      	beq.n	800fd10 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800fcd8:	4b0f      	ldr	r3, [pc, #60]	; (800fd18 <vTaskDelete+0xc4>)
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	68fa      	ldr	r2, [r7, #12]
 800fcde:	429a      	cmp	r2, r3
 800fce0:	d116      	bne.n	800fd10 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800fce2:	4b13      	ldr	r3, [pc, #76]	; (800fd30 <vTaskDelete+0xdc>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d00a      	beq.n	800fd00 <vTaskDelete+0xac>
	__asm volatile
 800fcea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcee:	f383 8811 	msr	BASEPRI, r3
 800fcf2:	f3bf 8f6f 	isb	sy
 800fcf6:	f3bf 8f4f 	dsb	sy
 800fcfa:	60bb      	str	r3, [r7, #8]
}
 800fcfc:	bf00      	nop
 800fcfe:	e7fe      	b.n	800fcfe <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800fd00:	4b0c      	ldr	r3, [pc, #48]	; (800fd34 <vTaskDelete+0xe0>)
 800fd02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd06:	601a      	str	r2, [r3, #0]
 800fd08:	f3bf 8f4f 	dsb	sy
 800fd0c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fd10:	bf00      	nop
 800fd12:	3710      	adds	r7, #16
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}
 800fd18:	240012b4 	.word	0x240012b4
 800fd1c:	240017a4 	.word	0x240017a4
 800fd20:	2400175c 	.word	0x2400175c
 800fd24:	24001770 	.word	0x24001770
 800fd28:	24001788 	.word	0x24001788
 800fd2c:	24001794 	.word	0x24001794
 800fd30:	240017b0 	.word	0x240017b0
 800fd34:	e000ed04 	.word	0xe000ed04

0800fd38 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b08a      	sub	sp, #40	; 0x28
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
 800fd40:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800fd42:	2300      	movs	r3, #0
 800fd44:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d10a      	bne.n	800fd62 <vTaskDelayUntil+0x2a>
	__asm volatile
 800fd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd50:	f383 8811 	msr	BASEPRI, r3
 800fd54:	f3bf 8f6f 	isb	sy
 800fd58:	f3bf 8f4f 	dsb	sy
 800fd5c:	617b      	str	r3, [r7, #20]
}
 800fd5e:	bf00      	nop
 800fd60:	e7fe      	b.n	800fd60 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d10a      	bne.n	800fd7e <vTaskDelayUntil+0x46>
	__asm volatile
 800fd68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd6c:	f383 8811 	msr	BASEPRI, r3
 800fd70:	f3bf 8f6f 	isb	sy
 800fd74:	f3bf 8f4f 	dsb	sy
 800fd78:	613b      	str	r3, [r7, #16]
}
 800fd7a:	bf00      	nop
 800fd7c:	e7fe      	b.n	800fd7c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800fd7e:	4b2a      	ldr	r3, [pc, #168]	; (800fe28 <vTaskDelayUntil+0xf0>)
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d00a      	beq.n	800fd9c <vTaskDelayUntil+0x64>
	__asm volatile
 800fd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd8a:	f383 8811 	msr	BASEPRI, r3
 800fd8e:	f3bf 8f6f 	isb	sy
 800fd92:	f3bf 8f4f 	dsb	sy
 800fd96:	60fb      	str	r3, [r7, #12]
}
 800fd98:	bf00      	nop
 800fd9a:	e7fe      	b.n	800fd9a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800fd9c:	f000 f8ee 	bl	800ff7c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800fda0:	4b22      	ldr	r3, [pc, #136]	; (800fe2c <vTaskDelayUntil+0xf4>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	683a      	ldr	r2, [r7, #0]
 800fdac:	4413      	add	r3, r2
 800fdae:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	6a3a      	ldr	r2, [r7, #32]
 800fdb6:	429a      	cmp	r2, r3
 800fdb8:	d20b      	bcs.n	800fdd2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	69fa      	ldr	r2, [r7, #28]
 800fdc0:	429a      	cmp	r2, r3
 800fdc2:	d211      	bcs.n	800fde8 <vTaskDelayUntil+0xb0>
 800fdc4:	69fa      	ldr	r2, [r7, #28]
 800fdc6:	6a3b      	ldr	r3, [r7, #32]
 800fdc8:	429a      	cmp	r2, r3
 800fdca:	d90d      	bls.n	800fde8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800fdcc:	2301      	movs	r3, #1
 800fdce:	627b      	str	r3, [r7, #36]	; 0x24
 800fdd0:	e00a      	b.n	800fde8 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	69fa      	ldr	r2, [r7, #28]
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d303      	bcc.n	800fde4 <vTaskDelayUntil+0xac>
 800fddc:	69fa      	ldr	r2, [r7, #28]
 800fdde:	6a3b      	ldr	r3, [r7, #32]
 800fde0:	429a      	cmp	r2, r3
 800fde2:	d901      	bls.n	800fde8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800fde4:	2301      	movs	r3, #1
 800fde6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	69fa      	ldr	r2, [r7, #28]
 800fdec:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800fdee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d006      	beq.n	800fe02 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800fdf4:	69fa      	ldr	r2, [r7, #28]
 800fdf6:	6a3b      	ldr	r3, [r7, #32]
 800fdf8:	1ad3      	subs	r3, r2, r3
 800fdfa:	2100      	movs	r1, #0
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	f001 f8d7 	bl	8010fb0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800fe02:	f000 f8c9 	bl	800ff98 <xTaskResumeAll>
 800fe06:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fe08:	69bb      	ldr	r3, [r7, #24]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d107      	bne.n	800fe1e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800fe0e:	4b08      	ldr	r3, [pc, #32]	; (800fe30 <vTaskDelayUntil+0xf8>)
 800fe10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe14:	601a      	str	r2, [r3, #0]
 800fe16:	f3bf 8f4f 	dsb	sy
 800fe1a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fe1e:	bf00      	nop
 800fe20:	3728      	adds	r7, #40	; 0x28
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}
 800fe26:	bf00      	nop
 800fe28:	240017b0 	.word	0x240017b0
 800fe2c:	2400178c 	.word	0x2400178c
 800fe30:	e000ed04 	.word	0xe000ed04

0800fe34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b084      	sub	sp, #16
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d017      	beq.n	800fe76 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fe46:	4b13      	ldr	r3, [pc, #76]	; (800fe94 <vTaskDelay+0x60>)
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d00a      	beq.n	800fe64 <vTaskDelay+0x30>
	__asm volatile
 800fe4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe52:	f383 8811 	msr	BASEPRI, r3
 800fe56:	f3bf 8f6f 	isb	sy
 800fe5a:	f3bf 8f4f 	dsb	sy
 800fe5e:	60bb      	str	r3, [r7, #8]
}
 800fe60:	bf00      	nop
 800fe62:	e7fe      	b.n	800fe62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fe64:	f000 f88a 	bl	800ff7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fe68:	2100      	movs	r1, #0
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	f001 f8a0 	bl	8010fb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fe70:	f000 f892 	bl	800ff98 <xTaskResumeAll>
 800fe74:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d107      	bne.n	800fe8c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fe7c:	4b06      	ldr	r3, [pc, #24]	; (800fe98 <vTaskDelay+0x64>)
 800fe7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe82:	601a      	str	r2, [r3, #0]
 800fe84:	f3bf 8f4f 	dsb	sy
 800fe88:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fe8c:	bf00      	nop
 800fe8e:	3710      	adds	r7, #16
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}
 800fe94:	240017b0 	.word	0x240017b0
 800fe98:	e000ed04 	.word	0xe000ed04

0800fe9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b08a      	sub	sp, #40	; 0x28
 800fea0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fea2:	2300      	movs	r3, #0
 800fea4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fea6:	2300      	movs	r3, #0
 800fea8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800feaa:	463a      	mov	r2, r7
 800feac:	1d39      	adds	r1, r7, #4
 800feae:	f107 0308 	add.w	r3, r7, #8
 800feb2:	4618      	mov	r0, r3
 800feb4:	f7fe fc20 	bl	800e6f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800feb8:	6839      	ldr	r1, [r7, #0]
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	68ba      	ldr	r2, [r7, #8]
 800febe:	9202      	str	r2, [sp, #8]
 800fec0:	9301      	str	r3, [sp, #4]
 800fec2:	2300      	movs	r3, #0
 800fec4:	9300      	str	r3, [sp, #0]
 800fec6:	2300      	movs	r3, #0
 800fec8:	460a      	mov	r2, r1
 800feca:	4924      	ldr	r1, [pc, #144]	; (800ff5c <vTaskStartScheduler+0xc0>)
 800fecc:	4824      	ldr	r0, [pc, #144]	; (800ff60 <vTaskStartScheduler+0xc4>)
 800fece:	f7ff fd09 	bl	800f8e4 <xTaskCreateStatic>
 800fed2:	4603      	mov	r3, r0
 800fed4:	4a23      	ldr	r2, [pc, #140]	; (800ff64 <vTaskStartScheduler+0xc8>)
 800fed6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fed8:	4b22      	ldr	r3, [pc, #136]	; (800ff64 <vTaskStartScheduler+0xc8>)
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d002      	beq.n	800fee6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fee0:	2301      	movs	r3, #1
 800fee2:	617b      	str	r3, [r7, #20]
 800fee4:	e001      	b.n	800feea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fee6:	2300      	movs	r3, #0
 800fee8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800feea:	697b      	ldr	r3, [r7, #20]
 800feec:	2b01      	cmp	r3, #1
 800feee:	d102      	bne.n	800fef6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fef0:	f001 f8b2 	bl	8011058 <xTimerCreateTimerTask>
 800fef4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fef6:	697b      	ldr	r3, [r7, #20]
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	d11b      	bne.n	800ff34 <vTaskStartScheduler+0x98>
	__asm volatile
 800fefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff00:	f383 8811 	msr	BASEPRI, r3
 800ff04:	f3bf 8f6f 	isb	sy
 800ff08:	f3bf 8f4f 	dsb	sy
 800ff0c:	613b      	str	r3, [r7, #16]
}
 800ff0e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ff10:	4b15      	ldr	r3, [pc, #84]	; (800ff68 <vTaskStartScheduler+0xcc>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	3354      	adds	r3, #84	; 0x54
 800ff16:	4a15      	ldr	r2, [pc, #84]	; (800ff6c <vTaskStartScheduler+0xd0>)
 800ff18:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ff1a:	4b15      	ldr	r3, [pc, #84]	; (800ff70 <vTaskStartScheduler+0xd4>)
 800ff1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ff20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ff22:	4b14      	ldr	r3, [pc, #80]	; (800ff74 <vTaskStartScheduler+0xd8>)
 800ff24:	2201      	movs	r2, #1
 800ff26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ff28:	4b13      	ldr	r3, [pc, #76]	; (800ff78 <vTaskStartScheduler+0xdc>)
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ff2e:	f001 fd27 	bl	8011980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ff32:	e00e      	b.n	800ff52 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ff34:	697b      	ldr	r3, [r7, #20]
 800ff36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff3a:	d10a      	bne.n	800ff52 <vTaskStartScheduler+0xb6>
	__asm volatile
 800ff3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff40:	f383 8811 	msr	BASEPRI, r3
 800ff44:	f3bf 8f6f 	isb	sy
 800ff48:	f3bf 8f4f 	dsb	sy
 800ff4c:	60fb      	str	r3, [r7, #12]
}
 800ff4e:	bf00      	nop
 800ff50:	e7fe      	b.n	800ff50 <vTaskStartScheduler+0xb4>
}
 800ff52:	bf00      	nop
 800ff54:	3718      	adds	r7, #24
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bd80      	pop	{r7, pc}
 800ff5a:	bf00      	nop
 800ff5c:	080204d8 	.word	0x080204d8
 800ff60:	080105c5 	.word	0x080105c5
 800ff64:	240017ac 	.word	0x240017ac
 800ff68:	240012b4 	.word	0x240012b4
 800ff6c:	24000060 	.word	0x24000060
 800ff70:	240017a8 	.word	0x240017a8
 800ff74:	24001794 	.word	0x24001794
 800ff78:	2400178c 	.word	0x2400178c

0800ff7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ff7c:	b480      	push	{r7}
 800ff7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ff80:	4b04      	ldr	r3, [pc, #16]	; (800ff94 <vTaskSuspendAll+0x18>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	3301      	adds	r3, #1
 800ff86:	4a03      	ldr	r2, [pc, #12]	; (800ff94 <vTaskSuspendAll+0x18>)
 800ff88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ff8a:	bf00      	nop
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff92:	4770      	bx	lr
 800ff94:	240017b0 	.word	0x240017b0

0800ff98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b084      	sub	sp, #16
 800ff9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ffa6:	4b42      	ldr	r3, [pc, #264]	; (80100b0 <xTaskResumeAll+0x118>)
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d10a      	bne.n	800ffc4 <xTaskResumeAll+0x2c>
	__asm volatile
 800ffae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffb2:	f383 8811 	msr	BASEPRI, r3
 800ffb6:	f3bf 8f6f 	isb	sy
 800ffba:	f3bf 8f4f 	dsb	sy
 800ffbe:	603b      	str	r3, [r7, #0]
}
 800ffc0:	bf00      	nop
 800ffc2:	e7fe      	b.n	800ffc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ffc4:	f001 fd7e 	bl	8011ac4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ffc8:	4b39      	ldr	r3, [pc, #228]	; (80100b0 <xTaskResumeAll+0x118>)
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	3b01      	subs	r3, #1
 800ffce:	4a38      	ldr	r2, [pc, #224]	; (80100b0 <xTaskResumeAll+0x118>)
 800ffd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ffd2:	4b37      	ldr	r3, [pc, #220]	; (80100b0 <xTaskResumeAll+0x118>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d162      	bne.n	80100a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ffda:	4b36      	ldr	r3, [pc, #216]	; (80100b4 <xTaskResumeAll+0x11c>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d05e      	beq.n	80100a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ffe2:	e02f      	b.n	8010044 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ffe4:	4b34      	ldr	r3, [pc, #208]	; (80100b8 <xTaskResumeAll+0x120>)
 800ffe6:	68db      	ldr	r3, [r3, #12]
 800ffe8:	68db      	ldr	r3, [r3, #12]
 800ffea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	3318      	adds	r3, #24
 800fff0:	4618      	mov	r0, r3
 800fff2:	f7fe fc3f 	bl	800e874 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	3304      	adds	r3, #4
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7fe fc3a 	bl	800e874 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010004:	4b2d      	ldr	r3, [pc, #180]	; (80100bc <xTaskResumeAll+0x124>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	429a      	cmp	r2, r3
 801000a:	d903      	bls.n	8010014 <xTaskResumeAll+0x7c>
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010010:	4a2a      	ldr	r2, [pc, #168]	; (80100bc <xTaskResumeAll+0x124>)
 8010012:	6013      	str	r3, [r2, #0]
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010018:	4613      	mov	r3, r2
 801001a:	009b      	lsls	r3, r3, #2
 801001c:	4413      	add	r3, r2
 801001e:	009b      	lsls	r3, r3, #2
 8010020:	4a27      	ldr	r2, [pc, #156]	; (80100c0 <xTaskResumeAll+0x128>)
 8010022:	441a      	add	r2, r3
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	3304      	adds	r3, #4
 8010028:	4619      	mov	r1, r3
 801002a:	4610      	mov	r0, r2
 801002c:	f7fe fbc5 	bl	800e7ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010034:	4b23      	ldr	r3, [pc, #140]	; (80100c4 <xTaskResumeAll+0x12c>)
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801003a:	429a      	cmp	r2, r3
 801003c:	d302      	bcc.n	8010044 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801003e:	4b22      	ldr	r3, [pc, #136]	; (80100c8 <xTaskResumeAll+0x130>)
 8010040:	2201      	movs	r2, #1
 8010042:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010044:	4b1c      	ldr	r3, [pc, #112]	; (80100b8 <xTaskResumeAll+0x120>)
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d1cb      	bne.n	800ffe4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d001      	beq.n	8010056 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010052:	f000 fb71 	bl	8010738 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010056:	4b1d      	ldr	r3, [pc, #116]	; (80100cc <xTaskResumeAll+0x134>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d010      	beq.n	8010084 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010062:	f000 f859 	bl	8010118 <xTaskIncrementTick>
 8010066:	4603      	mov	r3, r0
 8010068:	2b00      	cmp	r3, #0
 801006a:	d002      	beq.n	8010072 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801006c:	4b16      	ldr	r3, [pc, #88]	; (80100c8 <xTaskResumeAll+0x130>)
 801006e:	2201      	movs	r2, #1
 8010070:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	3b01      	subs	r3, #1
 8010076:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d1f1      	bne.n	8010062 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801007e:	4b13      	ldr	r3, [pc, #76]	; (80100cc <xTaskResumeAll+0x134>)
 8010080:	2200      	movs	r2, #0
 8010082:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010084:	4b10      	ldr	r3, [pc, #64]	; (80100c8 <xTaskResumeAll+0x130>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d009      	beq.n	80100a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801008c:	2301      	movs	r3, #1
 801008e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010090:	4b0f      	ldr	r3, [pc, #60]	; (80100d0 <xTaskResumeAll+0x138>)
 8010092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010096:	601a      	str	r2, [r3, #0]
 8010098:	f3bf 8f4f 	dsb	sy
 801009c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80100a0:	f001 fd40 	bl	8011b24 <vPortExitCritical>

	return xAlreadyYielded;
 80100a4:	68bb      	ldr	r3, [r7, #8]
}
 80100a6:	4618      	mov	r0, r3
 80100a8:	3710      	adds	r7, #16
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}
 80100ae:	bf00      	nop
 80100b0:	240017b0 	.word	0x240017b0
 80100b4:	24001788 	.word	0x24001788
 80100b8:	24001748 	.word	0x24001748
 80100bc:	24001790 	.word	0x24001790
 80100c0:	240012b8 	.word	0x240012b8
 80100c4:	240012b4 	.word	0x240012b4
 80100c8:	2400179c 	.word	0x2400179c
 80100cc:	24001798 	.word	0x24001798
 80100d0:	e000ed04 	.word	0xe000ed04

080100d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80100d4:	b480      	push	{r7}
 80100d6:	b083      	sub	sp, #12
 80100d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80100da:	4b05      	ldr	r3, [pc, #20]	; (80100f0 <xTaskGetTickCount+0x1c>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80100e0:	687b      	ldr	r3, [r7, #4]
}
 80100e2:	4618      	mov	r0, r3
 80100e4:	370c      	adds	r7, #12
 80100e6:	46bd      	mov	sp, r7
 80100e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ec:	4770      	bx	lr
 80100ee:	bf00      	nop
 80100f0:	2400178c 	.word	0x2400178c

080100f4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b082      	sub	sp, #8
 80100f8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80100fa:	f001 fdc5 	bl	8011c88 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80100fe:	2300      	movs	r3, #0
 8010100:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8010102:	4b04      	ldr	r3, [pc, #16]	; (8010114 <xTaskGetTickCountFromISR+0x20>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010108:	683b      	ldr	r3, [r7, #0]
}
 801010a:	4618      	mov	r0, r3
 801010c:	3708      	adds	r7, #8
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}
 8010112:	bf00      	nop
 8010114:	2400178c 	.word	0x2400178c

08010118 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b086      	sub	sp, #24
 801011c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801011e:	2300      	movs	r3, #0
 8010120:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010122:	4b4f      	ldr	r3, [pc, #316]	; (8010260 <xTaskIncrementTick+0x148>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	2b00      	cmp	r3, #0
 8010128:	f040 808f 	bne.w	801024a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801012c:	4b4d      	ldr	r3, [pc, #308]	; (8010264 <xTaskIncrementTick+0x14c>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	3301      	adds	r3, #1
 8010132:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010134:	4a4b      	ldr	r2, [pc, #300]	; (8010264 <xTaskIncrementTick+0x14c>)
 8010136:	693b      	ldr	r3, [r7, #16]
 8010138:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801013a:	693b      	ldr	r3, [r7, #16]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d120      	bne.n	8010182 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010140:	4b49      	ldr	r3, [pc, #292]	; (8010268 <xTaskIncrementTick+0x150>)
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d00a      	beq.n	8010160 <xTaskIncrementTick+0x48>
	__asm volatile
 801014a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801014e:	f383 8811 	msr	BASEPRI, r3
 8010152:	f3bf 8f6f 	isb	sy
 8010156:	f3bf 8f4f 	dsb	sy
 801015a:	603b      	str	r3, [r7, #0]
}
 801015c:	bf00      	nop
 801015e:	e7fe      	b.n	801015e <xTaskIncrementTick+0x46>
 8010160:	4b41      	ldr	r3, [pc, #260]	; (8010268 <xTaskIncrementTick+0x150>)
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	60fb      	str	r3, [r7, #12]
 8010166:	4b41      	ldr	r3, [pc, #260]	; (801026c <xTaskIncrementTick+0x154>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	4a3f      	ldr	r2, [pc, #252]	; (8010268 <xTaskIncrementTick+0x150>)
 801016c:	6013      	str	r3, [r2, #0]
 801016e:	4a3f      	ldr	r2, [pc, #252]	; (801026c <xTaskIncrementTick+0x154>)
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	6013      	str	r3, [r2, #0]
 8010174:	4b3e      	ldr	r3, [pc, #248]	; (8010270 <xTaskIncrementTick+0x158>)
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	3301      	adds	r3, #1
 801017a:	4a3d      	ldr	r2, [pc, #244]	; (8010270 <xTaskIncrementTick+0x158>)
 801017c:	6013      	str	r3, [r2, #0]
 801017e:	f000 fadb 	bl	8010738 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010182:	4b3c      	ldr	r3, [pc, #240]	; (8010274 <xTaskIncrementTick+0x15c>)
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	693a      	ldr	r2, [r7, #16]
 8010188:	429a      	cmp	r2, r3
 801018a:	d349      	bcc.n	8010220 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801018c:	4b36      	ldr	r3, [pc, #216]	; (8010268 <xTaskIncrementTick+0x150>)
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d104      	bne.n	80101a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010196:	4b37      	ldr	r3, [pc, #220]	; (8010274 <xTaskIncrementTick+0x15c>)
 8010198:	f04f 32ff 	mov.w	r2, #4294967295
 801019c:	601a      	str	r2, [r3, #0]
					break;
 801019e:	e03f      	b.n	8010220 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101a0:	4b31      	ldr	r3, [pc, #196]	; (8010268 <xTaskIncrementTick+0x150>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	68db      	ldr	r3, [r3, #12]
 80101a6:	68db      	ldr	r3, [r3, #12]
 80101a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80101aa:	68bb      	ldr	r3, [r7, #8]
 80101ac:	685b      	ldr	r3, [r3, #4]
 80101ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80101b0:	693a      	ldr	r2, [r7, #16]
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	429a      	cmp	r2, r3
 80101b6:	d203      	bcs.n	80101c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80101b8:	4a2e      	ldr	r2, [pc, #184]	; (8010274 <xTaskIncrementTick+0x15c>)
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80101be:	e02f      	b.n	8010220 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	3304      	adds	r3, #4
 80101c4:	4618      	mov	r0, r3
 80101c6:	f7fe fb55 	bl	800e874 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80101ca:	68bb      	ldr	r3, [r7, #8]
 80101cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d004      	beq.n	80101dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80101d2:	68bb      	ldr	r3, [r7, #8]
 80101d4:	3318      	adds	r3, #24
 80101d6:	4618      	mov	r0, r3
 80101d8:	f7fe fb4c 	bl	800e874 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80101dc:	68bb      	ldr	r3, [r7, #8]
 80101de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101e0:	4b25      	ldr	r3, [pc, #148]	; (8010278 <xTaskIncrementTick+0x160>)
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	429a      	cmp	r2, r3
 80101e6:	d903      	bls.n	80101f0 <xTaskIncrementTick+0xd8>
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101ec:	4a22      	ldr	r2, [pc, #136]	; (8010278 <xTaskIncrementTick+0x160>)
 80101ee:	6013      	str	r3, [r2, #0]
 80101f0:	68bb      	ldr	r3, [r7, #8]
 80101f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101f4:	4613      	mov	r3, r2
 80101f6:	009b      	lsls	r3, r3, #2
 80101f8:	4413      	add	r3, r2
 80101fa:	009b      	lsls	r3, r3, #2
 80101fc:	4a1f      	ldr	r2, [pc, #124]	; (801027c <xTaskIncrementTick+0x164>)
 80101fe:	441a      	add	r2, r3
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	3304      	adds	r3, #4
 8010204:	4619      	mov	r1, r3
 8010206:	4610      	mov	r0, r2
 8010208:	f7fe fad7 	bl	800e7ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010210:	4b1b      	ldr	r3, [pc, #108]	; (8010280 <xTaskIncrementTick+0x168>)
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010216:	429a      	cmp	r2, r3
 8010218:	d3b8      	bcc.n	801018c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801021a:	2301      	movs	r3, #1
 801021c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801021e:	e7b5      	b.n	801018c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010220:	4b17      	ldr	r3, [pc, #92]	; (8010280 <xTaskIncrementTick+0x168>)
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010226:	4915      	ldr	r1, [pc, #84]	; (801027c <xTaskIncrementTick+0x164>)
 8010228:	4613      	mov	r3, r2
 801022a:	009b      	lsls	r3, r3, #2
 801022c:	4413      	add	r3, r2
 801022e:	009b      	lsls	r3, r3, #2
 8010230:	440b      	add	r3, r1
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	2b01      	cmp	r3, #1
 8010236:	d901      	bls.n	801023c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010238:	2301      	movs	r3, #1
 801023a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801023c:	4b11      	ldr	r3, [pc, #68]	; (8010284 <xTaskIncrementTick+0x16c>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d007      	beq.n	8010254 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010244:	2301      	movs	r3, #1
 8010246:	617b      	str	r3, [r7, #20]
 8010248:	e004      	b.n	8010254 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801024a:	4b0f      	ldr	r3, [pc, #60]	; (8010288 <xTaskIncrementTick+0x170>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	3301      	adds	r3, #1
 8010250:	4a0d      	ldr	r2, [pc, #52]	; (8010288 <xTaskIncrementTick+0x170>)
 8010252:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010254:	697b      	ldr	r3, [r7, #20]
}
 8010256:	4618      	mov	r0, r3
 8010258:	3718      	adds	r7, #24
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}
 801025e:	bf00      	nop
 8010260:	240017b0 	.word	0x240017b0
 8010264:	2400178c 	.word	0x2400178c
 8010268:	24001740 	.word	0x24001740
 801026c:	24001744 	.word	0x24001744
 8010270:	240017a0 	.word	0x240017a0
 8010274:	240017a8 	.word	0x240017a8
 8010278:	24001790 	.word	0x24001790
 801027c:	240012b8 	.word	0x240012b8
 8010280:	240012b4 	.word	0x240012b4
 8010284:	2400179c 	.word	0x2400179c
 8010288:	24001798 	.word	0x24001798

0801028c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801028c:	b480      	push	{r7}
 801028e:	b085      	sub	sp, #20
 8010290:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010292:	4b2a      	ldr	r3, [pc, #168]	; (801033c <vTaskSwitchContext+0xb0>)
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d003      	beq.n	80102a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801029a:	4b29      	ldr	r3, [pc, #164]	; (8010340 <vTaskSwitchContext+0xb4>)
 801029c:	2201      	movs	r2, #1
 801029e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80102a0:	e046      	b.n	8010330 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80102a2:	4b27      	ldr	r3, [pc, #156]	; (8010340 <vTaskSwitchContext+0xb4>)
 80102a4:	2200      	movs	r2, #0
 80102a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102a8:	4b26      	ldr	r3, [pc, #152]	; (8010344 <vTaskSwitchContext+0xb8>)
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	60fb      	str	r3, [r7, #12]
 80102ae:	e010      	b.n	80102d2 <vTaskSwitchContext+0x46>
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d10a      	bne.n	80102cc <vTaskSwitchContext+0x40>
	__asm volatile
 80102b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102ba:	f383 8811 	msr	BASEPRI, r3
 80102be:	f3bf 8f6f 	isb	sy
 80102c2:	f3bf 8f4f 	dsb	sy
 80102c6:	607b      	str	r3, [r7, #4]
}
 80102c8:	bf00      	nop
 80102ca:	e7fe      	b.n	80102ca <vTaskSwitchContext+0x3e>
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	3b01      	subs	r3, #1
 80102d0:	60fb      	str	r3, [r7, #12]
 80102d2:	491d      	ldr	r1, [pc, #116]	; (8010348 <vTaskSwitchContext+0xbc>)
 80102d4:	68fa      	ldr	r2, [r7, #12]
 80102d6:	4613      	mov	r3, r2
 80102d8:	009b      	lsls	r3, r3, #2
 80102da:	4413      	add	r3, r2
 80102dc:	009b      	lsls	r3, r3, #2
 80102de:	440b      	add	r3, r1
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d0e4      	beq.n	80102b0 <vTaskSwitchContext+0x24>
 80102e6:	68fa      	ldr	r2, [r7, #12]
 80102e8:	4613      	mov	r3, r2
 80102ea:	009b      	lsls	r3, r3, #2
 80102ec:	4413      	add	r3, r2
 80102ee:	009b      	lsls	r3, r3, #2
 80102f0:	4a15      	ldr	r2, [pc, #84]	; (8010348 <vTaskSwitchContext+0xbc>)
 80102f2:	4413      	add	r3, r2
 80102f4:	60bb      	str	r3, [r7, #8]
 80102f6:	68bb      	ldr	r3, [r7, #8]
 80102f8:	685b      	ldr	r3, [r3, #4]
 80102fa:	685a      	ldr	r2, [r3, #4]
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	605a      	str	r2, [r3, #4]
 8010300:	68bb      	ldr	r3, [r7, #8]
 8010302:	685a      	ldr	r2, [r3, #4]
 8010304:	68bb      	ldr	r3, [r7, #8]
 8010306:	3308      	adds	r3, #8
 8010308:	429a      	cmp	r2, r3
 801030a:	d104      	bne.n	8010316 <vTaskSwitchContext+0x8a>
 801030c:	68bb      	ldr	r3, [r7, #8]
 801030e:	685b      	ldr	r3, [r3, #4]
 8010310:	685a      	ldr	r2, [r3, #4]
 8010312:	68bb      	ldr	r3, [r7, #8]
 8010314:	605a      	str	r2, [r3, #4]
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	685b      	ldr	r3, [r3, #4]
 801031a:	68db      	ldr	r3, [r3, #12]
 801031c:	4a0b      	ldr	r2, [pc, #44]	; (801034c <vTaskSwitchContext+0xc0>)
 801031e:	6013      	str	r3, [r2, #0]
 8010320:	4a08      	ldr	r2, [pc, #32]	; (8010344 <vTaskSwitchContext+0xb8>)
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010326:	4b09      	ldr	r3, [pc, #36]	; (801034c <vTaskSwitchContext+0xc0>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	3354      	adds	r3, #84	; 0x54
 801032c:	4a08      	ldr	r2, [pc, #32]	; (8010350 <vTaskSwitchContext+0xc4>)
 801032e:	6013      	str	r3, [r2, #0]
}
 8010330:	bf00      	nop
 8010332:	3714      	adds	r7, #20
 8010334:	46bd      	mov	sp, r7
 8010336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033a:	4770      	bx	lr
 801033c:	240017b0 	.word	0x240017b0
 8010340:	2400179c 	.word	0x2400179c
 8010344:	24001790 	.word	0x24001790
 8010348:	240012b8 	.word	0x240012b8
 801034c:	240012b4 	.word	0x240012b4
 8010350:	24000060 	.word	0x24000060

08010354 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b084      	sub	sp, #16
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
 801035c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d10a      	bne.n	801037a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010368:	f383 8811 	msr	BASEPRI, r3
 801036c:	f3bf 8f6f 	isb	sy
 8010370:	f3bf 8f4f 	dsb	sy
 8010374:	60fb      	str	r3, [r7, #12]
}
 8010376:	bf00      	nop
 8010378:	e7fe      	b.n	8010378 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801037a:	4b07      	ldr	r3, [pc, #28]	; (8010398 <vTaskPlaceOnEventList+0x44>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	3318      	adds	r3, #24
 8010380:	4619      	mov	r1, r3
 8010382:	6878      	ldr	r0, [r7, #4]
 8010384:	f7fe fa3d 	bl	800e802 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010388:	2101      	movs	r1, #1
 801038a:	6838      	ldr	r0, [r7, #0]
 801038c:	f000 fe10 	bl	8010fb0 <prvAddCurrentTaskToDelayedList>
}
 8010390:	bf00      	nop
 8010392:	3710      	adds	r7, #16
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}
 8010398:	240012b4 	.word	0x240012b4

0801039c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801039c:	b580      	push	{r7, lr}
 801039e:	b086      	sub	sp, #24
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	60f8      	str	r0, [r7, #12]
 80103a4:	60b9      	str	r1, [r7, #8]
 80103a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d10a      	bne.n	80103c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80103ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103b2:	f383 8811 	msr	BASEPRI, r3
 80103b6:	f3bf 8f6f 	isb	sy
 80103ba:	f3bf 8f4f 	dsb	sy
 80103be:	617b      	str	r3, [r7, #20]
}
 80103c0:	bf00      	nop
 80103c2:	e7fe      	b.n	80103c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80103c4:	4b0a      	ldr	r3, [pc, #40]	; (80103f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	3318      	adds	r3, #24
 80103ca:	4619      	mov	r1, r3
 80103cc:	68f8      	ldr	r0, [r7, #12]
 80103ce:	f7fe f9f4 	bl	800e7ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d002      	beq.n	80103de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80103d8:	f04f 33ff 	mov.w	r3, #4294967295
 80103dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80103de:	6879      	ldr	r1, [r7, #4]
 80103e0:	68b8      	ldr	r0, [r7, #8]
 80103e2:	f000 fde5 	bl	8010fb0 <prvAddCurrentTaskToDelayedList>
	}
 80103e6:	bf00      	nop
 80103e8:	3718      	adds	r7, #24
 80103ea:	46bd      	mov	sp, r7
 80103ec:	bd80      	pop	{r7, pc}
 80103ee:	bf00      	nop
 80103f0:	240012b4 	.word	0x240012b4

080103f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b086      	sub	sp, #24
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	68db      	ldr	r3, [r3, #12]
 8010400:	68db      	ldr	r3, [r3, #12]
 8010402:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010404:	693b      	ldr	r3, [r7, #16]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d10a      	bne.n	8010420 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801040a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801040e:	f383 8811 	msr	BASEPRI, r3
 8010412:	f3bf 8f6f 	isb	sy
 8010416:	f3bf 8f4f 	dsb	sy
 801041a:	60fb      	str	r3, [r7, #12]
}
 801041c:	bf00      	nop
 801041e:	e7fe      	b.n	801041e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010420:	693b      	ldr	r3, [r7, #16]
 8010422:	3318      	adds	r3, #24
 8010424:	4618      	mov	r0, r3
 8010426:	f7fe fa25 	bl	800e874 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801042a:	4b1e      	ldr	r3, [pc, #120]	; (80104a4 <xTaskRemoveFromEventList+0xb0>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d11d      	bne.n	801046e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010432:	693b      	ldr	r3, [r7, #16]
 8010434:	3304      	adds	r3, #4
 8010436:	4618      	mov	r0, r3
 8010438:	f7fe fa1c 	bl	800e874 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801043c:	693b      	ldr	r3, [r7, #16]
 801043e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010440:	4b19      	ldr	r3, [pc, #100]	; (80104a8 <xTaskRemoveFromEventList+0xb4>)
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	429a      	cmp	r2, r3
 8010446:	d903      	bls.n	8010450 <xTaskRemoveFromEventList+0x5c>
 8010448:	693b      	ldr	r3, [r7, #16]
 801044a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801044c:	4a16      	ldr	r2, [pc, #88]	; (80104a8 <xTaskRemoveFromEventList+0xb4>)
 801044e:	6013      	str	r3, [r2, #0]
 8010450:	693b      	ldr	r3, [r7, #16]
 8010452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010454:	4613      	mov	r3, r2
 8010456:	009b      	lsls	r3, r3, #2
 8010458:	4413      	add	r3, r2
 801045a:	009b      	lsls	r3, r3, #2
 801045c:	4a13      	ldr	r2, [pc, #76]	; (80104ac <xTaskRemoveFromEventList+0xb8>)
 801045e:	441a      	add	r2, r3
 8010460:	693b      	ldr	r3, [r7, #16]
 8010462:	3304      	adds	r3, #4
 8010464:	4619      	mov	r1, r3
 8010466:	4610      	mov	r0, r2
 8010468:	f7fe f9a7 	bl	800e7ba <vListInsertEnd>
 801046c:	e005      	b.n	801047a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801046e:	693b      	ldr	r3, [r7, #16]
 8010470:	3318      	adds	r3, #24
 8010472:	4619      	mov	r1, r3
 8010474:	480e      	ldr	r0, [pc, #56]	; (80104b0 <xTaskRemoveFromEventList+0xbc>)
 8010476:	f7fe f9a0 	bl	800e7ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801047a:	693b      	ldr	r3, [r7, #16]
 801047c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801047e:	4b0d      	ldr	r3, [pc, #52]	; (80104b4 <xTaskRemoveFromEventList+0xc0>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010484:	429a      	cmp	r2, r3
 8010486:	d905      	bls.n	8010494 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010488:	2301      	movs	r3, #1
 801048a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801048c:	4b0a      	ldr	r3, [pc, #40]	; (80104b8 <xTaskRemoveFromEventList+0xc4>)
 801048e:	2201      	movs	r2, #1
 8010490:	601a      	str	r2, [r3, #0]
 8010492:	e001      	b.n	8010498 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010494:	2300      	movs	r3, #0
 8010496:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010498:	697b      	ldr	r3, [r7, #20]
}
 801049a:	4618      	mov	r0, r3
 801049c:	3718      	adds	r7, #24
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}
 80104a2:	bf00      	nop
 80104a4:	240017b0 	.word	0x240017b0
 80104a8:	24001790 	.word	0x24001790
 80104ac:	240012b8 	.word	0x240012b8
 80104b0:	24001748 	.word	0x24001748
 80104b4:	240012b4 	.word	0x240012b4
 80104b8:	2400179c 	.word	0x2400179c

080104bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80104bc:	b480      	push	{r7}
 80104be:	b083      	sub	sp, #12
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80104c4:	4b06      	ldr	r3, [pc, #24]	; (80104e0 <vTaskInternalSetTimeOutState+0x24>)
 80104c6:	681a      	ldr	r2, [r3, #0]
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80104cc:	4b05      	ldr	r3, [pc, #20]	; (80104e4 <vTaskInternalSetTimeOutState+0x28>)
 80104ce:	681a      	ldr	r2, [r3, #0]
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	605a      	str	r2, [r3, #4]
}
 80104d4:	bf00      	nop
 80104d6:	370c      	adds	r7, #12
 80104d8:	46bd      	mov	sp, r7
 80104da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104de:	4770      	bx	lr
 80104e0:	240017a0 	.word	0x240017a0
 80104e4:	2400178c 	.word	0x2400178c

080104e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b088      	sub	sp, #32
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
 80104f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d10a      	bne.n	801050e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80104f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104fc:	f383 8811 	msr	BASEPRI, r3
 8010500:	f3bf 8f6f 	isb	sy
 8010504:	f3bf 8f4f 	dsb	sy
 8010508:	613b      	str	r3, [r7, #16]
}
 801050a:	bf00      	nop
 801050c:	e7fe      	b.n	801050c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d10a      	bne.n	801052a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010518:	f383 8811 	msr	BASEPRI, r3
 801051c:	f3bf 8f6f 	isb	sy
 8010520:	f3bf 8f4f 	dsb	sy
 8010524:	60fb      	str	r3, [r7, #12]
}
 8010526:	bf00      	nop
 8010528:	e7fe      	b.n	8010528 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801052a:	f001 facb 	bl	8011ac4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801052e:	4b1d      	ldr	r3, [pc, #116]	; (80105a4 <xTaskCheckForTimeOut+0xbc>)
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	685b      	ldr	r3, [r3, #4]
 8010538:	69ba      	ldr	r2, [r7, #24]
 801053a:	1ad3      	subs	r3, r2, r3
 801053c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010546:	d102      	bne.n	801054e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010548:	2300      	movs	r3, #0
 801054a:	61fb      	str	r3, [r7, #28]
 801054c:	e023      	b.n	8010596 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681a      	ldr	r2, [r3, #0]
 8010552:	4b15      	ldr	r3, [pc, #84]	; (80105a8 <xTaskCheckForTimeOut+0xc0>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	429a      	cmp	r2, r3
 8010558:	d007      	beq.n	801056a <xTaskCheckForTimeOut+0x82>
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	685b      	ldr	r3, [r3, #4]
 801055e:	69ba      	ldr	r2, [r7, #24]
 8010560:	429a      	cmp	r2, r3
 8010562:	d302      	bcc.n	801056a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010564:	2301      	movs	r3, #1
 8010566:	61fb      	str	r3, [r7, #28]
 8010568:	e015      	b.n	8010596 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801056a:	683b      	ldr	r3, [r7, #0]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	697a      	ldr	r2, [r7, #20]
 8010570:	429a      	cmp	r2, r3
 8010572:	d20b      	bcs.n	801058c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	681a      	ldr	r2, [r3, #0]
 8010578:	697b      	ldr	r3, [r7, #20]
 801057a:	1ad2      	subs	r2, r2, r3
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010580:	6878      	ldr	r0, [r7, #4]
 8010582:	f7ff ff9b 	bl	80104bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010586:	2300      	movs	r3, #0
 8010588:	61fb      	str	r3, [r7, #28]
 801058a:	e004      	b.n	8010596 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	2200      	movs	r2, #0
 8010590:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010592:	2301      	movs	r3, #1
 8010594:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010596:	f001 fac5 	bl	8011b24 <vPortExitCritical>

	return xReturn;
 801059a:	69fb      	ldr	r3, [r7, #28]
}
 801059c:	4618      	mov	r0, r3
 801059e:	3720      	adds	r7, #32
 80105a0:	46bd      	mov	sp, r7
 80105a2:	bd80      	pop	{r7, pc}
 80105a4:	2400178c 	.word	0x2400178c
 80105a8:	240017a0 	.word	0x240017a0

080105ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80105ac:	b480      	push	{r7}
 80105ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80105b0:	4b03      	ldr	r3, [pc, #12]	; (80105c0 <vTaskMissedYield+0x14>)
 80105b2:	2201      	movs	r2, #1
 80105b4:	601a      	str	r2, [r3, #0]
}
 80105b6:	bf00      	nop
 80105b8:	46bd      	mov	sp, r7
 80105ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105be:	4770      	bx	lr
 80105c0:	2400179c 	.word	0x2400179c

080105c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b082      	sub	sp, #8
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80105cc:	f000 f852 	bl	8010674 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80105d0:	4b06      	ldr	r3, [pc, #24]	; (80105ec <prvIdleTask+0x28>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	2b01      	cmp	r3, #1
 80105d6:	d9f9      	bls.n	80105cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80105d8:	4b05      	ldr	r3, [pc, #20]	; (80105f0 <prvIdleTask+0x2c>)
 80105da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105de:	601a      	str	r2, [r3, #0]
 80105e0:	f3bf 8f4f 	dsb	sy
 80105e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80105e8:	e7f0      	b.n	80105cc <prvIdleTask+0x8>
 80105ea:	bf00      	nop
 80105ec:	240012b8 	.word	0x240012b8
 80105f0:	e000ed04 	.word	0xe000ed04

080105f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b082      	sub	sp, #8
 80105f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80105fa:	2300      	movs	r3, #0
 80105fc:	607b      	str	r3, [r7, #4]
 80105fe:	e00c      	b.n	801061a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010600:	687a      	ldr	r2, [r7, #4]
 8010602:	4613      	mov	r3, r2
 8010604:	009b      	lsls	r3, r3, #2
 8010606:	4413      	add	r3, r2
 8010608:	009b      	lsls	r3, r3, #2
 801060a:	4a12      	ldr	r2, [pc, #72]	; (8010654 <prvInitialiseTaskLists+0x60>)
 801060c:	4413      	add	r3, r2
 801060e:	4618      	mov	r0, r3
 8010610:	f7fe f8a6 	bl	800e760 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	3301      	adds	r3, #1
 8010618:	607b      	str	r3, [r7, #4]
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2b37      	cmp	r3, #55	; 0x37
 801061e:	d9ef      	bls.n	8010600 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010620:	480d      	ldr	r0, [pc, #52]	; (8010658 <prvInitialiseTaskLists+0x64>)
 8010622:	f7fe f89d 	bl	800e760 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010626:	480d      	ldr	r0, [pc, #52]	; (801065c <prvInitialiseTaskLists+0x68>)
 8010628:	f7fe f89a 	bl	800e760 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801062c:	480c      	ldr	r0, [pc, #48]	; (8010660 <prvInitialiseTaskLists+0x6c>)
 801062e:	f7fe f897 	bl	800e760 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010632:	480c      	ldr	r0, [pc, #48]	; (8010664 <prvInitialiseTaskLists+0x70>)
 8010634:	f7fe f894 	bl	800e760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010638:	480b      	ldr	r0, [pc, #44]	; (8010668 <prvInitialiseTaskLists+0x74>)
 801063a:	f7fe f891 	bl	800e760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801063e:	4b0b      	ldr	r3, [pc, #44]	; (801066c <prvInitialiseTaskLists+0x78>)
 8010640:	4a05      	ldr	r2, [pc, #20]	; (8010658 <prvInitialiseTaskLists+0x64>)
 8010642:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010644:	4b0a      	ldr	r3, [pc, #40]	; (8010670 <prvInitialiseTaskLists+0x7c>)
 8010646:	4a05      	ldr	r2, [pc, #20]	; (801065c <prvInitialiseTaskLists+0x68>)
 8010648:	601a      	str	r2, [r3, #0]
}
 801064a:	bf00      	nop
 801064c:	3708      	adds	r7, #8
 801064e:	46bd      	mov	sp, r7
 8010650:	bd80      	pop	{r7, pc}
 8010652:	bf00      	nop
 8010654:	240012b8 	.word	0x240012b8
 8010658:	24001718 	.word	0x24001718
 801065c:	2400172c 	.word	0x2400172c
 8010660:	24001748 	.word	0x24001748
 8010664:	2400175c 	.word	0x2400175c
 8010668:	24001774 	.word	0x24001774
 801066c:	24001740 	.word	0x24001740
 8010670:	24001744 	.word	0x24001744

08010674 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b082      	sub	sp, #8
 8010678:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801067a:	e019      	b.n	80106b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801067c:	f001 fa22 	bl	8011ac4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010680:	4b10      	ldr	r3, [pc, #64]	; (80106c4 <prvCheckTasksWaitingTermination+0x50>)
 8010682:	68db      	ldr	r3, [r3, #12]
 8010684:	68db      	ldr	r3, [r3, #12]
 8010686:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	3304      	adds	r3, #4
 801068c:	4618      	mov	r0, r3
 801068e:	f7fe f8f1 	bl	800e874 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010692:	4b0d      	ldr	r3, [pc, #52]	; (80106c8 <prvCheckTasksWaitingTermination+0x54>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	3b01      	subs	r3, #1
 8010698:	4a0b      	ldr	r2, [pc, #44]	; (80106c8 <prvCheckTasksWaitingTermination+0x54>)
 801069a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801069c:	4b0b      	ldr	r3, [pc, #44]	; (80106cc <prvCheckTasksWaitingTermination+0x58>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	3b01      	subs	r3, #1
 80106a2:	4a0a      	ldr	r2, [pc, #40]	; (80106cc <prvCheckTasksWaitingTermination+0x58>)
 80106a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80106a6:	f001 fa3d 	bl	8011b24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80106aa:	6878      	ldr	r0, [r7, #4]
 80106ac:	f000 f810 	bl	80106d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80106b0:	4b06      	ldr	r3, [pc, #24]	; (80106cc <prvCheckTasksWaitingTermination+0x58>)
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d1e1      	bne.n	801067c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80106b8:	bf00      	nop
 80106ba:	bf00      	nop
 80106bc:	3708      	adds	r7, #8
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}
 80106c2:	bf00      	nop
 80106c4:	2400175c 	.word	0x2400175c
 80106c8:	24001788 	.word	0x24001788
 80106cc:	24001770 	.word	0x24001770

080106d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b084      	sub	sp, #16
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	3354      	adds	r3, #84	; 0x54
 80106dc:	4618      	mov	r0, r3
 80106de:	f00d fffb 	bl	801e6d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d108      	bne.n	80106fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106f0:	4618      	mov	r0, r3
 80106f2:	f001 fbd5 	bl	8011ea0 <vPortFree>
				vPortFree( pxTCB );
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f001 fbd2 	bl	8011ea0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80106fc:	e018      	b.n	8010730 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010704:	2b01      	cmp	r3, #1
 8010706:	d103      	bne.n	8010710 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010708:	6878      	ldr	r0, [r7, #4]
 801070a:	f001 fbc9 	bl	8011ea0 <vPortFree>
	}
 801070e:	e00f      	b.n	8010730 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010716:	2b02      	cmp	r3, #2
 8010718:	d00a      	beq.n	8010730 <prvDeleteTCB+0x60>
	__asm volatile
 801071a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801071e:	f383 8811 	msr	BASEPRI, r3
 8010722:	f3bf 8f6f 	isb	sy
 8010726:	f3bf 8f4f 	dsb	sy
 801072a:	60fb      	str	r3, [r7, #12]
}
 801072c:	bf00      	nop
 801072e:	e7fe      	b.n	801072e <prvDeleteTCB+0x5e>
	}
 8010730:	bf00      	nop
 8010732:	3710      	adds	r7, #16
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}

08010738 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010738:	b480      	push	{r7}
 801073a:	b083      	sub	sp, #12
 801073c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801073e:	4b0c      	ldr	r3, [pc, #48]	; (8010770 <prvResetNextTaskUnblockTime+0x38>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d104      	bne.n	8010752 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010748:	4b0a      	ldr	r3, [pc, #40]	; (8010774 <prvResetNextTaskUnblockTime+0x3c>)
 801074a:	f04f 32ff 	mov.w	r2, #4294967295
 801074e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010750:	e008      	b.n	8010764 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010752:	4b07      	ldr	r3, [pc, #28]	; (8010770 <prvResetNextTaskUnblockTime+0x38>)
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	68db      	ldr	r3, [r3, #12]
 8010758:	68db      	ldr	r3, [r3, #12]
 801075a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	685b      	ldr	r3, [r3, #4]
 8010760:	4a04      	ldr	r2, [pc, #16]	; (8010774 <prvResetNextTaskUnblockTime+0x3c>)
 8010762:	6013      	str	r3, [r2, #0]
}
 8010764:	bf00      	nop
 8010766:	370c      	adds	r7, #12
 8010768:	46bd      	mov	sp, r7
 801076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076e:	4770      	bx	lr
 8010770:	24001740 	.word	0x24001740
 8010774:	240017a8 	.word	0x240017a8

08010778 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8010778:	b480      	push	{r7}
 801077a:	b083      	sub	sp, #12
 801077c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801077e:	4b05      	ldr	r3, [pc, #20]	; (8010794 <xTaskGetCurrentTaskHandle+0x1c>)
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	607b      	str	r3, [r7, #4]

		return xReturn;
 8010784:	687b      	ldr	r3, [r7, #4]
	}
 8010786:	4618      	mov	r0, r3
 8010788:	370c      	adds	r7, #12
 801078a:	46bd      	mov	sp, r7
 801078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010790:	4770      	bx	lr
 8010792:	bf00      	nop
 8010794:	240012b4 	.word	0x240012b4

08010798 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010798:	b480      	push	{r7}
 801079a:	b083      	sub	sp, #12
 801079c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801079e:	4b0b      	ldr	r3, [pc, #44]	; (80107cc <xTaskGetSchedulerState+0x34>)
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d102      	bne.n	80107ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80107a6:	2301      	movs	r3, #1
 80107a8:	607b      	str	r3, [r7, #4]
 80107aa:	e008      	b.n	80107be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80107ac:	4b08      	ldr	r3, [pc, #32]	; (80107d0 <xTaskGetSchedulerState+0x38>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d102      	bne.n	80107ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80107b4:	2302      	movs	r3, #2
 80107b6:	607b      	str	r3, [r7, #4]
 80107b8:	e001      	b.n	80107be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80107ba:	2300      	movs	r3, #0
 80107bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80107be:	687b      	ldr	r3, [r7, #4]
	}
 80107c0:	4618      	mov	r0, r3
 80107c2:	370c      	adds	r7, #12
 80107c4:	46bd      	mov	sp, r7
 80107c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ca:	4770      	bx	lr
 80107cc:	24001794 	.word	0x24001794
 80107d0:	240017b0 	.word	0x240017b0

080107d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b084      	sub	sp, #16
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80107e0:	2300      	movs	r3, #0
 80107e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d051      	beq.n	801088e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107ee:	4b2a      	ldr	r3, [pc, #168]	; (8010898 <xTaskPriorityInherit+0xc4>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d241      	bcs.n	801087c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80107f8:	68bb      	ldr	r3, [r7, #8]
 80107fa:	699b      	ldr	r3, [r3, #24]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	db06      	blt.n	801080e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010800:	4b25      	ldr	r3, [pc, #148]	; (8010898 <xTaskPriorityInherit+0xc4>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010806:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801080a:	68bb      	ldr	r3, [r7, #8]
 801080c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	6959      	ldr	r1, [r3, #20]
 8010812:	68bb      	ldr	r3, [r7, #8]
 8010814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010816:	4613      	mov	r3, r2
 8010818:	009b      	lsls	r3, r3, #2
 801081a:	4413      	add	r3, r2
 801081c:	009b      	lsls	r3, r3, #2
 801081e:	4a1f      	ldr	r2, [pc, #124]	; (801089c <xTaskPriorityInherit+0xc8>)
 8010820:	4413      	add	r3, r2
 8010822:	4299      	cmp	r1, r3
 8010824:	d122      	bne.n	801086c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010826:	68bb      	ldr	r3, [r7, #8]
 8010828:	3304      	adds	r3, #4
 801082a:	4618      	mov	r0, r3
 801082c:	f7fe f822 	bl	800e874 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010830:	4b19      	ldr	r3, [pc, #100]	; (8010898 <xTaskPriorityInherit+0xc4>)
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801083e:	4b18      	ldr	r3, [pc, #96]	; (80108a0 <xTaskPriorityInherit+0xcc>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	429a      	cmp	r2, r3
 8010844:	d903      	bls.n	801084e <xTaskPriorityInherit+0x7a>
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801084a:	4a15      	ldr	r2, [pc, #84]	; (80108a0 <xTaskPriorityInherit+0xcc>)
 801084c:	6013      	str	r3, [r2, #0]
 801084e:	68bb      	ldr	r3, [r7, #8]
 8010850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010852:	4613      	mov	r3, r2
 8010854:	009b      	lsls	r3, r3, #2
 8010856:	4413      	add	r3, r2
 8010858:	009b      	lsls	r3, r3, #2
 801085a:	4a10      	ldr	r2, [pc, #64]	; (801089c <xTaskPriorityInherit+0xc8>)
 801085c:	441a      	add	r2, r3
 801085e:	68bb      	ldr	r3, [r7, #8]
 8010860:	3304      	adds	r3, #4
 8010862:	4619      	mov	r1, r3
 8010864:	4610      	mov	r0, r2
 8010866:	f7fd ffa8 	bl	800e7ba <vListInsertEnd>
 801086a:	e004      	b.n	8010876 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801086c:	4b0a      	ldr	r3, [pc, #40]	; (8010898 <xTaskPriorityInherit+0xc4>)
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010872:	68bb      	ldr	r3, [r7, #8]
 8010874:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010876:	2301      	movs	r3, #1
 8010878:	60fb      	str	r3, [r7, #12]
 801087a:	e008      	b.n	801088e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801087c:	68bb      	ldr	r3, [r7, #8]
 801087e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010880:	4b05      	ldr	r3, [pc, #20]	; (8010898 <xTaskPriorityInherit+0xc4>)
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010886:	429a      	cmp	r2, r3
 8010888:	d201      	bcs.n	801088e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801088a:	2301      	movs	r3, #1
 801088c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801088e:	68fb      	ldr	r3, [r7, #12]
	}
 8010890:	4618      	mov	r0, r3
 8010892:	3710      	adds	r7, #16
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}
 8010898:	240012b4 	.word	0x240012b4
 801089c:	240012b8 	.word	0x240012b8
 80108a0:	24001790 	.word	0x24001790

080108a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b086      	sub	sp, #24
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80108b0:	2300      	movs	r3, #0
 80108b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d056      	beq.n	8010968 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80108ba:	4b2e      	ldr	r3, [pc, #184]	; (8010974 <xTaskPriorityDisinherit+0xd0>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	693a      	ldr	r2, [r7, #16]
 80108c0:	429a      	cmp	r2, r3
 80108c2:	d00a      	beq.n	80108da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80108c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108c8:	f383 8811 	msr	BASEPRI, r3
 80108cc:	f3bf 8f6f 	isb	sy
 80108d0:	f3bf 8f4f 	dsb	sy
 80108d4:	60fb      	str	r3, [r7, #12]
}
 80108d6:	bf00      	nop
 80108d8:	e7fe      	b.n	80108d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80108da:	693b      	ldr	r3, [r7, #16]
 80108dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d10a      	bne.n	80108f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80108e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e6:	f383 8811 	msr	BASEPRI, r3
 80108ea:	f3bf 8f6f 	isb	sy
 80108ee:	f3bf 8f4f 	dsb	sy
 80108f2:	60bb      	str	r3, [r7, #8]
}
 80108f4:	bf00      	nop
 80108f6:	e7fe      	b.n	80108f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80108f8:	693b      	ldr	r3, [r7, #16]
 80108fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80108fc:	1e5a      	subs	r2, r3, #1
 80108fe:	693b      	ldr	r3, [r7, #16]
 8010900:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010902:	693b      	ldr	r3, [r7, #16]
 8010904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010906:	693b      	ldr	r3, [r7, #16]
 8010908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801090a:	429a      	cmp	r2, r3
 801090c:	d02c      	beq.n	8010968 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801090e:	693b      	ldr	r3, [r7, #16]
 8010910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010912:	2b00      	cmp	r3, #0
 8010914:	d128      	bne.n	8010968 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010916:	693b      	ldr	r3, [r7, #16]
 8010918:	3304      	adds	r3, #4
 801091a:	4618      	mov	r0, r3
 801091c:	f7fd ffaa 	bl	800e874 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010920:	693b      	ldr	r3, [r7, #16]
 8010922:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010924:	693b      	ldr	r3, [r7, #16]
 8010926:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010928:	693b      	ldr	r3, [r7, #16]
 801092a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801092c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010930:	693b      	ldr	r3, [r7, #16]
 8010932:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010934:	693b      	ldr	r3, [r7, #16]
 8010936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010938:	4b0f      	ldr	r3, [pc, #60]	; (8010978 <xTaskPriorityDisinherit+0xd4>)
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	429a      	cmp	r2, r3
 801093e:	d903      	bls.n	8010948 <xTaskPriorityDisinherit+0xa4>
 8010940:	693b      	ldr	r3, [r7, #16]
 8010942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010944:	4a0c      	ldr	r2, [pc, #48]	; (8010978 <xTaskPriorityDisinherit+0xd4>)
 8010946:	6013      	str	r3, [r2, #0]
 8010948:	693b      	ldr	r3, [r7, #16]
 801094a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801094c:	4613      	mov	r3, r2
 801094e:	009b      	lsls	r3, r3, #2
 8010950:	4413      	add	r3, r2
 8010952:	009b      	lsls	r3, r3, #2
 8010954:	4a09      	ldr	r2, [pc, #36]	; (801097c <xTaskPriorityDisinherit+0xd8>)
 8010956:	441a      	add	r2, r3
 8010958:	693b      	ldr	r3, [r7, #16]
 801095a:	3304      	adds	r3, #4
 801095c:	4619      	mov	r1, r3
 801095e:	4610      	mov	r0, r2
 8010960:	f7fd ff2b 	bl	800e7ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010964:	2301      	movs	r3, #1
 8010966:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010968:	697b      	ldr	r3, [r7, #20]
	}
 801096a:	4618      	mov	r0, r3
 801096c:	3718      	adds	r7, #24
 801096e:	46bd      	mov	sp, r7
 8010970:	bd80      	pop	{r7, pc}
 8010972:	bf00      	nop
 8010974:	240012b4 	.word	0x240012b4
 8010978:	24001790 	.word	0x24001790
 801097c:	240012b8 	.word	0x240012b8

08010980 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010980:	b580      	push	{r7, lr}
 8010982:	b088      	sub	sp, #32
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
 8010988:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801098e:	2301      	movs	r3, #1
 8010990:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d06a      	beq.n	8010a6e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010998:	69bb      	ldr	r3, [r7, #24]
 801099a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801099c:	2b00      	cmp	r3, #0
 801099e:	d10a      	bne.n	80109b6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80109a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109a4:	f383 8811 	msr	BASEPRI, r3
 80109a8:	f3bf 8f6f 	isb	sy
 80109ac:	f3bf 8f4f 	dsb	sy
 80109b0:	60fb      	str	r3, [r7, #12]
}
 80109b2:	bf00      	nop
 80109b4:	e7fe      	b.n	80109b4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80109b6:	69bb      	ldr	r3, [r7, #24]
 80109b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80109ba:	683a      	ldr	r2, [r7, #0]
 80109bc:	429a      	cmp	r2, r3
 80109be:	d902      	bls.n	80109c6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80109c0:	683b      	ldr	r3, [r7, #0]
 80109c2:	61fb      	str	r3, [r7, #28]
 80109c4:	e002      	b.n	80109cc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80109c6:	69bb      	ldr	r3, [r7, #24]
 80109c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80109ca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80109cc:	69bb      	ldr	r3, [r7, #24]
 80109ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109d0:	69fa      	ldr	r2, [r7, #28]
 80109d2:	429a      	cmp	r2, r3
 80109d4:	d04b      	beq.n	8010a6e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80109d6:	69bb      	ldr	r3, [r7, #24]
 80109d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109da:	697a      	ldr	r2, [r7, #20]
 80109dc:	429a      	cmp	r2, r3
 80109de:	d146      	bne.n	8010a6e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80109e0:	4b25      	ldr	r3, [pc, #148]	; (8010a78 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	69ba      	ldr	r2, [r7, #24]
 80109e6:	429a      	cmp	r2, r3
 80109e8:	d10a      	bne.n	8010a00 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80109ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ee:	f383 8811 	msr	BASEPRI, r3
 80109f2:	f3bf 8f6f 	isb	sy
 80109f6:	f3bf 8f4f 	dsb	sy
 80109fa:	60bb      	str	r3, [r7, #8]
}
 80109fc:	bf00      	nop
 80109fe:	e7fe      	b.n	80109fe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010a00:	69bb      	ldr	r3, [r7, #24]
 8010a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a04:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010a06:	69bb      	ldr	r3, [r7, #24]
 8010a08:	69fa      	ldr	r2, [r7, #28]
 8010a0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010a0c:	69bb      	ldr	r3, [r7, #24]
 8010a0e:	699b      	ldr	r3, [r3, #24]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	db04      	blt.n	8010a1e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a14:	69fb      	ldr	r3, [r7, #28]
 8010a16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010a1a:	69bb      	ldr	r3, [r7, #24]
 8010a1c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010a1e:	69bb      	ldr	r3, [r7, #24]
 8010a20:	6959      	ldr	r1, [r3, #20]
 8010a22:	693a      	ldr	r2, [r7, #16]
 8010a24:	4613      	mov	r3, r2
 8010a26:	009b      	lsls	r3, r3, #2
 8010a28:	4413      	add	r3, r2
 8010a2a:	009b      	lsls	r3, r3, #2
 8010a2c:	4a13      	ldr	r2, [pc, #76]	; (8010a7c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010a2e:	4413      	add	r3, r2
 8010a30:	4299      	cmp	r1, r3
 8010a32:	d11c      	bne.n	8010a6e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a34:	69bb      	ldr	r3, [r7, #24]
 8010a36:	3304      	adds	r3, #4
 8010a38:	4618      	mov	r0, r3
 8010a3a:	f7fd ff1b 	bl	800e874 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010a3e:	69bb      	ldr	r3, [r7, #24]
 8010a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a42:	4b0f      	ldr	r3, [pc, #60]	; (8010a80 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	429a      	cmp	r2, r3
 8010a48:	d903      	bls.n	8010a52 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8010a4a:	69bb      	ldr	r3, [r7, #24]
 8010a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a4e:	4a0c      	ldr	r2, [pc, #48]	; (8010a80 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010a50:	6013      	str	r3, [r2, #0]
 8010a52:	69bb      	ldr	r3, [r7, #24]
 8010a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a56:	4613      	mov	r3, r2
 8010a58:	009b      	lsls	r3, r3, #2
 8010a5a:	4413      	add	r3, r2
 8010a5c:	009b      	lsls	r3, r3, #2
 8010a5e:	4a07      	ldr	r2, [pc, #28]	; (8010a7c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010a60:	441a      	add	r2, r3
 8010a62:	69bb      	ldr	r3, [r7, #24]
 8010a64:	3304      	adds	r3, #4
 8010a66:	4619      	mov	r1, r3
 8010a68:	4610      	mov	r0, r2
 8010a6a:	f7fd fea6 	bl	800e7ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010a6e:	bf00      	nop
 8010a70:	3720      	adds	r7, #32
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}
 8010a76:	bf00      	nop
 8010a78:	240012b4 	.word	0x240012b4
 8010a7c:	240012b8 	.word	0x240012b8
 8010a80:	24001790 	.word	0x24001790

08010a84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010a84:	b480      	push	{r7}
 8010a86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010a88:	4b07      	ldr	r3, [pc, #28]	; (8010aa8 <pvTaskIncrementMutexHeldCount+0x24>)
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d004      	beq.n	8010a9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010a90:	4b05      	ldr	r3, [pc, #20]	; (8010aa8 <pvTaskIncrementMutexHeldCount+0x24>)
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010a96:	3201      	adds	r2, #1
 8010a98:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8010a9a:	4b03      	ldr	r3, [pc, #12]	; (8010aa8 <pvTaskIncrementMutexHeldCount+0x24>)
 8010a9c:	681b      	ldr	r3, [r3, #0]
	}
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa6:	4770      	bx	lr
 8010aa8:	240012b4 	.word	0x240012b4

08010aac <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b084      	sub	sp, #16
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
 8010ab4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8010ab6:	f001 f805 	bl	8011ac4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8010aba:	4b20      	ldr	r3, [pc, #128]	; (8010b3c <ulTaskNotifyTake+0x90>)
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d113      	bne.n	8010aee <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8010ac6:	4b1d      	ldr	r3, [pc, #116]	; (8010b3c <ulTaskNotifyTake+0x90>)
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	2201      	movs	r2, #1
 8010acc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d00b      	beq.n	8010aee <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010ad6:	2101      	movs	r1, #1
 8010ad8:	6838      	ldr	r0, [r7, #0]
 8010ada:	f000 fa69 	bl	8010fb0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010ade:	4b18      	ldr	r3, [pc, #96]	; (8010b40 <ulTaskNotifyTake+0x94>)
 8010ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ae4:	601a      	str	r2, [r3, #0]
 8010ae6:	f3bf 8f4f 	dsb	sy
 8010aea:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010aee:	f001 f819 	bl	8011b24 <vPortExitCritical>

		taskENTER_CRITICAL();
 8010af2:	f000 ffe7 	bl	8011ac4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8010af6:	4b11      	ldr	r3, [pc, #68]	; (8010b3c <ulTaskNotifyTake+0x90>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010afe:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d00e      	beq.n	8010b24 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d005      	beq.n	8010b18 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8010b0c:	4b0b      	ldr	r3, [pc, #44]	; (8010b3c <ulTaskNotifyTake+0x90>)
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	2200      	movs	r2, #0
 8010b12:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8010b16:	e005      	b.n	8010b24 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8010b18:	4b08      	ldr	r3, [pc, #32]	; (8010b3c <ulTaskNotifyTake+0x90>)
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	68fa      	ldr	r2, [r7, #12]
 8010b1e:	3a01      	subs	r2, #1
 8010b20:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010b24:	4b05      	ldr	r3, [pc, #20]	; (8010b3c <ulTaskNotifyTake+0x90>)
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	2200      	movs	r2, #0
 8010b2a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8010b2e:	f000 fff9 	bl	8011b24 <vPortExitCritical>

		return ulReturn;
 8010b32:	68fb      	ldr	r3, [r7, #12]
	}
 8010b34:	4618      	mov	r0, r3
 8010b36:	3710      	adds	r7, #16
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	bd80      	pop	{r7, pc}
 8010b3c:	240012b4 	.word	0x240012b4
 8010b40:	e000ed04 	.word	0xe000ed04

08010b44 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b08a      	sub	sp, #40	; 0x28
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	60f8      	str	r0, [r7, #12]
 8010b4c:	60b9      	str	r1, [r7, #8]
 8010b4e:	603b      	str	r3, [r7, #0]
 8010b50:	4613      	mov	r3, r2
 8010b52:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8010b54:	2301      	movs	r3, #1
 8010b56:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d10a      	bne.n	8010b74 <xTaskGenericNotify+0x30>
	__asm volatile
 8010b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b62:	f383 8811 	msr	BASEPRI, r3
 8010b66:	f3bf 8f6f 	isb	sy
 8010b6a:	f3bf 8f4f 	dsb	sy
 8010b6e:	61bb      	str	r3, [r7, #24]
}
 8010b70:	bf00      	nop
 8010b72:	e7fe      	b.n	8010b72 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8010b78:	f000 ffa4 	bl	8011ac4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8010b7c:	683b      	ldr	r3, [r7, #0]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d004      	beq.n	8010b8c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010b82:	6a3b      	ldr	r3, [r7, #32]
 8010b84:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010b8c:	6a3b      	ldr	r3, [r7, #32]
 8010b8e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8010b92:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010b94:	6a3b      	ldr	r3, [r7, #32]
 8010b96:	2202      	movs	r2, #2
 8010b98:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8010b9c:	79fb      	ldrb	r3, [r7, #7]
 8010b9e:	2b04      	cmp	r3, #4
 8010ba0:	d82d      	bhi.n	8010bfe <xTaskGenericNotify+0xba>
 8010ba2:	a201      	add	r2, pc, #4	; (adr r2, 8010ba8 <xTaskGenericNotify+0x64>)
 8010ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ba8:	08010c21 	.word	0x08010c21
 8010bac:	08010bbd 	.word	0x08010bbd
 8010bb0:	08010bcf 	.word	0x08010bcf
 8010bb4:	08010bdf 	.word	0x08010bdf
 8010bb8:	08010be9 	.word	0x08010be9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010bbc:	6a3b      	ldr	r3, [r7, #32]
 8010bbe:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8010bc2:	68bb      	ldr	r3, [r7, #8]
 8010bc4:	431a      	orrs	r2, r3
 8010bc6:	6a3b      	ldr	r3, [r7, #32]
 8010bc8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8010bcc:	e02b      	b.n	8010c26 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010bce:	6a3b      	ldr	r3, [r7, #32]
 8010bd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010bd4:	1c5a      	adds	r2, r3, #1
 8010bd6:	6a3b      	ldr	r3, [r7, #32]
 8010bd8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8010bdc:	e023      	b.n	8010c26 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010bde:	6a3b      	ldr	r3, [r7, #32]
 8010be0:	68ba      	ldr	r2, [r7, #8]
 8010be2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8010be6:	e01e      	b.n	8010c26 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010be8:	7ffb      	ldrb	r3, [r7, #31]
 8010bea:	2b02      	cmp	r3, #2
 8010bec:	d004      	beq.n	8010bf8 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010bee:	6a3b      	ldr	r3, [r7, #32]
 8010bf0:	68ba      	ldr	r2, [r7, #8]
 8010bf2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010bf6:	e016      	b.n	8010c26 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8010bfc:	e013      	b.n	8010c26 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010bfe:	6a3b      	ldr	r3, [r7, #32]
 8010c00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c08:	d00c      	beq.n	8010c24 <xTaskGenericNotify+0xe0>
	__asm volatile
 8010c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c0e:	f383 8811 	msr	BASEPRI, r3
 8010c12:	f3bf 8f6f 	isb	sy
 8010c16:	f3bf 8f4f 	dsb	sy
 8010c1a:	617b      	str	r3, [r7, #20]
}
 8010c1c:	bf00      	nop
 8010c1e:	e7fe      	b.n	8010c1e <xTaskGenericNotify+0xda>
					break;
 8010c20:	bf00      	nop
 8010c22:	e000      	b.n	8010c26 <xTaskGenericNotify+0xe2>

					break;
 8010c24:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010c26:	7ffb      	ldrb	r3, [r7, #31]
 8010c28:	2b01      	cmp	r3, #1
 8010c2a:	d13a      	bne.n	8010ca2 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010c2c:	6a3b      	ldr	r3, [r7, #32]
 8010c2e:	3304      	adds	r3, #4
 8010c30:	4618      	mov	r0, r3
 8010c32:	f7fd fe1f 	bl	800e874 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8010c36:	6a3b      	ldr	r3, [r7, #32]
 8010c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c3a:	4b1d      	ldr	r3, [pc, #116]	; (8010cb0 <xTaskGenericNotify+0x16c>)
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	429a      	cmp	r2, r3
 8010c40:	d903      	bls.n	8010c4a <xTaskGenericNotify+0x106>
 8010c42:	6a3b      	ldr	r3, [r7, #32]
 8010c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c46:	4a1a      	ldr	r2, [pc, #104]	; (8010cb0 <xTaskGenericNotify+0x16c>)
 8010c48:	6013      	str	r3, [r2, #0]
 8010c4a:	6a3b      	ldr	r3, [r7, #32]
 8010c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c4e:	4613      	mov	r3, r2
 8010c50:	009b      	lsls	r3, r3, #2
 8010c52:	4413      	add	r3, r2
 8010c54:	009b      	lsls	r3, r3, #2
 8010c56:	4a17      	ldr	r2, [pc, #92]	; (8010cb4 <xTaskGenericNotify+0x170>)
 8010c58:	441a      	add	r2, r3
 8010c5a:	6a3b      	ldr	r3, [r7, #32]
 8010c5c:	3304      	adds	r3, #4
 8010c5e:	4619      	mov	r1, r3
 8010c60:	4610      	mov	r0, r2
 8010c62:	f7fd fdaa 	bl	800e7ba <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010c66:	6a3b      	ldr	r3, [r7, #32]
 8010c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d00a      	beq.n	8010c84 <xTaskGenericNotify+0x140>
	__asm volatile
 8010c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c72:	f383 8811 	msr	BASEPRI, r3
 8010c76:	f3bf 8f6f 	isb	sy
 8010c7a:	f3bf 8f4f 	dsb	sy
 8010c7e:	613b      	str	r3, [r7, #16]
}
 8010c80:	bf00      	nop
 8010c82:	e7fe      	b.n	8010c82 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010c84:	6a3b      	ldr	r3, [r7, #32]
 8010c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c88:	4b0b      	ldr	r3, [pc, #44]	; (8010cb8 <xTaskGenericNotify+0x174>)
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c8e:	429a      	cmp	r2, r3
 8010c90:	d907      	bls.n	8010ca2 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8010c92:	4b0a      	ldr	r3, [pc, #40]	; (8010cbc <xTaskGenericNotify+0x178>)
 8010c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c98:	601a      	str	r2, [r3, #0]
 8010c9a:	f3bf 8f4f 	dsb	sy
 8010c9e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010ca2:	f000 ff3f 	bl	8011b24 <vPortExitCritical>

		return xReturn;
 8010ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8010ca8:	4618      	mov	r0, r3
 8010caa:	3728      	adds	r7, #40	; 0x28
 8010cac:	46bd      	mov	sp, r7
 8010cae:	bd80      	pop	{r7, pc}
 8010cb0:	24001790 	.word	0x24001790
 8010cb4:	240012b8 	.word	0x240012b8
 8010cb8:	240012b4 	.word	0x240012b4
 8010cbc:	e000ed04 	.word	0xe000ed04

08010cc0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b08e      	sub	sp, #56	; 0x38
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	60f8      	str	r0, [r7, #12]
 8010cc8:	60b9      	str	r1, [r7, #8]
 8010cca:	603b      	str	r3, [r7, #0]
 8010ccc:	4613      	mov	r3, r2
 8010cce:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8010cd0:	2301      	movs	r3, #1
 8010cd2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d10a      	bne.n	8010cf0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8010cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cde:	f383 8811 	msr	BASEPRI, r3
 8010ce2:	f3bf 8f6f 	isb	sy
 8010ce6:	f3bf 8f4f 	dsb	sy
 8010cea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010cec:	bf00      	nop
 8010cee:	e7fe      	b.n	8010cee <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010cf0:	f000 ffca 	bl	8011c88 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8010cf8:	f3ef 8211 	mrs	r2, BASEPRI
 8010cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d00:	f383 8811 	msr	BASEPRI, r3
 8010d04:	f3bf 8f6f 	isb	sy
 8010d08:	f3bf 8f4f 	dsb	sy
 8010d0c:	623a      	str	r2, [r7, #32]
 8010d0e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8010d10:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010d12:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8010d14:	683b      	ldr	r3, [r7, #0]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d004      	beq.n	8010d24 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d1c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d26:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8010d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d30:	2202      	movs	r2, #2
 8010d32:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8010d36:	79fb      	ldrb	r3, [r7, #7]
 8010d38:	2b04      	cmp	r3, #4
 8010d3a:	d82f      	bhi.n	8010d9c <xTaskGenericNotifyFromISR+0xdc>
 8010d3c:	a201      	add	r2, pc, #4	; (adr r2, 8010d44 <xTaskGenericNotifyFromISR+0x84>)
 8010d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d42:	bf00      	nop
 8010d44:	08010dbf 	.word	0x08010dbf
 8010d48:	08010d59 	.word	0x08010d59
 8010d4c:	08010d6b 	.word	0x08010d6b
 8010d50:	08010d7b 	.word	0x08010d7b
 8010d54:	08010d85 	.word	0x08010d85
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d5a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	431a      	orrs	r2, r3
 8010d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d64:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8010d68:	e02c      	b.n	8010dc4 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010d70:	1c5a      	adds	r2, r3, #1
 8010d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d74:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8010d78:	e024      	b.n	8010dc4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d7c:	68ba      	ldr	r2, [r7, #8]
 8010d7e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8010d82:	e01f      	b.n	8010dc4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010d84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010d88:	2b02      	cmp	r3, #2
 8010d8a:	d004      	beq.n	8010d96 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d8e:	68ba      	ldr	r2, [r7, #8]
 8010d90:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010d94:	e016      	b.n	8010dc4 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8010d96:	2300      	movs	r3, #0
 8010d98:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8010d9a:	e013      	b.n	8010dc4 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010da6:	d00c      	beq.n	8010dc2 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8010da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dac:	f383 8811 	msr	BASEPRI, r3
 8010db0:	f3bf 8f6f 	isb	sy
 8010db4:	f3bf 8f4f 	dsb	sy
 8010db8:	61bb      	str	r3, [r7, #24]
}
 8010dba:	bf00      	nop
 8010dbc:	e7fe      	b.n	8010dbc <xTaskGenericNotifyFromISR+0xfc>
					break;
 8010dbe:	bf00      	nop
 8010dc0:	e000      	b.n	8010dc4 <xTaskGenericNotifyFromISR+0x104>
					break;
 8010dc2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010dc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010dc8:	2b01      	cmp	r3, #1
 8010dca:	d146      	bne.n	8010e5a <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d00a      	beq.n	8010dea <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8010dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dd8:	f383 8811 	msr	BASEPRI, r3
 8010ddc:	f3bf 8f6f 	isb	sy
 8010de0:	f3bf 8f4f 	dsb	sy
 8010de4:	617b      	str	r3, [r7, #20]
}
 8010de6:	bf00      	nop
 8010de8:	e7fe      	b.n	8010de8 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010dea:	4b21      	ldr	r3, [pc, #132]	; (8010e70 <xTaskGenericNotifyFromISR+0x1b0>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d11d      	bne.n	8010e2e <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010df4:	3304      	adds	r3, #4
 8010df6:	4618      	mov	r0, r3
 8010df8:	f7fd fd3c 	bl	800e874 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e00:	4b1c      	ldr	r3, [pc, #112]	; (8010e74 <xTaskGenericNotifyFromISR+0x1b4>)
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	429a      	cmp	r2, r3
 8010e06:	d903      	bls.n	8010e10 <xTaskGenericNotifyFromISR+0x150>
 8010e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e0c:	4a19      	ldr	r2, [pc, #100]	; (8010e74 <xTaskGenericNotifyFromISR+0x1b4>)
 8010e0e:	6013      	str	r3, [r2, #0]
 8010e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e14:	4613      	mov	r3, r2
 8010e16:	009b      	lsls	r3, r3, #2
 8010e18:	4413      	add	r3, r2
 8010e1a:	009b      	lsls	r3, r3, #2
 8010e1c:	4a16      	ldr	r2, [pc, #88]	; (8010e78 <xTaskGenericNotifyFromISR+0x1b8>)
 8010e1e:	441a      	add	r2, r3
 8010e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e22:	3304      	adds	r3, #4
 8010e24:	4619      	mov	r1, r3
 8010e26:	4610      	mov	r0, r2
 8010e28:	f7fd fcc7 	bl	800e7ba <vListInsertEnd>
 8010e2c:	e005      	b.n	8010e3a <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8010e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e30:	3318      	adds	r3, #24
 8010e32:	4619      	mov	r1, r3
 8010e34:	4811      	ldr	r0, [pc, #68]	; (8010e7c <xTaskGenericNotifyFromISR+0x1bc>)
 8010e36:	f7fd fcc0 	bl	800e7ba <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e3e:	4b10      	ldr	r3, [pc, #64]	; (8010e80 <xTaskGenericNotifyFromISR+0x1c0>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e44:	429a      	cmp	r2, r3
 8010e46:	d908      	bls.n	8010e5a <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8010e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d002      	beq.n	8010e54 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8010e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e50:	2201      	movs	r2, #1
 8010e52:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8010e54:	4b0b      	ldr	r3, [pc, #44]	; (8010e84 <xTaskGenericNotifyFromISR+0x1c4>)
 8010e56:	2201      	movs	r2, #1
 8010e58:	601a      	str	r2, [r3, #0]
 8010e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010e5e:	693b      	ldr	r3, [r7, #16]
 8010e60:	f383 8811 	msr	BASEPRI, r3
}
 8010e64:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8010e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8010e68:	4618      	mov	r0, r3
 8010e6a:	3738      	adds	r7, #56	; 0x38
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bd80      	pop	{r7, pc}
 8010e70:	240017b0 	.word	0x240017b0
 8010e74:	24001790 	.word	0x24001790
 8010e78:	240012b8 	.word	0x240012b8
 8010e7c:	24001748 	.word	0x24001748
 8010e80:	240012b4 	.word	0x240012b4
 8010e84:	2400179c 	.word	0x2400179c

08010e88 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b08a      	sub	sp, #40	; 0x28
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
 8010e90:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d10a      	bne.n	8010eae <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 8010e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e9c:	f383 8811 	msr	BASEPRI, r3
 8010ea0:	f3bf 8f6f 	isb	sy
 8010ea4:	f3bf 8f4f 	dsb	sy
 8010ea8:	61bb      	str	r3, [r7, #24]
}
 8010eaa:	bf00      	nop
 8010eac:	e7fe      	b.n	8010eac <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010eae:	f000 feeb 	bl	8011c88 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8010eb6:	f3ef 8211 	mrs	r2, BASEPRI
 8010eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ebe:	f383 8811 	msr	BASEPRI, r3
 8010ec2:	f3bf 8f6f 	isb	sy
 8010ec6:	f3bf 8f4f 	dsb	sy
 8010eca:	617a      	str	r2, [r7, #20]
 8010ecc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010ece:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010ed0:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ed4:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8010ed8:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010edc:	2202      	movs	r2, #2
 8010ede:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8010ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010ee8:	1c5a      	adds	r2, r3, #1
 8010eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010ef0:	7ffb      	ldrb	r3, [r7, #31]
 8010ef2:	2b01      	cmp	r3, #1
 8010ef4:	d146      	bne.n	8010f84 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d00a      	beq.n	8010f14 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8010efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f02:	f383 8811 	msr	BASEPRI, r3
 8010f06:	f3bf 8f6f 	isb	sy
 8010f0a:	f3bf 8f4f 	dsb	sy
 8010f0e:	60fb      	str	r3, [r7, #12]
}
 8010f10:	bf00      	nop
 8010f12:	e7fe      	b.n	8010f12 <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f14:	4b20      	ldr	r3, [pc, #128]	; (8010f98 <vTaskNotifyGiveFromISR+0x110>)
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d11d      	bne.n	8010f58 <vTaskNotifyGiveFromISR+0xd0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f1e:	3304      	adds	r3, #4
 8010f20:	4618      	mov	r0, r3
 8010f22:	f7fd fca7 	bl	800e874 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f2a:	4b1c      	ldr	r3, [pc, #112]	; (8010f9c <vTaskNotifyGiveFromISR+0x114>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	429a      	cmp	r2, r3
 8010f30:	d903      	bls.n	8010f3a <vTaskNotifyGiveFromISR+0xb2>
 8010f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f36:	4a19      	ldr	r2, [pc, #100]	; (8010f9c <vTaskNotifyGiveFromISR+0x114>)
 8010f38:	6013      	str	r3, [r2, #0]
 8010f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f3e:	4613      	mov	r3, r2
 8010f40:	009b      	lsls	r3, r3, #2
 8010f42:	4413      	add	r3, r2
 8010f44:	009b      	lsls	r3, r3, #2
 8010f46:	4a16      	ldr	r2, [pc, #88]	; (8010fa0 <vTaskNotifyGiveFromISR+0x118>)
 8010f48:	441a      	add	r2, r3
 8010f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f4c:	3304      	adds	r3, #4
 8010f4e:	4619      	mov	r1, r3
 8010f50:	4610      	mov	r0, r2
 8010f52:	f7fd fc32 	bl	800e7ba <vListInsertEnd>
 8010f56:	e005      	b.n	8010f64 <vTaskNotifyGiveFromISR+0xdc>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8010f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f5a:	3318      	adds	r3, #24
 8010f5c:	4619      	mov	r1, r3
 8010f5e:	4811      	ldr	r0, [pc, #68]	; (8010fa4 <vTaskNotifyGiveFromISR+0x11c>)
 8010f60:	f7fd fc2b 	bl	800e7ba <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f68:	4b0f      	ldr	r3, [pc, #60]	; (8010fa8 <vTaskNotifyGiveFromISR+0x120>)
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f6e:	429a      	cmp	r2, r3
 8010f70:	d908      	bls.n	8010f84 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d002      	beq.n	8010f7e <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	2201      	movs	r2, #1
 8010f7c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8010f7e:	4b0b      	ldr	r3, [pc, #44]	; (8010fac <vTaskNotifyGiveFromISR+0x124>)
 8010f80:	2201      	movs	r2, #1
 8010f82:	601a      	str	r2, [r3, #0]
 8010f84:	6a3b      	ldr	r3, [r7, #32]
 8010f86:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8010f88:	68bb      	ldr	r3, [r7, #8]
 8010f8a:	f383 8811 	msr	BASEPRI, r3
}
 8010f8e:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8010f90:	bf00      	nop
 8010f92:	3728      	adds	r7, #40	; 0x28
 8010f94:	46bd      	mov	sp, r7
 8010f96:	bd80      	pop	{r7, pc}
 8010f98:	240017b0 	.word	0x240017b0
 8010f9c:	24001790 	.word	0x24001790
 8010fa0:	240012b8 	.word	0x240012b8
 8010fa4:	24001748 	.word	0x24001748
 8010fa8:	240012b4 	.word	0x240012b4
 8010fac:	2400179c 	.word	0x2400179c

08010fb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b084      	sub	sp, #16
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
 8010fb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010fba:	4b21      	ldr	r3, [pc, #132]	; (8011040 <prvAddCurrentTaskToDelayedList+0x90>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010fc0:	4b20      	ldr	r3, [pc, #128]	; (8011044 <prvAddCurrentTaskToDelayedList+0x94>)
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	3304      	adds	r3, #4
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f7fd fc54 	bl	800e874 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fd2:	d10a      	bne.n	8010fea <prvAddCurrentTaskToDelayedList+0x3a>
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d007      	beq.n	8010fea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010fda:	4b1a      	ldr	r3, [pc, #104]	; (8011044 <prvAddCurrentTaskToDelayedList+0x94>)
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	3304      	adds	r3, #4
 8010fe0:	4619      	mov	r1, r3
 8010fe2:	4819      	ldr	r0, [pc, #100]	; (8011048 <prvAddCurrentTaskToDelayedList+0x98>)
 8010fe4:	f7fd fbe9 	bl	800e7ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010fe8:	e026      	b.n	8011038 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010fea:	68fa      	ldr	r2, [r7, #12]
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	4413      	add	r3, r2
 8010ff0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010ff2:	4b14      	ldr	r3, [pc, #80]	; (8011044 <prvAddCurrentTaskToDelayedList+0x94>)
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	68ba      	ldr	r2, [r7, #8]
 8010ff8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010ffa:	68ba      	ldr	r2, [r7, #8]
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	429a      	cmp	r2, r3
 8011000:	d209      	bcs.n	8011016 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011002:	4b12      	ldr	r3, [pc, #72]	; (801104c <prvAddCurrentTaskToDelayedList+0x9c>)
 8011004:	681a      	ldr	r2, [r3, #0]
 8011006:	4b0f      	ldr	r3, [pc, #60]	; (8011044 <prvAddCurrentTaskToDelayedList+0x94>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	3304      	adds	r3, #4
 801100c:	4619      	mov	r1, r3
 801100e:	4610      	mov	r0, r2
 8011010:	f7fd fbf7 	bl	800e802 <vListInsert>
}
 8011014:	e010      	b.n	8011038 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011016:	4b0e      	ldr	r3, [pc, #56]	; (8011050 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011018:	681a      	ldr	r2, [r3, #0]
 801101a:	4b0a      	ldr	r3, [pc, #40]	; (8011044 <prvAddCurrentTaskToDelayedList+0x94>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	3304      	adds	r3, #4
 8011020:	4619      	mov	r1, r3
 8011022:	4610      	mov	r0, r2
 8011024:	f7fd fbed 	bl	800e802 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011028:	4b0a      	ldr	r3, [pc, #40]	; (8011054 <prvAddCurrentTaskToDelayedList+0xa4>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	68ba      	ldr	r2, [r7, #8]
 801102e:	429a      	cmp	r2, r3
 8011030:	d202      	bcs.n	8011038 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011032:	4a08      	ldr	r2, [pc, #32]	; (8011054 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011034:	68bb      	ldr	r3, [r7, #8]
 8011036:	6013      	str	r3, [r2, #0]
}
 8011038:	bf00      	nop
 801103a:	3710      	adds	r7, #16
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}
 8011040:	2400178c 	.word	0x2400178c
 8011044:	240012b4 	.word	0x240012b4
 8011048:	24001774 	.word	0x24001774
 801104c:	24001744 	.word	0x24001744
 8011050:	24001740 	.word	0x24001740
 8011054:	240017a8 	.word	0x240017a8

08011058 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b08a      	sub	sp, #40	; 0x28
 801105c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801105e:	2300      	movs	r3, #0
 8011060:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011062:	f000 fba1 	bl	80117a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011066:	4b1c      	ldr	r3, [pc, #112]	; (80110d8 <xTimerCreateTimerTask+0x80>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d021      	beq.n	80110b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801106e:	2300      	movs	r3, #0
 8011070:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011072:	2300      	movs	r3, #0
 8011074:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011076:	1d3a      	adds	r2, r7, #4
 8011078:	f107 0108 	add.w	r1, r7, #8
 801107c:	f107 030c 	add.w	r3, r7, #12
 8011080:	4618      	mov	r0, r3
 8011082:	f7fd fb53 	bl	800e72c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011086:	6879      	ldr	r1, [r7, #4]
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	68fa      	ldr	r2, [r7, #12]
 801108c:	9202      	str	r2, [sp, #8]
 801108e:	9301      	str	r3, [sp, #4]
 8011090:	2302      	movs	r3, #2
 8011092:	9300      	str	r3, [sp, #0]
 8011094:	2300      	movs	r3, #0
 8011096:	460a      	mov	r2, r1
 8011098:	4910      	ldr	r1, [pc, #64]	; (80110dc <xTimerCreateTimerTask+0x84>)
 801109a:	4811      	ldr	r0, [pc, #68]	; (80110e0 <xTimerCreateTimerTask+0x88>)
 801109c:	f7fe fc22 	bl	800f8e4 <xTaskCreateStatic>
 80110a0:	4603      	mov	r3, r0
 80110a2:	4a10      	ldr	r2, [pc, #64]	; (80110e4 <xTimerCreateTimerTask+0x8c>)
 80110a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80110a6:	4b0f      	ldr	r3, [pc, #60]	; (80110e4 <xTimerCreateTimerTask+0x8c>)
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d001      	beq.n	80110b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80110ae:	2301      	movs	r3, #1
 80110b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80110b2:	697b      	ldr	r3, [r7, #20]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d10a      	bne.n	80110ce <xTimerCreateTimerTask+0x76>
	__asm volatile
 80110b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110bc:	f383 8811 	msr	BASEPRI, r3
 80110c0:	f3bf 8f6f 	isb	sy
 80110c4:	f3bf 8f4f 	dsb	sy
 80110c8:	613b      	str	r3, [r7, #16]
}
 80110ca:	bf00      	nop
 80110cc:	e7fe      	b.n	80110cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80110ce:	697b      	ldr	r3, [r7, #20]
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	3718      	adds	r7, #24
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}
 80110d8:	240017e4 	.word	0x240017e4
 80110dc:	080204e0 	.word	0x080204e0
 80110e0:	08011351 	.word	0x08011351
 80110e4:	240017e8 	.word	0x240017e8

080110e8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b088      	sub	sp, #32
 80110ec:	af02      	add	r7, sp, #8
 80110ee:	60f8      	str	r0, [r7, #12]
 80110f0:	60b9      	str	r1, [r7, #8]
 80110f2:	607a      	str	r2, [r7, #4]
 80110f4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80110f6:	202c      	movs	r0, #44	; 0x2c
 80110f8:	f000 fe06 	bl	8011d08 <pvPortMalloc>
 80110fc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80110fe:	697b      	ldr	r3, [r7, #20]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d00d      	beq.n	8011120 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8011104:	697b      	ldr	r3, [r7, #20]
 8011106:	2200      	movs	r2, #0
 8011108:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801110c:	697b      	ldr	r3, [r7, #20]
 801110e:	9301      	str	r3, [sp, #4]
 8011110:	6a3b      	ldr	r3, [r7, #32]
 8011112:	9300      	str	r3, [sp, #0]
 8011114:	683b      	ldr	r3, [r7, #0]
 8011116:	687a      	ldr	r2, [r7, #4]
 8011118:	68b9      	ldr	r1, [r7, #8]
 801111a:	68f8      	ldr	r0, [r7, #12]
 801111c:	f000 f843 	bl	80111a6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8011120:	697b      	ldr	r3, [r7, #20]
	}
 8011122:	4618      	mov	r0, r3
 8011124:	3718      	adds	r7, #24
 8011126:	46bd      	mov	sp, r7
 8011128:	bd80      	pop	{r7, pc}

0801112a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 801112a:	b580      	push	{r7, lr}
 801112c:	b08a      	sub	sp, #40	; 0x28
 801112e:	af02      	add	r7, sp, #8
 8011130:	60f8      	str	r0, [r7, #12]
 8011132:	60b9      	str	r1, [r7, #8]
 8011134:	607a      	str	r2, [r7, #4]
 8011136:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8011138:	232c      	movs	r3, #44	; 0x2c
 801113a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 801113c:	693b      	ldr	r3, [r7, #16]
 801113e:	2b2c      	cmp	r3, #44	; 0x2c
 8011140:	d00a      	beq.n	8011158 <xTimerCreateStatic+0x2e>
	__asm volatile
 8011142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011146:	f383 8811 	msr	BASEPRI, r3
 801114a:	f3bf 8f6f 	isb	sy
 801114e:	f3bf 8f4f 	dsb	sy
 8011152:	61bb      	str	r3, [r7, #24]
}
 8011154:	bf00      	nop
 8011156:	e7fe      	b.n	8011156 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011158:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 801115a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801115c:	2b00      	cmp	r3, #0
 801115e:	d10a      	bne.n	8011176 <xTimerCreateStatic+0x4c>
	__asm volatile
 8011160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011164:	f383 8811 	msr	BASEPRI, r3
 8011168:	f3bf 8f6f 	isb	sy
 801116c:	f3bf 8f4f 	dsb	sy
 8011170:	617b      	str	r3, [r7, #20]
}
 8011172:	bf00      	nop
 8011174:	e7fe      	b.n	8011174 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8011176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011178:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 801117a:	69fb      	ldr	r3, [r7, #28]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d00d      	beq.n	801119c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8011180:	69fb      	ldr	r3, [r7, #28]
 8011182:	2202      	movs	r2, #2
 8011184:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8011188:	69fb      	ldr	r3, [r7, #28]
 801118a:	9301      	str	r3, [sp, #4]
 801118c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801118e:	9300      	str	r3, [sp, #0]
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	687a      	ldr	r2, [r7, #4]
 8011194:	68b9      	ldr	r1, [r7, #8]
 8011196:	68f8      	ldr	r0, [r7, #12]
 8011198:	f000 f805 	bl	80111a6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 801119c:	69fb      	ldr	r3, [r7, #28]
	}
 801119e:	4618      	mov	r0, r3
 80111a0:	3720      	adds	r7, #32
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}

080111a6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80111a6:	b580      	push	{r7, lr}
 80111a8:	b086      	sub	sp, #24
 80111aa:	af00      	add	r7, sp, #0
 80111ac:	60f8      	str	r0, [r7, #12]
 80111ae:	60b9      	str	r1, [r7, #8]
 80111b0:	607a      	str	r2, [r7, #4]
 80111b2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80111b4:	68bb      	ldr	r3, [r7, #8]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d10a      	bne.n	80111d0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80111ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111be:	f383 8811 	msr	BASEPRI, r3
 80111c2:	f3bf 8f6f 	isb	sy
 80111c6:	f3bf 8f4f 	dsb	sy
 80111ca:	617b      	str	r3, [r7, #20]
}
 80111cc:	bf00      	nop
 80111ce:	e7fe      	b.n	80111ce <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80111d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d01e      	beq.n	8011214 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80111d6:	f000 fae7 	bl	80117a8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80111da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111dc:	68fa      	ldr	r2, [r7, #12]
 80111de:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80111e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111e2:	68ba      	ldr	r2, [r7, #8]
 80111e4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80111e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111e8:	683a      	ldr	r2, [r7, #0]
 80111ea:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80111ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ee:	6a3a      	ldr	r2, [r7, #32]
 80111f0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80111f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111f4:	3304      	adds	r3, #4
 80111f6:	4618      	mov	r0, r3
 80111f8:	f7fd fad2 	bl	800e7a0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d008      	beq.n	8011214 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8011202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011208:	f043 0304 	orr.w	r3, r3, #4
 801120c:	b2da      	uxtb	r2, r3
 801120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011210:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8011214:	bf00      	nop
 8011216:	3718      	adds	r7, #24
 8011218:	46bd      	mov	sp, r7
 801121a:	bd80      	pop	{r7, pc}

0801121c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b08a      	sub	sp, #40	; 0x28
 8011220:	af00      	add	r7, sp, #0
 8011222:	60f8      	str	r0, [r7, #12]
 8011224:	60b9      	str	r1, [r7, #8]
 8011226:	607a      	str	r2, [r7, #4]
 8011228:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801122a:	2300      	movs	r3, #0
 801122c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d10a      	bne.n	801124a <xTimerGenericCommand+0x2e>
	__asm volatile
 8011234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011238:	f383 8811 	msr	BASEPRI, r3
 801123c:	f3bf 8f6f 	isb	sy
 8011240:	f3bf 8f4f 	dsb	sy
 8011244:	623b      	str	r3, [r7, #32]
}
 8011246:	bf00      	nop
 8011248:	e7fe      	b.n	8011248 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801124a:	4b1a      	ldr	r3, [pc, #104]	; (80112b4 <xTimerGenericCommand+0x98>)
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d02a      	beq.n	80112a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011252:	68bb      	ldr	r3, [r7, #8]
 8011254:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	2b05      	cmp	r3, #5
 8011262:	dc18      	bgt.n	8011296 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011264:	f7ff fa98 	bl	8010798 <xTaskGetSchedulerState>
 8011268:	4603      	mov	r3, r0
 801126a:	2b02      	cmp	r3, #2
 801126c:	d109      	bne.n	8011282 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801126e:	4b11      	ldr	r3, [pc, #68]	; (80112b4 <xTimerGenericCommand+0x98>)
 8011270:	6818      	ldr	r0, [r3, #0]
 8011272:	f107 0110 	add.w	r1, r7, #16
 8011276:	2300      	movs	r3, #0
 8011278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801127a:	f7fd fccd 	bl	800ec18 <xQueueGenericSend>
 801127e:	6278      	str	r0, [r7, #36]	; 0x24
 8011280:	e012      	b.n	80112a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011282:	4b0c      	ldr	r3, [pc, #48]	; (80112b4 <xTimerGenericCommand+0x98>)
 8011284:	6818      	ldr	r0, [r3, #0]
 8011286:	f107 0110 	add.w	r1, r7, #16
 801128a:	2300      	movs	r3, #0
 801128c:	2200      	movs	r2, #0
 801128e:	f7fd fcc3 	bl	800ec18 <xQueueGenericSend>
 8011292:	6278      	str	r0, [r7, #36]	; 0x24
 8011294:	e008      	b.n	80112a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011296:	4b07      	ldr	r3, [pc, #28]	; (80112b4 <xTimerGenericCommand+0x98>)
 8011298:	6818      	ldr	r0, [r3, #0]
 801129a:	f107 0110 	add.w	r1, r7, #16
 801129e:	2300      	movs	r3, #0
 80112a0:	683a      	ldr	r2, [r7, #0]
 80112a2:	f7fd fdb7 	bl	800ee14 <xQueueGenericSendFromISR>
 80112a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80112a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80112aa:	4618      	mov	r0, r3
 80112ac:	3728      	adds	r7, #40	; 0x28
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}
 80112b2:	bf00      	nop
 80112b4:	240017e4 	.word	0x240017e4

080112b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b088      	sub	sp, #32
 80112bc:	af02      	add	r7, sp, #8
 80112be:	6078      	str	r0, [r7, #4]
 80112c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80112c2:	4b22      	ldr	r3, [pc, #136]	; (801134c <prvProcessExpiredTimer+0x94>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	68db      	ldr	r3, [r3, #12]
 80112c8:	68db      	ldr	r3, [r3, #12]
 80112ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	3304      	adds	r3, #4
 80112d0:	4618      	mov	r0, r3
 80112d2:	f7fd facf 	bl	800e874 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80112dc:	f003 0304 	and.w	r3, r3, #4
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d022      	beq.n	801132a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80112e4:	697b      	ldr	r3, [r7, #20]
 80112e6:	699a      	ldr	r2, [r3, #24]
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	18d1      	adds	r1, r2, r3
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	683a      	ldr	r2, [r7, #0]
 80112f0:	6978      	ldr	r0, [r7, #20]
 80112f2:	f000 f8d1 	bl	8011498 <prvInsertTimerInActiveList>
 80112f6:	4603      	mov	r3, r0
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d01f      	beq.n	801133c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80112fc:	2300      	movs	r3, #0
 80112fe:	9300      	str	r3, [sp, #0]
 8011300:	2300      	movs	r3, #0
 8011302:	687a      	ldr	r2, [r7, #4]
 8011304:	2100      	movs	r1, #0
 8011306:	6978      	ldr	r0, [r7, #20]
 8011308:	f7ff ff88 	bl	801121c <xTimerGenericCommand>
 801130c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801130e:	693b      	ldr	r3, [r7, #16]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d113      	bne.n	801133c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8011314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011318:	f383 8811 	msr	BASEPRI, r3
 801131c:	f3bf 8f6f 	isb	sy
 8011320:	f3bf 8f4f 	dsb	sy
 8011324:	60fb      	str	r3, [r7, #12]
}
 8011326:	bf00      	nop
 8011328:	e7fe      	b.n	8011328 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801132a:	697b      	ldr	r3, [r7, #20]
 801132c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011330:	f023 0301 	bic.w	r3, r3, #1
 8011334:	b2da      	uxtb	r2, r3
 8011336:	697b      	ldr	r3, [r7, #20]
 8011338:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801133c:	697b      	ldr	r3, [r7, #20]
 801133e:	6a1b      	ldr	r3, [r3, #32]
 8011340:	6978      	ldr	r0, [r7, #20]
 8011342:	4798      	blx	r3
}
 8011344:	bf00      	nop
 8011346:	3718      	adds	r7, #24
 8011348:	46bd      	mov	sp, r7
 801134a:	bd80      	pop	{r7, pc}
 801134c:	240017dc 	.word	0x240017dc

08011350 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b084      	sub	sp, #16
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011358:	f107 0308 	add.w	r3, r7, #8
 801135c:	4618      	mov	r0, r3
 801135e:	f000 f857 	bl	8011410 <prvGetNextExpireTime>
 8011362:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011364:	68bb      	ldr	r3, [r7, #8]
 8011366:	4619      	mov	r1, r3
 8011368:	68f8      	ldr	r0, [r7, #12]
 801136a:	f000 f803 	bl	8011374 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801136e:	f000 f8d5 	bl	801151c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011372:	e7f1      	b.n	8011358 <prvTimerTask+0x8>

08011374 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b084      	sub	sp, #16
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
 801137c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801137e:	f7fe fdfd 	bl	800ff7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011382:	f107 0308 	add.w	r3, r7, #8
 8011386:	4618      	mov	r0, r3
 8011388:	f000 f866 	bl	8011458 <prvSampleTimeNow>
 801138c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801138e:	68bb      	ldr	r3, [r7, #8]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d130      	bne.n	80113f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d10a      	bne.n	80113b0 <prvProcessTimerOrBlockTask+0x3c>
 801139a:	687a      	ldr	r2, [r7, #4]
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	429a      	cmp	r2, r3
 80113a0:	d806      	bhi.n	80113b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80113a2:	f7fe fdf9 	bl	800ff98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80113a6:	68f9      	ldr	r1, [r7, #12]
 80113a8:	6878      	ldr	r0, [r7, #4]
 80113aa:	f7ff ff85 	bl	80112b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80113ae:	e024      	b.n	80113fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d008      	beq.n	80113c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80113b6:	4b13      	ldr	r3, [pc, #76]	; (8011404 <prvProcessTimerOrBlockTask+0x90>)
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d101      	bne.n	80113c4 <prvProcessTimerOrBlockTask+0x50>
 80113c0:	2301      	movs	r3, #1
 80113c2:	e000      	b.n	80113c6 <prvProcessTimerOrBlockTask+0x52>
 80113c4:	2300      	movs	r3, #0
 80113c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80113c8:	4b0f      	ldr	r3, [pc, #60]	; (8011408 <prvProcessTimerOrBlockTask+0x94>)
 80113ca:	6818      	ldr	r0, [r3, #0]
 80113cc:	687a      	ldr	r2, [r7, #4]
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	1ad3      	subs	r3, r2, r3
 80113d2:	683a      	ldr	r2, [r7, #0]
 80113d4:	4619      	mov	r1, r3
 80113d6:	f7fe fa51 	bl	800f87c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80113da:	f7fe fddd 	bl	800ff98 <xTaskResumeAll>
 80113de:	4603      	mov	r3, r0
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d10a      	bne.n	80113fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80113e4:	4b09      	ldr	r3, [pc, #36]	; (801140c <prvProcessTimerOrBlockTask+0x98>)
 80113e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113ea:	601a      	str	r2, [r3, #0]
 80113ec:	f3bf 8f4f 	dsb	sy
 80113f0:	f3bf 8f6f 	isb	sy
}
 80113f4:	e001      	b.n	80113fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80113f6:	f7fe fdcf 	bl	800ff98 <xTaskResumeAll>
}
 80113fa:	bf00      	nop
 80113fc:	3710      	adds	r7, #16
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}
 8011402:	bf00      	nop
 8011404:	240017e0 	.word	0x240017e0
 8011408:	240017e4 	.word	0x240017e4
 801140c:	e000ed04 	.word	0xe000ed04

08011410 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011410:	b480      	push	{r7}
 8011412:	b085      	sub	sp, #20
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011418:	4b0e      	ldr	r3, [pc, #56]	; (8011454 <prvGetNextExpireTime+0x44>)
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d101      	bne.n	8011426 <prvGetNextExpireTime+0x16>
 8011422:	2201      	movs	r2, #1
 8011424:	e000      	b.n	8011428 <prvGetNextExpireTime+0x18>
 8011426:	2200      	movs	r2, #0
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d105      	bne.n	8011440 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011434:	4b07      	ldr	r3, [pc, #28]	; (8011454 <prvGetNextExpireTime+0x44>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	68db      	ldr	r3, [r3, #12]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	60fb      	str	r3, [r7, #12]
 801143e:	e001      	b.n	8011444 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011440:	2300      	movs	r3, #0
 8011442:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011444:	68fb      	ldr	r3, [r7, #12]
}
 8011446:	4618      	mov	r0, r3
 8011448:	3714      	adds	r7, #20
 801144a:	46bd      	mov	sp, r7
 801144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011450:	4770      	bx	lr
 8011452:	bf00      	nop
 8011454:	240017dc 	.word	0x240017dc

08011458 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b084      	sub	sp, #16
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011460:	f7fe fe38 	bl	80100d4 <xTaskGetTickCount>
 8011464:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011466:	4b0b      	ldr	r3, [pc, #44]	; (8011494 <prvSampleTimeNow+0x3c>)
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	68fa      	ldr	r2, [r7, #12]
 801146c:	429a      	cmp	r2, r3
 801146e:	d205      	bcs.n	801147c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011470:	f000 f936 	bl	80116e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2201      	movs	r2, #1
 8011478:	601a      	str	r2, [r3, #0]
 801147a:	e002      	b.n	8011482 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2200      	movs	r2, #0
 8011480:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011482:	4a04      	ldr	r2, [pc, #16]	; (8011494 <prvSampleTimeNow+0x3c>)
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011488:	68fb      	ldr	r3, [r7, #12]
}
 801148a:	4618      	mov	r0, r3
 801148c:	3710      	adds	r7, #16
 801148e:	46bd      	mov	sp, r7
 8011490:	bd80      	pop	{r7, pc}
 8011492:	bf00      	nop
 8011494:	240017ec 	.word	0x240017ec

08011498 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b086      	sub	sp, #24
 801149c:	af00      	add	r7, sp, #0
 801149e:	60f8      	str	r0, [r7, #12]
 80114a0:	60b9      	str	r1, [r7, #8]
 80114a2:	607a      	str	r2, [r7, #4]
 80114a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80114a6:	2300      	movs	r3, #0
 80114a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	68ba      	ldr	r2, [r7, #8]
 80114ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	68fa      	ldr	r2, [r7, #12]
 80114b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80114b6:	68ba      	ldr	r2, [r7, #8]
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	429a      	cmp	r2, r3
 80114bc:	d812      	bhi.n	80114e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114be:	687a      	ldr	r2, [r7, #4]
 80114c0:	683b      	ldr	r3, [r7, #0]
 80114c2:	1ad2      	subs	r2, r2, r3
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	699b      	ldr	r3, [r3, #24]
 80114c8:	429a      	cmp	r2, r3
 80114ca:	d302      	bcc.n	80114d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80114cc:	2301      	movs	r3, #1
 80114ce:	617b      	str	r3, [r7, #20]
 80114d0:	e01b      	b.n	801150a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80114d2:	4b10      	ldr	r3, [pc, #64]	; (8011514 <prvInsertTimerInActiveList+0x7c>)
 80114d4:	681a      	ldr	r2, [r3, #0]
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	3304      	adds	r3, #4
 80114da:	4619      	mov	r1, r3
 80114dc:	4610      	mov	r0, r2
 80114de:	f7fd f990 	bl	800e802 <vListInsert>
 80114e2:	e012      	b.n	801150a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80114e4:	687a      	ldr	r2, [r7, #4]
 80114e6:	683b      	ldr	r3, [r7, #0]
 80114e8:	429a      	cmp	r2, r3
 80114ea:	d206      	bcs.n	80114fa <prvInsertTimerInActiveList+0x62>
 80114ec:	68ba      	ldr	r2, [r7, #8]
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	429a      	cmp	r2, r3
 80114f2:	d302      	bcc.n	80114fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80114f4:	2301      	movs	r3, #1
 80114f6:	617b      	str	r3, [r7, #20]
 80114f8:	e007      	b.n	801150a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80114fa:	4b07      	ldr	r3, [pc, #28]	; (8011518 <prvInsertTimerInActiveList+0x80>)
 80114fc:	681a      	ldr	r2, [r3, #0]
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	3304      	adds	r3, #4
 8011502:	4619      	mov	r1, r3
 8011504:	4610      	mov	r0, r2
 8011506:	f7fd f97c 	bl	800e802 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801150a:	697b      	ldr	r3, [r7, #20]
}
 801150c:	4618      	mov	r0, r3
 801150e:	3718      	adds	r7, #24
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}
 8011514:	240017e0 	.word	0x240017e0
 8011518:	240017dc 	.word	0x240017dc

0801151c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b08e      	sub	sp, #56	; 0x38
 8011520:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011522:	e0ca      	b.n	80116ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	2b00      	cmp	r3, #0
 8011528:	da18      	bge.n	801155c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801152a:	1d3b      	adds	r3, r7, #4
 801152c:	3304      	adds	r3, #4
 801152e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011532:	2b00      	cmp	r3, #0
 8011534:	d10a      	bne.n	801154c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8011536:	f04f 0350 	mov.w	r3, #80	; 0x50
 801153a:	f383 8811 	msr	BASEPRI, r3
 801153e:	f3bf 8f6f 	isb	sy
 8011542:	f3bf 8f4f 	dsb	sy
 8011546:	61fb      	str	r3, [r7, #28]
}
 8011548:	bf00      	nop
 801154a:	e7fe      	b.n	801154a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801154c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011552:	6850      	ldr	r0, [r2, #4]
 8011554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011556:	6892      	ldr	r2, [r2, #8]
 8011558:	4611      	mov	r1, r2
 801155a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	2b00      	cmp	r3, #0
 8011560:	f2c0 80aa 	blt.w	80116b8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801156a:	695b      	ldr	r3, [r3, #20]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d004      	beq.n	801157a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011572:	3304      	adds	r3, #4
 8011574:	4618      	mov	r0, r3
 8011576:	f7fd f97d 	bl	800e874 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801157a:	463b      	mov	r3, r7
 801157c:	4618      	mov	r0, r3
 801157e:	f7ff ff6b 	bl	8011458 <prvSampleTimeNow>
 8011582:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	2b09      	cmp	r3, #9
 8011588:	f200 8097 	bhi.w	80116ba <prvProcessReceivedCommands+0x19e>
 801158c:	a201      	add	r2, pc, #4	; (adr r2, 8011594 <prvProcessReceivedCommands+0x78>)
 801158e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011592:	bf00      	nop
 8011594:	080115bd 	.word	0x080115bd
 8011598:	080115bd 	.word	0x080115bd
 801159c:	080115bd 	.word	0x080115bd
 80115a0:	08011631 	.word	0x08011631
 80115a4:	08011645 	.word	0x08011645
 80115a8:	0801168f 	.word	0x0801168f
 80115ac:	080115bd 	.word	0x080115bd
 80115b0:	080115bd 	.word	0x080115bd
 80115b4:	08011631 	.word	0x08011631
 80115b8:	08011645 	.word	0x08011645
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80115bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80115c2:	f043 0301 	orr.w	r3, r3, #1
 80115c6:	b2da      	uxtb	r2, r3
 80115c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80115ce:	68ba      	ldr	r2, [r7, #8]
 80115d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115d2:	699b      	ldr	r3, [r3, #24]
 80115d4:	18d1      	adds	r1, r2, r3
 80115d6:	68bb      	ldr	r3, [r7, #8]
 80115d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115dc:	f7ff ff5c 	bl	8011498 <prvInsertTimerInActiveList>
 80115e0:	4603      	mov	r3, r0
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d069      	beq.n	80116ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80115e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115e8:	6a1b      	ldr	r3, [r3, #32]
 80115ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80115ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80115f4:	f003 0304 	and.w	r3, r3, #4
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d05e      	beq.n	80116ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80115fc:	68ba      	ldr	r2, [r7, #8]
 80115fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011600:	699b      	ldr	r3, [r3, #24]
 8011602:	441a      	add	r2, r3
 8011604:	2300      	movs	r3, #0
 8011606:	9300      	str	r3, [sp, #0]
 8011608:	2300      	movs	r3, #0
 801160a:	2100      	movs	r1, #0
 801160c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801160e:	f7ff fe05 	bl	801121c <xTimerGenericCommand>
 8011612:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011614:	6a3b      	ldr	r3, [r7, #32]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d14f      	bne.n	80116ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801161a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801161e:	f383 8811 	msr	BASEPRI, r3
 8011622:	f3bf 8f6f 	isb	sy
 8011626:	f3bf 8f4f 	dsb	sy
 801162a:	61bb      	str	r3, [r7, #24]
}
 801162c:	bf00      	nop
 801162e:	e7fe      	b.n	801162e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011632:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011636:	f023 0301 	bic.w	r3, r3, #1
 801163a:	b2da      	uxtb	r2, r3
 801163c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801163e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8011642:	e03a      	b.n	80116ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011646:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801164a:	f043 0301 	orr.w	r3, r3, #1
 801164e:	b2da      	uxtb	r2, r3
 8011650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011652:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011656:	68ba      	ldr	r2, [r7, #8]
 8011658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801165a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801165c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801165e:	699b      	ldr	r3, [r3, #24]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d10a      	bne.n	801167a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8011664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011668:	f383 8811 	msr	BASEPRI, r3
 801166c:	f3bf 8f6f 	isb	sy
 8011670:	f3bf 8f4f 	dsb	sy
 8011674:	617b      	str	r3, [r7, #20]
}
 8011676:	bf00      	nop
 8011678:	e7fe      	b.n	8011678 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801167a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801167c:	699a      	ldr	r2, [r3, #24]
 801167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011680:	18d1      	adds	r1, r2, r3
 8011682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011688:	f7ff ff06 	bl	8011498 <prvInsertTimerInActiveList>
					break;
 801168c:	e015      	b.n	80116ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801168e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011690:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011694:	f003 0302 	and.w	r3, r3, #2
 8011698:	2b00      	cmp	r3, #0
 801169a:	d103      	bne.n	80116a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801169c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801169e:	f000 fbff 	bl	8011ea0 <vPortFree>
 80116a2:	e00a      	b.n	80116ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80116a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80116aa:	f023 0301 	bic.w	r3, r3, #1
 80116ae:	b2da      	uxtb	r2, r3
 80116b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80116b6:	e000      	b.n	80116ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80116b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80116ba:	4b08      	ldr	r3, [pc, #32]	; (80116dc <prvProcessReceivedCommands+0x1c0>)
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	1d39      	adds	r1, r7, #4
 80116c0:	2200      	movs	r2, #0
 80116c2:	4618      	mov	r0, r3
 80116c4:	f7fd fcce 	bl	800f064 <xQueueReceive>
 80116c8:	4603      	mov	r3, r0
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	f47f af2a 	bne.w	8011524 <prvProcessReceivedCommands+0x8>
	}
}
 80116d0:	bf00      	nop
 80116d2:	bf00      	nop
 80116d4:	3730      	adds	r7, #48	; 0x30
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd80      	pop	{r7, pc}
 80116da:	bf00      	nop
 80116dc:	240017e4 	.word	0x240017e4

080116e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b088      	sub	sp, #32
 80116e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80116e6:	e048      	b.n	801177a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80116e8:	4b2d      	ldr	r3, [pc, #180]	; (80117a0 <prvSwitchTimerLists+0xc0>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	68db      	ldr	r3, [r3, #12]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80116f2:	4b2b      	ldr	r3, [pc, #172]	; (80117a0 <prvSwitchTimerLists+0xc0>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	68db      	ldr	r3, [r3, #12]
 80116f8:	68db      	ldr	r3, [r3, #12]
 80116fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	3304      	adds	r3, #4
 8011700:	4618      	mov	r0, r3
 8011702:	f7fd f8b7 	bl	800e874 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	6a1b      	ldr	r3, [r3, #32]
 801170a:	68f8      	ldr	r0, [r7, #12]
 801170c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011714:	f003 0304 	and.w	r3, r3, #4
 8011718:	2b00      	cmp	r3, #0
 801171a:	d02e      	beq.n	801177a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	699b      	ldr	r3, [r3, #24]
 8011720:	693a      	ldr	r2, [r7, #16]
 8011722:	4413      	add	r3, r2
 8011724:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011726:	68ba      	ldr	r2, [r7, #8]
 8011728:	693b      	ldr	r3, [r7, #16]
 801172a:	429a      	cmp	r2, r3
 801172c:	d90e      	bls.n	801174c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	68ba      	ldr	r2, [r7, #8]
 8011732:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	68fa      	ldr	r2, [r7, #12]
 8011738:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801173a:	4b19      	ldr	r3, [pc, #100]	; (80117a0 <prvSwitchTimerLists+0xc0>)
 801173c:	681a      	ldr	r2, [r3, #0]
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	3304      	adds	r3, #4
 8011742:	4619      	mov	r1, r3
 8011744:	4610      	mov	r0, r2
 8011746:	f7fd f85c 	bl	800e802 <vListInsert>
 801174a:	e016      	b.n	801177a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801174c:	2300      	movs	r3, #0
 801174e:	9300      	str	r3, [sp, #0]
 8011750:	2300      	movs	r3, #0
 8011752:	693a      	ldr	r2, [r7, #16]
 8011754:	2100      	movs	r1, #0
 8011756:	68f8      	ldr	r0, [r7, #12]
 8011758:	f7ff fd60 	bl	801121c <xTimerGenericCommand>
 801175c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d10a      	bne.n	801177a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8011764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011768:	f383 8811 	msr	BASEPRI, r3
 801176c:	f3bf 8f6f 	isb	sy
 8011770:	f3bf 8f4f 	dsb	sy
 8011774:	603b      	str	r3, [r7, #0]
}
 8011776:	bf00      	nop
 8011778:	e7fe      	b.n	8011778 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801177a:	4b09      	ldr	r3, [pc, #36]	; (80117a0 <prvSwitchTimerLists+0xc0>)
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d1b1      	bne.n	80116e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011784:	4b06      	ldr	r3, [pc, #24]	; (80117a0 <prvSwitchTimerLists+0xc0>)
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801178a:	4b06      	ldr	r3, [pc, #24]	; (80117a4 <prvSwitchTimerLists+0xc4>)
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	4a04      	ldr	r2, [pc, #16]	; (80117a0 <prvSwitchTimerLists+0xc0>)
 8011790:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011792:	4a04      	ldr	r2, [pc, #16]	; (80117a4 <prvSwitchTimerLists+0xc4>)
 8011794:	697b      	ldr	r3, [r7, #20]
 8011796:	6013      	str	r3, [r2, #0]
}
 8011798:	bf00      	nop
 801179a:	3718      	adds	r7, #24
 801179c:	46bd      	mov	sp, r7
 801179e:	bd80      	pop	{r7, pc}
 80117a0:	240017dc 	.word	0x240017dc
 80117a4:	240017e0 	.word	0x240017e0

080117a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b082      	sub	sp, #8
 80117ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80117ae:	f000 f989 	bl	8011ac4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80117b2:	4b15      	ldr	r3, [pc, #84]	; (8011808 <prvCheckForValidListAndQueue+0x60>)
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d120      	bne.n	80117fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80117ba:	4814      	ldr	r0, [pc, #80]	; (801180c <prvCheckForValidListAndQueue+0x64>)
 80117bc:	f7fc ffd0 	bl	800e760 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80117c0:	4813      	ldr	r0, [pc, #76]	; (8011810 <prvCheckForValidListAndQueue+0x68>)
 80117c2:	f7fc ffcd 	bl	800e760 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80117c6:	4b13      	ldr	r3, [pc, #76]	; (8011814 <prvCheckForValidListAndQueue+0x6c>)
 80117c8:	4a10      	ldr	r2, [pc, #64]	; (801180c <prvCheckForValidListAndQueue+0x64>)
 80117ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80117cc:	4b12      	ldr	r3, [pc, #72]	; (8011818 <prvCheckForValidListAndQueue+0x70>)
 80117ce:	4a10      	ldr	r2, [pc, #64]	; (8011810 <prvCheckForValidListAndQueue+0x68>)
 80117d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80117d2:	2300      	movs	r3, #0
 80117d4:	9300      	str	r3, [sp, #0]
 80117d6:	4b11      	ldr	r3, [pc, #68]	; (801181c <prvCheckForValidListAndQueue+0x74>)
 80117d8:	4a11      	ldr	r2, [pc, #68]	; (8011820 <prvCheckForValidListAndQueue+0x78>)
 80117da:	2110      	movs	r1, #16
 80117dc:	200a      	movs	r0, #10
 80117de:	f7fd f8db 	bl	800e998 <xQueueGenericCreateStatic>
 80117e2:	4603      	mov	r3, r0
 80117e4:	4a08      	ldr	r2, [pc, #32]	; (8011808 <prvCheckForValidListAndQueue+0x60>)
 80117e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80117e8:	4b07      	ldr	r3, [pc, #28]	; (8011808 <prvCheckForValidListAndQueue+0x60>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d005      	beq.n	80117fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80117f0:	4b05      	ldr	r3, [pc, #20]	; (8011808 <prvCheckForValidListAndQueue+0x60>)
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	490b      	ldr	r1, [pc, #44]	; (8011824 <prvCheckForValidListAndQueue+0x7c>)
 80117f6:	4618      	mov	r0, r3
 80117f8:	f7fd ffec 	bl	800f7d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80117fc:	f000 f992 	bl	8011b24 <vPortExitCritical>
}
 8011800:	bf00      	nop
 8011802:	46bd      	mov	sp, r7
 8011804:	bd80      	pop	{r7, pc}
 8011806:	bf00      	nop
 8011808:	240017e4 	.word	0x240017e4
 801180c:	240017b4 	.word	0x240017b4
 8011810:	240017c8 	.word	0x240017c8
 8011814:	240017dc 	.word	0x240017dc
 8011818:	240017e0 	.word	0x240017e0
 801181c:	24001890 	.word	0x24001890
 8011820:	240017f0 	.word	0x240017f0
 8011824:	080204e8 	.word	0x080204e8

08011828 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b086      	sub	sp, #24
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d10a      	bne.n	8011850 <pvTimerGetTimerID+0x28>
	__asm volatile
 801183a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801183e:	f383 8811 	msr	BASEPRI, r3
 8011842:	f3bf 8f6f 	isb	sy
 8011846:	f3bf 8f4f 	dsb	sy
 801184a:	60fb      	str	r3, [r7, #12]
}
 801184c:	bf00      	nop
 801184e:	e7fe      	b.n	801184e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8011850:	f000 f938 	bl	8011ac4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8011854:	697b      	ldr	r3, [r7, #20]
 8011856:	69db      	ldr	r3, [r3, #28]
 8011858:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801185a:	f000 f963 	bl	8011b24 <vPortExitCritical>

	return pvReturn;
 801185e:	693b      	ldr	r3, [r7, #16]
}
 8011860:	4618      	mov	r0, r3
 8011862:	3718      	adds	r7, #24
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}

08011868 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011868:	b480      	push	{r7}
 801186a:	b085      	sub	sp, #20
 801186c:	af00      	add	r7, sp, #0
 801186e:	60f8      	str	r0, [r7, #12]
 8011870:	60b9      	str	r1, [r7, #8]
 8011872:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	3b04      	subs	r3, #4
 8011878:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011880:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	3b04      	subs	r3, #4
 8011886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011888:	68bb      	ldr	r3, [r7, #8]
 801188a:	f023 0201 	bic.w	r2, r3, #1
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	3b04      	subs	r3, #4
 8011896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011898:	4a0c      	ldr	r2, [pc, #48]	; (80118cc <pxPortInitialiseStack+0x64>)
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	3b14      	subs	r3, #20
 80118a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80118a4:	687a      	ldr	r2, [r7, #4]
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	3b04      	subs	r3, #4
 80118ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	f06f 0202 	mvn.w	r2, #2
 80118b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	3b20      	subs	r3, #32
 80118bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80118be:	68fb      	ldr	r3, [r7, #12]
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	3714      	adds	r7, #20
 80118c4:	46bd      	mov	sp, r7
 80118c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ca:	4770      	bx	lr
 80118cc:	080118d1 	.word	0x080118d1

080118d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80118d0:	b480      	push	{r7}
 80118d2:	b085      	sub	sp, #20
 80118d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80118d6:	2300      	movs	r3, #0
 80118d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80118da:	4b12      	ldr	r3, [pc, #72]	; (8011924 <prvTaskExitError+0x54>)
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118e2:	d00a      	beq.n	80118fa <prvTaskExitError+0x2a>
	__asm volatile
 80118e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118e8:	f383 8811 	msr	BASEPRI, r3
 80118ec:	f3bf 8f6f 	isb	sy
 80118f0:	f3bf 8f4f 	dsb	sy
 80118f4:	60fb      	str	r3, [r7, #12]
}
 80118f6:	bf00      	nop
 80118f8:	e7fe      	b.n	80118f8 <prvTaskExitError+0x28>
	__asm volatile
 80118fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118fe:	f383 8811 	msr	BASEPRI, r3
 8011902:	f3bf 8f6f 	isb	sy
 8011906:	f3bf 8f4f 	dsb	sy
 801190a:	60bb      	str	r3, [r7, #8]
}
 801190c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801190e:	bf00      	nop
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d0fc      	beq.n	8011910 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011916:	bf00      	nop
 8011918:	bf00      	nop
 801191a:	3714      	adds	r7, #20
 801191c:	46bd      	mov	sp, r7
 801191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011922:	4770      	bx	lr
 8011924:	24000010 	.word	0x24000010
	...

08011930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011930:	4b07      	ldr	r3, [pc, #28]	; (8011950 <pxCurrentTCBConst2>)
 8011932:	6819      	ldr	r1, [r3, #0]
 8011934:	6808      	ldr	r0, [r1, #0]
 8011936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801193a:	f380 8809 	msr	PSP, r0
 801193e:	f3bf 8f6f 	isb	sy
 8011942:	f04f 0000 	mov.w	r0, #0
 8011946:	f380 8811 	msr	BASEPRI, r0
 801194a:	4770      	bx	lr
 801194c:	f3af 8000 	nop.w

08011950 <pxCurrentTCBConst2>:
 8011950:	240012b4 	.word	0x240012b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011954:	bf00      	nop
 8011956:	bf00      	nop

08011958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011958:	4808      	ldr	r0, [pc, #32]	; (801197c <prvPortStartFirstTask+0x24>)
 801195a:	6800      	ldr	r0, [r0, #0]
 801195c:	6800      	ldr	r0, [r0, #0]
 801195e:	f380 8808 	msr	MSP, r0
 8011962:	f04f 0000 	mov.w	r0, #0
 8011966:	f380 8814 	msr	CONTROL, r0
 801196a:	b662      	cpsie	i
 801196c:	b661      	cpsie	f
 801196e:	f3bf 8f4f 	dsb	sy
 8011972:	f3bf 8f6f 	isb	sy
 8011976:	df00      	svc	0
 8011978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801197a:	bf00      	nop
 801197c:	e000ed08 	.word	0xe000ed08

08011980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b086      	sub	sp, #24
 8011984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011986:	4b46      	ldr	r3, [pc, #280]	; (8011aa0 <xPortStartScheduler+0x120>)
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	4a46      	ldr	r2, [pc, #280]	; (8011aa4 <xPortStartScheduler+0x124>)
 801198c:	4293      	cmp	r3, r2
 801198e:	d10a      	bne.n	80119a6 <xPortStartScheduler+0x26>
	__asm volatile
 8011990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011994:	f383 8811 	msr	BASEPRI, r3
 8011998:	f3bf 8f6f 	isb	sy
 801199c:	f3bf 8f4f 	dsb	sy
 80119a0:	613b      	str	r3, [r7, #16]
}
 80119a2:	bf00      	nop
 80119a4:	e7fe      	b.n	80119a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80119a6:	4b3e      	ldr	r3, [pc, #248]	; (8011aa0 <xPortStartScheduler+0x120>)
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	4a3f      	ldr	r2, [pc, #252]	; (8011aa8 <xPortStartScheduler+0x128>)
 80119ac:	4293      	cmp	r3, r2
 80119ae:	d10a      	bne.n	80119c6 <xPortStartScheduler+0x46>
	__asm volatile
 80119b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119b4:	f383 8811 	msr	BASEPRI, r3
 80119b8:	f3bf 8f6f 	isb	sy
 80119bc:	f3bf 8f4f 	dsb	sy
 80119c0:	60fb      	str	r3, [r7, #12]
}
 80119c2:	bf00      	nop
 80119c4:	e7fe      	b.n	80119c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80119c6:	4b39      	ldr	r3, [pc, #228]	; (8011aac <xPortStartScheduler+0x12c>)
 80119c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	781b      	ldrb	r3, [r3, #0]
 80119ce:	b2db      	uxtb	r3, r3
 80119d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80119d2:	697b      	ldr	r3, [r7, #20]
 80119d4:	22ff      	movs	r2, #255	; 0xff
 80119d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	781b      	ldrb	r3, [r3, #0]
 80119dc:	b2db      	uxtb	r3, r3
 80119de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80119e0:	78fb      	ldrb	r3, [r7, #3]
 80119e2:	b2db      	uxtb	r3, r3
 80119e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80119e8:	b2da      	uxtb	r2, r3
 80119ea:	4b31      	ldr	r3, [pc, #196]	; (8011ab0 <xPortStartScheduler+0x130>)
 80119ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80119ee:	4b31      	ldr	r3, [pc, #196]	; (8011ab4 <xPortStartScheduler+0x134>)
 80119f0:	2207      	movs	r2, #7
 80119f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80119f4:	e009      	b.n	8011a0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80119f6:	4b2f      	ldr	r3, [pc, #188]	; (8011ab4 <xPortStartScheduler+0x134>)
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	3b01      	subs	r3, #1
 80119fc:	4a2d      	ldr	r2, [pc, #180]	; (8011ab4 <xPortStartScheduler+0x134>)
 80119fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011a00:	78fb      	ldrb	r3, [r7, #3]
 8011a02:	b2db      	uxtb	r3, r3
 8011a04:	005b      	lsls	r3, r3, #1
 8011a06:	b2db      	uxtb	r3, r3
 8011a08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011a0a:	78fb      	ldrb	r3, [r7, #3]
 8011a0c:	b2db      	uxtb	r3, r3
 8011a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011a12:	2b80      	cmp	r3, #128	; 0x80
 8011a14:	d0ef      	beq.n	80119f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011a16:	4b27      	ldr	r3, [pc, #156]	; (8011ab4 <xPortStartScheduler+0x134>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	f1c3 0307 	rsb	r3, r3, #7
 8011a1e:	2b04      	cmp	r3, #4
 8011a20:	d00a      	beq.n	8011a38 <xPortStartScheduler+0xb8>
	__asm volatile
 8011a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a26:	f383 8811 	msr	BASEPRI, r3
 8011a2a:	f3bf 8f6f 	isb	sy
 8011a2e:	f3bf 8f4f 	dsb	sy
 8011a32:	60bb      	str	r3, [r7, #8]
}
 8011a34:	bf00      	nop
 8011a36:	e7fe      	b.n	8011a36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011a38:	4b1e      	ldr	r3, [pc, #120]	; (8011ab4 <xPortStartScheduler+0x134>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	021b      	lsls	r3, r3, #8
 8011a3e:	4a1d      	ldr	r2, [pc, #116]	; (8011ab4 <xPortStartScheduler+0x134>)
 8011a40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011a42:	4b1c      	ldr	r3, [pc, #112]	; (8011ab4 <xPortStartScheduler+0x134>)
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011a4a:	4a1a      	ldr	r2, [pc, #104]	; (8011ab4 <xPortStartScheduler+0x134>)
 8011a4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	b2da      	uxtb	r2, r3
 8011a52:	697b      	ldr	r3, [r7, #20]
 8011a54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011a56:	4b18      	ldr	r3, [pc, #96]	; (8011ab8 <xPortStartScheduler+0x138>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	4a17      	ldr	r2, [pc, #92]	; (8011ab8 <xPortStartScheduler+0x138>)
 8011a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011a60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011a62:	4b15      	ldr	r3, [pc, #84]	; (8011ab8 <xPortStartScheduler+0x138>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	4a14      	ldr	r2, [pc, #80]	; (8011ab8 <xPortStartScheduler+0x138>)
 8011a68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011a6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011a6e:	f000 f8dd 	bl	8011c2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011a72:	4b12      	ldr	r3, [pc, #72]	; (8011abc <xPortStartScheduler+0x13c>)
 8011a74:	2200      	movs	r2, #0
 8011a76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011a78:	f000 f8fc 	bl	8011c74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011a7c:	4b10      	ldr	r3, [pc, #64]	; (8011ac0 <xPortStartScheduler+0x140>)
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	4a0f      	ldr	r2, [pc, #60]	; (8011ac0 <xPortStartScheduler+0x140>)
 8011a82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011a86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011a88:	f7ff ff66 	bl	8011958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011a8c:	f7fe fbfe 	bl	801028c <vTaskSwitchContext>
	prvTaskExitError();
 8011a90:	f7ff ff1e 	bl	80118d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011a94:	2300      	movs	r3, #0
}
 8011a96:	4618      	mov	r0, r3
 8011a98:	3718      	adds	r7, #24
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}
 8011a9e:	bf00      	nop
 8011aa0:	e000ed00 	.word	0xe000ed00
 8011aa4:	410fc271 	.word	0x410fc271
 8011aa8:	410fc270 	.word	0x410fc270
 8011aac:	e000e400 	.word	0xe000e400
 8011ab0:	240018e0 	.word	0x240018e0
 8011ab4:	240018e4 	.word	0x240018e4
 8011ab8:	e000ed20 	.word	0xe000ed20
 8011abc:	24000010 	.word	0x24000010
 8011ac0:	e000ef34 	.word	0xe000ef34

08011ac4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011ac4:	b480      	push	{r7}
 8011ac6:	b083      	sub	sp, #12
 8011ac8:	af00      	add	r7, sp, #0
	__asm volatile
 8011aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ace:	f383 8811 	msr	BASEPRI, r3
 8011ad2:	f3bf 8f6f 	isb	sy
 8011ad6:	f3bf 8f4f 	dsb	sy
 8011ada:	607b      	str	r3, [r7, #4]
}
 8011adc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011ade:	4b0f      	ldr	r3, [pc, #60]	; (8011b1c <vPortEnterCritical+0x58>)
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	3301      	adds	r3, #1
 8011ae4:	4a0d      	ldr	r2, [pc, #52]	; (8011b1c <vPortEnterCritical+0x58>)
 8011ae6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011ae8:	4b0c      	ldr	r3, [pc, #48]	; (8011b1c <vPortEnterCritical+0x58>)
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	2b01      	cmp	r3, #1
 8011aee:	d10f      	bne.n	8011b10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011af0:	4b0b      	ldr	r3, [pc, #44]	; (8011b20 <vPortEnterCritical+0x5c>)
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	b2db      	uxtb	r3, r3
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d00a      	beq.n	8011b10 <vPortEnterCritical+0x4c>
	__asm volatile
 8011afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011afe:	f383 8811 	msr	BASEPRI, r3
 8011b02:	f3bf 8f6f 	isb	sy
 8011b06:	f3bf 8f4f 	dsb	sy
 8011b0a:	603b      	str	r3, [r7, #0]
}
 8011b0c:	bf00      	nop
 8011b0e:	e7fe      	b.n	8011b0e <vPortEnterCritical+0x4a>
	}
}
 8011b10:	bf00      	nop
 8011b12:	370c      	adds	r7, #12
 8011b14:	46bd      	mov	sp, r7
 8011b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1a:	4770      	bx	lr
 8011b1c:	24000010 	.word	0x24000010
 8011b20:	e000ed04 	.word	0xe000ed04

08011b24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011b24:	b480      	push	{r7}
 8011b26:	b083      	sub	sp, #12
 8011b28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011b2a:	4b12      	ldr	r3, [pc, #72]	; (8011b74 <vPortExitCritical+0x50>)
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d10a      	bne.n	8011b48 <vPortExitCritical+0x24>
	__asm volatile
 8011b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b36:	f383 8811 	msr	BASEPRI, r3
 8011b3a:	f3bf 8f6f 	isb	sy
 8011b3e:	f3bf 8f4f 	dsb	sy
 8011b42:	607b      	str	r3, [r7, #4]
}
 8011b44:	bf00      	nop
 8011b46:	e7fe      	b.n	8011b46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011b48:	4b0a      	ldr	r3, [pc, #40]	; (8011b74 <vPortExitCritical+0x50>)
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	3b01      	subs	r3, #1
 8011b4e:	4a09      	ldr	r2, [pc, #36]	; (8011b74 <vPortExitCritical+0x50>)
 8011b50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011b52:	4b08      	ldr	r3, [pc, #32]	; (8011b74 <vPortExitCritical+0x50>)
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d105      	bne.n	8011b66 <vPortExitCritical+0x42>
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011b5e:	683b      	ldr	r3, [r7, #0]
 8011b60:	f383 8811 	msr	BASEPRI, r3
}
 8011b64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011b66:	bf00      	nop
 8011b68:	370c      	adds	r7, #12
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b70:	4770      	bx	lr
 8011b72:	bf00      	nop
 8011b74:	24000010 	.word	0x24000010
	...

08011b80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011b80:	f3ef 8009 	mrs	r0, PSP
 8011b84:	f3bf 8f6f 	isb	sy
 8011b88:	4b15      	ldr	r3, [pc, #84]	; (8011be0 <pxCurrentTCBConst>)
 8011b8a:	681a      	ldr	r2, [r3, #0]
 8011b8c:	f01e 0f10 	tst.w	lr, #16
 8011b90:	bf08      	it	eq
 8011b92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011b96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b9a:	6010      	str	r0, [r2, #0]
 8011b9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011ba0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011ba4:	f380 8811 	msr	BASEPRI, r0
 8011ba8:	f3bf 8f4f 	dsb	sy
 8011bac:	f3bf 8f6f 	isb	sy
 8011bb0:	f7fe fb6c 	bl	801028c <vTaskSwitchContext>
 8011bb4:	f04f 0000 	mov.w	r0, #0
 8011bb8:	f380 8811 	msr	BASEPRI, r0
 8011bbc:	bc09      	pop	{r0, r3}
 8011bbe:	6819      	ldr	r1, [r3, #0]
 8011bc0:	6808      	ldr	r0, [r1, #0]
 8011bc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bc6:	f01e 0f10 	tst.w	lr, #16
 8011bca:	bf08      	it	eq
 8011bcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011bd0:	f380 8809 	msr	PSP, r0
 8011bd4:	f3bf 8f6f 	isb	sy
 8011bd8:	4770      	bx	lr
 8011bda:	bf00      	nop
 8011bdc:	f3af 8000 	nop.w

08011be0 <pxCurrentTCBConst>:
 8011be0:	240012b4 	.word	0x240012b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011be4:	bf00      	nop
 8011be6:	bf00      	nop

08011be8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b082      	sub	sp, #8
 8011bec:	af00      	add	r7, sp, #0
	__asm volatile
 8011bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bf2:	f383 8811 	msr	BASEPRI, r3
 8011bf6:	f3bf 8f6f 	isb	sy
 8011bfa:	f3bf 8f4f 	dsb	sy
 8011bfe:	607b      	str	r3, [r7, #4]
}
 8011c00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011c02:	f7fe fa89 	bl	8010118 <xTaskIncrementTick>
 8011c06:	4603      	mov	r3, r0
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d003      	beq.n	8011c14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011c0c:	4b06      	ldr	r3, [pc, #24]	; (8011c28 <xPortSysTickHandler+0x40>)
 8011c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c12:	601a      	str	r2, [r3, #0]
 8011c14:	2300      	movs	r3, #0
 8011c16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011c18:	683b      	ldr	r3, [r7, #0]
 8011c1a:	f383 8811 	msr	BASEPRI, r3
}
 8011c1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011c20:	bf00      	nop
 8011c22:	3708      	adds	r7, #8
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd80      	pop	{r7, pc}
 8011c28:	e000ed04 	.word	0xe000ed04

08011c2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011c2c:	b480      	push	{r7}
 8011c2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011c30:	4b0b      	ldr	r3, [pc, #44]	; (8011c60 <vPortSetupTimerInterrupt+0x34>)
 8011c32:	2200      	movs	r2, #0
 8011c34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011c36:	4b0b      	ldr	r3, [pc, #44]	; (8011c64 <vPortSetupTimerInterrupt+0x38>)
 8011c38:	2200      	movs	r2, #0
 8011c3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011c3c:	4b0a      	ldr	r3, [pc, #40]	; (8011c68 <vPortSetupTimerInterrupt+0x3c>)
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	4a0a      	ldr	r2, [pc, #40]	; (8011c6c <vPortSetupTimerInterrupt+0x40>)
 8011c42:	fba2 2303 	umull	r2, r3, r2, r3
 8011c46:	099b      	lsrs	r3, r3, #6
 8011c48:	4a09      	ldr	r2, [pc, #36]	; (8011c70 <vPortSetupTimerInterrupt+0x44>)
 8011c4a:	3b01      	subs	r3, #1
 8011c4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011c4e:	4b04      	ldr	r3, [pc, #16]	; (8011c60 <vPortSetupTimerInterrupt+0x34>)
 8011c50:	2207      	movs	r2, #7
 8011c52:	601a      	str	r2, [r3, #0]
}
 8011c54:	bf00      	nop
 8011c56:	46bd      	mov	sp, r7
 8011c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5c:	4770      	bx	lr
 8011c5e:	bf00      	nop
 8011c60:	e000e010 	.word	0xe000e010
 8011c64:	e000e018 	.word	0xe000e018
 8011c68:	24000000 	.word	0x24000000
 8011c6c:	10624dd3 	.word	0x10624dd3
 8011c70:	e000e014 	.word	0xe000e014

08011c74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011c74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011c84 <vPortEnableVFP+0x10>
 8011c78:	6801      	ldr	r1, [r0, #0]
 8011c7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011c7e:	6001      	str	r1, [r0, #0]
 8011c80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011c82:	bf00      	nop
 8011c84:	e000ed88 	.word	0xe000ed88

08011c88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011c88:	b480      	push	{r7}
 8011c8a:	b085      	sub	sp, #20
 8011c8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011c8e:	f3ef 8305 	mrs	r3, IPSR
 8011c92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	2b0f      	cmp	r3, #15
 8011c98:	d914      	bls.n	8011cc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011c9a:	4a17      	ldr	r2, [pc, #92]	; (8011cf8 <vPortValidateInterruptPriority+0x70>)
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	4413      	add	r3, r2
 8011ca0:	781b      	ldrb	r3, [r3, #0]
 8011ca2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011ca4:	4b15      	ldr	r3, [pc, #84]	; (8011cfc <vPortValidateInterruptPriority+0x74>)
 8011ca6:	781b      	ldrb	r3, [r3, #0]
 8011ca8:	7afa      	ldrb	r2, [r7, #11]
 8011caa:	429a      	cmp	r2, r3
 8011cac:	d20a      	bcs.n	8011cc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8011cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cb2:	f383 8811 	msr	BASEPRI, r3
 8011cb6:	f3bf 8f6f 	isb	sy
 8011cba:	f3bf 8f4f 	dsb	sy
 8011cbe:	607b      	str	r3, [r7, #4]
}
 8011cc0:	bf00      	nop
 8011cc2:	e7fe      	b.n	8011cc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011cc4:	4b0e      	ldr	r3, [pc, #56]	; (8011d00 <vPortValidateInterruptPriority+0x78>)
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011ccc:	4b0d      	ldr	r3, [pc, #52]	; (8011d04 <vPortValidateInterruptPriority+0x7c>)
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	429a      	cmp	r2, r3
 8011cd2:	d90a      	bls.n	8011cea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cd8:	f383 8811 	msr	BASEPRI, r3
 8011cdc:	f3bf 8f6f 	isb	sy
 8011ce0:	f3bf 8f4f 	dsb	sy
 8011ce4:	603b      	str	r3, [r7, #0]
}
 8011ce6:	bf00      	nop
 8011ce8:	e7fe      	b.n	8011ce8 <vPortValidateInterruptPriority+0x60>
	}
 8011cea:	bf00      	nop
 8011cec:	3714      	adds	r7, #20
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf4:	4770      	bx	lr
 8011cf6:	bf00      	nop
 8011cf8:	e000e3f0 	.word	0xe000e3f0
 8011cfc:	240018e0 	.word	0x240018e0
 8011d00:	e000ed0c 	.word	0xe000ed0c
 8011d04:	240018e4 	.word	0x240018e4

08011d08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b08a      	sub	sp, #40	; 0x28
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011d10:	2300      	movs	r3, #0
 8011d12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011d14:	f7fe f932 	bl	800ff7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011d18:	4b5b      	ldr	r3, [pc, #364]	; (8011e88 <pvPortMalloc+0x180>)
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d101      	bne.n	8011d24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011d20:	f000 f920 	bl	8011f64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011d24:	4b59      	ldr	r3, [pc, #356]	; (8011e8c <pvPortMalloc+0x184>)
 8011d26:	681a      	ldr	r2, [r3, #0]
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	4013      	ands	r3, r2
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	f040 8093 	bne.w	8011e58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d01d      	beq.n	8011d74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011d38:	2208      	movs	r2, #8
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	4413      	add	r3, r2
 8011d3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	f003 0307 	and.w	r3, r3, #7
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d014      	beq.n	8011d74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	f023 0307 	bic.w	r3, r3, #7
 8011d50:	3308      	adds	r3, #8
 8011d52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	f003 0307 	and.w	r3, r3, #7
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d00a      	beq.n	8011d74 <pvPortMalloc+0x6c>
	__asm volatile
 8011d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d62:	f383 8811 	msr	BASEPRI, r3
 8011d66:	f3bf 8f6f 	isb	sy
 8011d6a:	f3bf 8f4f 	dsb	sy
 8011d6e:	617b      	str	r3, [r7, #20]
}
 8011d70:	bf00      	nop
 8011d72:	e7fe      	b.n	8011d72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d06e      	beq.n	8011e58 <pvPortMalloc+0x150>
 8011d7a:	4b45      	ldr	r3, [pc, #276]	; (8011e90 <pvPortMalloc+0x188>)
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	687a      	ldr	r2, [r7, #4]
 8011d80:	429a      	cmp	r2, r3
 8011d82:	d869      	bhi.n	8011e58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011d84:	4b43      	ldr	r3, [pc, #268]	; (8011e94 <pvPortMalloc+0x18c>)
 8011d86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011d88:	4b42      	ldr	r3, [pc, #264]	; (8011e94 <pvPortMalloc+0x18c>)
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011d8e:	e004      	b.n	8011d9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d9c:	685b      	ldr	r3, [r3, #4]
 8011d9e:	687a      	ldr	r2, [r7, #4]
 8011da0:	429a      	cmp	r2, r3
 8011da2:	d903      	bls.n	8011dac <pvPortMalloc+0xa4>
 8011da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d1f1      	bne.n	8011d90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011dac:	4b36      	ldr	r3, [pc, #216]	; (8011e88 <pvPortMalloc+0x180>)
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011db2:	429a      	cmp	r2, r3
 8011db4:	d050      	beq.n	8011e58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011db6:	6a3b      	ldr	r3, [r7, #32]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	2208      	movs	r2, #8
 8011dbc:	4413      	add	r3, r2
 8011dbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dc2:	681a      	ldr	r2, [r3, #0]
 8011dc4:	6a3b      	ldr	r3, [r7, #32]
 8011dc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dca:	685a      	ldr	r2, [r3, #4]
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	1ad2      	subs	r2, r2, r3
 8011dd0:	2308      	movs	r3, #8
 8011dd2:	005b      	lsls	r3, r3, #1
 8011dd4:	429a      	cmp	r2, r3
 8011dd6:	d91f      	bls.n	8011e18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	4413      	add	r3, r2
 8011dde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011de0:	69bb      	ldr	r3, [r7, #24]
 8011de2:	f003 0307 	and.w	r3, r3, #7
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d00a      	beq.n	8011e00 <pvPortMalloc+0xf8>
	__asm volatile
 8011dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dee:	f383 8811 	msr	BASEPRI, r3
 8011df2:	f3bf 8f6f 	isb	sy
 8011df6:	f3bf 8f4f 	dsb	sy
 8011dfa:	613b      	str	r3, [r7, #16]
}
 8011dfc:	bf00      	nop
 8011dfe:	e7fe      	b.n	8011dfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e02:	685a      	ldr	r2, [r3, #4]
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	1ad2      	subs	r2, r2, r3
 8011e08:	69bb      	ldr	r3, [r7, #24]
 8011e0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e0e:	687a      	ldr	r2, [r7, #4]
 8011e10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011e12:	69b8      	ldr	r0, [r7, #24]
 8011e14:	f000 f90a 	bl	801202c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011e18:	4b1d      	ldr	r3, [pc, #116]	; (8011e90 <pvPortMalloc+0x188>)
 8011e1a:	681a      	ldr	r2, [r3, #0]
 8011e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e1e:	685b      	ldr	r3, [r3, #4]
 8011e20:	1ad3      	subs	r3, r2, r3
 8011e22:	4a1b      	ldr	r2, [pc, #108]	; (8011e90 <pvPortMalloc+0x188>)
 8011e24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011e26:	4b1a      	ldr	r3, [pc, #104]	; (8011e90 <pvPortMalloc+0x188>)
 8011e28:	681a      	ldr	r2, [r3, #0]
 8011e2a:	4b1b      	ldr	r3, [pc, #108]	; (8011e98 <pvPortMalloc+0x190>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	429a      	cmp	r2, r3
 8011e30:	d203      	bcs.n	8011e3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011e32:	4b17      	ldr	r3, [pc, #92]	; (8011e90 <pvPortMalloc+0x188>)
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	4a18      	ldr	r2, [pc, #96]	; (8011e98 <pvPortMalloc+0x190>)
 8011e38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e3c:	685a      	ldr	r2, [r3, #4]
 8011e3e:	4b13      	ldr	r3, [pc, #76]	; (8011e8c <pvPortMalloc+0x184>)
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	431a      	orrs	r2, r3
 8011e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011e4e:	4b13      	ldr	r3, [pc, #76]	; (8011e9c <pvPortMalloc+0x194>)
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	3301      	adds	r3, #1
 8011e54:	4a11      	ldr	r2, [pc, #68]	; (8011e9c <pvPortMalloc+0x194>)
 8011e56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011e58:	f7fe f89e 	bl	800ff98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011e5c:	69fb      	ldr	r3, [r7, #28]
 8011e5e:	f003 0307 	and.w	r3, r3, #7
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d00a      	beq.n	8011e7c <pvPortMalloc+0x174>
	__asm volatile
 8011e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e6a:	f383 8811 	msr	BASEPRI, r3
 8011e6e:	f3bf 8f6f 	isb	sy
 8011e72:	f3bf 8f4f 	dsb	sy
 8011e76:	60fb      	str	r3, [r7, #12]
}
 8011e78:	bf00      	nop
 8011e7a:	e7fe      	b.n	8011e7a <pvPortMalloc+0x172>
	return pvReturn;
 8011e7c:	69fb      	ldr	r3, [r7, #28]
}
 8011e7e:	4618      	mov	r0, r3
 8011e80:	3728      	adds	r7, #40	; 0x28
 8011e82:	46bd      	mov	sp, r7
 8011e84:	bd80      	pop	{r7, pc}
 8011e86:	bf00      	nop
 8011e88:	24015170 	.word	0x24015170
 8011e8c:	24015184 	.word	0x24015184
 8011e90:	24015174 	.word	0x24015174
 8011e94:	24015168 	.word	0x24015168
 8011e98:	24015178 	.word	0x24015178
 8011e9c:	2401517c 	.word	0x2401517c

08011ea0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b086      	sub	sp, #24
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d04d      	beq.n	8011f4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011eb2:	2308      	movs	r3, #8
 8011eb4:	425b      	negs	r3, r3
 8011eb6:	697a      	ldr	r2, [r7, #20]
 8011eb8:	4413      	add	r3, r2
 8011eba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011ebc:	697b      	ldr	r3, [r7, #20]
 8011ebe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011ec0:	693b      	ldr	r3, [r7, #16]
 8011ec2:	685a      	ldr	r2, [r3, #4]
 8011ec4:	4b24      	ldr	r3, [pc, #144]	; (8011f58 <vPortFree+0xb8>)
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	4013      	ands	r3, r2
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d10a      	bne.n	8011ee4 <vPortFree+0x44>
	__asm volatile
 8011ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ed2:	f383 8811 	msr	BASEPRI, r3
 8011ed6:	f3bf 8f6f 	isb	sy
 8011eda:	f3bf 8f4f 	dsb	sy
 8011ede:	60fb      	str	r3, [r7, #12]
}
 8011ee0:	bf00      	nop
 8011ee2:	e7fe      	b.n	8011ee2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011ee4:	693b      	ldr	r3, [r7, #16]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d00a      	beq.n	8011f02 <vPortFree+0x62>
	__asm volatile
 8011eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ef0:	f383 8811 	msr	BASEPRI, r3
 8011ef4:	f3bf 8f6f 	isb	sy
 8011ef8:	f3bf 8f4f 	dsb	sy
 8011efc:	60bb      	str	r3, [r7, #8]
}
 8011efe:	bf00      	nop
 8011f00:	e7fe      	b.n	8011f00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011f02:	693b      	ldr	r3, [r7, #16]
 8011f04:	685a      	ldr	r2, [r3, #4]
 8011f06:	4b14      	ldr	r3, [pc, #80]	; (8011f58 <vPortFree+0xb8>)
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	4013      	ands	r3, r2
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d01e      	beq.n	8011f4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011f10:	693b      	ldr	r3, [r7, #16]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d11a      	bne.n	8011f4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011f18:	693b      	ldr	r3, [r7, #16]
 8011f1a:	685a      	ldr	r2, [r3, #4]
 8011f1c:	4b0e      	ldr	r3, [pc, #56]	; (8011f58 <vPortFree+0xb8>)
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	43db      	mvns	r3, r3
 8011f22:	401a      	ands	r2, r3
 8011f24:	693b      	ldr	r3, [r7, #16]
 8011f26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011f28:	f7fe f828 	bl	800ff7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011f2c:	693b      	ldr	r3, [r7, #16]
 8011f2e:	685a      	ldr	r2, [r3, #4]
 8011f30:	4b0a      	ldr	r3, [pc, #40]	; (8011f5c <vPortFree+0xbc>)
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	4413      	add	r3, r2
 8011f36:	4a09      	ldr	r2, [pc, #36]	; (8011f5c <vPortFree+0xbc>)
 8011f38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011f3a:	6938      	ldr	r0, [r7, #16]
 8011f3c:	f000 f876 	bl	801202c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011f40:	4b07      	ldr	r3, [pc, #28]	; (8011f60 <vPortFree+0xc0>)
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	3301      	adds	r3, #1
 8011f46:	4a06      	ldr	r2, [pc, #24]	; (8011f60 <vPortFree+0xc0>)
 8011f48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011f4a:	f7fe f825 	bl	800ff98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011f4e:	bf00      	nop
 8011f50:	3718      	adds	r7, #24
 8011f52:	46bd      	mov	sp, r7
 8011f54:	bd80      	pop	{r7, pc}
 8011f56:	bf00      	nop
 8011f58:	24015184 	.word	0x24015184
 8011f5c:	24015174 	.word	0x24015174
 8011f60:	24015180 	.word	0x24015180

08011f64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011f64:	b480      	push	{r7}
 8011f66:	b085      	sub	sp, #20
 8011f68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011f6a:	4b29      	ldr	r3, [pc, #164]	; (8012010 <prvHeapInit+0xac>)
 8011f6c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011f6e:	4b29      	ldr	r3, [pc, #164]	; (8012014 <prvHeapInit+0xb0>)
 8011f70:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	f003 0307 	and.w	r3, r3, #7
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d00c      	beq.n	8011f96 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	3307      	adds	r3, #7
 8011f80:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	f023 0307 	bic.w	r3, r3, #7
 8011f88:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011f8a:	68ba      	ldr	r2, [r7, #8]
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	1ad3      	subs	r3, r2, r3
 8011f90:	4a20      	ldr	r2, [pc, #128]	; (8012014 <prvHeapInit+0xb0>)
 8011f92:	4413      	add	r3, r2
 8011f94:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011f9a:	4a1f      	ldr	r2, [pc, #124]	; (8012018 <prvHeapInit+0xb4>)
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011fa0:	4b1d      	ldr	r3, [pc, #116]	; (8012018 <prvHeapInit+0xb4>)
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	68ba      	ldr	r2, [r7, #8]
 8011faa:	4413      	add	r3, r2
 8011fac:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011fae:	2208      	movs	r2, #8
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	1a9b      	subs	r3, r3, r2
 8011fb4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	f023 0307 	bic.w	r3, r3, #7
 8011fbc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	4a16      	ldr	r2, [pc, #88]	; (801201c <prvHeapInit+0xb8>)
 8011fc2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011fc4:	4b15      	ldr	r3, [pc, #84]	; (801201c <prvHeapInit+0xb8>)
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	2200      	movs	r2, #0
 8011fca:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011fcc:	4b13      	ldr	r3, [pc, #76]	; (801201c <prvHeapInit+0xb8>)
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	68fa      	ldr	r2, [r7, #12]
 8011fdc:	1ad2      	subs	r2, r2, r3
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011fe2:	4b0e      	ldr	r3, [pc, #56]	; (801201c <prvHeapInit+0xb8>)
 8011fe4:	681a      	ldr	r2, [r3, #0]
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011fea:	683b      	ldr	r3, [r7, #0]
 8011fec:	685b      	ldr	r3, [r3, #4]
 8011fee:	4a0c      	ldr	r2, [pc, #48]	; (8012020 <prvHeapInit+0xbc>)
 8011ff0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011ff2:	683b      	ldr	r3, [r7, #0]
 8011ff4:	685b      	ldr	r3, [r3, #4]
 8011ff6:	4a0b      	ldr	r2, [pc, #44]	; (8012024 <prvHeapInit+0xc0>)
 8011ff8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011ffa:	4b0b      	ldr	r3, [pc, #44]	; (8012028 <prvHeapInit+0xc4>)
 8011ffc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012000:	601a      	str	r2, [r3, #0]
}
 8012002:	bf00      	nop
 8012004:	3714      	adds	r7, #20
 8012006:	46bd      	mov	sp, r7
 8012008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200c:	4770      	bx	lr
 801200e:	bf00      	nop
 8012010:	00013880 	.word	0x00013880
 8012014:	240018e8 	.word	0x240018e8
 8012018:	24015168 	.word	0x24015168
 801201c:	24015170 	.word	0x24015170
 8012020:	24015178 	.word	0x24015178
 8012024:	24015174 	.word	0x24015174
 8012028:	24015184 	.word	0x24015184

0801202c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801202c:	b480      	push	{r7}
 801202e:	b085      	sub	sp, #20
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012034:	4b28      	ldr	r3, [pc, #160]	; (80120d8 <prvInsertBlockIntoFreeList+0xac>)
 8012036:	60fb      	str	r3, [r7, #12]
 8012038:	e002      	b.n	8012040 <prvInsertBlockIntoFreeList+0x14>
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	60fb      	str	r3, [r7, #12]
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	687a      	ldr	r2, [r7, #4]
 8012046:	429a      	cmp	r2, r3
 8012048:	d8f7      	bhi.n	801203a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	685b      	ldr	r3, [r3, #4]
 8012052:	68ba      	ldr	r2, [r7, #8]
 8012054:	4413      	add	r3, r2
 8012056:	687a      	ldr	r2, [r7, #4]
 8012058:	429a      	cmp	r2, r3
 801205a:	d108      	bne.n	801206e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	685a      	ldr	r2, [r3, #4]
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	685b      	ldr	r3, [r3, #4]
 8012064:	441a      	add	r2, r3
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	685b      	ldr	r3, [r3, #4]
 8012076:	68ba      	ldr	r2, [r7, #8]
 8012078:	441a      	add	r2, r3
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	429a      	cmp	r2, r3
 8012080:	d118      	bne.n	80120b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	681a      	ldr	r2, [r3, #0]
 8012086:	4b15      	ldr	r3, [pc, #84]	; (80120dc <prvInsertBlockIntoFreeList+0xb0>)
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	429a      	cmp	r2, r3
 801208c:	d00d      	beq.n	80120aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	685a      	ldr	r2, [r3, #4]
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	685b      	ldr	r3, [r3, #4]
 8012098:	441a      	add	r2, r3
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	681a      	ldr	r2, [r3, #0]
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	601a      	str	r2, [r3, #0]
 80120a8:	e008      	b.n	80120bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80120aa:	4b0c      	ldr	r3, [pc, #48]	; (80120dc <prvInsertBlockIntoFreeList+0xb0>)
 80120ac:	681a      	ldr	r2, [r3, #0]
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	601a      	str	r2, [r3, #0]
 80120b2:	e003      	b.n	80120bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	681a      	ldr	r2, [r3, #0]
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80120bc:	68fa      	ldr	r2, [r7, #12]
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d002      	beq.n	80120ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	687a      	ldr	r2, [r7, #4]
 80120c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80120ca:	bf00      	nop
 80120cc:	3714      	adds	r7, #20
 80120ce:	46bd      	mov	sp, r7
 80120d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d4:	4770      	bx	lr
 80120d6:	bf00      	nop
 80120d8:	24015168 	.word	0x24015168
 80120dc:	24015170 	.word	0x24015170

080120e0 <_ZN8CallbackC1Ev>:
#include "stdint.h"
#include "core_utils_functionpointer.h"

class Callback {
public:
	Callback(){
 80120e0:	b480      	push	{r7}
 80120e2:	b083      	sub	sp, #12
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
 80120e8:	4a04      	ldr	r2, [pc, #16]	; (80120fc <_ZN8CallbackC1Ev+0x1c>)
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	601a      	str	r2, [r3, #0]

	}
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	4618      	mov	r0, r3
 80120f2:	370c      	adds	r7, #12
 80120f4:	46bd      	mov	sp, r7
 80120f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fa:	4770      	bx	lr
 80120fc:	08020650 	.word	0x08020650

08012100 <_ZN8Callback4callEv>:

	virtual void call(){
 8012100:	b480      	push	{r7}
 8012102:	b083      	sub	sp, #12
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]

	}
 8012108:	bf00      	nop
 801210a:	370c      	adds	r7, #12
 801210c:	46bd      	mov	sp, r7
 801210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012112:	4770      	bx	lr

08012114 <_ZN8Callback4callEPv>:

	virtual void call(void* argument){
 8012114:	b480      	push	{r7}
 8012116:	b083      	sub	sp, #12
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
 801211c:	6039      	str	r1, [r7, #0]

	}
 801211e:	bf00      	nop
 8012120:	370c      	adds	r7, #12
 8012122:	46bd      	mov	sp, r7
 8012124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012128:	4770      	bx	lr

0801212a <_ZN8CallbackaSERKS_>:
class Callback {
 801212a:	b480      	push	{r7}
 801212c:	b083      	sub	sp, #12
 801212e:	af00      	add	r7, sp, #0
 8012130:	6078      	str	r0, [r7, #4]
 8012132:	6039      	str	r1, [r7, #0]
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	4618      	mov	r0, r3
 8012138:	370c      	adds	r7, #12
 801213a:	46bd      	mov	sp, r7
 801213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012140:	4770      	bx	lr

08012142 <_ZN26twipr_spi_comm_callbacks_tC1Ev>:

typedef enum twipr_spi_comm_callback_id_t {
	TWIPR_SPI_COMM_CALLBACK_TRAJECTORY_RX, TWIPR_SPI_COMM_CALLBACK_SAMPLE_TX,
} twipr_spi_comm_callback_id_t;

typedef struct twipr_spi_comm_callbacks_t {
 8012142:	b580      	push	{r7, lr}
 8012144:	b082      	sub	sp, #8
 8012146:	af00      	add	r7, sp, #0
 8012148:	6078      	str	r0, [r7, #4]
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	4618      	mov	r0, r3
 801214e:	f000 f96f 	bl	8012430 <_ZN19core_utils_CallbackIvtEC1Ev>
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	3320      	adds	r3, #32
 8012156:	4618      	mov	r0, r3
 8012158:	f000 f96a 	bl	8012430 <_ZN19core_utils_CallbackIvtEC1Ev>
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	4618      	mov	r0, r3
 8012160:	3708      	adds	r7, #8
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}

08012166 <_ZN23TWIPR_SPI_CommunicationC1Ev>:

#include "twipr_spi_communication.h"
//
//static uint8_t tx_cmd_buf[4] = { 0x55, 0x00, 0x00, 10};

TWIPR_SPI_Communication::TWIPR_SPI_Communication() {
 8012166:	b580      	push	{r7, lr}
 8012168:	b082      	sub	sp, #8
 801216a:	af00      	add	r7, sp, #0
 801216c:	6078      	str	r0, [r7, #4]
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	2200      	movs	r2, #0
 8012172:	751a      	strb	r2, [r3, #20]
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	331c      	adds	r3, #28
 8012178:	4618      	mov	r0, r3
 801217a:	f009 fb56 	bl	801b82a <_ZN23core_hardware_SPI_slaveC1Ev>
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	3388      	adds	r3, #136	; 0x88
 8012182:	4618      	mov	r0, r3
 8012184:	f7ff ffdd 	bl	8012142 <_ZN26twipr_spi_comm_callbacks_tC1Ev>

}
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	4618      	mov	r0, r3
 801218c:	3708      	adds	r7, #8
 801218e:	46bd      	mov	sp, r7
 8012190:	bd80      	pop	{r7, pc}
	...

08012194 <_ZN23TWIPR_SPI_Communication4initE23twipr_spi_comm_config_t>:

/* =============================================================== */
void TWIPR_SPI_Communication::init(twipr_spi_comm_config_t config) {
 8012194:	b084      	sub	sp, #16
 8012196:	b5b0      	push	{r4, r5, r7, lr}
 8012198:	b09a      	sub	sp, #104	; 0x68
 801219a:	af00      	add	r7, sp, #0
 801219c:	6078      	str	r0, [r7, #4]
 801219e:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80121a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	461d      	mov	r5, r3
 80121aa:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80121ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80121b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80121b2:	6823      	ldr	r3, [r4, #0]
 80121b4:	602b      	str	r3, [r5, #0]

	core_hardware_spi_config_t spi_config = { .hspi = this->config.hspi,
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	681b      	ldr	r3, [r3, #0]
			.rx_buffer = (uint8_t*) this->config.trajectory_buffer, .tx_buffer =
					(uint8_t*) this->config.sample_buffer, };
 80121ba:	60bb      	str	r3, [r7, #8]
			.rx_buffer = (uint8_t*) this->config.trajectory_buffer, .tx_buffer =
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	68db      	ldr	r3, [r3, #12]
					(uint8_t*) this->config.sample_buffer, };
 80121c0:	60fb      	str	r3, [r7, #12]
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	685b      	ldr	r3, [r3, #4]
 80121c6:	613b      	str	r3, [r7, #16]

	this->spi_slave.init(spi_config);
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f103 001c 	add.w	r0, r3, #28
 80121ce:	f107 0308 	add.w	r3, r7, #8
 80121d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80121d4:	f009 fb38 	bl	801b848 <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t>
	this->spi_slave.registerCallback(CORE_HARDWARE_SPI_CALLBACK_RX,
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	f103 041c 	add.w	r4, r3, #28
			core_utils_Callback<void, void>(this,
 80121de:	4b1b      	ldr	r3, [pc, #108]	; (801224c <_ZN23TWIPR_SPI_Communication4initE23twipr_spi_comm_config_t+0xb8>)
 80121e0:	637b      	str	r3, [r7, #52]	; 0x34
 80121e2:	2300      	movs	r3, #0
 80121e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80121e6:	f107 0014 	add.w	r0, r7, #20
 80121ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80121ee:	cb0c      	ldmia	r3, {r2, r3}
 80121f0:	6879      	ldr	r1, [r7, #4]
 80121f2:	f000 f93b 	bl	801246c <_ZN19core_utils_CallbackIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE>
	this->spi_slave.registerCallback(CORE_HARDWARE_SPI_CALLBACK_RX,
 80121f6:	f107 0314 	add.w	r3, r7, #20
 80121fa:	461a      	mov	r2, r3
 80121fc:	2100      	movs	r1, #0
 80121fe:	4620      	mov	r0, r4
 8012200:	f009 fb8e 	bl	801b920 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE>
					&TWIPR_SPI_Communication::rx_cmplt_function));

	this->spi_slave.registerCallback(CORE_HARDWARE_SPI_CALLBACK_TX,
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	f103 041c 	add.w	r4, r3, #28
			core_utils_Callback<void, void>(this,
 801220a:	4b11      	ldr	r3, [pc, #68]	; (8012250 <_ZN23TWIPR_SPI_Communication4initE23twipr_spi_comm_config_t+0xbc>)
 801220c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801220e:	2300      	movs	r3, #0
 8012210:	663b      	str	r3, [r7, #96]	; 0x60
 8012212:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8012216:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801221a:	cb0c      	ldmia	r3, {r2, r3}
 801221c:	6879      	ldr	r1, [r7, #4]
 801221e:	f000 f925 	bl	801246c <_ZN19core_utils_CallbackIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE>
	this->spi_slave.registerCallback(CORE_HARDWARE_SPI_CALLBACK_TX,
 8012222:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012226:	461a      	mov	r2, r3
 8012228:	2101      	movs	r1, #1
 801222a:	4620      	mov	r0, r4
 801222c:	f009 fb78 	bl	801b920 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE>

//	this->spi_slave.registerCallback(CORE_HARDWARE_SPI_CALLBACK_RXTX,
//			core_utils_Callback<void, void>(this,
//					&TWIPR_SPI_Communication::rxtx_cmplt_function));

	uint8_t trajectory_size = sizeof(twipr_control_trajectory_input_t);
 8012230:	230c      	movs	r3, #12
 8012232:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t sample_size = sizeof(twipr_logging_sample_t);
 8012236:	2354      	movs	r3, #84	; 0x54
 8012238:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
//	tx_cmd_buf[1] = trajectory_size;
//	tx_cmd_buf[2] =	sample_size;

}
 801223c:	bf00      	nop
 801223e:	3768      	adds	r7, #104	; 0x68
 8012240:	46bd      	mov	sp, r7
 8012242:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8012246:	b004      	add	sp, #16
 8012248:	4770      	bx	lr
 801224a:	bf00      	nop
 801224c:	0801239d 	.word	0x0801239d
 8012250:	080123c9 	.word	0x080123c9

08012254 <_ZN23TWIPR_SPI_Communication5startEv>:
/* =============================================================== */
void TWIPR_SPI_Communication::start() {
 8012254:	b580      	push	{r7, lr}
 8012256:	b082      	sub	sp, #8
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
	this->spi_slave.start();
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	331c      	adds	r3, #28
 8012260:	4618      	mov	r0, r3
 8012262:	f009 fb2f 	bl	801b8c4 <_ZN23core_hardware_SPI_slave5startEv>
	this->provideSampleData();
 8012266:	6878      	ldr	r0, [r7, #4]
 8012268:	f000 f852 	bl	8012310 <_ZN23TWIPR_SPI_Communication17provideSampleDataEv>
}
 801226c:	bf00      	nop
 801226e:	3708      	adds	r7, #8
 8012270:	46bd      	mov	sp, r7
 8012272:	bd80      	pop	{r7, pc}

08012274 <_ZN19core_utils_CallbackIvtEaSERKS0_>:
private:

};

template<typename R, typename A>
class core_utils_Callback: public Callback {
 8012274:	b5b0      	push	{r4, r5, r7, lr}
 8012276:	b082      	sub	sp, #8
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
 801227c:	6039      	str	r1, [r7, #0]
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	683a      	ldr	r2, [r7, #0]
 8012282:	4611      	mov	r1, r2
 8012284:	4618      	mov	r0, r3
 8012286:	f7ff ff50 	bl	801212a <_ZN8CallbackaSERKS_>
 801228a:	683b      	ldr	r3, [r7, #0]
 801228c:	791a      	ldrb	r2, [r3, #4]
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	711a      	strb	r2, [r3, #4]
 8012292:	687a      	ldr	r2, [r7, #4]
 8012294:	683b      	ldr	r3, [r7, #0]
 8012296:	f102 0408 	add.w	r4, r2, #8
 801229a:	f103 0508 	add.w	r5, r3, #8
 801229e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80122a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80122a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80122a6:	e884 0003 	stmia.w	r4, {r0, r1}
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	4618      	mov	r0, r3
 80122ae:	3708      	adds	r7, #8
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bdb0      	pop	{r4, r5, r7, pc}

080122b4 <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE>:
/* =============================================================== */
void TWIPR_SPI_Communication::registerCallback(
		twipr_spi_comm_callback_id_t callback_id,
		core_utils_Callback<void, uint16_t> callback) {
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b084      	sub	sp, #16
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	60f8      	str	r0, [r7, #12]
 80122bc:	460b      	mov	r3, r1
 80122be:	607a      	str	r2, [r7, #4]
 80122c0:	72fb      	strb	r3, [r7, #11]
	switch (callback_id) {
 80122c2:	7afb      	ldrb	r3, [r7, #11]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d008      	beq.n	80122da <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE+0x26>
 80122c8:	2b01      	cmp	r3, #1
 80122ca:	d10d      	bne.n	80122e8 <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE+0x34>
	case TWIPR_SPI_COMM_CALLBACK_SAMPLE_TX: {
		this->callbacks.sample_tx_callback = callback;
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	33a8      	adds	r3, #168	; 0xa8
 80122d0:	6879      	ldr	r1, [r7, #4]
 80122d2:	4618      	mov	r0, r3
 80122d4:	f7ff ffce 	bl	8012274 <_ZN19core_utils_CallbackIvtEaSERKS0_>
		break;
 80122d8:	e006      	b.n	80122e8 <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE+0x34>
	}
	case TWIPR_SPI_COMM_CALLBACK_TRAJECTORY_RX: {
		this->callbacks.trajectory_rx_callback = callback;
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	3388      	adds	r3, #136	; 0x88
 80122de:	6879      	ldr	r1, [r7, #4]
 80122e0:	4618      	mov	r0, r3
 80122e2:	f7ff ffc7 	bl	8012274 <_ZN19core_utils_CallbackIvtEaSERKS0_>
		break;
 80122e6:	bf00      	nop
	}
	}
}
 80122e8:	bf00      	nop
 80122ea:	3710      	adds	r7, #16
 80122ec:	46bd      	mov	sp, r7
 80122ee:	bd80      	pop	{r7, pc}

080122f0 <_ZN23TWIPR_SPI_Communication17receiveTrajectoryEv>:
//	TWIPR_SPI_COMMAND_MESSAGE_LENGTH);
//}


/* =============================================================== */
void TWIPR_SPI_Communication::receiveTrajectory(){
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b082      	sub	sp, #8
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
	this->receiveTrajectory(this->config.trajectory_buffer, this->config.len_trajectory_buffer);
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	68d9      	ldr	r1, [r3, #12]
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	8a1b      	ldrh	r3, [r3, #16]
 8012300:	461a      	mov	r2, r3
 8012302:	6878      	ldr	r0, [r7, #4]
 8012304:	f000 f814 	bl	8012330 <_ZN23TWIPR_SPI_Communication17receiveTrajectoryEP32twipr_control_trajectory_input_tt>
}
 8012308:	bf00      	nop
 801230a:	3708      	adds	r7, #8
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}

08012310 <_ZN23TWIPR_SPI_Communication17provideSampleDataEv>:
/* =============================================================== */
void TWIPR_SPI_Communication::provideSampleData(){
 8012310:	b580      	push	{r7, lr}
 8012312:	b082      	sub	sp, #8
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
	this->provideSampleData(this->config.sample_buffer, this->config.len_sample_buffer);
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	6859      	ldr	r1, [r3, #4]
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	891b      	ldrh	r3, [r3, #8]
 8012320:	461a      	mov	r2, r3
 8012322:	6878      	ldr	r0, [r7, #4]
 8012324:	f000 f81c 	bl	8012360 <_ZN23TWIPR_SPI_Communication17provideSampleDataEP22twipr_logging_sample_tt>
}
 8012328:	bf00      	nop
 801232a:	3708      	adds	r7, #8
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}

08012330 <_ZN23TWIPR_SPI_Communication17receiveTrajectoryEP32twipr_control_trajectory_input_tt>:

/* =============================================================== */
void TWIPR_SPI_Communication::receiveTrajectory(
		twipr_control_trajectory_input_t *trajectory_buffer, uint16_t len) {
 8012330:	b580      	push	{r7, lr}
 8012332:	b084      	sub	sp, #16
 8012334:	af00      	add	r7, sp, #0
 8012336:	60f8      	str	r0, [r7, #12]
 8012338:	60b9      	str	r1, [r7, #8]
 801233a:	4613      	mov	r3, r2
 801233c:	80fb      	strh	r3, [r7, #6]
	this->spi_slave.receiveData((uint8_t*) trajectory_buffer,  sizeof(twipr_control_trajectory_input_t) * len);
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	f103 001c 	add.w	r0, r3, #28
 8012344:	88fb      	ldrh	r3, [r7, #6]
 8012346:	461a      	mov	r2, r3
 8012348:	0052      	lsls	r2, r2, #1
 801234a:	4413      	add	r3, r2
 801234c:	009b      	lsls	r3, r3, #2
 801234e:	b29b      	uxth	r3, r3
 8012350:	461a      	mov	r2, r3
 8012352:	68b9      	ldr	r1, [r7, #8]
 8012354:	f009 fac0 	bl	801b8d8 <_ZN23core_hardware_SPI_slave11receiveDataEPht>
}
 8012358:	bf00      	nop
 801235a:	3710      	adds	r7, #16
 801235c:	46bd      	mov	sp, r7
 801235e:	bd80      	pop	{r7, pc}

08012360 <_ZN23TWIPR_SPI_Communication17provideSampleDataEP22twipr_logging_sample_tt>:

/* =============================================================== */
void TWIPR_SPI_Communication::provideSampleData(
		twipr_logging_sample_t *sample_buffer, uint16_t len) {
 8012360:	b580      	push	{r7, lr}
 8012362:	b084      	sub	sp, #16
 8012364:	af00      	add	r7, sp, #0
 8012366:	60f8      	str	r0, [r7, #12]
 8012368:	60b9      	str	r1, [r7, #8]
 801236a:	4613      	mov	r3, r2
 801236c:	80fb      	strh	r3, [r7, #6]

	this->mode = TWIPR_SPI_COMM_MODE_TX;
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	2202      	movs	r2, #2
 8012372:	751a      	strb	r2, [r3, #20]
	this->spi_slave.provideData((uint8_t*) sample_buffer, sizeof(twipr_logging_sample_t) * len);
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	f103 001c 	add.w	r0, r3, #28
 801237a:	88fb      	ldrh	r3, [r7, #6]
 801237c:	461a      	mov	r2, r3
 801237e:	0052      	lsls	r2, r2, #1
 8012380:	4413      	add	r3, r2
 8012382:	461a      	mov	r2, r3
 8012384:	00d2      	lsls	r2, r2, #3
 8012386:	1ad3      	subs	r3, r2, r3
 8012388:	009b      	lsls	r3, r3, #2
 801238a:	b29b      	uxth	r3, r3
 801238c:	461a      	mov	r2, r3
 801238e:	68b9      	ldr	r1, [r7, #8]
 8012390:	f009 fab4 	bl	801b8fc <_ZN23core_hardware_SPI_slave11provideDataEPht>
}
 8012394:	bf00      	nop
 8012396:	3710      	adds	r7, #16
 8012398:	46bd      	mov	sp, r7
 801239a:	bd80      	pop	{r7, pc}

0801239c <_ZN23TWIPR_SPI_Communication17rx_cmplt_functionEv>:
/* =============================================================== */
void TWIPR_SPI_Communication::rx_cmplt_function() {
 801239c:	b580      	push	{r7, lr}
 801239e:	b082      	sub	sp, #8
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
	if (this->callbacks.trajectory_rx_callback.registered) {
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d008      	beq.n	80123c0 <_ZN23TWIPR_SPI_Communication17rx_cmplt_functionEv+0x24>
		this->callbacks.trajectory_rx_callback.call(this->config.len_trajectory_buffer);
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	f103 0288 	add.w	r2, r3, #136	; 0x88
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	8a1b      	ldrh	r3, [r3, #16]
 80123b8:	4619      	mov	r1, r3
 80123ba:	4610      	mov	r0, r2
 80123bc:	f000 f88a 	bl	80124d4 <_ZN19core_utils_CallbackIvtE4callEt>
	}
}
 80123c0:	bf00      	nop
 80123c2:	3708      	adds	r7, #8
 80123c4:	46bd      	mov	sp, r7
 80123c6:	bd80      	pop	{r7, pc}

080123c8 <_ZN23TWIPR_SPI_Communication17tx_cmplt_functionEv>:
/* =============================================================== */
void TWIPR_SPI_Communication::tx_cmplt_function() {
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b082      	sub	sp, #8
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]

	// Execute the TX Callback, if registered
	if (this->callbacks.sample_tx_callback.registered) {
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d008      	beq.n	80123ec <_ZN23TWIPR_SPI_Communication17tx_cmplt_functionEv+0x24>
		this->callbacks.sample_tx_callback.call(this->_len);
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	8b5b      	ldrh	r3, [r3, #26]
 80123e4:	4619      	mov	r1, r3
 80123e6:	4610      	mov	r0, r2
 80123e8:	f000 f874 	bl	80124d4 <_ZN19core_utils_CallbackIvtE4callEt>
	}
	this->provideSampleData();
 80123ec:	6878      	ldr	r0, [r7, #4]
 80123ee:	f7ff ff8f 	bl	8012310 <_ZN23TWIPR_SPI_Communication17provideSampleDataEv>
}
 80123f2:	bf00      	nop
 80123f4:	3708      	adds	r7, #8
 80123f6:	46bd      	mov	sp, r7
 80123f8:	bd80      	pop	{r7, pc}

080123fa <_ZN23TWIPR_SPI_Communication16stopTransmissionEv>:
/* =============================================================== */
void TWIPR_SPI_Communication::stopTransmission(){
 80123fa:	b580      	push	{r7, lr}
 80123fc:	b082      	sub	sp, #8
 80123fe:	af00      	add	r7, sp, #0
 8012400:	6078      	str	r0, [r7, #4]
	HAL_SPI_Abort(this->config.hspi);
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	4618      	mov	r0, r3
 8012408:	f7f6 fcdc 	bl	8008dc4 <HAL_SPI_Abort>
}
 801240c:	bf00      	nop
 801240e:	3708      	adds	r7, #8
 8012410:	46bd      	mov	sp, r7
 8012412:	bd80      	pop	{r7, pc}

08012414 <_ZN19core_utils_CallbackIvvE4callEv>:
	core_utils_Callback(T *object, R (T::*member)(void)) {
		_fp = core_utils_FunctionPointer<R,void>(object, member);
		this->registered = 1;
	}

	R call() {
 8012414:	b580      	push	{r7, lr}
 8012416:	b082      	sub	sp, #8
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
		return this->_fp();
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	3308      	adds	r3, #8
 8012420:	4618      	mov	r0, r3
 8012422:	f000 f876 	bl	8012512 <_ZN26core_utils_FunctionPointerIvvEclEv>
 8012426:	bf00      	nop
	}
 8012428:	3708      	adds	r7, #8
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}
	...

08012430 <_ZN19core_utils_CallbackIvtEC1Ev>:
	core_utils_Callback() {
 8012430:	b580      	push	{r7, lr}
 8012432:	b082      	sub	sp, #8
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	4618      	mov	r0, r3
 801243c:	f7ff fe50 	bl	80120e0 <_ZN8CallbackC1Ev>
 8012440:	4a09      	ldr	r2, [pc, #36]	; (8012468 <_ZN19core_utils_CallbackIvtEC1Ev+0x38>)
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	601a      	str	r2, [r3, #0]
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	2200      	movs	r2, #0
 801244a:	711a      	strb	r2, [r3, #4]
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	3308      	adds	r3, #8
 8012450:	2100      	movs	r1, #0
 8012452:	4618      	mov	r0, r3
 8012454:	f000 f868 	bl	8012528 <_ZN26core_utils_FunctionPointerIvtEC1EPFvtE>
		this->registered = 0;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	2200      	movs	r2, #0
 801245c:	711a      	strb	r2, [r3, #4]
	}
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	4618      	mov	r0, r3
 8012462:	3708      	adds	r7, #8
 8012464:	46bd      	mov	sp, r7
 8012466:	bd80      	pop	{r7, pc}
 8012468:	08020630 	.word	0x08020630

0801246c <_ZN19core_utils_CallbackIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE>:
	core_utils_Callback(T *object, R (T::*member)(void)) {
 801246c:	b5b0      	push	{r4, r5, r7, lr}
 801246e:	b08a      	sub	sp, #40	; 0x28
 8012470:	af00      	add	r7, sp, #0
 8012472:	60f8      	str	r0, [r7, #12]
 8012474:	60b9      	str	r1, [r7, #8]
 8012476:	4639      	mov	r1, r7
 8012478:	e881 000c 	stmia.w	r1, {r2, r3}
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	4618      	mov	r0, r3
 8012480:	f7ff fe2e 	bl	80120e0 <_ZN8CallbackC1Ev>
 8012484:	4a12      	ldr	r2, [pc, #72]	; (80124d0 <_ZN19core_utils_CallbackIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE+0x64>)
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	601a      	str	r2, [r3, #0]
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	2200      	movs	r2, #0
 801248e:	711a      	strb	r2, [r3, #4]
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	3308      	adds	r3, #8
 8012494:	2100      	movs	r1, #0
 8012496:	4618      	mov	r0, r3
 8012498:	f000 f82d 	bl	80124f6 <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		_fp = core_utils_FunctionPointer<R,void>(object, member);
 801249c:	f107 0010 	add.w	r0, r7, #16
 80124a0:	463b      	mov	r3, r7
 80124a2:	cb0c      	ldmia	r3, {r2, r3}
 80124a4:	68b9      	ldr	r1, [r7, #8]
 80124a6:	f000 f84d 	bl	8012544 <_ZN26core_utils_FunctionPointerIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE>
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	f103 0408 	add.w	r4, r3, #8
 80124b0:	f107 0510 	add.w	r5, r7, #16
 80124b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80124b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80124b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80124bc:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	2201      	movs	r2, #1
 80124c4:	711a      	strb	r2, [r3, #4]
	}
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	4618      	mov	r0, r3
 80124ca:	3728      	adds	r7, #40	; 0x28
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bdb0      	pop	{r4, r5, r7, pc}
 80124d0:	08020640 	.word	0x08020640

080124d4 <_ZN19core_utils_CallbackIvtE4callEt>:
	R call(A argument){
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b082      	sub	sp, #8
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
 80124dc:	460b      	mov	r3, r1
 80124de:	807b      	strh	r3, [r7, #2]
		return this->_fp(argument);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	3308      	adds	r3, #8
 80124e4:	887a      	ldrh	r2, [r7, #2]
 80124e6:	4611      	mov	r1, r2
 80124e8:	4618      	mov	r0, r3
 80124ea:	f000 f83e 	bl	801256a <_ZN26core_utils_FunctionPointerIvtEclEt>
 80124ee:	bf00      	nop
	}
 80124f0:	3708      	adds	r7, #8
 80124f2:	46bd      	mov	sp, r7
 80124f4:	bd80      	pop	{r7, pc}

080124f6 <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>:
public:
    /** Create a FunctionPointer, attaching a static function
     *
     *  @param function The static function to attach (default is none)
     */
	core_utils_FunctionPointer(R (*function)(void) = 0) {
 80124f6:	b580      	push	{r7, lr}
 80124f8:	b082      	sub	sp, #8
 80124fa:	af00      	add	r7, sp, #0
 80124fc:	6078      	str	r0, [r7, #4]
 80124fe:	6039      	str	r1, [r7, #0]
        attach(function);
 8012500:	6839      	ldr	r1, [r7, #0]
 8012502:	6878      	ldr	r0, [r7, #4]
 8012504:	f000 f840 	bl	8012588 <_ZN26core_utils_FunctionPointerIvvE6attachEPFvvE>
    }
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	4618      	mov	r0, r3
 801250c:	3708      	adds	r7, #8
 801250e:	46bd      	mov	sp, r7
 8012510:	bd80      	pop	{r7, pc}

08012512 <_ZN26core_utils_FunctionPointerIvvEclEv>:
    R(*get_function())() {
        return _membercaller ? (R(*)())0 : (R(*)())_p.function;
    }

#ifdef MBED_OPERATORS
    R operator ()(void) {
 8012512:	b580      	push	{r7, lr}
 8012514:	b082      	sub	sp, #8
 8012516:	af00      	add	r7, sp, #0
 8012518:	6078      	str	r0, [r7, #4]
        return call();
 801251a:	6878      	ldr	r0, [r7, #4]
 801251c:	f000 f845 	bl	80125aa <_ZN26core_utils_FunctionPointerIvvE4callEv>
 8012520:	bf00      	nop
    }
 8012522:	3708      	adds	r7, #8
 8012524:	46bd      	mov	sp, r7
 8012526:	bd80      	pop	{r7, pc}

08012528 <_ZN26core_utils_FunctionPointerIvtEC1EPFvtE>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8012528:	b580      	push	{r7, lr}
 801252a:	b082      	sub	sp, #8
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
 8012530:	6039      	str	r1, [r7, #0]
        attach(function);
 8012532:	6839      	ldr	r1, [r7, #0]
 8012534:	6878      	ldr	r0, [r7, #4]
 8012536:	f000 f85d 	bl	80125f4 <_ZN26core_utils_FunctionPointerIvtE6attachEPFvtE>
    }
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	4618      	mov	r0, r3
 801253e:	3708      	adds	r7, #8
 8012540:	46bd      	mov	sp, r7
 8012542:	bd80      	pop	{r7, pc}

08012544 <_ZN26core_utils_FunctionPointerIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(void)) {
 8012544:	b580      	push	{r7, lr}
 8012546:	b084      	sub	sp, #16
 8012548:	af00      	add	r7, sp, #0
 801254a:	60f8      	str	r0, [r7, #12]
 801254c:	60b9      	str	r1, [r7, #8]
 801254e:	4639      	mov	r1, r7
 8012550:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8012554:	463b      	mov	r3, r7
 8012556:	cb0c      	ldmia	r3, {r2, r3}
 8012558:	68b9      	ldr	r1, [r7, #8]
 801255a:	68f8      	ldr	r0, [r7, #12]
 801255c:	f000 f85c 	bl	8012618 <_ZN26core_utils_FunctionPointerIvvE6attachI23TWIPR_SPI_CommunicationEEvPT_MS3_FvvE>
    }
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	4618      	mov	r0, r3
 8012564:	3710      	adds	r7, #16
 8012566:	46bd      	mov	sp, r7
 8012568:	bd80      	pop	{r7, pc}

0801256a <_ZN26core_utils_FunctionPointerIvtEclEt>:
    R operator ()(A1 a) {
 801256a:	b580      	push	{r7, lr}
 801256c:	b082      	sub	sp, #8
 801256e:	af00      	add	r7, sp, #0
 8012570:	6078      	str	r0, [r7, #4]
 8012572:	460b      	mov	r3, r1
 8012574:	807b      	strh	r3, [r7, #2]
        return call(a);
 8012576:	887b      	ldrh	r3, [r7, #2]
 8012578:	4619      	mov	r1, r3
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f000 f86a 	bl	8012654 <_ZN26core_utils_FunctionPointerIvtE4callEt>
 8012580:	bf00      	nop
    }
 8012582:	3708      	adds	r7, #8
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}

08012588 <_ZN26core_utils_FunctionPointerIvvE6attachEPFvvE>:
    void attach(R (*function)(void)) {
 8012588:	b480      	push	{r7}
 801258a:	b083      	sub	sp, #12
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
 8012590:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	683a      	ldr	r2, [r7, #0]
 8012596:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	2200      	movs	r2, #0
 801259c:	615a      	str	r2, [r3, #20]
    }
 801259e:	bf00      	nop
 80125a0:	370c      	adds	r7, #12
 80125a2:	46bd      	mov	sp, r7
 80125a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a8:	4770      	bx	lr

080125aa <_ZN26core_utils_FunctionPointerIvvE4callEv>:
    R call(){
 80125aa:	b580      	push	{r7, lr}
 80125ac:	b082      	sub	sp, #8
 80125ae:	af00      	add	r7, sp, #0
 80125b0:	6078      	str	r0, [r7, #4]
        if (_membercaller == 0 && _p.function) {
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	695b      	ldr	r3, [r3, #20]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d107      	bne.n	80125ca <_ZN26core_utils_FunctionPointerIvvE4callEv+0x20>
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d003      	beq.n	80125ca <_ZN26core_utils_FunctionPointerIvvE4callEv+0x20>
            return _p.function();
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	4798      	blx	r3
 80125c8:	e011      	b.n	80125ee <_ZN26core_utils_FunctionPointerIvvE4callEv+0x44>
        } else if (_membercaller && _p.object) {
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	695b      	ldr	r3, [r3, #20]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d00c      	beq.n	80125ec <_ZN26core_utils_FunctionPointerIvvE4callEv+0x42>
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d008      	beq.n	80125ec <_ZN26core_utils_FunctionPointerIvvE4callEv+0x42>
            return _membercaller(_p.object, _member);
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	695b      	ldr	r3, [r3, #20]
 80125de:	687a      	ldr	r2, [r7, #4]
 80125e0:	6810      	ldr	r0, [r2, #0]
 80125e2:	687a      	ldr	r2, [r7, #4]
 80125e4:	3204      	adds	r2, #4
 80125e6:	4611      	mov	r1, r2
 80125e8:	4798      	blx	r3
 80125ea:	e000      	b.n	80125ee <_ZN26core_utils_FunctionPointerIvvE4callEv+0x44>
        return (R)0;
 80125ec:	bf00      	nop
    }
 80125ee:	3708      	adds	r7, #8
 80125f0:	46bd      	mov	sp, r7
 80125f2:	bd80      	pop	{r7, pc}

080125f4 <_ZN26core_utils_FunctionPointerIvtE6attachEPFvtE>:
    void attach(R (*function)(A1)) {
 80125f4:	b480      	push	{r7}
 80125f6:	b083      	sub	sp, #12
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
 80125fc:	6039      	str	r1, [r7, #0]
        _p.function = function;
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	683a      	ldr	r2, [r7, #0]
 8012602:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	2200      	movs	r2, #0
 8012608:	615a      	str	r2, [r3, #20]
    }
 801260a:	bf00      	nop
 801260c:	370c      	adds	r7, #12
 801260e:	46bd      	mov	sp, r7
 8012610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012614:	4770      	bx	lr
	...

08012618 <_ZN26core_utils_FunctionPointerIvvE6attachI23TWIPR_SPI_CommunicationEEvPT_MS3_FvvE>:
    void attach(T *object, R (T::*member)(void)) {
 8012618:	b480      	push	{r7}
 801261a:	b085      	sub	sp, #20
 801261c:	af00      	add	r7, sp, #0
 801261e:	60f8      	str	r0, [r7, #12]
 8012620:	60b9      	str	r1, [r7, #8]
 8012622:	4639      	mov	r1, r7
 8012624:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	68ba      	ldr	r2, [r7, #8]
 801262c:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(void)>(_member) = member;
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	3304      	adds	r3, #4
 8012632:	461a      	mov	r2, r3
 8012634:	463b      	mov	r3, r7
 8012636:	e893 0003 	ldmia.w	r3, {r0, r1}
 801263a:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	4a03      	ldr	r2, [pc, #12]	; (8012650 <_ZN26core_utils_FunctionPointerIvvE6attachI23TWIPR_SPI_CommunicationEEvPT_MS3_FvvE+0x38>)
 8012642:	615a      	str	r2, [r3, #20]
    }
 8012644:	bf00      	nop
 8012646:	3714      	adds	r7, #20
 8012648:	46bd      	mov	sp, r7
 801264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264e:	4770      	bx	lr
 8012650:	080126a7 	.word	0x080126a7

08012654 <_ZN26core_utils_FunctionPointerIvtE4callEt>:
    R call(A1 a) {
 8012654:	b580      	push	{r7, lr}
 8012656:	b082      	sub	sp, #8
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
 801265c:	460b      	mov	r3, r1
 801265e:	807b      	strh	r3, [r7, #2]
        if (_membercaller == 0 && _p.function) {
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	695b      	ldr	r3, [r3, #20]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d109      	bne.n	801267c <_ZN26core_utils_FunctionPointerIvtE4callEt+0x28>
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d005      	beq.n	801267c <_ZN26core_utils_FunctionPointerIvtE4callEt+0x28>
           return _p.function(a);
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	887a      	ldrh	r2, [r7, #2]
 8012676:	4610      	mov	r0, r2
 8012678:	4798      	blx	r3
 801267a:	e011      	b.n	80126a0 <_ZN26core_utils_FunctionPointerIvtE4callEt+0x4c>
        } else if (_membercaller && _p.object) {
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	695b      	ldr	r3, [r3, #20]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d00c      	beq.n	801269e <_ZN26core_utils_FunctionPointerIvtE4callEt+0x4a>
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d008      	beq.n	801269e <_ZN26core_utils_FunctionPointerIvtE4callEt+0x4a>
           return _membercaller(_p.object, _member, a);
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	695b      	ldr	r3, [r3, #20]
 8012690:	687a      	ldr	r2, [r7, #4]
 8012692:	6810      	ldr	r0, [r2, #0]
 8012694:	687a      	ldr	r2, [r7, #4]
 8012696:	1d11      	adds	r1, r2, #4
 8012698:	887a      	ldrh	r2, [r7, #2]
 801269a:	4798      	blx	r3
 801269c:	e000      	b.n	80126a0 <_ZN26core_utils_FunctionPointerIvtE4callEt+0x4c>
        return (R)0;
 801269e:	bf00      	nop
    }
 80126a0:	3708      	adds	r7, #8
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}

080126a6 <_ZN26core_utils_FunctionPointerIvvE12membercallerI23TWIPR_SPI_CommunicationEEvPvPj>:
    }
#endif

private:
    template<typename T>
    static R membercaller(void *object, uintptr_t *member) {
 80126a6:	b580      	push	{r7, lr}
 80126a8:	b084      	sub	sp, #16
 80126aa:	af00      	add	r7, sp, #0
 80126ac:	6078      	str	r0, [r7, #4]
 80126ae:	6039      	str	r1, [r7, #0]
        T* o = static_cast<T*>(object);
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	60fb      	str	r3, [r7, #12]
        R (T::**m)(void) = reinterpret_cast<R (T::**)(void)>(member);
 80126b4:	683b      	ldr	r3, [r7, #0]
 80126b6:	60bb      	str	r3, [r7, #8]
        return (o->**m)();
 80126b8:	68bb      	ldr	r3, [r7, #8]
 80126ba:	685b      	ldr	r3, [r3, #4]
 80126bc:	105b      	asrs	r3, r3, #1
 80126be:	461a      	mov	r2, r3
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	1899      	adds	r1, r3, r2
 80126c4:	68bb      	ldr	r3, [r7, #8]
 80126c6:	685b      	ldr	r3, [r3, #4]
 80126c8:	f003 0301 	and.w	r3, r3, #1
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d00b      	beq.n	80126e8 <_ZN26core_utils_FunctionPointerIvvE12membercallerI23TWIPR_SPI_CommunicationEEvPvPj+0x42>
 80126d0:	68bb      	ldr	r3, [r7, #8]
 80126d2:	685b      	ldr	r3, [r3, #4]
 80126d4:	105b      	asrs	r3, r3, #1
 80126d6:	461a      	mov	r2, r3
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	4413      	add	r3, r2
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	68ba      	ldr	r2, [r7, #8]
 80126e0:	6812      	ldr	r2, [r2, #0]
 80126e2:	4413      	add	r3, r2
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	e001      	b.n	80126ec <_ZN26core_utils_FunctionPointerIvvE12membercallerI23TWIPR_SPI_CommunicationEEvPvPj+0x46>
 80126e8:	68bb      	ldr	r3, [r7, #8]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	4608      	mov	r0, r1
 80126ee:	4798      	blx	r3
 80126f0:	bf00      	nop
    }
 80126f2:	3710      	adds	r7, #16
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd80      	pop	{r7, pc}

080126f8 <_ZN6BufferC1Ev>:
#include "stdint.h"
#include "../core_default_config.h"

class Buffer {
public:
	Buffer() {
 80126f8:	b480      	push	{r7}
 80126fa:	b083      	sub	sp, #12
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	2200      	movs	r2, #0
 8012704:	809a      	strh	r2, [r3, #4]

	}
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	4618      	mov	r0, r3
 801270a:	370c      	adds	r7, #12
 801270c:	46bd      	mov	sp, r7
 801270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012712:	4770      	bx	lr

08012714 <_ZN19core_utils_CallbackIvvEaSERKS0_>:
class core_utils_Callback<R, void>: public Callback {
 8012714:	b5b0      	push	{r4, r5, r7, lr}
 8012716:	b082      	sub	sp, #8
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
 801271c:	6039      	str	r1, [r7, #0]
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	683a      	ldr	r2, [r7, #0]
 8012722:	4611      	mov	r1, r2
 8012724:	4618      	mov	r0, r3
 8012726:	f7ff fd00 	bl	801212a <_ZN8CallbackaSERKS_>
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	791a      	ldrb	r2, [r3, #4]
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	711a      	strb	r2, [r3, #4]
 8012732:	687a      	ldr	r2, [r7, #4]
 8012734:	683b      	ldr	r3, [r7, #0]
 8012736:	f102 0408 	add.w	r4, r2, #8
 801273a:	f103 0508 	add.w	r5, r3, #8
 801273e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012742:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012746:	e884 0003 	stmia.w	r4, {r0, r1}
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	4618      	mov	r0, r3
 801274e:	3708      	adds	r7, #8
 8012750:	46bd      	mov	sp, r7
 8012752:	bdb0      	pop	{r4, r5, r7, pc}

08012754 <_Z3nopv>:
#include "core_utils_RingBuffer.h"
#include "core_utils_functionpointer.h"
#include "core_utils_registermap.h"


inline void nop(){
 8012754:	b480      	push	{r7}
 8012756:	af00      	add	r7, sp, #0

}
 8012758:	bf00      	nop
 801275a:	46bd      	mov	sp, r7
 801275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012760:	4770      	bx	lr
	...

08012764 <_ZN4UARTC1Ev>:
extern core_hardware_UART_config core_hardware_uart_std_config;
extern uint8_t num_uarts;
/* =========================================================================== */
class UART {
public:
	UART() {
 8012764:	b480      	push	{r7}
 8012766:	b083      	sub	sp, #12
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
 801276c:	4a04      	ldr	r2, [pc, #16]	; (8012780 <_ZN4UARTC1Ev+0x1c>)
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	601a      	str	r2, [r3, #0]

	}
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	4618      	mov	r0, r3
 8012776:	370c      	adds	r7, #12
 8012778:	46bd      	mov	sp, r7
 801277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277e:	4770      	bx	lr
 8012780:	080206dc 	.word	0x080206dc

08012784 <_ZN4UART10rxFunctionEt>:

	virtual void rxFunction(uint16_t len) {
 8012784:	b480      	push	{r7}
 8012786:	b083      	sub	sp, #12
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
 801278c:	460b      	mov	r3, r1
 801278e:	807b      	strh	r3, [r7, #2]

	}
 8012790:	bf00      	nop
 8012792:	370c      	adds	r7, #12
 8012794:	46bd      	mov	sp, r7
 8012796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279a:	4770      	bx	lr

0801279c <_ZN4UART9get_huartEv>:

	virtual UART_HandleTypeDef* get_huart() {
 801279c:	b480      	push	{r7}
 801279e:	b083      	sub	sp, #12
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
		return NULL;
 80127a4:	2300      	movs	r3, #0
	}
 80127a6:	4618      	mov	r0, r3
 80127a8:	370c      	adds	r7, #12
 80127aa:	46bd      	mov	sp, r7
 80127ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b0:	4770      	bx	lr
	...

080127b4 <_ZN13UartInterfaceC1Ev>:
extern core_hardware_UART_config std_hardware_uart_config;
extern core_comm_UartInterface_config_t std_uart_config;
/* ---------------------------------------------------------- */
class UartInterface {
public:
	UartInterface() {
 80127b4:	b480      	push	{r7}
 80127b6:	b083      	sub	sp, #12
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
 80127bc:	4a06      	ldr	r2, [pc, #24]	; (80127d8 <_ZN13UartInterfaceC1Ev+0x24>)
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	601a      	str	r2, [r3, #0]
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	2200      	movs	r2, #0
 80127c6:	711a      	strb	r2, [r3, #4]

	}
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	4618      	mov	r0, r3
 80127cc:	370c      	adds	r7, #12
 80127ce:	46bd      	mov	sp, r7
 80127d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d4:	4770      	bx	lr
 80127d6:	bf00      	nop
 80127d8:	080206a8 	.word	0x080206a8

080127dc <_ZN13UartInterface11rx_functionEv>:
	virtual uint8_t rx_function() {
 80127dc:	b480      	push	{r7}
 80127de:	b083      	sub	sp, #12
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	6078      	str	r0, [r7, #4]
		return 0;
 80127e4:	2300      	movs	r3, #0
	}
 80127e6:	4618      	mov	r0, r3
 80127e8:	370c      	adds	r7, #12
 80127ea:	46bd      	mov	sp, r7
 80127ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f0:	4770      	bx	lr

080127f2 <_ZN13UartInterface9setTaskIDEP19tskTaskControlBlock>:
	virtual void setTaskID(TaskHandle_t task) {
 80127f2:	b480      	push	{r7}
 80127f4:	b083      	sub	sp, #12
 80127f6:	af00      	add	r7, sp, #0
 80127f8:	6078      	str	r0, [r7, #4]
 80127fa:	6039      	str	r1, [r7, #0]

	}
 80127fc:	bf00      	nop
 80127fe:	370c      	adds	r7, #12
 8012800:	46bd      	mov	sp, r7
 8012802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012806:	4770      	bx	lr

08012808 <_ZN13UartInterface9getTaskIDEv>:
	virtual TaskHandle_t getTaskID() {
 8012808:	b480      	push	{r7}
 801280a:	b083      	sub	sp, #12
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
		return NULL;
 8012810:	2300      	movs	r3, #0
	}
 8012812:	4618      	mov	r0, r3
 8012814:	370c      	adds	r7, #12
 8012816:	46bd      	mov	sp, r7
 8012818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281c:	4770      	bx	lr

0801281e <_Z20twipr_uart_comm_taskPv>:

static core_comm_SerialMessage_memory<128> incoming_msg;
static core_comm_SerialMessage_memory<128> outgoing_msg;

/* =========================================================================== */
void twipr_uart_comm_task(void *argument) {
 801281e:	b580      	push	{r7, lr}
 8012820:	b084      	sub	sp, #16
 8012822:	af00      	add	r7, sp, #0
 8012824:	6078      	str	r0, [r7, #4]

	TWIPR_UART_Communication *comm = (TWIPR_UART_Communication*) argument;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	60fb      	str	r3, [r7, #12]
	comm->task = xTaskGetCurrentTaskHandle();
 801282a:	f7fd ffa5 	bl	8010778 <xTaskGetCurrentTaskHandle>
 801282e:	4602      	mov	r2, r0
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	601a      	str	r2, [r3, #0]
	comm->taskFunction();
 8012834:	68f8      	ldr	r0, [r7, #12]
 8012836:	f000 f8f9 	bl	8012a2c <_ZN24TWIPR_UART_Communication12taskFunctionEv>
}
 801283a:	bf00      	nop
 801283c:	3710      	adds	r7, #16
 801283e:	46bd      	mov	sp, r7
 8012840:	bd80      	pop	{r7, pc}

08012842 <_ZN27twipr_uart_comm_callbacks_tC1Ev>:
	TWIPR_UART_COMM_CALLBACK_MSG_WRITE,
	TWIPR_UART_COMM_CALLBACK_MSG_READ,
	TWIPR_UART_COMM_CALLBACK_MSG_FUNC,
} twipr_uart_comm_callback_id_t;

typedef struct twipr_uart_comm_callbacks_t {
 8012842:	b580      	push	{r7, lr}
 8012844:	b082      	sub	sp, #8
 8012846:	af00      	add	r7, sp, #0
 8012848:	6078      	str	r0, [r7, #4]
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	4618      	mov	r0, r3
 801284e:	f000 fa53 	bl	8012cf8 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	3320      	adds	r3, #32
 8012856:	4618      	mov	r0, r3
 8012858:	f000 fa4e 	bl	8012cf8 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	3340      	adds	r3, #64	; 0x40
 8012860:	4618      	mov	r0, r3
 8012862:	f000 fa49 	bl	8012cf8 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	3360      	adds	r3, #96	; 0x60
 801286a:	4618      	mov	r0, r3
 801286c:	f000 fa44 	bl	8012cf8 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	4618      	mov	r0, r3
 8012874:	3708      	adds	r7, #8
 8012876:	46bd      	mov	sp, r7
 8012878:	bd80      	pop	{r7, pc}

0801287a <_ZN24TWIPR_UART_CommunicationC1Ev>:

/* =========================================================================== */
TWIPR_UART_Communication::TWIPR_UART_Communication() {
 801287a:	b580      	push	{r7, lr}
 801287c:	b082      	sub	sp, #8
 801287e:	af00      	add	r7, sp, #0
 8012880:	6078      	str	r0, [r7, #4]
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	2200      	movs	r2, #0
 8012886:	605a      	str	r2, [r3, #4]
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	330c      	adds	r3, #12
 801288c:	4618      	mov	r0, r3
 801288e:	f000 f9f5 	bl	8012c7c <_ZN23core_comm_UartInterfaceILi10ELi128EEC1Ev>
 8012892:	687a      	ldr	r2, [r7, #4]
 8012894:	f241 339c 	movw	r3, #5020	; 0x139c
 8012898:	4413      	add	r3, r2
 801289a:	4618      	mov	r0, r3
 801289c:	f7ff ffd1 	bl	8012842 <_ZN27twipr_uart_comm_callbacks_tC1Ev>

}
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	4618      	mov	r0, r3
 80128a4:	3708      	adds	r7, #8
 80128a6:	46bd      	mov	sp, r7
 80128a8:	bd80      	pop	{r7, pc}
	...

080128ac <_ZN24TWIPR_UART_Communication4initE24twipr_uart_comm_config_t>:

/* =========================================================================== */
void TWIPR_UART_Communication::init(twipr_uart_comm_config_t config) {
 80128ac:	b590      	push	{r4, r7, lr}
 80128ae:	b08d      	sub	sp, #52	; 0x34
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
 80128b4:	6039      	str	r1, [r7, #0]

	// Initialize the UART interface to the Raspberry Pi
	this->_uart_cm4.init(config.huart,
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	f103 000c 	add.w	r0, r3, #12
 80128bc:	6839      	ldr	r1, [r7, #0]
 80128be:	4b0f      	ldr	r3, [pc, #60]	; (80128fc <_ZN24TWIPR_UART_Communication4initE24twipr_uart_comm_config_t+0x50>)
 80128c0:	cb0c      	ldmia	r3, {r2, r3}
 80128c2:	f000 fa37 	bl	8012d34 <_ZN23core_comm_UartInterfaceILi10ELi128EE4initEP20__UART_HandleTypeDef32core_comm_UartInterface_config_t>
			twipr_communication_uart_cm4_interface_config);

	this->_uart_cm4.registerCallback(CORE_COMM_SERIAL_SOCKET_CB_RX,
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	f103 040c 	add.w	r4, r3, #12
			core_utils_Callback<void, void*>(this,
 80128cc:	4b0c      	ldr	r3, [pc, #48]	; (8012900 <_ZN24TWIPR_UART_Communication4initE24twipr_uart_comm_config_t+0x54>)
 80128ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80128d0:	2300      	movs	r3, #0
 80128d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80128d4:	f107 0008 	add.w	r0, r7, #8
 80128d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80128dc:	cb0c      	ldmia	r3, {r2, r3}
 80128de:	6879      	ldr	r1, [r7, #4]
 80128e0:	f000 fa62 	bl	8012da8 <_ZN19core_utils_CallbackIvPvEC1I24TWIPR_UART_CommunicationEEPT_MS4_FvS0_E>
	this->_uart_cm4.registerCallback(CORE_COMM_SERIAL_SOCKET_CB_RX,
 80128e4:	f107 0308 	add.w	r3, r7, #8
 80128e8:	461a      	mov	r2, r3
 80128ea:	2100      	movs	r1, #0
 80128ec:	4620      	mov	r0, r4
 80128ee:	f000 faaf 	bl	8012e50 <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvPvE>
					&TWIPR_UART_Communication::_rx_callback));
}
 80128f2:	bf00      	nop
 80128f4:	3734      	adds	r7, #52	; 0x34
 80128f6:	46bd      	mov	sp, r7
 80128f8:	bd90      	pop	{r4, r7, pc}
 80128fa:	bf00      	nop
 80128fc:	24000014 	.word	0x24000014
 8012900:	08012b5d 	.word	0x08012b5d

08012904 <_ZN24TWIPR_UART_Communication5startEv>:

/* =========================================================================== */
void TWIPR_UART_Communication::start() {
 8012904:	b580      	push	{r7, lr}
 8012906:	b082      	sub	sp, #8
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]

	// Start the UART interfaces
	this->_uart_cm4.start();
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	330c      	adds	r3, #12
 8012910:	4618      	mov	r0, r3
 8012912:	f000 fac0 	bl	8012e96 <_ZN23core_comm_UartInterfaceILi10ELi128EE5startEv>

	// Start the task
	this->_thread = osThreadNew(twipr_uart_comm_task, this, &task_attributes);
 8012916:	4a06      	ldr	r2, [pc, #24]	; (8012930 <_ZN24TWIPR_UART_Communication5startEv+0x2c>)
 8012918:	6879      	ldr	r1, [r7, #4]
 801291a:	4806      	ldr	r0, [pc, #24]	; (8012934 <_ZN24TWIPR_UART_Communication5startEv+0x30>)
 801291c:	f7fb fb23 	bl	800df66 <osThreadNew>
 8012920:	4602      	mov	r2, r0
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	609a      	str	r2, [r3, #8]
}
 8012926:	bf00      	nop
 8012928:	3708      	adds	r7, #8
 801292a:	46bd      	mov	sp, r7
 801292c:	bd80      	pop	{r7, pc}
 801292e:	bf00      	nop
 8012930:	08020658 	.word	0x08020658
 8012934:	0801281f 	.word	0x0801281f

08012938 <_ZN24TWIPR_UART_Communication5resetEv>:
/* =========================================================================== */
void TWIPR_UART_Communication::reset(){
 8012938:	b580      	push	{r7, lr}
 801293a:	b082      	sub	sp, #8
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
	this->_uart_cm4.reset();
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	330c      	adds	r3, #12
 8012944:	4618      	mov	r0, r3
 8012946:	f000 faba 	bl	8012ebe <_ZN23core_comm_UartInterfaceILi10ELi128EE5resetEv>
}
 801294a:	bf00      	nop
 801294c:	3708      	adds	r7, #8
 801294e:	46bd      	mov	sp, r7
 8012950:	bd80      	pop	{r7, pc}

08012952 <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>:
	outgoing_msg.len = len;
	this->send(&outgoing_msg);
}

/* =========================================================================== */
void TWIPR_UART_Communication::send(core_comm_SerialMessage *msg) {
 8012952:	b580      	push	{r7, lr}
 8012954:	b082      	sub	sp, #8
 8012956:	af00      	add	r7, sp, #0
 8012958:	6078      	str	r0, [r7, #4]
 801295a:	6039      	str	r1, [r7, #0]

	// Check the message
	this->_uart_cm4.send(msg);
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	330c      	adds	r3, #12
 8012960:	6839      	ldr	r1, [r7, #0]
 8012962:	4618      	mov	r0, r3
 8012964:	f000 fab9 	bl	8012eda <_ZN23core_comm_UartInterfaceILi10ELi128EE4sendEP23core_comm_SerialMessage>
}
 8012968:	bf00      	nop
 801296a:	3708      	adds	r7, #8
 801296c:	46bd      	mov	sp, r7
 801296e:	bd80      	pop	{r7, pc}

08012970 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEaSERKS2_>:
class core_utils_Callback: public Callback {
 8012970:	b5b0      	push	{r4, r5, r7, lr}
 8012972:	b082      	sub	sp, #8
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
 8012978:	6039      	str	r1, [r7, #0]
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	683a      	ldr	r2, [r7, #0]
 801297e:	4611      	mov	r1, r2
 8012980:	4618      	mov	r0, r3
 8012982:	f7ff fbd2 	bl	801212a <_ZN8CallbackaSERKS_>
 8012986:	683b      	ldr	r3, [r7, #0]
 8012988:	791a      	ldrb	r2, [r3, #4]
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	711a      	strb	r2, [r3, #4]
 801298e:	687a      	ldr	r2, [r7, #4]
 8012990:	683b      	ldr	r3, [r7, #0]
 8012992:	f102 0408 	add.w	r4, r2, #8
 8012996:	f103 0508 	add.w	r5, r3, #8
 801299a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801299c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801299e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80129a2:	e884 0003 	stmia.w	r4, {r0, r1}
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	4618      	mov	r0, r3
 80129aa:	3708      	adds	r7, #8
 80129ac:	46bd      	mov	sp, r7
 80129ae:	bdb0      	pop	{r4, r5, r7, pc}

080129b0 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE>:

/* =========================================================================== */
void TWIPR_UART_Communication::registerCallback(
		twipr_uart_comm_callback_id_t callback_id,
		core_utils_Callback<void, core_comm_SerialMessage*> callback) {
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b084      	sub	sp, #16
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	60f8      	str	r0, [r7, #12]
 80129b8:	460b      	mov	r3, r1
 80129ba:	607a      	str	r2, [r7, #4]
 80129bc:	72fb      	strb	r3, [r7, #11]
	switch (callback_id) {
 80129be:	7afb      	ldrb	r3, [r7, #11]
 80129c0:	2b03      	cmp	r3, #3
 80129c2:	d82f      	bhi.n	8012a24 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE+0x74>
 80129c4:	a201      	add	r2, pc, #4	; (adr r2, 80129cc <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE+0x1c>)
 80129c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129ca:	bf00      	nop
 80129cc:	080129dd 	.word	0x080129dd
 80129d0:	080129ef 	.word	0x080129ef
 80129d4:	08012a01 	.word	0x08012a01
 80129d8:	08012a13 	.word	0x08012a13
	case TWIPR_UART_COMM_CALLBACK_RX_MSG: {
		this->_callbacks.rx_msg = callback;
 80129dc:	68fa      	ldr	r2, [r7, #12]
 80129de:	f241 339c 	movw	r3, #5020	; 0x139c
 80129e2:	4413      	add	r3, r2
 80129e4:	6879      	ldr	r1, [r7, #4]
 80129e6:	4618      	mov	r0, r3
 80129e8:	f7ff ffc2 	bl	8012970 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEaSERKS2_>
		break;
 80129ec:	e01a      	b.n	8012a24 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE+0x74>
	}
	case TWIPR_UART_COMM_CALLBACK_MSG_WRITE: {
		this->_callbacks.write_msg = callback;
 80129ee:	68fa      	ldr	r2, [r7, #12]
 80129f0:	f241 33bc 	movw	r3, #5052	; 0x13bc
 80129f4:	4413      	add	r3, r2
 80129f6:	6879      	ldr	r1, [r7, #4]
 80129f8:	4618      	mov	r0, r3
 80129fa:	f7ff ffb9 	bl	8012970 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEaSERKS2_>
		break;
 80129fe:	e011      	b.n	8012a24 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE+0x74>
	}
	case TWIPR_UART_COMM_CALLBACK_MSG_READ: {
		this->_callbacks.read_msg = callback;
 8012a00:	68fa      	ldr	r2, [r7, #12]
 8012a02:	f241 33dc 	movw	r3, #5084	; 0x13dc
 8012a06:	4413      	add	r3, r2
 8012a08:	6879      	ldr	r1, [r7, #4]
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	f7ff ffb0 	bl	8012970 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEaSERKS2_>
		break;
 8012a10:	e008      	b.n	8012a24 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE+0x74>
	}
	case TWIPR_UART_COMM_CALLBACK_MSG_FUNC: {
		this->_callbacks.func_msg = callback;
 8012a12:	68fa      	ldr	r2, [r7, #12]
 8012a14:	f241 33fc 	movw	r3, #5116	; 0x13fc
 8012a18:	4413      	add	r3, r2
 8012a1a:	6879      	ldr	r1, [r7, #4]
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	f7ff ffa7 	bl	8012970 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEaSERKS2_>
		break;
 8012a22:	bf00      	nop
	}
	}

}
 8012a24:	bf00      	nop
 8012a26:	3710      	adds	r7, #16
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	bd80      	pop	{r7, pc}

08012a2c <_ZN24TWIPR_UART_Communication12taskFunctionEv>:

/* =========================================================================== */
void TWIPR_UART_Communication::taskFunction() {
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b082      	sub	sp, #8
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	6078      	str	r0, [r7, #4]
	//	uint32_t kernel_ticks = 0;
	while (true) {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8012a34:	f04f 31ff 	mov.w	r1, #4294967295
 8012a38:	2001      	movs	r0, #1
 8012a3a:	f7fe f837 	bl	8010aac <ulTaskNotifyTake>
		if (this->_uart_cm4.rx_queue.available()) {
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	3318      	adds	r3, #24
 8012a42:	4618      	mov	r0, r3
 8012a44:	f000 fa66 	bl	8012f14 <_ZN22core_comm_MessageQueueILi10ELi128EE9availableEv>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	bf14      	ite	ne
 8012a4e:	2301      	movne	r3, #1
 8012a50:	2300      	moveq	r3, #0
 8012a52:	b2db      	uxtb	r3, r3
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d0ed      	beq.n	8012a34 <_ZN24TWIPR_UART_Communication12taskFunctionEv+0x8>
			this->_handleIncomingMessages();
 8012a58:	6878      	ldr	r0, [r7, #4]
 8012a5a:	f000 f801 	bl	8012a60 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8012a5e:	e7e9      	b.n	8012a34 <_ZN24TWIPR_UART_Communication12taskFunctionEv+0x8>

08012a60 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv>:
		}
	}
}

/* =========================================================================== */
void TWIPR_UART_Communication::_handleIncomingMessages() {
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b082      	sub	sp, #8
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
	// Loop through all the messages in the rx queue
	while (this->_uart_cm4.rx_queue.available()) {
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	3318      	adds	r3, #24
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	f000 fa51 	bl	8012f14 <_ZN22core_comm_MessageQueueILi10ELi128EE9availableEv>
 8012a72:	4603      	mov	r3, r0
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	bf14      	ite	ne
 8012a78:	2301      	movne	r3, #1
 8012a7a:	2300      	moveq	r3, #0
 8012a7c:	b2db      	uxtb	r3, r3
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d066      	beq.n	8012b50 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xf0>
		this->_uart_cm4.rx_queue.read(&incoming_msg);
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	3318      	adds	r3, #24
 8012a86:	4934      	ldr	r1, [pc, #208]	; (8012b58 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xf8>)
 8012a88:	4618      	mov	r0, r3
 8012a8a:	f000 fa62 	bl	8012f52 <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage>
		// TODO

		// Handle the different addresses

		// Handle the different commands
		switch (incoming_msg.cmd) {
 8012a8e:	4b32      	ldr	r3, [pc, #200]	; (8012b58 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xf8>)
 8012a90:	781b      	ldrb	r3, [r3, #0]
 8012a92:	3b01      	subs	r3, #1
 8012a94:	2b07      	cmp	r3, #7
 8012a96:	d859      	bhi.n	8012b4c <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xec>
 8012a98:	a201      	add	r2, pc, #4	; (adr r2, 8012aa0 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0x40>)
 8012a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a9e:	bf00      	nop
 8012aa0:	08012ac1 	.word	0x08012ac1
 8012aa4:	08012ae1 	.word	0x08012ae1
 8012aa8:	08012b4d 	.word	0x08012b4d
 8012aac:	08012b4d 	.word	0x08012b4d
 8012ab0:	08012b01 	.word	0x08012b01
 8012ab4:	08012b07 	.word	0x08012b07
 8012ab8:	08012b0d 	.word	0x08012b0d
 8012abc:	08012b2d 	.word	0x08012b2d
		case MSG_COMMAND_WRITE: {
//			this->_handleMessage_write(&incoming_msg);
			if (this->_callbacks.write_msg.registered) {
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012ac6:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d033      	beq.n	8012b36 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xd6>
				this->_callbacks.write_msg.call(&incoming_msg);
 8012ace:	687a      	ldr	r2, [r7, #4]
 8012ad0:	f241 33bc 	movw	r3, #5052	; 0x13bc
 8012ad4:	4413      	add	r3, r2
 8012ad6:	4920      	ldr	r1, [pc, #128]	; (8012b58 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xf8>)
 8012ad8:	4618      	mov	r0, r3
 8012ada:	f000 fac7 	bl	801306c <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageE4callES1_>
			}
			break;
 8012ade:	e02a      	b.n	8012b36 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xd6>
		}
		case MSG_COMMAND_READ: {
			if (this->_callbacks.read_msg.registered) {
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012ae6:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d025      	beq.n	8012b3a <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xda>
				this->_callbacks.read_msg.call(&incoming_msg);
 8012aee:	687a      	ldr	r2, [r7, #4]
 8012af0:	f241 33dc 	movw	r3, #5084	; 0x13dc
 8012af4:	4413      	add	r3, r2
 8012af6:	4918      	ldr	r1, [pc, #96]	; (8012b58 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xf8>)
 8012af8:	4618      	mov	r0, r3
 8012afa:	f000 fab7 	bl	801306c <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageE4callES1_>
			}
//			this->_handleMessage_read(&incoming_msg);
			break;
 8012afe:	e01c      	b.n	8012b3a <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xda>
		}
		case MSG_COMMAND_EVENT: {
			nop();
 8012b00:	f7ff fe28 	bl	8012754 <_Z3nopv>
			break;
 8012b04:	e01c      	b.n	8012b40 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xe0>
		}
		case MSG_COMMAND_MSG: {
			nop();
 8012b06:	f7ff fe25 	bl	8012754 <_Z3nopv>
			break;
 8012b0a:	e019      	b.n	8012b40 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xe0>
		}
		case MSG_COMMAND_FCT: {
			if (this->_callbacks.func_msg.registered) {
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012b12:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d011      	beq.n	8012b3e <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xde>
				this->_callbacks.func_msg.call(&incoming_msg);
 8012b1a:	687a      	ldr	r2, [r7, #4]
 8012b1c:	f241 33fc 	movw	r3, #5116	; 0x13fc
 8012b20:	4413      	add	r3, r2
 8012b22:	490d      	ldr	r1, [pc, #52]	; (8012b58 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xf8>)
 8012b24:	4618      	mov	r0, r3
 8012b26:	f000 faa1 	bl	801306c <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageE4callES1_>
			}
//			this->_handleMessage_function(&incoming_msg);
			break;
 8012b2a:	e008      	b.n	8012b3e <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xde>
		}
		case MSG_COMMAND_ECHO: {
			this->send(&incoming_msg);
 8012b2c:	490a      	ldr	r1, [pc, #40]	; (8012b58 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xf8>)
 8012b2e:	6878      	ldr	r0, [r7, #4]
 8012b30:	f7ff ff0f 	bl	8012952 <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>
			break;
 8012b34:	e004      	b.n	8012b40 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xe0>
			break;
 8012b36:	bf00      	nop
 8012b38:	e002      	b.n	8012b40 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xe0>
			break;
 8012b3a:	bf00      	nop
 8012b3c:	e000      	b.n	8012b40 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xe0>
			break;
 8012b3e:	bf00      	nop
		default: {
			continue;
			break;
		}
		}
		this->last_received_message_tick = osKernelGetTickCount();
 8012b40:	f7fb f9fc 	bl	800df3c <osKernelGetTickCount>
 8012b44:	4602      	mov	r2, r0
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	605a      	str	r2, [r3, #4]
 8012b4a:	e78d      	b.n	8012a68 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0x8>
			continue;
 8012b4c:	bf00      	nop
	while (this->_uart_cm4.rx_queue.available()) {
 8012b4e:	e78b      	b.n	8012a68 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0x8>
	}
}
 8012b50:	bf00      	nop
 8012b52:	3708      	adds	r7, #8
 8012b54:	46bd      	mov	sp, r7
 8012b56:	bd80      	pop	{r7, pc}
 8012b58:	24015188 	.word	0x24015188

08012b5c <_ZN24TWIPR_UART_Communication12_rx_callbackEPv>:
		this->send(&outgoing_msg);
	}
}

/* =========================================================================== */
void TWIPR_UART_Communication::_rx_callback(void *argument) {
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b082      	sub	sp, #8
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
 8012b64:	6039      	str	r1, [r7, #0]
	if (this->task != NULL) {
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d006      	beq.n	8012b7c <_ZN24TWIPR_UART_Communication12_rx_callbackEPv+0x20>
		xTaskNotifyGive(this->task);
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	6818      	ldr	r0, [r3, #0]
 8012b72:	2300      	movs	r3, #0
 8012b74:	2202      	movs	r2, #2
 8012b76:	2100      	movs	r1, #0
 8012b78:	f7fd ffe4 	bl	8010b44 <xTaskGenericNotify>
	}
}
 8012b7c:	bf00      	nop
 8012b7e:	3708      	adds	r7, #8
 8012b80:	46bd      	mov	sp, r7
 8012b82:	bd80      	pop	{r7, pc}

08012b84 <_ZN19core_utils_CallbackIvvEC1Ev>:
	core_utils_Callback() {
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b082      	sub	sp, #8
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	4618      	mov	r0, r3
 8012b90:	f7ff faa6 	bl	80120e0 <_ZN8CallbackC1Ev>
 8012b94:	4a09      	ldr	r2, [pc, #36]	; (8012bbc <_ZN19core_utils_CallbackIvvEC1Ev+0x38>)
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	601a      	str	r2, [r3, #0]
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	2200      	movs	r2, #0
 8012b9e:	711a      	strb	r2, [r3, #4]
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	3308      	adds	r3, #8
 8012ba4:	2100      	movs	r1, #0
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	f7ff fca5 	bl	80124f6 <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		this->registered = 0;
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	2200      	movs	r2, #0
 8012bb0:	711a      	strb	r2, [r3, #4]
	}
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	3708      	adds	r7, #8
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	bd80      	pop	{r7, pc}
 8012bbc:	08020640 	.word	0x08020640

08012bc0 <_ZN30core_comm_SerialMessage_memoryILi128EEC1Ev>:
};

template <int size>
class core_comm_SerialMessage_memory: public core_comm_SerialMessage {
public:
	core_comm_SerialMessage_memory(){
 8012bc0:	b480      	push	{r7}
 8012bc2:	b083      	sub	sp, #12
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
		this->data_ptr = data;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	f103 0210 	add.w	r2, r3, #16
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	609a      	str	r2, [r3, #8]
	}
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	370c      	adds	r7, #12
 8012bd8:	46bd      	mov	sp, r7
 8012bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bde:	4770      	bx	lr

08012be0 <_ZN25core_hardware_UART_configC1Ev>:
typedef struct core_hardware_UART_config {
 8012be0:	b480      	push	{r7}
 8012be2:	b083      	sub	sp, #12
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	2202      	movs	r2, #2
 8012bec:	701a      	strb	r2, [r3, #0]
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	2201      	movs	r2, #1
 8012bf2:	705a      	strb	r2, [r3, #1]
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	2201      	movs	r2, #1
 8012bf8:	709a      	strb	r2, [r3, #2]
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	2201      	movs	r2, #1
 8012bfe:	70da      	strb	r2, [r3, #3]
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	4618      	mov	r0, r3
 8012c04:	370c      	adds	r7, #12
 8012c06:	46bd      	mov	sp, r7
 8012c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0c:	4770      	bx	lr

08012c0e <_ZN32core_comm_UartInterface_config_tC1Ev>:
typedef struct core_comm_UartInterface_config_t {
 8012c0e:	b580      	push	{r7, lr}
 8012c10:	b082      	sub	sp, #8
 8012c12:	af00      	add	r7, sp, #0
 8012c14:	6078      	str	r0, [r7, #4]
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f7ff ffe1 	bl	8012be0 <_ZN25core_hardware_UART_configC1Ev>
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	4618      	mov	r0, r3
 8012c22:	3708      	adds	r7, #8
 8012c24:	46bd      	mov	sp, r7
 8012c26:	bd80      	pop	{r7, pc}

08012c28 <_ZN22core_comm_MessageQueueILi10ELi128EEC1Ev>:
#define CORE_COMMUNICATION_SERIAL_SOCKET_CORE_COMM_MESSAGEQUEUE_H_

#include <communication/uart_interface/core_comm_SerialProtocol.h>

template<int num_messages, int buf_size>
class core_comm_MessageQueue {
 8012c28:	b5b0      	push	{r4, r5, r7, lr}
 8012c2a:	b082      	sub	sp, #8
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	6078      	str	r0, [r7, #4]
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	2409      	movs	r4, #9
 8012c34:	461d      	mov	r5, r3
 8012c36:	2c00      	cmp	r4, #0
 8012c38:	db05      	blt.n	8012c46 <_ZN22core_comm_MessageQueueILi10ELi128EEC1Ev+0x1e>
 8012c3a:	4628      	mov	r0, r5
 8012c3c:	f7ff ffc0 	bl	8012bc0 <_ZN30core_comm_SerialMessage_memoryILi128EEC1Ev>
 8012c40:	3590      	adds	r5, #144	; 0x90
 8012c42:	3c01      	subs	r4, #1
 8012c44:	e7f7      	b.n	8012c36 <_ZN22core_comm_MessageQueueILi10ELi128EEC1Ev+0xe>
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	220a      	movs	r2, #10
 8012c4a:	f883 25a3 	strb.w	r2, [r3, #1443]	; 0x5a3
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	4618      	mov	r0, r3
 8012c52:	3708      	adds	r7, #8
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bdb0      	pop	{r4, r5, r7, pc}

08012c58 <_ZN35core_comm_UartInterface_callbacks_tC1Ev>:
typedef struct core_comm_UartInterface_callbacks_t {
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b082      	sub	sp, #8
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	4618      	mov	r0, r3
 8012c64:	f000 fa56 	bl	8013114 <_ZN19core_utils_CallbackIvPvEC1Ev>
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	3320      	adds	r3, #32
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f000 f843 	bl	8012cf8 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	4618      	mov	r0, r3
 8012c76:	3708      	adds	r7, #8
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	bd80      	pop	{r7, pc}

08012c7c <_ZN23core_comm_UartInterfaceILi10ELi128EEC1Ev>:
	core_comm_UartInterface_config_t config;
	core_comm_UartInterface_status_t status;
	core_comm_MessageQueue<uart_buffers, uart_buffer_size> rx_queue;

	/* ------------------------------------------------------------- */
	core_comm_UartInterface() {
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b082      	sub	sp, #8
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	4618      	mov	r0, r3
 8012c88:	f7ff fd94 	bl	80127b4 <_ZN13UartInterfaceC1Ev>
 8012c8c:	4a19      	ldr	r2, [pc, #100]	; (8012cf4 <_ZN23core_comm_UartInterfaceILi10ELi128EEC1Ev+0x78>)
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	601a      	str	r2, [r3, #0]
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	3305      	adds	r3, #5
 8012c96:	4618      	mov	r0, r3
 8012c98:	f7ff ffb9 	bl	8012c0e <_ZN32core_comm_UartInterface_config_tC1Ev>
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	330c      	adds	r3, #12
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	f7ff ffc1 	bl	8012c28 <_ZN22core_comm_MessageQueueILi10ELi128EEC1Ev>
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8012cac:	4618      	mov	r0, r3
 8012cae:	f000 f9f9 	bl	80130a4 <_ZN18core_hardware_UARTILi10ELi128EEC1Ev>
 8012cb2:	687a      	ldr	r2, [r7, #4]
 8012cb4:	f241 3344 	movw	r3, #4932	; 0x1344
 8012cb8:	4413      	add	r3, r2
 8012cba:	4618      	mov	r0, r3
 8012cbc:	f7ff ffcc 	bl	8012c58 <_ZN35core_comm_UartInterface_callbacks_tC1Ev>
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012cc6:	461a      	mov	r2, r3
 8012cc8:	2300      	movs	r3, #0
 8012cca:	f8c2 3384 	str.w	r3, [r2, #900]	; 0x384
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012cd4:	461a      	mov	r2, r3
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	f8c2 3388 	str.w	r3, [r2, #904]	; 0x388
		this->status = CORE_COMM_SERIAL_SOCKET_STATE_NONE;
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	2200      	movs	r2, #0
 8012ce0:	72da      	strb	r2, [r3, #11]
		this->exit = 0;
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	711a      	strb	r2, [r3, #4]
	}
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	4618      	mov	r0, r3
 8012cec:	3708      	adds	r7, #8
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bd80      	pop	{r7, pc}
 8012cf2:	bf00      	nop
 8012cf4:	08020684 	.word	0x08020684

08012cf8 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>:
	core_utils_Callback() {
 8012cf8:	b580      	push	{r7, lr}
 8012cfa:	b082      	sub	sp, #8
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	6078      	str	r0, [r7, #4]
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	4618      	mov	r0, r3
 8012d04:	f7ff f9ec 	bl	80120e0 <_ZN8CallbackC1Ev>
 8012d08:	4a09      	ldr	r2, [pc, #36]	; (8012d30 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev+0x38>)
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	601a      	str	r2, [r3, #0]
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	2200      	movs	r2, #0
 8012d12:	711a      	strb	r2, [r3, #4]
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	3308      	adds	r3, #8
 8012d18:	2100      	movs	r1, #0
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	f000 fa18 	bl	8013150 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEC1EPFvS1_E>
		this->registered = 0;
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	2200      	movs	r2, #0
 8012d24:	711a      	strb	r2, [r3, #4]
	}
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	4618      	mov	r0, r3
 8012d2a:	3708      	adds	r7, #8
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	bd80      	pop	{r7, pc}
 8012d30:	080206bc 	.word	0x080206bc

08012d34 <_ZN23core_comm_UartInterfaceILi10ELi128EE4initEP20__UART_HandleTypeDef32core_comm_UartInterface_config_t>:
	/* ------------------------------------------------------------- */
	void init(UART_HandleTypeDef *huart) {
		this->init(huart, std_uart_config);
	}
	/* ------------------------------------------------------------- */
	void init(UART_HandleTypeDef *huart,
 8012d34:	b590      	push	{r4, r7, lr}
 8012d36:	b08f      	sub	sp, #60	; 0x3c
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	60f8      	str	r0, [r7, #12]
 8012d3c:	60b9      	str	r1, [r7, #8]
 8012d3e:	4639      	mov	r1, r7
 8012d40:	e881 000c 	stmia.w	r1, {r2, r3}
			core_comm_UartInterface_config_t config) {

		this->config = config;
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	3305      	adds	r3, #5
 8012d48:	463a      	mov	r2, r7
 8012d4a:	6810      	ldr	r0, [r2, #0]
 8012d4c:	6018      	str	r0, [r3, #0]
 8012d4e:	8892      	ldrh	r2, [r2, #4]
 8012d50:	809a      	strh	r2, [r3, #4]
		this->_uart.init(huart, this->config.uart);
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	f503 60b8 	add.w	r0, r3, #1472	; 0x5c0
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8012d5e:	4613      	mov	r3, r2
 8012d60:	461a      	mov	r2, r3
 8012d62:	68b9      	ldr	r1, [r7, #8]
 8012d64:	f000 fa02 	bl	801316c <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config>

		// Add the rx callback to the UARTs
		this->_uart.registerCallback(CORE_HARDWARE_UART_CB_RX,
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	f503 64b8 	add.w	r4, r3, #1472	; 0x5c0
				core_utils_Callback<void, void>(this,
 8012d6e:	4b0d      	ldr	r3, [pc, #52]	; (8012da4 <_ZN23core_comm_UartInterfaceILi10ELi128EE4initEP20__UART_HandleTypeDef32core_comm_UartInterface_config_t+0x70>)
 8012d70:	633b      	str	r3, [r7, #48]	; 0x30
 8012d72:	2300      	movs	r3, #0
 8012d74:	637b      	str	r3, [r7, #52]	; 0x34
 8012d76:	f107 0010 	add.w	r0, r7, #16
 8012d7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012d7e:	cb0c      	ldmia	r3, {r2, r3}
 8012d80:	68f9      	ldr	r1, [r7, #12]
 8012d82:	f000 fb0f 	bl	80133a4 <_ZN19core_utils_CallbackIvvEC1I23core_comm_UartInterfaceILi10ELi128EEEEPT_MS4_FvvE>
		this->_uart.registerCallback(CORE_HARDWARE_UART_CB_RX,
 8012d86:	f107 0310 	add.w	r3, r7, #16
 8012d8a:	461a      	mov	r2, r3
 8012d8c:	2100      	movs	r1, #0
 8012d8e:	4620      	mov	r0, r4
 8012d90:	f000 fb3c 	bl	801340c <_ZN18core_hardware_UARTILi10ELi128EE16registerCallbackE24core_hardware_UART_CB_ID19core_utils_CallbackIvvE>
						&core_comm_UartInterface<uart_buffers, uart_buffer_size>::_rxNotify_callback));

		this->status = CORE_COMM_SERIAL_SOCKET_STATE_INIT;
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	2201      	movs	r2, #1
 8012d98:	72da      	strb	r2, [r3, #11]
	}
 8012d9a:	bf00      	nop
 8012d9c:	373c      	adds	r7, #60	; 0x3c
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bd90      	pop	{r4, r7, pc}
 8012da2:	bf00      	nop
 8012da4:	08013351 	.word	0x08013351

08012da8 <_ZN19core_utils_CallbackIvPvEC1I24TWIPR_UART_CommunicationEEPT_MS4_FvS0_E>:
	core_utils_Callback(T *object, R (T::*member)(A)) {
 8012da8:	b5b0      	push	{r4, r5, r7, lr}
 8012daa:	b08a      	sub	sp, #40	; 0x28
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	60f8      	str	r0, [r7, #12]
 8012db0:	60b9      	str	r1, [r7, #8]
 8012db2:	4639      	mov	r1, r7
 8012db4:	e881 000c 	stmia.w	r1, {r2, r3}
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f7ff f990 	bl	80120e0 <_ZN8CallbackC1Ev>
 8012dc0:	4a12      	ldr	r2, [pc, #72]	; (8012e0c <_ZN19core_utils_CallbackIvPvEC1I24TWIPR_UART_CommunicationEEPT_MS4_FvS0_E+0x64>)
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	601a      	str	r2, [r3, #0]
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	2200      	movs	r2, #0
 8012dca:	711a      	strb	r2, [r3, #4]
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	3308      	adds	r3, #8
 8012dd0:	2100      	movs	r1, #0
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f000 fb2f 	bl	8013436 <_ZN26core_utils_FunctionPointerIvPvEC1EPFvS0_E>
		_fp = core_utils_FunctionPointer<R,A>(object, member);
 8012dd8:	f107 0010 	add.w	r0, r7, #16
 8012ddc:	463b      	mov	r3, r7
 8012dde:	cb0c      	ldmia	r3, {r2, r3}
 8012de0:	68b9      	ldr	r1, [r7, #8]
 8012de2:	f000 fb36 	bl	8013452 <_ZN26core_utils_FunctionPointerIvPvEC1I24TWIPR_UART_CommunicationEEPT_MS4_FvS0_E>
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	f103 0408 	add.w	r4, r3, #8
 8012dec:	f107 0510 	add.w	r5, r7, #16
 8012df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012df4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012df8:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	2201      	movs	r2, #1
 8012e00:	711a      	strb	r2, [r3, #4]
	}
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	4618      	mov	r0, r3
 8012e06:	3728      	adds	r7, #40	; 0x28
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8012e0c:	080206cc 	.word	0x080206cc

08012e10 <_ZN19core_utils_CallbackIvPvEaSERKS1_>:
class core_utils_Callback: public Callback {
 8012e10:	b5b0      	push	{r4, r5, r7, lr}
 8012e12:	b082      	sub	sp, #8
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	6078      	str	r0, [r7, #4]
 8012e18:	6039      	str	r1, [r7, #0]
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	683a      	ldr	r2, [r7, #0]
 8012e1e:	4611      	mov	r1, r2
 8012e20:	4618      	mov	r0, r3
 8012e22:	f7ff f982 	bl	801212a <_ZN8CallbackaSERKS_>
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	791a      	ldrb	r2, [r3, #4]
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	711a      	strb	r2, [r3, #4]
 8012e2e:	687a      	ldr	r2, [r7, #4]
 8012e30:	683b      	ldr	r3, [r7, #0]
 8012e32:	f102 0408 	add.w	r4, r2, #8
 8012e36:	f103 0508 	add.w	r5, r3, #8
 8012e3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012e3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e3e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012e42:	e884 0003 	stmia.w	r4, {r0, r1}
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	4618      	mov	r0, r3
 8012e4a:	3708      	adds	r7, #8
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	bdb0      	pop	{r4, r5, r7, pc}

08012e50 <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvPvE>:
	/* ------------------------------------------------------------- */
	core_comm_SerialMessage* getMessagePointer() {
		return this->rx_queue.readPointer();
	}
	/* ------------------------------------------------------------- */
	void registerCallback(core_comm_UartInterface_callback_id_t callback_id,
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b084      	sub	sp, #16
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	60f8      	str	r0, [r7, #12]
 8012e58:	460b      	mov	r3, r1
 8012e5a:	607a      	str	r2, [r7, #4]
 8012e5c:	72fb      	strb	r3, [r7, #11]
			core_utils_Callback<void, void*> callback) {
		switch (callback_id) {
 8012e5e:	7afb      	ldrb	r3, [r7, #11]
 8012e60:	2b02      	cmp	r3, #2
 8012e62:	d013      	beq.n	8012e8c <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvPvE+0x3c>
 8012e64:	2b02      	cmp	r3, #2
 8012e66:	dc12      	bgt.n	8012e8e <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvPvE+0x3e>
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d002      	beq.n	8012e72 <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvPvE+0x22>
 8012e6c:	2b01      	cmp	r3, #1
 8012e6e:	d009      	beq.n	8012e84 <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvPvE+0x34>
		}
		case CORE_COMM_SERIAL_SOCKET_CB_ERROR: {
			break;
		}
		}
	}
 8012e70:	e00d      	b.n	8012e8e <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvPvE+0x3e>
			this->_callbacks.rx = callback;
 8012e72:	68fa      	ldr	r2, [r7, #12]
 8012e74:	f241 3344 	movw	r3, #4932	; 0x1344
 8012e78:	4413      	add	r3, r2
 8012e7a:	6879      	ldr	r1, [r7, #4]
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7ff ffc7 	bl	8012e10 <_ZN19core_utils_CallbackIvPvEaSERKS1_>
			break;
 8012e82:	e004      	b.n	8012e8e <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvPvE+0x3e>
			core_ErrorHandler(0x00);
 8012e84:	2000      	movs	r0, #0
 8012e86:	f00a f868 	bl	801cf5a <_Z17core_ErrorHandleri>
			break;
 8012e8a:	e000      	b.n	8012e8e <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvPvE+0x3e>
			break;
 8012e8c:	bf00      	nop
	}
 8012e8e:	bf00      	nop
 8012e90:	3710      	adds	r7, #16
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd80      	pop	{r7, pc}

08012e96 <_ZN23core_comm_UartInterfaceILi10ELi128EE5startEv>:
	void start() {
 8012e96:	b580      	push	{r7, lr}
 8012e98:	b082      	sub	sp, #8
 8012e9a:	af00      	add	r7, sp, #0
 8012e9c:	6078      	str	r0, [r7, #4]
		this->_uart.start();
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	f000 fae7 	bl	8013478 <_ZN18core_hardware_UARTILi10ELi128EE5startEv>
		this->status = CORE_COMM_SERIAL_SOCKET_STATE_RUN;
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	2202      	movs	r2, #2
 8012eae:	72da      	strb	r2, [r3, #11]
		this->_startRTOS();
 8012eb0:	6878      	ldr	r0, [r7, #4]
 8012eb2:	f000 faff 	bl	80134b4 <_ZN23core_comm_UartInterfaceILi10ELi128EE10_startRTOSEv>
	}
 8012eb6:	bf00      	nop
 8012eb8:	3708      	adds	r7, #8
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	bd80      	pop	{r7, pc}

08012ebe <_ZN23core_comm_UartInterfaceILi10ELi128EE5resetEv>:
	void reset(){
 8012ebe:	b580      	push	{r7, lr}
 8012ec0:	b082      	sub	sp, #8
 8012ec2:	af00      	add	r7, sp, #0
 8012ec4:	6078      	str	r0, [r7, #4]
		this->_uart.reset();
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f000 fb19 	bl	8013504 <_ZN18core_hardware_UARTILi10ELi128EE5resetEv>
	}
 8012ed2:	bf00      	nop
 8012ed4:	3708      	adds	r7, #8
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	bd80      	pop	{r7, pc}

08012eda <_ZN23core_comm_UartInterfaceILi10ELi128EE4sendEP23core_comm_SerialMessage>:
	void send(core_comm_SerialMessage *message) {
 8012eda:	b580      	push	{r7, lr}
 8012edc:	b084      	sub	sp, #16
 8012ede:	af00      	add	r7, sp, #0
 8012ee0:	6078      	str	r0, [r7, #4]
 8012ee2:	6039      	str	r1, [r7, #0]
		uint8_t len = message->encode(this->_tx_buf);
 8012ee4:	687a      	ldr	r2, [r7, #4]
 8012ee6:	f241 23c4 	movw	r3, #4804	; 0x12c4
 8012eea:	4413      	add	r3, r2
 8012eec:	4619      	mov	r1, r3
 8012eee:	6838      	ldr	r0, [r7, #0]
 8012ef0:	f007 fea9 	bl	801ac46 <_ZN23core_comm_SerialMessage6encodeEPh>
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	73fb      	strb	r3, [r7, #15]
		this->send(this->_tx_buf, len);
 8012ef8:	687a      	ldr	r2, [r7, #4]
 8012efa:	f241 23c4 	movw	r3, #4804	; 0x12c4
 8012efe:	4413      	add	r3, r2
 8012f00:	7bfa      	ldrb	r2, [r7, #15]
 8012f02:	b292      	uxth	r2, r2
 8012f04:	4619      	mov	r1, r3
 8012f06:	6878      	ldr	r0, [r7, #4]
 8012f08:	f000 fb0f 	bl	801352a <_ZN23core_comm_UartInterfaceILi10ELi128EE4sendEPht>
	}
 8012f0c:	bf00      	nop
 8012f0e:	3710      	adds	r7, #16
 8012f10:	46bd      	mov	sp, r7
 8012f12:	bd80      	pop	{r7, pc}

08012f14 <_ZN22core_comm_MessageQueueILi10ELi128EE9availableEv>:
		core_comm_SerialMessage *msg = &this->messages[this->idx_read];
		this->inc_read();
		return msg;
	}

	uint8_t available() {
 8012f14:	b480      	push	{r7}
 8012f16:	b085      	sub	sp, #20
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
		int8_t available_msg = this->idx_write - this->idx_read;
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	f893 25a1 	ldrb.w	r2, [r3, #1441]	; 0x5a1
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8012f28:	1ad3      	subs	r3, r2, r3
 8012f2a:	b2db      	uxtb	r3, r3
 8012f2c:	73fb      	strb	r3, [r7, #15]
		if (available_msg < 0) {
 8012f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	da06      	bge.n	8012f44 <_ZN22core_comm_MessageQueueILi10ELi128EE9availableEv+0x30>
			available_msg += this->len;
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	f893 25a3 	ldrb.w	r2, [r3, #1443]	; 0x5a3
 8012f3c:	7bfb      	ldrb	r3, [r7, #15]
 8012f3e:	4413      	add	r3, r2
 8012f40:	b2db      	uxtb	r3, r3
 8012f42:	73fb      	strb	r3, [r7, #15]
		}
		return available_msg;
 8012f44:	7bfb      	ldrb	r3, [r7, #15]
	}
 8012f46:	4618      	mov	r0, r3
 8012f48:	3714      	adds	r7, #20
 8012f4a:	46bd      	mov	sp, r7
 8012f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f50:	4770      	bx	lr

08012f52 <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage>:
	uint8_t read(core_comm_SerialMessage *message) {
 8012f52:	b580      	push	{r7, lr}
 8012f54:	b084      	sub	sp, #16
 8012f56:	af00      	add	r7, sp, #0
 8012f58:	6078      	str	r0, [r7, #4]
 8012f5a:	6039      	str	r1, [r7, #0]
		if (this->available() < 1) {
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f7ff ffd9 	bl	8012f14 <_ZN22core_comm_MessageQueueILi10ELi128EE9availableEv>
 8012f62:	4603      	mov	r3, r0
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	bf0c      	ite	eq
 8012f68:	2301      	moveq	r3, #1
 8012f6a:	2300      	movne	r3, #0
 8012f6c:	b2db      	uxtb	r3, r3
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d001      	beq.n	8012f76 <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage+0x24>
			return 0;
 8012f72:	2300      	movs	r3, #0
 8012f74:	e076      	b.n	8013064 <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage+0x112>
		message->address_1 = this->messages[this->idx_read].address_1;
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8012f7c:	4619      	mov	r1, r3
 8012f7e:	687a      	ldr	r2, [r7, #4]
 8012f80:	460b      	mov	r3, r1
 8012f82:	00db      	lsls	r3, r3, #3
 8012f84:	440b      	add	r3, r1
 8012f86:	011b      	lsls	r3, r3, #4
 8012f88:	4413      	add	r3, r2
 8012f8a:	3301      	adds	r3, #1
 8012f8c:	781a      	ldrb	r2, [r3, #0]
 8012f8e:	683b      	ldr	r3, [r7, #0]
 8012f90:	705a      	strb	r2, [r3, #1]
		message->address_2 = this->messages[this->idx_read].address_2;
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8012f98:	4619      	mov	r1, r3
 8012f9a:	687a      	ldr	r2, [r7, #4]
 8012f9c:	460b      	mov	r3, r1
 8012f9e:	00db      	lsls	r3, r3, #3
 8012fa0:	440b      	add	r3, r1
 8012fa2:	011b      	lsls	r3, r3, #4
 8012fa4:	4413      	add	r3, r2
 8012fa6:	3302      	adds	r3, #2
 8012fa8:	781a      	ldrb	r2, [r3, #0]
 8012faa:	683b      	ldr	r3, [r7, #0]
 8012fac:	709a      	strb	r2, [r3, #2]
		message->address_3 = this->messages[this->idx_read].address_3;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8012fb4:	4619      	mov	r1, r3
 8012fb6:	687a      	ldr	r2, [r7, #4]
 8012fb8:	460b      	mov	r3, r1
 8012fba:	00db      	lsls	r3, r3, #3
 8012fbc:	440b      	add	r3, r1
 8012fbe:	011b      	lsls	r3, r3, #4
 8012fc0:	4413      	add	r3, r2
 8012fc2:	3303      	adds	r3, #3
 8012fc4:	781a      	ldrb	r2, [r3, #0]
 8012fc6:	683b      	ldr	r3, [r7, #0]
 8012fc8:	70da      	strb	r2, [r3, #3]
		message->flag = this->messages[this->idx_read].flag;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8012fd0:	4619      	mov	r1, r3
 8012fd2:	687a      	ldr	r2, [r7, #4]
 8012fd4:	460b      	mov	r3, r1
 8012fd6:	00db      	lsls	r3, r3, #3
 8012fd8:	440b      	add	r3, r1
 8012fda:	011b      	lsls	r3, r3, #4
 8012fdc:	4413      	add	r3, r2
 8012fde:	3304      	adds	r3, #4
 8012fe0:	781a      	ldrb	r2, [r3, #0]
 8012fe2:	683b      	ldr	r3, [r7, #0]
 8012fe4:	711a      	strb	r2, [r3, #4]
		message->cmd = this->messages[this->idx_read].cmd;
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8012fec:	4619      	mov	r1, r3
 8012fee:	687a      	ldr	r2, [r7, #4]
 8012ff0:	460b      	mov	r3, r1
 8012ff2:	00db      	lsls	r3, r3, #3
 8012ff4:	440b      	add	r3, r1
 8012ff6:	011b      	lsls	r3, r3, #4
 8012ff8:	4413      	add	r3, r2
 8012ffa:	781a      	ldrb	r2, [r3, #0]
 8012ffc:	683b      	ldr	r3, [r7, #0]
 8012ffe:	701a      	strb	r2, [r3, #0]
		message->len = this->messages[this->idx_read].len;
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8013006:	4619      	mov	r1, r3
 8013008:	687a      	ldr	r2, [r7, #4]
 801300a:	460b      	mov	r3, r1
 801300c:	00db      	lsls	r3, r3, #3
 801300e:	440b      	add	r3, r1
 8013010:	011b      	lsls	r3, r3, #4
 8013012:	4413      	add	r3, r2
 8013014:	330c      	adds	r3, #12
 8013016:	881a      	ldrh	r2, [r3, #0]
 8013018:	683b      	ldr	r3, [r7, #0]
 801301a:	819a      	strh	r2, [r3, #12]
		for (int i = 0; i<message->len; i++){
 801301c:	2300      	movs	r3, #0
 801301e:	60fb      	str	r3, [r7, #12]
 8013020:	683b      	ldr	r3, [r7, #0]
 8013022:	899b      	ldrh	r3, [r3, #12]
 8013024:	461a      	mov	r2, r3
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	4293      	cmp	r3, r2
 801302a:	da17      	bge.n	801305c <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage+0x10a>
			message->data_ptr[i] = this->messages[this->idx_read].data_ptr[i];
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8013032:	4619      	mov	r1, r3
 8013034:	687a      	ldr	r2, [r7, #4]
 8013036:	460b      	mov	r3, r1
 8013038:	00db      	lsls	r3, r3, #3
 801303a:	440b      	add	r3, r1
 801303c:	011b      	lsls	r3, r3, #4
 801303e:	4413      	add	r3, r2
 8013040:	3308      	adds	r3, #8
 8013042:	681a      	ldr	r2, [r3, #0]
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	441a      	add	r2, r3
 8013048:	683b      	ldr	r3, [r7, #0]
 801304a:	6899      	ldr	r1, [r3, #8]
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	440b      	add	r3, r1
 8013050:	7812      	ldrb	r2, [r2, #0]
 8013052:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i<message->len; i++){
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	3301      	adds	r3, #1
 8013058:	60fb      	str	r3, [r7, #12]
 801305a:	e7e1      	b.n	8013020 <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage+0xce>
		this->inc_read();
 801305c:	6878      	ldr	r0, [r7, #4]
 801305e:	f000 fa7e 	bl	801355e <_ZN22core_comm_MessageQueueILi10ELi128EE8inc_readEv>
		return 1;
 8013062:	2301      	movs	r3, #1
	}
 8013064:	4618      	mov	r0, r3
 8013066:	3710      	adds	r7, #16
 8013068:	46bd      	mov	sp, r7
 801306a:	bd80      	pop	{r7, pc}

0801306c <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageE4callES1_>:
	R call(A argument){
 801306c:	b580      	push	{r7, lr}
 801306e:	b082      	sub	sp, #8
 8013070:	af00      	add	r7, sp, #0
 8013072:	6078      	str	r0, [r7, #4]
 8013074:	6039      	str	r1, [r7, #0]
		return this->_fp(argument);
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	3308      	adds	r3, #8
 801307a:	6839      	ldr	r1, [r7, #0]
 801307c:	4618      	mov	r0, r3
 801307e:	f000 fa8f 	bl	80135a0 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEclES1_>
 8013082:	bf00      	nop
	}
 8013084:	3708      	adds	r7, #8
 8013086:	46bd      	mov	sp, r7
 8013088:	bd80      	pop	{r7, pc}

0801308a <_ZN30core_hardware_UART_callbacks_tC1Ev>:
typedef struct core_hardware_UART_callbacks_t {
 801308a:	b580      	push	{r7, lr}
 801308c:	b082      	sub	sp, #8
 801308e:	af00      	add	r7, sp, #0
 8013090:	6078      	str	r0, [r7, #4]
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	4618      	mov	r0, r3
 8013096:	f7ff fd75 	bl	8012b84 <_ZN19core_utils_CallbackIvvEC1Ev>
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	4618      	mov	r0, r3
 801309e:	3708      	adds	r7, #8
 80130a0:	46bd      	mov	sp, r7
 80130a2:	bd80      	pop	{r7, pc}

080130a4 <_ZN18core_hardware_UARTILi10ELi128EEC1Ev>:

template<int num_buffers, int size_buffers>
class core_hardware_UART: public UART {
public:

	core_hardware_UART() {
 80130a4:	b580      	push	{r7, lr}
 80130a6:	b082      	sub	sp, #8
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	4618      	mov	r0, r3
 80130b0:	f7ff fb58 	bl	8012764 <_ZN4UARTC1Ev>
 80130b4:	4a16      	ldr	r2, [pc, #88]	; (8013110 <_ZN18core_hardware_UARTILi10ELi128EEC1Ev+0x6c>)
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	601a      	str	r2, [r3, #0]
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	2200      	movs	r2, #0
 80130be:	711a      	strb	r2, [r3, #4]
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	3305      	adds	r3, #5
 80130c4:	4618      	mov	r0, r3
 80130c6:	f7ff fd8b 	bl	8012be0 <_ZN25core_hardware_UART_configC1Ev>
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	3310      	adds	r3, #16
 80130ce:	4618      	mov	r0, r3
 80130d0:	f000 fa73 	bl	80135ba <_ZN22core_utils_BufferQueueILi10ELi128EEC1Ev>
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 80130da:	4618      	mov	r0, r3
 80130dc:	f000 fa6d 	bl	80135ba <_ZN22core_utils_BufferQueueILi10ELi128EEC1Ev>
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 80130e6:	4618      	mov	r0, r3
 80130e8:	f7ff ffcf 	bl	801308a <_ZN30core_hardware_UART_callbacks_tC1Ev>
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	f603 33f4 	addw	r3, r3, #3060	; 0xbf4
 80130f2:	4618      	mov	r0, r3
 80130f4:	f000 fa85 	bl	8013602 <_ZN17core_utils_BufferILi128EEC1Ev>
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	f603 437c 	addw	r3, r3, #3196	; 0xc7c
 80130fe:	4618      	mov	r0, r3
 8013100:	f000 fa7f 	bl	8013602 <_ZN17core_utils_BufferILi128EEC1Ev>

	}
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	4618      	mov	r0, r3
 8013108:	3708      	adds	r7, #8
 801310a:	46bd      	mov	sp, r7
 801310c:	bd80      	pop	{r7, pc}
 801310e:	bf00      	nop
 8013110:	08020698 	.word	0x08020698

08013114 <_ZN19core_utils_CallbackIvPvEC1Ev>:
	core_utils_Callback() {
 8013114:	b580      	push	{r7, lr}
 8013116:	b082      	sub	sp, #8
 8013118:	af00      	add	r7, sp, #0
 801311a:	6078      	str	r0, [r7, #4]
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	4618      	mov	r0, r3
 8013120:	f7fe ffde 	bl	80120e0 <_ZN8CallbackC1Ev>
 8013124:	4a09      	ldr	r2, [pc, #36]	; (801314c <_ZN19core_utils_CallbackIvPvEC1Ev+0x38>)
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	601a      	str	r2, [r3, #0]
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	2200      	movs	r2, #0
 801312e:	711a      	strb	r2, [r3, #4]
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	3308      	adds	r3, #8
 8013134:	2100      	movs	r1, #0
 8013136:	4618      	mov	r0, r3
 8013138:	f000 f97d 	bl	8013436 <_ZN26core_utils_FunctionPointerIvPvEC1EPFvS0_E>
		this->registered = 0;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	2200      	movs	r2, #0
 8013140:	711a      	strb	r2, [r3, #4]
	}
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	4618      	mov	r0, r3
 8013146:	3708      	adds	r7, #8
 8013148:	46bd      	mov	sp, r7
 801314a:	bd80      	pop	{r7, pc}
 801314c:	080206cc 	.word	0x080206cc

08013150 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEC1EPFvS1_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8013150:	b580      	push	{r7, lr}
 8013152:	b082      	sub	sp, #8
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
 8013158:	6039      	str	r1, [r7, #0]
        attach(function);
 801315a:	6839      	ldr	r1, [r7, #0]
 801315c:	6878      	ldr	r0, [r7, #4]
 801315e:	f000 fa68 	bl	8013632 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE6attachEPFvS1_E>
    }
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	4618      	mov	r0, r3
 8013166:	3708      	adds	r7, #8
 8013168:	46bd      	mov	sp, r7
 801316a:	bd80      	pop	{r7, pc}

0801316c <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config>:
	void init(UART_HandleTypeDef *huart) {
		this->init(huart, core_hardware_uart_std_config);
	}

	/* ------------------------------------------------------------------------- */
	void init(UART_HandleTypeDef *huart, core_hardware_UART_config config) {
 801316c:	b580      	push	{r7, lr}
 801316e:	b084      	sub	sp, #16
 8013170:	af00      	add	r7, sp, #0
 8013172:	60f8      	str	r0, [r7, #12]
 8013174:	60b9      	str	r1, [r7, #8]
 8013176:	607a      	str	r2, [r7, #4]

		this->huart = huart;
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	68ba      	ldr	r2, [r7, #8]
 801317c:	60da      	str	r2, [r3, #12]

		this->config = config;
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	3305      	adds	r3, #5
 8013182:	1d3a      	adds	r2, r7, #4
 8013184:	6810      	ldr	r0, [r2, #0]
 8013186:	6018      	str	r0, [r3, #0]
		if (this->huart == NULL) {
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	68db      	ldr	r3, [r3, #12]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d102      	bne.n	8013196 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x2a>
			core_ErrorHandler(1);
 8013190:	2001      	movs	r0, #1
 8013192:	f009 fee2 	bl	801cf5a <_Z17core_ErrorHandleri>
		}
		HAL_UART_RegisterRxEventCallback(this->huart, uartRxCmpltDMA_callback);
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	68db      	ldr	r3, [r3, #12]
 801319a:	495a      	ldr	r1, [pc, #360]	; (8013304 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x198>)
 801319c:	4618      	mov	r0, r3
 801319e:	f7f7 f939 	bl	800a414 <HAL_UART_RegisterRxEventCallback>
		__HAL_DMA_DISABLE_IT(this->huart->hdmarx, DMA_IT_HT);
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	68db      	ldr	r3, [r3, #12]
 80131a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	4a56      	ldr	r2, [pc, #344]	; (8013308 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x19c>)
 80131ae:	4293      	cmp	r3, r2
 80131b0:	d077      	beq.n	80132a2 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	68db      	ldr	r3, [r3, #12]
 80131b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	4a53      	ldr	r2, [pc, #332]	; (801330c <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1a0>)
 80131be:	4293      	cmp	r3, r2
 80131c0:	d06f      	beq.n	80132a2 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	68db      	ldr	r3, [r3, #12]
 80131c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	4a50      	ldr	r2, [pc, #320]	; (8013310 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1a4>)
 80131ce:	4293      	cmp	r3, r2
 80131d0:	d067      	beq.n	80132a2 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	68db      	ldr	r3, [r3, #12]
 80131d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	4a4d      	ldr	r2, [pc, #308]	; (8013314 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1a8>)
 80131de:	4293      	cmp	r3, r2
 80131e0:	d05f      	beq.n	80132a2 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	68db      	ldr	r3, [r3, #12]
 80131e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	4a4a      	ldr	r2, [pc, #296]	; (8013318 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1ac>)
 80131ee:	4293      	cmp	r3, r2
 80131f0:	d057      	beq.n	80132a2 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	68db      	ldr	r3, [r3, #12]
 80131f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	4a47      	ldr	r2, [pc, #284]	; (801331c <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1b0>)
 80131fe:	4293      	cmp	r3, r2
 8013200:	d04f      	beq.n	80132a2 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	68db      	ldr	r3, [r3, #12]
 8013206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	4a44      	ldr	r2, [pc, #272]	; (8013320 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1b4>)
 801320e:	4293      	cmp	r3, r2
 8013210:	d047      	beq.n	80132a2 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	68db      	ldr	r3, [r3, #12]
 8013216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	4a41      	ldr	r2, [pc, #260]	; (8013324 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1b8>)
 801321e:	4293      	cmp	r3, r2
 8013220:	d03f      	beq.n	80132a2 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	68db      	ldr	r3, [r3, #12]
 8013226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	4a3e      	ldr	r2, [pc, #248]	; (8013328 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1bc>)
 801322e:	4293      	cmp	r3, r2
 8013230:	d037      	beq.n	80132a2 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	68db      	ldr	r3, [r3, #12]
 8013236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	4a3b      	ldr	r2, [pc, #236]	; (801332c <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1c0>)
 801323e:	4293      	cmp	r3, r2
 8013240:	d02f      	beq.n	80132a2 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	68db      	ldr	r3, [r3, #12]
 8013246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	4a38      	ldr	r2, [pc, #224]	; (8013330 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1c4>)
 801324e:	4293      	cmp	r3, r2
 8013250:	d027      	beq.n	80132a2 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	68db      	ldr	r3, [r3, #12]
 8013256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	4a35      	ldr	r2, [pc, #212]	; (8013334 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1c8>)
 801325e:	4293      	cmp	r3, r2
 8013260:	d01f      	beq.n	80132a2 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	68db      	ldr	r3, [r3, #12]
 8013266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	4a32      	ldr	r2, [pc, #200]	; (8013338 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1cc>)
 801326e:	4293      	cmp	r3, r2
 8013270:	d017      	beq.n	80132a2 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	68db      	ldr	r3, [r3, #12]
 8013276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	4a2f      	ldr	r2, [pc, #188]	; (801333c <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1d0>)
 801327e:	4293      	cmp	r3, r2
 8013280:	d00f      	beq.n	80132a2 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	68db      	ldr	r3, [r3, #12]
 8013286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	4a2c      	ldr	r2, [pc, #176]	; (8013340 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1d4>)
 801328e:	4293      	cmp	r3, r2
 8013290:	d007      	beq.n	80132a2 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	68db      	ldr	r3, [r3, #12]
 8013296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	4a29      	ldr	r2, [pc, #164]	; (8013344 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1d8>)
 801329e:	4293      	cmp	r3, r2
 80132a0:	d10e      	bne.n	80132c0 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x154>
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	68db      	ldr	r3, [r3, #12]
 80132a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	681a      	ldr	r2, [r3, #0]
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	68db      	ldr	r3, [r3, #12]
 80132b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	f022 0208 	bic.w	r2, r2, #8
 80132bc:	601a      	str	r2, [r3, #0]
 80132be:	e00d      	b.n	80132dc <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x170>
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	68db      	ldr	r3, [r3, #12]
 80132c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	681a      	ldr	r2, [r3, #0]
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	68db      	ldr	r3, [r3, #12]
 80132d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	f022 0204 	bic.w	r2, r2, #4
 80132da:	601a      	str	r2, [r3, #0]

		this->state = CORE_HARDWARE_UART_STATE_INIT;
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	2201      	movs	r2, #1
 80132e0:	711a      	strb	r2, [r3, #4]

		uarts[num_uarts] = this;
 80132e2:	4b19      	ldr	r3, [pc, #100]	; (8013348 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1dc>)
 80132e4:	781b      	ldrb	r3, [r3, #0]
 80132e6:	4619      	mov	r1, r3
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	4a18      	ldr	r2, [pc, #96]	; (801334c <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1e0>)
 80132ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		num_uarts++;
 80132f0:	4b15      	ldr	r3, [pc, #84]	; (8013348 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1dc>)
 80132f2:	781b      	ldrb	r3, [r3, #0]
 80132f4:	3301      	adds	r3, #1
 80132f6:	b2da      	uxtb	r2, r3
 80132f8:	4b13      	ldr	r3, [pc, #76]	; (8013348 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1dc>)
 80132fa:	701a      	strb	r2, [r3, #0]
	}
 80132fc:	bf00      	nop
 80132fe:	3710      	adds	r7, #16
 8013300:	46bd      	mov	sp, r7
 8013302:	bd80      	pop	{r7, pc}
 8013304:	0801b9e1 	.word	0x0801b9e1
 8013308:	40020010 	.word	0x40020010
 801330c:	40020028 	.word	0x40020028
 8013310:	40020040 	.word	0x40020040
 8013314:	40020058 	.word	0x40020058
 8013318:	40020070 	.word	0x40020070
 801331c:	40020088 	.word	0x40020088
 8013320:	400200a0 	.word	0x400200a0
 8013324:	400200b8 	.word	0x400200b8
 8013328:	40020410 	.word	0x40020410
 801332c:	40020428 	.word	0x40020428
 8013330:	40020440 	.word	0x40020440
 8013334:	40020458 	.word	0x40020458
 8013338:	40020470 	.word	0x40020470
 801333c:	40020488 	.word	0x40020488
 8013340:	400204a0 	.word	0x400204a0
 8013344:	400204b8 	.word	0x400204b8
 8013348:	2401dbe4 	.word	0x2401dbe4
 801334c:	2401dbd0 	.word	0x2401dbd0

08013350 <_ZN23core_comm_UartInterfaceILi10ELi128EE18_rxNotify_callbackEv>:

		this->_thread_id = osThreadNew(core_comm_SerialSocket_RTOS_Task, this,
				&task_attributes);
	}
	/* ------------------------------------------------------------- */
	void _rxNotify_callback() {
 8013350:	b580      	push	{r7, lr}
 8013352:	b084      	sub	sp, #16
 8013354:	af00      	add	r7, sp, #0
 8013356:	6078      	str	r0, [r7, #4]
		if (this->_task_id != NULL) {
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801335e:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8013362:	2b00      	cmp	r3, #0
 8013364:	d017      	beq.n	8013396 <_ZN23core_comm_UartInterfaceILi10ELi128EE18_rxNotify_callbackEv+0x46>
			BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8013366:	2300      	movs	r3, #0
 8013368:	60fb      	str	r3, [r7, #12]
			vTaskNotifyGiveFromISR(this->_task_id, &xHigherPriorityTaskWoken);
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013370:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8013374:	f107 020c 	add.w	r2, r7, #12
 8013378:	4611      	mov	r1, r2
 801337a:	4618      	mov	r0, r3
 801337c:	f7fd fd84 	bl	8010e88 <vTaskNotifyGiveFromISR>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d007      	beq.n	8013396 <_ZN23core_comm_UartInterfaceILi10ELi128EE18_rxNotify_callbackEv+0x46>
 8013386:	4b06      	ldr	r3, [pc, #24]	; (80133a0 <_ZN23core_comm_UartInterfaceILi10ELi128EE18_rxNotify_callbackEv+0x50>)
 8013388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801338c:	601a      	str	r2, [r3, #0]
 801338e:	f3bf 8f4f 	dsb	sy
 8013392:	f3bf 8f6f 	isb	sy
		}
	}
 8013396:	bf00      	nop
 8013398:	3710      	adds	r7, #16
 801339a:	46bd      	mov	sp, r7
 801339c:	bd80      	pop	{r7, pc}
 801339e:	bf00      	nop
 80133a0:	e000ed04 	.word	0xe000ed04

080133a4 <_ZN19core_utils_CallbackIvvEC1I23core_comm_UartInterfaceILi10ELi128EEEEPT_MS4_FvvE>:
	core_utils_Callback(T *object, R (T::*member)(void)) {
 80133a4:	b5b0      	push	{r4, r5, r7, lr}
 80133a6:	b08a      	sub	sp, #40	; 0x28
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	60f8      	str	r0, [r7, #12]
 80133ac:	60b9      	str	r1, [r7, #8]
 80133ae:	4639      	mov	r1, r7
 80133b0:	e881 000c 	stmia.w	r1, {r2, r3}
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	4618      	mov	r0, r3
 80133b8:	f7fe fe92 	bl	80120e0 <_ZN8CallbackC1Ev>
 80133bc:	4a12      	ldr	r2, [pc, #72]	; (8013408 <_ZN19core_utils_CallbackIvvEC1I23core_comm_UartInterfaceILi10ELi128EEEEPT_MS4_FvvE+0x64>)
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	601a      	str	r2, [r3, #0]
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	2200      	movs	r2, #0
 80133c6:	711a      	strb	r2, [r3, #4]
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	3308      	adds	r3, #8
 80133cc:	2100      	movs	r1, #0
 80133ce:	4618      	mov	r0, r3
 80133d0:	f7ff f891 	bl	80124f6 <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		_fp = core_utils_FunctionPointer<R,void>(object, member);
 80133d4:	f107 0010 	add.w	r0, r7, #16
 80133d8:	463b      	mov	r3, r7
 80133da:	cb0c      	ldmia	r3, {r2, r3}
 80133dc:	68b9      	ldr	r1, [r7, #8]
 80133de:	f000 f939 	bl	8013654 <_ZN26core_utils_FunctionPointerIvvEC1I23core_comm_UartInterfaceILi10ELi128EEEEPT_MS4_FvvE>
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	f103 0408 	add.w	r4, r3, #8
 80133e8:	f107 0510 	add.w	r5, r7, #16
 80133ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80133ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80133f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80133f4:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	2201      	movs	r2, #1
 80133fc:	711a      	strb	r2, [r3, #4]
	}
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	4618      	mov	r0, r3
 8013402:	3728      	adds	r7, #40	; 0x28
 8013404:	46bd      	mov	sp, r7
 8013406:	bdb0      	pop	{r4, r5, r7, pc}
 8013408:	08020640 	.word	0x08020640

0801340c <_ZN18core_hardware_UARTILi10ELi128EE16registerCallbackE24core_hardware_UART_CB_ID19core_utils_CallbackIvvE>:

		this->startReceiveDMA();
	}

	/* ------------------------------------------------------------------------- */
	void registerCallback(core_hardware_UART_CB_ID callback_id,
 801340c:	b580      	push	{r7, lr}
 801340e:	b084      	sub	sp, #16
 8013410:	af00      	add	r7, sp, #0
 8013412:	60f8      	str	r0, [r7, #12]
 8013414:	460b      	mov	r3, r1
 8013416:	607a      	str	r2, [r7, #4]
 8013418:	72fb      	strb	r3, [r7, #11]
			core_utils_Callback<void, void> callback) {
		if (callback_id == CORE_HARDWARE_UART_CB_RX) {
 801341a:	7afb      	ldrb	r3, [r7, #11]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d106      	bne.n	801342e <_ZN18core_hardware_UARTILi10ELi128EE16registerCallbackE24core_hardware_UART_CB_ID19core_utils_CallbackIvvE+0x22>
			this->_callbacks.rx = callback;
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8013426:	6879      	ldr	r1, [r7, #4]
 8013428:	4618      	mov	r0, r3
 801342a:	f7ff f973 	bl	8012714 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		}
	}
 801342e:	bf00      	nop
 8013430:	3710      	adds	r7, #16
 8013432:	46bd      	mov	sp, r7
 8013434:	bd80      	pop	{r7, pc}

08013436 <_ZN26core_utils_FunctionPointerIvPvEC1EPFvS0_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8013436:	b580      	push	{r7, lr}
 8013438:	b082      	sub	sp, #8
 801343a:	af00      	add	r7, sp, #0
 801343c:	6078      	str	r0, [r7, #4]
 801343e:	6039      	str	r1, [r7, #0]
        attach(function);
 8013440:	6839      	ldr	r1, [r7, #0]
 8013442:	6878      	ldr	r0, [r7, #4]
 8013444:	f000 f919 	bl	801367a <_ZN26core_utils_FunctionPointerIvPvE6attachEPFvS0_E>
    }
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	4618      	mov	r0, r3
 801344c:	3708      	adds	r7, #8
 801344e:	46bd      	mov	sp, r7
 8013450:	bd80      	pop	{r7, pc}

08013452 <_ZN26core_utils_FunctionPointerIvPvEC1I24TWIPR_UART_CommunicationEEPT_MS4_FvS0_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8013452:	b580      	push	{r7, lr}
 8013454:	b084      	sub	sp, #16
 8013456:	af00      	add	r7, sp, #0
 8013458:	60f8      	str	r0, [r7, #12]
 801345a:	60b9      	str	r1, [r7, #8]
 801345c:	4639      	mov	r1, r7
 801345e:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8013462:	463b      	mov	r3, r7
 8013464:	cb0c      	ldmia	r3, {r2, r3}
 8013466:	68b9      	ldr	r1, [r7, #8]
 8013468:	68f8      	ldr	r0, [r7, #12]
 801346a:	f000 f917 	bl	801369c <_ZN26core_utils_FunctionPointerIvPvE6attachI24TWIPR_UART_CommunicationEEvPT_MS4_FvS0_E>
    }
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	4618      	mov	r0, r3
 8013472:	3710      	adds	r7, #16
 8013474:	46bd      	mov	sp, r7
 8013476:	bd80      	pop	{r7, pc}

08013478 <_ZN18core_hardware_UARTILi10ELi128EE5startEv>:
	void start() {
 8013478:	b580      	push	{r7, lr}
 801347a:	b082      	sub	sp, #8
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
		if (this->state != CORE_HARDWARE_UART_STATE_INIT) {
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	791b      	ldrb	r3, [r3, #4]
 8013484:	2b01      	cmp	r3, #1
 8013486:	d002      	beq.n	801348e <_ZN18core_hardware_UARTILi10ELi128EE5startEv+0x16>
			core_ErrorHandler(2);
 8013488:	2002      	movs	r0, #2
 801348a:	f009 fd66 	bl	801cf5a <_Z17core_ErrorHandleri>
		if (this->config.mode == CORE_HARDWARE_UART_MODE_DMA) {
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	795b      	ldrb	r3, [r3, #5]
 8013492:	2b02      	cmp	r3, #2
 8013494:	d103      	bne.n	801349e <_ZN18core_hardware_UARTILi10ELi128EE5startEv+0x26>
			this->startReceiveDMA();
 8013496:	6878      	ldr	r0, [r7, #4]
 8013498:	f000 f91e 	bl	80136d8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv>
 801349c:	e002      	b.n	80134a4 <_ZN18core_hardware_UARTILi10ELi128EE5startEv+0x2c>
			core_ErrorHandler(3);
 801349e:	2003      	movs	r0, #3
 80134a0:	f009 fd5b 	bl	801cf5a <_Z17core_ErrorHandleri>
		this->state = CORE_HARDWARE_UART_STATE_RUN;
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	2202      	movs	r2, #2
 80134a8:	711a      	strb	r2, [r3, #4]
	}
 80134aa:	bf00      	nop
 80134ac:	3708      	adds	r7, #8
 80134ae:	46bd      	mov	sp, r7
 80134b0:	bd80      	pop	{r7, pc}
	...

080134b4 <_ZN23core_comm_UartInterfaceILi10ELi128EE10_startRTOSEv>:
	void _startRTOS() {
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b08c      	sub	sp, #48	; 0x30
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
		const osThreadAttr_t task_attributes =
 80134bc:	f107 030c 	add.w	r3, r7, #12
 80134c0:	2224      	movs	r2, #36	; 0x24
 80134c2:	2100      	movs	r1, #0
 80134c4:	4618      	mov	r0, r3
 80134c6:	f00a fc1a 	bl	801dcfe <memset>
 80134ca:	4b0c      	ldr	r3, [pc, #48]	; (80134fc <_ZN23core_comm_UartInterfaceILi10ELi128EE10_startRTOSEv+0x48>)
 80134cc:	60fb      	str	r3, [r7, #12]
 80134ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80134d2:	623b      	str	r3, [r7, #32]
 80134d4:	2328      	movs	r3, #40	; 0x28
 80134d6:	627b      	str	r3, [r7, #36]	; 0x24
		this->_thread_id = osThreadNew(core_comm_SerialSocket_RTOS_Task, this,
 80134d8:	f107 030c 	add.w	r3, r7, #12
 80134dc:	461a      	mov	r2, r3
 80134de:	6879      	ldr	r1, [r7, #4]
 80134e0:	4807      	ldr	r0, [pc, #28]	; (8013500 <_ZN23core_comm_UartInterfaceILi10ELi128EE10_startRTOSEv+0x4c>)
 80134e2:	f7fa fd40 	bl	800df66 <osThreadNew>
 80134e6:	4602      	mov	r2, r0
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80134ee:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
	}
 80134f2:	bf00      	nop
 80134f4:	3730      	adds	r7, #48	; 0x30
 80134f6:	46bd      	mov	sp, r7
 80134f8:	bd80      	pop	{r7, pc}
 80134fa:	bf00      	nop
 80134fc:	08020508 	.word	0x08020508
 8013500:	0801ae15 	.word	0x0801ae15

08013504 <_ZN18core_hardware_UARTILi10ELi128EE5resetEv>:
	void reset(){
 8013504:	b580      	push	{r7, lr}
 8013506:	b082      	sub	sp, #8
 8013508:	af00      	add	r7, sp, #0
 801350a:	6078      	str	r0, [r7, #4]
		HAL_UART_Abort(this->huart);
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	68db      	ldr	r3, [r3, #12]
 8013510:	4618      	mov	r0, r3
 8013512:	f7f7 f9b3 	bl	800a87c <HAL_UART_Abort>
		this->state = CORE_HARDWARE_UART_STATE_INIT;
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	2201      	movs	r2, #1
 801351a:	711a      	strb	r2, [r3, #4]
		this->start();
 801351c:	6878      	ldr	r0, [r7, #4]
 801351e:	f7ff ffab 	bl	8013478 <_ZN18core_hardware_UARTILi10ELi128EE5startEv>
	}
 8013522:	bf00      	nop
 8013524:	3708      	adds	r7, #8
 8013526:	46bd      	mov	sp, r7
 8013528:	bd80      	pop	{r7, pc}

0801352a <_ZN23core_comm_UartInterfaceILi10ELi128EE4sendEPht>:
	void send(uint8_t *buffer, uint16_t len) {
 801352a:	b580      	push	{r7, lr}
 801352c:	b084      	sub	sp, #16
 801352e:	af00      	add	r7, sp, #0
 8013530:	60f8      	str	r0, [r7, #12]
 8013532:	60b9      	str	r1, [r7, #8]
 8013534:	4613      	mov	r3, r2
 8013536:	80fb      	strh	r3, [r7, #6]
		if (this->status != CORE_COMM_SERIAL_SOCKET_STATE_RUN) {
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	7adb      	ldrb	r3, [r3, #11]
 801353c:	2b02      	cmp	r3, #2
 801353e:	d002      	beq.n	8013546 <_ZN23core_comm_UartInterfaceILi10ELi128EE4sendEPht+0x1c>
			core_ErrorHandler(1);
 8013540:	2001      	movs	r0, #1
 8013542:	f009 fd0a 	bl	801cf5a <_Z17core_ErrorHandleri>
		this->_uart.send(buffer, len);
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 801354c:	88fa      	ldrh	r2, [r7, #6]
 801354e:	68b9      	ldr	r1, [r7, #8]
 8013550:	4618      	mov	r0, r3
 8013552:	f000 f999 	bl	8013888 <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht>
	}
 8013556:	bf00      	nop
 8013558:	3710      	adds	r7, #16
 801355a:	46bd      	mov	sp, r7
 801355c:	bd80      	pop	{r7, pc}

0801355e <_ZN22core_comm_MessageQueueILi10ELi128EE8inc_readEv>:
	uint8_t inc_read() {
 801355e:	b480      	push	{r7}
 8013560:	b083      	sub	sp, #12
 8013562:	af00      	add	r7, sp, #0
 8013564:	6078      	str	r0, [r7, #4]
		this->idx_read++;
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 801356c:	3301      	adds	r3, #1
 801356e:	b2da      	uxtb	r2, r3
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	f883 25a0 	strb.w	r2, [r3, #1440]	; 0x5a0
		if (this->idx_read == this->len) {
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	f893 25a0 	ldrb.w	r2, [r3, #1440]	; 0x5a0
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	f893 35a3 	ldrb.w	r3, [r3, #1443]	; 0x5a3
 8013582:	429a      	cmp	r2, r3
 8013584:	d103      	bne.n	801358e <_ZN22core_comm_MessageQueueILi10ELi128EE8inc_readEv+0x30>
			this->idx_read = 0;
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	2200      	movs	r2, #0
 801358a:	f883 25a0 	strb.w	r2, [r3, #1440]	; 0x5a0
		return this->idx_read;
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
	}
 8013594:	4618      	mov	r0, r3
 8013596:	370c      	adds	r7, #12
 8013598:	46bd      	mov	sp, r7
 801359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801359e:	4770      	bx	lr

080135a0 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEclES1_>:
    R operator ()(A1 a) {
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b082      	sub	sp, #8
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	6078      	str	r0, [r7, #4]
 80135a8:	6039      	str	r1, [r7, #0]
        return call(a);
 80135aa:	6839      	ldr	r1, [r7, #0]
 80135ac:	6878      	ldr	r0, [r7, #4]
 80135ae:	f000 f9bc 	bl	801392a <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_>
 80135b2:	bf00      	nop
    }
 80135b4:	3708      	adds	r7, #8
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bd80      	pop	{r7, pc}

080135ba <_ZN22core_utils_BufferQueueILi10ELi128EEC1Ev>:
};

template<int num, int size>
class core_utils_BufferQueue {
public:
	core_utils_BufferQueue() {
 80135ba:	b5b0      	push	{r4, r5, r7, lr}
 80135bc:	b082      	sub	sp, #8
 80135be:	af00      	add	r7, sp, #0
 80135c0:	6078      	str	r0, [r7, #4]
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	3304      	adds	r3, #4
 80135c6:	2409      	movs	r4, #9
 80135c8:	461d      	mov	r5, r3
 80135ca:	2c00      	cmp	r4, #0
 80135cc:	db05      	blt.n	80135da <_ZN22core_utils_BufferQueueILi10ELi128EEC1Ev+0x20>
 80135ce:	4628      	mov	r0, r5
 80135d0:	f000 f817 	bl	8013602 <_ZN17core_utils_BufferILi128EEC1Ev>
 80135d4:	3588      	adds	r5, #136	; 0x88
 80135d6:	3c01      	subs	r4, #1
 80135d8:	e7f7      	b.n	80135ca <_ZN22core_utils_BufferQueueILi10ELi128EEC1Ev+0x10>
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	220a      	movs	r2, #10
 80135de:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554
		this->idx_read = 0;
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	2200      	movs	r2, #0
 80135e6:	f883 2556 	strb.w	r2, [r3, #1366]	; 0x556
		this->idx_write = 0;
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	2200      	movs	r2, #0
 80135ee:	f883 2555 	strb.w	r2, [r3, #1365]	; 0x555
		this->overflow = 0;
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	2200      	movs	r2, #0
 80135f6:	701a      	strb	r2, [r3, #0]
	}
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	4618      	mov	r0, r3
 80135fc:	3708      	adds	r7, #8
 80135fe:	46bd      	mov	sp, r7
 8013600:	bdb0      	pop	{r4, r5, r7, pc}

08013602 <_ZN17core_utils_BufferILi128EEC1Ev>:
	core_utils_Buffer<size>(){
 8013602:	b580      	push	{r7, lr}
 8013604:	b082      	sub	sp, #8
 8013606:	af00      	add	r7, sp, #0
 8013608:	6078      	str	r0, [r7, #4]
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	4618      	mov	r0, r3
 801360e:	f7ff f873 	bl	80126f8 <_ZN6BufferC1Ev>
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	3306      	adds	r3, #6
 8013616:	2280      	movs	r2, #128	; 0x80
 8013618:	2100      	movs	r1, #0
 801361a:	4618      	mov	r0, r3
 801361c:	f00a fb6f 	bl	801dcfe <memset>
		this->data_ptr = this->buffer;
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	1d9a      	adds	r2, r3, #6
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	601a      	str	r2, [r3, #0]
	}
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	4618      	mov	r0, r3
 801362c:	3708      	adds	r7, #8
 801362e:	46bd      	mov	sp, r7
 8013630:	bd80      	pop	{r7, pc}

08013632 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE6attachEPFvS1_E>:
    void attach(R (*function)(A1)) {
 8013632:	b480      	push	{r7}
 8013634:	b083      	sub	sp, #12
 8013636:	af00      	add	r7, sp, #0
 8013638:	6078      	str	r0, [r7, #4]
 801363a:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	683a      	ldr	r2, [r7, #0]
 8013640:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	2200      	movs	r2, #0
 8013646:	615a      	str	r2, [r3, #20]
    }
 8013648:	bf00      	nop
 801364a:	370c      	adds	r7, #12
 801364c:	46bd      	mov	sp, r7
 801364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013652:	4770      	bx	lr

08013654 <_ZN26core_utils_FunctionPointerIvvEC1I23core_comm_UartInterfaceILi10ELi128EEEEPT_MS4_FvvE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(void)) {
 8013654:	b580      	push	{r7, lr}
 8013656:	b084      	sub	sp, #16
 8013658:	af00      	add	r7, sp, #0
 801365a:	60f8      	str	r0, [r7, #12]
 801365c:	60b9      	str	r1, [r7, #8]
 801365e:	4639      	mov	r1, r7
 8013660:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8013664:	463b      	mov	r3, r7
 8013666:	cb0c      	ldmia	r3, {r2, r3}
 8013668:	68b9      	ldr	r1, [r7, #8]
 801366a:	68f8      	ldr	r0, [r7, #12]
 801366c:	f000 f984 	bl	8013978 <_ZN26core_utils_FunctionPointerIvvE6attachI23core_comm_UartInterfaceILi10ELi128EEEEvPT_MS4_FvvE>
    }
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	4618      	mov	r0, r3
 8013674:	3710      	adds	r7, #16
 8013676:	46bd      	mov	sp, r7
 8013678:	bd80      	pop	{r7, pc}

0801367a <_ZN26core_utils_FunctionPointerIvPvE6attachEPFvS0_E>:
    void attach(R (*function)(A1)) {
 801367a:	b480      	push	{r7}
 801367c:	b083      	sub	sp, #12
 801367e:	af00      	add	r7, sp, #0
 8013680:	6078      	str	r0, [r7, #4]
 8013682:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	683a      	ldr	r2, [r7, #0]
 8013688:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	2200      	movs	r2, #0
 801368e:	615a      	str	r2, [r3, #20]
    }
 8013690:	bf00      	nop
 8013692:	370c      	adds	r7, #12
 8013694:	46bd      	mov	sp, r7
 8013696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369a:	4770      	bx	lr

0801369c <_ZN26core_utils_FunctionPointerIvPvE6attachI24TWIPR_UART_CommunicationEEvPT_MS4_FvS0_E>:
    void attach(T *object, R (T::*member)(A1)) {
 801369c:	b480      	push	{r7}
 801369e:	b085      	sub	sp, #20
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	60f8      	str	r0, [r7, #12]
 80136a4:	60b9      	str	r1, [r7, #8]
 80136a6:	4639      	mov	r1, r7
 80136a8:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	68ba      	ldr	r2, [r7, #8]
 80136b0:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	3304      	adds	r3, #4
 80136b6:	461a      	mov	r2, r3
 80136b8:	463b      	mov	r3, r7
 80136ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80136be:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	4a03      	ldr	r2, [pc, #12]	; (80136d4 <_ZN26core_utils_FunctionPointerIvPvE6attachI24TWIPR_UART_CommunicationEEvPT_MS4_FvS0_E+0x38>)
 80136c6:	615a      	str	r2, [r3, #20]
    }
 80136c8:	bf00      	nop
 80136ca:	3714      	adds	r7, #20
 80136cc:	46bd      	mov	sp, r7
 80136ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d2:	4770      	bx	lr
 80136d4:	080139b5 	.word	0x080139b5

080136d8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv>:
	void startReceiveDMA() {
 80136d8:	b580      	push	{r7, lr}
 80136da:	b082      	sub	sp, #8
 80136dc:	af00      	add	r7, sp, #0
 80136de:	6078      	str	r0, [r7, #4]
		if (this->config.queues) {
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	7a1b      	ldrb	r3, [r3, #8]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	f000 80a8 	beq.w	801383a <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x162>
			HAL_UARTEx_ReceiveToIdle_DMA(this->huart,
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	68d8      	ldr	r0, [r3, #12]
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	f603 33fa 	addw	r3, r3, #3066	; 0xbfa
 80136f4:	2280      	movs	r2, #128	; 0x80
 80136f6:	4619      	mov	r1, r3
 80136f8:	f7fa facd 	bl	800dc96 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(this->huart->hdmarx, DMA_IT_HT);
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	68db      	ldr	r3, [r3, #12]
 8013700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	4a50      	ldr	r2, [pc, #320]	; (8013848 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x170>)
 8013708:	4293      	cmp	r3, r2
 801370a:	d077      	beq.n	80137fc <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	68db      	ldr	r3, [r3, #12]
 8013710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	4a4d      	ldr	r2, [pc, #308]	; (801384c <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x174>)
 8013718:	4293      	cmp	r3, r2
 801371a:	d06f      	beq.n	80137fc <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	68db      	ldr	r3, [r3, #12]
 8013720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	4a4a      	ldr	r2, [pc, #296]	; (8013850 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x178>)
 8013728:	4293      	cmp	r3, r2
 801372a:	d067      	beq.n	80137fc <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	68db      	ldr	r3, [r3, #12]
 8013730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	4a47      	ldr	r2, [pc, #284]	; (8013854 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x17c>)
 8013738:	4293      	cmp	r3, r2
 801373a:	d05f      	beq.n	80137fc <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	68db      	ldr	r3, [r3, #12]
 8013740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	4a44      	ldr	r2, [pc, #272]	; (8013858 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x180>)
 8013748:	4293      	cmp	r3, r2
 801374a:	d057      	beq.n	80137fc <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	68db      	ldr	r3, [r3, #12]
 8013750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	4a41      	ldr	r2, [pc, #260]	; (801385c <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x184>)
 8013758:	4293      	cmp	r3, r2
 801375a:	d04f      	beq.n	80137fc <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	68db      	ldr	r3, [r3, #12]
 8013760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	4a3e      	ldr	r2, [pc, #248]	; (8013860 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x188>)
 8013768:	4293      	cmp	r3, r2
 801376a:	d047      	beq.n	80137fc <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	68db      	ldr	r3, [r3, #12]
 8013770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	4a3b      	ldr	r2, [pc, #236]	; (8013864 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x18c>)
 8013778:	4293      	cmp	r3, r2
 801377a:	d03f      	beq.n	80137fc <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	68db      	ldr	r3, [r3, #12]
 8013780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	4a38      	ldr	r2, [pc, #224]	; (8013868 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x190>)
 8013788:	4293      	cmp	r3, r2
 801378a:	d037      	beq.n	80137fc <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	68db      	ldr	r3, [r3, #12]
 8013790:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	4a35      	ldr	r2, [pc, #212]	; (801386c <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x194>)
 8013798:	4293      	cmp	r3, r2
 801379a:	d02f      	beq.n	80137fc <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	68db      	ldr	r3, [r3, #12]
 80137a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	4a32      	ldr	r2, [pc, #200]	; (8013870 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x198>)
 80137a8:	4293      	cmp	r3, r2
 80137aa:	d027      	beq.n	80137fc <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	68db      	ldr	r3, [r3, #12]
 80137b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	4a2f      	ldr	r2, [pc, #188]	; (8013874 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x19c>)
 80137b8:	4293      	cmp	r3, r2
 80137ba:	d01f      	beq.n	80137fc <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	68db      	ldr	r3, [r3, #12]
 80137c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	4a2c      	ldr	r2, [pc, #176]	; (8013878 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x1a0>)
 80137c8:	4293      	cmp	r3, r2
 80137ca:	d017      	beq.n	80137fc <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	68db      	ldr	r3, [r3, #12]
 80137d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	4a29      	ldr	r2, [pc, #164]	; (801387c <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x1a4>)
 80137d8:	4293      	cmp	r3, r2
 80137da:	d00f      	beq.n	80137fc <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	68db      	ldr	r3, [r3, #12]
 80137e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	4a26      	ldr	r2, [pc, #152]	; (8013880 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x1a8>)
 80137e8:	4293      	cmp	r3, r2
 80137ea:	d007      	beq.n	80137fc <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	68db      	ldr	r3, [r3, #12]
 80137f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	4a23      	ldr	r2, [pc, #140]	; (8013884 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x1ac>)
 80137f8:	4293      	cmp	r3, r2
 80137fa:	d10f      	bne.n	801381c <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x144>
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	68db      	ldr	r3, [r3, #12]
 8013800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	681a      	ldr	r2, [r3, #0]
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	68db      	ldr	r3, [r3, #12]
 801380c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	f022 0208 	bic.w	r2, r2, #8
 8013816:	601a      	str	r2, [r3, #0]
 8013818:	bf00      	nop
	}
 801381a:	e011      	b.n	8013840 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x168>
			__HAL_DMA_DISABLE_IT(this->huart->hdmarx, DMA_IT_HT);
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	68db      	ldr	r3, [r3, #12]
 8013820:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	681a      	ldr	r2, [r3, #0]
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	68db      	ldr	r3, [r3, #12]
 801382c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	f022 0204 	bic.w	r2, r2, #4
 8013836:	601a      	str	r2, [r3, #0]
	}
 8013838:	e002      	b.n	8013840 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x168>
			core_ErrorHandler(CORE_ERROR_NOT_IMPLEMENTED);
 801383a:	2005      	movs	r0, #5
 801383c:	f009 fb8d 	bl	801cf5a <_Z17core_ErrorHandleri>
	}
 8013840:	bf00      	nop
 8013842:	3708      	adds	r7, #8
 8013844:	46bd      	mov	sp, r7
 8013846:	bd80      	pop	{r7, pc}
 8013848:	40020010 	.word	0x40020010
 801384c:	40020028 	.word	0x40020028
 8013850:	40020040 	.word	0x40020040
 8013854:	40020058 	.word	0x40020058
 8013858:	40020070 	.word	0x40020070
 801385c:	40020088 	.word	0x40020088
 8013860:	400200a0 	.word	0x400200a0
 8013864:	400200b8 	.word	0x400200b8
 8013868:	40020410 	.word	0x40020410
 801386c:	40020428 	.word	0x40020428
 8013870:	40020440 	.word	0x40020440
 8013874:	40020458 	.word	0x40020458
 8013878:	40020470 	.word	0x40020470
 801387c:	40020488 	.word	0x40020488
 8013880:	400204a0 	.word	0x400204a0
 8013884:	400204b8 	.word	0x400204b8

08013888 <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht>:
	void send(uint8_t *data, uint16_t len) {
 8013888:	b580      	push	{r7, lr}
 801388a:	b086      	sub	sp, #24
 801388c:	af00      	add	r7, sp, #0
 801388e:	60f8      	str	r0, [r7, #12]
 8013890:	60b9      	str	r1, [r7, #8]
 8013892:	4613      	mov	r3, r2
 8013894:	80fb      	strh	r3, [r7, #6]
		if (this->state != CORE_HARDWARE_UART_STATE_RUN) {
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	791b      	ldrb	r3, [r3, #4]
 801389a:	2b02      	cmp	r3, #2
 801389c:	d002      	beq.n	80138a4 <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht+0x1c>
			core_ErrorHandler(4);
 801389e:	2004      	movs	r0, #4
 80138a0:	f009 fb5b 	bl	801cf5a <_Z17core_ErrorHandleri>
		if (this->config.mode != CORE_HARDWARE_UART_MODE_DMA
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	795b      	ldrb	r3, [r3, #5]
 80138a8:	2b02      	cmp	r3, #2
 80138aa:	d006      	beq.n	80138ba <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht+0x32>
				&& this->config.queues != 1) {
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	7a1b      	ldrb	r3, [r3, #8]
 80138b0:	2b01      	cmp	r3, #1
 80138b2:	d002      	beq.n	80138ba <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht+0x32>
			core_ErrorHandler(5);
 80138b4:	2005      	movs	r0, #5
 80138b6:	f009 fb50 	bl	801cf5a <_Z17core_ErrorHandleri>
		if (this->config.cobs_encode_tx) {
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	79db      	ldrb	r3, [r3, #7]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d022      	beq.n	8013908 <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht+0x80>
			uint8_t len_encode = cobsEncode(data, len, this->_tx_buffer.buffer);
 80138c2:	88fb      	ldrh	r3, [r7, #6]
 80138c4:	b2d9      	uxtb	r1, r3
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	f603 4382 	addw	r3, r3, #3202	; 0xc82
 80138cc:	461a      	mov	r2, r3
 80138ce:	68b8      	ldr	r0, [r7, #8]
 80138d0:	f009 fa5b 	bl	801cd8a <_Z10cobsEncodePhhS_>
 80138d4:	4603      	mov	r3, r0
 80138d6:	75fb      	strb	r3, [r7, #23]
			this->_tx_buffer.buffer[len_encode] = 0x00;
 80138d8:	7dfb      	ldrb	r3, [r7, #23]
 80138da:	68fa      	ldr	r2, [r7, #12]
 80138dc:	4413      	add	r3, r2
 80138de:	2200      	movs	r2, #0
 80138e0:	f883 2c82 	strb.w	r2, [r3, #3202]	; 0xc82
			this->_tx_buffer.len = len_encode + 1;
 80138e4:	7dfb      	ldrb	r3, [r7, #23]
 80138e6:	b29b      	uxth	r3, r3
 80138e8:	3301      	adds	r3, #1
 80138ea:	b29a      	uxth	r2, r3
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	f8a3 2c80 	strh.w	r2, [r3, #3200]	; 0xc80
			this->tx_queue.write(&this->_tx_buffer);
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	f503 62ad 	add.w	r2, r3, #1384	; 0x568
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	f603 437c 	addw	r3, r3, #3196	; 0xc7c
 80138fe:	4619      	mov	r1, r3
 8013900:	4610      	mov	r0, r2
 8013902:	f000 f881 	bl	8013a08 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEP6Buffer>
 8013906:	e009      	b.n	801391c <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht+0x94>
			this->tx_queue.write(data, (uint8_t) len);
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 801390e:	88fa      	ldrh	r2, [r7, #6]
 8013910:	b2d2      	uxtb	r2, r2
 8013912:	b292      	uxth	r2, r2
 8013914:	68b9      	ldr	r1, [r7, #8]
 8013916:	4618      	mov	r0, r3
 8013918:	f000 f8b2 	bl	8013a80 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEPht>
		this->flushTx();
 801391c:	68f8      	ldr	r0, [r7, #12]
 801391e:	f000 f8e8 	bl	8013af2 <_ZN18core_hardware_UARTILi10ELi128EE7flushTxEv>
	}
 8013922:	bf00      	nop
 8013924:	3718      	adds	r7, #24
 8013926:	46bd      	mov	sp, r7
 8013928:	bd80      	pop	{r7, pc}

0801392a <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_>:
    R call(A1 a) {
 801392a:	b580      	push	{r7, lr}
 801392c:	b082      	sub	sp, #8
 801392e:	af00      	add	r7, sp, #0
 8013930:	6078      	str	r0, [r7, #4]
 8013932:	6039      	str	r1, [r7, #0]
        if (_membercaller == 0 && _p.function) {
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	695b      	ldr	r3, [r3, #20]
 8013938:	2b00      	cmp	r3, #0
 801393a:	d108      	bne.n	801394e <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x24>
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d004      	beq.n	801394e <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x24>
           return _p.function(a);
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	6838      	ldr	r0, [r7, #0]
 801394a:	4798      	blx	r3
 801394c:	e011      	b.n	8013972 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x48>
        } else if (_membercaller && _p.object) {
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	695b      	ldr	r3, [r3, #20]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d00c      	beq.n	8013970 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x46>
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d008      	beq.n	8013970 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x46>
           return _membercaller(_p.object, _member, a);
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	695b      	ldr	r3, [r3, #20]
 8013962:	687a      	ldr	r2, [r7, #4]
 8013964:	6810      	ldr	r0, [r2, #0]
 8013966:	687a      	ldr	r2, [r7, #4]
 8013968:	1d11      	adds	r1, r2, #4
 801396a:	683a      	ldr	r2, [r7, #0]
 801396c:	4798      	blx	r3
 801396e:	e000      	b.n	8013972 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x48>
        return (R)0;
 8013970:	bf00      	nop
    }
 8013972:	3708      	adds	r7, #8
 8013974:	46bd      	mov	sp, r7
 8013976:	bd80      	pop	{r7, pc}

08013978 <_ZN26core_utils_FunctionPointerIvvE6attachI23core_comm_UartInterfaceILi10ELi128EEEEvPT_MS4_FvvE>:
    void attach(T *object, R (T::*member)(void)) {
 8013978:	b480      	push	{r7}
 801397a:	b085      	sub	sp, #20
 801397c:	af00      	add	r7, sp, #0
 801397e:	60f8      	str	r0, [r7, #12]
 8013980:	60b9      	str	r1, [r7, #8]
 8013982:	4639      	mov	r1, r7
 8013984:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	68ba      	ldr	r2, [r7, #8]
 801398c:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(void)>(_member) = member;
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	3304      	adds	r3, #4
 8013992:	461a      	mov	r2, r3
 8013994:	463b      	mov	r3, r7
 8013996:	e893 0003 	ldmia.w	r3, {r0, r1}
 801399a:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	4a03      	ldr	r2, [pc, #12]	; (80139b0 <_ZN26core_utils_FunctionPointerIvvE6attachI23core_comm_UartInterfaceILi10ELi128EEEEvPT_MS4_FvvE+0x38>)
 80139a2:	615a      	str	r2, [r3, #20]
    }
 80139a4:	bf00      	nop
 80139a6:	3714      	adds	r7, #20
 80139a8:	46bd      	mov	sp, r7
 80139aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ae:	4770      	bx	lr
 80139b0:	08013b21 	.word	0x08013b21

080139b4 <_ZN26core_utils_FunctionPointerIvPvE12membercallerI24TWIPR_UART_CommunicationEEvS0_PjS0_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b086      	sub	sp, #24
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	60f8      	str	r0, [r7, #12]
 80139bc:	60b9      	str	r1, [r7, #8]
 80139be:	607a      	str	r2, [r7, #4]
        T* o = static_cast<T*>(object);
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 80139c4:	68bb      	ldr	r3, [r7, #8]
 80139c6:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 80139c8:	693b      	ldr	r3, [r7, #16]
 80139ca:	685b      	ldr	r3, [r3, #4]
 80139cc:	105b      	asrs	r3, r3, #1
 80139ce:	461a      	mov	r2, r3
 80139d0:	697b      	ldr	r3, [r7, #20]
 80139d2:	1898      	adds	r0, r3, r2
 80139d4:	693b      	ldr	r3, [r7, #16]
 80139d6:	685b      	ldr	r3, [r3, #4]
 80139d8:	f003 0301 	and.w	r3, r3, #1
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d00b      	beq.n	80139f8 <_ZN26core_utils_FunctionPointerIvPvE12membercallerI24TWIPR_UART_CommunicationEEvS0_PjS0_+0x44>
 80139e0:	693b      	ldr	r3, [r7, #16]
 80139e2:	685b      	ldr	r3, [r3, #4]
 80139e4:	105b      	asrs	r3, r3, #1
 80139e6:	461a      	mov	r2, r3
 80139e8:	697b      	ldr	r3, [r7, #20]
 80139ea:	4413      	add	r3, r2
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	693a      	ldr	r2, [r7, #16]
 80139f0:	6812      	ldr	r2, [r2, #0]
 80139f2:	4413      	add	r3, r2
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	e001      	b.n	80139fc <_ZN26core_utils_FunctionPointerIvPvE12membercallerI24TWIPR_UART_CommunicationEEvS0_PjS0_+0x48>
 80139f8:	693b      	ldr	r3, [r7, #16]
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	6879      	ldr	r1, [r7, #4]
 80139fe:	4798      	blx	r3
 8013a00:	bf00      	nop
    }
 8013a02:	3718      	adds	r7, #24
 8013a04:	46bd      	mov	sp, r7
 8013a06:	bd80      	pop	{r7, pc}

08013a08 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEP6Buffer>:

	uint8_t overflow;

	uint8_t write(Buffer *buffer) {
 8013a08:	b580      	push	{r7, lr}
 8013a0a:	b084      	sub	sp, #16
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]
 8013a10:	6039      	str	r1, [r7, #0]
		for (int i = 0; i < buffer->len; i++) {
 8013a12:	2300      	movs	r3, #0
 8013a14:	60fb      	str	r3, [r7, #12]
 8013a16:	683b      	ldr	r3, [r7, #0]
 8013a18:	889b      	ldrh	r3, [r3, #4]
 8013a1a:	461a      	mov	r2, r3
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	4293      	cmp	r3, r2
 8013a20:	da17      	bge.n	8013a52 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEP6Buffer+0x4a>
			this->buffers[this->idx_write].data_ptr[i] = buffer->data_ptr[i];
 8013a22:	683b      	ldr	r3, [r7, #0]
 8013a24:	681a      	ldr	r2, [r3, #0]
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	441a      	add	r2, r3
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	f893 3555 	ldrb.w	r3, [r3, #1365]	; 0x555
 8013a30:	4618      	mov	r0, r3
 8013a32:	6879      	ldr	r1, [r7, #4]
 8013a34:	4603      	mov	r3, r0
 8013a36:	011b      	lsls	r3, r3, #4
 8013a38:	4403      	add	r3, r0
 8013a3a:	00db      	lsls	r3, r3, #3
 8013a3c:	440b      	add	r3, r1
 8013a3e:	3304      	adds	r3, #4
 8013a40:	6819      	ldr	r1, [r3, #0]
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	440b      	add	r3, r1
 8013a46:	7812      	ldrb	r2, [r2, #0]
 8013a48:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < buffer->len; i++) {
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	3301      	adds	r3, #1
 8013a4e:	60fb      	str	r3, [r7, #12]
 8013a50:	e7e1      	b.n	8013a16 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEP6Buffer+0xe>
		}

		this->buffers[this->idx_write].len = buffer->len;
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	f893 3555 	ldrb.w	r3, [r3, #1365]	; 0x555
 8013a58:	4619      	mov	r1, r3
 8013a5a:	683b      	ldr	r3, [r7, #0]
 8013a5c:	8898      	ldrh	r0, [r3, #4]
 8013a5e:	687a      	ldr	r2, [r7, #4]
 8013a60:	460b      	mov	r3, r1
 8013a62:	011b      	lsls	r3, r3, #4
 8013a64:	440b      	add	r3, r1
 8013a66:	00db      	lsls	r3, r3, #3
 8013a68:	4413      	add	r3, r2
 8013a6a:	3308      	adds	r3, #8
 8013a6c:	4602      	mov	r2, r0
 8013a6e:	801a      	strh	r2, [r3, #0]
		return this->inc_write();
 8013a70:	6878      	ldr	r0, [r7, #4]
 8013a72:	f000 f87e 	bl	8013b72 <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv>
 8013a76:	4603      	mov	r3, r0
	}
 8013a78:	4618      	mov	r0, r3
 8013a7a:	3710      	adds	r7, #16
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd80      	pop	{r7, pc}

08013a80 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEPht>:

	uint8_t write(uint8_t *buffer, uint16_t len) {
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b086      	sub	sp, #24
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	60f8      	str	r0, [r7, #12]
 8013a88:	60b9      	str	r1, [r7, #8]
 8013a8a:	4613      	mov	r3, r2
 8013a8c:	80fb      	strh	r3, [r7, #6]
		for (int i = 0; i < len; i++) {
 8013a8e:	2300      	movs	r3, #0
 8013a90:	617b      	str	r3, [r7, #20]
 8013a92:	88fb      	ldrh	r3, [r7, #6]
 8013a94:	697a      	ldr	r2, [r7, #20]
 8013a96:	429a      	cmp	r2, r3
 8013a98:	da16      	bge.n	8013ac8 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEPht+0x48>
			this->buffers[this->idx_write].data_ptr[i] = buffer[i];
 8013a9a:	697b      	ldr	r3, [r7, #20]
 8013a9c:	68ba      	ldr	r2, [r7, #8]
 8013a9e:	441a      	add	r2, r3
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	f893 3555 	ldrb.w	r3, [r3, #1365]	; 0x555
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	68f9      	ldr	r1, [r7, #12]
 8013aaa:	4603      	mov	r3, r0
 8013aac:	011b      	lsls	r3, r3, #4
 8013aae:	4403      	add	r3, r0
 8013ab0:	00db      	lsls	r3, r3, #3
 8013ab2:	440b      	add	r3, r1
 8013ab4:	3304      	adds	r3, #4
 8013ab6:	6819      	ldr	r1, [r3, #0]
 8013ab8:	697b      	ldr	r3, [r7, #20]
 8013aba:	440b      	add	r3, r1
 8013abc:	7812      	ldrb	r2, [r2, #0]
 8013abe:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < len; i++) {
 8013ac0:	697b      	ldr	r3, [r7, #20]
 8013ac2:	3301      	adds	r3, #1
 8013ac4:	617b      	str	r3, [r7, #20]
 8013ac6:	e7e4      	b.n	8013a92 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEPht+0x12>
		}
		this->buffers[this->idx_write].len = len;
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	f893 3555 	ldrb.w	r3, [r3, #1365]	; 0x555
 8013ace:	4619      	mov	r1, r3
 8013ad0:	68fa      	ldr	r2, [r7, #12]
 8013ad2:	460b      	mov	r3, r1
 8013ad4:	011b      	lsls	r3, r3, #4
 8013ad6:	440b      	add	r3, r1
 8013ad8:	00db      	lsls	r3, r3, #3
 8013ada:	4413      	add	r3, r2
 8013adc:	3308      	adds	r3, #8
 8013ade:	88fa      	ldrh	r2, [r7, #6]
 8013ae0:	801a      	strh	r2, [r3, #0]
		return this->inc_write();
 8013ae2:	68f8      	ldr	r0, [r7, #12]
 8013ae4:	f000 f845 	bl	8013b72 <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv>
 8013ae8:	4603      	mov	r3, r0
	}
 8013aea:	4618      	mov	r0, r3
 8013aec:	3718      	adds	r7, #24
 8013aee:	46bd      	mov	sp, r7
 8013af0:	bd80      	pop	{r7, pc}

08013af2 <_ZN18core_hardware_UARTILi10ELi128EE7flushTxEv>:
	uint8_t _tx_encode_buf[size_buffers + 10];
	core_utils_Buffer<size_buffers> _rx_buffer;
	core_utils_Buffer<size_buffers> _tx_buffer;

	/* ------------------------------------------------------------------------- */
	void flushTx() {
 8013af2:	b580      	push	{r7, lr}
 8013af4:	b082      	sub	sp, #8
 8013af6:	af00      	add	r7, sp, #0
 8013af8:	6078      	str	r0, [r7, #4]
		while (!(this->huart->gState == HAL_UART_STATE_READY)) {
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	68db      	ldr	r3, [r3, #12]
 8013afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013b02:	2b20      	cmp	r3, #32
 8013b04:	bf14      	ite	ne
 8013b06:	2301      	movne	r3, #1
 8013b08:	2300      	moveq	r3, #0
 8013b0a:	b2db      	uxtb	r3, r3
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d000      	beq.n	8013b12 <_ZN18core_hardware_UARTILi10ELi128EE7flushTxEv+0x20>
 8013b10:	e7f3      	b.n	8013afa <_ZN18core_hardware_UARTILi10ELi128EE7flushTxEv+0x8>

		}
		this->sendNextBuffer();
 8013b12:	6878      	ldr	r0, [r7, #4]
 8013b14:	f000 f859 	bl	8013bca <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv>
	}
 8013b18:	bf00      	nop
 8013b1a:	3708      	adds	r7, #8
 8013b1c:	46bd      	mov	sp, r7
 8013b1e:	bd80      	pop	{r7, pc}

08013b20 <_ZN26core_utils_FunctionPointerIvvE12membercallerI23core_comm_UartInterfaceILi10ELi128EEEEvPvPj>:
    static R membercaller(void *object, uintptr_t *member) {
 8013b20:	b580      	push	{r7, lr}
 8013b22:	b084      	sub	sp, #16
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	6078      	str	r0, [r7, #4]
 8013b28:	6039      	str	r1, [r7, #0]
        T* o = static_cast<T*>(object);
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	60fb      	str	r3, [r7, #12]
        R (T::**m)(void) = reinterpret_cast<R (T::**)(void)>(member);
 8013b2e:	683b      	ldr	r3, [r7, #0]
 8013b30:	60bb      	str	r3, [r7, #8]
        return (o->**m)();
 8013b32:	68bb      	ldr	r3, [r7, #8]
 8013b34:	685b      	ldr	r3, [r3, #4]
 8013b36:	105b      	asrs	r3, r3, #1
 8013b38:	461a      	mov	r2, r3
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	1899      	adds	r1, r3, r2
 8013b3e:	68bb      	ldr	r3, [r7, #8]
 8013b40:	685b      	ldr	r3, [r3, #4]
 8013b42:	f003 0301 	and.w	r3, r3, #1
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d00b      	beq.n	8013b62 <_ZN26core_utils_FunctionPointerIvvE12membercallerI23core_comm_UartInterfaceILi10ELi128EEEEvPvPj+0x42>
 8013b4a:	68bb      	ldr	r3, [r7, #8]
 8013b4c:	685b      	ldr	r3, [r3, #4]
 8013b4e:	105b      	asrs	r3, r3, #1
 8013b50:	461a      	mov	r2, r3
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	4413      	add	r3, r2
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	68ba      	ldr	r2, [r7, #8]
 8013b5a:	6812      	ldr	r2, [r2, #0]
 8013b5c:	4413      	add	r3, r2
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	e001      	b.n	8013b66 <_ZN26core_utils_FunctionPointerIvvE12membercallerI23core_comm_UartInterfaceILi10ELi128EEEEvPvPj+0x46>
 8013b62:	68bb      	ldr	r3, [r7, #8]
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	4608      	mov	r0, r1
 8013b68:	4798      	blx	r3
 8013b6a:	bf00      	nop
    }
 8013b6c:	3710      	adds	r7, #16
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	bd80      	pop	{r7, pc}

08013b72 <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv>:
	core_utils_Buffer<size> buffers[num];  // Array of buffers
	const uint8_t num_buffers = num; // Number of buffers for the queue
	uint8_t idx_write;
	uint8_t idx_read;

	uint8_t inc_write() {
 8013b72:	b480      	push	{r7}
 8013b74:	b083      	sub	sp, #12
 8013b76:	af00      	add	r7, sp, #0
 8013b78:	6078      	str	r0, [r7, #4]
		this->idx_write++;
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	f893 3555 	ldrb.w	r3, [r3, #1365]	; 0x555
 8013b80:	3301      	adds	r3, #1
 8013b82:	b2da      	uxtb	r2, r3
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	f883 2555 	strb.w	r2, [r3, #1365]	; 0x555

		if (this->idx_write == this->num_buffers) {
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	f893 2555 	ldrb.w	r2, [r3, #1365]	; 0x555
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 8013b96:	429a      	cmp	r2, r3
 8013b98:	d103      	bne.n	8013ba2 <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv+0x30>
			this->idx_write = 0;
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	2200      	movs	r2, #0
 8013b9e:	f883 2555 	strb.w	r2, [r3, #1365]	; 0x555
		}
		if (this->idx_write == this->idx_read) {
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	f893 2555 	ldrb.w	r2, [r3, #1365]	; 0x555
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	f893 3556 	ldrb.w	r3, [r3, #1366]	; 0x556
 8013bae:	429a      	cmp	r2, r3
 8013bb0:	d104      	bne.n	8013bbc <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv+0x4a>
			this->overflow = 1;
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	2201      	movs	r2, #1
 8013bb6:	701a      	strb	r2, [r3, #0]
			return 0;
 8013bb8:	2300      	movs	r3, #0
 8013bba:	e000      	b.n	8013bbe <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv+0x4c>
		} else {
			return 1;
 8013bbc:	2301      	movs	r3, #1
		}
	}
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	370c      	adds	r7, #12
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc8:	4770      	bx	lr

08013bca <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv>:

	/* ------------------------------------------------------------------------- */
	void sendNextBuffer() {
 8013bca:	b580      	push	{r7, lr}
 8013bcc:	b084      	sub	sp, #16
 8013bce:	af00      	add	r7, sp, #0
 8013bd0:	6078      	str	r0, [r7, #4]
		if (!this->tx_queue.available()) {
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f000 f82f 	bl	8013c3c <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv>
 8013bde:	4603      	mov	r3, r0
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	bf0c      	ite	eq
 8013be4:	2301      	moveq	r3, #1
 8013be6:	2300      	movne	r3, #0
 8013be8:	b2db      	uxtb	r3, r3
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d120      	bne.n	8013c30 <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv+0x66>
			return;
		}

		if (this->huart->gState != HAL_UART_STATE_READY) {
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	68db      	ldr	r3, [r3, #12]
 8013bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013bf6:	2b20      	cmp	r3, #32
 8013bf8:	bf14      	ite	ne
 8013bfa:	2301      	movne	r3, #1
 8013bfc:	2300      	moveq	r3, #0
 8013bfe:	b2db      	uxtb	r3, r3
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d117      	bne.n	8013c34 <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv+0x6a>
			return;
		}

		uint8_t *buffer = NULL;
 8013c04:	2300      	movs	r3, #0
 8013c06:	60bb      	str	r3, [r7, #8]
		uint8_t len = this->tx_queue.read(&buffer);
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8013c0e:	f107 0208 	add.w	r2, r7, #8
 8013c12:	4611      	mov	r1, r2
 8013c14:	4618      	mov	r0, r3
 8013c16:	f000 f838 	bl	8013c8a <_ZN22core_utils_BufferQueueILi10ELi128EE4readEPPh>
 8013c1a:	4603      	mov	r3, r0
 8013c1c:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit_DMA(this->huart, buffer, len);
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	68db      	ldr	r3, [r3, #12]
 8013c22:	68b9      	ldr	r1, [r7, #8]
 8013c24:	7bfa      	ldrb	r2, [r7, #15]
 8013c26:	b292      	uxth	r2, r2
 8013c28:	4618      	mov	r0, r3
 8013c2a:	f7f6 fd11 	bl	800a650 <HAL_UART_Transmit_DMA>
 8013c2e:	e002      	b.n	8013c36 <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv+0x6c>
			return;
 8013c30:	bf00      	nop
 8013c32:	e000      	b.n	8013c36 <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv+0x6c>
			return;
 8013c34:	bf00      	nop
	}
 8013c36:	3710      	adds	r7, #16
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	bd80      	pop	{r7, pc}

08013c3c <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv>:
	int8_t available() {
 8013c3c:	b480      	push	{r7}
 8013c3e:	b085      	sub	sp, #20
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
		if (this->overflow) {
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	781b      	ldrb	r3, [r3, #0]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d002      	beq.n	8013c52 <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv+0x16>
			return -1;
 8013c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8013c50:	e015      	b.n	8013c7e <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv+0x42>
		int8_t available = this->idx_write - this->idx_read;
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	f893 2555 	ldrb.w	r2, [r3, #1365]	; 0x555
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	f893 3556 	ldrb.w	r3, [r3, #1366]	; 0x556
 8013c5e:	1ad3      	subs	r3, r2, r3
 8013c60:	b2db      	uxtb	r3, r3
 8013c62:	73fb      	strb	r3, [r7, #15]
		if (available < 0) {
 8013c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	da06      	bge.n	8013c7a <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv+0x3e>
			available += this->num_buffers;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	f893 2554 	ldrb.w	r2, [r3, #1364]	; 0x554
 8013c72:	7bfb      	ldrb	r3, [r7, #15]
 8013c74:	4413      	add	r3, r2
 8013c76:	b2db      	uxtb	r3, r3
 8013c78:	73fb      	strb	r3, [r7, #15]
		return available;
 8013c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
	}
 8013c7e:	4618      	mov	r0, r3
 8013c80:	3714      	adds	r7, #20
 8013c82:	46bd      	mov	sp, r7
 8013c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c88:	4770      	bx	lr

08013c8a <_ZN22core_utils_BufferQueueILi10ELi128EE4readEPPh>:
	uint8_t read(uint8_t **buffer) {
 8013c8a:	b580      	push	{r7, lr}
 8013c8c:	b084      	sub	sp, #16
 8013c8e:	af00      	add	r7, sp, #0
 8013c90:	6078      	str	r0, [r7, #4]
 8013c92:	6039      	str	r1, [r7, #0]
		if (this->available() < 1) {
 8013c94:	6878      	ldr	r0, [r7, #4]
 8013c96:	f7ff ffd1 	bl	8013c3c <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv>
 8013c9a:	4603      	mov	r3, r0
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	bfd4      	ite	le
 8013ca0:	2301      	movle	r3, #1
 8013ca2:	2300      	movgt	r3, #0
 8013ca4:	b2db      	uxtb	r3, r3
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d001      	beq.n	8013cae <_ZN22core_utils_BufferQueueILi10ELi128EE4readEPPh+0x24>
			return 0;
 8013caa:	2300      	movs	r3, #0
 8013cac:	e01e      	b.n	8013cec <_ZN22core_utils_BufferQueueILi10ELi128EE4readEPPh+0x62>
		*buffer = &this->buffers[this->idx_read].data_ptr[0];
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	f893 3556 	ldrb.w	r3, [r3, #1366]	; 0x556
 8013cb4:	4619      	mov	r1, r3
 8013cb6:	687a      	ldr	r2, [r7, #4]
 8013cb8:	460b      	mov	r3, r1
 8013cba:	011b      	lsls	r3, r3, #4
 8013cbc:	440b      	add	r3, r1
 8013cbe:	00db      	lsls	r3, r3, #3
 8013cc0:	4413      	add	r3, r2
 8013cc2:	3304      	adds	r3, #4
 8013cc4:	681a      	ldr	r2, [r3, #0]
 8013cc6:	683b      	ldr	r3, [r7, #0]
 8013cc8:	601a      	str	r2, [r3, #0]
		uint8_t len = this->buffers[this->idx_read].len;
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	f893 3556 	ldrb.w	r3, [r3, #1366]	; 0x556
 8013cd0:	4619      	mov	r1, r3
 8013cd2:	687a      	ldr	r2, [r7, #4]
 8013cd4:	460b      	mov	r3, r1
 8013cd6:	011b      	lsls	r3, r3, #4
 8013cd8:	440b      	add	r3, r1
 8013cda:	00db      	lsls	r3, r3, #3
 8013cdc:	4413      	add	r3, r2
 8013cde:	3308      	adds	r3, #8
 8013ce0:	881b      	ldrh	r3, [r3, #0]
 8013ce2:	73fb      	strb	r3, [r7, #15]
		this->inc_read();
 8013ce4:	6878      	ldr	r0, [r7, #4]
 8013ce6:	f000 f805 	bl	8013cf4 <_ZN22core_utils_BufferQueueILi10ELi128EE8inc_readEv>
		return len;
 8013cea:	7bfb      	ldrb	r3, [r7, #15]
	}
 8013cec:	4618      	mov	r0, r3
 8013cee:	3710      	adds	r7, #16
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	bd80      	pop	{r7, pc}

08013cf4 <_ZN22core_utils_BufferQueueILi10ELi128EE8inc_readEv>:
	uint8_t inc_read() {
 8013cf4:	b480      	push	{r7}
 8013cf6:	b083      	sub	sp, #12
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	6078      	str	r0, [r7, #4]
		this->idx_read++;
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	f893 3556 	ldrb.w	r3, [r3, #1366]	; 0x556
 8013d02:	3301      	adds	r3, #1
 8013d04:	b2da      	uxtb	r2, r3
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	f883 2556 	strb.w	r2, [r3, #1366]	; 0x556

		if (this->idx_read == this->num_buffers) {
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	f893 2556 	ldrb.w	r2, [r3, #1366]	; 0x556
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 8013d18:	429a      	cmp	r2, r3
 8013d1a:	d103      	bne.n	8013d24 <_ZN22core_utils_BufferQueueILi10ELi128EE8inc_readEv+0x30>
			this->idx_read = 0;
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	2200      	movs	r2, #0
 8013d20:	f883 2556 	strb.w	r2, [r3, #1366]	; 0x556
		}
		return 1;
 8013d24:	2301      	movs	r3, #1
	}
 8013d26:	4618      	mov	r0, r3
 8013d28:	370c      	adds	r7, #12
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d30:	4770      	bx	lr
	...

08013d34 <_Z41__static_initialization_and_destruction_0ii>:
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b082      	sub	sp, #8
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	6078      	str	r0, [r7, #4]
 8013d3c:	6039      	str	r1, [r7, #0]
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	2b01      	cmp	r3, #1
 8013d42:	d10a      	bne.n	8013d5a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8013d44:	683b      	ldr	r3, [r7, #0]
 8013d46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d4a:	4293      	cmp	r3, r2
 8013d4c:	d105      	bne.n	8013d5a <_Z41__static_initialization_and_destruction_0ii+0x26>
static core_comm_SerialMessage_memory<128> incoming_msg;
 8013d4e:	4805      	ldr	r0, [pc, #20]	; (8013d64 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8013d50:	f7fe ff36 	bl	8012bc0 <_ZN30core_comm_SerialMessage_memoryILi128EEC1Ev>
static core_comm_SerialMessage_memory<128> outgoing_msg;
 8013d54:	4804      	ldr	r0, [pc, #16]	; (8013d68 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8013d56:	f7fe ff33 	bl	8012bc0 <_ZN30core_comm_SerialMessage_memoryILi128EEC1Ev>
}
 8013d5a:	bf00      	nop
 8013d5c:	3708      	adds	r7, #8
 8013d5e:	46bd      	mov	sp, r7
 8013d60:	bd80      	pop	{r7, pc}
 8013d62:	bf00      	nop
 8013d64:	24015188 	.word	0x24015188
 8013d68:	24015218 	.word	0x24015218

08013d6c <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv>:
	uint8_t rx_function() {
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b086      	sub	sp, #24
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
		uint8_t num_messages = 0;
 8013d74:	2300      	movs	r3, #0
 8013d76:	75fb      	strb	r3, [r7, #23]
		while (this->_uart.available() > 0) {
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8013d7e:	4618      	mov	r0, r3
 8013d80:	f000 f8d8 	bl	8013f34 <_ZN18core_hardware_UARTILi10ELi128EE9availableEv>
 8013d84:	4603      	mov	r3, r0
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	bfcc      	ite	gt
 8013d8a:	2301      	movgt	r3, #1
 8013d8c:	2300      	movle	r3, #0
 8013d8e:	b2db      	uxtb	r3, r3
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d04f      	beq.n	8013e34 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xc8>
			Buffer *buffer = this->_uart.rx_queue.read();
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	f000 f8d8 	bl	8013f50 <_ZN22core_utils_BufferQueueILi10ELi128EE4readEv>
 8013da0:	6138      	str	r0, [r7, #16]
			if (this->config.use_protocol) {
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	7a5b      	ldrb	r3, [r3, #9]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d03b      	beq.n	8013e22 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xb6>
				uint8_t correct_message = this->_rx_msg.decode(buffer);
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8013db0:	6939      	ldr	r1, [r7, #16]
 8013db2:	4618      	mov	r0, r3
 8013db4:	f007 f81c 	bl	801adf0 <_ZN23core_comm_SerialMessage6decodeEP6Buffer>
 8013db8:	4603      	mov	r3, r0
 8013dba:	73fb      	strb	r3, [r7, #15]
				if (!correct_message) {
 8013dbc:	7bfb      	ldrb	r3, [r7, #15]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d036      	beq.n	8013e30 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xc4>
				if (this->config.use_queue) {
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	7a9b      	ldrb	r3, [r3, #10]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d009      	beq.n	8013dde <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0x72>
					this->rx_queue.write(&_rx_msg);
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	f103 020c 	add.w	r2, r3, #12
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8013dd6:	4619      	mov	r1, r3
 8013dd8:	4610      	mov	r0, r2
 8013dda:	f000 f8de 	bl	8013f9a <_ZN22core_comm_MessageQueueILi10ELi128EE5writeEP23core_comm_SerialMessage>
				if (this->_callbacks.rx.registered) {
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013de4:	f893 3348 	ldrb.w	r3, [r3, #840]	; 0x348
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d007      	beq.n	8013dfc <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0x90>
					this->_callbacks.rx.call(this);
 8013dec:	687a      	ldr	r2, [r7, #4]
 8013dee:	f241 3344 	movw	r3, #4932	; 0x1344
 8013df2:	4413      	add	r3, r2
 8013df4:	6879      	ldr	r1, [r7, #4]
 8013df6:	4618      	mov	r0, r3
 8013df8:	f000 f88d 	bl	8013f16 <_ZN19core_utils_CallbackIvPvE4callES0_>
				if (this->_callbacks.rx_msg.registered) {
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013e02:	f893 3368 	ldrb.w	r3, [r3, #872]	; 0x368
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d00e      	beq.n	8013e28 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xbc>
					this->_callbacks.rx_msg.call(&_rx_msg);
 8013e0a:	687a      	ldr	r2, [r7, #4]
 8013e0c:	f241 3364 	movw	r3, #4964	; 0x1364
 8013e10:	4413      	add	r3, r2
 8013e12:	687a      	ldr	r2, [r7, #4]
 8013e14:	f502 62b6 	add.w	r2, r2, #1456	; 0x5b0
 8013e18:	4611      	mov	r1, r2
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	f7ff f926 	bl	801306c <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageE4callES1_>
 8013e20:	e002      	b.n	8013e28 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xbc>
					nop();
 8013e22:	f7fe fc97 	bl	8012754 <_Z3nopv>
 8013e26:	e7fc      	b.n	8013e22 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xb6>
			num_messages++;
 8013e28:	7dfb      	ldrb	r3, [r7, #23]
 8013e2a:	3301      	adds	r3, #1
 8013e2c:	75fb      	strb	r3, [r7, #23]
 8013e2e:	e7a3      	b.n	8013d78 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xc>
					continue;
 8013e30:	bf00      	nop
		while (this->_uart.available() > 0) {
 8013e32:	e7a1      	b.n	8013d78 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xc>
		return num_messages;
 8013e34:	7dfb      	ldrb	r3, [r7, #23]
	}
 8013e36:	4618      	mov	r0, r3
 8013e38:	3718      	adds	r7, #24
 8013e3a:	46bd      	mov	sp, r7
 8013e3c:	bd80      	pop	{r7, pc}

08013e3e <_ZN23core_comm_UartInterfaceILi10ELi128EE9setTaskIDEP19tskTaskControlBlock>:
	void setTaskID(TaskHandle_t task) {
 8013e3e:	b480      	push	{r7}
 8013e40:	b083      	sub	sp, #12
 8013e42:	af00      	add	r7, sp, #0
 8013e44:	6078      	str	r0, [r7, #4]
 8013e46:	6039      	str	r1, [r7, #0]
		this->_task_id = task;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013e4e:	461a      	mov	r2, r3
 8013e50:	683b      	ldr	r3, [r7, #0]
 8013e52:	f8c2 3388 	str.w	r3, [r2, #904]	; 0x388
	}
 8013e56:	bf00      	nop
 8013e58:	370c      	adds	r7, #12
 8013e5a:	46bd      	mov	sp, r7
 8013e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e60:	4770      	bx	lr

08013e62 <_ZN23core_comm_UartInterfaceILi10ELi128EE9getTaskIDEv>:
	TaskHandle_t getTaskID() {
 8013e62:	b480      	push	{r7}
 8013e64:	b083      	sub	sp, #12
 8013e66:	af00      	add	r7, sp, #0
 8013e68:	6078      	str	r0, [r7, #4]
		return this->_task_id;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013e70:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
	}
 8013e74:	4618      	mov	r0, r3
 8013e76:	370c      	adds	r7, #12
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7e:	4770      	bx	lr

08013e80 <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt>:
	void rxFunction(uint16_t len) {
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b082      	sub	sp, #8
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
 8013e88:	460b      	mov	r3, r1
 8013e8a:	807b      	strh	r3, [r7, #2]
		if (len == 0) {
 8013e8c:	887b      	ldrh	r3, [r7, #2]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d031      	beq.n	8013ef6 <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt+0x76>
		if (this->config.cobs_encode_rx) {
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	799b      	ldrb	r3, [r3, #6]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d00c      	beq.n	8013eb4 <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt+0x34>
			len = cobsDecodeInPlace(this->_rx_buffer.buffer, len - 1);
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	f603 32fa 	addw	r2, r3, #3066	; 0xbfa
 8013ea0:	887b      	ldrh	r3, [r7, #2]
 8013ea2:	b2db      	uxtb	r3, r3
 8013ea4:	3b01      	subs	r3, #1
 8013ea6:	b2db      	uxtb	r3, r3
 8013ea8:	4619      	mov	r1, r3
 8013eaa:	4610      	mov	r0, r2
 8013eac:	f009 f800 	bl	801ceb0 <_Z17cobsDecodeInPlacePhh>
 8013eb0:	4603      	mov	r3, r0
 8013eb2:	807b      	strh	r3, [r7, #2]
		this->_rx_buffer.len = len;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	887a      	ldrh	r2, [r7, #2]
 8013eb8:	f8a3 2bf8 	strh.w	r2, [r3, #3064]	; 0xbf8
		if (this->config.queues) {
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	7a1b      	ldrb	r3, [r3, #8]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d009      	beq.n	8013ed8 <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt+0x58>
			this->rx_queue.write(&this->_rx_buffer);
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	f103 0210 	add.w	r2, r3, #16
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	f603 33f4 	addw	r3, r3, #3060	; 0xbf4
 8013ed0:	4619      	mov	r1, r3
 8013ed2:	4610      	mov	r0, r2
 8013ed4:	f7ff fd98 	bl	8013a08 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEP6Buffer>
		if (this->_callbacks.rx.registered) {
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	f893 3ac4 	ldrb.w	r3, [r3, #2756]	; 0xac4
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d005      	beq.n	8013eee <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt+0x6e>
			this->_callbacks.rx.call();
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f7fe fa93 	bl	8012414 <_ZN19core_utils_CallbackIvvE4callEv>
		this->startReceiveDMA();
 8013eee:	6878      	ldr	r0, [r7, #4]
 8013ef0:	f7ff fbf2 	bl	80136d8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv>
 8013ef4:	e000      	b.n	8013ef8 <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt+0x78>
			return;
 8013ef6:	bf00      	nop
	}
 8013ef8:	3708      	adds	r7, #8
 8013efa:	46bd      	mov	sp, r7
 8013efc:	bd80      	pop	{r7, pc}

08013efe <_ZN18core_hardware_UARTILi10ELi128EE9get_huartEv>:
	UART_HandleTypeDef* get_huart() {
 8013efe:	b480      	push	{r7}
 8013f00:	b083      	sub	sp, #12
 8013f02:	af00      	add	r7, sp, #0
 8013f04:	6078      	str	r0, [r7, #4]
		return this->huart;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	68db      	ldr	r3, [r3, #12]
	}
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	370c      	adds	r7, #12
 8013f0e:	46bd      	mov	sp, r7
 8013f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f14:	4770      	bx	lr

08013f16 <_ZN19core_utils_CallbackIvPvE4callES0_>:
	R call(A argument){
 8013f16:	b580      	push	{r7, lr}
 8013f18:	b082      	sub	sp, #8
 8013f1a:	af00      	add	r7, sp, #0
 8013f1c:	6078      	str	r0, [r7, #4]
 8013f1e:	6039      	str	r1, [r7, #0]
		return this->_fp(argument);
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	3308      	adds	r3, #8
 8013f24:	6839      	ldr	r1, [r7, #0]
 8013f26:	4618      	mov	r0, r3
 8013f28:	f000 f852 	bl	8013fd0 <_ZN26core_utils_FunctionPointerIvPvEclES0_>
 8013f2c:	bf00      	nop
	}
 8013f2e:	3708      	adds	r7, #8
 8013f30:	46bd      	mov	sp, r7
 8013f32:	bd80      	pop	{r7, pc}

08013f34 <_ZN18core_hardware_UARTILi10ELi128EE9availableEv>:
	int8_t available() {
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b082      	sub	sp, #8
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	6078      	str	r0, [r7, #4]
		return this->rx_queue.available();
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	3310      	adds	r3, #16
 8013f40:	4618      	mov	r0, r3
 8013f42:	f7ff fe7b 	bl	8013c3c <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv>
 8013f46:	4603      	mov	r3, r0
	}
 8013f48:	4618      	mov	r0, r3
 8013f4a:	3708      	adds	r7, #8
 8013f4c:	46bd      	mov	sp, r7
 8013f4e:	bd80      	pop	{r7, pc}

08013f50 <_ZN22core_utils_BufferQueueILi10ELi128EE4readEv>:
	Buffer* read() {
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b084      	sub	sp, #16
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
		if (this->available() < 1) {
 8013f58:	6878      	ldr	r0, [r7, #4]
 8013f5a:	f7ff fe6f 	bl	8013c3c <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv>
 8013f5e:	4603      	mov	r3, r0
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	bfd4      	ite	le
 8013f64:	2301      	movle	r3, #1
 8013f66:	2300      	movgt	r3, #0
 8013f68:	b2db      	uxtb	r3, r3
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d001      	beq.n	8013f72 <_ZN22core_utils_BufferQueueILi10ELi128EE4readEv+0x22>
			return 0;
 8013f6e:	2300      	movs	r3, #0
 8013f70:	e00f      	b.n	8013f92 <_ZN22core_utils_BufferQueueILi10ELi128EE4readEv+0x42>
		Buffer *buffer = &this->buffers[this->idx_read];
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	f893 3556 	ldrb.w	r3, [r3, #1366]	; 0x556
 8013f78:	461a      	mov	r2, r3
 8013f7a:	4613      	mov	r3, r2
 8013f7c:	011b      	lsls	r3, r3, #4
 8013f7e:	4413      	add	r3, r2
 8013f80:	00db      	lsls	r3, r3, #3
 8013f82:	687a      	ldr	r2, [r7, #4]
 8013f84:	4413      	add	r3, r2
 8013f86:	3304      	adds	r3, #4
 8013f88:	60fb      	str	r3, [r7, #12]
		this->inc_read();
 8013f8a:	6878      	ldr	r0, [r7, #4]
 8013f8c:	f7ff feb2 	bl	8013cf4 <_ZN22core_utils_BufferQueueILi10ELi128EE8inc_readEv>
		return buffer;
 8013f90:	68fb      	ldr	r3, [r7, #12]
	}
 8013f92:	4618      	mov	r0, r3
 8013f94:	3710      	adds	r7, #16
 8013f96:	46bd      	mov	sp, r7
 8013f98:	bd80      	pop	{r7, pc}

08013f9a <_ZN22core_comm_MessageQueueILi10ELi128EE5writeEP23core_comm_SerialMessage>:
	uint8_t write(core_comm_SerialMessage *message) {
 8013f9a:	b580      	push	{r7, lr}
 8013f9c:	b082      	sub	sp, #8
 8013f9e:	af00      	add	r7, sp, #0
 8013fa0:	6078      	str	r0, [r7, #4]
 8013fa2:	6039      	str	r1, [r7, #0]
		message->copyTo(&this->messages[this->idx_write]);
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	f893 35a1 	ldrb.w	r3, [r3, #1441]	; 0x5a1
 8013faa:	461a      	mov	r2, r3
 8013fac:	4613      	mov	r3, r2
 8013fae:	00db      	lsls	r3, r3, #3
 8013fb0:	4413      	add	r3, r2
 8013fb2:	011b      	lsls	r3, r3, #4
 8013fb4:	687a      	ldr	r2, [r7, #4]
 8013fb6:	4413      	add	r3, r2
 8013fb8:	4619      	mov	r1, r3
 8013fba:	6838      	ldr	r0, [r7, #0]
 8013fbc:	f006 fe0e 	bl	801abdc <_ZN23core_comm_SerialMessage6copyToEPS_>
		return this->inc_write();
 8013fc0:	6878      	ldr	r0, [r7, #4]
 8013fc2:	f000 f812 	bl	8013fea <_ZN22core_comm_MessageQueueILi10ELi128EE9inc_writeEv>
 8013fc6:	4603      	mov	r3, r0
	}
 8013fc8:	4618      	mov	r0, r3
 8013fca:	3708      	adds	r7, #8
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	bd80      	pop	{r7, pc}

08013fd0 <_ZN26core_utils_FunctionPointerIvPvEclES0_>:
    R operator ()(A1 a) {
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b082      	sub	sp, #8
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
 8013fd8:	6039      	str	r1, [r7, #0]
        return call(a);
 8013fda:	6839      	ldr	r1, [r7, #0]
 8013fdc:	6878      	ldr	r0, [r7, #4]
 8013fde:	f000 f825 	bl	801402c <_ZN26core_utils_FunctionPointerIvPvE4callES0_>
 8013fe2:	bf00      	nop
    }
 8013fe4:	3708      	adds	r7, #8
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	bd80      	pop	{r7, pc}

08013fea <_ZN22core_comm_MessageQueueILi10ELi128EE9inc_writeEv>:
	uint8_t inc_write() {
 8013fea:	b480      	push	{r7}
 8013fec:	b083      	sub	sp, #12
 8013fee:	af00      	add	r7, sp, #0
 8013ff0:	6078      	str	r0, [r7, #4]
		this->idx_write++;
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	f893 35a1 	ldrb.w	r3, [r3, #1441]	; 0x5a1
 8013ff8:	3301      	adds	r3, #1
 8013ffa:	b2da      	uxtb	r2, r3
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	f883 25a1 	strb.w	r2, [r3, #1441]	; 0x5a1
		if (this->idx_write == this->len) {
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	f893 25a1 	ldrb.w	r2, [r3, #1441]	; 0x5a1
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	f893 35a3 	ldrb.w	r3, [r3, #1443]	; 0x5a3
 801400e:	429a      	cmp	r2, r3
 8014010:	d103      	bne.n	801401a <_ZN22core_comm_MessageQueueILi10ELi128EE9inc_writeEv+0x30>
			this->idx_write = 0;
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	2200      	movs	r2, #0
 8014016:	f883 25a1 	strb.w	r2, [r3, #1441]	; 0x5a1
		return this->idx_write;
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	f893 35a1 	ldrb.w	r3, [r3, #1441]	; 0x5a1
	}
 8014020:	4618      	mov	r0, r3
 8014022:	370c      	adds	r7, #12
 8014024:	46bd      	mov	sp, r7
 8014026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801402a:	4770      	bx	lr

0801402c <_ZN26core_utils_FunctionPointerIvPvE4callES0_>:
    R call(A1 a) {
 801402c:	b580      	push	{r7, lr}
 801402e:	b082      	sub	sp, #8
 8014030:	af00      	add	r7, sp, #0
 8014032:	6078      	str	r0, [r7, #4]
 8014034:	6039      	str	r1, [r7, #0]
        if (_membercaller == 0 && _p.function) {
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	695b      	ldr	r3, [r3, #20]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d108      	bne.n	8014050 <_ZN26core_utils_FunctionPointerIvPvE4callES0_+0x24>
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	2b00      	cmp	r3, #0
 8014044:	d004      	beq.n	8014050 <_ZN26core_utils_FunctionPointerIvPvE4callES0_+0x24>
           return _p.function(a);
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	6838      	ldr	r0, [r7, #0]
 801404c:	4798      	blx	r3
 801404e:	e011      	b.n	8014074 <_ZN26core_utils_FunctionPointerIvPvE4callES0_+0x48>
        } else if (_membercaller && _p.object) {
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	695b      	ldr	r3, [r3, #20]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d00c      	beq.n	8014072 <_ZN26core_utils_FunctionPointerIvPvE4callES0_+0x46>
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d008      	beq.n	8014072 <_ZN26core_utils_FunctionPointerIvPvE4callES0_+0x46>
           return _membercaller(_p.object, _member, a);
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	695b      	ldr	r3, [r3, #20]
 8014064:	687a      	ldr	r2, [r7, #4]
 8014066:	6810      	ldr	r0, [r2, #0]
 8014068:	687a      	ldr	r2, [r7, #4]
 801406a:	1d11      	adds	r1, r2, #4
 801406c:	683a      	ldr	r2, [r7, #0]
 801406e:	4798      	blx	r3
 8014070:	e000      	b.n	8014074 <_ZN26core_utils_FunctionPointerIvPvE4callES0_+0x48>
        return (R)0;
 8014072:	bf00      	nop
    }
 8014074:	3708      	adds	r7, #8
 8014076:	46bd      	mov	sp, r7
 8014078:	bd80      	pop	{r7, pc}

0801407a <_GLOBAL__sub_I__Z20twipr_uart_comm_taskPv>:
 801407a:	b580      	push	{r7, lr}
 801407c:	af00      	add	r7, sp, #0
 801407e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014082:	2001      	movs	r0, #1
 8014084:	f7ff fe56 	bl	8013d34 <_Z41__static_initialization_and_destruction_0ii>
 8014088:	bd80      	pop	{r7, pc}

0801408a <_ZN15core_utils_GPIOC1Ev>:
void core_utils_gpio_registerExtiCallback(uint16_t line, void (* function) (void));


class core_utils_GPIO {
public:
	core_utils_GPIO(){
 801408a:	b480      	push	{r7}
 801408c:	b083      	sub	sp, #12
 801408e:	af00      	add	r7, sp, #0
 8014090:	6078      	str	r0, [r7, #4]

	}
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	4618      	mov	r0, r3
 8014096:	370c      	adds	r7, #12
 8014098:	46bd      	mov	sp, r7
 801409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409e:	4770      	bx	lr

080140a0 <_ZN28twipr_communication_config_tC1Ev>:

typedef struct twipr_communication_callbacks_t {
	core_utils_Callback<void, uint16_t> new_trajectory;
}twipr_communication_callbacks_t;

typedef struct twipr_communication_config_t {
 80140a0:	b580      	push	{r7, lr}
 80140a2:	b082      	sub	sp, #8
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	6078      	str	r0, [r7, #4]
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	3308      	adds	r3, #8
 80140ac:	4618      	mov	r0, r3
 80140ae:	f7ff ffec 	bl	801408a <_ZN15core_utils_GPIOC1Ev>
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	4618      	mov	r0, r3
 80140b6:	3708      	adds	r7, #8
 80140b8:	46bd      	mov	sp, r7
 80140ba:	bd80      	pop	{r7, pc}

080140bc <_ZN31twipr_communication_callbacks_tC1Ev>:
typedef struct twipr_communication_callbacks_t {
 80140bc:	b580      	push	{r7, lr}
 80140be:	b082      	sub	sp, #8
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	6078      	str	r0, [r7, #4]
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	4618      	mov	r0, r3
 80140c8:	f7fe f9b2 	bl	8012430 <_ZN19core_utils_CallbackIvtEC1Ev>
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	4618      	mov	r0, r3
 80140d0:	3708      	adds	r7, #8
 80140d2:	46bd      	mov	sp, r7
 80140d4:	bd80      	pop	{r7, pc}

080140d6 <_ZN26TWIPR_CommunicationManagerC1Ev>:

#include "twipr_communication.h"

static core_comm_SerialMessage outgoing_msg;

TWIPR_CommunicationManager::TWIPR_CommunicationManager() {
 80140d6:	b580      	push	{r7, lr}
 80140d8:	b082      	sub	sp, #8
 80140da:	af00      	add	r7, sp, #0
 80140dc:	6078      	str	r0, [r7, #4]
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	4618      	mov	r0, r3
 80140e2:	f7ff ffdd 	bl	80140a0 <_ZN28twipr_communication_config_tC1Ev>
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	3328      	adds	r3, #40	; 0x28
 80140ea:	4618      	mov	r0, r3
 80140ec:	f7fe fbc5 	bl	801287a <_ZN24TWIPR_UART_CommunicationC1Ev>
 80140f0:	687a      	ldr	r2, [r7, #4]
 80140f2:	f241 4344 	movw	r3, #5188	; 0x1444
 80140f6:	4413      	add	r3, r2
 80140f8:	4618      	mov	r0, r3
 80140fa:	f7fe f834 	bl	8012166 <_ZN23TWIPR_SPI_CommunicationC1Ev>
 80140fe:	687a      	ldr	r2, [r7, #4]
 8014100:	f241 530c 	movw	r3, #5388	; 0x150c
 8014104:	4413      	add	r3, r2
 8014106:	4618      	mov	r0, r3
 8014108:	f7ff ffd8 	bl	80140bc <_ZN31twipr_communication_callbacks_tC1Ev>

}
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	4618      	mov	r0, r3
 8014110:	3708      	adds	r7, #8
 8014112:	46bd      	mov	sp, r7
 8014114:	bd80      	pop	{r7, pc}
	...

08014118 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t>:

/* ====================================================================== */
void TWIPR_CommunicationManager::init(twipr_communication_config_t config) {
 8014118:	b084      	sub	sp, #16
 801411a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801411c:	b0bd      	sub	sp, #244	; 0xf4
 801411e:	af02      	add	r7, sp, #8
 8014120:	6078      	str	r0, [r7, #4]
 8014122:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8014126:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	f507 7482 	add.w	r4, r7, #260	; 0x104
 8014130:	469c      	mov	ip, r3
 8014132:	f104 0e20 	add.w	lr, r4, #32
 8014136:	4665      	mov	r5, ip
 8014138:	4626      	mov	r6, r4
 801413a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801413c:	6028      	str	r0, [r5, #0]
 801413e:	6069      	str	r1, [r5, #4]
 8014140:	60aa      	str	r2, [r5, #8]
 8014142:	60eb      	str	r3, [r5, #12]
 8014144:	3410      	adds	r4, #16
 8014146:	f10c 0c10 	add.w	ip, ip, #16
 801414a:	4574      	cmp	r4, lr
 801414c:	d1f3      	bne.n	8014136 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x1e>
 801414e:	4663      	mov	r3, ip
 8014150:	4622      	mov	r2, r4
 8014152:	6810      	ldr	r0, [r2, #0]
 8014154:	6018      	str	r0, [r3, #0]
 8014156:	8892      	ldrh	r2, [r2, #4]
 8014158:	809a      	strh	r2, [r3, #4]

	// Initialize the UART CM4 Interface
	twipr_uart_comm_config_t uart_config = { .huart = this->config.huart };
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	61fb      	str	r3, [r7, #28]
	this->uart_interface.init(uart_config);
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	3328      	adds	r3, #40	; 0x28
 8014164:	69f9      	ldr	r1, [r7, #28]
 8014166:	4618      	mov	r0, r3
 8014168:	f7fe fba0 	bl	80128ac <_ZN24TWIPR_UART_Communication4initE24twipr_uart_comm_config_t>

	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_WRITE,
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	f103 0428 	add.w	r4, r3, #40	; 0x28
			core_utils_Callback<void, core_comm_SerialMessage*>(this,
 8014172:	4b4d      	ldr	r3, [pc, #308]	; (80142a8 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x190>)
 8014174:	643b      	str	r3, [r7, #64]	; 0x40
 8014176:	2300      	movs	r3, #0
 8014178:	647b      	str	r3, [r7, #68]	; 0x44
 801417a:	f107 0020 	add.w	r0, r7, #32
 801417e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014182:	cb0c      	ldmia	r3, {r2, r3}
 8014184:	6879      	ldr	r1, [r7, #4]
 8014186:	f000 fb41 	bl	801480c <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>
	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_WRITE,
 801418a:	f107 0320 	add.w	r3, r7, #32
 801418e:	461a      	mov	r2, r3
 8014190:	2101      	movs	r1, #1
 8014192:	4620      	mov	r0, r4
 8014194:	f7fe fc0c 	bl	80129b0 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE>
					&TWIPR_CommunicationManager::_uart_handleMsg_write_callback));

	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_READ,
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	f103 0428 	add.w	r4, r3, #40	; 0x28
			core_utils_Callback<void, core_comm_SerialMessage*>(this,
 801419e:	4b43      	ldr	r3, [pc, #268]	; (80142ac <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x194>)
 80141a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80141a2:	2300      	movs	r3, #0
 80141a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80141a6:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80141aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80141ae:	cb0c      	ldmia	r3, {r2, r3}
 80141b0:	6879      	ldr	r1, [r7, #4]
 80141b2:	f000 fb2b 	bl	801480c <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>
	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_READ,
 80141b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80141ba:	461a      	mov	r2, r3
 80141bc:	2102      	movs	r1, #2
 80141be:	4620      	mov	r0, r4
 80141c0:	f7fe fbf6 	bl	80129b0 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE>
					&TWIPR_CommunicationManager::_uart_handleMsg_read_callback));

	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_FUNC,
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	f103 0428 	add.w	r4, r3, #40	; 0x28
			core_utils_Callback<void, core_comm_SerialMessage*>(this,
 80141ca:	4b39      	ldr	r3, [pc, #228]	; (80142b0 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x198>)
 80141cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80141d0:	2300      	movs	r3, #0
 80141d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80141d6:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80141da:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80141de:	cb0c      	ldmia	r3, {r2, r3}
 80141e0:	6879      	ldr	r1, [r7, #4]
 80141e2:	f000 fb13 	bl	801480c <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>
	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_FUNC,
 80141e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80141ea:	461a      	mov	r2, r3
 80141ec:	2103      	movs	r1, #3
 80141ee:	4620      	mov	r0, r4
 80141f0:	f7fe fbde 	bl	80129b0 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE>
					&TWIPR_CommunicationManager::_uart_handleMsg_func_callback));

	// Initialize the SPI Interface
	twipr_spi_comm_config_t spi_config = { .hspi = this->config.hspi,
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	685b      	ldr	r3, [r3, #4]
			.sample_buffer = this->config.sample_tx_buffer, .len_sample_buffer =
					this->config.len_sample_buffer, .trajectory_buffer =
					this->config.trajectory_rx_buffer, .len_trajectory_buffer =
					this->config.len_trajectory_buffer };
 80141f8:	60bb      	str	r3, [r7, #8]
			.sample_buffer = this->config.sample_tx_buffer, .len_sample_buffer =
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	699b      	ldr	r3, [r3, #24]
					this->config.len_trajectory_buffer };
 80141fe:	60fb      	str	r3, [r7, #12]
					this->config.len_sample_buffer, .trajectory_buffer =
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	8b9b      	ldrh	r3, [r3, #28]
					this->config.len_trajectory_buffer };
 8014204:	823b      	strh	r3, [r7, #16]
					this->config.trajectory_rx_buffer, .len_trajectory_buffer =
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	6a1b      	ldr	r3, [r3, #32]
					this->config.len_trajectory_buffer };
 801420a:	617b      	str	r3, [r7, #20]
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014210:	833b      	strh	r3, [r7, #24]
	this->spi_interface.init(spi_config);
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	f241 4444 	movw	r4, #5188	; 0x1444
 8014218:	441c      	add	r4, r3
 801421a:	466a      	mov	r2, sp
 801421c:	f107 0314 	add.w	r3, r7, #20
 8014220:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014224:	e882 0003 	stmia.w	r2, {r0, r1}
 8014228:	f107 0308 	add.w	r3, r7, #8
 801422c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801422e:	4620      	mov	r0, r4
 8014230:	f7fd ffb0 	bl	8012194 <_ZN23TWIPR_SPI_Communication4initE23twipr_spi_comm_config_t>

	this->spi_interface.registerCallback(TWIPR_SPI_COMM_CALLBACK_TRAJECTORY_RX,
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	f241 4444 	movw	r4, #5188	; 0x1444
 801423a:	441c      	add	r4, r3
			core_utils_Callback<void, uint16_t>(this,
 801423c:	4b1d      	ldr	r3, [pc, #116]	; (80142b4 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x19c>)
 801423e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014242:	2300      	movs	r3, #0
 8014244:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8014248:	f107 0098 	add.w	r0, r7, #152	; 0x98
 801424c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8014250:	cb0c      	ldmia	r3, {r2, r3}
 8014252:	6879      	ldr	r1, [r7, #4]
 8014254:	f000 fb0e 	bl	8014874 <_ZN19core_utils_CallbackIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE>
	this->spi_interface.registerCallback(TWIPR_SPI_COMM_CALLBACK_TRAJECTORY_RX,
 8014258:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801425c:	461a      	mov	r2, r3
 801425e:	2100      	movs	r1, #0
 8014260:	4620      	mov	r0, r4
 8014262:	f7fe f827 	bl	80122b4 <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE>
					&TWIPR_CommunicationManager::_spi_rxTrajectory_callback));
	this->spi_interface.registerCallback(TWIPR_SPI_COMM_CALLBACK_SAMPLE_TX,
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	f241 4444 	movw	r4, #5188	; 0x1444
 801426c:	441c      	add	r4, r3
			core_utils_Callback<void, uint16_t>(this,
 801426e:	4b12      	ldr	r3, [pc, #72]	; (80142b8 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x1a0>)
 8014270:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8014274:	2300      	movs	r3, #0
 8014276:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801427a:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 801427e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8014282:	cb0c      	ldmia	r3, {r2, r3}
 8014284:	6879      	ldr	r1, [r7, #4]
 8014286:	f000 faf5 	bl	8014874 <_ZN19core_utils_CallbackIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE>
	this->spi_interface.registerCallback(TWIPR_SPI_COMM_CALLBACK_SAMPLE_TX,
 801428a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801428e:	461a      	mov	r2, r3
 8014290:	2101      	movs	r1, #1
 8014292:	4620      	mov	r0, r4
 8014294:	f7fe f80e 	bl	80122b4 <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE>
					&TWIPR_CommunicationManager::_spi_txSamples_callback));
}
 8014298:	bf00      	nop
 801429a:	37ec      	adds	r7, #236	; 0xec
 801429c:	46bd      	mov	sp, r7
 801429e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80142a2:	b004      	add	sp, #16
 80142a4:	4770      	bx	lr
 80142a6:	bf00      	nop
 80142a8:	0801432d 	.word	0x0801432d
 80142ac:	08014479 	.word	0x08014479
 80142b0:	08014595 	.word	0x08014595
 80142b4:	0801471d 	.word	0x0801471d
 80142b8:	080147a3 	.word	0x080147a3

080142bc <_ZN26TWIPR_CommunicationManager5startEv>:
/* ====================================================================== */
void TWIPR_CommunicationManager::start() {
 80142bc:	b580      	push	{r7, lr}
 80142be:	b082      	sub	sp, #8
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	6078      	str	r0, [r7, #4]

	// Start the UART Interface
	this->uart_interface.start();
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	3328      	adds	r3, #40	; 0x28
 80142c8:	4618      	mov	r0, r3
 80142ca:	f7fe fb1b 	bl	8012904 <_ZN24TWIPR_UART_Communication5startEv>

	// Start the SPI Interface
	this->spi_interface.start();
 80142ce:	687a      	ldr	r2, [r7, #4]
 80142d0:	f241 4344 	movw	r3, #5188	; 0x1444
 80142d4:	4413      	add	r3, r2
 80142d6:	4618      	mov	r0, r3
 80142d8:	f7fd ffbc 	bl	8012254 <_ZN23TWIPR_SPI_Communication5startEv>
}
 80142dc:	bf00      	nop
 80142de:	3708      	adds	r7, #8
 80142e0:	46bd      	mov	sp, r7
 80142e2:	bd80      	pop	{r7, pc}

080142e4 <_ZN26TWIPR_CommunicationManager16registerCallbackE33twipr_communication_callback_id_t19core_utils_CallbackIvtE>:
/* ====================================================================== */
void TWIPR_CommunicationManager::registerCallback(twipr_communication_callback_id_t callback_id, core_utils_Callback<void, uint16_t> callback){
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b084      	sub	sp, #16
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	60f8      	str	r0, [r7, #12]
 80142ec:	460b      	mov	r3, r1
 80142ee:	607a      	str	r2, [r7, #4]
 80142f0:	72fb      	strb	r3, [r7, #11]
	switch (callback_id){
 80142f2:	7afb      	ldrb	r3, [r7, #11]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d107      	bne.n	8014308 <_ZN26TWIPR_CommunicationManager16registerCallbackE33twipr_communication_callback_id_t19core_utils_CallbackIvtE+0x24>
	case TWIPR_COMM_CALLBACK_NEW_TRAJECTORY: {
		this->_callbacks.new_trajectory = callback;
 80142f8:	68fa      	ldr	r2, [r7, #12]
 80142fa:	f241 530c 	movw	r3, #5388	; 0x150c
 80142fe:	4413      	add	r3, r2
 8014300:	6879      	ldr	r1, [r7, #4]
 8014302:	4618      	mov	r0, r3
 8014304:	f7fd ffb6 	bl	8012274 <_ZN19core_utils_CallbackIvtEaSERKS0_>
	}
	}
}
 8014308:	bf00      	nop
 801430a:	3710      	adds	r7, #16
 801430c:	46bd      	mov	sp, r7
 801430e:	bd80      	pop	{r7, pc}

08014310 <_ZN26TWIPR_CommunicationManager9resetUARTEv>:

/* ====================================================================== */
void TWIPR_CommunicationManager::resetUART(){
 8014310:	b580      	push	{r7, lr}
 8014312:	b082      	sub	sp, #8
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
	this->uart_interface.reset();
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	3328      	adds	r3, #40	; 0x28
 801431c:	4618      	mov	r0, r3
 801431e:	f7fe fb0b 	bl	8012938 <_ZN24TWIPR_UART_Communication5resetEv>
}
 8014322:	bf00      	nop
 8014324:	3708      	adds	r7, #8
 8014326:	46bd      	mov	sp, r7
 8014328:	bd80      	pop	{r7, pc}
	...

0801432c <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage>:

/* ====================================================================== */
void TWIPR_CommunicationManager::_uart_handleMsg_write_callback(
		core_comm_SerialMessage *msg) {
 801432c:	b580      	push	{r7, lr}
 801432e:	b084      	sub	sp, #16
 8014330:	af00      	add	r7, sp, #0
 8014332:	6078      	str	r0, [r7, #4]
 8014334:	6039      	str	r1, [r7, #0]

	RegisterMap *reg_map;

	switch (msg->address_1) {
 8014336:	683b      	ldr	r3, [r7, #0]
 8014338:	785b      	ldrb	r3, [r3, #1]
 801433a:	2b01      	cmp	r3, #1
 801433c:	d002      	beq.n	8014344 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x18>
 801433e:	2b02      	cmp	r3, #2
 8014340:	d004      	beq.n	801434c <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x20>
 8014342:	e007      	b.n	8014354 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x28>
	case TWIPR_FIRMWARE_REGISTER_MAP_GENERAL: {
		reg_map = this->config.reg_map_general;
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	695b      	ldr	r3, [r3, #20]
 8014348:	60fb      	str	r3, [r7, #12]
		break;
 801434a:	e009      	b.n	8014360 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x34>
	}
	case TWIPR_FIRMWARE_REGISTER_MAP_CONTROL: {
		reg_map = this->config.reg_map_control;
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	691b      	ldr	r3, [r3, #16]
 8014350:	60fb      	str	r3, [r7, #12]
		break;
 8014352:	e005      	b.n	8014360 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x34>
	}
	default: {
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_WRONG_ADDRESS);
 8014354:	2202      	movs	r2, #2
 8014356:	6839      	ldr	r1, [r7, #0]
 8014358:	6878      	ldr	r0, [r7, #4]
 801435a:	f000 f9b3 	bl	80146c4 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 801435e:	e086      	b.n	801446e <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x142>
		break;
	}
	}

	uint16_t address = uint8_to_uint16(msg->address_2, msg->address_3);
 8014360:	683b      	ldr	r3, [r7, #0]
 8014362:	789a      	ldrb	r2, [r3, #2]
 8014364:	683b      	ldr	r3, [r7, #0]
 8014366:	78db      	ldrb	r3, [r3, #3]
 8014368:	4619      	mov	r1, r3
 801436a:	4610      	mov	r0, r2
 801436c:	f008 fdc8 	bl	801cf00 <_Z15uint8_to_uint16hh>
 8014370:	4603      	mov	r3, r0
 8014372:	817b      	strh	r3, [r7, #10]
	if (!reg_map->hasEntry(address)){
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	330c      	adds	r3, #12
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	897a      	ldrh	r2, [r7, #10]
 801437e:	4611      	mov	r1, r2
 8014380:	68f8      	ldr	r0, [r7, #12]
 8014382:	4798      	blx	r3
 8014384:	4603      	mov	r3, r0
 8014386:	f083 0301 	eor.w	r3, r3, #1
 801438a:	b2db      	uxtb	r3, r3
 801438c:	2b00      	cmp	r3, #0
 801438e:	d005      	beq.n	801439c <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x70>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_WRONG_ADDRESS);
 8014390:	2202      	movs	r2, #2
 8014392:	6839      	ldr	r1, [r7, #0]
 8014394:	6878      	ldr	r0, [r7, #4]
 8014396:	f000 f995 	bl	80146c4 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 801439a:	e068      	b.n	801446e <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x142>
	}
	if (reg_map->getSize(address) != msg->len) {
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	3314      	adds	r3, #20
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	897a      	ldrh	r2, [r7, #10]
 80143a6:	4611      	mov	r1, r2
 80143a8:	68f8      	ldr	r0, [r7, #12]
 80143aa:	4798      	blx	r3
 80143ac:	4603      	mov	r3, r0
 80143ae:	461a      	mov	r2, r3
 80143b0:	683b      	ldr	r3, [r7, #0]
 80143b2:	899b      	ldrh	r3, [r3, #12]
 80143b4:	429a      	cmp	r2, r3
 80143b6:	bf14      	ite	ne
 80143b8:	2301      	movne	r3, #1
 80143ba:	2300      	moveq	r3, #0
 80143bc:	b2db      	uxtb	r3, r3
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d005      	beq.n	80143ce <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xa2>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_LEN);
 80143c2:	2205      	movs	r2, #5
 80143c4:	6839      	ldr	r1, [r7, #0]
 80143c6:	6878      	ldr	r0, [r7, #4]
 80143c8:	f000 f97c 	bl	80146c4 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 80143cc:	e04f      	b.n	801446e <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x142>
	}
	if (reg_map->getType(address) != REGISTER_ENTRY_DATA) {
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	3318      	adds	r3, #24
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	897a      	ldrh	r2, [r7, #10]
 80143d8:	4611      	mov	r1, r2
 80143da:	68f8      	ldr	r0, [r7, #12]
 80143dc:	4798      	blx	r3
 80143de:	4603      	mov	r3, r0
 80143e0:	2b01      	cmp	r3, #1
 80143e2:	bf14      	ite	ne
 80143e4:	2301      	movne	r3, #1
 80143e6:	2300      	moveq	r3, #0
 80143e8:	b2db      	uxtb	r3, r3
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d005      	beq.n	80143fa <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xce>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_MSG_TYPE);
 80143ee:	2206      	movs	r2, #6
 80143f0:	6839      	ldr	r1, [r7, #0]
 80143f2:	6878      	ldr	r0, [r7, #4]
 80143f4:	f000 f966 	bl	80146c4 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 80143f8:	e039      	b.n	801446e <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x142>
	}
	if (reg_map->getReadWriteSetting(address) == REGISTER_ENTRY_READ) {
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	331c      	adds	r3, #28
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	897a      	ldrh	r2, [r7, #10]
 8014404:	4611      	mov	r1, r2
 8014406:	68f8      	ldr	r0, [r7, #12]
 8014408:	4798      	blx	r3
 801440a:	4603      	mov	r3, r0
 801440c:	2b00      	cmp	r3, #0
 801440e:	bf0c      	ite	eq
 8014410:	2301      	moveq	r3, #1
 8014412:	2300      	movne	r3, #0
 8014414:	b2db      	uxtb	r3, r3
 8014416:	2b00      	cmp	r3, #0
 8014418:	d005      	beq.n	8014426 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xfa>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_WRITE);
 801441a:	2203      	movs	r2, #3
 801441c:	6839      	ldr	r1, [r7, #0]
 801441e:	6878      	ldr	r0, [r7, #4]
 8014420:	f000 f950 	bl	80146c4 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 8014424:	e023      	b.n	801446e <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x142>
	}

	reg_map->write(address, msg->data_ptr);
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	3304      	adds	r3, #4
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	683a      	ldr	r2, [r7, #0]
 8014430:	6892      	ldr	r2, [r2, #8]
 8014432:	8979      	ldrh	r1, [r7, #10]
 8014434:	68f8      	ldr	r0, [r7, #12]
 8014436:	4798      	blx	r3

	outgoing_msg.address_1 = msg->address_1;
 8014438:	683b      	ldr	r3, [r7, #0]
 801443a:	785a      	ldrb	r2, [r3, #1]
 801443c:	4b0d      	ldr	r3, [pc, #52]	; (8014474 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x148>)
 801443e:	705a      	strb	r2, [r3, #1]
	outgoing_msg.address_1 = msg->address_2;
 8014440:	683b      	ldr	r3, [r7, #0]
 8014442:	789a      	ldrb	r2, [r3, #2]
 8014444:	4b0b      	ldr	r3, [pc, #44]	; (8014474 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x148>)
 8014446:	705a      	strb	r2, [r3, #1]
	outgoing_msg.address_1 = msg->address_3;
 8014448:	683b      	ldr	r3, [r7, #0]
 801444a:	78da      	ldrb	r2, [r3, #3]
 801444c:	4b09      	ldr	r3, [pc, #36]	; (8014474 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x148>)
 801444e:	705a      	strb	r2, [r3, #1]
	outgoing_msg.cmd = MSG_COMMAND_ANSWER;
 8014450:	4b08      	ldr	r3, [pc, #32]	; (8014474 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x148>)
 8014452:	2203      	movs	r2, #3
 8014454:	701a      	strb	r2, [r3, #0]
	outgoing_msg.flag = 1;
 8014456:	4b07      	ldr	r3, [pc, #28]	; (8014474 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x148>)
 8014458:	2201      	movs	r2, #1
 801445a:	711a      	strb	r2, [r3, #4]
	outgoing_msg.len = 0;
 801445c:	4b05      	ldr	r3, [pc, #20]	; (8014474 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x148>)
 801445e:	2200      	movs	r2, #0
 8014460:	819a      	strh	r2, [r3, #12]

	this->uart_interface.send(&outgoing_msg);
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	3328      	adds	r3, #40	; 0x28
 8014466:	4903      	ldr	r1, [pc, #12]	; (8014474 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x148>)
 8014468:	4618      	mov	r0, r3
 801446a:	f7fe fa72 	bl	8012952 <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>

}
 801446e:	3710      	adds	r7, #16
 8014470:	46bd      	mov	sp, r7
 8014472:	bd80      	pop	{r7, pc}
 8014474:	240152a8 	.word	0x240152a8

08014478 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage>:
/* ====================================================================== */
void TWIPR_CommunicationManager::_uart_handleMsg_read_callback(
		core_comm_SerialMessage *msg) {
 8014478:	b580      	push	{r7, lr}
 801447a:	b084      	sub	sp, #16
 801447c:	af00      	add	r7, sp, #0
 801447e:	6078      	str	r0, [r7, #4]
 8014480:	6039      	str	r1, [r7, #0]

	RegisterMap *reg_map;

	switch (msg->address_1) {
 8014482:	683b      	ldr	r3, [r7, #0]
 8014484:	785b      	ldrb	r3, [r3, #1]
 8014486:	2b01      	cmp	r3, #1
 8014488:	d002      	beq.n	8014490 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x18>
 801448a:	2b02      	cmp	r3, #2
 801448c:	d004      	beq.n	8014498 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x20>
 801448e:	e007      	b.n	80144a0 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x28>
	case TWIPR_FIRMWARE_REGISTER_MAP_GENERAL: {
		reg_map = this->config.reg_map_general;
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	695b      	ldr	r3, [r3, #20]
 8014494:	60fb      	str	r3, [r7, #12]
		break;
 8014496:	e009      	b.n	80144ac <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x34>
	}
	case TWIPR_FIRMWARE_REGISTER_MAP_CONTROL: {
		reg_map = this->config.reg_map_control;
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	691b      	ldr	r3, [r3, #16]
 801449c:	60fb      	str	r3, [r7, #12]
		break;
 801449e:	e005      	b.n	80144ac <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x34>
	}
	default: {
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_WRONG_ADDRESS);
 80144a0:	2202      	movs	r2, #2
 80144a2:	6839      	ldr	r1, [r7, #0]
 80144a4:	6878      	ldr	r0, [r7, #4]
 80144a6:	f000 f90d 	bl	80146c4 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 80144aa:	e06e      	b.n	801458a <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x112>
		break;
	}
	}

	uint16_t address = uint8_to_uint16(msg->address_2, msg->address_3);
 80144ac:	683b      	ldr	r3, [r7, #0]
 80144ae:	789a      	ldrb	r2, [r3, #2]
 80144b0:	683b      	ldr	r3, [r7, #0]
 80144b2:	78db      	ldrb	r3, [r3, #3]
 80144b4:	4619      	mov	r1, r3
 80144b6:	4610      	mov	r0, r2
 80144b8:	f008 fd22 	bl	801cf00 <_Z15uint8_to_uint16hh>
 80144bc:	4603      	mov	r3, r0
 80144be:	817b      	strh	r3, [r7, #10]

	if (!reg_map->hasEntry(address)){
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	330c      	adds	r3, #12
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	897a      	ldrh	r2, [r7, #10]
 80144ca:	4611      	mov	r1, r2
 80144cc:	68f8      	ldr	r0, [r7, #12]
 80144ce:	4798      	blx	r3
 80144d0:	4603      	mov	r3, r0
 80144d2:	f083 0301 	eor.w	r3, r3, #1
 80144d6:	b2db      	uxtb	r3, r3
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d005      	beq.n	80144e8 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x70>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_WRONG_ADDRESS);
 80144dc:	2202      	movs	r2, #2
 80144de:	6839      	ldr	r1, [r7, #0]
 80144e0:	6878      	ldr	r0, [r7, #4]
 80144e2:	f000 f8ef 	bl	80146c4 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 80144e6:	e050      	b.n	801458a <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x112>
	}
	if (reg_map->getType(address) != REGISTER_ENTRY_DATA) {
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	3318      	adds	r3, #24
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	897a      	ldrh	r2, [r7, #10]
 80144f2:	4611      	mov	r1, r2
 80144f4:	68f8      	ldr	r0, [r7, #12]
 80144f6:	4798      	blx	r3
 80144f8:	4603      	mov	r3, r0
 80144fa:	2b01      	cmp	r3, #1
 80144fc:	bf14      	ite	ne
 80144fe:	2301      	movne	r3, #1
 8014500:	2300      	moveq	r3, #0
 8014502:	b2db      	uxtb	r3, r3
 8014504:	2b00      	cmp	r3, #0
 8014506:	d005      	beq.n	8014514 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x9c>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_MSG_TYPE);
 8014508:	2206      	movs	r2, #6
 801450a:	6839      	ldr	r1, [r7, #0]
 801450c:	6878      	ldr	r0, [r7, #4]
 801450e:	f000 f8d9 	bl	80146c4 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 8014512:	e03a      	b.n	801458a <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x112>
	}
	if (reg_map->getReadWriteSetting(address) == REGISTER_ENTRY_WRITE) {
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	331c      	adds	r3, #28
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	897a      	ldrh	r2, [r7, #10]
 801451e:	4611      	mov	r1, r2
 8014520:	68f8      	ldr	r0, [r7, #12]
 8014522:	4798      	blx	r3
 8014524:	4603      	mov	r3, r0
 8014526:	2b01      	cmp	r3, #1
 8014528:	bf0c      	ite	eq
 801452a:	2301      	moveq	r3, #1
 801452c:	2300      	movne	r3, #0
 801452e:	b2db      	uxtb	r3, r3
 8014530:	2b00      	cmp	r3, #0
 8014532:	d005      	beq.n	8014540 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xc8>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_READ);
 8014534:	2204      	movs	r2, #4
 8014536:	6839      	ldr	r1, [r7, #0]
 8014538:	6878      	ldr	r0, [r7, #4]
 801453a:	f000 f8c3 	bl	80146c4 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 801453e:	e024      	b.n	801458a <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x112>
	}

	// Read the entry into the outgoing message
	outgoing_msg.len = reg_map->read(address, outgoing_msg.data_ptr);
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	3310      	adds	r3, #16
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	4a11      	ldr	r2, [pc, #68]	; (8014590 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x118>)
 801454a:	6892      	ldr	r2, [r2, #8]
 801454c:	8979      	ldrh	r1, [r7, #10]
 801454e:	68f8      	ldr	r0, [r7, #12]
 8014550:	4798      	blx	r3
 8014552:	4603      	mov	r3, r0
 8014554:	b29a      	uxth	r2, r3
 8014556:	4b0e      	ldr	r3, [pc, #56]	; (8014590 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x118>)
 8014558:	819a      	strh	r2, [r3, #12]

	// Construct the outgoing message
	outgoing_msg.address_1 = msg->address_1;
 801455a:	683b      	ldr	r3, [r7, #0]
 801455c:	785a      	ldrb	r2, [r3, #1]
 801455e:	4b0c      	ldr	r3, [pc, #48]	; (8014590 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x118>)
 8014560:	705a      	strb	r2, [r3, #1]
	outgoing_msg.address_2 = msg->address_2;
 8014562:	683b      	ldr	r3, [r7, #0]
 8014564:	789a      	ldrb	r2, [r3, #2]
 8014566:	4b0a      	ldr	r3, [pc, #40]	; (8014590 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x118>)
 8014568:	709a      	strb	r2, [r3, #2]
	outgoing_msg.address_3 = msg->address_3;
 801456a:	683b      	ldr	r3, [r7, #0]
 801456c:	78da      	ldrb	r2, [r3, #3]
 801456e:	4b08      	ldr	r3, [pc, #32]	; (8014590 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x118>)
 8014570:	70da      	strb	r2, [r3, #3]
	outgoing_msg.flag = 1;
 8014572:	4b07      	ldr	r3, [pc, #28]	; (8014590 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x118>)
 8014574:	2201      	movs	r2, #1
 8014576:	711a      	strb	r2, [r3, #4]
	outgoing_msg.cmd = MSG_COMMAND_ANSWER;
 8014578:	4b05      	ldr	r3, [pc, #20]	; (8014590 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x118>)
 801457a:	2203      	movs	r2, #3
 801457c:	701a      	strb	r2, [r3, #0]

	this->uart_interface.send(&outgoing_msg);
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	3328      	adds	r3, #40	; 0x28
 8014582:	4903      	ldr	r1, [pc, #12]	; (8014590 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x118>)
 8014584:	4618      	mov	r0, r3
 8014586:	f7fe f9e4 	bl	8012952 <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>
}
 801458a:	3710      	adds	r7, #16
 801458c:	46bd      	mov	sp, r7
 801458e:	bd80      	pop	{r7, pc}
 8014590:	240152a8 	.word	0x240152a8

08014594 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage>:

/* ====================================================================== */
void TWIPR_CommunicationManager::_uart_handleMsg_func_callback(
		core_comm_SerialMessage *msg) {
 8014594:	b590      	push	{r4, r7, lr}
 8014596:	b085      	sub	sp, #20
 8014598:	af00      	add	r7, sp, #0
 801459a:	6078      	str	r0, [r7, #4]
 801459c:	6039      	str	r1, [r7, #0]
	RegisterMap *reg_map;

	switch (msg->address_1) {
 801459e:	683b      	ldr	r3, [r7, #0]
 80145a0:	785b      	ldrb	r3, [r3, #1]
 80145a2:	2b01      	cmp	r3, #1
 80145a4:	d002      	beq.n	80145ac <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x18>
 80145a6:	2b02      	cmp	r3, #2
 80145a8:	d004      	beq.n	80145b4 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x20>
 80145aa:	e007      	b.n	80145bc <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x28>
	case TWIPR_FIRMWARE_REGISTER_MAP_GENERAL: {
		reg_map = this->config.reg_map_general;
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	695b      	ldr	r3, [r3, #20]
 80145b0:	60fb      	str	r3, [r7, #12]
		break;
 80145b2:	e009      	b.n	80145c8 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x34>
	}
	case TWIPR_FIRMWARE_REGISTER_MAP_CONTROL: {
		reg_map = this->config.reg_map_control;
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	691b      	ldr	r3, [r3, #16]
 80145b8:	60fb      	str	r3, [r7, #12]
		break;
 80145ba:	e005      	b.n	80145c8 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x34>
	}
	default: {
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_WRONG_ADDRESS);
 80145bc:	2202      	movs	r2, #2
 80145be:	6839      	ldr	r1, [r7, #0]
 80145c0:	6878      	ldr	r0, [r7, #4]
 80145c2:	f000 f87f 	bl	80146c4 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 80145c6:	e077      	b.n	80146b8 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x124>
		break;
	}
	}

	uint16_t address = uint8_to_uint16(msg->address_2, msg->address_3);
 80145c8:	683b      	ldr	r3, [r7, #0]
 80145ca:	789a      	ldrb	r2, [r3, #2]
 80145cc:	683b      	ldr	r3, [r7, #0]
 80145ce:	78db      	ldrb	r3, [r3, #3]
 80145d0:	4619      	mov	r1, r3
 80145d2:	4610      	mov	r0, r2
 80145d4:	f008 fc94 	bl	801cf00 <_Z15uint8_to_uint16hh>
 80145d8:	4603      	mov	r3, r0
 80145da:	817b      	strh	r3, [r7, #10]
	if (!reg_map->hasEntry(address)){
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	330c      	adds	r3, #12
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	897a      	ldrh	r2, [r7, #10]
 80145e6:	4611      	mov	r1, r2
 80145e8:	68f8      	ldr	r0, [r7, #12]
 80145ea:	4798      	blx	r3
 80145ec:	4603      	mov	r3, r0
 80145ee:	f083 0301 	eor.w	r3, r3, #1
 80145f2:	b2db      	uxtb	r3, r3
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d005      	beq.n	8014604 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x70>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_WRONG_ADDRESS);
 80145f8:	2202      	movs	r2, #2
 80145fa:	6839      	ldr	r1, [r7, #0]
 80145fc:	6878      	ldr	r0, [r7, #4]
 80145fe:	f000 f861 	bl	80146c4 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 8014602:	e059      	b.n	80146b8 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x124>
	}
	if (reg_map->getSize(address) != msg->len) {
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	3314      	adds	r3, #20
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	897a      	ldrh	r2, [r7, #10]
 801460e:	4611      	mov	r1, r2
 8014610:	68f8      	ldr	r0, [r7, #12]
 8014612:	4798      	blx	r3
 8014614:	4603      	mov	r3, r0
 8014616:	461a      	mov	r2, r3
 8014618:	683b      	ldr	r3, [r7, #0]
 801461a:	899b      	ldrh	r3, [r3, #12]
 801461c:	429a      	cmp	r2, r3
 801461e:	bf14      	ite	ne
 8014620:	2301      	movne	r3, #1
 8014622:	2300      	moveq	r3, #0
 8014624:	b2db      	uxtb	r3, r3
 8014626:	2b00      	cmp	r3, #0
 8014628:	d005      	beq.n	8014636 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xa2>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_LEN);
 801462a:	2205      	movs	r2, #5
 801462c:	6839      	ldr	r1, [r7, #0]
 801462e:	6878      	ldr	r0, [r7, #4]
 8014630:	f000 f848 	bl	80146c4 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 8014634:	e040      	b.n	80146b8 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x124>
	}
	if (reg_map->getType(address) != REGISTER_ENTRY_FUNCTION) {
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	3318      	adds	r3, #24
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	897a      	ldrh	r2, [r7, #10]
 8014640:	4611      	mov	r1, r2
 8014642:	68f8      	ldr	r0, [r7, #12]
 8014644:	4798      	blx	r3
 8014646:	4603      	mov	r3, r0
 8014648:	2b02      	cmp	r3, #2
 801464a:	bf14      	ite	ne
 801464c:	2301      	movne	r3, #1
 801464e:	2300      	moveq	r3, #0
 8014650:	b2db      	uxtb	r3, r3
 8014652:	2b00      	cmp	r3, #0
 8014654:	d004      	beq.n	8014660 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xcc>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_MSG_TYPE);
 8014656:	2206      	movs	r2, #6
 8014658:	6839      	ldr	r1, [r7, #0]
 801465a:	6878      	ldr	r0, [r7, #4]
 801465c:	f000 f832 	bl	80146c4 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
	}

	// Execute the function and store the data
	uint8_t ret_size = reg_map->execute(address, msg->data_ptr,
			outgoing_msg.data_ptr);
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	3320      	adds	r3, #32
 8014666:	681c      	ldr	r4, [r3, #0]
	uint8_t ret_size = reg_map->execute(address, msg->data_ptr,
 8014668:	683b      	ldr	r3, [r7, #0]
 801466a:	689a      	ldr	r2, [r3, #8]
 801466c:	4b14      	ldr	r3, [pc, #80]	; (80146c0 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x12c>)
 801466e:	689b      	ldr	r3, [r3, #8]
 8014670:	8979      	ldrh	r1, [r7, #10]
 8014672:	68f8      	ldr	r0, [r7, #12]
 8014674:	47a0      	blx	r4
 8014676:	4603      	mov	r3, r0
 8014678:	727b      	strb	r3, [r7, #9]

	// Send back a message if the function returns something
	if (ret_size > 0) {
 801467a:	7a7b      	ldrb	r3, [r7, #9]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d01b      	beq.n	80146b8 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x124>
		outgoing_msg.address_1 = msg->address_1;
 8014680:	683b      	ldr	r3, [r7, #0]
 8014682:	785a      	ldrb	r2, [r3, #1]
 8014684:	4b0e      	ldr	r3, [pc, #56]	; (80146c0 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x12c>)
 8014686:	705a      	strb	r2, [r3, #1]
		outgoing_msg.address_2 = msg->address_2;
 8014688:	683b      	ldr	r3, [r7, #0]
 801468a:	789a      	ldrb	r2, [r3, #2]
 801468c:	4b0c      	ldr	r3, [pc, #48]	; (80146c0 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x12c>)
 801468e:	709a      	strb	r2, [r3, #2]
		outgoing_msg.address_3 = msg->address_3;
 8014690:	683b      	ldr	r3, [r7, #0]
 8014692:	78da      	ldrb	r2, [r3, #3]
 8014694:	4b0a      	ldr	r3, [pc, #40]	; (80146c0 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x12c>)
 8014696:	70da      	strb	r2, [r3, #3]
		outgoing_msg.flag = 1;
 8014698:	4b09      	ldr	r3, [pc, #36]	; (80146c0 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x12c>)
 801469a:	2201      	movs	r2, #1
 801469c:	711a      	strb	r2, [r3, #4]
		outgoing_msg.cmd = MSG_COMMAND_ANSWER;
 801469e:	4b08      	ldr	r3, [pc, #32]	; (80146c0 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x12c>)
 80146a0:	2203      	movs	r2, #3
 80146a2:	701a      	strb	r2, [r3, #0]
		outgoing_msg.len = ret_size;
 80146a4:	7a7b      	ldrb	r3, [r7, #9]
 80146a6:	b29a      	uxth	r2, r3
 80146a8:	4b05      	ldr	r3, [pc, #20]	; (80146c0 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x12c>)
 80146aa:	819a      	strh	r2, [r3, #12]
		this->uart_interface.send(&outgoing_msg);
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	3328      	adds	r3, #40	; 0x28
 80146b0:	4903      	ldr	r1, [pc, #12]	; (80146c0 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x12c>)
 80146b2:	4618      	mov	r0, r3
 80146b4:	f7fe f94d 	bl	8012952 <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>
	}
}
 80146b8:	3714      	adds	r7, #20
 80146ba:	46bd      	mov	sp, r7
 80146bc:	bd90      	pop	{r4, r7, pc}
 80146be:	bf00      	nop
 80146c0:	240152a8 	.word	0x240152a8

080146c4 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>:

/* ====================================================================== */
void TWIPR_CommunicationManager::_uartResponseError(core_comm_SerialMessage* incoming_message, uint8_t error_code){
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b084      	sub	sp, #16
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	60f8      	str	r0, [r7, #12]
 80146cc:	60b9      	str	r1, [r7, #8]
 80146ce:	4613      	mov	r3, r2
 80146d0:	71fb      	strb	r3, [r7, #7]
	outgoing_msg.address_1 = incoming_message->address_1;
 80146d2:	68bb      	ldr	r3, [r7, #8]
 80146d4:	785a      	ldrb	r2, [r3, #1]
 80146d6:	4b10      	ldr	r3, [pc, #64]	; (8014718 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 80146d8:	705a      	strb	r2, [r3, #1]
	outgoing_msg.address_2 = incoming_message->address_2;
 80146da:	68bb      	ldr	r3, [r7, #8]
 80146dc:	789a      	ldrb	r2, [r3, #2]
 80146de:	4b0e      	ldr	r3, [pc, #56]	; (8014718 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 80146e0:	709a      	strb	r2, [r3, #2]
	outgoing_msg.address_3 = incoming_message->address_3;
 80146e2:	68bb      	ldr	r3, [r7, #8]
 80146e4:	78da      	ldrb	r2, [r3, #3]
 80146e6:	4b0c      	ldr	r3, [pc, #48]	; (8014718 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 80146e8:	70da      	strb	r2, [r3, #3]
	outgoing_msg.cmd = MSG_COMMAND_ANSWER;
 80146ea:	4b0b      	ldr	r3, [pc, #44]	; (8014718 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 80146ec:	2203      	movs	r2, #3
 80146ee:	701a      	strb	r2, [r3, #0]
	outgoing_msg.flag = 0;
 80146f0:	4b09      	ldr	r3, [pc, #36]	; (8014718 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 80146f2:	2200      	movs	r2, #0
 80146f4:	711a      	strb	r2, [r3, #4]
	outgoing_msg.len = 1;
 80146f6:	4b08      	ldr	r3, [pc, #32]	; (8014718 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 80146f8:	2201      	movs	r2, #1
 80146fa:	819a      	strh	r2, [r3, #12]
	outgoing_msg.data_ptr[0] = error_code;
 80146fc:	4b06      	ldr	r3, [pc, #24]	; (8014718 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 80146fe:	689b      	ldr	r3, [r3, #8]
 8014700:	79fa      	ldrb	r2, [r7, #7]
 8014702:	701a      	strb	r2, [r3, #0]
	this->uart_interface.send(&outgoing_msg);
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	3328      	adds	r3, #40	; 0x28
 8014708:	4903      	ldr	r1, [pc, #12]	; (8014718 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 801470a:	4618      	mov	r0, r3
 801470c:	f7fe f921 	bl	8012952 <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>
}
 8014710:	bf00      	nop
 8014712:	3710      	adds	r7, #16
 8014714:	46bd      	mov	sp, r7
 8014716:	bd80      	pop	{r7, pc}
 8014718:	240152a8 	.word	0x240152a8

0801471c <_ZN26TWIPR_CommunicationManager26_spi_rxTrajectory_callbackEt>:
/* ====================================================================== */
void TWIPR_CommunicationManager::_spi_rxTrajectory_callback(uint16_t len) {
 801471c:	b580      	push	{r7, lr}
 801471e:	b082      	sub	sp, #8
 8014720:	af00      	add	r7, sp, #0
 8014722:	6078      	str	r0, [r7, #4]
 8014724:	460b      	mov	r3, r1
 8014726:	807b      	strh	r3, [r7, #2]
	// We have received a new trajectory by the CM4
	if (this->_callbacks.new_trajectory.registered){
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801472e:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8014732:	2b00      	cmp	r3, #0
 8014734:	d008      	beq.n	8014748 <_ZN26TWIPR_CommunicationManager26_spi_rxTrajectory_callbackEt+0x2c>
		this->_callbacks.new_trajectory.call(len);
 8014736:	687a      	ldr	r2, [r7, #4]
 8014738:	f241 530c 	movw	r3, #5388	; 0x150c
 801473c:	4413      	add	r3, r2
 801473e:	887a      	ldrh	r2, [r7, #2]
 8014740:	4611      	mov	r1, r2
 8014742:	4618      	mov	r0, r3
 8014744:	f7fd fec6 	bl	80124d4 <_ZN19core_utils_CallbackIvtE4callEt>
	}
	this->spi_interface.provideSampleData();
 8014748:	687a      	ldr	r2, [r7, #4]
 801474a:	f241 4344 	movw	r3, #5188	; 0x1444
 801474e:	4413      	add	r3, r2
 8014750:	4618      	mov	r0, r3
 8014752:	f7fd fddd 	bl	8012310 <_ZN23TWIPR_SPI_Communication17provideSampleDataEv>
}
 8014756:	bf00      	nop
 8014758:	3708      	adds	r7, #8
 801475a:	46bd      	mov	sp, r7
 801475c:	bd80      	pop	{r7, pc}

0801475e <_ZN26TWIPR_CommunicationManager16sampleBufferFullEv>:
/* ====================================================================== */
void TWIPR_CommunicationManager::sampleBufferFull(){
 801475e:	b580      	push	{r7, lr}
 8014760:	b082      	sub	sp, #8
 8014762:	af00      	add	r7, sp, #0
 8014764:	6078      	str	r0, [r7, #4]
	this->spi_interface.stopTransmission();
 8014766:	687a      	ldr	r2, [r7, #4]
 8014768:	f241 4344 	movw	r3, #5188	; 0x1444
 801476c:	4413      	add	r3, r2
 801476e:	4618      	mov	r0, r3
 8014770:	f7fd fe43 	bl	80123fa <_ZN23TWIPR_SPI_Communication16stopTransmissionEv>
	this->spi_interface.provideSampleData();
 8014774:	687a      	ldr	r2, [r7, #4]
 8014776:	f241 4344 	movw	r3, #5188	; 0x1444
 801477a:	4413      	add	r3, r2
 801477c:	4618      	mov	r0, r3
 801477e:	f7fd fdc7 	bl	8012310 <_ZN23TWIPR_SPI_Communication17provideSampleDataEv>
	this->config.notification_gpio_tx.write(0);
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	3308      	adds	r3, #8
 8014786:	2100      	movs	r1, #0
 8014788:	4618      	mov	r0, r3
 801478a:	f008 fc42 	bl	801d012 <_ZN15core_utils_GPIO5writeEh>
	// Notify the CM4 that the sample buffer is full by writing a HIGH to the communication pin
	this->config.notification_gpio_tx.write(1);
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	3308      	adds	r3, #8
 8014792:	2101      	movs	r1, #1
 8014794:	4618      	mov	r0, r3
 8014796:	f008 fc3c 	bl	801d012 <_ZN15core_utils_GPIO5writeEh>

}
 801479a:	bf00      	nop
 801479c:	3708      	adds	r7, #8
 801479e:	46bd      	mov	sp, r7
 80147a0:	bd80      	pop	{r7, pc}

080147a2 <_ZN26TWIPR_CommunicationManager23_spi_txSamples_callbackEt>:
/* ====================================================================== */
void TWIPR_CommunicationManager::_spi_txSamples_callback(uint16_t len) {
 80147a2:	b580      	push	{r7, lr}
 80147a4:	b082      	sub	sp, #8
 80147a6:	af00      	add	r7, sp, #0
 80147a8:	6078      	str	r0, [r7, #4]
 80147aa:	460b      	mov	r3, r1
 80147ac:	807b      	strh	r3, [r7, #2]
	this->config.notification_gpio_tx.write(0);
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	3308      	adds	r3, #8
 80147b2:	2100      	movs	r1, #0
 80147b4:	4618      	mov	r0, r3
 80147b6:	f008 fc2c 	bl	801d012 <_ZN15core_utils_GPIO5writeEh>
}
 80147ba:	bf00      	nop
 80147bc:	3708      	adds	r7, #8
 80147be:	46bd      	mov	sp, r7
 80147c0:	bd80      	pop	{r7, pc}
	...

080147c4 <_ZN26TWIPR_CommunicationManager16spi_pin_callbackEv>:


/* ====================================================================== */
void TWIPR_CommunicationManager::spi_pin_callback() {
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b084      	sub	sp, #16
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	6078      	str	r0, [r7, #4]
	GPIO_PinState pin_state = HAL_GPIO_ReadPin(SPI_PIN_GPIOx, SPI_PIN_PIN);
 80147cc:	2104      	movs	r1, #4
 80147ce:	480e      	ldr	r0, [pc, #56]	; (8014808 <_ZN26TWIPR_CommunicationManager16spi_pin_callbackEv+0x44>)
 80147d0:	f7f0 fbb0 	bl	8004f34 <HAL_GPIO_ReadPin>
 80147d4:	4603      	mov	r3, r0
 80147d6:	73fb      	strb	r3, [r7, #15]

	if (pin_state == GPIO_PIN_SET){ // Trajectory Mode
 80147d8:	7bfb      	ldrb	r3, [r7, #15]
 80147da:	2b01      	cmp	r3, #1
 80147dc:	d10e      	bne.n	80147fc <_ZN26TWIPR_CommunicationManager16spi_pin_callbackEv+0x38>
		this->spi_interface.stopTransmission();
 80147de:	687a      	ldr	r2, [r7, #4]
 80147e0:	f241 4344 	movw	r3, #5188	; 0x1444
 80147e4:	4413      	add	r3, r2
 80147e6:	4618      	mov	r0, r3
 80147e8:	f7fd fe07 	bl	80123fa <_ZN23TWIPR_SPI_Communication16stopTransmissionEv>
		this->spi_interface.receiveTrajectory();
 80147ec:	687a      	ldr	r2, [r7, #4]
 80147ee:	f241 4344 	movw	r3, #5188	; 0x1444
 80147f2:	4413      	add	r3, r2
 80147f4:	4618      	mov	r0, r3
 80147f6:	f7fd fd7b 	bl	80122f0 <_ZN23TWIPR_SPI_Communication17receiveTrajectoryEv>
	} else { // Sample Mode
		nop();
	}
}
 80147fa:	e001      	b.n	8014800 <_ZN26TWIPR_CommunicationManager16spi_pin_callbackEv+0x3c>
		nop();
 80147fc:	f7fd ffaa 	bl	8012754 <_Z3nopv>
}
 8014800:	bf00      	nop
 8014802:	3710      	adds	r7, #16
 8014804:	46bd      	mov	sp, r7
 8014806:	bd80      	pop	{r7, pc}
 8014808:	58020400 	.word	0x58020400

0801480c <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>:
	core_utils_Callback(T *object, R (T::*member)(A)) {
 801480c:	b5b0      	push	{r4, r5, r7, lr}
 801480e:	b08a      	sub	sp, #40	; 0x28
 8014810:	af00      	add	r7, sp, #0
 8014812:	60f8      	str	r0, [r7, #12]
 8014814:	60b9      	str	r1, [r7, #8]
 8014816:	4639      	mov	r1, r7
 8014818:	e881 000c 	stmia.w	r1, {r2, r3}
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	4618      	mov	r0, r3
 8014820:	f7fd fc5e 	bl	80120e0 <_ZN8CallbackC1Ev>
 8014824:	4a12      	ldr	r2, [pc, #72]	; (8014870 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E+0x64>)
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	601a      	str	r2, [r3, #0]
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	2200      	movs	r2, #0
 801482e:	711a      	strb	r2, [r3, #4]
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	3308      	adds	r3, #8
 8014834:	2100      	movs	r1, #0
 8014836:	4618      	mov	r0, r3
 8014838:	f7fe fc8a 	bl	8013150 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEC1EPFvS1_E>
		_fp = core_utils_FunctionPointer<R,A>(object, member);
 801483c:	f107 0010 	add.w	r0, r7, #16
 8014840:	463b      	mov	r3, r7
 8014842:	cb0c      	ldmia	r3, {r2, r3}
 8014844:	68b9      	ldr	r1, [r7, #8]
 8014846:	f000 f849 	bl	80148dc <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	f103 0408 	add.w	r4, r3, #8
 8014850:	f107 0510 	add.w	r5, r7, #16
 8014854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014858:	e895 0003 	ldmia.w	r5, {r0, r1}
 801485c:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	2201      	movs	r2, #1
 8014864:	711a      	strb	r2, [r3, #4]
	}
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	4618      	mov	r0, r3
 801486a:	3728      	adds	r7, #40	; 0x28
 801486c:	46bd      	mov	sp, r7
 801486e:	bdb0      	pop	{r4, r5, r7, pc}
 8014870:	080206bc 	.word	0x080206bc

08014874 <_ZN19core_utils_CallbackIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE>:
	core_utils_Callback(T *object, R (T::*member)(A)) {
 8014874:	b5b0      	push	{r4, r5, r7, lr}
 8014876:	b08a      	sub	sp, #40	; 0x28
 8014878:	af00      	add	r7, sp, #0
 801487a:	60f8      	str	r0, [r7, #12]
 801487c:	60b9      	str	r1, [r7, #8]
 801487e:	4639      	mov	r1, r7
 8014880:	e881 000c 	stmia.w	r1, {r2, r3}
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	4618      	mov	r0, r3
 8014888:	f7fd fc2a 	bl	80120e0 <_ZN8CallbackC1Ev>
 801488c:	4a12      	ldr	r2, [pc, #72]	; (80148d8 <_ZN19core_utils_CallbackIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE+0x64>)
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	601a      	str	r2, [r3, #0]
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	2200      	movs	r2, #0
 8014896:	711a      	strb	r2, [r3, #4]
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	3308      	adds	r3, #8
 801489c:	2100      	movs	r1, #0
 801489e:	4618      	mov	r0, r3
 80148a0:	f7fd fe42 	bl	8012528 <_ZN26core_utils_FunctionPointerIvtEC1EPFvtE>
		_fp = core_utils_FunctionPointer<R,A>(object, member);
 80148a4:	f107 0010 	add.w	r0, r7, #16
 80148a8:	463b      	mov	r3, r7
 80148aa:	cb0c      	ldmia	r3, {r2, r3}
 80148ac:	68b9      	ldr	r1, [r7, #8]
 80148ae:	f000 f828 	bl	8014902 <_ZN26core_utils_FunctionPointerIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE>
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	f103 0408 	add.w	r4, r3, #8
 80148b8:	f107 0510 	add.w	r5, r7, #16
 80148bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80148be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80148c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80148c4:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	2201      	movs	r2, #1
 80148cc:	711a      	strb	r2, [r3, #4]
	}
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	4618      	mov	r0, r3
 80148d2:	3728      	adds	r7, #40	; 0x28
 80148d4:	46bd      	mov	sp, r7
 80148d6:	bdb0      	pop	{r4, r5, r7, pc}
 80148d8:	08020630 	.word	0x08020630

080148dc <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 80148dc:	b580      	push	{r7, lr}
 80148de:	b084      	sub	sp, #16
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	60f8      	str	r0, [r7, #12]
 80148e4:	60b9      	str	r1, [r7, #8]
 80148e6:	4639      	mov	r1, r7
 80148e8:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 80148ec:	463b      	mov	r3, r7
 80148ee:	cb0c      	ldmia	r3, {r2, r3}
 80148f0:	68b9      	ldr	r1, [r7, #8]
 80148f2:	68f8      	ldr	r0, [r7, #12]
 80148f4:	f000 f818 	bl	8014928 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE6attachI26TWIPR_CommunicationManagerEEvPT_MS5_FvS1_E>
    }
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	4618      	mov	r0, r3
 80148fc:	3710      	adds	r7, #16
 80148fe:	46bd      	mov	sp, r7
 8014900:	bd80      	pop	{r7, pc}

08014902 <_ZN26core_utils_FunctionPointerIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8014902:	b580      	push	{r7, lr}
 8014904:	b084      	sub	sp, #16
 8014906:	af00      	add	r7, sp, #0
 8014908:	60f8      	str	r0, [r7, #12]
 801490a:	60b9      	str	r1, [r7, #8]
 801490c:	4639      	mov	r1, r7
 801490e:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8014912:	463b      	mov	r3, r7
 8014914:	cb0c      	ldmia	r3, {r2, r3}
 8014916:	68b9      	ldr	r1, [r7, #8]
 8014918:	68f8      	ldr	r0, [r7, #12]
 801491a:	f000 f823 	bl	8014964 <_ZN26core_utils_FunctionPointerIvtE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvtE>
    }
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	4618      	mov	r0, r3
 8014922:	3710      	adds	r7, #16
 8014924:	46bd      	mov	sp, r7
 8014926:	bd80      	pop	{r7, pc}

08014928 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE6attachI26TWIPR_CommunicationManagerEEvPT_MS5_FvS1_E>:
    void attach(T *object, R (T::*member)(A1)) {
 8014928:	b480      	push	{r7}
 801492a:	b085      	sub	sp, #20
 801492c:	af00      	add	r7, sp, #0
 801492e:	60f8      	str	r0, [r7, #12]
 8014930:	60b9      	str	r1, [r7, #8]
 8014932:	4639      	mov	r1, r7
 8014934:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	68ba      	ldr	r2, [r7, #8]
 801493c:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	3304      	adds	r3, #4
 8014942:	461a      	mov	r2, r3
 8014944:	463b      	mov	r3, r7
 8014946:	e893 0003 	ldmia.w	r3, {r0, r1}
 801494a:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	4a03      	ldr	r2, [pc, #12]	; (8014960 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE6attachI26TWIPR_CommunicationManagerEEvPT_MS5_FvS1_E+0x38>)
 8014952:	615a      	str	r2, [r3, #20]
    }
 8014954:	bf00      	nop
 8014956:	3714      	adds	r7, #20
 8014958:	46bd      	mov	sp, r7
 801495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801495e:	4770      	bx	lr
 8014960:	080149a1 	.word	0x080149a1

08014964 <_ZN26core_utils_FunctionPointerIvtE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvtE>:
    void attach(T *object, R (T::*member)(A1)) {
 8014964:	b480      	push	{r7}
 8014966:	b085      	sub	sp, #20
 8014968:	af00      	add	r7, sp, #0
 801496a:	60f8      	str	r0, [r7, #12]
 801496c:	60b9      	str	r1, [r7, #8]
 801496e:	4639      	mov	r1, r7
 8014970:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	68ba      	ldr	r2, [r7, #8]
 8014978:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	3304      	adds	r3, #4
 801497e:	461a      	mov	r2, r3
 8014980:	463b      	mov	r3, r7
 8014982:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014986:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	4a03      	ldr	r2, [pc, #12]	; (801499c <_ZN26core_utils_FunctionPointerIvtE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvtE+0x38>)
 801498e:	615a      	str	r2, [r3, #20]
    }
 8014990:	bf00      	nop
 8014992:	3714      	adds	r7, #20
 8014994:	46bd      	mov	sp, r7
 8014996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801499a:	4770      	bx	lr
 801499c:	080149f5 	.word	0x080149f5

080149a0 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE12membercallerI26TWIPR_CommunicationManagerEEvPvPjS1_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 80149a0:	b580      	push	{r7, lr}
 80149a2:	b086      	sub	sp, #24
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	60f8      	str	r0, [r7, #12]
 80149a8:	60b9      	str	r1, [r7, #8]
 80149aa:	607a      	str	r2, [r7, #4]
        T* o = static_cast<T*>(object);
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 80149b0:	68bb      	ldr	r3, [r7, #8]
 80149b2:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 80149b4:	693b      	ldr	r3, [r7, #16]
 80149b6:	685b      	ldr	r3, [r3, #4]
 80149b8:	105b      	asrs	r3, r3, #1
 80149ba:	461a      	mov	r2, r3
 80149bc:	697b      	ldr	r3, [r7, #20]
 80149be:	1898      	adds	r0, r3, r2
 80149c0:	693b      	ldr	r3, [r7, #16]
 80149c2:	685b      	ldr	r3, [r3, #4]
 80149c4:	f003 0301 	and.w	r3, r3, #1
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d00b      	beq.n	80149e4 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE12membercallerI26TWIPR_CommunicationManagerEEvPvPjS1_+0x44>
 80149cc:	693b      	ldr	r3, [r7, #16]
 80149ce:	685b      	ldr	r3, [r3, #4]
 80149d0:	105b      	asrs	r3, r3, #1
 80149d2:	461a      	mov	r2, r3
 80149d4:	697b      	ldr	r3, [r7, #20]
 80149d6:	4413      	add	r3, r2
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	693a      	ldr	r2, [r7, #16]
 80149dc:	6812      	ldr	r2, [r2, #0]
 80149de:	4413      	add	r3, r2
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	e001      	b.n	80149e8 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE12membercallerI26TWIPR_CommunicationManagerEEvPvPjS1_+0x48>
 80149e4:	693b      	ldr	r3, [r7, #16]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	6879      	ldr	r1, [r7, #4]
 80149ea:	4798      	blx	r3
 80149ec:	bf00      	nop
    }
 80149ee:	3718      	adds	r7, #24
 80149f0:	46bd      	mov	sp, r7
 80149f2:	bd80      	pop	{r7, pc}

080149f4 <_ZN26core_utils_FunctionPointerIvtE12membercallerI26TWIPR_CommunicationManagerEEvPvPjt>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 80149f4:	b580      	push	{r7, lr}
 80149f6:	b086      	sub	sp, #24
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	60f8      	str	r0, [r7, #12]
 80149fc:	60b9      	str	r1, [r7, #8]
 80149fe:	4613      	mov	r3, r2
 8014a00:	80fb      	strh	r3, [r7, #6]
        T* o = static_cast<T*>(object);
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8014a06:	68bb      	ldr	r3, [r7, #8]
 8014a08:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 8014a0a:	693b      	ldr	r3, [r7, #16]
 8014a0c:	685b      	ldr	r3, [r3, #4]
 8014a0e:	105b      	asrs	r3, r3, #1
 8014a10:	461a      	mov	r2, r3
 8014a12:	697b      	ldr	r3, [r7, #20]
 8014a14:	1898      	adds	r0, r3, r2
 8014a16:	693b      	ldr	r3, [r7, #16]
 8014a18:	685b      	ldr	r3, [r3, #4]
 8014a1a:	f003 0301 	and.w	r3, r3, #1
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d00b      	beq.n	8014a3a <_ZN26core_utils_FunctionPointerIvtE12membercallerI26TWIPR_CommunicationManagerEEvPvPjt+0x46>
 8014a22:	693b      	ldr	r3, [r7, #16]
 8014a24:	685b      	ldr	r3, [r3, #4]
 8014a26:	105b      	asrs	r3, r3, #1
 8014a28:	461a      	mov	r2, r3
 8014a2a:	697b      	ldr	r3, [r7, #20]
 8014a2c:	4413      	add	r3, r2
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	693a      	ldr	r2, [r7, #16]
 8014a32:	6812      	ldr	r2, [r2, #0]
 8014a34:	4413      	add	r3, r2
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	e001      	b.n	8014a3e <_ZN26core_utils_FunctionPointerIvtE12membercallerI26TWIPR_CommunicationManagerEEvPvPjt+0x4a>
 8014a3a:	693b      	ldr	r3, [r7, #16]
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	88fa      	ldrh	r2, [r7, #6]
 8014a40:	4611      	mov	r1, r2
 8014a42:	4798      	blx	r3
 8014a44:	bf00      	nop
    }
 8014a46:	3718      	adds	r7, #24
 8014a48:	46bd      	mov	sp, r7
 8014a4a:	bd80      	pop	{r7, pc}

08014a4c <_ZN22TWIPR_BalancingControlC1Ev>:
 *      Author: Dustin Lehmann
 */

#include <twipr_balancing_control.h>

TWIPR_BalancingControl::TWIPR_BalancingControl() {
 8014a4c:	b480      	push	{r7}
 8014a4e:	b083      	sub	sp, #12
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	6078      	str	r0, [r7, #4]
	this->mode = TWIPR_BALANCING_CONTROL_MODE_OFF;
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	2200      	movs	r2, #0
 8014a58:	705a      	strb	r2, [r3, #1]
	this->status = TWIPR_BALANCING_CONTROL_STATUS_NONE;
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	2200      	movs	r2, #0
 8014a5e:	701a      	strb	r2, [r3, #0]
}
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	4618      	mov	r0, r3
 8014a64:	370c      	adds	r7, #12
 8014a66:	46bd      	mov	sp, r7
 8014a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a6c:	4770      	bx	lr

08014a6e <_ZN22TWIPR_BalancingControl4initE32twipr_balancing_control_config_t>:

/* ========================================================================= */
void TWIPR_BalancingControl::init(twipr_balancing_control_config_t config) {
 8014a6e:	b084      	sub	sp, #16
 8014a70:	b4b0      	push	{r4, r5, r7}
 8014a72:	b083      	sub	sp, #12
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	6078      	str	r0, [r7, #4]
 8014a78:	f107 001c 	add.w	r0, r7, #28
 8014a7c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	1d1c      	adds	r4, r3, #4
 8014a84:	f107 051c 	add.w	r5, r7, #28
 8014a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014a8c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014a90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	this->status = TWIPR_BALANCING_CONTROL_STATUS_IDLE;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	2201      	movs	r2, #1
 8014a98:	701a      	strb	r2, [r3, #0]
}
 8014a9a:	bf00      	nop
 8014a9c:	370c      	adds	r7, #12
 8014a9e:	46bd      	mov	sp, r7
 8014aa0:	bcb0      	pop	{r4, r5, r7}
 8014aa2:	b004      	add	sp, #16
 8014aa4:	4770      	bx	lr

08014aa6 <_ZN22TWIPR_BalancingControl5startEv>:

/* ========================================================================= */
void TWIPR_BalancingControl::start() {
 8014aa6:	b580      	push	{r7, lr}
 8014aa8:	b082      	sub	sp, #8
 8014aaa:	af00      	add	r7, sp, #0
 8014aac:	6078      	str	r0, [r7, #4]
	if (this->status == TWIPR_BALANCING_CONTROL_STATUS_NONE
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	f993 3000 	ldrsb.w	r3, [r3]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d005      	beq.n	8014ac4 <_ZN22TWIPR_BalancingControl5startEv+0x1e>
			|| this->status == TWIPR_BALANCING_CONTROL_STATUS_ERROR) {
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	f993 3000 	ldrsb.w	r3, [r3]
 8014abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ac2:	d103      	bne.n	8014acc <_ZN22TWIPR_BalancingControl5startEv+0x26>
		twipr_error_handler(TWIPR_BALANCING_CONTROL_ERROR_INIT);
 8014ac4:	f240 6002 	movw	r0, #1538	; 0x602
 8014ac8:	f003 fa5e 	bl	8017f88 <_Z19twipr_error_handlerm>
	}
	this->status = TWIPR_BALANCING_CONTROL_STATUS_RUNNING;
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	2202      	movs	r2, #2
 8014ad0:	701a      	strb	r2, [r3, #0]
}
 8014ad2:	bf00      	nop
 8014ad4:	3708      	adds	r7, #8
 8014ad6:	46bd      	mov	sp, r7
 8014ad8:	bd80      	pop	{r7, pc}
	...

08014adc <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t>:

/* ========================================================================= */
void TWIPR_BalancingControl::update(twipr_estimation_state_t state,
		twipr_balancing_control_input_t input,
		twipr_balancing_control_output_t *output) {
 8014adc:	b084      	sub	sp, #16
 8014ade:	b580      	push	{r7, lr}
 8014ae0:	b088      	sub	sp, #32
 8014ae2:	af04      	add	r7, sp, #16
 8014ae4:	60f8      	str	r0, [r7, #12]
 8014ae6:	f107 001c 	add.w	r0, r7, #28
 8014aea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014aee:	eeb0 7a40 	vmov.f32	s14, s0
 8014af2:	eef0 7a60 	vmov.f32	s15, s1
 8014af6:	ed87 7a01 	vstr	s14, [r7, #4]
 8014afa:	edc7 7a02 	vstr	s15, [r7, #8]

	switch (this->status) {
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	f993 3000 	ldrsb.w	r3, [r3]
 8014b04:	3301      	adds	r3, #1
 8014b06:	2b03      	cmp	r3, #3
 8014b08:	d858      	bhi.n	8014bbc <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
 8014b0a:	a201      	add	r2, pc, #4	; (adr r2, 8014b10 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0x34>)
 8014b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b10:	08014b45 	.word	0x08014b45
 8014b14:	08014b21 	.word	0x08014b21
 8014b18:	08014b33 	.word	0x08014b33
 8014b1c:	08014b57 	.word	0x08014b57
	case TWIPR_BALANCING_CONTROL_STATUS_NONE: {
		output->u_1 = 0;
 8014b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b22:	f04f 0200 	mov.w	r2, #0
 8014b26:	601a      	str	r2, [r3, #0]
		output->u_2 = 0;
 8014b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b2a:	f04f 0200 	mov.w	r2, #0
 8014b2e:	605a      	str	r2, [r3, #4]
		break;
 8014b30:	e044      	b.n	8014bbc <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
	}
	case TWIPR_BALANCING_CONTROL_STATUS_IDLE: {
		output->u_1 = 0;
 8014b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b34:	f04f 0200 	mov.w	r2, #0
 8014b38:	601a      	str	r2, [r3, #0]
		output->u_2 = 0;
 8014b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b3c:	f04f 0200 	mov.w	r2, #0
 8014b40:	605a      	str	r2, [r3, #4]
		break;
 8014b42:	e03b      	b.n	8014bbc <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
	}
	case TWIPR_BALANCING_CONTROL_STATUS_ERROR: {
		output->u_1 = 0;
 8014b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b46:	f04f 0200 	mov.w	r2, #0
 8014b4a:	601a      	str	r2, [r3, #0]
		output->u_2 = 0;
 8014b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b4e:	f04f 0200 	mov.w	r2, #0
 8014b52:	605a      	str	r2, [r3, #4]
		break;
 8014b54:	e032      	b.n	8014bbc <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
	}
	case TWIPR_BALANCING_CONTROL_STATUS_RUNNING: {
		switch (this->mode) {
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	785b      	ldrb	r3, [r3, #1]
 8014b5a:	2b02      	cmp	r3, #2
 8014b5c:	d016      	beq.n	8014b8c <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xb0>
 8014b5e:	2b02      	cmp	r3, #2
 8014b60:	dc2c      	bgt.n	8014bbc <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d002      	beq.n	8014b6c <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0x90>
 8014b66:	2b01      	cmp	r3, #1
 8014b68:	d009      	beq.n	8014b7e <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xa2>
			this->_calculateOutput(state, input, output);
		}
		}
	}
	}
}
 8014b6a:	e027      	b.n	8014bbc <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
			output->u_1 = 0;
 8014b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b6e:	f04f 0200 	mov.w	r2, #0
 8014b72:	601a      	str	r2, [r3, #0]
			output->u_2 = 0;
 8014b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b76:	f04f 0200 	mov.w	r2, #0
 8014b7a:	605a      	str	r2, [r3, #4]
			break;
 8014b7c:	e01e      	b.n	8014bbc <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
			output->u_1 = input.u_1;
 8014b7e:	687a      	ldr	r2, [r7, #4]
 8014b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b82:	601a      	str	r2, [r3, #0]
			output->u_2 = input.u_2;
 8014b84:	68ba      	ldr	r2, [r7, #8]
 8014b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b88:	605a      	str	r2, [r3, #4]
			break;
 8014b8a:	e017      	b.n	8014bbc <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
			this->_calculateOutput(state, input, output);
 8014b8c:	ed97 7a01 	vldr	s14, [r7, #4]
 8014b90:	edd7 7a02 	vldr	s15, [r7, #8]
 8014b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b96:	9302      	str	r3, [sp, #8]
 8014b98:	466a      	mov	r2, sp
 8014b9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014b9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014ba2:	e882 0003 	stmia.w	r2, {r0, r1}
 8014ba6:	f107 031c 	add.w	r3, r7, #28
 8014baa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014bac:	eeb0 0a47 	vmov.f32	s0, s14
 8014bb0:	eef0 0a67 	vmov.f32	s1, s15
 8014bb4:	68f8      	ldr	r0, [r7, #12]
 8014bb6:	f000 f809 	bl	8014bcc <_ZN22TWIPR_BalancingControl16_calculateOutputE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t>
}
 8014bba:	e7ff      	b.n	8014bbc <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
 8014bbc:	bf00      	nop
 8014bbe:	3710      	adds	r7, #16
 8014bc0:	46bd      	mov	sp, r7
 8014bc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014bc6:	b004      	add	sp, #16
 8014bc8:	4770      	bx	lr
 8014bca:	bf00      	nop

08014bcc <_ZN22TWIPR_BalancingControl16_calculateOutputE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t>:
/* ========================================================================= */
void TWIPR_BalancingControl::_calculateOutput(twipr_estimation_state_t state,
		twipr_balancing_control_input_t input,
		twipr_balancing_control_output_t *output) {
 8014bcc:	b084      	sub	sp, #16
 8014bce:	b480      	push	{r7}
 8014bd0:	b085      	sub	sp, #20
 8014bd2:	af00      	add	r7, sp, #0
 8014bd4:	60f8      	str	r0, [r7, #12]
 8014bd6:	f107 001c 	add.w	r0, r7, #28
 8014bda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014bde:	eeb0 7a40 	vmov.f32	s14, s0
 8014be2:	eef0 7a60 	vmov.f32	s15, s1
 8014be6:	ed87 7a01 	vstr	s14, [r7, #4]
 8014bea:	edc7 7a02 	vstr	s15, [r7, #8]
	output->u_1 = this->config.K[0] * state.v + this->config.K[1] * state.theta
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	ed93 7a01 	vldr	s14, [r3, #4]
 8014bf4:	edd7 7a07 	vldr	s15, [r7, #28]
 8014bf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	edd3 6a02 	vldr	s13, [r3, #8]
 8014c02:	edd7 7a08 	vldr	s15, [r7, #32]
 8014c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014c0a:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ this->config.K[2] * state.theta_dot
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	edd3 6a03 	vldr	s13, [r3, #12]
 8014c14:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014c18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014c1c:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ this->config.K[3] * state.psi_dot;
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	edd3 6a04 	vldr	s13, [r3, #16]
 8014c26:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8014c2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
	output->u_1 = this->config.K[0] * state.v + this->config.K[1] * state.theta
 8014c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c34:	edc3 7a00 	vstr	s15, [r3]

	output->u_2 = this->config.K[4] * state.v + this->config.K[5] * state.theta
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	ed93 7a05 	vldr	s14, [r3, #20]
 8014c3e:	edd7 7a07 	vldr	s15, [r7, #28]
 8014c42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	edd3 6a06 	vldr	s13, [r3, #24]
 8014c4c:	edd7 7a08 	vldr	s15, [r7, #32]
 8014c50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014c54:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ this->config.K[6] * state.theta_dot
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	edd3 6a07 	vldr	s13, [r3, #28]
 8014c5e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014c62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014c66:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ this->config.K[7] * state.psi_dot;
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	edd3 6a08 	vldr	s13, [r3, #32]
 8014c70:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8014c74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014c78:	ee77 7a27 	vadd.f32	s15, s14, s15
	output->u_2 = this->config.K[4] * state.v + this->config.K[5] * state.theta
 8014c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c7e:	edc3 7a01 	vstr	s15, [r3, #4]

	output->u_1 = output->u_1 + input.u_1;
 8014c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c84:	ed93 7a00 	vldr	s14, [r3]
 8014c88:	edd7 7a01 	vldr	s15, [r7, #4]
 8014c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c92:	edc3 7a00 	vstr	s15, [r3]
	output->u_2 = output->u_2 + input.u_2;
 8014c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c98:	ed93 7a01 	vldr	s14, [r3, #4]
 8014c9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8014ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ca6:	edc3 7a01 	vstr	s15, [r3, #4]

}
 8014caa:	bf00      	nop
 8014cac:	3714      	adds	r7, #20
 8014cae:	46bd      	mov	sp, r7
 8014cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cb4:	b004      	add	sp, #16
 8014cb6:	4770      	bx	lr

08014cb8 <_ZN22TWIPR_BalancingControl4stopEv>:
void TWIPR_BalancingControl::reset() {
	this->stop();
	this->start();
}
/* ========================================================================= */
void TWIPR_BalancingControl::stop() {
 8014cb8:	b480      	push	{r7}
 8014cba:	b083      	sub	sp, #12
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	6078      	str	r0, [r7, #4]
	this->mode = TWIPR_BALANCING_CONTROL_MODE_OFF;
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	705a      	strb	r2, [r3, #1]
//	this->status = TWIPR_BALANCING_CONTROL_STATUS_IDLE;
}
 8014cc6:	bf00      	nop
 8014cc8:	370c      	adds	r7, #12
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd0:	4770      	bx	lr

08014cd2 <_ZN22TWIPR_BalancingControl5set_KEPf>:
/* ========================================================================= */
void TWIPR_BalancingControl::set_K(float K[8]) {
 8014cd2:	b580      	push	{r7, lr}
 8014cd4:	b082      	sub	sp, #8
 8014cd6:	af00      	add	r7, sp, #0
 8014cd8:	6078      	str	r0, [r7, #4]
 8014cda:	6039      	str	r1, [r7, #0]
	memcpy(this->config.K, K, sizeof(float) * 8);
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	3304      	adds	r3, #4
 8014ce0:	2220      	movs	r2, #32
 8014ce2:	6839      	ldr	r1, [r7, #0]
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	f008 fffc 	bl	801dce2 <memcpy>
}
 8014cea:	bf00      	nop
 8014cec:	3708      	adds	r7, #8
 8014cee:	46bd      	mov	sp, r7
 8014cf0:	bd80      	pop	{r7, pc}

08014cf2 <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t>:
/* ========================================================================= */
void TWIPR_BalancingControl::setMode(twipr_balancing_control_mode_t mode) {
 8014cf2:	b480      	push	{r7}
 8014cf4:	b083      	sub	sp, #12
 8014cf6:	af00      	add	r7, sp, #0
 8014cf8:	6078      	str	r0, [r7, #4]
 8014cfa:	460b      	mov	r3, r1
 8014cfc:	70fb      	strb	r3, [r7, #3]

	if (this->status == TWIPR_BALANCING_CONTROL_STATUS_ERROR){
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	f993 3000 	ldrsb.w	r3, [r3]
 8014d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d08:	d008      	beq.n	8014d1c <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t+0x2a>
		return;
	}

	if (this->status == TWIPR_BALANCING_CONTROL_STATUS_NONE){
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	f993 3000 	ldrsb.w	r3, [r3]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d005      	beq.n	8014d20 <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t+0x2e>
		return;
	}
	this->mode = mode;
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	78fa      	ldrb	r2, [r7, #3]
 8014d18:	705a      	strb	r2, [r3, #1]
 8014d1a:	e002      	b.n	8014d22 <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t+0x30>
		return;
 8014d1c:	bf00      	nop
 8014d1e:	e000      	b.n	8014d22 <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t+0x30>
		return;
 8014d20:	bf00      	nop
}
 8014d22:	370c      	adds	r7, #12
 8014d24:	46bd      	mov	sp, r7
 8014d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d2a:	4770      	bx	lr

08014d2c <_ZN13RegisterEntry5writeEPv>:


/* ============================================================ */
class RegisterEntry {
public:
	virtual void write(void *value) {
 8014d2c:	b480      	push	{r7}
 8014d2e:	b083      	sub	sp, #12
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	6078      	str	r0, [r7, #4]
 8014d34:	6039      	str	r1, [r7, #0]
		;
	}
 8014d36:	bf00      	nop
 8014d38:	370c      	adds	r7, #12
 8014d3a:	46bd      	mov	sp, r7
 8014d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d40:	4770      	bx	lr

08014d42 <_ZN13RegisterEntry5writeEPh>:
	virtual void write(uint8_t *data) {
 8014d42:	b480      	push	{r7}
 8014d44:	b083      	sub	sp, #12
 8014d46:	af00      	add	r7, sp, #0
 8014d48:	6078      	str	r0, [r7, #4]
 8014d4a:	6039      	str	r1, [r7, #0]
		;
	}
 8014d4c:	bf00      	nop
 8014d4e:	370c      	adds	r7, #12
 8014d50:	46bd      	mov	sp, r7
 8014d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d56:	4770      	bx	lr

08014d58 <_ZN13RegisterEntry9readBytesEPh>:
	virtual uint8_t readBytes(uint8_t *data) {
 8014d58:	b480      	push	{r7}
 8014d5a:	b083      	sub	sp, #12
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	6078      	str	r0, [r7, #4]
 8014d60:	6039      	str	r1, [r7, #0]
		return 0;
 8014d62:	2300      	movs	r3, #0
	}
 8014d64:	4618      	mov	r0, r3
 8014d66:	370c      	adds	r7, #12
 8014d68:	46bd      	mov	sp, r7
 8014d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d6e:	4770      	bx	lr

08014d70 <_ZN13RegisterEntry7getSizeEv>:
	virtual uint8_t getSize() {
 8014d70:	b480      	push	{r7}
 8014d72:	b083      	sub	sp, #12
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	6078      	str	r0, [r7, #4]
		return 0;;
 8014d78:	2300      	movs	r3, #0
	}
 8014d7a:	4618      	mov	r0, r3
 8014d7c:	370c      	adds	r7, #12
 8014d7e:	46bd      	mov	sp, r7
 8014d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d84:	4770      	bx	lr

08014d86 <_ZN13RegisterEntry12getInputSizeEv>:
	virtual uint8_t getInputSize() {
 8014d86:	b480      	push	{r7}
 8014d88:	b083      	sub	sp, #12
 8014d8a:	af00      	add	r7, sp, #0
 8014d8c:	6078      	str	r0, [r7, #4]
		return 0;
 8014d8e:	2300      	movs	r3, #0
	}
 8014d90:	4618      	mov	r0, r3
 8014d92:	370c      	adds	r7, #12
 8014d94:	46bd      	mov	sp, r7
 8014d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d9a:	4770      	bx	lr

08014d9c <_ZN13RegisterEntry13getOutputSizeEv>:

	virtual uint8_t getOutputSize() {
 8014d9c:	b480      	push	{r7}
 8014d9e:	b083      	sub	sp, #12
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
		return 0;
 8014da4:	2300      	movs	r3, #0
	}
 8014da6:	4618      	mov	r0, r3
 8014da8:	370c      	adds	r7, #12
 8014daa:	46bd      	mov	sp, r7
 8014dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db0:	4770      	bx	lr

08014db2 <_ZN13RegisterEntry7executeEv>:

	virtual void execute() {
 8014db2:	b480      	push	{r7}
 8014db4:	b083      	sub	sp, #12
 8014db6:	af00      	add	r7, sp, #0
 8014db8:	6078      	str	r0, [r7, #4]
	}
 8014dba:	bf00      	nop
 8014dbc:	370c      	adds	r7, #12
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc4:	4770      	bx	lr

08014dc6 <_ZN13RegisterEntry7executeEPhS0_>:

	virtual uint8_t execute(uint8_t *input, uint8_t *output) {
 8014dc6:	b480      	push	{r7}
 8014dc8:	b085      	sub	sp, #20
 8014dca:	af00      	add	r7, sp, #0
 8014dcc:	60f8      	str	r0, [r7, #12]
 8014dce:	60b9      	str	r1, [r7, #8]
 8014dd0:	607a      	str	r2, [r7, #4]
		return 0;
 8014dd2:	2300      	movs	r3, #0
	}
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	3714      	adds	r7, #20
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dde:	4770      	bx	lr

08014de0 <_ZN11RegisterMap5writeEtPv>:
};

/* ============================================================ */
class RegisterMap {
public:
	virtual void write(uint16_t address, void *data) {
 8014de0:	b480      	push	{r7}
 8014de2:	b085      	sub	sp, #20
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	60f8      	str	r0, [r7, #12]
 8014de8:	460b      	mov	r3, r1
 8014dea:	607a      	str	r2, [r7, #4]
 8014dec:	817b      	strh	r3, [r7, #10]
	}
 8014dee:	bf00      	nop
 8014df0:	3714      	adds	r7, #20
 8014df2:	46bd      	mov	sp, r7
 8014df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df8:	4770      	bx	lr

08014dfa <_ZN11RegisterMap5writeEtPh>:
	virtual void write(uint16_t address, uint8_t *data) {
 8014dfa:	b480      	push	{r7}
 8014dfc:	b085      	sub	sp, #20
 8014dfe:	af00      	add	r7, sp, #0
 8014e00:	60f8      	str	r0, [r7, #12]
 8014e02:	460b      	mov	r3, r1
 8014e04:	607a      	str	r2, [r7, #4]
 8014e06:	817b      	strh	r3, [r7, #10]
	}
 8014e08:	bf00      	nop
 8014e0a:	3714      	adds	r7, #20
 8014e0c:	46bd      	mov	sp, r7
 8014e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e12:	4770      	bx	lr

08014e14 <_ZN11RegisterMap8addEntryEtP13RegisterEntry>:
	virtual void addEntry(uint16_t address, RegisterEntry *entry) {
 8014e14:	b480      	push	{r7}
 8014e16:	b085      	sub	sp, #20
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	60f8      	str	r0, [r7, #12]
 8014e1c:	460b      	mov	r3, r1
 8014e1e:	607a      	str	r2, [r7, #4]
 8014e20:	817b      	strh	r3, [r7, #10]

	}
 8014e22:	bf00      	nop
 8014e24:	3714      	adds	r7, #20
 8014e26:	46bd      	mov	sp, r7
 8014e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e2c:	4770      	bx	lr

08014e2e <_ZN11RegisterMap8hasEntryEt>:
	virtual bool hasEntry(uint16_t address) {
 8014e2e:	b480      	push	{r7}
 8014e30:	b083      	sub	sp, #12
 8014e32:	af00      	add	r7, sp, #0
 8014e34:	6078      	str	r0, [r7, #4]
 8014e36:	460b      	mov	r3, r1
 8014e38:	807b      	strh	r3, [r7, #2]
		return false;
 8014e3a:	2300      	movs	r3, #0
	}
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	370c      	adds	r7, #12
 8014e40:	46bd      	mov	sp, r7
 8014e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e46:	4770      	bx	lr

08014e48 <_ZN11RegisterMap4readEtPh>:
	virtual uint8_t read(uint16_t address, uint8_t *data) {
 8014e48:	b480      	push	{r7}
 8014e4a:	b085      	sub	sp, #20
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	60f8      	str	r0, [r7, #12]
 8014e50:	460b      	mov	r3, r1
 8014e52:	607a      	str	r2, [r7, #4]
 8014e54:	817b      	strh	r3, [r7, #10]
		return 0;
 8014e56:	2300      	movs	r3, #0
	}
 8014e58:	4618      	mov	r0, r3
 8014e5a:	3714      	adds	r7, #20
 8014e5c:	46bd      	mov	sp, r7
 8014e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e62:	4770      	bx	lr

08014e64 <_ZN11RegisterMap7getSizeEt>:
	virtual uint8_t getSize(uint16_t address) {
 8014e64:	b480      	push	{r7}
 8014e66:	b083      	sub	sp, #12
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	6078      	str	r0, [r7, #4]
 8014e6c:	460b      	mov	r3, r1
 8014e6e:	807b      	strh	r3, [r7, #2]
		return 0;
 8014e70:	2300      	movs	r3, #0
	}
 8014e72:	4618      	mov	r0, r3
 8014e74:	370c      	adds	r7, #12
 8014e76:	46bd      	mov	sp, r7
 8014e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e7c:	4770      	bx	lr

08014e7e <_ZN11RegisterMap7executeEtPhS0_>:
	virtual register_entry_type getType(uint16_t address) = 0;
	virtual register_entry_rw_t getReadWriteSetting(uint16_t address) = 0;

	/* -------------------------------------------------- */
	virtual uint8_t execute(uint16_t address, uint8_t *input, uint8_t *output) {
 8014e7e:	b480      	push	{r7}
 8014e80:	b085      	sub	sp, #20
 8014e82:	af00      	add	r7, sp, #0
 8014e84:	60f8      	str	r0, [r7, #12]
 8014e86:	607a      	str	r2, [r7, #4]
 8014e88:	603b      	str	r3, [r7, #0]
 8014e8a:	460b      	mov	r3, r1
 8014e8c:	817b      	strh	r3, [r7, #10]
		return 0;
 8014e8e:	2300      	movs	r3, #0
	}
 8014e90:	4618      	mov	r0, r3
 8014e92:	3714      	adds	r7, #20
 8014e94:	46bd      	mov	sp, r7
 8014e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9a:	4770      	bx	lr

08014e9c <_ZN11RegisterMap7executeEt>:
	/* -------------------------------------------------- */
	virtual uint8_t execute(uint16_t address) {
 8014e9c:	b480      	push	{r7}
 8014e9e:	b083      	sub	sp, #12
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	6078      	str	r0, [r7, #4]
 8014ea4:	460b      	mov	r3, r1
 8014ea6:	807b      	strh	r3, [r7, #2]
		return 0;
 8014ea8:	2300      	movs	r3, #0
	}
 8014eaa:	4618      	mov	r0, r3
 8014eac:	370c      	adds	r7, #12
 8014eae:	46bd      	mov	sp, r7
 8014eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb4:	4770      	bx	lr
	...

08014eb8 <_ZN13RegisterEntryC1Ev>:
class RegisterEntry {
 8014eb8:	b480      	push	{r7}
 8014eba:	b083      	sub	sp, #12
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	6078      	str	r0, [r7, #4]
 8014ec0:	4a04      	ldr	r2, [pc, #16]	; (8014ed4 <_ZN13RegisterEntryC1Ev+0x1c>)
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	601a      	str	r2, [r3, #0]
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	4618      	mov	r0, r3
 8014eca:	370c      	adds	r7, #12
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed2:	4770      	bx	lr
 8014ed4:	08020940 	.word	0x08020940

08014ed8 <_ZN27core_utils_RegisterFunctionIvvEC1Ev>:

/* ============================================================ */
template<>
class core_utils_RegisterFunction<void, void> : public RegisterEntry {
public:
	core_utils_RegisterFunction() {
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b082      	sub	sp, #8
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	f7ff ffe8 	bl	8014eb8 <_ZN13RegisterEntryC1Ev>
 8014ee8:	4a06      	ldr	r2, [pc, #24]	; (8014f04 <_ZN27core_utils_RegisterFunctionIvvEC1Ev+0x2c>)
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	601a      	str	r2, [r3, #0]
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	330c      	adds	r3, #12
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	f7fd fe46 	bl	8012b84 <_ZN19core_utils_CallbackIvvEC1Ev>

	}
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	4618      	mov	r0, r3
 8014efc:	3708      	adds	r7, #8
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bd80      	pop	{r7, pc}
 8014f02:	bf00      	nop
 8014f04:	080208e0 	.word	0x080208e0

08014f08 <_ZN8CallbackC1EOS_>:
class Callback {
 8014f08:	b480      	push	{r7}
 8014f0a:	b083      	sub	sp, #12
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
 8014f10:	6039      	str	r1, [r7, #0]
 8014f12:	4a05      	ldr	r2, [pc, #20]	; (8014f28 <_ZN8CallbackC1EOS_+0x20>)
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	601a      	str	r2, [r3, #0]
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	370c      	adds	r7, #12
 8014f1e:	46bd      	mov	sp, r7
 8014f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f24:	4770      	bx	lr
 8014f26:	bf00      	nop
 8014f28:	08020650 	.word	0x08020650

08014f2c <_ZN27core_utils_RegisterFunctionIvvE3setEtP11RegisterMap19core_utils_CallbackIvvE>:
		this->function = function;
		map->addEntry(this->address, this);
		this->type = REGISTER_ENTRY_FUNCTION;
	}
	/* -------------------------------------------------- */
	void set(uint16_t address, RegisterMap *map,
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	b084      	sub	sp, #16
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	60f8      	str	r0, [r7, #12]
 8014f34:	607a      	str	r2, [r7, #4]
 8014f36:	603b      	str	r3, [r7, #0]
 8014f38:	460b      	mov	r3, r1
 8014f3a:	817b      	strh	r3, [r7, #10]
			core_utils_Callback<void, void> function) {
		this->address = address;
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	897a      	ldrh	r2, [r7, #10]
 8014f40:	811a      	strh	r2, [r3, #8]
		this->function = function;
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	330c      	adds	r3, #12
 8014f46:	6839      	ldr	r1, [r7, #0]
 8014f48:	4618      	mov	r0, r3
 8014f4a:	f7fd fbe3 	bl	8012714 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		map->addEntry(this->address, this);
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	3308      	adds	r3, #8
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	68fa      	ldr	r2, [r7, #12]
 8014f58:	8911      	ldrh	r1, [r2, #8]
 8014f5a:	68fa      	ldr	r2, [r7, #12]
 8014f5c:	6878      	ldr	r0, [r7, #4]
 8014f5e:	4798      	blx	r3
		this->type = REGISTER_ENTRY_FUNCTION;
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	2202      	movs	r2, #2
 8014f64:	719a      	strb	r2, [r3, #6]
	}
 8014f66:	bf00      	nop
 8014f68:	3710      	adds	r7, #16
 8014f6a:	46bd      	mov	sp, r7
 8014f6c:	bd80      	pop	{r7, pc}

08014f6e <_ZN27core_utils_RegisterFunctionIvvE7executeEv>:

	/* -------------------------------------------------- */
	void execute() {
 8014f6e:	b580      	push	{r7, lr}
 8014f70:	b082      	sub	sp, #8
 8014f72:	af00      	add	r7, sp, #0
 8014f74:	6078      	str	r0, [r7, #4]
		if (this->function.registered) {
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	7c1b      	ldrb	r3, [r3, #16]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d005      	beq.n	8014f8a <_ZN27core_utils_RegisterFunctionIvvE7executeEv+0x1c>
			return this->function.call();
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	330c      	adds	r3, #12
 8014f82:	4618      	mov	r0, r3
 8014f84:	f7fd fa46 	bl	8012414 <_ZN19core_utils_CallbackIvvE4callEv>
 8014f88:	bf00      	nop
		}
	}
 8014f8a:	3708      	adds	r7, #8
 8014f8c:	46bd      	mov	sp, r7
 8014f8e:	bd80      	pop	{r7, pc}

08014f90 <_ZN27core_utils_RegisterFunctionIvvE7executeEPhS1_>:
		this->execute();
		return 0;
	}

	/* -------------------------------------------------- */
	uint8_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 8014f90:	b580      	push	{r7, lr}
 8014f92:	b084      	sub	sp, #16
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	60f8      	str	r0, [r7, #12]
 8014f98:	60b9      	str	r1, [r7, #8]
 8014f9a:	607a      	str	r2, [r7, #4]
		this->execute();
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	3318      	adds	r3, #24
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	68f8      	ldr	r0, [r7, #12]
 8014fa6:	4798      	blx	r3
		return 0;
 8014fa8:	2300      	movs	r3, #0
	}
 8014faa:	4618      	mov	r0, r3
 8014fac:	3710      	adds	r7, #16
 8014fae:	46bd      	mov	sp, r7
 8014fb0:	bd80      	pop	{r7, pc}

08014fb2 <_ZN27core_utils_RegisterFunctionIvvE7getSizeEv>:
	/* -------------------------------------------------- */
	uint8_t getSize() {
 8014fb2:	b480      	push	{r7}
 8014fb4:	b083      	sub	sp, #12
 8014fb6:	af00      	add	r7, sp, #0
 8014fb8:	6078      	str	r0, [r7, #4]
		return 0;
 8014fba:	2300      	movs	r3, #0
	}
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	370c      	adds	r7, #12
 8014fc0:	46bd      	mov	sp, r7
 8014fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc6:	4770      	bx	lr

08014fc8 <_ZN27core_utils_RegisterFunctionIvvE12getInputSizeEv>:
	/* -------------------------------------------------- */
	uint8_t getInputSize() {
 8014fc8:	b480      	push	{r7}
 8014fca:	b083      	sub	sp, #12
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
		return 0;
 8014fd0:	2300      	movs	r3, #0
	}
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	370c      	adds	r7, #12
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fdc:	4770      	bx	lr

08014fde <_ZN27core_utils_RegisterFunctionIvvE13getOutputSizeEv>:

	/* -------------------------------------------------- */
	uint8_t getOutputSize() {
 8014fde:	b480      	push	{r7}
 8014fe0:	b083      	sub	sp, #12
 8014fe2:	af00      	add	r7, sp, #0
 8014fe4:	6078      	str	r0, [r7, #4]
		return 0;
 8014fe6:	2300      	movs	r3, #0
	}
 8014fe8:	4618      	mov	r0, r3
 8014fea:	370c      	adds	r7, #12
 8014fec:	46bd      	mov	sp, r7
 8014fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff2:	4770      	bx	lr

08014ff4 <_ZN27core_utils_RegisterFunctionIvvE7getTypeEv>:

	/* -------------------------------------------------- */
	register_entry_type getType() {
 8014ff4:	b480      	push	{r7}
 8014ff6:	b083      	sub	sp, #12
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_FUNCTION;
 8014ffc:	2302      	movs	r3, #2
	}
 8014ffe:	4618      	mov	r0, r3
 8015000:	370c      	adds	r7, #12
 8015002:	46bd      	mov	sp, r7
 8015004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015008:	4770      	bx	lr

0801500a <_ZN27core_utils_RegisterFunctionIvvE19getReadWriteSettingEv>:
	/* -------------------------------------------------- */
	register_entry_rw_t getReadWriteSetting() {
 801500a:	b480      	push	{r7}
 801500c:	b083      	sub	sp, #12
 801500e:	af00      	add	r7, sp, #0
 8015010:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_READWRITE;
 8015012:	2302      	movs	r3, #2
	}
 8015014:	4618      	mov	r0, r3
 8015016:	370c      	adds	r7, #12
 8015018:	46bd      	mov	sp, r7
 801501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801501e:	4770      	bx	lr

08015020 <_Z18twipr_control_taskPv>:
TWIPR_ControlManager *manager;

osSemaphoreId_t semaphore_external_input;

/* ======================================================== */
void twipr_control_task(void *argument) {
 8015020:	b580      	push	{r7, lr}
 8015022:	b084      	sub	sp, #16
 8015024:	af00      	add	r7, sp, #0
 8015026:	6078      	str	r0, [r7, #4]
	TWIPR_ControlManager *control_manager = (TWIPR_ControlManager*) argument;
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	60fb      	str	r3, [r7, #12]
	control_manager->task_function();
 801502c:	68f8      	ldr	r0, [r7, #12]
 801502e:	f000 f9bf 	bl	80153b0 <_ZN20TWIPR_ControlManager13task_functionEv>
}
 8015032:	bf00      	nop
 8015034:	3710      	adds	r7, #16
 8015036:	46bd      	mov	sp, r7
 8015038:	bd80      	pop	{r7, pc}

0801503a <_ZN27twipr_control_reg_entries_tC1Ev>:
#define TWIPR_CONTROL_REG_FUNCTION_START_TRAJECTORY 0x05
#define TWIPR_CONTROL_REG_FUNCTION_STOP 0x06
#define TWIPR_CONTROL_REG_ENTRY_CONFIG 0x07
#define TWIPR_CONTROL_REG_FUNCTION_SET_K 0x08

typedef struct twipr_control_reg_entries_t {
 801503a:	b580      	push	{r7, lr}
 801503c:	b082      	sub	sp, #8
 801503e:	af00      	add	r7, sp, #0
 8015040:	6078      	str	r0, [r7, #4]
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	4618      	mov	r0, r3
 8015046:	f000 ff4b 	bl	8015ee0 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tEC1Ev>
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	3334      	adds	r3, #52	; 0x34
 801504e:	4618      	mov	r0, r3
 8015050:	f000 ff60 	bl	8015f14 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tEC1Ev>
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	3348      	adds	r3, #72	; 0x48
 8015058:	4618      	mov	r0, r3
 801505a:	f000 ff7f 	bl	8015f5c <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tEC1Ev>
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	335c      	adds	r3, #92	; 0x5c
 8015062:	4618      	mov	r0, r3
 8015064:	f000 ff9e 	bl	8015fa4 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tEC1Ev>
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	3388      	adds	r3, #136	; 0x88
 801506c:	4618      	mov	r0, r3
 801506e:	f000 ffb3 	bl	8015fd8 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tEC1Ev>
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	33b8      	adds	r3, #184	; 0xb8
 8015076:	4618      	mov	r0, r3
 8015078:	f7ff ff2e 	bl	8014ed8 <_ZN27core_utils_RegisterFunctionIvvEC1Ev>
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	33e4      	adds	r3, #228	; 0xe4
 8015080:	4618      	mov	r0, r3
 8015082:	f000 ffc3 	bl	801600c <_ZN27core_utils_RegisterFunctionIhA8_fEC1Ev>
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	f503 7398 	add.w	r3, r3, #304	; 0x130
 801508c:	4618      	mov	r0, r3
 801508e:	f000 ffd9 	bl	8016044 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tEC1Ev>
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	4618      	mov	r0, r3
 8015096:	3708      	adds	r7, #8
 8015098:	46bd      	mov	sp, r7
 801509a:	bd80      	pop	{r7, pc}

0801509c <_ZN25twipr_control_callbacks_tC1Ev>:
typedef struct twipr_control_callbacks_t {
 801509c:	b580      	push	{r7, lr}
 801509e:	b082      	sub	sp, #8
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	6078      	str	r0, [r7, #4]
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	4618      	mov	r0, r3
 80150a8:	f7fd f9c2 	bl	8012430 <_ZN19core_utils_CallbackIvtEC1Ev>
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	3320      	adds	r3, #32
 80150b0:	4618      	mov	r0, r3
 80150b2:	f7fd f9bd 	bl	8012430 <_ZN19core_utils_CallbackIvtEC1Ev>
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	3340      	adds	r3, #64	; 0x40
 80150ba:	4618      	mov	r0, r3
 80150bc:	f7fd f9b8 	bl	8012430 <_ZN19core_utils_CallbackIvtEC1Ev>
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	3360      	adds	r3, #96	; 0x60
 80150c4:	4618      	mov	r0, r3
 80150c6:	f000 ffe1 	bl	801608c <_ZN19core_utils_CallbackIvmEC1Ev>
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	4618      	mov	r0, r3
 80150ce:	3708      	adds	r7, #8
 80150d0:	46bd      	mov	sp, r7
 80150d2:	bd80      	pop	{r7, pc}

080150d4 <_ZN20TWIPR_ControlManagerC1Ev>:

/* ======================================================== */
TWIPR_ControlManager::TWIPR_ControlManager() {
 80150d4:	b580      	push	{r7, lr}
 80150d6:	b082      	sub	sp, #8
 80150d8:	af00      	add	r7, sp, #0
 80150da:	6078      	str	r0, [r7, #4]
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	2200      	movs	r2, #0
 80150e0:	701a      	strb	r2, [r3, #0]
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	2200      	movs	r2, #0
 80150e6:	705a      	strb	r2, [r3, #1]
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	3334      	adds	r3, #52	; 0x34
 80150ec:	4618      	mov	r0, r3
 80150ee:	f7ff ffa4 	bl	801503a <_ZN27twipr_control_reg_entries_tC1Ev>
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80150f8:	2102      	movs	r1, #2
 80150fa:	4618      	mov	r0, r3
 80150fc:	f000 fed2 	bl	8015ea4 <_ZN22core_utils_RegisterMapILi20EEC1Et>
 8015100:	687a      	ldr	r2, [r7, #4]
 8015102:	f243 03e8 	movw	r3, #12520	; 0x30e8
 8015106:	4413      	add	r3, r2
 8015108:	4618      	mov	r0, r3
 801510a:	f7ff fc9f 	bl	8014a4c <_ZN22TWIPR_BalancingControlC1Ev>
 801510e:	687a      	ldr	r2, [r7, #4]
 8015110:	f246 0358 	movw	r3, #24664	; 0x6058
 8015114:	4413      	add	r3, r2
 8015116:	4618      	mov	r0, r3
 8015118:	f7ff ffc0 	bl	801509c <_ZN25twipr_control_callbacks_tC1Ev>
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8015122:	461a      	mov	r2, r3
 8015124:	f04f 0300 	mov.w	r3, #0
 8015128:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8015132:	461a      	mov	r2, r3
 8015134:	f04f 0300 	mov.w	r3, #0
 8015138:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

}
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	4618      	mov	r0, r3
 8015140:	3708      	adds	r7, #8
 8015142:	46bd      	mov	sp, r7
 8015144:	bd80      	pop	{r7, pc}
	...

08015148 <_ZN20TWIPR_ControlManager4initE22twipr_control_config_t>:

/* ======================================================== */
void TWIPR_ControlManager::init(twipr_control_config_t config) {
 8015148:	b084      	sub	sp, #16
 801514a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801514c:	b0c3      	sub	sp, #268	; 0x10c
 801514e:	af06      	add	r7, sp, #24
 8015150:	6078      	str	r0, [r7, #4]
 8015152:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 8015156:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	manager = this;
 801515a:	4a85      	ldr	r2, [pc, #532]	; (8015370 <_ZN20TWIPR_ControlManager4initE22twipr_control_config_t+0x228>)
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	6013      	str	r3, [r2, #0]
	this->config = config;
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	1d1c      	adds	r4, r3, #4
 8015164:	f507 7586 	add.w	r5, r7, #268	; 0x10c
 8015168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801516a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801516c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801516e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015170:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8015174:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	this->_estimation = config.estimation;
 8015178:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801517c:	687a      	ldr	r2, [r7, #4]
 801517e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 8015182:	6513      	str	r3, [r2, #80]	; 0x50

	// Initialize the balancing controller
	twipr_balancing_control_config_t balancing_control_config;
	memcpy(balancing_control_config.K, this->config.K,
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	f103 010c 	add.w	r1, r3, #12
 801518a:	f107 0308 	add.w	r3, r7, #8
 801518e:	2220      	movs	r2, #32
 8015190:	4618      	mov	r0, r3
 8015192:	f008 fda6 	bl	801dce2 <memcpy>
			sizeof(balancing_control_config.K));
	this->_balancing_control.init(balancing_control_config);
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	f243 06e8 	movw	r6, #12520	; 0x30e8
 801519c:	441e      	add	r6, r3
 801519e:	466d      	mov	r5, sp
 80151a0:	f107 0414 	add.w	r4, r7, #20
 80151a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80151a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80151a8:	6823      	ldr	r3, [r4, #0]
 80151aa:	602b      	str	r3, [r5, #0]
 80151ac:	f107 0308 	add.w	r3, r7, #8
 80151b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80151b2:	4630      	mov	r0, r6
 80151b4:	f7ff fc5b 	bl	8014a6e <_ZN22TWIPR_BalancingControl4initE32twipr_balancing_control_config_t>

	this->status = TWIPR_CONTROL_STATUS_IDLE;
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	2200      	movs	r2, #0
 80151bc:	701a      	strb	r2, [r3, #0]
	this->mode = TWIPR_CONTROL_MODE_OFF;
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	2200      	movs	r2, #0
 80151c2:	705a      	strb	r2, [r3, #1]
	this->_input.u_1 = 0;
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80151ca:	461a      	mov	r2, r3
 80151cc:	f04f 0300 	mov.w	r3, #0
 80151d0:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
	this->_input.u_2 = 0;
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80151da:	461a      	mov	r2, r3
 80151dc:	f04f 0300 	mov.w	r3, #0
 80151e0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
	this->_output.u_left = 0;
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80151ea:	461a      	mov	r2, r3
 80151ec:	f04f 0300 	mov.w	r3, #0
 80151f0:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
	this->_output.u_right = 0;
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80151fa:	461a      	mov	r2, r3
 80151fc:	f04f 0300 	mov.w	r3, #0
 8015200:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
	this->_tick = 0;
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 801520a:	461a      	mov	r2, r3
 801520c:	2300      	movs	r3, #0
 801520e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8

	// Setting the Register Entries
	this->reg_entries.reg_function_set_external_input.set(
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	f503 75d6 	add.w	r5, r3, #428	; 0x1ac
	TWIPR_CONTROL_REG_ENTRY_EXT_INPUT, &this->reg_map,
			core_utils_Callback<void, twipr_control_input_t>(this,
 801521e:	4b55      	ldr	r3, [pc, #340]	; (8015374 <_ZN20TWIPR_ControlManager4initE22twipr_control_config_t+0x22c>)
 8015220:	64bb      	str	r3, [r7, #72]	; 0x48
 8015222:	2300      	movs	r3, #0
 8015224:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015226:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801522a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801522e:	cb0c      	ldmia	r3, {r2, r3}
 8015230:	6879      	ldr	r1, [r7, #4]
 8015232:	f000 ff49 	bl	80160c8 <_ZN19core_utils_CallbackIv21twipr_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>
	this->reg_entries.reg_function_set_external_input.set(
 8015236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801523a:	462a      	mov	r2, r5
 801523c:	2101      	movs	r1, #1
 801523e:	4620      	mov	r0, r4
 8015240:	f000 ff96 	bl	8016170 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE3setEtP11RegisterMap19core_utils_CallbackIvS0_E>
					&TWIPR_ControlManager::setInput));

	this->reg_entries.reg_entry_status.set(
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	f103 0068 	add.w	r0, r3, #104	; 0x68
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	f503 72d6 	add.w	r2, r3, #428	; 0x1ac
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	2100      	movs	r1, #0
 8015254:	9100      	str	r1, [sp, #0]
 8015256:	2102      	movs	r1, #2
 8015258:	f000 ffa8 	bl	80161ac <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE3setEtP11RegisterMapPS0_19register_entry_rw_t>
	TWIPR_CONTROL_REG_ENTRY_STATUS, &this->reg_map, &this->status,
			REGISTER_ENTRY_READ);

	this->reg_entries.reg_entry_status.set(
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	f503 72d6 	add.w	r2, r3, #428	; 0x1ac
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	2100      	movs	r1, #0
 801526c:	9100      	str	r1, [sp, #0]
 801526e:	2103      	movs	r1, #3
 8015270:	f000 ff9c 	bl	80161ac <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE3setEtP11RegisterMapPS0_19register_entry_rw_t>
	TWIPR_CONTROL_REG_ENTRY_MODE, &this->reg_map, &this->status,
			REGISTER_ENTRY_READ);

	this->reg_entries.reg_function_set_mode.set(
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	f103 0490 	add.w	r4, r3, #144	; 0x90
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	f503 75d6 	add.w	r5, r3, #428	; 0x1ac
	TWIPR_CONTROL_REG_FUNCTION_SET_MODE, &this->reg_map,
			core_utils_Callback<uint8_t, twipr_control_mode_t>(this,
 8015280:	4b3d      	ldr	r3, [pc, #244]	; (8015378 <_ZN20TWIPR_ControlManager4initE22twipr_control_config_t+0x230>)
 8015282:	673b      	str	r3, [r7, #112]	; 0x70
 8015284:	2300      	movs	r3, #0
 8015286:	677b      	str	r3, [r7, #116]	; 0x74
 8015288:	f107 0050 	add.w	r0, r7, #80	; 0x50
 801528c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8015290:	cb0c      	ldmia	r3, {r2, r3}
 8015292:	6879      	ldr	r1, [r7, #4]
 8015294:	f000 ffa8 	bl	80161e8 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>
	this->reg_entries.reg_function_set_mode.set(
 8015298:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801529c:	462a      	mov	r2, r5
 801529e:	2104      	movs	r1, #4
 80152a0:	4620      	mov	r0, r4
 80152a2:	f000 fff5 	bl	8016290 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE3setEtP11RegisterMap19core_utils_CallbackIhS0_E>
					&TWIPR_ControlManager::setMode));

	this->reg_entries.reg_function_start_trajectory.set(
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	f103 04bc 	add.w	r4, r3, #188	; 0xbc
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	f503 75d6 	add.w	r5, r3, #428	; 0x1ac
	TWIPR_CONTROL_REG_FUNCTION_START_TRAJECTORY, &this->reg_map,
			core_utils_Callback<uint8_t, twipr_control_trajectory_t>(this,
 80152b2:	4b32      	ldr	r3, [pc, #200]	; (801537c <_ZN20TWIPR_ControlManager4initE22twipr_control_config_t+0x234>)
 80152b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80152b8:	2300      	movs	r3, #0
 80152ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80152be:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80152c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80152c6:	cb0c      	ldmia	r3, {r2, r3}
 80152c8:	6879      	ldr	r1, [r7, #4]
 80152ca:	f000 ffff 	bl	80162cc <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>
	this->reg_entries.reg_function_start_trajectory.set(
 80152ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80152d2:	462a      	mov	r2, r5
 80152d4:	2105      	movs	r1, #5
 80152d6:	4620      	mov	r0, r4
 80152d8:	f001 f84c 	bl	8016374 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE3setEtP11RegisterMap19core_utils_CallbackIhS0_E>
					&TWIPR_ControlManager::startTrajectory));

	this->reg_entries.reg_function_stop.set(
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	f503 75d6 	add.w	r5, r3, #428	; 0x1ac
	TWIPR_CONTROL_REG_FUNCTION_STOP, &this->reg_map,
			core_utils_Callback<void, void>(this, &TWIPR_ControlManager::stop));
 80152e8:	4b25      	ldr	r3, [pc, #148]	; (8015380 <_ZN20TWIPR_ControlManager4initE22twipr_control_config_t+0x238>)
 80152ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80152ee:	2300      	movs	r3, #0
 80152f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80152f4:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 80152f8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80152fc:	cb0c      	ldmia	r3, {r2, r3}
 80152fe:	6879      	ldr	r1, [r7, #4]
 8015300:	f001 f856 	bl	80163b0 <_ZN19core_utils_CallbackIvvEC1I20TWIPR_ControlManagerEEPT_MS3_FvvE>
	this->reg_entries.reg_function_stop.set(
 8015304:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015308:	462a      	mov	r2, r5
 801530a:	2106      	movs	r1, #6
 801530c:	4620      	mov	r0, r4
 801530e:	f7ff fe0d 	bl	8014f2c <_ZN27core_utils_RegisterFunctionIvvE3setEtP11RegisterMap19core_utils_CallbackIvvE>

	this->reg_entries.reg_entry_config.set(
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	f503 72d6 	add.w	r2, r3, #428	; 0x1ac
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	3304      	adds	r3, #4
 8015322:	2100      	movs	r1, #0
 8015324:	9100      	str	r1, [sp, #0]
 8015326:	2107      	movs	r1, #7
 8015328:	f001 f876 	bl	8016418 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE3setEtP11RegisterMapPS0_19register_entry_rw_t>
	TWIPR_CONTROL_REG_ENTRY_CONFIG, &this->reg_map, &this->config,
			REGISTER_ENTRY_READ);

	this->reg_entries.reg_function_set_K.set(
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	f503 748c 	add.w	r4, r3, #280	; 0x118
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	f503 75d6 	add.w	r5, r3, #428	; 0x1ac
	TWIPR_CONTROL_REG_FUNCTION_SET_K, &this->reg_map,
			core_utils_Callback<uint8_t, float[8]>(this,
 8015338:	4b12      	ldr	r3, [pc, #72]	; (8015384 <_ZN20TWIPR_ControlManager4initE22twipr_control_config_t+0x23c>)
 801533a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801533e:	2300      	movs	r3, #0
 8015340:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8015344:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8015348:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801534c:	cb0c      	ldmia	r3, {r2, r3}
 801534e:	6879      	ldr	r1, [r7, #4]
 8015350:	f001 f880 	bl	8016454 <_ZN19core_utils_CallbackIhA8_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>
	this->reg_entries.reg_function_set_K.set(
 8015354:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8015358:	462a      	mov	r2, r5
 801535a:	2108      	movs	r1, #8
 801535c:	4620      	mov	r0, r4
 801535e:	f001 f8cd 	bl	80164fc <_ZN27core_utils_RegisterFunctionIhA8_fE3setEtP11RegisterMap19core_utils_CallbackIhS0_E>
					&TWIPR_ControlManager::setBalancingGain));

//	semaphore_external_input = osSemaphoreNew(1, 1, NULL);

}
 8015362:	bf00      	nop
 8015364:	37f4      	adds	r7, #244	; 0xf4
 8015366:	46bd      	mov	sp, r7
 8015368:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801536c:	b004      	add	sp, #16
 801536e:	4770      	bx	lr
 8015370:	240152b8 	.word	0x240152b8
 8015374:	080156f1 	.word	0x080156f1
 8015378:	080155e5 	.word	0x080155e5
 801537c:	080157b1 	.word	0x080157b1
 8015380:	08015431 	.word	0x08015431
 8015384:	08015761 	.word	0x08015761

08015388 <_ZN20TWIPR_ControlManager5startEv>:
/* ======================================================== */
uint8_t TWIPR_ControlManager::start() {
 8015388:	b580      	push	{r7, lr}
 801538a:	b082      	sub	sp, #8
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]

	osThreadNew(twipr_control_task, (void*) this, &control_task_attributes);
 8015390:	4a04      	ldr	r2, [pc, #16]	; (80153a4 <_ZN20TWIPR_ControlManager5startEv+0x1c>)
 8015392:	6879      	ldr	r1, [r7, #4]
 8015394:	4804      	ldr	r0, [pc, #16]	; (80153a8 <_ZN20TWIPR_ControlManager5startEv+0x20>)
 8015396:	f7f8 fde6 	bl	800df66 <osThreadNew>
	return 1;
 801539a:	2301      	movs	r3, #1
}
 801539c:	4618      	mov	r0, r3
 801539e:	3708      	adds	r7, #8
 80153a0:	46bd      	mov	sp, r7
 80153a2:	bd80      	pop	{r7, pc}
 80153a4:	080206e4 	.word	0x080206e4
 80153a8:	08015021 	.word	0x08015021
 80153ac:	00000000 	.word	0x00000000

080153b0 <_ZN20TWIPR_ControlManager13task_functionEv>:

/* ======================================================== */
void TWIPR_ControlManager::task_function() {
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b084      	sub	sp, #16
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	6078      	str	r0, [r7, #4]
	this->status = TWIPR_CONTROL_STATUS_RUNNING;
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	2201      	movs	r2, #1
 80153bc:	701a      	strb	r2, [r3, #0]
	this->config.drive->start();
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	689b      	ldr	r3, [r3, #8]
 80153c2:	4618      	mov	r0, r3
 80153c4:	f002 fd14 	bl	8017df0 <_ZN11TWIPR_Drive5startEv>
	this->_balancing_control.start();
 80153c8:	687a      	ldr	r2, [r7, #4]
 80153ca:	f243 03e8 	movw	r3, #12520	; 0x30e8
 80153ce:	4413      	add	r3, r2
 80153d0:	4618      	mov	r0, r3
 80153d2:	f7ff fb68 	bl	8014aa6 <_ZN22TWIPR_BalancingControl5startEv>

	this->_task = xTaskGetCurrentTaskHandle();
 80153d6:	f7fb f9cf 	bl	8010778 <xTaskGetCurrentTaskHandle>
 80153da:	4602      	mov	r2, r0
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80153e2:	655a      	str	r2, [r3, #84]	; 0x54
	uint32_t global_tick;

	while (true) {
		global_tick = osKernelGetTickCount();
 80153e4:	f7f8 fdaa 	bl	800df3c <osKernelGetTickCount>
 80153e8:	60f8      	str	r0, [r7, #12]
		this->step();
 80153ea:	6878      	ldr	r0, [r7, #4]
 80153ec:	f000 f872 	bl	80154d4 <_ZN20TWIPR_ControlManager4stepEv>
		osDelayUntil(global_tick + 1000.0 / (float) this->config.freq);
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	ee07 3a90 	vmov	s15, r3
 80153f6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153fe:	ee07 3a90 	vmov	s15, r3
 8015402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015406:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 801540a:	ed9f 4b07 	vldr	d4, [pc, #28]	; 8015428 <_ZN20TWIPR_ControlManager13task_functionEv+0x78>
 801540e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8015412:	ee36 7b07 	vadd.f64	d7, d6, d7
 8015416:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 801541a:	ee17 0a90 	vmov	r0, s15
 801541e:	f7f8 fe5a 	bl	800e0d6 <osDelayUntil>
		global_tick = osKernelGetTickCount();
 8015422:	e7df      	b.n	80153e4 <_ZN20TWIPR_ControlManager13task_functionEv+0x34>
 8015424:	f3af 8000 	nop.w
 8015428:	00000000 	.word	0x00000000
 801542c:	408f4000 	.word	0x408f4000

08015430 <_ZN20TWIPR_ControlManager4stopEv>:
	}
}

/* ======================================================== */
void TWIPR_ControlManager::stop() {
 8015430:	b580      	push	{r7, lr}
 8015432:	b082      	sub	sp, #8
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]

	// Stop the balancing controller
	this->_balancing_control.stop();
 8015438:	687a      	ldr	r2, [r7, #4]
 801543a:	f243 03e8 	movw	r3, #12520	; 0x30e8
 801543e:	4413      	add	r3, r2
 8015440:	4618      	mov	r0, r3
 8015442:	f7ff fc39 	bl	8014cb8 <_ZN22TWIPR_BalancingControl4stopEv>

	// Set the own state to idle
	this->mode = TWIPR_CONTROL_MODE_OFF;
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	2200      	movs	r2, #0
 801544a:	705a      	strb	r2, [r3, #1]

	// Stop the drive
	this->config.drive->stop();
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	689b      	ldr	r3, [r3, #8]
 8015450:	4618      	mov	r0, r3
 8015452:	f002 fce6 	bl	8017e22 <_ZN11TWIPR_Drive4stopEv>

	// Set the input to 0
	this->_input.u_1 = 0.0;
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801545c:	461a      	mov	r2, r3
 801545e:	f04f 0300 	mov.w	r3, #0
 8015462:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
	this->_input.u_2 = 0.0;
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801546c:	461a      	mov	r2, r3
 801546e:	f04f 0300 	mov.w	r3, #0
 8015472:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
	this->_output.u_left = 0.0;
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801547c:	461a      	mov	r2, r3
 801547e:	f04f 0300 	mov.w	r3, #0
 8015482:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
	this->_output.u_right = 0.0;
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801548c:	461a      	mov	r2, r3
 801548e:	f04f 0300 	mov.w	r3, #0
 8015492:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
}
 8015496:	bf00      	nop
 8015498:	3708      	adds	r7, #8
 801549a:	46bd      	mov	sp, r7
 801549c:	bd80      	pop	{r7, pc}

0801549e <_ZN20TWIPR_ControlManager30newTrajectoryReceived_callbackEt>:
void TWIPR_ControlManager::reset() {
	twipr_error_handler(0);
}

/* ======================================================== */
void TWIPR_ControlManager::newTrajectoryReceived_callback(uint16_t len) {
 801549e:	b580      	push	{r7, lr}
 80154a0:	b082      	sub	sp, #8
 80154a2:	af00      	add	r7, sp, #0
 80154a4:	6078      	str	r0, [r7, #4]
 80154a6:	460b      	mov	r3, r1
 80154a8:	807b      	strh	r3, [r7, #2]
	// There is a new trajectory. Copy over to the trajectory buffer
	// TODO: This is only working if not in trajectory mode
	if (this->mode == TWIPR_CONTROL_MODE_TRAJECTORY) {
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	785b      	ldrb	r3, [r3, #1]
 80154ae:	2b03      	cmp	r3, #3
 80154b0:	d00c      	beq.n	80154cc <_ZN20TWIPR_ControlManager30newTrajectoryReceived_callbackEt+0x2e>
		return;
	}

	memcpy((uint8_t*) this->_trajectory_buffer,
 80154b2:	687a      	ldr	r2, [r7, #4]
 80154b4:	f243 1354 	movw	r3, #12628	; 0x3154
 80154b8:	4413      	add	r3, r2
			(uint8_t*) this->trajectory_rx_buffer,
 80154ba:	687a      	ldr	r2, [r7, #4]
 80154bc:	f502 7102 	add.w	r1, r2, #520	; 0x208
	memcpy((uint8_t*) this->_trajectory_buffer,
 80154c0:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80154c4:	4618      	mov	r0, r3
 80154c6:	f008 fc0c 	bl	801dce2 <memcpy>
 80154ca:	e000      	b.n	80154ce <_ZN20TWIPR_ControlManager30newTrajectoryReceived_callbackEt+0x30>
		return;
 80154cc:	bf00      	nop
			sizeof(twipr_control_trajectory_input_t)
					* TWIPR_CONTROL_TRAJECTORY_BUFFER_SIZE);
}
 80154ce:	3708      	adds	r7, #8
 80154d0:	46bd      	mov	sp, r7
 80154d2:	bd80      	pop	{r7, pc}

080154d4 <_ZN20TWIPR_ControlManager4stepEv>:
/* ======================================================== */
void TWIPR_ControlManager::step() {
 80154d4:	b5b0      	push	{r4, r5, r7, lr}
 80154d6:	b088      	sub	sp, #32
 80154d8:	af00      	add	r7, sp, #0
 80154da:	61f8      	str	r0, [r7, #28]
	// Read the state from the estimator
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_8);
 80154dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80154e0:	483f      	ldr	r0, [pc, #252]	; (80155e0 <_ZN20TWIPR_ControlManager4stepEv+0x10c>)
 80154e2:	f7ef fd58 	bl	8004f96 <HAL_GPIO_TogglePin>
	this->_dynamic_state = this->_estimation->getState();
 80154e6:	69fb      	ldr	r3, [r7, #28]
 80154e8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80154ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80154ee:	69fb      	ldr	r3, [r7, #28]
 80154f0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80154f4:	461c      	mov	r4, r3
 80154f6:	463b      	mov	r3, r7
 80154f8:	4611      	mov	r1, r2
 80154fa:	4618      	mov	r0, r3
 80154fc:	f002 ff82 	bl	8018404 <_ZN16TWIPR_Estimation8getStateEv>
 8015500:	343c      	adds	r4, #60	; 0x3c
 8015502:	463d      	mov	r5, r7
 8015504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015508:	682b      	ldr	r3, [r5, #0]
 801550a:	6023      	str	r3, [r4, #0]

	// Check for errors
	// Drive
	// TODO

	switch (this->status) {
 801550c:	69fb      	ldr	r3, [r7, #28]
 801550e:	f993 3000 	ldrsb.w	r3, [r3]
 8015512:	2b01      	cmp	r3, #1
 8015514:	d00f      	beq.n	8015536 <_ZN20TWIPR_ControlManager4stepEv+0x62>
 8015516:	2b01      	cmp	r3, #1
 8015518:	dc2d      	bgt.n	8015576 <_ZN20TWIPR_ControlManager4stepEv+0xa2>
 801551a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801551e:	d002      	beq.n	8015526 <_ZN20TWIPR_ControlManager4stepEv+0x52>
 8015520:	2b00      	cmp	r3, #0
 8015522:	d004      	beq.n	801552e <_ZN20TWIPR_ControlManager4stepEv+0x5a>
 8015524:	e027      	b.n	8015576 <_ZN20TWIPR_ControlManager4stepEv+0xa2>
	case TWIPR_CONTROL_STATUS_ERROR: {
		this->_step_error();
 8015526:	69f8      	ldr	r0, [r7, #28]
 8015528:	f000 fa1b 	bl	8015962 <_ZN20TWIPR_ControlManager11_step_errorEv>
		break;
 801552c:	e023      	b.n	8015576 <_ZN20TWIPR_ControlManager4stepEv+0xa2>
	}
	case TWIPR_CONTROL_STATUS_IDLE: {
		this->_step_idle();
 801552e:	69f8      	ldr	r0, [r7, #28]
 8015530:	f000 f9e1 	bl	80158f6 <_ZN20TWIPR_ControlManager10_step_idleEv>
		break;
 8015534:	e01f      	b.n	8015576 <_ZN20TWIPR_ControlManager4stepEv+0xa2>
	}
	case TWIPR_CONTROL_STATUS_RUNNING: {
		switch (this->mode) {
 8015536:	69fb      	ldr	r3, [r7, #28]
 8015538:	785b      	ldrb	r3, [r3, #1]
 801553a:	2b03      	cmp	r3, #3
 801553c:	d81a      	bhi.n	8015574 <_ZN20TWIPR_ControlManager4stepEv+0xa0>
 801553e:	a201      	add	r2, pc, #4	; (adr r2, 8015544 <_ZN20TWIPR_ControlManager4stepEv+0x70>)
 8015540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015544:	08015555 	.word	0x08015555
 8015548:	0801555d 	.word	0x0801555d
 801554c:	08015565 	.word	0x08015565
 8015550:	0801556d 	.word	0x0801556d
		case TWIPR_CONTROL_MODE_OFF: {
			this->_step_off();
 8015554:	69f8      	ldr	r0, [r7, #28]
 8015556:	f000 f958 	bl	801580a <_ZN20TWIPR_ControlManager9_step_offEv>
			break;
 801555a:	e00b      	b.n	8015574 <_ZN20TWIPR_ControlManager4stepEv+0xa0>
		}
		case TWIPR_CONTROL_MODE_DIRECT: {
			this->_step_direct();
 801555c:	69f8      	ldr	r0, [r7, #28]
 801555e:	f000 f98a 	bl	8015876 <_ZN20TWIPR_ControlManager12_step_directEv>
			break;
 8015562:	e007      	b.n	8015574 <_ZN20TWIPR_ControlManager4stepEv+0xa0>
		}
		case TWIPR_CONTROL_MODE_BALANCING: {
			this->_step_balancing();
 8015564:	69f8      	ldr	r0, [r7, #28]
 8015566:	f000 fa33 	bl	80159d0 <_ZN20TWIPR_ControlManager15_step_balancingEv>
			break;
 801556a:	e003      	b.n	8015574 <_ZN20TWIPR_ControlManager4stepEv+0xa0>
		}
		case TWIPR_CONTROL_MODE_TRAJECTORY: {
			this->_step_trajectory();
 801556c:	69f8      	ldr	r0, [r7, #28]
 801556e:	f000 fb0b 	bl	8015b88 <_ZN20TWIPR_ControlManager16_step_trajectoryEv>
			break;
 8015572:	bf00      	nop
		}
		}
		break;
 8015574:	bf00      	nop
	}
	}

	// Call the step callback
	if (this->_callbacks.step.registered) {
 8015576:	69fb      	ldr	r3, [r7, #28]
 8015578:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 801557c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8015580:	2b00      	cmp	r3, #0
 8015582:	d00c      	beq.n	801559e <_ZN20TWIPR_ControlManager4stepEv+0xca>
		this->_callbacks.step.call(this->_tick);
 8015584:	69fa      	ldr	r2, [r7, #28]
 8015586:	f246 03b8 	movw	r3, #24760	; 0x60b8
 801558a:	4413      	add	r3, r2
 801558c:	69fa      	ldr	r2, [r7, #28]
 801558e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 8015592:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
 8015596:	4611      	mov	r1, r2
 8015598:	4618      	mov	r0, r3
 801559a:	f000 ffcd 	bl	8016538 <_ZN19core_utils_CallbackIvmE4callEm>
	}

	// Check for state transitions // TODO
	if (this->mode == TWIPR_CONTROL_MODE_TRAJECTORY) {
 801559e:	69fb      	ldr	r3, [r7, #28]
 80155a0:	785b      	ldrb	r3, [r3, #1]
 80155a2:	2b03      	cmp	r3, #3
 80155a4:	d10c      	bne.n	80155c0 <_ZN20TWIPR_ControlManager4stepEv+0xec>
		//	 Check if the trajectory is finished
		if (this->_trajectory.step == this->_trajectory.length) {
 80155a6:	69fb      	ldr	r3, [r7, #28]
 80155a8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80155ac:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80155ae:	69fb      	ldr	r3, [r7, #28]
 80155b0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80155b4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80155b6:	429a      	cmp	r2, r3
 80155b8:	d102      	bne.n	80155c0 <_ZN20TWIPR_ControlManager4stepEv+0xec>
			this->_trajectoryFinished();
 80155ba:	69f8      	ldr	r0, [r7, #28]
 80155bc:	f000 fbf0 	bl	8015da0 <_ZN20TWIPR_ControlManager19_trajectoryFinishedEv>
		}
	}

	this->_tick++;
 80155c0:	69fb      	ldr	r3, [r7, #28]
 80155c2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80155c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80155ca:	3301      	adds	r3, #1
 80155cc:	69fa      	ldr	r2, [r7, #28]
 80155ce:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 80155d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8

}
 80155d6:	bf00      	nop
 80155d8:	3720      	adds	r7, #32
 80155da:	46bd      	mov	sp, r7
 80155dc:	bdb0      	pop	{r4, r5, r7, pc}
 80155de:	bf00      	nop
 80155e0:	58020c00 	.word	0x58020c00

080155e4 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t>:
/* ======================================================== */
uint8_t TWIPR_ControlManager::setMode(twipr_control_mode_t mode) {
 80155e4:	b580      	push	{r7, lr}
 80155e6:	b082      	sub	sp, #8
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	6078      	str	r0, [r7, #4]
 80155ec:	460b      	mov	r3, r1
 80155ee:	70fb      	strb	r3, [r7, #3]

	// Setting mode should only work while running
	if (this->status == TWIPR_CONTROL_STATUS_IDLE) {
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	f993 3000 	ldrsb.w	r3, [r3]
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d101      	bne.n	80155fe <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x1a>
		return 0;
 80155fa:	2300      	movs	r3, #0
 80155fc:	e074      	b.n	80156e8 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x104>
	}
	if (this->status == TWIPR_CONTROL_STATUS_ERROR) {
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	f993 3000 	ldrsb.w	r3, [r3]
 8015604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015608:	d101      	bne.n	801560e <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x2a>
		return 0;
 801560a:	2300      	movs	r3, #0
 801560c:	e06c      	b.n	80156e8 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x104>
	}

	if (mode == TWIPR_CONTROL_MODE_TRAJECTORY) {
 801560e:	78fb      	ldrb	r3, [r7, #3]
 8015610:	2b03      	cmp	r3, #3
 8015612:	d101      	bne.n	8015618 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x34>
		return 0;
 8015614:	2300      	movs	r3, #0
 8015616:	e067      	b.n	80156e8 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x104>
	}

	this->mode = mode;
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	78fa      	ldrb	r2, [r7, #3]
 801561c:	705a      	strb	r2, [r3, #1]

	// Switch the mode of the balancing controller to the appropriate mode
	switch (this->mode) {
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	785b      	ldrb	r3, [r3, #1]
 8015622:	2b03      	cmp	r3, #3
 8015624:	d84f      	bhi.n	80156c6 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0xe2>
 8015626:	a201      	add	r2, pc, #4	; (adr r2, 801562c <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x48>)
 8015628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801562c:	0801563d 	.word	0x0801563d
 8015630:	08015645 	.word	0x08015645
 8015634:	0801566b 	.word	0x0801566b
 8015638:	080156a1 	.word	0x080156a1
	case TWIPR_CONTROL_MODE_OFF: {
		this->stop();
 801563c:	6878      	ldr	r0, [r7, #4]
 801563e:	f7ff fef7 	bl	8015430 <_ZN20TWIPR_ControlManager4stopEv>
		break;
 8015642:	e040      	b.n	80156c6 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0xe2>
	}
	case TWIPR_CONTROL_MODE_DIRECT: {
		if (this->config.drive->status != TWIPR_DRIVE_STATUS_RUNNING) {
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	689b      	ldr	r3, [r3, #8]
 8015648:	781b      	ldrb	r3, [r3, #0]
 801564a:	2b02      	cmp	r3, #2
 801564c:	d004      	beq.n	8015658 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x74>
			this->config.drive->start();
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	689b      	ldr	r3, [r3, #8]
 8015652:	4618      	mov	r0, r3
 8015654:	f002 fbcc 	bl	8017df0 <_ZN11TWIPR_Drive5startEv>
		}

		this->_balancing_control.setMode(TWIPR_BALANCING_CONTROL_MODE_DIRECT);
 8015658:	687a      	ldr	r2, [r7, #4]
 801565a:	f243 03e8 	movw	r3, #12520	; 0x30e8
 801565e:	4413      	add	r3, r2
 8015660:	2101      	movs	r1, #1
 8015662:	4618      	mov	r0, r3
 8015664:	f7ff fb45 	bl	8014cf2 <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t>
		break;
 8015668:	e02d      	b.n	80156c6 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0xe2>
	}
	case TWIPR_CONTROL_MODE_BALANCING: {
		if (this->config.drive->status != TWIPR_DRIVE_STATUS_RUNNING) {
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	689b      	ldr	r3, [r3, #8]
 801566e:	781b      	ldrb	r3, [r3, #0]
 8015670:	2b02      	cmp	r3, #2
 8015672:	d004      	beq.n	801567e <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x9a>
			this->config.drive->start();
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	689b      	ldr	r3, [r3, #8]
 8015678:	4618      	mov	r0, r3
 801567a:	f002 fbb9 	bl	8017df0 <_ZN11TWIPR_Drive5startEv>
		}
		this->_balancing_control.setMode(TWIPR_BALANCING_CONTROL_MODE_ON);
 801567e:	687a      	ldr	r2, [r7, #4]
 8015680:	f243 03e8 	movw	r3, #12520	; 0x30e8
 8015684:	4413      	add	r3, r2
 8015686:	2102      	movs	r1, #2
 8015688:	4618      	mov	r0, r3
 801568a:	f7ff fb32 	bl	8014cf2 <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t>
		this->_sum_theta = 0;
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8015694:	461a      	mov	r2, r3
 8015696:	f04f 0300 	mov.w	r3, #0
 801569a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
		break;
 801569e:	e012      	b.n	80156c6 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0xe2>
	}
	case TWIPR_CONTROL_MODE_TRAJECTORY: {
		if (this->config.drive->status != TWIPR_DRIVE_STATUS_RUNNING) {
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	689b      	ldr	r3, [r3, #8]
 80156a4:	781b      	ldrb	r3, [r3, #0]
 80156a6:	2b02      	cmp	r3, #2
 80156a8:	d004      	beq.n	80156b4 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0xd0>
			this->config.drive->start();
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	689b      	ldr	r3, [r3, #8]
 80156ae:	4618      	mov	r0, r3
 80156b0:	f002 fb9e 	bl	8017df0 <_ZN11TWIPR_Drive5startEv>
		}
		this->_balancing_control.setMode(TWIPR_BALANCING_CONTROL_MODE_ON);
 80156b4:	687a      	ldr	r2, [r7, #4]
 80156b6:	f243 03e8 	movw	r3, #12520	; 0x30e8
 80156ba:	4413      	add	r3, r2
 80156bc:	2102      	movs	r1, #2
 80156be:	4618      	mov	r0, r3
 80156c0:	f7ff fb17 	bl	8014cf2 <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t>
		break;
 80156c4:	bf00      	nop
	}
	}

	// Reset the input
	this->_input.u_1 = 0;
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80156cc:	461a      	mov	r2, r3
 80156ce:	f04f 0300 	mov.w	r3, #0
 80156d2:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
	this->_input.u_2 = 0;
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80156dc:	461a      	mov	r2, r3
 80156de:	f04f 0300 	mov.w	r3, #0
 80156e2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148


	return 1;
 80156e6:	2301      	movs	r3, #1
}
 80156e8:	4618      	mov	r0, r3
 80156ea:	3708      	adds	r7, #8
 80156ec:	46bd      	mov	sp, r7
 80156ee:	bd80      	pop	{r7, pc}

080156f0 <_ZN20TWIPR_ControlManager8setInputE21twipr_control_input_t>:
/* ======================================================== */
void TWIPR_ControlManager::setInput(twipr_control_input_t input) {
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b084      	sub	sp, #16
 80156f4:	af00      	add	r7, sp, #0
 80156f6:	60f8      	str	r0, [r7, #12]
 80156f8:	eeb0 7a40 	vmov.f32	s14, s0
 80156fc:	eef0 7a60 	vmov.f32	s15, s1
 8015700:	ed87 7a01 	vstr	s14, [r7, #4]
 8015704:	edc7 7a02 	vstr	s15, [r7, #8]
// TODO: We need some input checking here
	if (this->status != TWIPR_CONTROL_STATUS_RUNNING) {
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	f993 3000 	ldrsb.w	r3, [r3]
 801570e:	2b01      	cmp	r3, #1
 8015710:	d11e      	bne.n	8015750 <_ZN20TWIPR_ControlManager8setInputE21twipr_control_input_t+0x60>
		return;
	}
	if (this->mode == TWIPR_CONTROL_MODE_OFF || this->mode == TWIPR_CONTROL_MODE_TRAJECTORY) {
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	785b      	ldrb	r3, [r3, #1]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d01c      	beq.n	8015754 <_ZN20TWIPR_ControlManager8setInputE21twipr_control_input_t+0x64>
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	785b      	ldrb	r3, [r3, #1]
 801571e:	2b03      	cmp	r3, #3
 8015720:	d018      	beq.n	8015754 <_ZN20TWIPR_ControlManager8setInputE21twipr_control_input_t+0x64>
		return;
	}

	osSemaphoreAcquire(semaphore_external_input, portMAX_DELAY);
 8015722:	4b0e      	ldr	r3, [pc, #56]	; (801575c <_ZN20TWIPR_ControlManager8setInputE21twipr_control_input_t+0x6c>)
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	f04f 31ff 	mov.w	r1, #4294967295
 801572a:	4618      	mov	r0, r3
 801572c:	f7f8 fe1c 	bl	800e368 <osSemaphoreAcquire>
	this->_input = input;
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015736:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801573a:	1d3a      	adds	r2, r7, #4
 801573c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015740:	e883 0003 	stmia.w	r3, {r0, r1}
	osSemaphoreRelease(semaphore_external_input);
 8015744:	4b05      	ldr	r3, [pc, #20]	; (801575c <_ZN20TWIPR_ControlManager8setInputE21twipr_control_input_t+0x6c>)
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	4618      	mov	r0, r3
 801574a:	f7f8 fe5f 	bl	800e40c <osSemaphoreRelease>
 801574e:	e002      	b.n	8015756 <_ZN20TWIPR_ControlManager8setInputE21twipr_control_input_t+0x66>
		return;
 8015750:	bf00      	nop
 8015752:	e000      	b.n	8015756 <_ZN20TWIPR_ControlManager8setInputE21twipr_control_input_t+0x66>
		return;
 8015754:	bf00      	nop
}
 8015756:	3710      	adds	r7, #16
 8015758:	46bd      	mov	sp, r7
 801575a:	bd80      	pop	{r7, pc}
 801575c:	240152bc 	.word	0x240152bc

08015760 <_ZN20TWIPR_ControlManager16setBalancingGainEPf>:
twipr_control_status_t TWIPR_ControlManager::getStatus() {
	return this->status;
}

/* ======================================================== */
uint8_t TWIPR_ControlManager::setBalancingGain(float *K) {
 8015760:	b580      	push	{r7, lr}
 8015762:	b082      	sub	sp, #8
 8015764:	af00      	add	r7, sp, #0
 8015766:	6078      	str	r0, [r7, #4]
 8015768:	6039      	str	r1, [r7, #0]
	// This is only allowed if the controller is off
	if (this->status != TWIPR_CONTROL_STATUS_RUNNING) {
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	f993 3000 	ldrsb.w	r3, [r3]
 8015770:	2b01      	cmp	r3, #1
 8015772:	d001      	beq.n	8015778 <_ZN20TWIPR_ControlManager16setBalancingGainEPf+0x18>
		return 0;
 8015774:	2300      	movs	r3, #0
 8015776:	e017      	b.n	80157a8 <_ZN20TWIPR_ControlManager16setBalancingGainEPf+0x48>
	}
	if (this->mode != TWIPR_CONTROL_MODE_OFF) {
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	785b      	ldrb	r3, [r3, #1]
 801577c:	2b00      	cmp	r3, #0
 801577e:	d001      	beq.n	8015784 <_ZN20TWIPR_ControlManager16setBalancingGainEPf+0x24>
		return 0;
 8015780:	2300      	movs	r3, #0
 8015782:	e011      	b.n	80157a8 <_ZN20TWIPR_ControlManager16setBalancingGainEPf+0x48>
	}

	memcpy(this->config.K, K, sizeof(float) * 8);
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	330c      	adds	r3, #12
 8015788:	2220      	movs	r2, #32
 801578a:	6839      	ldr	r1, [r7, #0]
 801578c:	4618      	mov	r0, r3
 801578e:	f008 faa8 	bl	801dce2 <memcpy>
	this->_balancing_control.set_K(this->config.K);
 8015792:	687a      	ldr	r2, [r7, #4]
 8015794:	f243 03e8 	movw	r3, #12520	; 0x30e8
 8015798:	4413      	add	r3, r2
 801579a:	687a      	ldr	r2, [r7, #4]
 801579c:	320c      	adds	r2, #12
 801579e:	4611      	mov	r1, r2
 80157a0:	4618      	mov	r0, r3
 80157a2:	f7ff fa96 	bl	8014cd2 <_ZN22TWIPR_BalancingControl5set_KEPf>
	return 1;
 80157a6:	2301      	movs	r3, #1
}
 80157a8:	4618      	mov	r0, r3
 80157aa:	3708      	adds	r7, #8
 80157ac:	46bd      	mov	sp, r7
 80157ae:	bd80      	pop	{r7, pc}

080157b0 <_ZN20TWIPR_ControlManager15startTrajectoryE26twipr_control_trajectory_t>:
/* ======================================================== */
uint8_t TWIPR_ControlManager::startTrajectory(
		twipr_control_trajectory_t trajectory) {
 80157b0:	b480      	push	{r7}
 80157b2:	b085      	sub	sp, #20
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	60f8      	str	r0, [r7, #12]
 80157b8:	1d3b      	adds	r3, r7, #4
 80157ba:	e883 0006 	stmia.w	r3, {r1, r2}

	if (this->status != TWIPR_CONTROL_STATUS_RUNNING) {
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	f993 3000 	ldrsb.w	r3, [r3]
 80157c4:	2b01      	cmp	r3, #1
 80157c6:	d001      	beq.n	80157cc <_ZN20TWIPR_ControlManager15startTrajectoryE26twipr_control_trajectory_t+0x1c>
		return 0;
 80157c8:	2300      	movs	r3, #0
 80157ca:	e018      	b.n	80157fe <_ZN20TWIPR_ControlManager15startTrajectoryE26twipr_control_trajectory_t+0x4e>
	}

	// This is only allowed when we are in balancing mode for now // TODO
	if (this->mode != TWIPR_CONTROL_MODE_BALANCING) {
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	785b      	ldrb	r3, [r3, #1]
 80157d0:	2b02      	cmp	r3, #2
 80157d2:	d001      	beq.n	80157d8 <_ZN20TWIPR_ControlManager15startTrajectoryE26twipr_control_trajectory_t+0x28>
		return 0;
 80157d4:	2300      	movs	r3, #0
 80157d6:	e012      	b.n	80157fe <_ZN20TWIPR_ControlManager15startTrajectoryE26twipr_control_trajectory_t+0x4e>
	}

	this->_trajectory.step = trajectory.step;
 80157d8:	88ba      	ldrh	r2, [r7, #4]
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80157e0:	869a      	strh	r2, [r3, #52]	; 0x34
	this->_trajectory.trajectory_id = trajectory.trajectory_id;
 80157e2:	88fa      	ldrh	r2, [r7, #6]
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80157ea:	86da      	strh	r2, [r3, #54]	; 0x36
	this->_trajectory.length = trajectory.length;
 80157ec:	893a      	ldrh	r2, [r7, #8]
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80157f4:	871a      	strh	r2, [r3, #56]	; 0x38

	// Set the mode to trajectory
	this->mode = TWIPR_CONTROL_MODE_TRAJECTORY;
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	2203      	movs	r2, #3
 80157fa:	705a      	strb	r2, [r3, #1]

	return 1;
 80157fc:	2301      	movs	r3, #1
}
 80157fe:	4618      	mov	r0, r3
 8015800:	3714      	adds	r7, #20
 8015802:	46bd      	mov	sp, r7
 8015804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015808:	4770      	bx	lr

0801580a <_ZN20TWIPR_ControlManager9_step_offEv>:
	this->_input.u_2 = 0;

	return 1;
}
/* ======================================================== */
void TWIPR_ControlManager::_step_off() {
 801580a:	b580      	push	{r7, lr}
 801580c:	b082      	sub	sp, #8
 801580e:	af00      	add	r7, sp, #0
 8015810:	6078      	str	r0, [r7, #4]
	this->_input.u_1 = 0.0;
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015818:	461a      	mov	r2, r3
 801581a:	f04f 0300 	mov.w	r3, #0
 801581e:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
	this->_input.u_2 = 0.0;
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015828:	461a      	mov	r2, r3
 801582a:	f04f 0300 	mov.w	r3, #0
 801582e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
	this->_output.u_left = 0.0;
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015838:	461a      	mov	r2, r3
 801583a:	f04f 0300 	mov.w	r3, #0
 801583e:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
	this->_output.u_right = 0.0;
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015848:	461a      	mov	r2, r3
 801584a:	f04f 0300 	mov.w	r3, #0
 801584e:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
	this->_setTorque(this->_output);
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015858:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
 801585c:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 8015860:	eeb0 0a47 	vmov.f32	s0, s14
 8015864:	eef0 0a67 	vmov.f32	s1, s15
 8015868:	6878      	ldr	r0, [r7, #4]
 801586a:	f000 fa27 	bl	8015cbc <_ZN20TWIPR_ControlManager10_setTorqueE22twipr_control_output_t>
}
 801586e:	bf00      	nop
 8015870:	3708      	adds	r7, #8
 8015872:	46bd      	mov	sp, r7
 8015874:	bd80      	pop	{r7, pc}

08015876 <_ZN20TWIPR_ControlManager12_step_directEv>:
/* ======================================================== */
void TWIPR_ControlManager::_step_direct() {
 8015876:	b580      	push	{r7, lr}
 8015878:	b082      	sub	sp, #8
 801587a:	af00      	add	r7, sp, #0
 801587c:	6078      	str	r0, [r7, #4]
	this->_output.u_left = limit(this->_input.u_1, this->config.max_torque);
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015884:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 801588e:	eef0 0a47 	vmov.f32	s1, s14
 8015892:	eeb0 0a67 	vmov.f32	s0, s15
 8015896:	f007 fb8e 	bl	801cfb6 <_Z5limitff>
 801589a:	eef0 7a40 	vmov.f32	s15, s0
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80158a4:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
	this->_output.u_right = limit(this->_input.u_2, this->config.max_torque);
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80158ae:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80158b8:	eef0 0a47 	vmov.f32	s1, s14
 80158bc:	eeb0 0a67 	vmov.f32	s0, s15
 80158c0:	f007 fb79 	bl	801cfb6 <_Z5limitff>
 80158c4:	eef0 7a40 	vmov.f32	s15, s0
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80158ce:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150

	this->_setTorque(this->_output);
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80158d8:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
 80158dc:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 80158e0:	eeb0 0a47 	vmov.f32	s0, s14
 80158e4:	eef0 0a67 	vmov.f32	s1, s15
 80158e8:	6878      	ldr	r0, [r7, #4]
 80158ea:	f000 f9e7 	bl	8015cbc <_ZN20TWIPR_ControlManager10_setTorqueE22twipr_control_output_t>
}
 80158ee:	bf00      	nop
 80158f0:	3708      	adds	r7, #8
 80158f2:	46bd      	mov	sp, r7
 80158f4:	bd80      	pop	{r7, pc}

080158f6 <_ZN20TWIPR_ControlManager10_step_idleEv>:
/* ======================================================== */
void TWIPR_ControlManager::_step_idle() {
 80158f6:	b580      	push	{r7, lr}
 80158f8:	b082      	sub	sp, #8
 80158fa:	af00      	add	r7, sp, #0
 80158fc:	6078      	str	r0, [r7, #4]
	this->_input.u_1 = 0.0;
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015904:	461a      	mov	r2, r3
 8015906:	f04f 0300 	mov.w	r3, #0
 801590a:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
	this->_input.u_2 = 0.0;
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015914:	461a      	mov	r2, r3
 8015916:	f04f 0300 	mov.w	r3, #0
 801591a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
	this->_output.u_left = 0.0;
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015924:	461a      	mov	r2, r3
 8015926:	f04f 0300 	mov.w	r3, #0
 801592a:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
	this->_output.u_right = 0.0;
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015934:	461a      	mov	r2, r3
 8015936:	f04f 0300 	mov.w	r3, #0
 801593a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150

	this->_setTorque(this->_output);
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015944:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
 8015948:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 801594c:	eeb0 0a47 	vmov.f32	s0, s14
 8015950:	eef0 0a67 	vmov.f32	s1, s15
 8015954:	6878      	ldr	r0, [r7, #4]
 8015956:	f000 f9b1 	bl	8015cbc <_ZN20TWIPR_ControlManager10_setTorqueE22twipr_control_output_t>
}
 801595a:	bf00      	nop
 801595c:	3708      	adds	r7, #8
 801595e:	46bd      	mov	sp, r7
 8015960:	bd80      	pop	{r7, pc}

08015962 <_ZN20TWIPR_ControlManager11_step_errorEv>:
/* ======================================================== */
void TWIPR_ControlManager::_step_error() {
 8015962:	b580      	push	{r7, lr}
 8015964:	b082      	sub	sp, #8
 8015966:	af00      	add	r7, sp, #0
 8015968:	6078      	str	r0, [r7, #4]
	this->_input.u_1 = 0.0;
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015970:	461a      	mov	r2, r3
 8015972:	f04f 0300 	mov.w	r3, #0
 8015976:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
	this->_input.u_2 = 0.0;
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015980:	461a      	mov	r2, r3
 8015982:	f04f 0300 	mov.w	r3, #0
 8015986:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
	this->_output.u_left = 0.0;
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015990:	461a      	mov	r2, r3
 8015992:	f04f 0300 	mov.w	r3, #0
 8015996:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
	this->_output.u_right = 0.0;
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80159a0:	461a      	mov	r2, r3
 80159a2:	f04f 0300 	mov.w	r3, #0
 80159a6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150

	this->_setTorque(this->_output);
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80159b0:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
 80159b4:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 80159b8:	eeb0 0a47 	vmov.f32	s0, s14
 80159bc:	eef0 0a67 	vmov.f32	s1, s15
 80159c0:	6878      	ldr	r0, [r7, #4]
 80159c2:	f000 f97b 	bl	8015cbc <_ZN20TWIPR_ControlManager10_setTorqueE22twipr_control_output_t>
}
 80159c6:	bf00      	nop
 80159c8:	3708      	adds	r7, #8
 80159ca:	46bd      	mov	sp, r7
 80159cc:	bd80      	pop	{r7, pc}
	...

080159d0 <_ZN20TWIPR_ControlManager15_step_balancingEv>:
/* ======================================================== */
void TWIPR_ControlManager::_step_balancing() {
 80159d0:	b5b0      	push	{r4, r5, r7, lr}
 80159d2:	b08e      	sub	sp, #56	; 0x38
 80159d4:	af04      	add	r7, sp, #16
 80159d6:	6078      	str	r0, [r7, #4]
	//	 Calculate the input from the balancing controller

	osSemaphoreAcquire(semaphore_external_input, portMAX_DELAY);
 80159d8:	4b67      	ldr	r3, [pc, #412]	; (8015b78 <_ZN20TWIPR_ControlManager15_step_balancingEv+0x1a8>)
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	f04f 31ff 	mov.w	r1, #4294967295
 80159e0:	4618      	mov	r0, r3
 80159e2:	f7f8 fcc1 	bl	800e368 <osSemaphoreAcquire>
	twipr_control_input_t external_input = this->_input;
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80159ec:	461a      	mov	r2, r3
 80159ee:	f107 0318 	add.w	r3, r7, #24
 80159f2:	f502 72a2 	add.w	r2, r2, #324	; 0x144
 80159f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80159fa:	e883 0003 	stmia.w	r3, {r0, r1}
	osSemaphoreRelease(semaphore_external_input);
 80159fe:	4b5e      	ldr	r3, [pc, #376]	; (8015b78 <_ZN20TWIPR_ControlManager15_step_balancingEv+0x1a8>)
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	4618      	mov	r0, r3
 8015a04:	f7f8 fd02 	bl	800e40c <osSemaphoreRelease>

	twipr_balancing_control_input_t balancing_input = { .u_1 = external_input.u_1,
 8015a08:	69bb      	ldr	r3, [r7, #24]
			.u_2 = external_input.u_2 };
 8015a0a:	613b      	str	r3, [r7, #16]
 8015a0c:	69fb      	ldr	r3, [r7, #28]
 8015a0e:	617b      	str	r3, [r7, #20]

	twipr_balancing_control_output_t balancing_output;

	// Update the balancing controller
	this->_balancing_control.update(this->_dynamic_state, balancing_input,
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	f243 04e8 	movw	r4, #12520	; 0x30e8
 8015a16:	441c      	add	r4, r3
 8015a18:	ed97 7a04 	vldr	s14, [r7, #16]
 8015a1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8015a26:	f107 0208 	add.w	r2, r7, #8
 8015a2a:	9202      	str	r2, [sp, #8]
 8015a2c:	466d      	mov	r5, sp
 8015a2e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8015a32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015a36:	e885 0003 	stmia.w	r5, {r0, r1}
 8015a3a:	333c      	adds	r3, #60	; 0x3c
 8015a3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015a3e:	eeb0 0a47 	vmov.f32	s0, s14
 8015a42:	eef0 0a67 	vmov.f32	s1, s15
 8015a46:	4620      	mov	r0, r4
 8015a48:	f7ff f848 	bl	8014adc <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t>
			&balancing_output);

	this->_sum_theta += this->_dynamic_state.theta;
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8015a52:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8015a5c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8015a60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8015a6a:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	this->_sum_v += this->_dynamic_state.v;
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8015a74:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8015a7e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8015a82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8015a8c:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0

	float theta_ouput_int = this->_sum_theta * 0.000;
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8015a96:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8015a9a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8015b7c <_ZN20TWIPR_ControlManager15_step_balancingEv+0x1ac>
 8015a9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015aa2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float v_ouput_int = this->_sum_v * (0.0);
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8015aac:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8015ab0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8015b7c <_ZN20TWIPR_ControlManager15_step_balancingEv+0x1ac>
 8015ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015ab8:	edc7 7a08 	vstr	s15, [r7, #32]

	theta_ouput_int = limit(theta_ouput_int, 0.004);
 8015abc:	eddf 0a30 	vldr	s1, [pc, #192]	; 8015b80 <_ZN20TWIPR_ControlManager15_step_balancingEv+0x1b0>
 8015ac0:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8015ac4:	f007 fa77 	bl	801cfb6 <_Z5limitff>
 8015ac8:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	v_ouput_int = limit(v_ouput_int, 0.02);
 8015acc:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8015b84 <_ZN20TWIPR_ControlManager15_step_balancingEv+0x1b4>
 8015ad0:	ed97 0a08 	vldr	s0, [r7, #32]
 8015ad4:	f007 fa6f 	bl	801cfb6 <_Z5limitff>
 8015ad8:	ed87 0a08 	vstr	s0, [r7, #32]

	balancing_output.u_1 = balancing_output.u_1 + theta_ouput_int + v_ouput_int;
 8015adc:	ed97 7a02 	vldr	s14, [r7, #8]
 8015ae0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015ae4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015ae8:	edd7 7a08 	vldr	s15, [r7, #32]
 8015aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015af0:	edc7 7a02 	vstr	s15, [r7, #8]
	balancing_output.u_2 = balancing_output.u_2 + theta_ouput_int + v_ouput_int;
 8015af4:	ed97 7a03 	vldr	s14, [r7, #12]
 8015af8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015afc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015b00:	edd7 7a08 	vldr	s15, [r7, #32]
 8015b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b08:	edc7 7a03 	vstr	s15, [r7, #12]

	this->_output.u_left = limit(balancing_output.u_1, this->config.max_torque);
 8015b0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8015b16:	eef0 0a47 	vmov.f32	s1, s14
 8015b1a:	eeb0 0a67 	vmov.f32	s0, s15
 8015b1e:	f007 fa4a 	bl	801cfb6 <_Z5limitff>
 8015b22:	eef0 7a40 	vmov.f32	s15, s0
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015b2c:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
	this->_output.u_right = limit(balancing_output.u_2,
 8015b30:	edd7 7a03 	vldr	s15, [r7, #12]
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8015b3a:	eef0 0a47 	vmov.f32	s1, s14
 8015b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8015b42:	f007 fa38 	bl	801cfb6 <_Z5limitff>
 8015b46:	eef0 7a40 	vmov.f32	s15, s0
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015b50:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
			this->config.max_torque);

	// Drive the motors
	this->_setTorque(this->_output);
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015b5a:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
 8015b5e:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 8015b62:	eeb0 0a47 	vmov.f32	s0, s14
 8015b66:	eef0 0a67 	vmov.f32	s1, s15
 8015b6a:	6878      	ldr	r0, [r7, #4]
 8015b6c:	f000 f8a6 	bl	8015cbc <_ZN20TWIPR_ControlManager10_setTorqueE22twipr_control_output_t>
}
 8015b70:	bf00      	nop
 8015b72:	3728      	adds	r7, #40	; 0x28
 8015b74:	46bd      	mov	sp, r7
 8015b76:	bdb0      	pop	{r4, r5, r7, pc}
 8015b78:	240152bc 	.word	0x240152bc
 8015b7c:	00000000 	.word	0x00000000
 8015b80:	3b83126f 	.word	0x3b83126f
 8015b84:	3ca3d70a 	.word	0x3ca3d70a

08015b88 <_ZN20TWIPR_ControlManager16_step_trajectoryEv>:
/* ======================================================== */
void TWIPR_ControlManager::_step_trajectory() {
 8015b88:	b5b0      	push	{r4, r5, r7, lr}
 8015b8a:	b08a      	sub	sp, #40	; 0x28
 8015b8c:	af04      	add	r7, sp, #16
 8015b8e:	6078      	str	r0, [r7, #4]

	// Check if the step is correct
	if (this->_trajectory_buffer[this->_trajectory.step].step
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8015b96:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
			!= this->_trajectory.step) {
		// TODO
	}

	// Set the input from the current input of the buffer
	this->_input.u_1 = this->_trajectory_buffer[this->_trajectory.step].u_1;
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8015b9e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8015ba0:	4619      	mov	r1, r3
 8015ba2:	687a      	ldr	r2, [r7, #4]
 8015ba4:	460b      	mov	r3, r1
 8015ba6:	005b      	lsls	r3, r3, #1
 8015ba8:	440b      	add	r3, r1
 8015baa:	009b      	lsls	r3, r3, #2
 8015bac:	441a      	add	r2, r3
 8015bae:	f243 1358 	movw	r3, #12632	; 0x3158
 8015bb2:	4413      	add	r3, r2
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	687a      	ldr	r2, [r7, #4]
 8015bb8:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8015bbc:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
	this->_input.u_2 = this->_trajectory_buffer[this->_trajectory.step].u_2;
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8015bc6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8015bc8:	4619      	mov	r1, r3
 8015bca:	687a      	ldr	r2, [r7, #4]
 8015bcc:	460b      	mov	r3, r1
 8015bce:	005b      	lsls	r3, r3, #1
 8015bd0:	440b      	add	r3, r1
 8015bd2:	009b      	lsls	r3, r3, #2
 8015bd4:	441a      	add	r2, r3
 8015bd6:	f243 135c 	movw	r3, #12636	; 0x315c
 8015bda:	4413      	add	r3, r2
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	687a      	ldr	r2, [r7, #4]
 8015be0:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8015be4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148

	// Perform a control step
	twipr_balancing_control_input_t balancing_input = { .u_1 = this->_input.u_1,
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015bee:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
			.u_2 = this->_input.u_2 };
 8015bf2:	613b      	str	r3, [r7, #16]
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015bfa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8015bfe:	617b      	str	r3, [r7, #20]

	twipr_balancing_control_output_t balancing_output;

	// Update the balancing controller
	this->_balancing_control.update(this->_dynamic_state, balancing_input,
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	f243 04e8 	movw	r4, #12520	; 0x30e8
 8015c06:	441c      	add	r4, r3
 8015c08:	ed97 7a04 	vldr	s14, [r7, #16]
 8015c0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8015c16:	f107 0208 	add.w	r2, r7, #8
 8015c1a:	9202      	str	r2, [sp, #8]
 8015c1c:	466d      	mov	r5, sp
 8015c1e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8015c22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015c26:	e885 0003 	stmia.w	r5, {r0, r1}
 8015c2a:	333c      	adds	r3, #60	; 0x3c
 8015c2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015c2e:	eeb0 0a47 	vmov.f32	s0, s14
 8015c32:	eef0 0a67 	vmov.f32	s1, s15
 8015c36:	4620      	mov	r0, r4
 8015c38:	f7fe ff50 	bl	8014adc <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t>
			&balancing_output);

	this->_output.u_left = limit(balancing_output.u_1, this->config.max_torque);
 8015c3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8015c46:	eef0 0a47 	vmov.f32	s1, s14
 8015c4a:	eeb0 0a67 	vmov.f32	s0, s15
 8015c4e:	f007 f9b2 	bl	801cfb6 <_Z5limitff>
 8015c52:	eef0 7a40 	vmov.f32	s15, s0
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015c5c:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
	this->_output.u_right = limit(balancing_output.u_2,
 8015c60:	edd7 7a03 	vldr	s15, [r7, #12]
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8015c6a:	eef0 0a47 	vmov.f32	s1, s14
 8015c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8015c72:	f007 f9a0 	bl	801cfb6 <_Z5limitff>
 8015c76:	eef0 7a40 	vmov.f32	s15, s0
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015c80:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
			this->config.max_torque);

	// Drive the motors
	this->_setTorque(this->_output);
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015c8a:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
 8015c8e:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 8015c92:	eeb0 0a47 	vmov.f32	s0, s14
 8015c96:	eef0 0a67 	vmov.f32	s1, s15
 8015c9a:	6878      	ldr	r0, [r7, #4]
 8015c9c:	f000 f80e 	bl	8015cbc <_ZN20TWIPR_ControlManager10_setTorqueE22twipr_control_output_t>

	// Increase the trajectory step counter
	this->_trajectory.step++;
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8015ca6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8015ca8:	3301      	adds	r3, #1
 8015caa:	b29a      	uxth	r2, r3
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8015cb2:	869a      	strh	r2, [r3, #52]	; 0x34

}
 8015cb4:	bf00      	nop
 8015cb6:	3718      	adds	r7, #24
 8015cb8:	46bd      	mov	sp, r7
 8015cba:	bdb0      	pop	{r4, r5, r7, pc}

08015cbc <_ZN20TWIPR_ControlManager10_setTorqueE22twipr_control_output_t>:
/* ======================================================== */
void TWIPR_ControlManager::_setTorque(twipr_control_output_t output) {
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	b086      	sub	sp, #24
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	60f8      	str	r0, [r7, #12]
 8015cc4:	eeb0 7a40 	vmov.f32	s14, s0
 8015cc8:	eef0 7a60 	vmov.f32	s15, s1
 8015ccc:	ed87 7a01 	vstr	s14, [r7, #4]
 8015cd0:	edc7 7a02 	vstr	s15, [r7, #8]

	// Apply the torque to the motors
	twipr_drive_input_t drive_input = { .torque_left = output.u_left,
 8015cd4:	687b      	ldr	r3, [r7, #4]
			.torque_right = output.u_right };
 8015cd6:	613b      	str	r3, [r7, #16]
 8015cd8:	68bb      	ldr	r3, [r7, #8]
 8015cda:	617b      	str	r3, [r7, #20]

	this->config.drive->setTorque(drive_input);
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	689b      	ldr	r3, [r3, #8]
 8015ce0:	ed97 7a04 	vldr	s14, [r7, #16]
 8015ce4:	edd7 7a05 	vldr	s15, [r7, #20]
 8015ce8:	eeb0 0a47 	vmov.f32	s0, s14
 8015cec:	eef0 0a67 	vmov.f32	s1, s15
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	f002 f903 	bl	8017efc <_ZN11TWIPR_Drive9setTorqueE19twipr_drive_input_t>
}
 8015cf6:	bf00      	nop
 8015cf8:	3718      	adds	r7, #24
 8015cfa:	46bd      	mov	sp, r7
 8015cfc:	bd80      	pop	{r7, pc}

08015cfe <_ZN19core_utils_CallbackIvmEaSERKS0_>:
class core_utils_Callback: public Callback {
 8015cfe:	b5b0      	push	{r4, r5, r7, lr}
 8015d00:	b082      	sub	sp, #8
 8015d02:	af00      	add	r7, sp, #0
 8015d04:	6078      	str	r0, [r7, #4]
 8015d06:	6039      	str	r1, [r7, #0]
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	683a      	ldr	r2, [r7, #0]
 8015d0c:	4611      	mov	r1, r2
 8015d0e:	4618      	mov	r0, r3
 8015d10:	f7fc fa0b 	bl	801212a <_ZN8CallbackaSERKS_>
 8015d14:	683b      	ldr	r3, [r7, #0]
 8015d16:	791a      	ldrb	r2, [r3, #4]
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	711a      	strb	r2, [r3, #4]
 8015d1c:	687a      	ldr	r2, [r7, #4]
 8015d1e:	683b      	ldr	r3, [r7, #0]
 8015d20:	f102 0408 	add.w	r4, r2, #8
 8015d24:	f103 0508 	add.w	r5, r3, #8
 8015d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015d2c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015d30:	e884 0003 	stmia.w	r4, {r0, r1}
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	4618      	mov	r0, r3
 8015d38:	3708      	adds	r7, #8
 8015d3a:	46bd      	mov	sp, r7
 8015d3c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015d40 <_ZN20TWIPR_ControlManager16registerCallbackE27twipr_control_callback_id_t19core_utils_CallbackIvmE>:
	}
}
/* ======================================================== */
void TWIPR_ControlManager::registerCallback(
		twipr_control_callback_id_t callback_id,
		core_utils_Callback<void, uint32_t> callback) {
 8015d40:	b580      	push	{r7, lr}
 8015d42:	b084      	sub	sp, #16
 8015d44:	af00      	add	r7, sp, #0
 8015d46:	60f8      	str	r0, [r7, #12]
 8015d48:	460b      	mov	r3, r1
 8015d4a:	607a      	str	r2, [r7, #4]
 8015d4c:	72fb      	strb	r3, [r7, #11]
	switch (callback_id) {
 8015d4e:	7afb      	ldrb	r3, [r7, #11]
 8015d50:	2b03      	cmp	r3, #3
 8015d52:	d820      	bhi.n	8015d96 <_ZN20TWIPR_ControlManager16registerCallbackE27twipr_control_callback_id_t19core_utils_CallbackIvmE+0x56>
 8015d54:	a201      	add	r2, pc, #4	; (adr r2, 8015d5c <_ZN20TWIPR_ControlManager16registerCallbackE27twipr_control_callback_id_t19core_utils_CallbackIvmE+0x1c>)
 8015d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d5a:	bf00      	nop
 8015d5c:	08015d6d 	.word	0x08015d6d
 8015d60:	08015d75 	.word	0x08015d75
 8015d64:	08015d7d 	.word	0x08015d7d
 8015d68:	08015d85 	.word	0x08015d85
	case TWIPR_CONTROL_CALLBACK_ERROR: {
		twipr_error_handler(0);
 8015d6c:	2000      	movs	r0, #0
 8015d6e:	f002 f90b 	bl	8017f88 <_Z19twipr_error_handlerm>
		break;
 8015d72:	e010      	b.n	8015d96 <_ZN20TWIPR_ControlManager16registerCallbackE27twipr_control_callback_id_t19core_utils_CallbackIvmE+0x56>
	}
	case TWIPR_CONTROL_CALLBACK_TRAJECTORY_START: {
		twipr_error_handler(0);
 8015d74:	2000      	movs	r0, #0
 8015d76:	f002 f907 	bl	8017f88 <_Z19twipr_error_handlerm>
		break;
 8015d7a:	e00c      	b.n	8015d96 <_ZN20TWIPR_ControlManager16registerCallbackE27twipr_control_callback_id_t19core_utils_CallbackIvmE+0x56>
	}
	case TWIPR_CONTROL_CALLBACK_TRAJECTORY_FINISHED: {
		twipr_error_handler(0);
 8015d7c:	2000      	movs	r0, #0
 8015d7e:	f002 f903 	bl	8017f88 <_Z19twipr_error_handlerm>
		break;
 8015d82:	e008      	b.n	8015d96 <_ZN20TWIPR_ControlManager16registerCallbackE27twipr_control_callback_id_t19core_utils_CallbackIvmE+0x56>
	}
	case TWIPR_CONTROL_CALLBACK_STEP: {
		this->_callbacks.step = callback;
 8015d84:	68fa      	ldr	r2, [r7, #12]
 8015d86:	f246 03b8 	movw	r3, #24760	; 0x60b8
 8015d8a:	4413      	add	r3, r2
 8015d8c:	6879      	ldr	r1, [r7, #4]
 8015d8e:	4618      	mov	r0, r3
 8015d90:	f7ff ffb5 	bl	8015cfe <_ZN19core_utils_CallbackIvmEaSERKS0_>
		break;
 8015d94:	bf00      	nop
	}
	}
}
 8015d96:	bf00      	nop
 8015d98:	3710      	adds	r7, #16
 8015d9a:	46bd      	mov	sp, r7
 8015d9c:	bd80      	pop	{r7, pc}
 8015d9e:	bf00      	nop

08015da0 <_ZN20TWIPR_ControlManager19_trajectoryFinishedEv>:
/* ======================================================== */
void TWIPR_ControlManager::_trajectoryFinished() {
 8015da0:	b580      	push	{r7, lr}
 8015da2:	b082      	sub	sp, #8
 8015da4:	af00      	add	r7, sp, #0
 8015da6:	6078      	str	r0, [r7, #4]

	// Reset the external input
	this->_input.u_1 = 0;
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015dae:	461a      	mov	r2, r3
 8015db0:	f04f 0300 	mov.w	r3, #0
 8015db4:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
	this->_input.u_2 = 0;
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015dbe:	461a      	mov	r2, r3
 8015dc0:	f04f 0300 	mov.w	r3, #0
 8015dc4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148

	// Set the mode back to balancing
	this->mode = TWIPR_CONTROL_MODE_BALANCING;
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	2202      	movs	r2, #2
 8015dcc:	705a      	strb	r2, [r3, #1]

	if (this->_callbacks.trajectory_finished.registered) {
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8015dd4:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d00b      	beq.n	8015df4 <_ZN20TWIPR_ControlManager19_trajectoryFinishedEv+0x54>
		this->_callbacks.trajectory_finished.call(this->_trajectory.length);
 8015ddc:	687a      	ldr	r2, [r7, #4]
 8015dde:	f246 0398 	movw	r3, #24728	; 0x6098
 8015de2:	4413      	add	r3, r2
 8015de4:	687a      	ldr	r2, [r7, #4]
 8015de6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 8015dea:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8015dec:	4611      	mov	r1, r2
 8015dee:	4618      	mov	r0, r3
 8015df0:	f7fc fb70 	bl	80124d4 <_ZN19core_utils_CallbackIvtE4callEt>
	}
}
 8015df4:	bf00      	nop
 8015df6:	3708      	adds	r7, #8
 8015df8:	46bd      	mov	sp, r7
 8015dfa:	bd80      	pop	{r7, pc}

08015dfc <_ZN20TWIPR_ControlManager9getSampleEv>:
/* ======================================================== */
twipr_logging_control_t TWIPR_ControlManager::getSample() {
 8015dfc:	b480      	push	{r7}
 8015dfe:	b083      	sub	sp, #12
 8015e00:	af00      	add	r7, sp, #0
 8015e02:	6078      	str	r0, [r7, #4]
 8015e04:	6039      	str	r1, [r7, #0]
	twipr_logging_control_t sample;
	sample.control_mode = this->mode;
 8015e06:	683b      	ldr	r3, [r7, #0]
 8015e08:	785a      	ldrb	r2, [r3, #1]
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	705a      	strb	r2, [r3, #1]
	sample.control_status = this->status;
 8015e0e:	683b      	ldr	r3, [r7, #0]
 8015e10:	f993 2000 	ldrsb.w	r2, [r3]
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	701a      	strb	r2, [r3, #0]
	sample.input = this->_input;
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	683a      	ldr	r2, [r7, #0]
 8015e1c:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8015e20:	3304      	adds	r3, #4
 8015e22:	f502 72a2 	add.w	r2, r2, #324	; 0x144
 8015e26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015e2a:	e883 0003 	stmia.w	r3, {r0, r1}
	sample.output = this->_output;
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	683a      	ldr	r2, [r7, #0]
 8015e32:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8015e36:	330c      	adds	r3, #12
 8015e38:	f502 72a6 	add.w	r2, r2, #332	; 0x14c
 8015e3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015e40:	e883 0003 	stmia.w	r3, {r0, r1}

	if (this->mode == TWIPR_CONTROL_MODE_TRAJECTORY) {
 8015e44:	683b      	ldr	r3, [r7, #0]
 8015e46:	785b      	ldrb	r3, [r3, #1]
 8015e48:	2b03      	cmp	r3, #3
 8015e4a:	d10d      	bne.n	8015e68 <_ZN20TWIPR_ControlManager9getSampleEv+0x6c>
		sample.trajectory_step = this->_trajectory.step;
 8015e4c:	683b      	ldr	r3, [r7, #0]
 8015e4e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8015e52:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8015e54:	461a      	mov	r2, r3
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	615a      	str	r2, [r3, #20]
		sample.trajectory_id = this->_trajectory.trajectory_id;
 8015e5a:	683b      	ldr	r3, [r7, #0]
 8015e5c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8015e60:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	831a      	strh	r2, [r3, #24]
	} else {
		sample.trajectory_step = 0;
		sample.trajectory_id = 0;
	}

	return sample;
 8015e66:	e005      	b.n	8015e74 <_ZN20TWIPR_ControlManager9getSampleEv+0x78>
		sample.trajectory_step = 0;
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	2200      	movs	r2, #0
 8015e6c:	615a      	str	r2, [r3, #20]
		sample.trajectory_id = 0;
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	2200      	movs	r2, #0
 8015e72:	831a      	strh	r2, [r3, #24]
	return sample;
 8015e74:	bf00      	nop
}
 8015e76:	6878      	ldr	r0, [r7, #4]
 8015e78:	370c      	adds	r7, #12
 8015e7a:	46bd      	mov	sp, r7
 8015e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e80:	4770      	bx	lr
	...

08015e84 <_ZN11RegisterMapC1Ev>:
class RegisterMap {
 8015e84:	b480      	push	{r7}
 8015e86:	b083      	sub	sp, #12
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	6078      	str	r0, [r7, #4]
 8015e8c:	4a04      	ldr	r2, [pc, #16]	; (8015ea0 <_ZN11RegisterMapC1Ev+0x1c>)
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	601a      	str	r2, [r3, #0]
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	4618      	mov	r0, r3
 8015e96:	370c      	adds	r7, #12
 8015e98:	46bd      	mov	sp, r7
 8015e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e9e:	4770      	bx	lr
 8015ea0:	08020910 	.word	0x08020910

08015ea4 <_ZN22core_utils_RegisterMapILi20EEC1Et>:
	core_utils_RegisterMap<size>(uint16_t address) {
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b082      	sub	sp, #8
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	6078      	str	r0, [r7, #4]
 8015eac:	460b      	mov	r3, r1
 8015eae:	807b      	strh	r3, [r7, #2]
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	4618      	mov	r0, r3
 8015eb4:	f7ff ffe6 	bl	8015e84 <_ZN11RegisterMapC1Ev>
 8015eb8:	4a08      	ldr	r2, [pc, #32]	; (8015edc <_ZN22core_utils_RegisterMapILi20EEC1Et+0x38>)
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	601a      	str	r2, [r3, #0]
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	330c      	adds	r3, #12
 8015ec2:	2250      	movs	r2, #80	; 0x50
 8015ec4:	2100      	movs	r1, #0
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	f007 ff19 	bl	801dcfe <memset>
		this->address = address;
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	887a      	ldrh	r2, [r7, #2]
 8015ed0:	809a      	strh	r2, [r3, #4]
	}
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	3708      	adds	r7, #8
 8015ed8:	46bd      	mov	sp, r7
 8015eda:	bd80      	pop	{r7, pc}
 8015edc:	08020710 	.word	0x08020710

08015ee0 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tEC1Ev>:
	core_utils_RegisterFunction() {
 8015ee0:	b580      	push	{r7, lr}
 8015ee2:	b082      	sub	sp, #8
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	6078      	str	r0, [r7, #4]
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	4618      	mov	r0, r3
 8015eec:	f7fe ffe4 	bl	8014eb8 <_ZN13RegisterEntryC1Ev>
 8015ef0:	4a07      	ldr	r2, [pc, #28]	; (8015f10 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tEC1Ev+0x30>)
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	601a      	str	r2, [r3, #0]
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	2202      	movs	r2, #2
 8015efa:	741a      	strb	r2, [r3, #16]
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	3314      	adds	r3, #20
 8015f00:	4618      	mov	r0, r3
 8015f02:	f000 fb29 	bl	8016558 <_ZN19core_utils_CallbackIv21twipr_control_input_tEC1Ev>
	}
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	4618      	mov	r0, r3
 8015f0a:	3708      	adds	r7, #8
 8015f0c:	46bd      	mov	sp, r7
 8015f0e:	bd80      	pop	{r7, pc}
 8015f10:	08020890 	.word	0x08020890

08015f14 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tEC1Ev>:
	core_utils_RegisterEntry() {
 8015f14:	b590      	push	{r4, r7, lr}
 8015f16:	b08b      	sub	sp, #44	; 0x2c
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	6078      	str	r0, [r7, #4]
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	4618      	mov	r0, r3
 8015f20:	f7fe ffca 	bl	8014eb8 <_ZN13RegisterEntryC1Ev>
 8015f24:	4a0c      	ldr	r2, [pc, #48]	; (8015f58 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tEC1Ev+0x44>)
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	601a      	str	r2, [r3, #0]
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	2201      	movs	r2, #1
 8015f2e:	71da      	strb	r2, [r3, #7]
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	f103 0410 	add.w	r4, r3, #16
 8015f36:	f107 0308 	add.w	r3, r7, #8
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	f7fc fe22 	bl	8012b84 <_ZN19core_utils_CallbackIvvEC1Ev>
 8015f40:	f107 0308 	add.w	r3, r7, #8
 8015f44:	4619      	mov	r1, r3
 8015f46:	4620      	mov	r0, r4
 8015f48:	f7fe ffde 	bl	8014f08 <_ZN8CallbackC1EOS_>
	}
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	4618      	mov	r0, r3
 8015f50:	372c      	adds	r7, #44	; 0x2c
 8015f52:	46bd      	mov	sp, r7
 8015f54:	bd90      	pop	{r4, r7, pc}
 8015f56:	bf00      	nop
 8015f58:	08020860 	.word	0x08020860

08015f5c <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tEC1Ev>:
	core_utils_RegisterEntry() {
 8015f5c:	b590      	push	{r4, r7, lr}
 8015f5e:	b08b      	sub	sp, #44	; 0x2c
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	6078      	str	r0, [r7, #4]
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	4618      	mov	r0, r3
 8015f68:	f7fe ffa6 	bl	8014eb8 <_ZN13RegisterEntryC1Ev>
 8015f6c:	4a0c      	ldr	r2, [pc, #48]	; (8015fa0 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tEC1Ev+0x44>)
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	601a      	str	r2, [r3, #0]
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	2201      	movs	r2, #1
 8015f76:	71da      	strb	r2, [r3, #7]
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	f103 0410 	add.w	r4, r3, #16
 8015f7e:	f107 0308 	add.w	r3, r7, #8
 8015f82:	4618      	mov	r0, r3
 8015f84:	f7fc fdfe 	bl	8012b84 <_ZN19core_utils_CallbackIvvEC1Ev>
 8015f88:	f107 0308 	add.w	r3, r7, #8
 8015f8c:	4619      	mov	r1, r3
 8015f8e:	4620      	mov	r0, r4
 8015f90:	f7fe ffba 	bl	8014f08 <_ZN8CallbackC1EOS_>
	}
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	4618      	mov	r0, r3
 8015f98:	372c      	adds	r7, #44	; 0x2c
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	bd90      	pop	{r4, r7, pc}
 8015f9e:	bf00      	nop
 8015fa0:	08020830 	.word	0x08020830

08015fa4 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tEC1Ev>:
	core_utils_RegisterFunction() {
 8015fa4:	b580      	push	{r7, lr}
 8015fa6:	b082      	sub	sp, #8
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	6078      	str	r0, [r7, #4]
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	4618      	mov	r0, r3
 8015fb0:	f7fe ff82 	bl	8014eb8 <_ZN13RegisterEntryC1Ev>
 8015fb4:	4a07      	ldr	r2, [pc, #28]	; (8015fd4 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tEC1Ev+0x30>)
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	601a      	str	r2, [r3, #0]
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	2202      	movs	r2, #2
 8015fbe:	71da      	strb	r2, [r3, #7]
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	330c      	adds	r3, #12
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	f000 fae5 	bl	8016594 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1Ev>
	}
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	4618      	mov	r0, r3
 8015fce:	3708      	adds	r7, #8
 8015fd0:	46bd      	mov	sp, r7
 8015fd2:	bd80      	pop	{r7, pc}
 8015fd4:	080207f0 	.word	0x080207f0

08015fd8 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tEC1Ev>:
	core_utils_RegisterFunction() {
 8015fd8:	b580      	push	{r7, lr}
 8015fda:	b082      	sub	sp, #8
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	6078      	str	r0, [r7, #4]
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	f7fe ff68 	bl	8014eb8 <_ZN13RegisterEntryC1Ev>
 8015fe8:	4a07      	ldr	r2, [pc, #28]	; (8016008 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tEC1Ev+0x30>)
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	601a      	str	r2, [r3, #0]
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	2202      	movs	r2, #2
 8015ff2:	731a      	strb	r2, [r3, #12]
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	3310      	adds	r3, #16
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	f000 fae9 	bl	80165d0 <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tEC1Ev>
	}
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	4618      	mov	r0, r3
 8016002:	3708      	adds	r7, #8
 8016004:	46bd      	mov	sp, r7
 8016006:	bd80      	pop	{r7, pc}
 8016008:	080207b0 	.word	0x080207b0

0801600c <_ZN27core_utils_RegisterFunctionIhA8_fEC1Ev>:
	core_utils_RegisterFunction() {
 801600c:	b580      	push	{r7, lr}
 801600e:	b082      	sub	sp, #8
 8016010:	af00      	add	r7, sp, #0
 8016012:	6078      	str	r0, [r7, #4]
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	4618      	mov	r0, r3
 8016018:	f7fe ff4e 	bl	8014eb8 <_ZN13RegisterEntryC1Ev>
 801601c:	4a08      	ldr	r2, [pc, #32]	; (8016040 <_ZN27core_utils_RegisterFunctionIhA8_fEC1Ev+0x34>)
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	601a      	str	r2, [r3, #0]
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	2202      	movs	r2, #2
 8016026:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	332c      	adds	r3, #44	; 0x2c
 801602e:	4618      	mov	r0, r3
 8016030:	f000 faec 	bl	801660c <_ZN19core_utils_CallbackIhA8_fEC1Ev>
	}
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	4618      	mov	r0, r3
 8016038:	3708      	adds	r7, #8
 801603a:	46bd      	mov	sp, r7
 801603c:	bd80      	pop	{r7, pc}
 801603e:	bf00      	nop
 8016040:	08020770 	.word	0x08020770

08016044 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tEC1Ev>:
	core_utils_RegisterEntry() {
 8016044:	b590      	push	{r4, r7, lr}
 8016046:	b08b      	sub	sp, #44	; 0x2c
 8016048:	af00      	add	r7, sp, #0
 801604a:	6078      	str	r0, [r7, #4]
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	4618      	mov	r0, r3
 8016050:	f7fe ff32 	bl	8014eb8 <_ZN13RegisterEntryC1Ev>
 8016054:	4a0c      	ldr	r2, [pc, #48]	; (8016088 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tEC1Ev+0x44>)
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	601a      	str	r2, [r3, #0]
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	2201      	movs	r2, #1
 801605e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	f103 0444 	add.w	r4, r3, #68	; 0x44
 8016068:	f107 0308 	add.w	r3, r7, #8
 801606c:	4618      	mov	r0, r3
 801606e:	f7fc fd89 	bl	8012b84 <_ZN19core_utils_CallbackIvvEC1Ev>
 8016072:	f107 0308 	add.w	r3, r7, #8
 8016076:	4619      	mov	r1, r3
 8016078:	4620      	mov	r0, r4
 801607a:	f7fe ff45 	bl	8014f08 <_ZN8CallbackC1EOS_>
	}
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	4618      	mov	r0, r3
 8016082:	372c      	adds	r7, #44	; 0x2c
 8016084:	46bd      	mov	sp, r7
 8016086:	bd90      	pop	{r4, r7, pc}
 8016088:	08020740 	.word	0x08020740

0801608c <_ZN19core_utils_CallbackIvmEC1Ev>:
	core_utils_Callback() {
 801608c:	b580      	push	{r7, lr}
 801608e:	b082      	sub	sp, #8
 8016090:	af00      	add	r7, sp, #0
 8016092:	6078      	str	r0, [r7, #4]
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	4618      	mov	r0, r3
 8016098:	f7fc f822 	bl	80120e0 <_ZN8CallbackC1Ev>
 801609c:	4a09      	ldr	r2, [pc, #36]	; (80160c4 <_ZN19core_utils_CallbackIvmEC1Ev+0x38>)
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	601a      	str	r2, [r3, #0]
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	2200      	movs	r2, #0
 80160a6:	711a      	strb	r2, [r3, #4]
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	3308      	adds	r3, #8
 80160ac:	2100      	movs	r1, #0
 80160ae:	4618      	mov	r0, r3
 80160b0:	f000 faca 	bl	8016648 <_ZN26core_utils_FunctionPointerIvmEC1EPFvmE>
		this->registered = 0;
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	2200      	movs	r2, #0
 80160b8:	711a      	strb	r2, [r3, #4]
	}
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	4618      	mov	r0, r3
 80160be:	3708      	adds	r7, #8
 80160c0:	46bd      	mov	sp, r7
 80160c2:	bd80      	pop	{r7, pc}
 80160c4:	080208d0 	.word	0x080208d0

080160c8 <_ZN19core_utils_CallbackIv21twipr_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>:
	core_utils_Callback(T *object, R (T::*member)(A)) {
 80160c8:	b5b0      	push	{r4, r5, r7, lr}
 80160ca:	b08a      	sub	sp, #40	; 0x28
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	60f8      	str	r0, [r7, #12]
 80160d0:	60b9      	str	r1, [r7, #8]
 80160d2:	4639      	mov	r1, r7
 80160d4:	e881 000c 	stmia.w	r1, {r2, r3}
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	4618      	mov	r0, r3
 80160dc:	f7fc f800 	bl	80120e0 <_ZN8CallbackC1Ev>
 80160e0:	4a12      	ldr	r2, [pc, #72]	; (801612c <_ZN19core_utils_CallbackIv21twipr_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E+0x64>)
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	601a      	str	r2, [r3, #0]
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	2200      	movs	r2, #0
 80160ea:	711a      	strb	r2, [r3, #4]
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	3308      	adds	r3, #8
 80160f0:	2100      	movs	r1, #0
 80160f2:	4618      	mov	r0, r3
 80160f4:	f000 fab6 	bl	8016664 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tEC1EPFvS0_E>
		_fp = core_utils_FunctionPointer<R,A>(object, member);
 80160f8:	f107 0010 	add.w	r0, r7, #16
 80160fc:	463b      	mov	r3, r7
 80160fe:	cb0c      	ldmia	r3, {r2, r3}
 8016100:	68b9      	ldr	r1, [r7, #8]
 8016102:	f000 fabd 	bl	8016680 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	f103 0408 	add.w	r4, r3, #8
 801610c:	f107 0510 	add.w	r5, r7, #16
 8016110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016114:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016118:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	2201      	movs	r2, #1
 8016120:	711a      	strb	r2, [r3, #4]
	}
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	4618      	mov	r0, r3
 8016126:	3728      	adds	r7, #40	; 0x28
 8016128:	46bd      	mov	sp, r7
 801612a:	bdb0      	pop	{r4, r5, r7, pc}
 801612c:	080208c0 	.word	0x080208c0

08016130 <_ZN19core_utils_CallbackIv21twipr_control_input_tEaSERKS1_>:
class core_utils_Callback: public Callback {
 8016130:	b5b0      	push	{r4, r5, r7, lr}
 8016132:	b082      	sub	sp, #8
 8016134:	af00      	add	r7, sp, #0
 8016136:	6078      	str	r0, [r7, #4]
 8016138:	6039      	str	r1, [r7, #0]
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	683a      	ldr	r2, [r7, #0]
 801613e:	4611      	mov	r1, r2
 8016140:	4618      	mov	r0, r3
 8016142:	f7fb fff2 	bl	801212a <_ZN8CallbackaSERKS_>
 8016146:	683b      	ldr	r3, [r7, #0]
 8016148:	791a      	ldrb	r2, [r3, #4]
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	711a      	strb	r2, [r3, #4]
 801614e:	687a      	ldr	r2, [r7, #4]
 8016150:	683b      	ldr	r3, [r7, #0]
 8016152:	f102 0408 	add.w	r4, r2, #8
 8016156:	f103 0508 	add.w	r5, r3, #8
 801615a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801615c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801615e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016162:	e884 0003 	stmia.w	r4, {r0, r1}
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	4618      	mov	r0, r3
 801616a:	3708      	adds	r7, #8
 801616c:	46bd      	mov	sp, r7
 801616e:	bdb0      	pop	{r4, r5, r7, pc}

08016170 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE3setEtP11RegisterMap19core_utils_CallbackIvS0_E>:
	void set(uint16_t address, RegisterMap *map,
 8016170:	b580      	push	{r7, lr}
 8016172:	b084      	sub	sp, #16
 8016174:	af00      	add	r7, sp, #0
 8016176:	60f8      	str	r0, [r7, #12]
 8016178:	607a      	str	r2, [r7, #4]
 801617a:	603b      	str	r3, [r7, #0]
 801617c:	460b      	mov	r3, r1
 801617e:	817b      	strh	r3, [r7, #10]
		this->address = address;
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	897a      	ldrh	r2, [r7, #10]
 8016184:	825a      	strh	r2, [r3, #18]
		this->function = function;
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	3314      	adds	r3, #20
 801618a:	6839      	ldr	r1, [r7, #0]
 801618c:	4618      	mov	r0, r3
 801618e:	f7ff ffcf 	bl	8016130 <_ZN19core_utils_CallbackIv21twipr_control_input_tEaSERKS1_>
		map->addEntry(this->address, this);
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	3308      	adds	r3, #8
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	68fa      	ldr	r2, [r7, #12]
 801619c:	8a51      	ldrh	r1, [r2, #18]
 801619e:	68fa      	ldr	r2, [r7, #12]
 80161a0:	6878      	ldr	r0, [r7, #4]
 80161a2:	4798      	blx	r3
	}
 80161a4:	bf00      	nop
 80161a6:	3710      	adds	r7, #16
 80161a8:	46bd      	mov	sp, r7
 80161aa:	bd80      	pop	{r7, pc}

080161ac <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE3setEtP11RegisterMapPS0_19register_entry_rw_t>:
	void set(uint16_t address, RegisterMap *map, T *data,
 80161ac:	b580      	push	{r7, lr}
 80161ae:	b084      	sub	sp, #16
 80161b0:	af00      	add	r7, sp, #0
 80161b2:	60f8      	str	r0, [r7, #12]
 80161b4:	607a      	str	r2, [r7, #4]
 80161b6:	603b      	str	r3, [r7, #0]
 80161b8:	460b      	mov	r3, r1
 80161ba:	817b      	strh	r3, [r7, #10]
		this->address = address;
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	897a      	ldrh	r2, [r7, #10]
 80161c0:	811a      	strh	r2, [r3, #8]
		this->data = data;
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	683a      	ldr	r2, [r7, #0]
 80161c6:	60da      	str	r2, [r3, #12]
		map->addEntry(address, this);
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	3308      	adds	r3, #8
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	68fa      	ldr	r2, [r7, #12]
 80161d2:	8979      	ldrh	r1, [r7, #10]
 80161d4:	6878      	ldr	r0, [r7, #4]
 80161d6:	4798      	blx	r3
		this->rw = rw;
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	7e3a      	ldrb	r2, [r7, #24]
 80161dc:	729a      	strb	r2, [r3, #10]
	}
 80161de:	bf00      	nop
 80161e0:	3710      	adds	r7, #16
 80161e2:	46bd      	mov	sp, r7
 80161e4:	bd80      	pop	{r7, pc}
	...

080161e8 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>:
	core_utils_Callback(T *object, R (T::*member)(A)) {
 80161e8:	b5b0      	push	{r4, r5, r7, lr}
 80161ea:	b08a      	sub	sp, #40	; 0x28
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	60f8      	str	r0, [r7, #12]
 80161f0:	60b9      	str	r1, [r7, #8]
 80161f2:	4639      	mov	r1, r7
 80161f4:	e881 000c 	stmia.w	r1, {r2, r3}
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	4618      	mov	r0, r3
 80161fc:	f7fb ff70 	bl	80120e0 <_ZN8CallbackC1Ev>
 8016200:	4a12      	ldr	r2, [pc, #72]	; (801624c <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E+0x64>)
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	601a      	str	r2, [r3, #0]
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	2200      	movs	r2, #0
 801620a:	711a      	strb	r2, [r3, #4]
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	3308      	adds	r3, #8
 8016210:	2100      	movs	r1, #0
 8016212:	4618      	mov	r0, r3
 8016214:	f000 fa47 	bl	80166a6 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEC1EPFhS0_E>
		_fp = core_utils_FunctionPointer<R,A>(object, member);
 8016218:	f107 0010 	add.w	r0, r7, #16
 801621c:	463b      	mov	r3, r7
 801621e:	cb0c      	ldmia	r3, {r2, r3}
 8016220:	68b9      	ldr	r1, [r7, #8]
 8016222:	f000 fa4e 	bl	80166c2 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	f103 0408 	add.w	r4, r3, #8
 801622c:	f107 0510 	add.w	r5, r7, #16
 8016230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016234:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016238:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	2201      	movs	r2, #1
 8016240:	711a      	strb	r2, [r3, #4]
	}
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	4618      	mov	r0, r3
 8016246:	3728      	adds	r7, #40	; 0x28
 8016248:	46bd      	mov	sp, r7
 801624a:	bdb0      	pop	{r4, r5, r7, pc}
 801624c:	08020820 	.word	0x08020820

08016250 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEaSERKS1_>:
class core_utils_Callback: public Callback {
 8016250:	b5b0      	push	{r4, r5, r7, lr}
 8016252:	b082      	sub	sp, #8
 8016254:	af00      	add	r7, sp, #0
 8016256:	6078      	str	r0, [r7, #4]
 8016258:	6039      	str	r1, [r7, #0]
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	683a      	ldr	r2, [r7, #0]
 801625e:	4611      	mov	r1, r2
 8016260:	4618      	mov	r0, r3
 8016262:	f7fb ff62 	bl	801212a <_ZN8CallbackaSERKS_>
 8016266:	683b      	ldr	r3, [r7, #0]
 8016268:	791a      	ldrb	r2, [r3, #4]
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	711a      	strb	r2, [r3, #4]
 801626e:	687a      	ldr	r2, [r7, #4]
 8016270:	683b      	ldr	r3, [r7, #0]
 8016272:	f102 0408 	add.w	r4, r2, #8
 8016276:	f103 0508 	add.w	r5, r3, #8
 801627a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801627c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801627e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016282:	e884 0003 	stmia.w	r4, {r0, r1}
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	4618      	mov	r0, r3
 801628a:	3708      	adds	r7, #8
 801628c:	46bd      	mov	sp, r7
 801628e:	bdb0      	pop	{r4, r5, r7, pc}

08016290 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE3setEtP11RegisterMap19core_utils_CallbackIhS0_E>:
	void set(uint16_t address, RegisterMap *map,
 8016290:	b580      	push	{r7, lr}
 8016292:	b084      	sub	sp, #16
 8016294:	af00      	add	r7, sp, #0
 8016296:	60f8      	str	r0, [r7, #12]
 8016298:	607a      	str	r2, [r7, #4]
 801629a:	603b      	str	r3, [r7, #0]
 801629c:	460b      	mov	r3, r1
 801629e:	817b      	strh	r3, [r7, #10]
		this->address = address;
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	897a      	ldrh	r2, [r7, #10]
 80162a4:	811a      	strh	r2, [r3, #8]
		this->function = function;
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	330c      	adds	r3, #12
 80162aa:	6839      	ldr	r1, [r7, #0]
 80162ac:	4618      	mov	r0, r3
 80162ae:	f7ff ffcf 	bl	8016250 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEaSERKS1_>
		map->addEntry(this->address, this);
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	3308      	adds	r3, #8
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	68fa      	ldr	r2, [r7, #12]
 80162bc:	8911      	ldrh	r1, [r2, #8]
 80162be:	68fa      	ldr	r2, [r7, #12]
 80162c0:	6878      	ldr	r0, [r7, #4]
 80162c2:	4798      	blx	r3
	}
 80162c4:	bf00      	nop
 80162c6:	3710      	adds	r7, #16
 80162c8:	46bd      	mov	sp, r7
 80162ca:	bd80      	pop	{r7, pc}

080162cc <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>:
	core_utils_Callback(T *object, R (T::*member)(A)) {
 80162cc:	b5b0      	push	{r4, r5, r7, lr}
 80162ce:	b08a      	sub	sp, #40	; 0x28
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	60f8      	str	r0, [r7, #12]
 80162d4:	60b9      	str	r1, [r7, #8]
 80162d6:	4639      	mov	r1, r7
 80162d8:	e881 000c 	stmia.w	r1, {r2, r3}
 80162dc:	68fb      	ldr	r3, [r7, #12]
 80162de:	4618      	mov	r0, r3
 80162e0:	f7fb fefe 	bl	80120e0 <_ZN8CallbackC1Ev>
 80162e4:	4a12      	ldr	r2, [pc, #72]	; (8016330 <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E+0x64>)
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	601a      	str	r2, [r3, #0]
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	2200      	movs	r2, #0
 80162ee:	711a      	strb	r2, [r3, #4]
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	3308      	adds	r3, #8
 80162f4:	2100      	movs	r1, #0
 80162f6:	4618      	mov	r0, r3
 80162f8:	f000 f9f6 	bl	80166e8 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tEC1EPFhS0_E>
		_fp = core_utils_FunctionPointer<R,A>(object, member);
 80162fc:	f107 0010 	add.w	r0, r7, #16
 8016300:	463b      	mov	r3, r7
 8016302:	cb0c      	ldmia	r3, {r2, r3}
 8016304:	68b9      	ldr	r1, [r7, #8]
 8016306:	f000 f9fd 	bl	8016704 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	f103 0408 	add.w	r4, r3, #8
 8016310:	f107 0510 	add.w	r5, r7, #16
 8016314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016318:	e895 0003 	ldmia.w	r5, {r0, r1}
 801631c:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	2201      	movs	r2, #1
 8016324:	711a      	strb	r2, [r3, #4]
	}
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	4618      	mov	r0, r3
 801632a:	3728      	adds	r7, #40	; 0x28
 801632c:	46bd      	mov	sp, r7
 801632e:	bdb0      	pop	{r4, r5, r7, pc}
 8016330:	080207e0 	.word	0x080207e0

08016334 <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tEaSERKS1_>:
class core_utils_Callback: public Callback {
 8016334:	b5b0      	push	{r4, r5, r7, lr}
 8016336:	b082      	sub	sp, #8
 8016338:	af00      	add	r7, sp, #0
 801633a:	6078      	str	r0, [r7, #4]
 801633c:	6039      	str	r1, [r7, #0]
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	683a      	ldr	r2, [r7, #0]
 8016342:	4611      	mov	r1, r2
 8016344:	4618      	mov	r0, r3
 8016346:	f7fb fef0 	bl	801212a <_ZN8CallbackaSERKS_>
 801634a:	683b      	ldr	r3, [r7, #0]
 801634c:	791a      	ldrb	r2, [r3, #4]
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	711a      	strb	r2, [r3, #4]
 8016352:	687a      	ldr	r2, [r7, #4]
 8016354:	683b      	ldr	r3, [r7, #0]
 8016356:	f102 0408 	add.w	r4, r2, #8
 801635a:	f103 0508 	add.w	r5, r3, #8
 801635e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016360:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016362:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016366:	e884 0003 	stmia.w	r4, {r0, r1}
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	4618      	mov	r0, r3
 801636e:	3708      	adds	r7, #8
 8016370:	46bd      	mov	sp, r7
 8016372:	bdb0      	pop	{r4, r5, r7, pc}

08016374 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE3setEtP11RegisterMap19core_utils_CallbackIhS0_E>:
	void set(uint16_t address, RegisterMap *map,
 8016374:	b580      	push	{r7, lr}
 8016376:	b084      	sub	sp, #16
 8016378:	af00      	add	r7, sp, #0
 801637a:	60f8      	str	r0, [r7, #12]
 801637c:	607a      	str	r2, [r7, #4]
 801637e:	603b      	str	r3, [r7, #0]
 8016380:	460b      	mov	r3, r1
 8016382:	817b      	strh	r3, [r7, #10]
		this->address = address;
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	897a      	ldrh	r2, [r7, #10]
 8016388:	81da      	strh	r2, [r3, #14]
		this->function = function;
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	3310      	adds	r3, #16
 801638e:	6839      	ldr	r1, [r7, #0]
 8016390:	4618      	mov	r0, r3
 8016392:	f7ff ffcf 	bl	8016334 <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tEaSERKS1_>
		map->addEntry(this->address, this);
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	3308      	adds	r3, #8
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	68fa      	ldr	r2, [r7, #12]
 80163a0:	89d1      	ldrh	r1, [r2, #14]
 80163a2:	68fa      	ldr	r2, [r7, #12]
 80163a4:	6878      	ldr	r0, [r7, #4]
 80163a6:	4798      	blx	r3
	}
 80163a8:	bf00      	nop
 80163aa:	3710      	adds	r7, #16
 80163ac:	46bd      	mov	sp, r7
 80163ae:	bd80      	pop	{r7, pc}

080163b0 <_ZN19core_utils_CallbackIvvEC1I20TWIPR_ControlManagerEEPT_MS3_FvvE>:
	core_utils_Callback(T *object, R (T::*member)(void)) {
 80163b0:	b5b0      	push	{r4, r5, r7, lr}
 80163b2:	b08a      	sub	sp, #40	; 0x28
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	60f8      	str	r0, [r7, #12]
 80163b8:	60b9      	str	r1, [r7, #8]
 80163ba:	4639      	mov	r1, r7
 80163bc:	e881 000c 	stmia.w	r1, {r2, r3}
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	4618      	mov	r0, r3
 80163c4:	f7fb fe8c 	bl	80120e0 <_ZN8CallbackC1Ev>
 80163c8:	4a12      	ldr	r2, [pc, #72]	; (8016414 <_ZN19core_utils_CallbackIvvEC1I20TWIPR_ControlManagerEEPT_MS3_FvvE+0x64>)
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	601a      	str	r2, [r3, #0]
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	2200      	movs	r2, #0
 80163d2:	711a      	strb	r2, [r3, #4]
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	3308      	adds	r3, #8
 80163d8:	2100      	movs	r1, #0
 80163da:	4618      	mov	r0, r3
 80163dc:	f7fc f88b 	bl	80124f6 <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		_fp = core_utils_FunctionPointer<R,void>(object, member);
 80163e0:	f107 0010 	add.w	r0, r7, #16
 80163e4:	463b      	mov	r3, r7
 80163e6:	cb0c      	ldmia	r3, {r2, r3}
 80163e8:	68b9      	ldr	r1, [r7, #8]
 80163ea:	f000 f99e 	bl	801672a <_ZN26core_utils_FunctionPointerIvvEC1I20TWIPR_ControlManagerEEPT_MS3_FvvE>
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	f103 0408 	add.w	r4, r3, #8
 80163f4:	f107 0510 	add.w	r5, r7, #16
 80163f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80163fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80163fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016400:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	2201      	movs	r2, #1
 8016408:	711a      	strb	r2, [r3, #4]
	}
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	4618      	mov	r0, r3
 801640e:	3728      	adds	r7, #40	; 0x28
 8016410:	46bd      	mov	sp, r7
 8016412:	bdb0      	pop	{r4, r5, r7, pc}
 8016414:	08020640 	.word	0x08020640

08016418 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE3setEtP11RegisterMapPS0_19register_entry_rw_t>:
	void set(uint16_t address, RegisterMap *map, T *data,
 8016418:	b580      	push	{r7, lr}
 801641a:	b084      	sub	sp, #16
 801641c:	af00      	add	r7, sp, #0
 801641e:	60f8      	str	r0, [r7, #12]
 8016420:	607a      	str	r2, [r7, #4]
 8016422:	603b      	str	r3, [r7, #0]
 8016424:	460b      	mov	r3, r1
 8016426:	817b      	strh	r3, [r7, #10]
		this->address = address;
 8016428:	68fb      	ldr	r3, [r7, #12]
 801642a:	897a      	ldrh	r2, [r7, #10]
 801642c:	875a      	strh	r2, [r3, #58]	; 0x3a
		this->data = data;
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	683a      	ldr	r2, [r7, #0]
 8016432:	641a      	str	r2, [r3, #64]	; 0x40
		map->addEntry(address, this);
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	3308      	adds	r3, #8
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	68fa      	ldr	r2, [r7, #12]
 801643e:	8979      	ldrh	r1, [r7, #10]
 8016440:	6878      	ldr	r0, [r7, #4]
 8016442:	4798      	blx	r3
		this->rw = rw;
 8016444:	68fb      	ldr	r3, [r7, #12]
 8016446:	7e3a      	ldrb	r2, [r7, #24]
 8016448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	}
 801644c:	bf00      	nop
 801644e:	3710      	adds	r7, #16
 8016450:	46bd      	mov	sp, r7
 8016452:	bd80      	pop	{r7, pc}

08016454 <_ZN19core_utils_CallbackIhA8_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>:
	core_utils_Callback(T *object, R (T::*member)(A)) {
 8016454:	b5b0      	push	{r4, r5, r7, lr}
 8016456:	b08a      	sub	sp, #40	; 0x28
 8016458:	af00      	add	r7, sp, #0
 801645a:	60f8      	str	r0, [r7, #12]
 801645c:	60b9      	str	r1, [r7, #8]
 801645e:	4639      	mov	r1, r7
 8016460:	e881 000c 	stmia.w	r1, {r2, r3}
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	4618      	mov	r0, r3
 8016468:	f7fb fe3a 	bl	80120e0 <_ZN8CallbackC1Ev>
 801646c:	4a12      	ldr	r2, [pc, #72]	; (80164b8 <_ZN19core_utils_CallbackIhA8_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE+0x64>)
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	601a      	str	r2, [r3, #0]
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	2200      	movs	r2, #0
 8016476:	711a      	strb	r2, [r3, #4]
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	3308      	adds	r3, #8
 801647c:	2100      	movs	r1, #0
 801647e:	4618      	mov	r0, r3
 8016480:	f000 f966 	bl	8016750 <_ZN26core_utils_FunctionPointerIhA8_fEC1EPFhPfE>
		_fp = core_utils_FunctionPointer<R,A>(object, member);
 8016484:	f107 0010 	add.w	r0, r7, #16
 8016488:	463b      	mov	r3, r7
 801648a:	cb0c      	ldmia	r3, {r2, r3}
 801648c:	68b9      	ldr	r1, [r7, #8]
 801648e:	f000 f96d 	bl	801676c <_ZN26core_utils_FunctionPointerIhA8_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	f103 0408 	add.w	r4, r3, #8
 8016498:	f107 0510 	add.w	r5, r7, #16
 801649c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801649e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80164a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80164a4:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	2201      	movs	r2, #1
 80164ac:	711a      	strb	r2, [r3, #4]
	}
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	4618      	mov	r0, r3
 80164b2:	3728      	adds	r7, #40	; 0x28
 80164b4:	46bd      	mov	sp, r7
 80164b6:	bdb0      	pop	{r4, r5, r7, pc}
 80164b8:	080207a0 	.word	0x080207a0

080164bc <_ZN19core_utils_CallbackIhA8_fEaSERKS1_>:
class core_utils_Callback: public Callback {
 80164bc:	b5b0      	push	{r4, r5, r7, lr}
 80164be:	b082      	sub	sp, #8
 80164c0:	af00      	add	r7, sp, #0
 80164c2:	6078      	str	r0, [r7, #4]
 80164c4:	6039      	str	r1, [r7, #0]
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	683a      	ldr	r2, [r7, #0]
 80164ca:	4611      	mov	r1, r2
 80164cc:	4618      	mov	r0, r3
 80164ce:	f7fb fe2c 	bl	801212a <_ZN8CallbackaSERKS_>
 80164d2:	683b      	ldr	r3, [r7, #0]
 80164d4:	791a      	ldrb	r2, [r3, #4]
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	711a      	strb	r2, [r3, #4]
 80164da:	687a      	ldr	r2, [r7, #4]
 80164dc:	683b      	ldr	r3, [r7, #0]
 80164de:	f102 0408 	add.w	r4, r2, #8
 80164e2:	f103 0508 	add.w	r5, r3, #8
 80164e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80164e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80164ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80164ee:	e884 0003 	stmia.w	r4, {r0, r1}
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	4618      	mov	r0, r3
 80164f6:	3708      	adds	r7, #8
 80164f8:	46bd      	mov	sp, r7
 80164fa:	bdb0      	pop	{r4, r5, r7, pc}

080164fc <_ZN27core_utils_RegisterFunctionIhA8_fE3setEtP11RegisterMap19core_utils_CallbackIhS0_E>:
	void set(uint16_t address, RegisterMap *map,
 80164fc:	b580      	push	{r7, lr}
 80164fe:	b084      	sub	sp, #16
 8016500:	af00      	add	r7, sp, #0
 8016502:	60f8      	str	r0, [r7, #12]
 8016504:	607a      	str	r2, [r7, #4]
 8016506:	603b      	str	r3, [r7, #0]
 8016508:	460b      	mov	r3, r1
 801650a:	817b      	strh	r3, [r7, #10]
		this->address = address;
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	897a      	ldrh	r2, [r7, #10]
 8016510:	855a      	strh	r2, [r3, #42]	; 0x2a
		this->function = function;
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	332c      	adds	r3, #44	; 0x2c
 8016516:	6839      	ldr	r1, [r7, #0]
 8016518:	4618      	mov	r0, r3
 801651a:	f7ff ffcf 	bl	80164bc <_ZN19core_utils_CallbackIhA8_fEaSERKS1_>
		map->addEntry(this->address, this);
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	3308      	adds	r3, #8
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	68fa      	ldr	r2, [r7, #12]
 8016528:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 801652a:	68fa      	ldr	r2, [r7, #12]
 801652c:	6878      	ldr	r0, [r7, #4]
 801652e:	4798      	blx	r3
	}
 8016530:	bf00      	nop
 8016532:	3710      	adds	r7, #16
 8016534:	46bd      	mov	sp, r7
 8016536:	bd80      	pop	{r7, pc}

08016538 <_ZN19core_utils_CallbackIvmE4callEm>:
	R call(A argument){
 8016538:	b580      	push	{r7, lr}
 801653a:	b082      	sub	sp, #8
 801653c:	af00      	add	r7, sp, #0
 801653e:	6078      	str	r0, [r7, #4]
 8016540:	6039      	str	r1, [r7, #0]
		return this->_fp(argument);
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	3308      	adds	r3, #8
 8016546:	6839      	ldr	r1, [r7, #0]
 8016548:	4618      	mov	r0, r3
 801654a:	f000 f922 	bl	8016792 <_ZN26core_utils_FunctionPointerIvmEclEm>
 801654e:	bf00      	nop
	}
 8016550:	3708      	adds	r7, #8
 8016552:	46bd      	mov	sp, r7
 8016554:	bd80      	pop	{r7, pc}
	...

08016558 <_ZN19core_utils_CallbackIv21twipr_control_input_tEC1Ev>:
	core_utils_Callback() {
 8016558:	b580      	push	{r7, lr}
 801655a:	b082      	sub	sp, #8
 801655c:	af00      	add	r7, sp, #0
 801655e:	6078      	str	r0, [r7, #4]
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	4618      	mov	r0, r3
 8016564:	f7fb fdbc 	bl	80120e0 <_ZN8CallbackC1Ev>
 8016568:	4a09      	ldr	r2, [pc, #36]	; (8016590 <_ZN19core_utils_CallbackIv21twipr_control_input_tEC1Ev+0x38>)
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	601a      	str	r2, [r3, #0]
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	2200      	movs	r2, #0
 8016572:	711a      	strb	r2, [r3, #4]
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	3308      	adds	r3, #8
 8016578:	2100      	movs	r1, #0
 801657a:	4618      	mov	r0, r3
 801657c:	f000 f872 	bl	8016664 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tEC1EPFvS0_E>
		this->registered = 0;
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	2200      	movs	r2, #0
 8016584:	711a      	strb	r2, [r3, #4]
	}
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	4618      	mov	r0, r3
 801658a:	3708      	adds	r7, #8
 801658c:	46bd      	mov	sp, r7
 801658e:	bd80      	pop	{r7, pc}
 8016590:	080208c0 	.word	0x080208c0

08016594 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1Ev>:
	core_utils_Callback() {
 8016594:	b580      	push	{r7, lr}
 8016596:	b082      	sub	sp, #8
 8016598:	af00      	add	r7, sp, #0
 801659a:	6078      	str	r0, [r7, #4]
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	4618      	mov	r0, r3
 80165a0:	f7fb fd9e 	bl	80120e0 <_ZN8CallbackC1Ev>
 80165a4:	4a09      	ldr	r2, [pc, #36]	; (80165cc <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1Ev+0x38>)
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	601a      	str	r2, [r3, #0]
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	2200      	movs	r2, #0
 80165ae:	711a      	strb	r2, [r3, #4]
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	3308      	adds	r3, #8
 80165b4:	2100      	movs	r1, #0
 80165b6:	4618      	mov	r0, r3
 80165b8:	f000 f875 	bl	80166a6 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEC1EPFhS0_E>
		this->registered = 0;
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	2200      	movs	r2, #0
 80165c0:	711a      	strb	r2, [r3, #4]
	}
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	4618      	mov	r0, r3
 80165c6:	3708      	adds	r7, #8
 80165c8:	46bd      	mov	sp, r7
 80165ca:	bd80      	pop	{r7, pc}
 80165cc:	08020820 	.word	0x08020820

080165d0 <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tEC1Ev>:
	core_utils_Callback() {
 80165d0:	b580      	push	{r7, lr}
 80165d2:	b082      	sub	sp, #8
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	6078      	str	r0, [r7, #4]
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	4618      	mov	r0, r3
 80165dc:	f7fb fd80 	bl	80120e0 <_ZN8CallbackC1Ev>
 80165e0:	4a09      	ldr	r2, [pc, #36]	; (8016608 <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tEC1Ev+0x38>)
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	601a      	str	r2, [r3, #0]
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	2200      	movs	r2, #0
 80165ea:	711a      	strb	r2, [r3, #4]
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	3308      	adds	r3, #8
 80165f0:	2100      	movs	r1, #0
 80165f2:	4618      	mov	r0, r3
 80165f4:	f000 f878 	bl	80166e8 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tEC1EPFhS0_E>
		this->registered = 0;
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	2200      	movs	r2, #0
 80165fc:	711a      	strb	r2, [r3, #4]
	}
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	4618      	mov	r0, r3
 8016602:	3708      	adds	r7, #8
 8016604:	46bd      	mov	sp, r7
 8016606:	bd80      	pop	{r7, pc}
 8016608:	080207e0 	.word	0x080207e0

0801660c <_ZN19core_utils_CallbackIhA8_fEC1Ev>:
	core_utils_Callback() {
 801660c:	b580      	push	{r7, lr}
 801660e:	b082      	sub	sp, #8
 8016610:	af00      	add	r7, sp, #0
 8016612:	6078      	str	r0, [r7, #4]
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	4618      	mov	r0, r3
 8016618:	f7fb fd62 	bl	80120e0 <_ZN8CallbackC1Ev>
 801661c:	4a09      	ldr	r2, [pc, #36]	; (8016644 <_ZN19core_utils_CallbackIhA8_fEC1Ev+0x38>)
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	601a      	str	r2, [r3, #0]
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	2200      	movs	r2, #0
 8016626:	711a      	strb	r2, [r3, #4]
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	3308      	adds	r3, #8
 801662c:	2100      	movs	r1, #0
 801662e:	4618      	mov	r0, r3
 8016630:	f000 f88e 	bl	8016750 <_ZN26core_utils_FunctionPointerIhA8_fEC1EPFhPfE>
		this->registered = 0;
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	2200      	movs	r2, #0
 8016638:	711a      	strb	r2, [r3, #4]
	}
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	4618      	mov	r0, r3
 801663e:	3708      	adds	r7, #8
 8016640:	46bd      	mov	sp, r7
 8016642:	bd80      	pop	{r7, pc}
 8016644:	080207a0 	.word	0x080207a0

08016648 <_ZN26core_utils_FunctionPointerIvmEC1EPFvmE>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8016648:	b580      	push	{r7, lr}
 801664a:	b082      	sub	sp, #8
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
 8016650:	6039      	str	r1, [r7, #0]
        attach(function);
 8016652:	6839      	ldr	r1, [r7, #0]
 8016654:	6878      	ldr	r0, [r7, #4]
 8016656:	f000 f8a9 	bl	80167ac <_ZN26core_utils_FunctionPointerIvmE6attachEPFvmE>
    }
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	4618      	mov	r0, r3
 801665e:	3708      	adds	r7, #8
 8016660:	46bd      	mov	sp, r7
 8016662:	bd80      	pop	{r7, pc}

08016664 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tEC1EPFvS0_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8016664:	b580      	push	{r7, lr}
 8016666:	b082      	sub	sp, #8
 8016668:	af00      	add	r7, sp, #0
 801666a:	6078      	str	r0, [r7, #4]
 801666c:	6039      	str	r1, [r7, #0]
        attach(function);
 801666e:	6839      	ldr	r1, [r7, #0]
 8016670:	6878      	ldr	r0, [r7, #4]
 8016672:	f000 f8ac 	bl	80167ce <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE6attachEPFvS0_E>
    }
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	4618      	mov	r0, r3
 801667a:	3708      	adds	r7, #8
 801667c:	46bd      	mov	sp, r7
 801667e:	bd80      	pop	{r7, pc}

08016680 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8016680:	b580      	push	{r7, lr}
 8016682:	b084      	sub	sp, #16
 8016684:	af00      	add	r7, sp, #0
 8016686:	60f8      	str	r0, [r7, #12]
 8016688:	60b9      	str	r1, [r7, #8]
 801668a:	4639      	mov	r1, r7
 801668c:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8016690:	463b      	mov	r3, r7
 8016692:	cb0c      	ldmia	r3, {r2, r3}
 8016694:	68b9      	ldr	r1, [r7, #8]
 8016696:	68f8      	ldr	r0, [r7, #12]
 8016698:	f000 f8aa 	bl	80167f0 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FvS0_E>
    }
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	4618      	mov	r0, r3
 80166a0:	3710      	adds	r7, #16
 80166a2:	46bd      	mov	sp, r7
 80166a4:	bd80      	pop	{r7, pc}

080166a6 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEC1EPFhS0_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 80166a6:	b580      	push	{r7, lr}
 80166a8:	b082      	sub	sp, #8
 80166aa:	af00      	add	r7, sp, #0
 80166ac:	6078      	str	r0, [r7, #4]
 80166ae:	6039      	str	r1, [r7, #0]
        attach(function);
 80166b0:	6839      	ldr	r1, [r7, #0]
 80166b2:	6878      	ldr	r0, [r7, #4]
 80166b4:	f000 f8ba 	bl	801682c <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE6attachEPFhS0_E>
    }
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	4618      	mov	r0, r3
 80166bc:	3708      	adds	r7, #8
 80166be:	46bd      	mov	sp, r7
 80166c0:	bd80      	pop	{r7, pc}

080166c2 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 80166c2:	b580      	push	{r7, lr}
 80166c4:	b084      	sub	sp, #16
 80166c6:	af00      	add	r7, sp, #0
 80166c8:	60f8      	str	r0, [r7, #12]
 80166ca:	60b9      	str	r1, [r7, #8]
 80166cc:	4639      	mov	r1, r7
 80166ce:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 80166d2:	463b      	mov	r3, r7
 80166d4:	cb0c      	ldmia	r3, {r2, r3}
 80166d6:	68b9      	ldr	r1, [r7, #8]
 80166d8:	68f8      	ldr	r0, [r7, #12]
 80166da:	f000 f8b9 	bl	8016850 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhS0_E>
    }
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	4618      	mov	r0, r3
 80166e2:	3710      	adds	r7, #16
 80166e4:	46bd      	mov	sp, r7
 80166e6:	bd80      	pop	{r7, pc}

080166e8 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tEC1EPFhS0_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 80166e8:	b580      	push	{r7, lr}
 80166ea:	b082      	sub	sp, #8
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	6078      	str	r0, [r7, #4]
 80166f0:	6039      	str	r1, [r7, #0]
        attach(function);
 80166f2:	6839      	ldr	r1, [r7, #0]
 80166f4:	6878      	ldr	r0, [r7, #4]
 80166f6:	f000 f8c9 	bl	801688c <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE6attachEPFhS0_E>
    }
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	4618      	mov	r0, r3
 80166fe:	3708      	adds	r7, #8
 8016700:	46bd      	mov	sp, r7
 8016702:	bd80      	pop	{r7, pc}

08016704 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8016704:	b580      	push	{r7, lr}
 8016706:	b084      	sub	sp, #16
 8016708:	af00      	add	r7, sp, #0
 801670a:	60f8      	str	r0, [r7, #12]
 801670c:	60b9      	str	r1, [r7, #8]
 801670e:	4639      	mov	r1, r7
 8016710:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8016714:	463b      	mov	r3, r7
 8016716:	cb0c      	ldmia	r3, {r2, r3}
 8016718:	68b9      	ldr	r1, [r7, #8]
 801671a:	68f8      	ldr	r0, [r7, #12]
 801671c:	f000 f8c8 	bl	80168b0 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhS0_E>
    }
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	4618      	mov	r0, r3
 8016724:	3710      	adds	r7, #16
 8016726:	46bd      	mov	sp, r7
 8016728:	bd80      	pop	{r7, pc}

0801672a <_ZN26core_utils_FunctionPointerIvvEC1I20TWIPR_ControlManagerEEPT_MS3_FvvE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(void)) {
 801672a:	b580      	push	{r7, lr}
 801672c:	b084      	sub	sp, #16
 801672e:	af00      	add	r7, sp, #0
 8016730:	60f8      	str	r0, [r7, #12]
 8016732:	60b9      	str	r1, [r7, #8]
 8016734:	4639      	mov	r1, r7
 8016736:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 801673a:	463b      	mov	r3, r7
 801673c:	cb0c      	ldmia	r3, {r2, r3}
 801673e:	68b9      	ldr	r1, [r7, #8]
 8016740:	68f8      	ldr	r0, [r7, #12]
 8016742:	f000 f8d3 	bl	80168ec <_ZN26core_utils_FunctionPointerIvvE6attachI20TWIPR_ControlManagerEEvPT_MS3_FvvE>
    }
 8016746:	68fb      	ldr	r3, [r7, #12]
 8016748:	4618      	mov	r0, r3
 801674a:	3710      	adds	r7, #16
 801674c:	46bd      	mov	sp, r7
 801674e:	bd80      	pop	{r7, pc}

08016750 <_ZN26core_utils_FunctionPointerIhA8_fEC1EPFhPfE>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8016750:	b580      	push	{r7, lr}
 8016752:	b082      	sub	sp, #8
 8016754:	af00      	add	r7, sp, #0
 8016756:	6078      	str	r0, [r7, #4]
 8016758:	6039      	str	r1, [r7, #0]
        attach(function);
 801675a:	6839      	ldr	r1, [r7, #0]
 801675c:	6878      	ldr	r0, [r7, #4]
 801675e:	f000 f8e3 	bl	8016928 <_ZN26core_utils_FunctionPointerIhA8_fE6attachEPFhPfE>
    }
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	4618      	mov	r0, r3
 8016766:	3708      	adds	r7, #8
 8016768:	46bd      	mov	sp, r7
 801676a:	bd80      	pop	{r7, pc}

0801676c <_ZN26core_utils_FunctionPointerIhA8_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 801676c:	b580      	push	{r7, lr}
 801676e:	b084      	sub	sp, #16
 8016770:	af00      	add	r7, sp, #0
 8016772:	60f8      	str	r0, [r7, #12]
 8016774:	60b9      	str	r1, [r7, #8]
 8016776:	4639      	mov	r1, r7
 8016778:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 801677c:	463b      	mov	r3, r7
 801677e:	cb0c      	ldmia	r3, {r2, r3}
 8016780:	68b9      	ldr	r1, [r7, #8]
 8016782:	68f8      	ldr	r0, [r7, #12]
 8016784:	f000 f8e2 	bl	801694c <_ZN26core_utils_FunctionPointerIhA8_fE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhPfE>
    }
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	4618      	mov	r0, r3
 801678c:	3710      	adds	r7, #16
 801678e:	46bd      	mov	sp, r7
 8016790:	bd80      	pop	{r7, pc}

08016792 <_ZN26core_utils_FunctionPointerIvmEclEm>:
    R operator ()(A1 a) {
 8016792:	b580      	push	{r7, lr}
 8016794:	b082      	sub	sp, #8
 8016796:	af00      	add	r7, sp, #0
 8016798:	6078      	str	r0, [r7, #4]
 801679a:	6039      	str	r1, [r7, #0]
        return call(a);
 801679c:	6839      	ldr	r1, [r7, #0]
 801679e:	6878      	ldr	r0, [r7, #4]
 80167a0:	f000 f8f2 	bl	8016988 <_ZN26core_utils_FunctionPointerIvmE4callEm>
 80167a4:	bf00      	nop
    }
 80167a6:	3708      	adds	r7, #8
 80167a8:	46bd      	mov	sp, r7
 80167aa:	bd80      	pop	{r7, pc}

080167ac <_ZN26core_utils_FunctionPointerIvmE6attachEPFvmE>:
    void attach(R (*function)(A1)) {
 80167ac:	b480      	push	{r7}
 80167ae:	b083      	sub	sp, #12
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	6078      	str	r0, [r7, #4]
 80167b4:	6039      	str	r1, [r7, #0]
        _p.function = function;
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	683a      	ldr	r2, [r7, #0]
 80167ba:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	2200      	movs	r2, #0
 80167c0:	615a      	str	r2, [r3, #20]
    }
 80167c2:	bf00      	nop
 80167c4:	370c      	adds	r7, #12
 80167c6:	46bd      	mov	sp, r7
 80167c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167cc:	4770      	bx	lr

080167ce <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE6attachEPFvS0_E>:
    void attach(R (*function)(A1)) {
 80167ce:	b480      	push	{r7}
 80167d0:	b083      	sub	sp, #12
 80167d2:	af00      	add	r7, sp, #0
 80167d4:	6078      	str	r0, [r7, #4]
 80167d6:	6039      	str	r1, [r7, #0]
        _p.function = function;
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	683a      	ldr	r2, [r7, #0]
 80167dc:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	2200      	movs	r2, #0
 80167e2:	615a      	str	r2, [r3, #20]
    }
 80167e4:	bf00      	nop
 80167e6:	370c      	adds	r7, #12
 80167e8:	46bd      	mov	sp, r7
 80167ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ee:	4770      	bx	lr

080167f0 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FvS0_E>:
    void attach(T *object, R (T::*member)(A1)) {
 80167f0:	b480      	push	{r7}
 80167f2:	b085      	sub	sp, #20
 80167f4:	af00      	add	r7, sp, #0
 80167f6:	60f8      	str	r0, [r7, #12]
 80167f8:	60b9      	str	r1, [r7, #8]
 80167fa:	4639      	mov	r1, r7
 80167fc:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	68ba      	ldr	r2, [r7, #8]
 8016804:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	3304      	adds	r3, #4
 801680a:	461a      	mov	r2, r3
 801680c:	463b      	mov	r3, r7
 801680e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016812:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	4a03      	ldr	r2, [pc, #12]	; (8016828 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FvS0_E+0x38>)
 801681a:	615a      	str	r2, [r3, #20]
    }
 801681c:	bf00      	nop
 801681e:	3714      	adds	r7, #20
 8016820:	46bd      	mov	sp, r7
 8016822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016826:	4770      	bx	lr
 8016828:	080169d7 	.word	0x080169d7

0801682c <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE6attachEPFhS0_E>:
    void attach(R (*function)(A1)) {
 801682c:	b480      	push	{r7}
 801682e:	b083      	sub	sp, #12
 8016830:	af00      	add	r7, sp, #0
 8016832:	6078      	str	r0, [r7, #4]
 8016834:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	683a      	ldr	r2, [r7, #0]
 801683a:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	2200      	movs	r2, #0
 8016840:	615a      	str	r2, [r3, #20]
    }
 8016842:	bf00      	nop
 8016844:	370c      	adds	r7, #12
 8016846:	46bd      	mov	sp, r7
 8016848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801684c:	4770      	bx	lr
	...

08016850 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhS0_E>:
    void attach(T *object, R (T::*member)(A1)) {
 8016850:	b480      	push	{r7}
 8016852:	b085      	sub	sp, #20
 8016854:	af00      	add	r7, sp, #0
 8016856:	60f8      	str	r0, [r7, #12]
 8016858:	60b9      	str	r1, [r7, #8]
 801685a:	4639      	mov	r1, r7
 801685c:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	68ba      	ldr	r2, [r7, #8]
 8016864:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	3304      	adds	r3, #4
 801686a:	461a      	mov	r2, r3
 801686c:	463b      	mov	r3, r7
 801686e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016872:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	4a03      	ldr	r2, [pc, #12]	; (8016888 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhS0_E+0x38>)
 801687a:	615a      	str	r2, [r3, #20]
    }
 801687c:	bf00      	nop
 801687e:	3714      	adds	r7, #20
 8016880:	46bd      	mov	sp, r7
 8016882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016886:	4770      	bx	lr
 8016888:	08016a49 	.word	0x08016a49

0801688c <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE6attachEPFhS0_E>:
    void attach(R (*function)(A1)) {
 801688c:	b480      	push	{r7}
 801688e:	b083      	sub	sp, #12
 8016890:	af00      	add	r7, sp, #0
 8016892:	6078      	str	r0, [r7, #4]
 8016894:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	683a      	ldr	r2, [r7, #0]
 801689a:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	2200      	movs	r2, #0
 80168a0:	615a      	str	r2, [r3, #20]
    }
 80168a2:	bf00      	nop
 80168a4:	370c      	adds	r7, #12
 80168a6:	46bd      	mov	sp, r7
 80168a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ac:	4770      	bx	lr
	...

080168b0 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhS0_E>:
    void attach(T *object, R (T::*member)(A1)) {
 80168b0:	b480      	push	{r7}
 80168b2:	b085      	sub	sp, #20
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	60f8      	str	r0, [r7, #12]
 80168b8:	60b9      	str	r1, [r7, #8]
 80168ba:	4639      	mov	r1, r7
 80168bc:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	68ba      	ldr	r2, [r7, #8]
 80168c4:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	3304      	adds	r3, #4
 80168ca:	461a      	mov	r2, r3
 80168cc:	463b      	mov	r3, r7
 80168ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80168d2:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	4a03      	ldr	r2, [pc, #12]	; (80168e8 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhS0_E+0x38>)
 80168da:	615a      	str	r2, [r3, #20]
    }
 80168dc:	bf00      	nop
 80168de:	3714      	adds	r7, #20
 80168e0:	46bd      	mov	sp, r7
 80168e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168e6:	4770      	bx	lr
 80168e8:	08016aa3 	.word	0x08016aa3

080168ec <_ZN26core_utils_FunctionPointerIvvE6attachI20TWIPR_ControlManagerEEvPT_MS3_FvvE>:
    void attach(T *object, R (T::*member)(void)) {
 80168ec:	b480      	push	{r7}
 80168ee:	b085      	sub	sp, #20
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	60f8      	str	r0, [r7, #12]
 80168f4:	60b9      	str	r1, [r7, #8]
 80168f6:	4639      	mov	r1, r7
 80168f8:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	68ba      	ldr	r2, [r7, #8]
 8016900:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(void)>(_member) = member;
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	3304      	adds	r3, #4
 8016906:	461a      	mov	r2, r3
 8016908:	463b      	mov	r3, r7
 801690a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801690e:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	4a03      	ldr	r2, [pc, #12]	; (8016924 <_ZN26core_utils_FunctionPointerIvvE6attachI20TWIPR_ControlManagerEEvPT_MS3_FvvE+0x38>)
 8016916:	615a      	str	r2, [r3, #20]
    }
 8016918:	bf00      	nop
 801691a:	3714      	adds	r7, #20
 801691c:	46bd      	mov	sp, r7
 801691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016922:	4770      	bx	lr
 8016924:	08016aff 	.word	0x08016aff

08016928 <_ZN26core_utils_FunctionPointerIhA8_fE6attachEPFhPfE>:
    void attach(R (*function)(A1)) {
 8016928:	b480      	push	{r7}
 801692a:	b083      	sub	sp, #12
 801692c:	af00      	add	r7, sp, #0
 801692e:	6078      	str	r0, [r7, #4]
 8016930:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	683a      	ldr	r2, [r7, #0]
 8016936:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	2200      	movs	r2, #0
 801693c:	615a      	str	r2, [r3, #20]
    }
 801693e:	bf00      	nop
 8016940:	370c      	adds	r7, #12
 8016942:	46bd      	mov	sp, r7
 8016944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016948:	4770      	bx	lr
	...

0801694c <_ZN26core_utils_FunctionPointerIhA8_fE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhPfE>:
    void attach(T *object, R (T::*member)(A1)) {
 801694c:	b480      	push	{r7}
 801694e:	b085      	sub	sp, #20
 8016950:	af00      	add	r7, sp, #0
 8016952:	60f8      	str	r0, [r7, #12]
 8016954:	60b9      	str	r1, [r7, #8]
 8016956:	4639      	mov	r1, r7
 8016958:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	68ba      	ldr	r2, [r7, #8]
 8016960:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	3304      	adds	r3, #4
 8016966:	461a      	mov	r2, r3
 8016968:	463b      	mov	r3, r7
 801696a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801696e:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	4a03      	ldr	r2, [pc, #12]	; (8016984 <_ZN26core_utils_FunctionPointerIhA8_fE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhPfE+0x38>)
 8016976:	615a      	str	r2, [r3, #20]
    }
 8016978:	bf00      	nop
 801697a:	3714      	adds	r7, #20
 801697c:	46bd      	mov	sp, r7
 801697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016982:	4770      	bx	lr
 8016984:	08016b51 	.word	0x08016b51

08016988 <_ZN26core_utils_FunctionPointerIvmE4callEm>:
    R call(A1 a) {
 8016988:	b580      	push	{r7, lr}
 801698a:	b082      	sub	sp, #8
 801698c:	af00      	add	r7, sp, #0
 801698e:	6078      	str	r0, [r7, #4]
 8016990:	6039      	str	r1, [r7, #0]
        if (_membercaller == 0 && _p.function) {
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	695b      	ldr	r3, [r3, #20]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d108      	bne.n	80169ac <_ZN26core_utils_FunctionPointerIvmE4callEm+0x24>
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d004      	beq.n	80169ac <_ZN26core_utils_FunctionPointerIvmE4callEm+0x24>
           return _p.function(a);
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	6838      	ldr	r0, [r7, #0]
 80169a8:	4798      	blx	r3
 80169aa:	e011      	b.n	80169d0 <_ZN26core_utils_FunctionPointerIvmE4callEm+0x48>
        } else if (_membercaller && _p.object) {
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	695b      	ldr	r3, [r3, #20]
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d00c      	beq.n	80169ce <_ZN26core_utils_FunctionPointerIvmE4callEm+0x46>
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d008      	beq.n	80169ce <_ZN26core_utils_FunctionPointerIvmE4callEm+0x46>
           return _membercaller(_p.object, _member, a);
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	695b      	ldr	r3, [r3, #20]
 80169c0:	687a      	ldr	r2, [r7, #4]
 80169c2:	6810      	ldr	r0, [r2, #0]
 80169c4:	687a      	ldr	r2, [r7, #4]
 80169c6:	1d11      	adds	r1, r2, #4
 80169c8:	683a      	ldr	r2, [r7, #0]
 80169ca:	4798      	blx	r3
 80169cc:	e000      	b.n	80169d0 <_ZN26core_utils_FunctionPointerIvmE4callEm+0x48>
        return (R)0;
 80169ce:	bf00      	nop
    }
 80169d0:	3708      	adds	r7, #8
 80169d2:	46bd      	mov	sp, r7
 80169d4:	bd80      	pop	{r7, pc}

080169d6 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE12membercallerI20TWIPR_ControlManagerEEvPvPjS0_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 80169d6:	b580      	push	{r7, lr}
 80169d8:	b086      	sub	sp, #24
 80169da:	af00      	add	r7, sp, #0
 80169dc:	60f8      	str	r0, [r7, #12]
 80169de:	60b9      	str	r1, [r7, #8]
 80169e0:	eeb0 7a40 	vmov.f32	s14, s0
 80169e4:	eef0 7a60 	vmov.f32	s15, s1
 80169e8:	ed87 7a00 	vstr	s14, [r7]
 80169ec:	edc7 7a01 	vstr	s15, [r7, #4]
        T* o = static_cast<T*>(object);
 80169f0:	68fb      	ldr	r3, [r7, #12]
 80169f2:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 80169f4:	68bb      	ldr	r3, [r7, #8]
 80169f6:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 80169f8:	693b      	ldr	r3, [r7, #16]
 80169fa:	685b      	ldr	r3, [r3, #4]
 80169fc:	105b      	asrs	r3, r3, #1
 80169fe:	461a      	mov	r2, r3
 8016a00:	697b      	ldr	r3, [r7, #20]
 8016a02:	1899      	adds	r1, r3, r2
 8016a04:	693b      	ldr	r3, [r7, #16]
 8016a06:	685b      	ldr	r3, [r3, #4]
 8016a08:	f003 0301 	and.w	r3, r3, #1
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d00b      	beq.n	8016a28 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE12membercallerI20TWIPR_ControlManagerEEvPvPjS0_+0x52>
 8016a10:	693b      	ldr	r3, [r7, #16]
 8016a12:	685b      	ldr	r3, [r3, #4]
 8016a14:	105b      	asrs	r3, r3, #1
 8016a16:	461a      	mov	r2, r3
 8016a18:	697b      	ldr	r3, [r7, #20]
 8016a1a:	4413      	add	r3, r2
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	693a      	ldr	r2, [r7, #16]
 8016a20:	6812      	ldr	r2, [r2, #0]
 8016a22:	4413      	add	r3, r2
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	e001      	b.n	8016a2c <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE12membercallerI20TWIPR_ControlManagerEEvPvPjS0_+0x56>
 8016a28:	693b      	ldr	r3, [r7, #16]
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	ed97 7a00 	vldr	s14, [r7]
 8016a30:	edd7 7a01 	vldr	s15, [r7, #4]
 8016a34:	eeb0 0a47 	vmov.f32	s0, s14
 8016a38:	eef0 0a67 	vmov.f32	s1, s15
 8016a3c:	4608      	mov	r0, r1
 8016a3e:	4798      	blx	r3
 8016a40:	bf00      	nop
    }
 8016a42:	3718      	adds	r7, #24
 8016a44:	46bd      	mov	sp, r7
 8016a46:	bd80      	pop	{r7, pc}

08016a48 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE12membercallerI20TWIPR_ControlManagerEEhPvPjS0_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	b086      	sub	sp, #24
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	60f8      	str	r0, [r7, #12]
 8016a50:	60b9      	str	r1, [r7, #8]
 8016a52:	4613      	mov	r3, r2
 8016a54:	71fb      	strb	r3, [r7, #7]
        T* o = static_cast<T*>(object);
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8016a5a:	68bb      	ldr	r3, [r7, #8]
 8016a5c:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 8016a5e:	693b      	ldr	r3, [r7, #16]
 8016a60:	685b      	ldr	r3, [r3, #4]
 8016a62:	105b      	asrs	r3, r3, #1
 8016a64:	461a      	mov	r2, r3
 8016a66:	697b      	ldr	r3, [r7, #20]
 8016a68:	1898      	adds	r0, r3, r2
 8016a6a:	693b      	ldr	r3, [r7, #16]
 8016a6c:	685b      	ldr	r3, [r3, #4]
 8016a6e:	f003 0301 	and.w	r3, r3, #1
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d00b      	beq.n	8016a8e <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE12membercallerI20TWIPR_ControlManagerEEhPvPjS0_+0x46>
 8016a76:	693b      	ldr	r3, [r7, #16]
 8016a78:	685b      	ldr	r3, [r3, #4]
 8016a7a:	105b      	asrs	r3, r3, #1
 8016a7c:	461a      	mov	r2, r3
 8016a7e:	697b      	ldr	r3, [r7, #20]
 8016a80:	4413      	add	r3, r2
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	693a      	ldr	r2, [r7, #16]
 8016a86:	6812      	ldr	r2, [r2, #0]
 8016a88:	4413      	add	r3, r2
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	e001      	b.n	8016a92 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE12membercallerI20TWIPR_ControlManagerEEhPvPjS0_+0x4a>
 8016a8e:	693b      	ldr	r3, [r7, #16]
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	79fa      	ldrb	r2, [r7, #7]
 8016a94:	4611      	mov	r1, r2
 8016a96:	4798      	blx	r3
 8016a98:	4603      	mov	r3, r0
    }
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	3718      	adds	r7, #24
 8016a9e:	46bd      	mov	sp, r7
 8016aa0:	bd80      	pop	{r7, pc}

08016aa2 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE12membercallerI20TWIPR_ControlManagerEEhPvPjS0_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8016aa2:	b580      	push	{r7, lr}
 8016aa4:	b086      	sub	sp, #24
 8016aa6:	af00      	add	r7, sp, #0
 8016aa8:	60f8      	str	r0, [r7, #12]
 8016aaa:	60b9      	str	r1, [r7, #8]
 8016aac:	4639      	mov	r1, r7
 8016aae:	e881 000c 	stmia.w	r1, {r2, r3}
        T* o = static_cast<T*>(object);
 8016ab2:	68fb      	ldr	r3, [r7, #12]
 8016ab4:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8016ab6:	68bb      	ldr	r3, [r7, #8]
 8016ab8:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 8016aba:	693b      	ldr	r3, [r7, #16]
 8016abc:	685b      	ldr	r3, [r3, #4]
 8016abe:	105b      	asrs	r3, r3, #1
 8016ac0:	461a      	mov	r2, r3
 8016ac2:	697b      	ldr	r3, [r7, #20]
 8016ac4:	1898      	adds	r0, r3, r2
 8016ac6:	693b      	ldr	r3, [r7, #16]
 8016ac8:	685b      	ldr	r3, [r3, #4]
 8016aca:	f003 0301 	and.w	r3, r3, #1
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d00b      	beq.n	8016aea <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE12membercallerI20TWIPR_ControlManagerEEhPvPjS0_+0x48>
 8016ad2:	693b      	ldr	r3, [r7, #16]
 8016ad4:	685b      	ldr	r3, [r3, #4]
 8016ad6:	105b      	asrs	r3, r3, #1
 8016ad8:	461a      	mov	r2, r3
 8016ada:	697b      	ldr	r3, [r7, #20]
 8016adc:	4413      	add	r3, r2
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	693a      	ldr	r2, [r7, #16]
 8016ae2:	6812      	ldr	r2, [r2, #0]
 8016ae4:	4413      	add	r3, r2
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	e001      	b.n	8016aee <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE12membercallerI20TWIPR_ControlManagerEEhPvPjS0_+0x4c>
 8016aea:	693b      	ldr	r3, [r7, #16]
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	463a      	mov	r2, r7
 8016af0:	ca06      	ldmia	r2, {r1, r2}
 8016af2:	4798      	blx	r3
 8016af4:	4603      	mov	r3, r0
    }
 8016af6:	4618      	mov	r0, r3
 8016af8:	3718      	adds	r7, #24
 8016afa:	46bd      	mov	sp, r7
 8016afc:	bd80      	pop	{r7, pc}

08016afe <_ZN26core_utils_FunctionPointerIvvE12membercallerI20TWIPR_ControlManagerEEvPvPj>:
    static R membercaller(void *object, uintptr_t *member) {
 8016afe:	b580      	push	{r7, lr}
 8016b00:	b084      	sub	sp, #16
 8016b02:	af00      	add	r7, sp, #0
 8016b04:	6078      	str	r0, [r7, #4]
 8016b06:	6039      	str	r1, [r7, #0]
        T* o = static_cast<T*>(object);
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	60fb      	str	r3, [r7, #12]
        R (T::**m)(void) = reinterpret_cast<R (T::**)(void)>(member);
 8016b0c:	683b      	ldr	r3, [r7, #0]
 8016b0e:	60bb      	str	r3, [r7, #8]
        return (o->**m)();
 8016b10:	68bb      	ldr	r3, [r7, #8]
 8016b12:	685b      	ldr	r3, [r3, #4]
 8016b14:	105b      	asrs	r3, r3, #1
 8016b16:	461a      	mov	r2, r3
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	1899      	adds	r1, r3, r2
 8016b1c:	68bb      	ldr	r3, [r7, #8]
 8016b1e:	685b      	ldr	r3, [r3, #4]
 8016b20:	f003 0301 	and.w	r3, r3, #1
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d00b      	beq.n	8016b40 <_ZN26core_utils_FunctionPointerIvvE12membercallerI20TWIPR_ControlManagerEEvPvPj+0x42>
 8016b28:	68bb      	ldr	r3, [r7, #8]
 8016b2a:	685b      	ldr	r3, [r3, #4]
 8016b2c:	105b      	asrs	r3, r3, #1
 8016b2e:	461a      	mov	r2, r3
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	4413      	add	r3, r2
 8016b34:	681b      	ldr	r3, [r3, #0]
 8016b36:	68ba      	ldr	r2, [r7, #8]
 8016b38:	6812      	ldr	r2, [r2, #0]
 8016b3a:	4413      	add	r3, r2
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	e001      	b.n	8016b44 <_ZN26core_utils_FunctionPointerIvvE12membercallerI20TWIPR_ControlManagerEEvPvPj+0x46>
 8016b40:	68bb      	ldr	r3, [r7, #8]
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	4608      	mov	r0, r1
 8016b46:	4798      	blx	r3
 8016b48:	bf00      	nop
    }
 8016b4a:	3710      	adds	r7, #16
 8016b4c:	46bd      	mov	sp, r7
 8016b4e:	bd80      	pop	{r7, pc}

08016b50 <_ZN26core_utils_FunctionPointerIhA8_fE12membercallerI20TWIPR_ControlManagerEEhPvPjPf>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8016b50:	b580      	push	{r7, lr}
 8016b52:	b086      	sub	sp, #24
 8016b54:	af00      	add	r7, sp, #0
 8016b56:	60f8      	str	r0, [r7, #12]
 8016b58:	60b9      	str	r1, [r7, #8]
 8016b5a:	607a      	str	r2, [r7, #4]
        T* o = static_cast<T*>(object);
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8016b60:	68bb      	ldr	r3, [r7, #8]
 8016b62:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 8016b64:	693b      	ldr	r3, [r7, #16]
 8016b66:	685b      	ldr	r3, [r3, #4]
 8016b68:	105b      	asrs	r3, r3, #1
 8016b6a:	461a      	mov	r2, r3
 8016b6c:	697b      	ldr	r3, [r7, #20]
 8016b6e:	1898      	adds	r0, r3, r2
 8016b70:	693b      	ldr	r3, [r7, #16]
 8016b72:	685b      	ldr	r3, [r3, #4]
 8016b74:	f003 0301 	and.w	r3, r3, #1
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d00b      	beq.n	8016b94 <_ZN26core_utils_FunctionPointerIhA8_fE12membercallerI20TWIPR_ControlManagerEEhPvPjPf+0x44>
 8016b7c:	693b      	ldr	r3, [r7, #16]
 8016b7e:	685b      	ldr	r3, [r3, #4]
 8016b80:	105b      	asrs	r3, r3, #1
 8016b82:	461a      	mov	r2, r3
 8016b84:	697b      	ldr	r3, [r7, #20]
 8016b86:	4413      	add	r3, r2
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	693a      	ldr	r2, [r7, #16]
 8016b8c:	6812      	ldr	r2, [r2, #0]
 8016b8e:	4413      	add	r3, r2
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	e001      	b.n	8016b98 <_ZN26core_utils_FunctionPointerIhA8_fE12membercallerI20TWIPR_ControlManagerEEhPvPjPf+0x48>
 8016b94:	693b      	ldr	r3, [r7, #16]
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	6879      	ldr	r1, [r7, #4]
 8016b9a:	4798      	blx	r3
 8016b9c:	4603      	mov	r3, r0
    }
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	3718      	adds	r7, #24
 8016ba2:	46bd      	mov	sp, r7
 8016ba4:	bd80      	pop	{r7, pc}

08016ba6 <_ZN22core_utils_RegisterMapILi20EE5writeEtPv>:
	void write(uint16_t address, void *data) {
 8016ba6:	b580      	push	{r7, lr}
 8016ba8:	b084      	sub	sp, #16
 8016baa:	af00      	add	r7, sp, #0
 8016bac:	60f8      	str	r0, [r7, #12]
 8016bae:	460b      	mov	r3, r1
 8016bb0:	607a      	str	r2, [r7, #4]
 8016bb2:	817b      	strh	r3, [r7, #10]
		if (this->entries[address] != NULL
 8016bb4:	897b      	ldrh	r3, [r7, #10]
 8016bb6:	68fa      	ldr	r2, [r7, #12]
 8016bb8:	3302      	adds	r3, #2
 8016bba:	009b      	lsls	r3, r3, #2
 8016bbc:	4413      	add	r3, r2
 8016bbe:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType() == REGISTER_ENTRY_DATA) {
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d015      	beq.n	8016bf0 <_ZN22core_utils_RegisterMapILi20EE5writeEtPv+0x4a>
 8016bc4:	897b      	ldrh	r3, [r7, #10]
 8016bc6:	68fa      	ldr	r2, [r7, #12]
 8016bc8:	3302      	adds	r3, #2
 8016bca:	009b      	lsls	r3, r3, #2
 8016bcc:	4413      	add	r3, r2
 8016bce:	6859      	ldr	r1, [r3, #4]
 8016bd0:	897b      	ldrh	r3, [r7, #10]
 8016bd2:	68fa      	ldr	r2, [r7, #12]
 8016bd4:	3302      	adds	r3, #2
 8016bd6:	009b      	lsls	r3, r3, #2
 8016bd8:	4413      	add	r3, r2
 8016bda:	685b      	ldr	r3, [r3, #4]
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	3320      	adds	r3, #32
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	4608      	mov	r0, r1
 8016be4:	4798      	blx	r3
 8016be6:	4603      	mov	r3, r0
 8016be8:	2b01      	cmp	r3, #1
 8016bea:	d101      	bne.n	8016bf0 <_ZN22core_utils_RegisterMapILi20EE5writeEtPv+0x4a>
 8016bec:	2301      	movs	r3, #1
 8016bee:	e000      	b.n	8016bf2 <_ZN22core_utils_RegisterMapILi20EE5writeEtPv+0x4c>
 8016bf0:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d00f      	beq.n	8016c16 <_ZN22core_utils_RegisterMapILi20EE5writeEtPv+0x70>
			this->entries[address]->write(data);
 8016bf6:	897b      	ldrh	r3, [r7, #10]
 8016bf8:	68fa      	ldr	r2, [r7, #12]
 8016bfa:	3302      	adds	r3, #2
 8016bfc:	009b      	lsls	r3, r3, #2
 8016bfe:	4413      	add	r3, r2
 8016c00:	6858      	ldr	r0, [r3, #4]
 8016c02:	897b      	ldrh	r3, [r7, #10]
 8016c04:	68fa      	ldr	r2, [r7, #12]
 8016c06:	3302      	adds	r3, #2
 8016c08:	009b      	lsls	r3, r3, #2
 8016c0a:	4413      	add	r3, r2
 8016c0c:	685b      	ldr	r3, [r3, #4]
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	6879      	ldr	r1, [r7, #4]
 8016c14:	4798      	blx	r3
	}
 8016c16:	bf00      	nop
 8016c18:	3710      	adds	r7, #16
 8016c1a:	46bd      	mov	sp, r7
 8016c1c:	bd80      	pop	{r7, pc}

08016c1e <_ZN22core_utils_RegisterMapILi20EE5writeEtPh>:
	void write(uint16_t address, uint8_t *data) {
 8016c1e:	b580      	push	{r7, lr}
 8016c20:	b084      	sub	sp, #16
 8016c22:	af00      	add	r7, sp, #0
 8016c24:	60f8      	str	r0, [r7, #12]
 8016c26:	460b      	mov	r3, r1
 8016c28:	607a      	str	r2, [r7, #4]
 8016c2a:	817b      	strh	r3, [r7, #10]
		if (this->entries[address] != NULL
 8016c2c:	897b      	ldrh	r3, [r7, #10]
 8016c2e:	68fa      	ldr	r2, [r7, #12]
 8016c30:	3302      	adds	r3, #2
 8016c32:	009b      	lsls	r3, r3, #2
 8016c34:	4413      	add	r3, r2
 8016c36:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType() == REGISTER_ENTRY_DATA) {
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d015      	beq.n	8016c68 <_ZN22core_utils_RegisterMapILi20EE5writeEtPh+0x4a>
 8016c3c:	897b      	ldrh	r3, [r7, #10]
 8016c3e:	68fa      	ldr	r2, [r7, #12]
 8016c40:	3302      	adds	r3, #2
 8016c42:	009b      	lsls	r3, r3, #2
 8016c44:	4413      	add	r3, r2
 8016c46:	6859      	ldr	r1, [r3, #4]
 8016c48:	897b      	ldrh	r3, [r7, #10]
 8016c4a:	68fa      	ldr	r2, [r7, #12]
 8016c4c:	3302      	adds	r3, #2
 8016c4e:	009b      	lsls	r3, r3, #2
 8016c50:	4413      	add	r3, r2
 8016c52:	685b      	ldr	r3, [r3, #4]
 8016c54:	681b      	ldr	r3, [r3, #0]
 8016c56:	3320      	adds	r3, #32
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	4608      	mov	r0, r1
 8016c5c:	4798      	blx	r3
 8016c5e:	4603      	mov	r3, r0
 8016c60:	2b01      	cmp	r3, #1
 8016c62:	d101      	bne.n	8016c68 <_ZN22core_utils_RegisterMapILi20EE5writeEtPh+0x4a>
 8016c64:	2301      	movs	r3, #1
 8016c66:	e000      	b.n	8016c6a <_ZN22core_utils_RegisterMapILi20EE5writeEtPh+0x4c>
 8016c68:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d010      	beq.n	8016c90 <_ZN22core_utils_RegisterMapILi20EE5writeEtPh+0x72>
			this->entries[address]->write(data);
 8016c6e:	897b      	ldrh	r3, [r7, #10]
 8016c70:	68fa      	ldr	r2, [r7, #12]
 8016c72:	3302      	adds	r3, #2
 8016c74:	009b      	lsls	r3, r3, #2
 8016c76:	4413      	add	r3, r2
 8016c78:	6858      	ldr	r0, [r3, #4]
 8016c7a:	897b      	ldrh	r3, [r7, #10]
 8016c7c:	68fa      	ldr	r2, [r7, #12]
 8016c7e:	3302      	adds	r3, #2
 8016c80:	009b      	lsls	r3, r3, #2
 8016c82:	4413      	add	r3, r2
 8016c84:	685b      	ldr	r3, [r3, #4]
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	3304      	adds	r3, #4
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	6879      	ldr	r1, [r7, #4]
 8016c8e:	4798      	blx	r3
	}
 8016c90:	bf00      	nop
 8016c92:	3710      	adds	r7, #16
 8016c94:	46bd      	mov	sp, r7
 8016c96:	bd80      	pop	{r7, pc}

08016c98 <_ZN22core_utils_RegisterMapILi20EE8addEntryEtP13RegisterEntry>:
	void addEntry(uint16_t address, RegisterEntry *entry) {
 8016c98:	b480      	push	{r7}
 8016c9a:	b085      	sub	sp, #20
 8016c9c:	af00      	add	r7, sp, #0
 8016c9e:	60f8      	str	r0, [r7, #12]
 8016ca0:	460b      	mov	r3, r1
 8016ca2:	607a      	str	r2, [r7, #4]
 8016ca4:	817b      	strh	r3, [r7, #10]
		this->entries[address] = entry;
 8016ca6:	897b      	ldrh	r3, [r7, #10]
 8016ca8:	68fa      	ldr	r2, [r7, #12]
 8016caa:	3302      	adds	r3, #2
 8016cac:	009b      	lsls	r3, r3, #2
 8016cae:	4413      	add	r3, r2
 8016cb0:	687a      	ldr	r2, [r7, #4]
 8016cb2:	605a      	str	r2, [r3, #4]
	}
 8016cb4:	bf00      	nop
 8016cb6:	3714      	adds	r7, #20
 8016cb8:	46bd      	mov	sp, r7
 8016cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cbe:	4770      	bx	lr

08016cc0 <_ZN22core_utils_RegisterMapILi20EE8hasEntryEt>:
	bool hasEntry(uint16_t address) {
 8016cc0:	b480      	push	{r7}
 8016cc2:	b083      	sub	sp, #12
 8016cc4:	af00      	add	r7, sp, #0
 8016cc6:	6078      	str	r0, [r7, #4]
 8016cc8:	460b      	mov	r3, r1
 8016cca:	807b      	strh	r3, [r7, #2]
		if (this->entries[address] != NULL) {
 8016ccc:	887b      	ldrh	r3, [r7, #2]
 8016cce:	687a      	ldr	r2, [r7, #4]
 8016cd0:	3302      	adds	r3, #2
 8016cd2:	009b      	lsls	r3, r3, #2
 8016cd4:	4413      	add	r3, r2
 8016cd6:	685b      	ldr	r3, [r3, #4]
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d001      	beq.n	8016ce0 <_ZN22core_utils_RegisterMapILi20EE8hasEntryEt+0x20>
			return true;
 8016cdc:	2301      	movs	r3, #1
 8016cde:	e000      	b.n	8016ce2 <_ZN22core_utils_RegisterMapILi20EE8hasEntryEt+0x22>
			return false;
 8016ce0:	2300      	movs	r3, #0
	}
 8016ce2:	4618      	mov	r0, r3
 8016ce4:	370c      	adds	r7, #12
 8016ce6:	46bd      	mov	sp, r7
 8016ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cec:	4770      	bx	lr

08016cee <_ZN22core_utils_RegisterMapILi20EE4readEtPh>:
	uint8_t read(uint16_t address, uint8_t *data) {
 8016cee:	b580      	push	{r7, lr}
 8016cf0:	b084      	sub	sp, #16
 8016cf2:	af00      	add	r7, sp, #0
 8016cf4:	60f8      	str	r0, [r7, #12]
 8016cf6:	460b      	mov	r3, r1
 8016cf8:	607a      	str	r2, [r7, #4]
 8016cfa:	817b      	strh	r3, [r7, #10]
		if (this->entries[address] != NULL
 8016cfc:	897b      	ldrh	r3, [r7, #10]
 8016cfe:	68fa      	ldr	r2, [r7, #12]
 8016d00:	3302      	adds	r3, #2
 8016d02:	009b      	lsls	r3, r3, #2
 8016d04:	4413      	add	r3, r2
 8016d06:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType() == REGISTER_ENTRY_DATA) {
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d015      	beq.n	8016d38 <_ZN22core_utils_RegisterMapILi20EE4readEtPh+0x4a>
 8016d0c:	897b      	ldrh	r3, [r7, #10]
 8016d0e:	68fa      	ldr	r2, [r7, #12]
 8016d10:	3302      	adds	r3, #2
 8016d12:	009b      	lsls	r3, r3, #2
 8016d14:	4413      	add	r3, r2
 8016d16:	6859      	ldr	r1, [r3, #4]
 8016d18:	897b      	ldrh	r3, [r7, #10]
 8016d1a:	68fa      	ldr	r2, [r7, #12]
 8016d1c:	3302      	adds	r3, #2
 8016d1e:	009b      	lsls	r3, r3, #2
 8016d20:	4413      	add	r3, r2
 8016d22:	685b      	ldr	r3, [r3, #4]
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	3320      	adds	r3, #32
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	4608      	mov	r0, r1
 8016d2c:	4798      	blx	r3
 8016d2e:	4603      	mov	r3, r0
 8016d30:	2b01      	cmp	r3, #1
 8016d32:	d101      	bne.n	8016d38 <_ZN22core_utils_RegisterMapILi20EE4readEtPh+0x4a>
 8016d34:	2301      	movs	r3, #1
 8016d36:	e000      	b.n	8016d3a <_ZN22core_utils_RegisterMapILi20EE4readEtPh+0x4c>
 8016d38:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d012      	beq.n	8016d64 <_ZN22core_utils_RegisterMapILi20EE4readEtPh+0x76>
			return this->entries[address]->readBytes(data);
 8016d3e:	897b      	ldrh	r3, [r7, #10]
 8016d40:	68fa      	ldr	r2, [r7, #12]
 8016d42:	3302      	adds	r3, #2
 8016d44:	009b      	lsls	r3, r3, #2
 8016d46:	4413      	add	r3, r2
 8016d48:	6858      	ldr	r0, [r3, #4]
 8016d4a:	897b      	ldrh	r3, [r7, #10]
 8016d4c:	68fa      	ldr	r2, [r7, #12]
 8016d4e:	3302      	adds	r3, #2
 8016d50:	009b      	lsls	r3, r3, #2
 8016d52:	4413      	add	r3, r2
 8016d54:	685b      	ldr	r3, [r3, #4]
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	3308      	adds	r3, #8
 8016d5a:	681b      	ldr	r3, [r3, #0]
 8016d5c:	6879      	ldr	r1, [r7, #4]
 8016d5e:	4798      	blx	r3
 8016d60:	4603      	mov	r3, r0
 8016d62:	e000      	b.n	8016d66 <_ZN22core_utils_RegisterMapILi20EE4readEtPh+0x78>
		return 0;
 8016d64:	2300      	movs	r3, #0
	}
 8016d66:	4618      	mov	r0, r3
 8016d68:	3710      	adds	r7, #16
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	bd80      	pop	{r7, pc}

08016d6e <_ZN22core_utils_RegisterMapILi20EE7getSizeEt>:
	uint8_t getSize(uint16_t address) {
 8016d6e:	b580      	push	{r7, lr}
 8016d70:	b082      	sub	sp, #8
 8016d72:	af00      	add	r7, sp, #0
 8016d74:	6078      	str	r0, [r7, #4]
 8016d76:	460b      	mov	r3, r1
 8016d78:	807b      	strh	r3, [r7, #2]
		return this->entries[address]->getSize();
 8016d7a:	887b      	ldrh	r3, [r7, #2]
 8016d7c:	687a      	ldr	r2, [r7, #4]
 8016d7e:	3302      	adds	r3, #2
 8016d80:	009b      	lsls	r3, r3, #2
 8016d82:	4413      	add	r3, r2
 8016d84:	6859      	ldr	r1, [r3, #4]
 8016d86:	887b      	ldrh	r3, [r7, #2]
 8016d88:	687a      	ldr	r2, [r7, #4]
 8016d8a:	3302      	adds	r3, #2
 8016d8c:	009b      	lsls	r3, r3, #2
 8016d8e:	4413      	add	r3, r2
 8016d90:	685b      	ldr	r3, [r3, #4]
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	330c      	adds	r3, #12
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	4608      	mov	r0, r1
 8016d9a:	4798      	blx	r3
 8016d9c:	4603      	mov	r3, r0
	}
 8016d9e:	4618      	mov	r0, r3
 8016da0:	3708      	adds	r7, #8
 8016da2:	46bd      	mov	sp, r7
 8016da4:	bd80      	pop	{r7, pc}

08016da6 <_ZN22core_utils_RegisterMapILi20EE7getTypeEt>:
	register_entry_type getType(uint16_t address) {
 8016da6:	b580      	push	{r7, lr}
 8016da8:	b082      	sub	sp, #8
 8016daa:	af00      	add	r7, sp, #0
 8016dac:	6078      	str	r0, [r7, #4]
 8016dae:	460b      	mov	r3, r1
 8016db0:	807b      	strh	r3, [r7, #2]
		return this->entries[address]->getType();
 8016db2:	887b      	ldrh	r3, [r7, #2]
 8016db4:	687a      	ldr	r2, [r7, #4]
 8016db6:	3302      	adds	r3, #2
 8016db8:	009b      	lsls	r3, r3, #2
 8016dba:	4413      	add	r3, r2
 8016dbc:	6859      	ldr	r1, [r3, #4]
 8016dbe:	887b      	ldrh	r3, [r7, #2]
 8016dc0:	687a      	ldr	r2, [r7, #4]
 8016dc2:	3302      	adds	r3, #2
 8016dc4:	009b      	lsls	r3, r3, #2
 8016dc6:	4413      	add	r3, r2
 8016dc8:	685b      	ldr	r3, [r3, #4]
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	3320      	adds	r3, #32
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	4608      	mov	r0, r1
 8016dd2:	4798      	blx	r3
 8016dd4:	4603      	mov	r3, r0
	}
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	3708      	adds	r7, #8
 8016dda:	46bd      	mov	sp, r7
 8016ddc:	bd80      	pop	{r7, pc}

08016dde <_ZN22core_utils_RegisterMapILi20EE19getReadWriteSettingEt>:
	register_entry_rw_t getReadWriteSetting(uint16_t address) {
 8016dde:	b580      	push	{r7, lr}
 8016de0:	b082      	sub	sp, #8
 8016de2:	af00      	add	r7, sp, #0
 8016de4:	6078      	str	r0, [r7, #4]
 8016de6:	460b      	mov	r3, r1
 8016de8:	807b      	strh	r3, [r7, #2]
		return this->entries[address]->getReadWriteSetting();
 8016dea:	887b      	ldrh	r3, [r7, #2]
 8016dec:	687a      	ldr	r2, [r7, #4]
 8016dee:	3302      	adds	r3, #2
 8016df0:	009b      	lsls	r3, r3, #2
 8016df2:	4413      	add	r3, r2
 8016df4:	6859      	ldr	r1, [r3, #4]
 8016df6:	887b      	ldrh	r3, [r7, #2]
 8016df8:	687a      	ldr	r2, [r7, #4]
 8016dfa:	3302      	adds	r3, #2
 8016dfc:	009b      	lsls	r3, r3, #2
 8016dfe:	4413      	add	r3, r2
 8016e00:	685b      	ldr	r3, [r3, #4]
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	3324      	adds	r3, #36	; 0x24
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	4608      	mov	r0, r1
 8016e0a:	4798      	blx	r3
 8016e0c:	4603      	mov	r3, r0
	}
 8016e0e:	4618      	mov	r0, r3
 8016e10:	3708      	adds	r7, #8
 8016e12:	46bd      	mov	sp, r7
 8016e14:	bd80      	pop	{r7, pc}

08016e16 <_ZN22core_utils_RegisterMapILi20EE7executeEtPhS1_>:
	uint8_t execute(uint16_t address, uint8_t *input, uint8_t *output) {
 8016e16:	b580      	push	{r7, lr}
 8016e18:	b084      	sub	sp, #16
 8016e1a:	af00      	add	r7, sp, #0
 8016e1c:	60f8      	str	r0, [r7, #12]
 8016e1e:	607a      	str	r2, [r7, #4]
 8016e20:	603b      	str	r3, [r7, #0]
 8016e22:	460b      	mov	r3, r1
 8016e24:	817b      	strh	r3, [r7, #10]
		if (this->entries[address] != NULL
 8016e26:	897b      	ldrh	r3, [r7, #10]
 8016e28:	68fa      	ldr	r2, [r7, #12]
 8016e2a:	3302      	adds	r3, #2
 8016e2c:	009b      	lsls	r3, r3, #2
 8016e2e:	4413      	add	r3, r2
 8016e30:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType()
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d015      	beq.n	8016e62 <_ZN22core_utils_RegisterMapILi20EE7executeEtPhS1_+0x4c>
 8016e36:	897b      	ldrh	r3, [r7, #10]
 8016e38:	68fa      	ldr	r2, [r7, #12]
 8016e3a:	3302      	adds	r3, #2
 8016e3c:	009b      	lsls	r3, r3, #2
 8016e3e:	4413      	add	r3, r2
 8016e40:	6859      	ldr	r1, [r3, #4]
 8016e42:	897b      	ldrh	r3, [r7, #10]
 8016e44:	68fa      	ldr	r2, [r7, #12]
 8016e46:	3302      	adds	r3, #2
 8016e48:	009b      	lsls	r3, r3, #2
 8016e4a:	4413      	add	r3, r2
 8016e4c:	685b      	ldr	r3, [r3, #4]
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	3320      	adds	r3, #32
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	4608      	mov	r0, r1
 8016e56:	4798      	blx	r3
 8016e58:	4603      	mov	r3, r0
 8016e5a:	2b02      	cmp	r3, #2
 8016e5c:	d101      	bne.n	8016e62 <_ZN22core_utils_RegisterMapILi20EE7executeEtPhS1_+0x4c>
 8016e5e:	2301      	movs	r3, #1
 8016e60:	e000      	b.n	8016e64 <_ZN22core_utils_RegisterMapILi20EE7executeEtPhS1_+0x4e>
 8016e62:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d013      	beq.n	8016e90 <_ZN22core_utils_RegisterMapILi20EE7executeEtPhS1_+0x7a>
			return this->entries[address]->execute(input, output);
 8016e68:	897b      	ldrh	r3, [r7, #10]
 8016e6a:	68fa      	ldr	r2, [r7, #12]
 8016e6c:	3302      	adds	r3, #2
 8016e6e:	009b      	lsls	r3, r3, #2
 8016e70:	4413      	add	r3, r2
 8016e72:	6858      	ldr	r0, [r3, #4]
 8016e74:	897b      	ldrh	r3, [r7, #10]
 8016e76:	68fa      	ldr	r2, [r7, #12]
 8016e78:	3302      	adds	r3, #2
 8016e7a:	009b      	lsls	r3, r3, #2
 8016e7c:	4413      	add	r3, r2
 8016e7e:	685b      	ldr	r3, [r3, #4]
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	331c      	adds	r3, #28
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	683a      	ldr	r2, [r7, #0]
 8016e88:	6879      	ldr	r1, [r7, #4]
 8016e8a:	4798      	blx	r3
 8016e8c:	4603      	mov	r3, r0
 8016e8e:	e000      	b.n	8016e92 <_ZN22core_utils_RegisterMapILi20EE7executeEtPhS1_+0x7c>
		return 0;
 8016e90:	2300      	movs	r3, #0
	}
 8016e92:	4618      	mov	r0, r3
 8016e94:	3710      	adds	r7, #16
 8016e96:	46bd      	mov	sp, r7
 8016e98:	bd80      	pop	{r7, pc}

08016e9a <_ZN22core_utils_RegisterMapILi20EE7executeEt>:
	uint8_t execute(uint16_t address) {
 8016e9a:	b580      	push	{r7, lr}
 8016e9c:	b082      	sub	sp, #8
 8016e9e:	af00      	add	r7, sp, #0
 8016ea0:	6078      	str	r0, [r7, #4]
 8016ea2:	460b      	mov	r3, r1
 8016ea4:	807b      	strh	r3, [r7, #2]
		if (this->entries[address] != NULL
 8016ea6:	887b      	ldrh	r3, [r7, #2]
 8016ea8:	687a      	ldr	r2, [r7, #4]
 8016eaa:	3302      	adds	r3, #2
 8016eac:	009b      	lsls	r3, r3, #2
 8016eae:	4413      	add	r3, r2
 8016eb0:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType()
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d015      	beq.n	8016ee2 <_ZN22core_utils_RegisterMapILi20EE7executeEt+0x48>
 8016eb6:	887b      	ldrh	r3, [r7, #2]
 8016eb8:	687a      	ldr	r2, [r7, #4]
 8016eba:	3302      	adds	r3, #2
 8016ebc:	009b      	lsls	r3, r3, #2
 8016ebe:	4413      	add	r3, r2
 8016ec0:	6859      	ldr	r1, [r3, #4]
 8016ec2:	887b      	ldrh	r3, [r7, #2]
 8016ec4:	687a      	ldr	r2, [r7, #4]
 8016ec6:	3302      	adds	r3, #2
 8016ec8:	009b      	lsls	r3, r3, #2
 8016eca:	4413      	add	r3, r2
 8016ecc:	685b      	ldr	r3, [r3, #4]
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	3320      	adds	r3, #32
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	4608      	mov	r0, r1
 8016ed6:	4798      	blx	r3
 8016ed8:	4603      	mov	r3, r0
 8016eda:	2b02      	cmp	r3, #2
 8016edc:	d101      	bne.n	8016ee2 <_ZN22core_utils_RegisterMapILi20EE7executeEt+0x48>
 8016ede:	2301      	movs	r3, #1
 8016ee0:	e000      	b.n	8016ee4 <_ZN22core_utils_RegisterMapILi20EE7executeEt+0x4a>
 8016ee2:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d03d      	beq.n	8016f64 <_ZN22core_utils_RegisterMapILi20EE7executeEt+0xca>
			if (this->entries[address]->getInputSize() == 0
 8016ee8:	887b      	ldrh	r3, [r7, #2]
 8016eea:	687a      	ldr	r2, [r7, #4]
 8016eec:	3302      	adds	r3, #2
 8016eee:	009b      	lsls	r3, r3, #2
 8016ef0:	4413      	add	r3, r2
 8016ef2:	6859      	ldr	r1, [r3, #4]
 8016ef4:	887b      	ldrh	r3, [r7, #2]
 8016ef6:	687a      	ldr	r2, [r7, #4]
 8016ef8:	3302      	adds	r3, #2
 8016efa:	009b      	lsls	r3, r3, #2
 8016efc:	4413      	add	r3, r2
 8016efe:	685b      	ldr	r3, [r3, #4]
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	3310      	adds	r3, #16
 8016f04:	681b      	ldr	r3, [r3, #0]
 8016f06:	4608      	mov	r0, r1
 8016f08:	4798      	blx	r3
 8016f0a:	4603      	mov	r3, r0
					&& this->entries[address]->getOutputSize() == 0) {
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d115      	bne.n	8016f3c <_ZN22core_utils_RegisterMapILi20EE7executeEt+0xa2>
 8016f10:	887b      	ldrh	r3, [r7, #2]
 8016f12:	687a      	ldr	r2, [r7, #4]
 8016f14:	3302      	adds	r3, #2
 8016f16:	009b      	lsls	r3, r3, #2
 8016f18:	4413      	add	r3, r2
 8016f1a:	6859      	ldr	r1, [r3, #4]
 8016f1c:	887b      	ldrh	r3, [r7, #2]
 8016f1e:	687a      	ldr	r2, [r7, #4]
 8016f20:	3302      	adds	r3, #2
 8016f22:	009b      	lsls	r3, r3, #2
 8016f24:	4413      	add	r3, r2
 8016f26:	685b      	ldr	r3, [r3, #4]
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	3314      	adds	r3, #20
 8016f2c:	681b      	ldr	r3, [r3, #0]
 8016f2e:	4608      	mov	r0, r1
 8016f30:	4798      	blx	r3
 8016f32:	4603      	mov	r3, r0
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d101      	bne.n	8016f3c <_ZN22core_utils_RegisterMapILi20EE7executeEt+0xa2>
 8016f38:	2301      	movs	r3, #1
 8016f3a:	e000      	b.n	8016f3e <_ZN22core_utils_RegisterMapILi20EE7executeEt+0xa4>
 8016f3c:	2300      	movs	r3, #0
			if (this->entries[address]->getInputSize() == 0
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d010      	beq.n	8016f64 <_ZN22core_utils_RegisterMapILi20EE7executeEt+0xca>
				this->entries[address]->execute();
 8016f42:	887b      	ldrh	r3, [r7, #2]
 8016f44:	687a      	ldr	r2, [r7, #4]
 8016f46:	3302      	adds	r3, #2
 8016f48:	009b      	lsls	r3, r3, #2
 8016f4a:	4413      	add	r3, r2
 8016f4c:	6859      	ldr	r1, [r3, #4]
 8016f4e:	887b      	ldrh	r3, [r7, #2]
 8016f50:	687a      	ldr	r2, [r7, #4]
 8016f52:	3302      	adds	r3, #2
 8016f54:	009b      	lsls	r3, r3, #2
 8016f56:	4413      	add	r3, r2
 8016f58:	685b      	ldr	r3, [r3, #4]
 8016f5a:	681b      	ldr	r3, [r3, #0]
 8016f5c:	3318      	adds	r3, #24
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	4608      	mov	r0, r1
 8016f62:	4798      	blx	r3
		return 0;
 8016f64:	2300      	movs	r3, #0
	}
 8016f66:	4618      	mov	r0, r3
 8016f68:	3708      	adds	r7, #8
 8016f6a:	46bd      	mov	sp, r7
 8016f6c:	bd80      	pop	{r7, pc}

08016f6e <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeEPv>:
	void write(void *value) {
 8016f6e:	b5b0      	push	{r4, r5, r7, lr}
 8016f70:	b084      	sub	sp, #16
 8016f72:	af00      	add	r7, sp, #0
 8016f74:	6078      	str	r0, [r7, #4]
 8016f76:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d014      	beq.n	8016fac <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeEPv+0x3e>
		T *value_typed = (T*) value;
 8016f82:	683b      	ldr	r3, [r7, #0]
 8016f84:	60fb      	str	r3, [r7, #12]
		*(this->data) = *value_typed;
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	4614      	mov	r4, r2
 8016f8e:	461d      	mov	r5, r3
 8016f90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016f98:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8016f9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		this->write_function.call();
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	3344      	adds	r3, #68	; 0x44
 8016fa4:	4618      	mov	r0, r3
 8016fa6:	f7fb f8ab 	bl	8012100 <_ZN8Callback4callEv>
 8016faa:	e000      	b.n	8016fae <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeEPv+0x40>
			return;
 8016fac:	bf00      	nop
	}
 8016fae:	3710      	adds	r7, #16
 8016fb0:	46bd      	mov	sp, r7
 8016fb2:	bdb0      	pop	{r4, r5, r7, pc}

08016fb4 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeEPh>:
	void write(uint8_t *data) { // TODO: not good
 8016fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fb6:	b08f      	sub	sp, #60	; 0x3c
 8016fb8:	af0a      	add	r7, sp, #40	; 0x28
 8016fba:	6078      	str	r0, [r7, #4]
 8016fbc:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d022      	beq.n	801700e <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeEPh+0x5a>
		for (uint8_t i = 0; i < sizeof(T); i++) {
 8016fc8:	2300      	movs	r3, #0
 8016fca:	73fb      	strb	r3, [r7, #15]
 8016fcc:	7bfb      	ldrb	r3, [r7, #15]
 8016fce:	2b2f      	cmp	r3, #47	; 0x2f
 8016fd0:	d80c      	bhi.n	8016fec <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeEPh+0x38>
			this->data_union.data_bytes[i] = data[i];
 8016fd2:	7bfb      	ldrb	r3, [r7, #15]
 8016fd4:	683a      	ldr	r2, [r7, #0]
 8016fd6:	441a      	add	r2, r3
 8016fd8:	7bfb      	ldrb	r3, [r7, #15]
 8016fda:	7811      	ldrb	r1, [r2, #0]
 8016fdc:	687a      	ldr	r2, [r7, #4]
 8016fde:	4413      	add	r3, r2
 8016fe0:	460a      	mov	r2, r1
 8016fe2:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 8016fe4:	7bfb      	ldrb	r3, [r7, #15]
 8016fe6:	3301      	adds	r3, #1
 8016fe8:	73fb      	strb	r3, [r7, #15]
 8016fea:	e7ef      	b.n	8016fcc <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeEPh+0x18>
		this->write(this->data_union.data);
 8016fec:	687e      	ldr	r6, [r7, #4]
 8016fee:	466d      	mov	r5, sp
 8016ff0:	f106 0414 	add.w	r4, r6, #20
 8016ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016ff6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016ff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016ffa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016ffc:	6823      	ldr	r3, [r4, #0]
 8016ffe:	602b      	str	r3, [r5, #0]
 8017000:	f106 0308 	add.w	r3, r6, #8
 8017004:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017006:	6878      	ldr	r0, [r7, #4]
 8017008:	f000 fb26 	bl	8017658 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeES0_>
 801700c:	e000      	b.n	8017010 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeEPh+0x5c>
			return;
 801700e:	bf00      	nop
	}
 8017010:	3714      	adds	r7, #20
 8017012:	46bd      	mov	sp, r7
 8017014:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017016 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE9readBytesEPh>:
	uint8_t readBytes(uint8_t *data) {
 8017016:	b4b0      	push	{r4, r5, r7}
 8017018:	b085      	sub	sp, #20
 801701a:	af00      	add	r7, sp, #0
 801701c:	6078      	str	r0, [r7, #4]
 801701e:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_WRITE) {
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017026:	2b01      	cmp	r3, #1
 8017028:	d101      	bne.n	801702e <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE9readBytesEPh+0x18>
			return 0;
 801702a:	2300      	movs	r3, #0
 801702c:	e01f      	b.n	801706e <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE9readBytesEPh+0x58>
		this->data_union.data = *(this->data);
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	f103 0408 	add.w	r4, r3, #8
 8017038:	4615      	mov	r5, r2
 801703a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801703c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801703e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017042:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8017046:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		for (uint8_t i = 0; i < sizeof(T); i++) {
 801704a:	2300      	movs	r3, #0
 801704c:	73fb      	strb	r3, [r7, #15]
 801704e:	7bfb      	ldrb	r3, [r7, #15]
 8017050:	2b2f      	cmp	r3, #47	; 0x2f
 8017052:	d80b      	bhi.n	801706c <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE9readBytesEPh+0x56>
			data[i] = this->data_union.data_bytes[i];
 8017054:	7bfa      	ldrb	r2, [r7, #15]
 8017056:	7bfb      	ldrb	r3, [r7, #15]
 8017058:	6839      	ldr	r1, [r7, #0]
 801705a:	440b      	add	r3, r1
 801705c:	6879      	ldr	r1, [r7, #4]
 801705e:	440a      	add	r2, r1
 8017060:	7a12      	ldrb	r2, [r2, #8]
 8017062:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 8017064:	7bfb      	ldrb	r3, [r7, #15]
 8017066:	3301      	adds	r3, #1
 8017068:	73fb      	strb	r3, [r7, #15]
 801706a:	e7f0      	b.n	801704e <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE9readBytesEPh+0x38>
		return sizeof(T);
 801706c:	2330      	movs	r3, #48	; 0x30
	}
 801706e:	4618      	mov	r0, r3
 8017070:	3714      	adds	r7, #20
 8017072:	46bd      	mov	sp, r7
 8017074:	bcb0      	pop	{r4, r5, r7}
 8017076:	4770      	bx	lr

08017078 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE7getSizeEv>:
	uint8_t getSize() {
 8017078:	b480      	push	{r7}
 801707a:	b083      	sub	sp, #12
 801707c:	af00      	add	r7, sp, #0
 801707e:	6078      	str	r0, [r7, #4]
		return sizeof(T);
 8017080:	2330      	movs	r3, #48	; 0x30
	}
 8017082:	4618      	mov	r0, r3
 8017084:	370c      	adds	r7, #12
 8017086:	46bd      	mov	sp, r7
 8017088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801708c:	4770      	bx	lr

0801708e <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE7getTypeEv>:
	register_entry_type getType() {
 801708e:	b480      	push	{r7}
 8017090:	b083      	sub	sp, #12
 8017092:	af00      	add	r7, sp, #0
 8017094:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_DATA;
 8017096:	2301      	movs	r3, #1
	}
 8017098:	4618      	mov	r0, r3
 801709a:	370c      	adds	r7, #12
 801709c:	46bd      	mov	sp, r7
 801709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170a2:	4770      	bx	lr

080170a4 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 80170a4:	b480      	push	{r7}
 80170a6:	b083      	sub	sp, #12
 80170a8:	af00      	add	r7, sp, #0
 80170aa:	6078      	str	r0, [r7, #4]
		return this->rw;
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
	}
 80170b2:	4618      	mov	r0, r3
 80170b4:	370c      	adds	r7, #12
 80170b6:	46bd      	mov	sp, r7
 80170b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170bc:	4770      	bx	lr

080170be <_ZN27core_utils_RegisterFunctionIhA8_fE7getSizeEv>:
	uint8_t getSize() {
 80170be:	b480      	push	{r7}
 80170c0:	b083      	sub	sp, #12
 80170c2:	af00      	add	r7, sp, #0
 80170c4:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 80170c6:	2320      	movs	r3, #32
	}
 80170c8:	4618      	mov	r0, r3
 80170ca:	370c      	adds	r7, #12
 80170cc:	46bd      	mov	sp, r7
 80170ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170d2:	4770      	bx	lr

080170d4 <_ZN27core_utils_RegisterFunctionIhA8_fE12getInputSizeEv>:
	uint8_t getInputSize() {
 80170d4:	b480      	push	{r7}
 80170d6:	b083      	sub	sp, #12
 80170d8:	af00      	add	r7, sp, #0
 80170da:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 80170dc:	2320      	movs	r3, #32
	}
 80170de:	4618      	mov	r0, r3
 80170e0:	370c      	adds	r7, #12
 80170e2:	46bd      	mov	sp, r7
 80170e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170e8:	4770      	bx	lr

080170ea <_ZN27core_utils_RegisterFunctionIhA8_fE13getOutputSizeEv>:
	uint8_t getOutputSize() {
 80170ea:	b480      	push	{r7}
 80170ec:	b083      	sub	sp, #12
 80170ee:	af00      	add	r7, sp, #0
 80170f0:	6078      	str	r0, [r7, #4]
		return sizeof(output_t);
 80170f2:	2301      	movs	r3, #1
	}
 80170f4:	4618      	mov	r0, r3
 80170f6:	370c      	adds	r7, #12
 80170f8:	46bd      	mov	sp, r7
 80170fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170fe:	4770      	bx	lr

08017100 <_ZN27core_utils_RegisterFunctionIhA8_fE7executeEPhS2_>:
	uint8_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 8017100:	b580      	push	{r7, lr}
 8017102:	b088      	sub	sp, #32
 8017104:	af00      	add	r7, sp, #0
 8017106:	60f8      	str	r0, [r7, #12]
 8017108:	60b9      	str	r1, [r7, #8]
 801710a:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < (sizeof(input_t)); i++) {
 801710c:	2300      	movs	r3, #0
 801710e:	77fb      	strb	r3, [r7, #31]
 8017110:	7ffb      	ldrb	r3, [r7, #31]
 8017112:	2b1f      	cmp	r3, #31
 8017114:	d80c      	bhi.n	8017130 <_ZN27core_utils_RegisterFunctionIhA8_fE7executeEPhS2_+0x30>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 8017116:	7ffb      	ldrb	r3, [r7, #31]
 8017118:	68ba      	ldr	r2, [r7, #8]
 801711a:	441a      	add	r2, r3
 801711c:	7ffb      	ldrb	r3, [r7, #31]
 801711e:	7811      	ldrb	r1, [r2, #0]
 8017120:	68fa      	ldr	r2, [r7, #12]
 8017122:	4413      	add	r3, r2
 8017124:	460a      	mov	r2, r1
 8017126:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < (sizeof(input_t)); i++) {
 8017128:	7ffb      	ldrb	r3, [r7, #31]
 801712a:	3301      	adds	r3, #1
 801712c:	77fb      	strb	r3, [r7, #31]
 801712e:	e7ef      	b.n	8017110 <_ZN27core_utils_RegisterFunctionIhA8_fE7executeEPhS2_+0x10>
		output_t out = this->execute(this->input_data_union.data);
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	3308      	adds	r3, #8
 8017134:	4619      	mov	r1, r3
 8017136:	68f8      	ldr	r0, [r7, #12]
 8017138:	f000 fab6 	bl	80176a8 <_ZN27core_utils_RegisterFunctionIhA8_fE7executeEPf>
 801713c:	4603      	mov	r3, r0
 801713e:	75fb      	strb	r3, [r7, #23]
		uint8_t *data_ptr = (uint8_t*) &out;
 8017140:	f107 0317 	add.w	r3, r7, #23
 8017144:	61bb      	str	r3, [r7, #24]
		for (uint8_t i = 0; i < sizeof(output_t); i++) {
 8017146:	2300      	movs	r3, #0
 8017148:	77bb      	strb	r3, [r7, #30]
 801714a:	7fbb      	ldrb	r3, [r7, #30]
 801714c:	2b00      	cmp	r3, #0
 801714e:	d10b      	bne.n	8017168 <_ZN27core_utils_RegisterFunctionIhA8_fE7executeEPhS2_+0x68>
			output_buffer[i] = data_ptr[i];
 8017150:	7fbb      	ldrb	r3, [r7, #30]
 8017152:	69ba      	ldr	r2, [r7, #24]
 8017154:	441a      	add	r2, r3
 8017156:	7fbb      	ldrb	r3, [r7, #30]
 8017158:	6879      	ldr	r1, [r7, #4]
 801715a:	440b      	add	r3, r1
 801715c:	7812      	ldrb	r2, [r2, #0]
 801715e:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_t); i++) {
 8017160:	7fbb      	ldrb	r3, [r7, #30]
 8017162:	3301      	adds	r3, #1
 8017164:	77bb      	strb	r3, [r7, #30]
 8017166:	e7f0      	b.n	801714a <_ZN27core_utils_RegisterFunctionIhA8_fE7executeEPhS2_+0x4a>
		return sizeof(output_t);
 8017168:	2301      	movs	r3, #1
	}
 801716a:	4618      	mov	r0, r3
 801716c:	3720      	adds	r7, #32
 801716e:	46bd      	mov	sp, r7
 8017170:	bd80      	pop	{r7, pc}

08017172 <_ZN27core_utils_RegisterFunctionIhA8_fE7getTypeEv>:
	register_entry_type getType() {
 8017172:	b480      	push	{r7}
 8017174:	b083      	sub	sp, #12
 8017176:	af00      	add	r7, sp, #0
 8017178:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_FUNCTION;
 801717a:	2302      	movs	r3, #2
	}
 801717c:	4618      	mov	r0, r3
 801717e:	370c      	adds	r7, #12
 8017180:	46bd      	mov	sp, r7
 8017182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017186:	4770      	bx	lr

08017188 <_ZN27core_utils_RegisterFunctionIhA8_fE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 8017188:	b480      	push	{r7}
 801718a:	b083      	sub	sp, #12
 801718c:	af00      	add	r7, sp, #0
 801718e:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_READWRITE;
 8017190:	2302      	movs	r3, #2
	}
 8017192:	4618      	mov	r0, r3
 8017194:	370c      	adds	r7, #12
 8017196:	46bd      	mov	sp, r7
 8017198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801719c:	4770      	bx	lr

0801719e <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7getSizeEv>:
	uint8_t getSize() {
 801719e:	b480      	push	{r7}
 80171a0:	b083      	sub	sp, #12
 80171a2:	af00      	add	r7, sp, #0
 80171a4:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 80171a6:	2306      	movs	r3, #6
	}
 80171a8:	4618      	mov	r0, r3
 80171aa:	370c      	adds	r7, #12
 80171ac:	46bd      	mov	sp, r7
 80171ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b2:	4770      	bx	lr

080171b4 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE12getInputSizeEv>:
	uint8_t getInputSize() {
 80171b4:	b480      	push	{r7}
 80171b6:	b083      	sub	sp, #12
 80171b8:	af00      	add	r7, sp, #0
 80171ba:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 80171bc:	2306      	movs	r3, #6
	}
 80171be:	4618      	mov	r0, r3
 80171c0:	370c      	adds	r7, #12
 80171c2:	46bd      	mov	sp, r7
 80171c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171c8:	4770      	bx	lr

080171ca <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE13getOutputSizeEv>:
	uint8_t getOutputSize() {
 80171ca:	b480      	push	{r7}
 80171cc:	b083      	sub	sp, #12
 80171ce:	af00      	add	r7, sp, #0
 80171d0:	6078      	str	r0, [r7, #4]
		return sizeof(output_t);
 80171d2:	2301      	movs	r3, #1
	}
 80171d4:	4618      	mov	r0, r3
 80171d6:	370c      	adds	r7, #12
 80171d8:	46bd      	mov	sp, r7
 80171da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171de:	4770      	bx	lr

080171e0 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7executeEPhS2_>:
	uint8_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 80171e0:	b580      	push	{r7, lr}
 80171e2:	b088      	sub	sp, #32
 80171e4:	af00      	add	r7, sp, #0
 80171e6:	60f8      	str	r0, [r7, #12]
 80171e8:	60b9      	str	r1, [r7, #8]
 80171ea:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < (sizeof(input_t)); i++) {
 80171ec:	2300      	movs	r3, #0
 80171ee:	77fb      	strb	r3, [r7, #31]
 80171f0:	7ffb      	ldrb	r3, [r7, #31]
 80171f2:	2b05      	cmp	r3, #5
 80171f4:	d80c      	bhi.n	8017210 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7executeEPhS2_+0x30>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 80171f6:	7ffb      	ldrb	r3, [r7, #31]
 80171f8:	68ba      	ldr	r2, [r7, #8]
 80171fa:	441a      	add	r2, r3
 80171fc:	7ffb      	ldrb	r3, [r7, #31]
 80171fe:	7811      	ldrb	r1, [r2, #0]
 8017200:	68fa      	ldr	r2, [r7, #12]
 8017202:	4413      	add	r3, r2
 8017204:	460a      	mov	r2, r1
 8017206:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < (sizeof(input_t)); i++) {
 8017208:	7ffb      	ldrb	r3, [r7, #31]
 801720a:	3301      	adds	r3, #1
 801720c:	77fb      	strb	r3, [r7, #31]
 801720e:	e7ef      	b.n	80171f0 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7executeEPhS2_+0x10>
		output_t out = this->execute(this->input_data_union.data);
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8017216:	4611      	mov	r1, r2
 8017218:	895a      	ldrh	r2, [r3, #10]
 801721a:	2300      	movs	r3, #0
 801721c:	f362 030f 	bfi	r3, r2, #0, #16
 8017220:	461a      	mov	r2, r3
 8017222:	68f8      	ldr	r0, [r7, #12]
 8017224:	f000 fa56 	bl	80176d4 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7executeES0_>
 8017228:	4603      	mov	r3, r0
 801722a:	75fb      	strb	r3, [r7, #23]
		uint8_t *data_ptr = (uint8_t*) &out;
 801722c:	f107 0317 	add.w	r3, r7, #23
 8017230:	61bb      	str	r3, [r7, #24]
		for (uint8_t i = 0; i < sizeof(output_t); i++) {
 8017232:	2300      	movs	r3, #0
 8017234:	77bb      	strb	r3, [r7, #30]
 8017236:	7fbb      	ldrb	r3, [r7, #30]
 8017238:	2b00      	cmp	r3, #0
 801723a:	d10b      	bne.n	8017254 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7executeEPhS2_+0x74>
			output_buffer[i] = data_ptr[i];
 801723c:	7fbb      	ldrb	r3, [r7, #30]
 801723e:	69ba      	ldr	r2, [r7, #24]
 8017240:	441a      	add	r2, r3
 8017242:	7fbb      	ldrb	r3, [r7, #30]
 8017244:	6879      	ldr	r1, [r7, #4]
 8017246:	440b      	add	r3, r1
 8017248:	7812      	ldrb	r2, [r2, #0]
 801724a:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_t); i++) {
 801724c:	7fbb      	ldrb	r3, [r7, #30]
 801724e:	3301      	adds	r3, #1
 8017250:	77bb      	strb	r3, [r7, #30]
 8017252:	e7f0      	b.n	8017236 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7executeEPhS2_+0x56>
		return sizeof(output_t);
 8017254:	2301      	movs	r3, #1
	}
 8017256:	4618      	mov	r0, r3
 8017258:	3720      	adds	r7, #32
 801725a:	46bd      	mov	sp, r7
 801725c:	bd80      	pop	{r7, pc}

0801725e <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7getTypeEv>:
	register_entry_type getType() {
 801725e:	b480      	push	{r7}
 8017260:	b083      	sub	sp, #12
 8017262:	af00      	add	r7, sp, #0
 8017264:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_FUNCTION;
 8017266:	2302      	movs	r3, #2
	}
 8017268:	4618      	mov	r0, r3
 801726a:	370c      	adds	r7, #12
 801726c:	46bd      	mov	sp, r7
 801726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017272:	4770      	bx	lr

08017274 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 8017274:	b480      	push	{r7}
 8017276:	b083      	sub	sp, #12
 8017278:	af00      	add	r7, sp, #0
 801727a:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_READWRITE;
 801727c:	2302      	movs	r3, #2
	}
 801727e:	4618      	mov	r0, r3
 8017280:	370c      	adds	r7, #12
 8017282:	46bd      	mov	sp, r7
 8017284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017288:	4770      	bx	lr

0801728a <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7getSizeEv>:
	uint8_t getSize() {
 801728a:	b480      	push	{r7}
 801728c:	b083      	sub	sp, #12
 801728e:	af00      	add	r7, sp, #0
 8017290:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 8017292:	2301      	movs	r3, #1
	}
 8017294:	4618      	mov	r0, r3
 8017296:	370c      	adds	r7, #12
 8017298:	46bd      	mov	sp, r7
 801729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801729e:	4770      	bx	lr

080172a0 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE12getInputSizeEv>:
	uint8_t getInputSize() {
 80172a0:	b480      	push	{r7}
 80172a2:	b083      	sub	sp, #12
 80172a4:	af00      	add	r7, sp, #0
 80172a6:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 80172a8:	2301      	movs	r3, #1
	}
 80172aa:	4618      	mov	r0, r3
 80172ac:	370c      	adds	r7, #12
 80172ae:	46bd      	mov	sp, r7
 80172b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b4:	4770      	bx	lr

080172b6 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE13getOutputSizeEv>:
	uint8_t getOutputSize() {
 80172b6:	b480      	push	{r7}
 80172b8:	b083      	sub	sp, #12
 80172ba:	af00      	add	r7, sp, #0
 80172bc:	6078      	str	r0, [r7, #4]
		return sizeof(output_t);
 80172be:	2301      	movs	r3, #1
	}
 80172c0:	4618      	mov	r0, r3
 80172c2:	370c      	adds	r7, #12
 80172c4:	46bd      	mov	sp, r7
 80172c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ca:	4770      	bx	lr

080172cc <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7executeEPhS2_>:
	uint8_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 80172cc:	b580      	push	{r7, lr}
 80172ce:	b088      	sub	sp, #32
 80172d0:	af00      	add	r7, sp, #0
 80172d2:	60f8      	str	r0, [r7, #12]
 80172d4:	60b9      	str	r1, [r7, #8]
 80172d6:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < (sizeof(input_t)); i++) {
 80172d8:	2300      	movs	r3, #0
 80172da:	77fb      	strb	r3, [r7, #31]
 80172dc:	7ffb      	ldrb	r3, [r7, #31]
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d10c      	bne.n	80172fc <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7executeEPhS2_+0x30>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 80172e2:	7ffb      	ldrb	r3, [r7, #31]
 80172e4:	68ba      	ldr	r2, [r7, #8]
 80172e6:	441a      	add	r2, r3
 80172e8:	7ffb      	ldrb	r3, [r7, #31]
 80172ea:	7811      	ldrb	r1, [r2, #0]
 80172ec:	68fa      	ldr	r2, [r7, #12]
 80172ee:	4413      	add	r3, r2
 80172f0:	460a      	mov	r2, r1
 80172f2:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < (sizeof(input_t)); i++) {
 80172f4:	7ffb      	ldrb	r3, [r7, #31]
 80172f6:	3301      	adds	r3, #1
 80172f8:	77fb      	strb	r3, [r7, #31]
 80172fa:	e7ef      	b.n	80172dc <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7executeEPhS2_+0x10>
		output_t out = this->execute(this->input_data_union.data);
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	799b      	ldrb	r3, [r3, #6]
 8017300:	4619      	mov	r1, r3
 8017302:	68f8      	ldr	r0, [r7, #12]
 8017304:	f000 f9ff 	bl	8017706 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7executeES0_>
 8017308:	4603      	mov	r3, r0
 801730a:	75fb      	strb	r3, [r7, #23]
		uint8_t *data_ptr = (uint8_t*) &out;
 801730c:	f107 0317 	add.w	r3, r7, #23
 8017310:	61bb      	str	r3, [r7, #24]
		for (uint8_t i = 0; i < sizeof(output_t); i++) {
 8017312:	2300      	movs	r3, #0
 8017314:	77bb      	strb	r3, [r7, #30]
 8017316:	7fbb      	ldrb	r3, [r7, #30]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d10b      	bne.n	8017334 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7executeEPhS2_+0x68>
			output_buffer[i] = data_ptr[i];
 801731c:	7fbb      	ldrb	r3, [r7, #30]
 801731e:	69ba      	ldr	r2, [r7, #24]
 8017320:	441a      	add	r2, r3
 8017322:	7fbb      	ldrb	r3, [r7, #30]
 8017324:	6879      	ldr	r1, [r7, #4]
 8017326:	440b      	add	r3, r1
 8017328:	7812      	ldrb	r2, [r2, #0]
 801732a:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_t); i++) {
 801732c:	7fbb      	ldrb	r3, [r7, #30]
 801732e:	3301      	adds	r3, #1
 8017330:	77bb      	strb	r3, [r7, #30]
 8017332:	e7f0      	b.n	8017316 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7executeEPhS2_+0x4a>
		return sizeof(output_t);
 8017334:	2301      	movs	r3, #1
	}
 8017336:	4618      	mov	r0, r3
 8017338:	3720      	adds	r7, #32
 801733a:	46bd      	mov	sp, r7
 801733c:	bd80      	pop	{r7, pc}

0801733e <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7getTypeEv>:
	register_entry_type getType() {
 801733e:	b480      	push	{r7}
 8017340:	b083      	sub	sp, #12
 8017342:	af00      	add	r7, sp, #0
 8017344:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_FUNCTION;
 8017346:	2302      	movs	r3, #2
	}
 8017348:	4618      	mov	r0, r3
 801734a:	370c      	adds	r7, #12
 801734c:	46bd      	mov	sp, r7
 801734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017352:	4770      	bx	lr

08017354 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 8017354:	b480      	push	{r7}
 8017356:	b083      	sub	sp, #12
 8017358:	af00      	add	r7, sp, #0
 801735a:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_READWRITE;
 801735c:	2302      	movs	r3, #2
	}
 801735e:	4618      	mov	r0, r3
 8017360:	370c      	adds	r7, #12
 8017362:	46bd      	mov	sp, r7
 8017364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017368:	4770      	bx	lr

0801736a <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeEPv>:
	void write(void *value) {
 801736a:	b580      	push	{r7, lr}
 801736c:	b084      	sub	sp, #16
 801736e:	af00      	add	r7, sp, #0
 8017370:	6078      	str	r0, [r7, #4]
 8017372:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	7a9b      	ldrb	r3, [r3, #10]
 8017378:	2b00      	cmp	r3, #0
 801737a:	d00c      	beq.n	8017396 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeEPv+0x2c>
		T *value_typed = (T*) value;
 801737c:	683b      	ldr	r3, [r7, #0]
 801737e:	60fb      	str	r3, [r7, #12]
		*(this->data) = *value_typed;
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	68db      	ldr	r3, [r3, #12]
 8017384:	68fa      	ldr	r2, [r7, #12]
 8017386:	7812      	ldrb	r2, [r2, #0]
 8017388:	701a      	strb	r2, [r3, #0]
		this->write_function.call();
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	3310      	adds	r3, #16
 801738e:	4618      	mov	r0, r3
 8017390:	f7fa feb6 	bl	8012100 <_ZN8Callback4callEv>
 8017394:	e000      	b.n	8017398 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeEPv+0x2e>
			return;
 8017396:	bf00      	nop
	}
 8017398:	3710      	adds	r7, #16
 801739a:	46bd      	mov	sp, r7
 801739c:	bd80      	pop	{r7, pc}

0801739e <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeEPh>:
	void write(uint8_t *data) { // TODO: not good
 801739e:	b580      	push	{r7, lr}
 80173a0:	b084      	sub	sp, #16
 80173a2:	af00      	add	r7, sp, #0
 80173a4:	6078      	str	r0, [r7, #4]
 80173a6:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	7a9b      	ldrb	r3, [r3, #10]
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d018      	beq.n	80173e2 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeEPh+0x44>
		for (uint8_t i = 0; i < sizeof(T); i++) {
 80173b0:	2300      	movs	r3, #0
 80173b2:	73fb      	strb	r3, [r7, #15]
 80173b4:	7bfb      	ldrb	r3, [r7, #15]
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d10c      	bne.n	80173d4 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeEPh+0x36>
			this->data_union.data_bytes[i] = data[i];
 80173ba:	7bfb      	ldrb	r3, [r7, #15]
 80173bc:	683a      	ldr	r2, [r7, #0]
 80173be:	441a      	add	r2, r3
 80173c0:	7bfb      	ldrb	r3, [r7, #15]
 80173c2:	7811      	ldrb	r1, [r2, #0]
 80173c4:	687a      	ldr	r2, [r7, #4]
 80173c6:	4413      	add	r3, r2
 80173c8:	460a      	mov	r2, r1
 80173ca:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 80173cc:	7bfb      	ldrb	r3, [r7, #15]
 80173ce:	3301      	adds	r3, #1
 80173d0:	73fb      	strb	r3, [r7, #15]
 80173d2:	e7ef      	b.n	80173b4 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeEPh+0x16>
		this->write(this->data_union.data);
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	799b      	ldrb	r3, [r3, #6]
 80173d8:	4619      	mov	r1, r3
 80173da:	6878      	ldr	r0, [r7, #4]
 80173dc:	f000 f9aa 	bl	8017734 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeES0_>
 80173e0:	e000      	b.n	80173e4 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeEPh+0x46>
			return;
 80173e2:	bf00      	nop
	}
 80173e4:	3710      	adds	r7, #16
 80173e6:	46bd      	mov	sp, r7
 80173e8:	bd80      	pop	{r7, pc}

080173ea <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE9readBytesEPh>:
	uint8_t readBytes(uint8_t *data) {
 80173ea:	b480      	push	{r7}
 80173ec:	b085      	sub	sp, #20
 80173ee:	af00      	add	r7, sp, #0
 80173f0:	6078      	str	r0, [r7, #4]
 80173f2:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_WRITE) {
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	7a9b      	ldrb	r3, [r3, #10]
 80173f8:	2b01      	cmp	r3, #1
 80173fa:	d101      	bne.n	8017400 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE9readBytesEPh+0x16>
			return 0;
 80173fc:	2300      	movs	r3, #0
 80173fe:	e016      	b.n	801742e <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE9readBytesEPh+0x44>
		this->data_union.data = *(this->data);
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	68db      	ldr	r3, [r3, #12]
 8017404:	781a      	ldrb	r2, [r3, #0]
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 801740a:	2300      	movs	r3, #0
 801740c:	73fb      	strb	r3, [r7, #15]
 801740e:	7bfb      	ldrb	r3, [r7, #15]
 8017410:	2b00      	cmp	r3, #0
 8017412:	d10b      	bne.n	801742c <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE9readBytesEPh+0x42>
			data[i] = this->data_union.data_bytes[i];
 8017414:	7bfa      	ldrb	r2, [r7, #15]
 8017416:	7bfb      	ldrb	r3, [r7, #15]
 8017418:	6839      	ldr	r1, [r7, #0]
 801741a:	440b      	add	r3, r1
 801741c:	6879      	ldr	r1, [r7, #4]
 801741e:	440a      	add	r2, r1
 8017420:	7992      	ldrb	r2, [r2, #6]
 8017422:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 8017424:	7bfb      	ldrb	r3, [r7, #15]
 8017426:	3301      	adds	r3, #1
 8017428:	73fb      	strb	r3, [r7, #15]
 801742a:	e7f0      	b.n	801740e <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE9readBytesEPh+0x24>
		return sizeof(T);
 801742c:	2301      	movs	r3, #1
	}
 801742e:	4618      	mov	r0, r3
 8017430:	3714      	adds	r7, #20
 8017432:	46bd      	mov	sp, r7
 8017434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017438:	4770      	bx	lr

0801743a <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE7getSizeEv>:
	uint8_t getSize() {
 801743a:	b480      	push	{r7}
 801743c:	b083      	sub	sp, #12
 801743e:	af00      	add	r7, sp, #0
 8017440:	6078      	str	r0, [r7, #4]
		return sizeof(T);
 8017442:	2301      	movs	r3, #1
	}
 8017444:	4618      	mov	r0, r3
 8017446:	370c      	adds	r7, #12
 8017448:	46bd      	mov	sp, r7
 801744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801744e:	4770      	bx	lr

08017450 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE7getTypeEv>:
	register_entry_type getType() {
 8017450:	b480      	push	{r7}
 8017452:	b083      	sub	sp, #12
 8017454:	af00      	add	r7, sp, #0
 8017456:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_DATA;
 8017458:	2301      	movs	r3, #1
	}
 801745a:	4618      	mov	r0, r3
 801745c:	370c      	adds	r7, #12
 801745e:	46bd      	mov	sp, r7
 8017460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017464:	4770      	bx	lr

08017466 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 8017466:	b480      	push	{r7}
 8017468:	b083      	sub	sp, #12
 801746a:	af00      	add	r7, sp, #0
 801746c:	6078      	str	r0, [r7, #4]
		return this->rw;
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	7a9b      	ldrb	r3, [r3, #10]
	}
 8017472:	4618      	mov	r0, r3
 8017474:	370c      	adds	r7, #12
 8017476:	46bd      	mov	sp, r7
 8017478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801747c:	4770      	bx	lr

0801747e <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeEPv>:
	void write(void *value) {
 801747e:	b580      	push	{r7, lr}
 8017480:	b084      	sub	sp, #16
 8017482:	af00      	add	r7, sp, #0
 8017484:	6078      	str	r0, [r7, #4]
 8017486:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	7a9b      	ldrb	r3, [r3, #10]
 801748c:	2b00      	cmp	r3, #0
 801748e:	d00d      	beq.n	80174ac <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeEPv+0x2e>
		T *value_typed = (T*) value;
 8017490:	683b      	ldr	r3, [r7, #0]
 8017492:	60fb      	str	r3, [r7, #12]
		*(this->data) = *value_typed;
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	68db      	ldr	r3, [r3, #12]
 8017498:	68fa      	ldr	r2, [r7, #12]
 801749a:	f992 2000 	ldrsb.w	r2, [r2]
 801749e:	701a      	strb	r2, [r3, #0]
		this->write_function.call();
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	3310      	adds	r3, #16
 80174a4:	4618      	mov	r0, r3
 80174a6:	f7fa fe2b 	bl	8012100 <_ZN8Callback4callEv>
 80174aa:	e000      	b.n	80174ae <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeEPv+0x30>
			return;
 80174ac:	bf00      	nop
	}
 80174ae:	3710      	adds	r7, #16
 80174b0:	46bd      	mov	sp, r7
 80174b2:	bd80      	pop	{r7, pc}

080174b4 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeEPh>:
	void write(uint8_t *data) { // TODO: not good
 80174b4:	b580      	push	{r7, lr}
 80174b6:	b084      	sub	sp, #16
 80174b8:	af00      	add	r7, sp, #0
 80174ba:	6078      	str	r0, [r7, #4]
 80174bc:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	7a9b      	ldrb	r3, [r3, #10]
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d019      	beq.n	80174fa <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeEPh+0x46>
		for (uint8_t i = 0; i < sizeof(T); i++) {
 80174c6:	2300      	movs	r3, #0
 80174c8:	73fb      	strb	r3, [r7, #15]
 80174ca:	7bfb      	ldrb	r3, [r7, #15]
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d10c      	bne.n	80174ea <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeEPh+0x36>
			this->data_union.data_bytes[i] = data[i];
 80174d0:	7bfb      	ldrb	r3, [r7, #15]
 80174d2:	683a      	ldr	r2, [r7, #0]
 80174d4:	441a      	add	r2, r3
 80174d6:	7bfb      	ldrb	r3, [r7, #15]
 80174d8:	7811      	ldrb	r1, [r2, #0]
 80174da:	687a      	ldr	r2, [r7, #4]
 80174dc:	4413      	add	r3, r2
 80174de:	460a      	mov	r2, r1
 80174e0:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 80174e2:	7bfb      	ldrb	r3, [r7, #15]
 80174e4:	3301      	adds	r3, #1
 80174e6:	73fb      	strb	r3, [r7, #15]
 80174e8:	e7ef      	b.n	80174ca <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeEPh+0x16>
		this->write(this->data_union.data);
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80174f0:	4619      	mov	r1, r3
 80174f2:	6878      	ldr	r0, [r7, #4]
 80174f4:	f000 f936 	bl	8017764 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeES0_>
 80174f8:	e000      	b.n	80174fc <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeEPh+0x48>
			return;
 80174fa:	bf00      	nop
	}
 80174fc:	3710      	adds	r7, #16
 80174fe:	46bd      	mov	sp, r7
 8017500:	bd80      	pop	{r7, pc}

08017502 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE9readBytesEPh>:
	uint8_t readBytes(uint8_t *data) {
 8017502:	b480      	push	{r7}
 8017504:	b085      	sub	sp, #20
 8017506:	af00      	add	r7, sp, #0
 8017508:	6078      	str	r0, [r7, #4]
 801750a:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_WRITE) {
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	7a9b      	ldrb	r3, [r3, #10]
 8017510:	2b01      	cmp	r3, #1
 8017512:	d101      	bne.n	8017518 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE9readBytesEPh+0x16>
			return 0;
 8017514:	2300      	movs	r3, #0
 8017516:	e017      	b.n	8017548 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE9readBytesEPh+0x46>
		this->data_union.data = *(this->data);
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	68db      	ldr	r3, [r3, #12]
 801751c:	f993 2000 	ldrsb.w	r2, [r3]
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 8017524:	2300      	movs	r3, #0
 8017526:	73fb      	strb	r3, [r7, #15]
 8017528:	7bfb      	ldrb	r3, [r7, #15]
 801752a:	2b00      	cmp	r3, #0
 801752c:	d10b      	bne.n	8017546 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE9readBytesEPh+0x44>
			data[i] = this->data_union.data_bytes[i];
 801752e:	7bfa      	ldrb	r2, [r7, #15]
 8017530:	7bfb      	ldrb	r3, [r7, #15]
 8017532:	6839      	ldr	r1, [r7, #0]
 8017534:	440b      	add	r3, r1
 8017536:	6879      	ldr	r1, [r7, #4]
 8017538:	440a      	add	r2, r1
 801753a:	7992      	ldrb	r2, [r2, #6]
 801753c:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 801753e:	7bfb      	ldrb	r3, [r7, #15]
 8017540:	3301      	adds	r3, #1
 8017542:	73fb      	strb	r3, [r7, #15]
 8017544:	e7f0      	b.n	8017528 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE9readBytesEPh+0x26>
		return sizeof(T);
 8017546:	2301      	movs	r3, #1
	}
 8017548:	4618      	mov	r0, r3
 801754a:	3714      	adds	r7, #20
 801754c:	46bd      	mov	sp, r7
 801754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017552:	4770      	bx	lr

08017554 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE7getSizeEv>:
	uint8_t getSize() {
 8017554:	b480      	push	{r7}
 8017556:	b083      	sub	sp, #12
 8017558:	af00      	add	r7, sp, #0
 801755a:	6078      	str	r0, [r7, #4]
		return sizeof(T);
 801755c:	2301      	movs	r3, #1
	}
 801755e:	4618      	mov	r0, r3
 8017560:	370c      	adds	r7, #12
 8017562:	46bd      	mov	sp, r7
 8017564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017568:	4770      	bx	lr

0801756a <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE7getTypeEv>:
	register_entry_type getType() {
 801756a:	b480      	push	{r7}
 801756c:	b083      	sub	sp, #12
 801756e:	af00      	add	r7, sp, #0
 8017570:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_DATA;
 8017572:	2301      	movs	r3, #1
	}
 8017574:	4618      	mov	r0, r3
 8017576:	370c      	adds	r7, #12
 8017578:	46bd      	mov	sp, r7
 801757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801757e:	4770      	bx	lr

08017580 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 8017580:	b480      	push	{r7}
 8017582:	b083      	sub	sp, #12
 8017584:	af00      	add	r7, sp, #0
 8017586:	6078      	str	r0, [r7, #4]
		return this->rw;
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	7a9b      	ldrb	r3, [r3, #10]
	}
 801758c:	4618      	mov	r0, r3
 801758e:	370c      	adds	r7, #12
 8017590:	46bd      	mov	sp, r7
 8017592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017596:	4770      	bx	lr

08017598 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE7getSizeEv>:
	uint8_t getSize() {
 8017598:	b480      	push	{r7}
 801759a:	b083      	sub	sp, #12
 801759c:	af00      	add	r7, sp, #0
 801759e:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 80175a0:	2308      	movs	r3, #8
	}
 80175a2:	4618      	mov	r0, r3
 80175a4:	370c      	adds	r7, #12
 80175a6:	46bd      	mov	sp, r7
 80175a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ac:	4770      	bx	lr

080175ae <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE12getInputSizeEv>:
	uint8_t getInputSize() {
 80175ae:	b480      	push	{r7}
 80175b0:	b083      	sub	sp, #12
 80175b2:	af00      	add	r7, sp, #0
 80175b4:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 80175b6:	2308      	movs	r3, #8
	}
 80175b8:	4618      	mov	r0, r3
 80175ba:	370c      	adds	r7, #12
 80175bc:	46bd      	mov	sp, r7
 80175be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175c2:	4770      	bx	lr

080175c4 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE13getOutputSizeEv>:
	uint8_t getOutputSize() {
 80175c4:	b480      	push	{r7}
 80175c6:	b083      	sub	sp, #12
 80175c8:	af00      	add	r7, sp, #0
 80175ca:	6078      	str	r0, [r7, #4]
		return 0;
 80175cc:	2300      	movs	r3, #0
	}
 80175ce:	4618      	mov	r0, r3
 80175d0:	370c      	adds	r7, #12
 80175d2:	46bd      	mov	sp, r7
 80175d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175d8:	4770      	bx	lr

080175da <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE7executeEPhS2_>:
	uint8_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 80175da:	b580      	push	{r7, lr}
 80175dc:	b086      	sub	sp, #24
 80175de:	af00      	add	r7, sp, #0
 80175e0:	60f8      	str	r0, [r7, #12]
 80175e2:	60b9      	str	r1, [r7, #8]
 80175e4:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_t); i++) {
 80175e6:	2300      	movs	r3, #0
 80175e8:	75fb      	strb	r3, [r7, #23]
 80175ea:	7dfb      	ldrb	r3, [r7, #23]
 80175ec:	2b07      	cmp	r3, #7
 80175ee:	d80c      	bhi.n	801760a <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE7executeEPhS2_+0x30>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 80175f0:	7dfb      	ldrb	r3, [r7, #23]
 80175f2:	68ba      	ldr	r2, [r7, #8]
 80175f4:	441a      	add	r2, r3
 80175f6:	7dfb      	ldrb	r3, [r7, #23]
 80175f8:	7811      	ldrb	r1, [r2, #0]
 80175fa:	68fa      	ldr	r2, [r7, #12]
 80175fc:	4413      	add	r3, r2
 80175fe:	460a      	mov	r2, r1
 8017600:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(input_t); i++) {
 8017602:	7dfb      	ldrb	r3, [r7, #23]
 8017604:	3301      	adds	r3, #1
 8017606:	75fb      	strb	r3, [r7, #23]
 8017608:	e7ef      	b.n	80175ea <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE7executeEPhS2_+0x10>
		this->execute(this->input_data_union.data);
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	ed93 7a02 	vldr	s14, [r3, #8]
 8017610:	edd3 7a03 	vldr	s15, [r3, #12]
 8017614:	eeb0 0a47 	vmov.f32	s0, s14
 8017618:	eef0 0a67 	vmov.f32	s1, s15
 801761c:	68f8      	ldr	r0, [r7, #12]
 801761e:	f000 f8b9 	bl	8017794 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE7executeES0_>
		return 0;
 8017622:	2300      	movs	r3, #0
	}
 8017624:	4618      	mov	r0, r3
 8017626:	3718      	adds	r7, #24
 8017628:	46bd      	mov	sp, r7
 801762a:	bd80      	pop	{r7, pc}

0801762c <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE7getTypeEv>:
	register_entry_type getType() {
 801762c:	b480      	push	{r7}
 801762e:	b083      	sub	sp, #12
 8017630:	af00      	add	r7, sp, #0
 8017632:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_FUNCTION;
 8017634:	2302      	movs	r3, #2
	}
 8017636:	4618      	mov	r0, r3
 8017638:	370c      	adds	r7, #12
 801763a:	46bd      	mov	sp, r7
 801763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017640:	4770      	bx	lr

08017642 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 8017642:	b480      	push	{r7}
 8017644:	b083      	sub	sp, #12
 8017646:	af00      	add	r7, sp, #0
 8017648:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_READWRITE;
 801764a:	2302      	movs	r3, #2
	}
 801764c:	4618      	mov	r0, r3
 801764e:	370c      	adds	r7, #12
 8017650:	46bd      	mov	sp, r7
 8017652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017656:	4770      	bx	lr

08017658 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeES0_>:
	void write(T value) {
 8017658:	b084      	sub	sp, #16
 801765a:	b5b0      	push	{r4, r5, r7, lr}
 801765c:	b082      	sub	sp, #8
 801765e:	af00      	add	r7, sp, #0
 8017660:	6078      	str	r0, [r7, #4]
 8017662:	f107 001c 	add.w	r0, r7, #28
 8017666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		if (this->rw == REGISTER_ENTRY_READ) {
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017670:	2b00      	cmp	r3, #0
 8017672:	d012      	beq.n	801769a <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeES0_+0x42>
		*(this->data) = value;
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017678:	461d      	mov	r5, r3
 801767a:	f107 041c 	add.w	r4, r7, #28
 801767e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017680:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017684:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017686:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801768a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		this->write_function.call();
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	3344      	adds	r3, #68	; 0x44
 8017692:	4618      	mov	r0, r3
 8017694:	f7fa fd34 	bl	8012100 <_ZN8Callback4callEv>
 8017698:	e000      	b.n	801769c <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeES0_+0x44>
			return;
 801769a:	bf00      	nop
	}
 801769c:	3708      	adds	r7, #8
 801769e:	46bd      	mov	sp, r7
 80176a0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80176a4:	b004      	add	sp, #16
 80176a6:	4770      	bx	lr

080176a8 <_ZN27core_utils_RegisterFunctionIhA8_fE7executeEPf>:
	output_t execute(input_t argument) {
 80176a8:	b580      	push	{r7, lr}
 80176aa:	b082      	sub	sp, #8
 80176ac:	af00      	add	r7, sp, #0
 80176ae:	6078      	str	r0, [r7, #4]
 80176b0:	6039      	str	r1, [r7, #0]
		if (this->function.registered) {
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d007      	beq.n	80176cc <_ZN27core_utils_RegisterFunctionIhA8_fE7executeEPf+0x24>
			return this->function.call(argument);
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	332c      	adds	r3, #44	; 0x2c
 80176c0:	6839      	ldr	r1, [r7, #0]
 80176c2:	4618      	mov	r0, r3
 80176c4:	f000 f887 	bl	80177d6 <_ZN19core_utils_CallbackIhA8_fE4callEPf>
 80176c8:	4603      	mov	r3, r0
 80176ca:	e7ff      	b.n	80176cc <_ZN27core_utils_RegisterFunctionIhA8_fE7executeEPf+0x24>
	}
 80176cc:	4618      	mov	r0, r3
 80176ce:	3708      	adds	r7, #8
 80176d0:	46bd      	mov	sp, r7
 80176d2:	bd80      	pop	{r7, pc}

080176d4 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7executeES0_>:
	output_t execute(input_t argument) {
 80176d4:	b580      	push	{r7, lr}
 80176d6:	b084      	sub	sp, #16
 80176d8:	af00      	add	r7, sp, #0
 80176da:	60f8      	str	r0, [r7, #12]
 80176dc:	1d3b      	adds	r3, r7, #4
 80176de:	e883 0006 	stmia.w	r3, {r1, r2}
		if (this->function.registered) {
 80176e2:	68fb      	ldr	r3, [r7, #12]
 80176e4:	7d1b      	ldrb	r3, [r3, #20]
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d009      	beq.n	80176fe <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7executeES0_+0x2a>
			return this->function.call(argument);
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	f103 0010 	add.w	r0, r3, #16
 80176f0:	1d3b      	adds	r3, r7, #4
 80176f2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80176f6:	f000 f87e 	bl	80177f6 <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tE4callES0_>
 80176fa:	4603      	mov	r3, r0
 80176fc:	e7ff      	b.n	80176fe <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7executeES0_+0x2a>
	}
 80176fe:	4618      	mov	r0, r3
 8017700:	3710      	adds	r7, #16
 8017702:	46bd      	mov	sp, r7
 8017704:	bd80      	pop	{r7, pc}

08017706 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7executeES0_>:
	output_t execute(input_t argument) {
 8017706:	b580      	push	{r7, lr}
 8017708:	b082      	sub	sp, #8
 801770a:	af00      	add	r7, sp, #0
 801770c:	6078      	str	r0, [r7, #4]
 801770e:	460b      	mov	r3, r1
 8017710:	70fb      	strb	r3, [r7, #3]
		if (this->function.registered) {
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	7c1b      	ldrb	r3, [r3, #16]
 8017716:	2b00      	cmp	r3, #0
 8017718:	d008      	beq.n	801772c <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7executeES0_+0x26>
			return this->function.call(argument);
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	330c      	adds	r3, #12
 801771e:	78fa      	ldrb	r2, [r7, #3]
 8017720:	4611      	mov	r1, r2
 8017722:	4618      	mov	r0, r3
 8017724:	f000 f87b 	bl	801781e <_ZN19core_utils_CallbackIh20twipr_control_mode_tE4callES0_>
 8017728:	4603      	mov	r3, r0
 801772a:	e7ff      	b.n	801772c <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7executeES0_+0x26>
	}
 801772c:	4618      	mov	r0, r3
 801772e:	3708      	adds	r7, #8
 8017730:	46bd      	mov	sp, r7
 8017732:	bd80      	pop	{r7, pc}

08017734 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeES0_>:
	void write(T value) {
 8017734:	b580      	push	{r7, lr}
 8017736:	b082      	sub	sp, #8
 8017738:	af00      	add	r7, sp, #0
 801773a:	6078      	str	r0, [r7, #4]
 801773c:	460b      	mov	r3, r1
 801773e:	70fb      	strb	r3, [r7, #3]
		if (this->rw == REGISTER_ENTRY_READ) {
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	7a9b      	ldrb	r3, [r3, #10]
 8017744:	2b00      	cmp	r3, #0
 8017746:	d009      	beq.n	801775c <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeES0_+0x28>
		*(this->data) = value;
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	68db      	ldr	r3, [r3, #12]
 801774c:	78fa      	ldrb	r2, [r7, #3]
 801774e:	701a      	strb	r2, [r3, #0]
		this->write_function.call();
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	3310      	adds	r3, #16
 8017754:	4618      	mov	r0, r3
 8017756:	f7fa fcd3 	bl	8012100 <_ZN8Callback4callEv>
 801775a:	e000      	b.n	801775e <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeES0_+0x2a>
			return;
 801775c:	bf00      	nop
	}
 801775e:	3708      	adds	r7, #8
 8017760:	46bd      	mov	sp, r7
 8017762:	bd80      	pop	{r7, pc}

08017764 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeES0_>:
	void write(T value) {
 8017764:	b580      	push	{r7, lr}
 8017766:	b082      	sub	sp, #8
 8017768:	af00      	add	r7, sp, #0
 801776a:	6078      	str	r0, [r7, #4]
 801776c:	460b      	mov	r3, r1
 801776e:	70fb      	strb	r3, [r7, #3]
		if (this->rw == REGISTER_ENTRY_READ) {
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	7a9b      	ldrb	r3, [r3, #10]
 8017774:	2b00      	cmp	r3, #0
 8017776:	d009      	beq.n	801778c <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeES0_+0x28>
		*(this->data) = value;
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	68db      	ldr	r3, [r3, #12]
 801777c:	78fa      	ldrb	r2, [r7, #3]
 801777e:	701a      	strb	r2, [r3, #0]
		this->write_function.call();
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	3310      	adds	r3, #16
 8017784:	4618      	mov	r0, r3
 8017786:	f7fa fcbb 	bl	8012100 <_ZN8Callback4callEv>
 801778a:	e000      	b.n	801778e <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeES0_+0x2a>
			return;
 801778c:	bf00      	nop
	}
 801778e:	3708      	adds	r7, #8
 8017790:	46bd      	mov	sp, r7
 8017792:	bd80      	pop	{r7, pc}

08017794 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE7executeES0_>:
	void execute(input_t argument) {
 8017794:	b580      	push	{r7, lr}
 8017796:	b084      	sub	sp, #16
 8017798:	af00      	add	r7, sp, #0
 801779a:	60f8      	str	r0, [r7, #12]
 801779c:	eeb0 7a40 	vmov.f32	s14, s0
 80177a0:	eef0 7a60 	vmov.f32	s15, s1
 80177a4:	ed87 7a01 	vstr	s14, [r7, #4]
 80177a8:	edc7 7a02 	vstr	s15, [r7, #8]
		if (this->function.registered) {
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	7e1b      	ldrb	r3, [r3, #24]
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d00c      	beq.n	80177ce <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE7executeES0_+0x3a>
			this->function.call(argument);
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	3314      	adds	r3, #20
 80177b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80177bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80177c0:	eeb0 0a47 	vmov.f32	s0, s14
 80177c4:	eef0 0a67 	vmov.f32	s1, s15
 80177c8:	4618      	mov	r0, r3
 80177ca:	f000 f83a 	bl	8017842 <_ZN19core_utils_CallbackIv21twipr_control_input_tE4callES0_>
	}
 80177ce:	bf00      	nop
 80177d0:	3710      	adds	r7, #16
 80177d2:	46bd      	mov	sp, r7
 80177d4:	bd80      	pop	{r7, pc}

080177d6 <_ZN19core_utils_CallbackIhA8_fE4callEPf>:
	R call(A argument){
 80177d6:	b580      	push	{r7, lr}
 80177d8:	b082      	sub	sp, #8
 80177da:	af00      	add	r7, sp, #0
 80177dc:	6078      	str	r0, [r7, #4]
 80177de:	6039      	str	r1, [r7, #0]
		return this->_fp(argument);
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	3308      	adds	r3, #8
 80177e4:	6839      	ldr	r1, [r7, #0]
 80177e6:	4618      	mov	r0, r3
 80177e8:	f000 f848 	bl	801787c <_ZN26core_utils_FunctionPointerIhA8_fEclEPf>
 80177ec:	4603      	mov	r3, r0
	}
 80177ee:	4618      	mov	r0, r3
 80177f0:	3708      	adds	r7, #8
 80177f2:	46bd      	mov	sp, r7
 80177f4:	bd80      	pop	{r7, pc}

080177f6 <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tE4callES0_>:
	R call(A argument){
 80177f6:	b580      	push	{r7, lr}
 80177f8:	b084      	sub	sp, #16
 80177fa:	af00      	add	r7, sp, #0
 80177fc:	60f8      	str	r0, [r7, #12]
 80177fe:	1d3b      	adds	r3, r7, #4
 8017800:	e883 0006 	stmia.w	r3, {r1, r2}
		return this->_fp(argument);
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	f103 0008 	add.w	r0, r3, #8
 801780a:	1d3b      	adds	r3, r7, #4
 801780c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8017810:	f000 f842 	bl	8017898 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tEclES0_>
 8017814:	4603      	mov	r3, r0
	}
 8017816:	4618      	mov	r0, r3
 8017818:	3710      	adds	r7, #16
 801781a:	46bd      	mov	sp, r7
 801781c:	bd80      	pop	{r7, pc}

0801781e <_ZN19core_utils_CallbackIh20twipr_control_mode_tE4callES0_>:
	R call(A argument){
 801781e:	b580      	push	{r7, lr}
 8017820:	b082      	sub	sp, #8
 8017822:	af00      	add	r7, sp, #0
 8017824:	6078      	str	r0, [r7, #4]
 8017826:	460b      	mov	r3, r1
 8017828:	70fb      	strb	r3, [r7, #3]
		return this->_fp(argument);
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	3308      	adds	r3, #8
 801782e:	78fa      	ldrb	r2, [r7, #3]
 8017830:	4611      	mov	r1, r2
 8017832:	4618      	mov	r0, r3
 8017834:	f000 f842 	bl	80178bc <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEclES0_>
 8017838:	4603      	mov	r3, r0
	}
 801783a:	4618      	mov	r0, r3
 801783c:	3708      	adds	r7, #8
 801783e:	46bd      	mov	sp, r7
 8017840:	bd80      	pop	{r7, pc}

08017842 <_ZN19core_utils_CallbackIv21twipr_control_input_tE4callES0_>:
	R call(A argument){
 8017842:	b580      	push	{r7, lr}
 8017844:	b084      	sub	sp, #16
 8017846:	af00      	add	r7, sp, #0
 8017848:	60f8      	str	r0, [r7, #12]
 801784a:	eeb0 7a40 	vmov.f32	s14, s0
 801784e:	eef0 7a60 	vmov.f32	s15, s1
 8017852:	ed87 7a01 	vstr	s14, [r7, #4]
 8017856:	edc7 7a02 	vstr	s15, [r7, #8]
		return this->_fp(argument);
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	3308      	adds	r3, #8
 801785e:	ed97 7a01 	vldr	s14, [r7, #4]
 8017862:	edd7 7a02 	vldr	s15, [r7, #8]
 8017866:	eeb0 0a47 	vmov.f32	s0, s14
 801786a:	eef0 0a67 	vmov.f32	s1, s15
 801786e:	4618      	mov	r0, r3
 8017870:	f000 f834 	bl	80178dc <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tEclES0_>
 8017874:	bf00      	nop
	}
 8017876:	3710      	adds	r7, #16
 8017878:	46bd      	mov	sp, r7
 801787a:	bd80      	pop	{r7, pc}

0801787c <_ZN26core_utils_FunctionPointerIhA8_fEclEPf>:
    R operator ()(A1 a) {
 801787c:	b580      	push	{r7, lr}
 801787e:	b082      	sub	sp, #8
 8017880:	af00      	add	r7, sp, #0
 8017882:	6078      	str	r0, [r7, #4]
 8017884:	6039      	str	r1, [r7, #0]
        return call(a);
 8017886:	6839      	ldr	r1, [r7, #0]
 8017888:	6878      	ldr	r0, [r7, #4]
 801788a:	f000 f842 	bl	8017912 <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf>
 801788e:	4603      	mov	r3, r0
    }
 8017890:	4618      	mov	r0, r3
 8017892:	3708      	adds	r7, #8
 8017894:	46bd      	mov	sp, r7
 8017896:	bd80      	pop	{r7, pc}

08017898 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tEclES0_>:
    R operator ()(A1 a) {
 8017898:	b580      	push	{r7, lr}
 801789a:	b084      	sub	sp, #16
 801789c:	af00      	add	r7, sp, #0
 801789e:	60f8      	str	r0, [r7, #12]
 80178a0:	1d3b      	adds	r3, r7, #4
 80178a2:	e883 0006 	stmia.w	r3, {r1, r2}
        return call(a);
 80178a6:	1d3b      	adds	r3, r7, #4
 80178a8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80178ac:	68f8      	ldr	r0, [r7, #12]
 80178ae:	f000 f85a 	bl	8017966 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE4callES0_>
 80178b2:	4603      	mov	r3, r0
    }
 80178b4:	4618      	mov	r0, r3
 80178b6:	3710      	adds	r7, #16
 80178b8:	46bd      	mov	sp, r7
 80178ba:	bd80      	pop	{r7, pc}

080178bc <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEclES0_>:
    R operator ()(A1 a) {
 80178bc:	b580      	push	{r7, lr}
 80178be:	b082      	sub	sp, #8
 80178c0:	af00      	add	r7, sp, #0
 80178c2:	6078      	str	r0, [r7, #4]
 80178c4:	460b      	mov	r3, r1
 80178c6:	70fb      	strb	r3, [r7, #3]
        return call(a);
 80178c8:	78fb      	ldrb	r3, [r7, #3]
 80178ca:	4619      	mov	r1, r3
 80178cc:	6878      	ldr	r0, [r7, #4]
 80178ce:	f000 f879 	bl	80179c4 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_>
 80178d2:	4603      	mov	r3, r0
    }
 80178d4:	4618      	mov	r0, r3
 80178d6:	3708      	adds	r7, #8
 80178d8:	46bd      	mov	sp, r7
 80178da:	bd80      	pop	{r7, pc}

080178dc <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tEclES0_>:
    R operator ()(A1 a) {
 80178dc:	b580      	push	{r7, lr}
 80178de:	b084      	sub	sp, #16
 80178e0:	af00      	add	r7, sp, #0
 80178e2:	60f8      	str	r0, [r7, #12]
 80178e4:	eeb0 7a40 	vmov.f32	s14, s0
 80178e8:	eef0 7a60 	vmov.f32	s15, s1
 80178ec:	ed87 7a01 	vstr	s14, [r7, #4]
 80178f0:	edc7 7a02 	vstr	s15, [r7, #8]
        return call(a);
 80178f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80178f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80178fc:	eeb0 0a47 	vmov.f32	s0, s14
 8017900:	eef0 0a67 	vmov.f32	s1, s15
 8017904:	68f8      	ldr	r0, [r7, #12]
 8017906:	f000 f889 	bl	8017a1c <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE4callES0_>
 801790a:	bf00      	nop
    }
 801790c:	3710      	adds	r7, #16
 801790e:	46bd      	mov	sp, r7
 8017910:	bd80      	pop	{r7, pc}

08017912 <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf>:
    R call(A1 a) {
 8017912:	b580      	push	{r7, lr}
 8017914:	b082      	sub	sp, #8
 8017916:	af00      	add	r7, sp, #0
 8017918:	6078      	str	r0, [r7, #4]
 801791a:	6039      	str	r1, [r7, #0]
        if (_membercaller == 0 && _p.function) {
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	695b      	ldr	r3, [r3, #20]
 8017920:	2b00      	cmp	r3, #0
 8017922:	d109      	bne.n	8017938 <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x26>
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	2b00      	cmp	r3, #0
 801792a:	d005      	beq.n	8017938 <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x26>
           return _p.function(a);
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	681b      	ldr	r3, [r3, #0]
 8017930:	6838      	ldr	r0, [r7, #0]
 8017932:	4798      	blx	r3
 8017934:	4603      	mov	r3, r0
 8017936:	e012      	b.n	801795e <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x4c>
        } else if (_membercaller && _p.object) {
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	695b      	ldr	r3, [r3, #20]
 801793c:	2b00      	cmp	r3, #0
 801793e:	d00d      	beq.n	801795c <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x4a>
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	681b      	ldr	r3, [r3, #0]
 8017944:	2b00      	cmp	r3, #0
 8017946:	d009      	beq.n	801795c <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x4a>
           return _membercaller(_p.object, _member, a);
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	695b      	ldr	r3, [r3, #20]
 801794c:	687a      	ldr	r2, [r7, #4]
 801794e:	6810      	ldr	r0, [r2, #0]
 8017950:	687a      	ldr	r2, [r7, #4]
 8017952:	1d11      	adds	r1, r2, #4
 8017954:	683a      	ldr	r2, [r7, #0]
 8017956:	4798      	blx	r3
 8017958:	4603      	mov	r3, r0
 801795a:	e000      	b.n	801795e <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x4c>
        return (R)0;
 801795c:	2300      	movs	r3, #0
    }
 801795e:	4618      	mov	r0, r3
 8017960:	3708      	adds	r7, #8
 8017962:	46bd      	mov	sp, r7
 8017964:	bd80      	pop	{r7, pc}

08017966 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE4callES0_>:
    R call(A1 a) {
 8017966:	b590      	push	{r4, r7, lr}
 8017968:	b085      	sub	sp, #20
 801796a:	af00      	add	r7, sp, #0
 801796c:	60f8      	str	r0, [r7, #12]
 801796e:	1d3b      	adds	r3, r7, #4
 8017970:	e883 0006 	stmia.w	r3, {r1, r2}
        if (_membercaller == 0 && _p.function) {
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	695b      	ldr	r3, [r3, #20]
 8017978:	2b00      	cmp	r3, #0
 801797a:	d10b      	bne.n	8017994 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE4callES0_+0x2e>
 801797c:	68fb      	ldr	r3, [r7, #12]
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	2b00      	cmp	r3, #0
 8017982:	d007      	beq.n	8017994 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE4callES0_+0x2e>
           return _p.function(a);
 8017984:	68fb      	ldr	r3, [r7, #12]
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	1d3a      	adds	r2, r7, #4
 801798a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801798e:	4798      	blx	r3
 8017990:	4603      	mov	r3, r0
 8017992:	e013      	b.n	80179bc <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE4callES0_+0x56>
        } else if (_membercaller && _p.object) {
 8017994:	68fb      	ldr	r3, [r7, #12]
 8017996:	695b      	ldr	r3, [r3, #20]
 8017998:	2b00      	cmp	r3, #0
 801799a:	d00e      	beq.n	80179ba <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE4callES0_+0x54>
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d00a      	beq.n	80179ba <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE4callES0_+0x54>
           return _membercaller(_p.object, _member, a);
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	695c      	ldr	r4, [r3, #20]
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	6818      	ldr	r0, [r3, #0]
 80179ac:	68fb      	ldr	r3, [r7, #12]
 80179ae:	1d19      	adds	r1, r3, #4
 80179b0:	1d3b      	adds	r3, r7, #4
 80179b2:	cb0c      	ldmia	r3, {r2, r3}
 80179b4:	47a0      	blx	r4
 80179b6:	4603      	mov	r3, r0
 80179b8:	e000      	b.n	80179bc <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE4callES0_+0x56>
        return (R)0;
 80179ba:	2300      	movs	r3, #0
    }
 80179bc:	4618      	mov	r0, r3
 80179be:	3714      	adds	r7, #20
 80179c0:	46bd      	mov	sp, r7
 80179c2:	bd90      	pop	{r4, r7, pc}

080179c4 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_>:
    R call(A1 a) {
 80179c4:	b580      	push	{r7, lr}
 80179c6:	b082      	sub	sp, #8
 80179c8:	af00      	add	r7, sp, #0
 80179ca:	6078      	str	r0, [r7, #4]
 80179cc:	460b      	mov	r3, r1
 80179ce:	70fb      	strb	r3, [r7, #3]
        if (_membercaller == 0 && _p.function) {
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	695b      	ldr	r3, [r3, #20]
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d10a      	bne.n	80179ee <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x2a>
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d006      	beq.n	80179ee <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x2a>
           return _p.function(a);
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	681b      	ldr	r3, [r3, #0]
 80179e4:	78fa      	ldrb	r2, [r7, #3]
 80179e6:	4610      	mov	r0, r2
 80179e8:	4798      	blx	r3
 80179ea:	4603      	mov	r3, r0
 80179ec:	e012      	b.n	8017a14 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x50>
        } else if (_membercaller && _p.object) {
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	695b      	ldr	r3, [r3, #20]
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	d00d      	beq.n	8017a12 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x4e>
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d009      	beq.n	8017a12 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x4e>
           return _membercaller(_p.object, _member, a);
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	695b      	ldr	r3, [r3, #20]
 8017a02:	687a      	ldr	r2, [r7, #4]
 8017a04:	6810      	ldr	r0, [r2, #0]
 8017a06:	687a      	ldr	r2, [r7, #4]
 8017a08:	1d11      	adds	r1, r2, #4
 8017a0a:	78fa      	ldrb	r2, [r7, #3]
 8017a0c:	4798      	blx	r3
 8017a0e:	4603      	mov	r3, r0
 8017a10:	e000      	b.n	8017a14 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x50>
        return (R)0;
 8017a12:	2300      	movs	r3, #0
    }
 8017a14:	4618      	mov	r0, r3
 8017a16:	3708      	adds	r7, #8
 8017a18:	46bd      	mov	sp, r7
 8017a1a:	bd80      	pop	{r7, pc}

08017a1c <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE4callES0_>:
    R call(A1 a) {
 8017a1c:	b580      	push	{r7, lr}
 8017a1e:	b084      	sub	sp, #16
 8017a20:	af00      	add	r7, sp, #0
 8017a22:	60f8      	str	r0, [r7, #12]
 8017a24:	eeb0 7a40 	vmov.f32	s14, s0
 8017a28:	eef0 7a60 	vmov.f32	s15, s1
 8017a2c:	ed87 7a01 	vstr	s14, [r7, #4]
 8017a30:	edc7 7a02 	vstr	s15, [r7, #8]
        if (_membercaller == 0 && _p.function) {
 8017a34:	68fb      	ldr	r3, [r7, #12]
 8017a36:	695b      	ldr	r3, [r3, #20]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d10f      	bne.n	8017a5c <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE4callES0_+0x40>
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d00b      	beq.n	8017a5c <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE4callES0_+0x40>
           return _p.function(a);
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	ed97 7a01 	vldr	s14, [r7, #4]
 8017a4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8017a50:	eeb0 0a47 	vmov.f32	s0, s14
 8017a54:	eef0 0a67 	vmov.f32	s1, s15
 8017a58:	4798      	blx	r3
 8017a5a:	e019      	b.n	8017a90 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE4callES0_+0x74>
        } else if (_membercaller && _p.object) {
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	695b      	ldr	r3, [r3, #20]
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d014      	beq.n	8017a8e <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE4callES0_+0x72>
 8017a64:	68fb      	ldr	r3, [r7, #12]
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d010      	beq.n	8017a8e <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE4callES0_+0x72>
           return _membercaller(_p.object, _member, a);
 8017a6c:	68fb      	ldr	r3, [r7, #12]
 8017a6e:	695b      	ldr	r3, [r3, #20]
 8017a70:	68fa      	ldr	r2, [r7, #12]
 8017a72:	6810      	ldr	r0, [r2, #0]
 8017a74:	68fa      	ldr	r2, [r7, #12]
 8017a76:	3204      	adds	r2, #4
 8017a78:	ed97 7a01 	vldr	s14, [r7, #4]
 8017a7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8017a80:	eeb0 0a47 	vmov.f32	s0, s14
 8017a84:	eef0 0a67 	vmov.f32	s1, s15
 8017a88:	4611      	mov	r1, r2
 8017a8a:	4798      	blx	r3
 8017a8c:	e000      	b.n	8017a90 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE4callES0_+0x74>
        return (R)0;
 8017a8e:	bf00      	nop
    }
 8017a90:	3710      	adds	r7, #16
 8017a92:	46bd      	mov	sp, r7
 8017a94:	bd80      	pop	{r7, pc}

08017a96 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8017a96:	b480      	push	{r7}
 8017a98:	b083      	sub	sp, #12
 8017a9a:	af00      	add	r7, sp, #0
 8017a9c:	ed87 0a01 	vstr	s0, [r7, #4]
 8017aa0:	edd7 7a01 	vldr	s15, [r7, #4]
 8017aa4:	eef0 7ae7 	vabs.f32	s15, s15
 8017aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8017aac:	370c      	adds	r7, #12
 8017aae:	46bd      	mov	sp, r7
 8017ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ab4:	4770      	bx	lr

08017ab6 <_Z23twipr_drive_torque_taskPv>:
		(osPriority_t) osPriorityNormal1, };

osMessageQueueId_t drive_input_queue;
osSemaphoreId_t speed_semaphore;

void twipr_drive_torque_task(void *argument) {
 8017ab6:	b580      	push	{r7, lr}
 8017ab8:	b084      	sub	sp, #16
 8017aba:	af00      	add	r7, sp, #0
 8017abc:	6078      	str	r0, [r7, #4]
	TWIPR_Drive *drive = (TWIPR_Drive*) argument;
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	60fb      	str	r3, [r7, #12]
	drive->torqueTaskFunction();
 8017ac2:	68f8      	ldr	r0, [r7, #12]
 8017ac4:	f000 f812 	bl	8017aec <_ZN11TWIPR_Drive18torqueTaskFunctionEv>
}
 8017ac8:	bf00      	nop
 8017aca:	3710      	adds	r7, #16
 8017acc:	46bd      	mov	sp, r7
 8017ace:	bd80      	pop	{r7, pc}

08017ad0 <_Z22twipr_drive_speed_taskPv>:

/* ================================================= */
void twipr_drive_speed_task(void *argument) {
 8017ad0:	b580      	push	{r7, lr}
 8017ad2:	b084      	sub	sp, #16
 8017ad4:	af00      	add	r7, sp, #0
 8017ad6:	6078      	str	r0, [r7, #4]
	TWIPR_Drive *drive = (TWIPR_Drive*) argument;
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	60fb      	str	r3, [r7, #12]
	drive->speedTaskFunction();
 8017adc:	68f8      	ldr	r0, [r7, #12]
 8017ade:	f000 f82d 	bl	8017b3c <_ZN11TWIPR_Drive17speedTaskFunctionEv>
}
 8017ae2:	bf00      	nop
 8017ae4:	3710      	adds	r7, #16
 8017ae6:	46bd      	mov	sp, r7
 8017ae8:	bd80      	pop	{r7, pc}
	...

08017aec <_ZN11TWIPR_Drive18torqueTaskFunctionEv>:

/* ================================================= */
void TWIPR_Drive::torqueTaskFunction() {
 8017aec:	b580      	push	{r7, lr}
 8017aee:	b084      	sub	sp, #16
 8017af0:	af00      	add	r7, sp, #0
 8017af2:	6078      	str	r0, [r7, #4]
	twipr_drive_input_t drive_input;

	while (true) {
		osMessageQueueGet(drive_input_queue, &drive_input, 0, portMAX_DELAY);
 8017af4:	4b10      	ldr	r3, [pc, #64]	; (8017b38 <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x4c>)
 8017af6:	6818      	ldr	r0, [r3, #0]
 8017af8:	f107 0108 	add.w	r1, r7, #8
 8017afc:	f04f 33ff 	mov.w	r3, #4294967295
 8017b00:	2200      	movs	r2, #0
 8017b02:	f7f6 fd9b 	bl	800e63c <osMessageQueueGet>
		if (this->status == TWIPR_DRIVE_STATUS_RUNNING) {
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	781b      	ldrb	r3, [r3, #0]
 8017b0a:	2b02      	cmp	r3, #2
 8017b0c:	d1f2      	bne.n	8017af4 <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x8>
			this->motor_left.setTorque(drive_input.torque_left);
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8017b14:	edd7 7a02 	vldr	s15, [r7, #8]
 8017b18:	eeb0 0a67 	vmov.f32	s0, s15
 8017b1c:	4618      	mov	r0, r3
 8017b1e:	f004 fa67 	bl	801bff0 <_ZN18SimplexMotionMotor9setTorqueEf>
			this->motor_right.setTorque(drive_input.torque_right);
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8017b28:	edd7 7a03 	vldr	s15, [r7, #12]
 8017b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8017b30:	4618      	mov	r0, r3
 8017b32:	f004 fa5d 	bl	801bff0 <_ZN18SimplexMotionMotor9setTorqueEf>
		osMessageQueueGet(drive_input_queue, &drive_input, 0, portMAX_DELAY);
 8017b36:	e7dd      	b.n	8017af4 <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x8>
 8017b38:	240152c0 	.word	0x240152c0

08017b3c <_ZN11TWIPR_Drive17speedTaskFunctionEv>:
		}
	}
}
/* ================================================= */
void TWIPR_Drive::speedTaskFunction() {
 8017b3c:	b580      	push	{r7, lr}
 8017b3e:	b086      	sub	sp, #24
 8017b40:	af00      	add	r7, sp, #0
 8017b42:	6078      	str	r0, [r7, #4]
	twipr_drive_speed_t speed;
	uint32_t tick = 0;
 8017b44:	2300      	movs	r3, #0
 8017b46:	617b      	str	r3, [r7, #20]

	while (true) {
		tick = osKernelGetTickCount();
 8017b48:	f7f6 f9f8 	bl	800df3c <osKernelGetTickCount>
 8017b4c:	6178      	str	r0, [r7, #20]
		speed.speed_left = this->motor_left.getSpeed();
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8017b54:	4618      	mov	r0, r3
 8017b56:	f004 f985 	bl	801be64 <_ZN18SimplexMotionMotor8getSpeedEv>
 8017b5a:	eef0 7a40 	vmov.f32	s15, s0
 8017b5e:	edc7 7a03 	vstr	s15, [r7, #12]
		speed.speed_right = this->motor_right.getSpeed();
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8017b68:	4618      	mov	r0, r3
 8017b6a:	f004 f97b 	bl	801be64 <_ZN18SimplexMotionMotor8getSpeedEv>
 8017b6e:	eef0 7a40 	vmov.f32	s15, s0
 8017b72:	edc7 7a04 	vstr	s15, [r7, #16]

		osSemaphoreAcquire(speed_semaphore, portMAX_DELAY);
 8017b76:	4b0d      	ldr	r3, [pc, #52]	; (8017bac <_ZN11TWIPR_Drive17speedTaskFunctionEv+0x70>)
 8017b78:	681b      	ldr	r3, [r3, #0]
 8017b7a:	f04f 31ff 	mov.w	r1, #4294967295
 8017b7e:	4618      	mov	r0, r3
 8017b80:	f7f6 fbf2 	bl	800e368 <osSemaphoreAcquire>
		this->_speed = speed;
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8017b8a:	f107 020c 	add.w	r2, r7, #12
 8017b8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017b92:	e883 0003 	stmia.w	r3, {r0, r1}
		osSemaphoreRelease(speed_semaphore);
 8017b96:	4b05      	ldr	r3, [pc, #20]	; (8017bac <_ZN11TWIPR_Drive17speedTaskFunctionEv+0x70>)
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	4618      	mov	r0, r3
 8017b9c:	f7f6 fc36 	bl	800e40c <osSemaphoreRelease>
		osDelayUntil(tick + 10);
 8017ba0:	697b      	ldr	r3, [r7, #20]
 8017ba2:	330a      	adds	r3, #10
 8017ba4:	4618      	mov	r0, r3
 8017ba6:	f7f6 fa96 	bl	800e0d6 <osDelayUntil>
		tick = osKernelGetTickCount();
 8017baa:	e7cd      	b.n	8017b48 <_ZN11TWIPR_Drive17speedTaskFunctionEv+0xc>
 8017bac:	240152c4 	.word	0x240152c4

08017bb0 <_ZN11TWIPR_DriveC1Ev>:
	}
}
/* ================================================= */
TWIPR_Drive::TWIPR_Drive() {
 8017bb0:	b580      	push	{r7, lr}
 8017bb2:	b082      	sub	sp, #8
 8017bb4:	af00      	add	r7, sp, #0
 8017bb6:	6078      	str	r0, [r7, #4]
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	2200      	movs	r2, #0
 8017bbc:	701a      	strb	r2, [r3, #0]
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	2200      	movs	r2, #0
 8017bc2:	805a      	strh	r2, [r3, #2]
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	3304      	adds	r3, #4
 8017bc8:	4618      	mov	r0, r3
 8017bca:	f001 fe91 	bl	80198f0 <_ZN12ModbusMasterC1Ev>
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8017bd4:	4618      	mov	r0, r3
 8017bd6:	f003 ff54 	bl	801ba82 <_ZN18SimplexMotionMotorC1Ev>
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8017be0:	4618      	mov	r0, r3
 8017be2:	f003 ff4e 	bl	801ba82 <_ZN18SimplexMotionMotorC1Ev>

}
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	4618      	mov	r0, r3
 8017bea:	3708      	adds	r7, #8
 8017bec:	46bd      	mov	sp, r7
 8017bee:	bd80      	pop	{r7, pc}

08017bf0 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t>:

/* ================================================= */
uint8_t TWIPR_Drive::init(twipr_drive_config_t config) {
 8017bf0:	b084      	sub	sp, #16
 8017bf2:	b5b0      	push	{r4, r5, r7, lr}
 8017bf4:	b08a      	sub	sp, #40	; 0x28
 8017bf6:	af00      	add	r7, sp, #0
 8017bf8:	6078      	str	r0, [r7, #4]
 8017bfa:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8017bfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->_config = config;
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	f503 74f6 	add.w	r4, r3, #492	; 0x1ec
 8017c08:	f107 053c 	add.w	r5, r7, #60	; 0x3c
 8017c0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017c10:	682b      	ldr	r3, [r5, #0]
 8017c12:	6023      	str	r3, [r4, #0]

	uint8_t ret = 0;
 8017c14:	2300      	movs	r3, #0
 8017c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// Initialize the Modbus Interface
	this->modbus.init(this->_config.modbus_config);
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	1d18      	adds	r0, r3, #4
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8017c24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017c26:	f001 fe71 	bl	801990c <_ZN12ModbusMaster4initE15modbus_config_t>
	this->modbus.start();
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	3304      	adds	r3, #4
 8017c2e:	4618      	mov	r0, r3
 8017c30:	f001 ff04 	bl	8019a3c <_ZN12ModbusMaster5startEv>

	// Initialize the motors
	simplexmotion_config_t config_left =
			{ .id = this->_config.id_left, .direction =
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	f893 31ec 	ldrb.w	r3, [r3, #492]	; 0x1ec
					this->_config.direction_left, .modbus = &this->modbus, };
 8017c3a:	753b      	strb	r3, [r7, #20]
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	f993 31ee 	ldrsb.w	r3, [r3, #494]	; 0x1ee
 8017c42:	757b      	strb	r3, [r7, #21]
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	3304      	adds	r3, #4
 8017c48:	61bb      	str	r3, [r7, #24]

	ret = this->motor_left.init(config_left);
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	f503 709e 	add.w	r0, r3, #316	; 0x13c
 8017c50:	f107 0314 	add.w	r3, r7, #20
 8017c54:	e893 0006 	ldmia.w	r3, {r1, r2}
 8017c58:	f003 ffa7 	bl	801bbaa <_ZN18SimplexMotionMotor4initE22simplexmotion_config_t>
 8017c5c:	4603      	mov	r3, r0
 8017c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (!ret) {
 8017c62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d104      	bne.n	8017c74 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x84>
		this->_error_handler(TWIPR_DRIVE_ERROR_INIT);
 8017c6a:	f240 2101 	movw	r1, #513	; 0x201
 8017c6e:	6878      	ldr	r0, [r7, #4]
 8017c70:	f000 f962 	bl	8017f38 <_ZN11TWIPR_Drive14_error_handlerEm>
	}

	simplexmotion_config_t config_right =
			{ .id = this->_config.id_right, .direction =
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	f893 31ed 	ldrb.w	r3, [r3, #493]	; 0x1ed
					this->_config.direction_right, .modbus = &this->modbus, };
 8017c7a:	733b      	strb	r3, [r7, #12]
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	f993 31ef 	ldrsb.w	r3, [r3, #495]	; 0x1ef
 8017c82:	737b      	strb	r3, [r7, #13]
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	3304      	adds	r3, #4
 8017c88:	613b      	str	r3, [r7, #16]

	ret = this->motor_right.init(config_right);
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	f503 70ca 	add.w	r0, r3, #404	; 0x194
 8017c90:	f107 030c 	add.w	r3, r7, #12
 8017c94:	e893 0006 	ldmia.w	r3, {r1, r2}
 8017c98:	f003 ff87 	bl	801bbaa <_ZN18SimplexMotionMotor4initE22simplexmotion_config_t>
 8017c9c:	4603      	mov	r3, r0
 8017c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (!ret) {
 8017ca2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d104      	bne.n	8017cb4 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0xc4>
		this->_error_handler(TWIPR_DRIVE_ERROR_INIT);
 8017caa:	f240 2101 	movw	r1, #513	; 0x201
 8017cae:	6878      	ldr	r0, [r7, #4]
 8017cb0:	f000 f942 	bl	8017f38 <_ZN11TWIPR_Drive14_error_handlerEm>
	}

	// Set Torque Limits
	this->motor_left.setTorqueLimit(this->_config.torque_max);
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	edd3 7a7c 	vldr	s15, [r3, #496]	; 0x1f0
 8017cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8017cc4:	4610      	mov	r0, r2
 8017cc6:	f004 f90b 	bl	801bee0 <_ZN18SimplexMotionMotor14setTorqueLimitEf>
	this->motor_right.setTorqueLimit(this->_config.torque_max);
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	f503 72ca 	add.w	r2, r3, #404	; 0x194
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	edd3 7a7c 	vldr	s15, [r3, #496]	; 0x1f0
 8017cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8017cda:	4610      	mov	r0, r2
 8017cdc:	f004 f900 	bl	801bee0 <_ZN18SimplexMotionMotor14setTorqueLimitEf>

	// Check if torque limits have been set correctly
	float torque_limit_left = this->motor_left.getTorqueLimit();
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8017ce6:	4618      	mov	r0, r3
 8017ce8:	f004 f94e 	bl	801bf88 <_ZN18SimplexMotionMotor14getTorqueLimitEv>
 8017cec:	ed87 0a08 	vstr	s0, [r7, #32]
	float torque_limit_right = this->motor_right.getTorqueLimit();
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8017cf6:	4618      	mov	r0, r3
 8017cf8:	f004 f946 	bl	801bf88 <_ZN18SimplexMotionMotor14getTorqueLimitEv>
 8017cfc:	ed87 0a07 	vstr	s0, [r7, #28]

	if (!(abs(this->_config.torque_max - torque_limit_left) < 0.01)) {
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	ed93 7a7c 	vldr	s14, [r3, #496]	; 0x1f0
 8017d06:	edd7 7a08 	vldr	s15, [r7, #32]
 8017d0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8017d12:	f7ff fec0 	bl	8017a96 <_ZSt3absf>
 8017d16:	eef0 7a40 	vmov.f32	s15, s0
 8017d1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017d1e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8017dd0 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x1e0>
 8017d22:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d2a:	bf4c      	ite	mi
 8017d2c:	2301      	movmi	r3, #1
 8017d2e:	2300      	movpl	r3, #0
 8017d30:	b2db      	uxtb	r3, r3
 8017d32:	f083 0301 	eor.w	r3, r3, #1
 8017d36:	b2db      	uxtb	r3, r3
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d004      	beq.n	8017d46 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x156>
		this->_error_handler(TWIPR_DRIVE_ERROR_INIT);
 8017d3c:	f240 2101 	movw	r1, #513	; 0x201
 8017d40:	6878      	ldr	r0, [r7, #4]
 8017d42:	f000 f8f9 	bl	8017f38 <_ZN11TWIPR_Drive14_error_handlerEm>
	}

	if (!(abs(this->_config.torque_max - torque_limit_right) < 0.01)) {
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	ed93 7a7c 	vldr	s14, [r3, #496]	; 0x1f0
 8017d4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8017d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017d54:	eeb0 0a67 	vmov.f32	s0, s15
 8017d58:	f7ff fe9d 	bl	8017a96 <_ZSt3absf>
 8017d5c:	eef0 7a40 	vmov.f32	s15, s0
 8017d60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017d64:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8017dd0 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x1e0>
 8017d68:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d70:	bf4c      	ite	mi
 8017d72:	2301      	movmi	r3, #1
 8017d74:	2300      	movpl	r3, #0
 8017d76:	b2db      	uxtb	r3, r3
 8017d78:	f083 0301 	eor.w	r3, r3, #1
 8017d7c:	b2db      	uxtb	r3, r3
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d004      	beq.n	8017d8c <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x19c>
		this->_error_handler(TWIPR_DRIVE_ERROR_INIT);
 8017d82:	f240 2101 	movw	r1, #513	; 0x201
 8017d86:	6878      	ldr	r0, [r7, #4]
 8017d88:	f000 f8d6 	bl	8017f38 <_ZN11TWIPR_Drive14_error_handlerEm>
	}

	drive_input_queue = osMessageQueueNew(1, sizeof(twipr_drive_input_t), NULL);
 8017d8c:	2200      	movs	r2, #0
 8017d8e:	2108      	movs	r1, #8
 8017d90:	2001      	movs	r0, #1
 8017d92:	f7f6 fb7f 	bl	800e494 <osMessageQueueNew>
 8017d96:	4603      	mov	r3, r0
 8017d98:	4a0f      	ldr	r2, [pc, #60]	; (8017dd8 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x1e8>)
 8017d9a:	6013      	str	r3, [r2, #0]

	osThreadNew(twipr_drive_torque_task, (void*) this,
 8017d9c:	4a0f      	ldr	r2, [pc, #60]	; (8017ddc <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x1ec>)
 8017d9e:	6879      	ldr	r1, [r7, #4]
 8017da0:	480f      	ldr	r0, [pc, #60]	; (8017de0 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x1f0>)
 8017da2:	f7f6 f8e0 	bl	800df66 <osThreadNew>
			&drive_torque_task_attributes);

	osThreadNew(twipr_drive_speed_task, (void*) this,
 8017da6:	4a0f      	ldr	r2, [pc, #60]	; (8017de4 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x1f4>)
 8017da8:	6879      	ldr	r1, [r7, #4]
 8017daa:	480f      	ldr	r0, [pc, #60]	; (8017de8 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x1f8>)
 8017dac:	f7f6 f8db 	bl	800df66 <osThreadNew>
			&drive_speed_task_attributes);

	speed_semaphore = osSemaphoreNew(1, 1, NULL);
 8017db0:	2200      	movs	r2, #0
 8017db2:	2101      	movs	r1, #1
 8017db4:	2001      	movs	r0, #1
 8017db6:	f7f6 fa4d 	bl	800e254 <osSemaphoreNew>
 8017dba:	4603      	mov	r3, r0
 8017dbc:	4a0b      	ldr	r2, [pc, #44]	; (8017dec <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x1fc>)
 8017dbe:	6013      	str	r3, [r2, #0]

	return 1;
 8017dc0:	2301      	movs	r3, #1
}
 8017dc2:	4618      	mov	r0, r3
 8017dc4:	3728      	adds	r7, #40	; 0x28
 8017dc6:	46bd      	mov	sp, r7
 8017dc8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8017dcc:	b004      	add	sp, #16
 8017dce:	4770      	bx	lr
 8017dd0:	47ae147b 	.word	0x47ae147b
 8017dd4:	3f847ae1 	.word	0x3f847ae1
 8017dd8:	240152c0 	.word	0x240152c0
 8017ddc:	08020968 	.word	0x08020968
 8017de0:	08017ab7 	.word	0x08017ab7
 8017de4:	0802098c 	.word	0x0802098c
 8017de8:	08017ad1 	.word	0x08017ad1
 8017dec:	240152c4 	.word	0x240152c4

08017df0 <_ZN11TWIPR_Drive5startEv>:
/* ================================================= */
void TWIPR_Drive::start() {
 8017df0:	b580      	push	{r7, lr}
 8017df2:	b082      	sub	sp, #8
 8017df4:	af00      	add	r7, sp, #0
 8017df6:	6078      	str	r0, [r7, #4]
	this->motor_left.start(SIMPLEXMOTION_MODE_TORQUE);
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8017dfe:	2128      	movs	r1, #40	; 0x28
 8017e00:	4618      	mov	r0, r3
 8017e02:	f003 ff0a 	bl	801bc1a <_ZN18SimplexMotionMotor5startE20simplexmotion_mode_t>
	this->motor_right.start(SIMPLEXMOTION_MODE_TORQUE);
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8017e0c:	2128      	movs	r1, #40	; 0x28
 8017e0e:	4618      	mov	r0, r3
 8017e10:	f003 ff03 	bl	801bc1a <_ZN18SimplexMotionMotor5startE20simplexmotion_mode_t>
	this->status = TWIPR_DRIVE_STATUS_RUNNING;
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	2202      	movs	r2, #2
 8017e18:	701a      	strb	r2, [r3, #0]
}
 8017e1a:	bf00      	nop
 8017e1c:	3708      	adds	r7, #8
 8017e1e:	46bd      	mov	sp, r7
 8017e20:	bd80      	pop	{r7, pc}

08017e22 <_ZN11TWIPR_Drive4stopEv>:
/* ================================================= */
void TWIPR_Drive::stop() {
 8017e22:	b580      	push	{r7, lr}
 8017e24:	b082      	sub	sp, #8
 8017e26:	af00      	add	r7, sp, #0
 8017e28:	6078      	str	r0, [r7, #4]

	// Stop both motors immediately
	this->motor_left.stop();
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8017e30:	4618      	mov	r0, r3
 8017e32:	f003 ffc5 	bl	801bdc0 <_ZN18SimplexMotionMotor4stopEv>
	this->motor_right.stop();
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8017e3c:	4618      	mov	r0, r3
 8017e3e:	f003 ffbf 	bl	801bdc0 <_ZN18SimplexMotionMotor4stopEv>
	this->status = TWIPR_DRIVE_STATUS_STOP;
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	2201      	movs	r2, #1
 8017e46:	701a      	strb	r2, [r3, #0]
}
 8017e48:	bf00      	nop
 8017e4a:	3708      	adds	r7, #8
 8017e4c:	46bd      	mov	sp, r7
 8017e4e:	bd80      	pop	{r7, pc}

08017e50 <_ZN11TWIPR_Drive13startup_checkEv>:
/* ================================================= */
uint8_t TWIPR_Drive::startup_check() {
 8017e50:	b580      	push	{r7, lr}
 8017e52:	b084      	sub	sp, #16
 8017e54:	af00      	add	r7, sp, #0
 8017e56:	6078      	str	r0, [r7, #4]
	// Check both motors
	uint8_t check_left = this->motor_left.startup_check();
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8017e5e:	4618      	mov	r0, r3
 8017e60:	f003 ff0a 	bl	801bc78 <_ZN18SimplexMotionMotor13startup_checkEv>
 8017e64:	4603      	mov	r3, r0
 8017e66:	73fb      	strb	r3, [r7, #15]
	osDelay(250);
 8017e68:	20fa      	movs	r0, #250	; 0xfa
 8017e6a:	f7f6 f919 	bl	800e0a0 <osDelay>
	uint8_t check_right = this->motor_right.startup_check();
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8017e74:	4618      	mov	r0, r3
 8017e76:	f003 feff 	bl	801bc78 <_ZN18SimplexMotionMotor13startup_checkEv>
 8017e7a:	4603      	mov	r3, r0
 8017e7c:	73bb      	strb	r3, [r7, #14]

	if (!check_left) {
 8017e7e:	7bfb      	ldrb	r3, [r7, #15]
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d101      	bne.n	8017e88 <_ZN11TWIPR_Drive13startup_checkEv+0x38>
		return 0;
 8017e84:	2300      	movs	r3, #0
 8017e86:	e005      	b.n	8017e94 <_ZN11TWIPR_Drive13startup_checkEv+0x44>
	}

	if (!check_right) {
 8017e88:	7bbb      	ldrb	r3, [r7, #14]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d101      	bne.n	8017e92 <_ZN11TWIPR_Drive13startup_checkEv+0x42>
		return 0;
 8017e8e:	2300      	movs	r3, #0
 8017e90:	e000      	b.n	8017e94 <_ZN11TWIPR_Drive13startup_checkEv+0x44>
	}

	return 1;
 8017e92:	2301      	movs	r3, #1
}
 8017e94:	4618      	mov	r0, r3
 8017e96:	3710      	adds	r7, #16
 8017e98:	46bd      	mov	sp, r7
 8017e9a:	bd80      	pop	{r7, pc}

08017e9c <_ZN11TWIPR_Drive8getSpeedEv>:
/* ================================================= */
float TWIPR_Drive::getVoltage() {
	return this->motor_left.getVoltage();
}
/* ================================================= */
twipr_drive_speed_t TWIPR_Drive::getSpeed() {
 8017e9c:	b580      	push	{r7, lr}
 8017e9e:	b088      	sub	sp, #32
 8017ea0:	af00      	add	r7, sp, #0
 8017ea2:	60f8      	str	r0, [r7, #12]

	twipr_drive_speed_t speed;

	// TODO
	osSemaphoreAcquire(speed_semaphore, portMAX_DELAY);
 8017ea4:	4b14      	ldr	r3, [pc, #80]	; (8017ef8 <_ZN11TWIPR_Drive8getSpeedEv+0x5c>)
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8017eac:	4618      	mov	r0, r3
 8017eae:	f7f6 fa5b 	bl	800e368 <osSemaphoreAcquire>
	speed = this->_speed;
 8017eb2:	68fa      	ldr	r2, [r7, #12]
 8017eb4:	f107 0310 	add.w	r3, r7, #16
 8017eb8:	f502 7202 	add.w	r2, r2, #520	; 0x208
 8017ebc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017ec0:	e883 0003 	stmia.w	r3, {r0, r1}
	osSemaphoreRelease(speed_semaphore);
 8017ec4:	4b0c      	ldr	r3, [pc, #48]	; (8017ef8 <_ZN11TWIPR_Drive8getSpeedEv+0x5c>)
 8017ec6:	681b      	ldr	r3, [r3, #0]
 8017ec8:	4618      	mov	r0, r3
 8017eca:	f7f6 fa9f 	bl	800e40c <osSemaphoreRelease>
	return speed;
 8017ece:	f107 0318 	add.w	r3, r7, #24
 8017ed2:	f107 0210 	add.w	r2, r7, #16
 8017ed6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017eda:	e883 0003 	stmia.w	r3, {r0, r1}
 8017ede:	69ba      	ldr	r2, [r7, #24]
 8017ee0:	69fb      	ldr	r3, [r7, #28]
 8017ee2:	ee07 2a10 	vmov	s14, r2
 8017ee6:	ee07 3a90 	vmov	s15, r3
}
 8017eea:	eeb0 0a47 	vmov.f32	s0, s14
 8017eee:	eef0 0a67 	vmov.f32	s1, s15
 8017ef2:	3720      	adds	r7, #32
 8017ef4:	46bd      	mov	sp, r7
 8017ef6:	bd80      	pop	{r7, pc}
 8017ef8:	240152c4 	.word	0x240152c4

08017efc <_ZN11TWIPR_Drive9setTorqueE19twipr_drive_input_t>:
/* ================================================= */
void TWIPR_Drive::setTorque(twipr_drive_input_t input) {
 8017efc:	b580      	push	{r7, lr}
 8017efe:	b084      	sub	sp, #16
 8017f00:	af00      	add	r7, sp, #0
 8017f02:	60f8      	str	r0, [r7, #12]
 8017f04:	eeb0 7a40 	vmov.f32	s14, s0
 8017f08:	eef0 7a60 	vmov.f32	s15, s1
 8017f0c:	ed87 7a01 	vstr	s14, [r7, #4]
 8017f10:	edc7 7a02 	vstr	s15, [r7, #8]

	if (this->status != TWIPR_DRIVE_STATUS_RUNNING) {
 8017f14:	68fb      	ldr	r3, [r7, #12]
 8017f16:	781b      	ldrb	r3, [r3, #0]
 8017f18:	2b02      	cmp	r3, #2
 8017f1a:	d107      	bne.n	8017f2c <_ZN11TWIPR_Drive9setTorqueE19twipr_drive_input_t+0x30>
		return;
	}

	osMessageQueuePut(drive_input_queue, &input, 0, 0);
 8017f1c:	4b05      	ldr	r3, [pc, #20]	; (8017f34 <_ZN11TWIPR_Drive9setTorqueE19twipr_drive_input_t+0x38>)
 8017f1e:	6818      	ldr	r0, [r3, #0]
 8017f20:	1d39      	adds	r1, r7, #4
 8017f22:	2300      	movs	r3, #0
 8017f24:	2200      	movs	r2, #0
 8017f26:	f7f6 fb29 	bl	800e57c <osMessageQueuePut>
 8017f2a:	e000      	b.n	8017f2e <_ZN11TWIPR_Drive9setTorqueE19twipr_drive_input_t+0x32>
		return;
 8017f2c:	bf00      	nop

//	this->motor_left.setTorque(input.torque_left);
//	this->motor_right.setTorque(input.torque_right);
}
 8017f2e:	3710      	adds	r7, #16
 8017f30:	46bd      	mov	sp, r7
 8017f32:	bd80      	pop	{r7, pc}
 8017f34:	240152c0 	.word	0x240152c0

08017f38 <_ZN11TWIPR_Drive14_error_handlerEm>:
	this->motor_left.setTorque(torque_left);
	this->motor_right.setTorque(torque_right);
}

/* ================================================= */
void TWIPR_Drive::_error_handler(uint32_t error) {
 8017f38:	b580      	push	{r7, lr}
 8017f3a:	b082      	sub	sp, #8
 8017f3c:	af00      	add	r7, sp, #0
 8017f3e:	6078      	str	r0, [r7, #4]
 8017f40:	6039      	str	r1, [r7, #0]

	// Set the state to error
	this->status = TWIPR_DRIVE_STATUS_ERROR;
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	2203      	movs	r2, #3
 8017f46:	701a      	strb	r2, [r3, #0]
	this->error = (twipr_drive_error_t) error;
 8017f48:	683b      	ldr	r3, [r7, #0]
 8017f4a:	b29a      	uxth	r2, r3
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	805a      	strh	r2, [r3, #2]

	// Call the error handler of the TWIPR
	twipr_error_handler(error);
 8017f50:	6838      	ldr	r0, [r7, #0]
 8017f52:	f000 f819 	bl	8017f88 <_Z19twipr_error_handlerm>
}
 8017f56:	bf00      	nop
 8017f58:	3708      	adds	r7, #8
 8017f5a:	46bd      	mov	sp, r7
 8017f5c:	bd80      	pop	{r7, pc}

08017f5e <_Z5delaym>:

inline void delay(uint32_t msec){
 8017f5e:	b580      	push	{r7, lr}
 8017f60:	b084      	sub	sp, #16
 8017f62:	af00      	add	r7, sp, #0
 8017f64:	6078      	str	r0, [r7, #4]
#if CORE_CONFIG_USE_RTOS

	osKernelState_t state = osKernelGetState();
 8017f66:	f7f5 ffa1 	bl	800deac <osKernelGetState>
 8017f6a:	60f8      	str	r0, [r7, #12]
	if (state == osKernelRunning){
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	2b02      	cmp	r3, #2
 8017f70:	d103      	bne.n	8017f7a <_Z5delaym+0x1c>
		osDelay(msec);
 8017f72:	6878      	ldr	r0, [r7, #4]
 8017f74:	f7f6 f894 	bl	800e0a0 <osDelay>
	}

#else
	HAL_Delay(msec);
#endif
}
 8017f78:	e002      	b.n	8017f80 <_Z5delaym+0x22>
		HAL_Delay(msec);
 8017f7a:	6878      	ldr	r0, [r7, #4]
 8017f7c:	f7e9 fe78 	bl	8001c70 <HAL_Delay>
}
 8017f80:	bf00      	nop
 8017f82:	3710      	adds	r7, #16
 8017f84:	46bd      	mov	sp, r7
 8017f86:	bd80      	pop	{r7, pc}

08017f88 <_Z19twipr_error_handlerm>:
 */


#include "twipr_errors.h"

void twipr_error_handler(uint32_t errorcode) {
 8017f88:	b580      	push	{r7, lr}
 8017f8a:	b086      	sub	sp, #24
 8017f8c:	af00      	add	r7, sp, #0
 8017f8e:	6078      	str	r0, [r7, #4]

	// Turn on the LED2

	// if the error code starts with 0x00 then it's severe and should result in a firmware stop
	if (errorcode >> 24 == 0x00) {
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	0e1b      	lsrs	r3, r3, #24
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d13b      	bne.n	8018010 <_Z19twipr_error_handlerm+0x88>
		// Try to suspend all tasks
		vTaskSuspendAll();
 8017f98:	f7f7 fff0 	bl	800ff7c <vTaskSuspendAll>
		while (true) {
			uint8_t id1 = errorcode >> 8 & 0xFF;
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	0a1b      	lsrs	r3, r3, #8
 8017fa0:	73fb      	strb	r3, [r7, #15]
			uint8_t id2 = errorcode & 0xFF;
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	73bb      	strb	r3, [r7, #14]

			for (int i = 0; i < id1; i++) {
 8017fa6:	2300      	movs	r3, #0
 8017fa8:	617b      	str	r3, [r7, #20]
 8017faa:	7bfb      	ldrb	r3, [r7, #15]
 8017fac:	697a      	ldr	r2, [r7, #20]
 8017fae:	429a      	cmp	r2, r3
 8017fb0:	da0f      	bge.n	8017fd2 <_Z19twipr_error_handlerm+0x4a>
				led2.on();
 8017fb2:	4819      	ldr	r0, [pc, #100]	; (8018018 <_Z19twipr_error_handlerm+0x90>)
 8017fb4:	f003 fbb6 	bl	801b724 <_ZN17core_hardware_LED2onEv>
				HAL_Delay(150);
 8017fb8:	2096      	movs	r0, #150	; 0x96
 8017fba:	f7e9 fe59 	bl	8001c70 <HAL_Delay>
				led2.off();
 8017fbe:	4816      	ldr	r0, [pc, #88]	; (8018018 <_Z19twipr_error_handlerm+0x90>)
 8017fc0:	f003 fbc0 	bl	801b744 <_ZN17core_hardware_LED3offEv>
				HAL_Delay(150);
 8017fc4:	2096      	movs	r0, #150	; 0x96
 8017fc6:	f7e9 fe53 	bl	8001c70 <HAL_Delay>
			for (int i = 0; i < id1; i++) {
 8017fca:	697b      	ldr	r3, [r7, #20]
 8017fcc:	3301      	adds	r3, #1
 8017fce:	617b      	str	r3, [r7, #20]
 8017fd0:	e7eb      	b.n	8017faa <_Z19twipr_error_handlerm+0x22>
			}
			delay(750);
 8017fd2:	f240 20ee 	movw	r0, #750	; 0x2ee
 8017fd6:	f7ff ffc2 	bl	8017f5e <_Z5delaym>
			for (int i = 0; i < id2; i++) {
 8017fda:	2300      	movs	r3, #0
 8017fdc:	613b      	str	r3, [r7, #16]
 8017fde:	7bbb      	ldrb	r3, [r7, #14]
 8017fe0:	693a      	ldr	r2, [r7, #16]
 8017fe2:	429a      	cmp	r2, r3
 8017fe4:	da0f      	bge.n	8018006 <_Z19twipr_error_handlerm+0x7e>
				led2.on();
 8017fe6:	480c      	ldr	r0, [pc, #48]	; (8018018 <_Z19twipr_error_handlerm+0x90>)
 8017fe8:	f003 fb9c 	bl	801b724 <_ZN17core_hardware_LED2onEv>
				HAL_Delay(150);
 8017fec:	2096      	movs	r0, #150	; 0x96
 8017fee:	f7e9 fe3f 	bl	8001c70 <HAL_Delay>
				led2.off();
 8017ff2:	4809      	ldr	r0, [pc, #36]	; (8018018 <_Z19twipr_error_handlerm+0x90>)
 8017ff4:	f003 fba6 	bl	801b744 <_ZN17core_hardware_LED3offEv>
				HAL_Delay(150);
 8017ff8:	2096      	movs	r0, #150	; 0x96
 8017ffa:	f7e9 fe39 	bl	8001c70 <HAL_Delay>
			for (int i = 0; i < id2; i++) {
 8017ffe:	693b      	ldr	r3, [r7, #16]
 8018000:	3301      	adds	r3, #1
 8018002:	613b      	str	r3, [r7, #16]
 8018004:	e7eb      	b.n	8017fde <_Z19twipr_error_handlerm+0x56>
			}
			HAL_Delay(1500);
 8018006:	f240 50dc 	movw	r0, #1500	; 0x5dc
 801800a:	f7e9 fe31 	bl	8001c70 <HAL_Delay>
		}
 801800e:	e7c5      	b.n	8017f9c <_Z19twipr_error_handlerm+0x14>
	}
}
 8018010:	bf00      	nop
 8018012:	3718      	adds	r7, #24
 8018014:	46bd      	mov	sp, r7
 8018016:	bd80      	pop	{r7, pc}
 8018018:	2401db84 	.word	0x2401db84

0801801c <_ZN8Madgwick5beginEf>:

//-------------------------------------------------------------------------------------------
// Function declarations
public:
    Madgwick(void);
    void begin(float sampleFrequency) { invSampleFreq = 1.0f / sampleFrequency; }
 801801c:	b480      	push	{r7}
 801801e:	b083      	sub	sp, #12
 8018020:	af00      	add	r7, sp, #0
 8018022:	6078      	str	r0, [r7, #4]
 8018024:	ed87 0a00 	vstr	s0, [r7]
 8018028:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801802c:	ed97 7a00 	vldr	s14, [r7]
 8018030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	edc3 7a04 	vstr	s15, [r3, #16]
 801803a:	bf00      	nop
 801803c:	370c      	adds	r7, #12
 801803e:	46bd      	mov	sp, r7
 8018040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018044:	4770      	bx	lr

08018046 <_ZN8Madgwick14getRollRadiansEv>:
    }
    float getYaw() {
        if (!anglesComputed) computeAngles();
        return yaw * 57.29578f + 180.0f;
    }
    float getRollRadians() {
 8018046:	b580      	push	{r7, lr}
 8018048:	b082      	sub	sp, #8
 801804a:	af00      	add	r7, sp, #0
 801804c:	6078      	str	r0, [r7, #4]
        if (!anglesComputed) computeAngles();
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	7d1b      	ldrb	r3, [r3, #20]
 8018052:	2b00      	cmp	r3, #0
 8018054:	d102      	bne.n	801805c <_ZN8Madgwick14getRollRadiansEv+0x16>
 8018056:	6878      	ldr	r0, [r7, #4]
 8018058:	f003 fac0 	bl	801b5dc <_ZN8Madgwick13computeAnglesEv>
        return roll;
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	685b      	ldr	r3, [r3, #4]
 8018060:	ee07 3a90 	vmov	s15, r3
    }
 8018064:	eeb0 0a67 	vmov.f32	s0, s15
 8018068:	3708      	adds	r7, #8
 801806a:	46bd      	mov	sp, r7
 801806c:	bd80      	pop	{r7, pc}

0801806e <_ZN16TWIPR_EstimationC1Ev>:

static const osThreadAttr_t estimation_task_attributes = { .name = "estimation",
		.stack_size = 1280 * 4, .priority = (osPriority_t) osPriorityNormal, };

/* ======================================================= */
TWIPR_Estimation::TWIPR_Estimation() {
 801806e:	b580      	push	{r7, lr}
 8018070:	b082      	sub	sp, #8
 8018072:	af00      	add	r7, sp, #0
 8018074:	6078      	str	r0, [r7, #4]
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	334c      	adds	r3, #76	; 0x4c
 801807a:	4618      	mov	r0, r3
 801807c:	f000 fa18 	bl	80184b0 <_ZN13TWIPR_SensorsC1Ev>
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	2200      	movs	r2, #0
 8018084:	f8a3 2894 	strh.w	r2, [r3, #2196]	; 0x894
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 801808e:	4618      	mov	r0, r3
 8018090:	f002 ff16 	bl	801aec0 <_ZN8MadgwickC1Ev>
	this->status = TWIPR_ESTIMATION_STATUS_NONE;
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	2200      	movs	r2, #0
 8018098:	701a      	strb	r2, [r3, #0]
}
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	4618      	mov	r0, r3
 801809e:	3708      	adds	r7, #8
 80180a0:	46bd      	mov	sp, r7
 80180a2:	bd80      	pop	{r7, pc}

080180a4 <_ZN16TWIPR_Estimation4initE25twipr_estimation_config_t>:

/* ======================================================= */
void TWIPR_Estimation::init(twipr_estimation_config_t config) {
 80180a4:	b084      	sub	sp, #16
 80180a6:	b5b0      	push	{r4, r5, r7, lr}
 80180a8:	b084      	sub	sp, #16
 80180aa:	af00      	add	r7, sp, #0
 80180ac:	6078      	str	r0, [r7, #4]
 80180ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80180b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80180bc:	f107 0524 	add.w	r5, r7, #36	; 0x24
 80180c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80180c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80180c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80180c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Initialize the sensors
	twipr_sensors_config_t twipr_sensors_config = { .drive = this->config.drive, };
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180d0:	60fb      	str	r3, [r7, #12]
	this->_sensors.init(twipr_sensors_config);
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	334c      	adds	r3, #76	; 0x4c
 80180d6:	68f9      	ldr	r1, [r7, #12]
 80180d8:	4618      	mov	r0, r3
 80180da:	f000 f9f7 	bl	80184cc <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t>

	this->status = TWIPR_ESTIMATION_STATUS_IDLE;
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	2201      	movs	r2, #1
 80180e2:	701a      	strb	r2, [r3, #0]
	this->_semaphore = osSemaphoreNew(1, 1, NULL);
 80180e4:	2200      	movs	r2, #0
 80180e6:	2101      	movs	r1, #1
 80180e8:	2001      	movs	r0, #1
 80180ea:	f7f6 f8b3 	bl	800e254 <osSemaphoreNew>
 80180ee:	4602      	mov	r2, r0
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	f8c3 2898 	str.w	r2, [r3, #2200]	; 0x898
}
 80180f6:	bf00      	nop
 80180f8:	3710      	adds	r7, #16
 80180fa:	46bd      	mov	sp, r7
 80180fc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8018100:	b004      	add	sp, #16
 8018102:	4770      	bx	lr

08018104 <_ZN16TWIPR_Estimation5startEv>:

/* ======================================================= */
void TWIPR_Estimation::start() {
 8018104:	b580      	push	{r7, lr}
 8018106:	b082      	sub	sp, #8
 8018108:	af00      	add	r7, sp, #0
 801810a:	6078      	str	r0, [r7, #4]
	osThreadNew(estimation_task, (void*) this, &estimation_task_attributes);
 801810c:	4a04      	ldr	r2, [pc, #16]	; (8018120 <_ZN16TWIPR_Estimation5startEv+0x1c>)
 801810e:	6879      	ldr	r1, [r7, #4]
 8018110:	4804      	ldr	r0, [pc, #16]	; (8018124 <_ZN16TWIPR_Estimation5startEv+0x20>)
 8018112:	f7f5 ff28 	bl	800df66 <osThreadNew>
}
 8018116:	bf00      	nop
 8018118:	3708      	adds	r7, #8
 801811a:	46bd      	mov	sp, r7
 801811c:	bd80      	pop	{r7, pc}
 801811e:	bf00      	nop
 8018120:	080209b0 	.word	0x080209b0
 8018124:	08018497 	.word	0x08018497

08018128 <_ZN16TWIPR_Estimation13task_functionEv>:
/* ======================================================= */
void TWIPR_Estimation::reset() {
	twipr_error_handler(0);
}
/* ======================================================= */
void TWIPR_Estimation::task_function() {
 8018128:	b580      	push	{r7, lr}
 801812a:	b084      	sub	sp, #16
 801812c:	af00      	add	r7, sp, #0
 801812e:	6078      	str	r0, [r7, #4]

	this->_orientation_fusion.begin((float) TWIPR_ESTIMATION_FREQUENCY);
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 8018136:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8018160 <_ZN16TWIPR_Estimation13task_functionEv+0x38>
 801813a:	4618      	mov	r0, r3
 801813c:	f7ff ff6e 	bl	801801c <_ZN8Madgwick5beginEf>
	this->status = TWIPR_ESTIMATION_STATUS_OK;
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	2202      	movs	r2, #2
 8018144:	701a      	strb	r2, [r3, #0]
//	this->_sensors.calibrate();
	uint32_t ticks;

	while (true) {
		ticks = osKernelGetTickCount();
 8018146:	f7f5 fef9 	bl	800df3c <osKernelGetTickCount>
 801814a:	60f8      	str	r0, [r7, #12]
		this->update();
 801814c:	6878      	ldr	r0, [r7, #4]
 801814e:	f000 f809 	bl	8018164 <_ZN16TWIPR_Estimation6updateEv>
		osDelayUntil(ticks + (uint32_t) (1000.0 / TWIPR_ESTIMATION_FREQUENCY));
 8018152:	68fb      	ldr	r3, [r7, #12]
 8018154:	330a      	adds	r3, #10
 8018156:	4618      	mov	r0, r3
 8018158:	f7f5 ffbd 	bl	800e0d6 <osDelayUntil>
		ticks = osKernelGetTickCount();
 801815c:	e7f3      	b.n	8018146 <_ZN16TWIPR_Estimation13task_functionEv+0x1e>
 801815e:	bf00      	nop
 8018160:	42c80000 	.word	0x42c80000

08018164 <_ZN16TWIPR_Estimation6updateEv>:
/* ======================================================= */
void TWIPR_Estimation::stop() {
	twipr_error_handler(0);
}
/* ======================================================= */
void TWIPR_Estimation::update() {
 8018164:	b5b0      	push	{r4, r5, r7, lr}
 8018166:	b08e      	sub	sp, #56	; 0x38
 8018168:	af00      	add	r7, sp, #0
 801816a:	6078      	str	r0, [r7, #4]

	// Update the Sensors
	this->_sensors.update();
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	334c      	adds	r3, #76	; 0x4c
 8018170:	4618      	mov	r0, r3
 8018172:	f000 f9ff 	bl	8018574 <_ZN13TWIPR_Sensors6updateEv>

	// Read the sensor data
	twipr_sensors_data_t data = this->_sensors.getData();
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 801817c:	f107 0308 	add.w	r3, r7, #8
 8018180:	4611      	mov	r1, r2
 8018182:	4618      	mov	r0, r3
 8018184:	f000 fa04 	bl	8018590 <_ZN13TWIPR_Sensors7getDataEv>

	// Orientation Estimation
	this->_orientation_fusion.updateIMU(data.gyr.x, data.gyr.y, data.gyr.z,
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 801818e:	edd7 7a07 	vldr	s15, [r7, #28]
 8018192:	ed97 7a08 	vldr	s14, [r7, #32]
 8018196:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801819a:	ed97 6a04 	vldr	s12, [r7, #16]
 801819e:	edd7 5a05 	vldr	s11, [r7, #20]
 80181a2:	ed97 5a06 	vldr	s10, [r7, #24]
 80181a6:	eef0 2a45 	vmov.f32	s5, s10
 80181aa:	eeb0 2a65 	vmov.f32	s4, s11
 80181ae:	eef0 1a46 	vmov.f32	s3, s12
 80181b2:	eeb0 1a66 	vmov.f32	s2, s13
 80181b6:	eef0 0a47 	vmov.f32	s1, s14
 80181ba:	eeb0 0a67 	vmov.f32	s0, s15
 80181be:	4618      	mov	r0, r3
 80181c0:	f002 fea6 	bl	801af10 <_ZN8Madgwick9updateIMUEffffff>
			data.acc.x, data.acc.y, data.acc.z);

	// Read the pitch angle
	float theta = this->_orientation_fusion.getRollRadians();
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 80181ca:	4618      	mov	r0, r3
 80181cc:	f7ff ff3b 	bl	8018046 <_ZN8Madgwick14getRollRadiansEv>
 80181d0:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	float theta_dot = data.gyr.x;
 80181d4:	69fb      	ldr	r3, [r7, #28]
 80181d6:	633b      	str	r3, [r7, #48]	; 0x30

	// Get the speed and yaw speed
	float v = (data.speed_left + data.speed_right) / 2 * this->config.model.r_wheel;
 80181d8:	ed97 7a02 	vldr	s14, [r7, #8]
 80181dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80181e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80181e4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80181e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80181f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80181f6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float psi_dot = (data.speed_right - data.speed_left) * this->config.model.r_wheel
 80181fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80181fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8018202:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 801820c:	ee67 6a27 	vmul.f32	s13, s14, s15
			/ this->config.model.distance_wheels;
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
	float psi_dot = (data.speed_right - data.speed_left) * this->config.model.r_wheel
 8018216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801821a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	// Set the current state
	osSemaphoreAcquire(_semaphore, portMAX_DELAY);
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
 8018224:	f04f 31ff 	mov.w	r1, #4294967295
 8018228:	4618      	mov	r0, r3
 801822a:	f7f6 f89d 	bl	800e368 <osSemaphoreAcquire>
	this->state.v = v;
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018232:	605a      	str	r2, [r3, #4]
	this->state.theta = theta;
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018238:	609a      	str	r2, [r3, #8]
	this->state.theta_dot = theta_dot;
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801823e:	60da      	str	r2, [r3, #12]
	this->state.psi = 0;
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	f04f 0200 	mov.w	r2, #0
 8018246:	611a      	str	r2, [r3, #16]
	this->state.psi_dot = psi_dot;
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801824c:	615a      	str	r2, [r3, #20]

	// Calculate the average
	this->mean_state.v = this->mean_state.v
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	ed93 7a06 	vldr	s14, [r3, #24]
			- (this->_state_buffer[this->_state_buffer_index].v
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	f8b3 3894 	ldrh.w	r3, [r3, #2196]	; 0x894
 801825a:	4619      	mov	r1, r3
 801825c:	687a      	ldr	r2, [r7, #4]
 801825e:	460b      	mov	r3, r1
 8018260:	009b      	lsls	r3, r3, #2
 8018262:	440b      	add	r3, r1
 8018264:	009b      	lsls	r3, r3, #2
 8018266:	4413      	add	r3, r2
 8018268:	33c4      	adds	r3, #196	; 0xc4
 801826a:	edd3 6a00 	vldr	s13, [r3]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE)
 801826e:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8018400 <_ZN16TWIPR_Estimation6updateEv+0x29c>
 8018272:	eec6 7a86 	vdiv.f32	s15, s13, s12
			- (this->_state_buffer[this->_state_buffer_index].v
 8018276:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ (this->state.v / (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE);
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	edd3 6a01 	vldr	s13, [r3, #4]
 8018280:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 8018400 <_ZN16TWIPR_Estimation6updateEv+0x29c>
 8018284:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8018288:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->mean_state.v = this->mean_state.v
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	edc3 7a06 	vstr	s15, [r3, #24]
	this->mean_state.theta = this->mean_state.theta
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	ed93 7a07 	vldr	s14, [r3, #28]
			- (this->_state_buffer[this->_state_buffer_index].theta
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	f8b3 3894 	ldrh.w	r3, [r3, #2196]	; 0x894
 801829e:	4619      	mov	r1, r3
 80182a0:	687a      	ldr	r2, [r7, #4]
 80182a2:	460b      	mov	r3, r1
 80182a4:	009b      	lsls	r3, r3, #2
 80182a6:	440b      	add	r3, r1
 80182a8:	009b      	lsls	r3, r3, #2
 80182aa:	4413      	add	r3, r2
 80182ac:	33c8      	adds	r3, #200	; 0xc8
 80182ae:	edd3 6a00 	vldr	s13, [r3]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE)
 80182b2:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8018400 <_ZN16TWIPR_Estimation6updateEv+0x29c>
 80182b6:	eec6 7a86 	vdiv.f32	s15, s13, s12
			- (this->_state_buffer[this->_state_buffer_index].theta
 80182ba:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ (this->state.theta / (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE);
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	edd3 6a02 	vldr	s13, [r3, #8]
 80182c4:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8018400 <_ZN16TWIPR_Estimation6updateEv+0x29c>
 80182c8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80182cc:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->mean_state.theta = this->mean_state.theta
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	edc3 7a07 	vstr	s15, [r3, #28]
	this->mean_state.theta_dot = this->mean_state.theta_dot
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	ed93 7a08 	vldr	s14, [r3, #32]
			- (this->_state_buffer[this->_state_buffer_index].theta_dot
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	f8b3 3894 	ldrh.w	r3, [r3, #2196]	; 0x894
 80182e2:	4619      	mov	r1, r3
 80182e4:	687a      	ldr	r2, [r7, #4]
 80182e6:	460b      	mov	r3, r1
 80182e8:	009b      	lsls	r3, r3, #2
 80182ea:	440b      	add	r3, r1
 80182ec:	009b      	lsls	r3, r3, #2
 80182ee:	4413      	add	r3, r2
 80182f0:	33cc      	adds	r3, #204	; 0xcc
 80182f2:	edd3 6a00 	vldr	s13, [r3]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE)
 80182f6:	ed9f 6a42 	vldr	s12, [pc, #264]	; 8018400 <_ZN16TWIPR_Estimation6updateEv+0x29c>
 80182fa:	eec6 7a86 	vdiv.f32	s15, s13, s12
			- (this->_state_buffer[this->_state_buffer_index].theta_dot
 80182fe:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ (this->state.theta_dot
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	edd3 6a03 	vldr	s13, [r3, #12]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE);
 8018308:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 8018400 <_ZN16TWIPR_Estimation6updateEv+0x29c>
 801830c:	eec6 7a86 	vdiv.f32	s15, s13, s12
			+ (this->state.theta_dot
 8018310:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->mean_state.theta_dot = this->mean_state.theta_dot
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	edc3 7a08 	vstr	s15, [r3, #32]
	this->mean_state.psi = this->mean_state.psi
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
			- (this->_state_buffer[this->_state_buffer_index].psi
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	f8b3 3894 	ldrh.w	r3, [r3, #2196]	; 0x894
 8018326:	4619      	mov	r1, r3
 8018328:	687a      	ldr	r2, [r7, #4]
 801832a:	460b      	mov	r3, r1
 801832c:	009b      	lsls	r3, r3, #2
 801832e:	440b      	add	r3, r1
 8018330:	009b      	lsls	r3, r3, #2
 8018332:	4413      	add	r3, r2
 8018334:	33d0      	adds	r3, #208	; 0xd0
 8018336:	edd3 6a00 	vldr	s13, [r3]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE)
 801833a:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8018400 <_ZN16TWIPR_Estimation6updateEv+0x29c>
 801833e:	eec6 7a86 	vdiv.f32	s15, s13, s12
			- (this->_state_buffer[this->_state_buffer_index].psi
 8018342:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ (this->state.psi
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	edd3 6a04 	vldr	s13, [r3, #16]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE);
 801834c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8018400 <_ZN16TWIPR_Estimation6updateEv+0x29c>
 8018350:	eec6 7a86 	vdiv.f32	s15, s13, s12
			+ (this->state.psi
 8018354:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->mean_state.psi = this->mean_state.psi
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	this->mean_state.psi_dot = this->mean_state.psi_dot
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
			- (this->_state_buffer[this->_state_buffer_index].psi_dot
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	f8b3 3894 	ldrh.w	r3, [r3, #2196]	; 0x894
 801836a:	4619      	mov	r1, r3
 801836c:	687a      	ldr	r2, [r7, #4]
 801836e:	460b      	mov	r3, r1
 8018370:	009b      	lsls	r3, r3, #2
 8018372:	440b      	add	r3, r1
 8018374:	009b      	lsls	r3, r3, #2
 8018376:	4413      	add	r3, r2
 8018378:	33d4      	adds	r3, #212	; 0xd4
 801837a:	edd3 6a00 	vldr	s13, [r3]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE)
 801837e:	ed9f 6a20 	vldr	s12, [pc, #128]	; 8018400 <_ZN16TWIPR_Estimation6updateEv+0x29c>
 8018382:	eec6 7a86 	vdiv.f32	s15, s13, s12
			- (this->_state_buffer[this->_state_buffer_index].psi_dot
 8018386:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ (this->state.psi_dot
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	edd3 6a05 	vldr	s13, [r3, #20]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE);
 8018390:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8018400 <_ZN16TWIPR_Estimation6updateEv+0x29c>
 8018394:	eec6 7a86 	vdiv.f32	s15, s13, s12
			+ (this->state.psi_dot
 8018398:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->mean_state.psi_dot = this->mean_state.psi_dot
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	this->_state_buffer[this->_state_buffer_index] = this->state;
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	f8b3 3894 	ldrh.w	r3, [r3, #2196]	; 0x894
 80183a8:	4619      	mov	r1, r3
 80183aa:	687a      	ldr	r2, [r7, #4]
 80183ac:	460b      	mov	r3, r1
 80183ae:	009b      	lsls	r3, r3, #2
 80183b0:	440b      	add	r3, r1
 80183b2:	009b      	lsls	r3, r3, #2
 80183b4:	4413      	add	r3, r2
 80183b6:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	1d14      	adds	r4, r2, #4
 80183be:	1d1d      	adds	r5, r3, #4
 80183c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80183c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80183c4:	682b      	ldr	r3, [r5, #0]
 80183c6:	6023      	str	r3, [r4, #0]
	osSemaphoreRelease(_semaphore);
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
 80183ce:	4618      	mov	r0, r3
 80183d0:	f7f6 f81c 	bl	800e40c <osSemaphoreRelease>

	this->_state_buffer_index++;
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	f8b3 3894 	ldrh.w	r3, [r3, #2196]	; 0x894
 80183da:	3301      	adds	r3, #1
 80183dc:	b29a      	uxth	r2, r3
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	f8a3 2894 	strh.w	r2, [r3, #2196]	; 0x894
	if (this->_state_buffer_index == TWIPR_ESTIMATION_STATE_BUFFER_SIZE) {
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	f8b3 3894 	ldrh.w	r3, [r3, #2196]	; 0x894
 80183ea:	2b64      	cmp	r3, #100	; 0x64
 80183ec:	d103      	bne.n	80183f6 <_ZN16TWIPR_Estimation6updateEv+0x292>
		this->_state_buffer_index = 0;
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	2200      	movs	r2, #0
 80183f2:	f8a3 2894 	strh.w	r2, [r3, #2196]	; 0x894
	}

}
 80183f6:	bf00      	nop
 80183f8:	3738      	adds	r7, #56	; 0x38
 80183fa:	46bd      	mov	sp, r7
 80183fc:	bdb0      	pop	{r4, r5, r7, pc}
 80183fe:	bf00      	nop
 8018400:	42c80000 	.word	0x42c80000

08018404 <_ZN16TWIPR_Estimation8getStateEv>:
	out = this->mean_state;
	osSemaphoreRelease(_semaphore);
	return out;
}
/* ======================================================= */
twipr_estimation_state_t TWIPR_Estimation::getState() {
 8018404:	b5b0      	push	{r4, r5, r7, lr}
 8018406:	b082      	sub	sp, #8
 8018408:	af00      	add	r7, sp, #0
 801840a:	6078      	str	r0, [r7, #4]
 801840c:	6039      	str	r1, [r7, #0]
	osSemaphoreAcquire(_semaphore, portMAX_DELAY);
 801840e:	683b      	ldr	r3, [r7, #0]
 8018410:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
 8018414:	f04f 31ff 	mov.w	r1, #4294967295
 8018418:	4618      	mov	r0, r3
 801841a:	f7f5 ffa5 	bl	800e368 <osSemaphoreAcquire>
	twipr_estimation_state_t out = this->state;
 801841e:	687a      	ldr	r2, [r7, #4]
 8018420:	683b      	ldr	r3, [r7, #0]
 8018422:	4615      	mov	r5, r2
 8018424:	1d1c      	adds	r4, r3, #4
 8018426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801842a:	6823      	ldr	r3, [r4, #0]
 801842c:	602b      	str	r3, [r5, #0]
	osSemaphoreRelease(_semaphore);
 801842e:	683b      	ldr	r3, [r7, #0]
 8018430:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
 8018434:	4618      	mov	r0, r3
 8018436:	f7f5 ffe9 	bl	800e40c <osSemaphoreRelease>
	return out;
 801843a:	bf00      	nop
}
 801843c:	6878      	ldr	r0, [r7, #4]
 801843e:	3708      	adds	r7, #8
 8018440:	46bd      	mov	sp, r7
 8018442:	bdb0      	pop	{r4, r5, r7, pc}

08018444 <_ZN16TWIPR_Estimation9getSampleEv>:
/* ======================================================= */
void TWIPR_Estimation::setState(twipr_estimation_state_t state) {
	twipr_error_handler(0);
}
/* ======================================================= */
twipr_logging_estimation_t TWIPR_Estimation::getSample(){
 8018444:	b5b0      	push	{r4, r5, r7, lr}
 8018446:	b090      	sub	sp, #64	; 0x40
 8018448:	af00      	add	r7, sp, #0
 801844a:	63f8      	str	r0, [r7, #60]	; 0x3c
 801844c:	63b9      	str	r1, [r7, #56]	; 0x38
	twipr_logging_estimation_t sample;
	sample.state = this->getState();
 801844e:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8018450:	f107 0320 	add.w	r3, r7, #32
 8018454:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018456:	4618      	mov	r0, r3
 8018458:	f7ff ffd4 	bl	8018404 <_ZN16TWIPR_Estimation8getStateEv>
 801845c:	4625      	mov	r5, r4
 801845e:	f107 0420 	add.w	r4, r7, #32
 8018462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018466:	6823      	ldr	r3, [r4, #0]
 8018468:	602b      	str	r3, [r5, #0]
	sample.data = this->_sensors.getData();
 801846a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801846c:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8018470:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8018472:	463b      	mov	r3, r7
 8018474:	4611      	mov	r1, r2
 8018476:	4618      	mov	r0, r3
 8018478:	f000 f88a 	bl	8018590 <_ZN13TWIPR_Sensors7getDataEv>
 801847c:	3414      	adds	r4, #20
 801847e:	463d      	mov	r5, r7
 8018480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018484:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8018488:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return sample;
 801848c:	bf00      	nop
}
 801848e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8018490:	3740      	adds	r7, #64	; 0x40
 8018492:	46bd      	mov	sp, r7
 8018494:	bdb0      	pop	{r4, r5, r7, pc}

08018496 <_Z15estimation_taskPv>:
/* ======================================================= */
void estimation_task(void *estimation) {
 8018496:	b580      	push	{r7, lr}
 8018498:	b084      	sub	sp, #16
 801849a:	af00      	add	r7, sp, #0
 801849c:	6078      	str	r0, [r7, #4]
	TWIPR_Estimation *estimator = (TWIPR_Estimation*) estimation;
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	60fb      	str	r3, [r7, #12]
	estimator->task_function();
 80184a2:	68f8      	ldr	r0, [r7, #12]
 80184a4:	f7ff fe40 	bl	8018128 <_ZN16TWIPR_Estimation13task_functionEv>
}
 80184a8:	bf00      	nop
 80184aa:	3710      	adds	r7, #16
 80184ac:	46bd      	mov	sp, r7
 80184ae:	bd80      	pop	{r7, pc}

080184b0 <_ZN13TWIPR_SensorsC1Ev>:
 *      Author: Dustin Lehmann
 */

#include "twipr_sensors.h"

TWIPR_Sensors::TWIPR_Sensors() {
 80184b0:	b580      	push	{r7, lr}
 80184b2:	b082      	sub	sp, #8
 80184b4:	af00      	add	r7, sp, #0
 80184b6:	6078      	str	r0, [r7, #4]
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	3304      	adds	r3, #4
 80184bc:	4618      	mov	r0, r3
 80184be:	f003 feb2 	bl	801c226 <_ZN6BMI160C1Ev>

}
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	4618      	mov	r0, r3
 80184c6:	3708      	adds	r7, #8
 80184c8:	46bd      	mov	sp, r7
 80184ca:	bd80      	pop	{r7, pc}

080184cc <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t>:

/* ======================================================= */
uint8_t TWIPR_Sensors::init(twipr_sensors_config_t config) {
 80184cc:	b590      	push	{r4, r7, lr}
 80184ce:	b08d      	sub	sp, #52	; 0x34
 80184d0:	af02      	add	r7, sp, #8
 80184d2:	6078      	str	r0, [r7, #4]
 80184d4:	6039      	str	r1, [r7, #0]

	// Initialize the IMU
	bmi160_gyr_config_t gyr_config;
 80184d6:	4b23      	ldr	r3, [pc, #140]	; (8018564 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0x98>)
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	623b      	str	r3, [r7, #32]
	bmi160_acc_config_t acc_config;
 80184dc:	4b22      	ldr	r3, [pc, #136]	; (8018568 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0x9c>)
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	61fb      	str	r3, [r7, #28]
	bmi160_config_t imu_config = { .hspi = BOARD_SPI_INTERN, .CS_GPIOx =
 80184e2:	f107 0308 	add.w	r3, r7, #8
 80184e6:	2200      	movs	r2, #0
 80184e8:	601a      	str	r2, [r3, #0]
 80184ea:	605a      	str	r2, [r3, #4]
 80184ec:	609a      	str	r2, [r3, #8]
 80184ee:	60da      	str	r2, [r3, #12]
 80184f0:	611a      	str	r2, [r3, #16]
 80184f2:	4b1e      	ldr	r3, [pc, #120]	; (801856c <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0xa0>)
 80184f4:	60bb      	str	r3, [r7, #8]
 80184f6:	4b1e      	ldr	r3, [pc, #120]	; (8018570 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0xa4>)
 80184f8:	60fb      	str	r3, [r7, #12]
 80184fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80184fe:	823b      	strh	r3, [r7, #16]
	BOARD_CS_IMU_PORT, .CS_GPIO_Pin =
	BOARD_CS_IMU_PIN, .gyr = gyr_config, .acc = acc_config };
 8018500:	f107 0312 	add.w	r3, r7, #18
 8018504:	f107 0220 	add.w	r2, r7, #32
 8018508:	6810      	ldr	r0, [r2, #0]
 801850a:	6018      	str	r0, [r3, #0]
 801850c:	f107 0316 	add.w	r3, r7, #22
 8018510:	f107 021c 	add.w	r2, r7, #28
 8018514:	6810      	ldr	r0, [r2, #0]
 8018516:	6018      	str	r0, [r3, #0]
//
	uint8_t success = imu.init(imu_config);
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	1d1c      	adds	r4, r3, #4
 801851c:	466a      	mov	r2, sp
 801851e:	f107 0314 	add.w	r3, r7, #20
 8018522:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018526:	e882 0003 	stmia.w	r2, {r0, r1}
 801852a:	f107 0308 	add.w	r3, r7, #8
 801852e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018530:	4620      	mov	r0, r4
 8018532:	f003 feb8 	bl	801c2a6 <_ZN6BMI1604initE15bmi160_config_t>
 8018536:	4603      	mov	r3, r0
 8018538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (!success) {
 801853c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018540:	2b00      	cmp	r3, #0
 8018542:	d104      	bne.n	801854e <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0x82>
		this->status = TWIPR_SENSORS_STATUS_ERROR;
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	22ff      	movs	r2, #255	; 0xff
 8018548:	701a      	strb	r2, [r3, #0]
		return 0;
 801854a:	2300      	movs	r3, #0
 801854c:	e006      	b.n	801855c <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0x90>
	}

	// Initialize

	this->_config = config;
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	683a      	ldr	r2, [r7, #0]
 8018552:	651a      	str	r2, [r3, #80]	; 0x50

	this->status = TWIPR_SENSORS_STATUS_IDLE;
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	2200      	movs	r2, #0
 8018558:	701a      	strb	r2, [r3, #0]
	return 1;
 801855a:	2301      	movs	r3, #1
}
 801855c:	4618      	mov	r0, r3
 801855e:	372c      	adds	r7, #44	; 0x2c
 8018560:	46bd      	mov	sp, r7
 8018562:	bd90      	pop	{r4, r7, pc}
 8018564:	08020544 	.word	0x08020544
 8018568:	08020548 	.word	0x08020548
 801856c:	24000300 	.word	0x24000300
 8018570:	58020400 	.word	0x58020400

08018574 <_ZN13TWIPR_Sensors6updateEv>:

	return success;

}
/* ======================================================= */
void TWIPR_Sensors::update() {
 8018574:	b580      	push	{r7, lr}
 8018576:	b082      	sub	sp, #8
 8018578:	af00      	add	r7, sp, #0
 801857a:	6078      	str	r0, [r7, #4]
	this->_readImu();
 801857c:	6878      	ldr	r0, [r7, #4]
 801857e:	f000 f81c 	bl	80185ba <_ZN13TWIPR_Sensors8_readImuEv>
	this->_readMotorSpeed();
 8018582:	6878      	ldr	r0, [r7, #4]
 8018584:	f000 f838 	bl	80185f8 <_ZN13TWIPR_Sensors15_readMotorSpeedEv>
}
 8018588:	bf00      	nop
 801858a:	3708      	adds	r7, #8
 801858c:	46bd      	mov	sp, r7
 801858e:	bd80      	pop	{r7, pc}

08018590 <_ZN13TWIPR_Sensors7getDataEv>:
/* ======================================================= */
twipr_sensors_data_t TWIPR_Sensors::getData() {
 8018590:	b4b0      	push	{r4, r5, r7}
 8018592:	b083      	sub	sp, #12
 8018594:	af00      	add	r7, sp, #0
 8018596:	6078      	str	r0, [r7, #4]
 8018598:	6039      	str	r1, [r7, #0]
	return this->_data;
 801859a:	687a      	ldr	r2, [r7, #4]
 801859c:	683b      	ldr	r3, [r7, #0]
 801859e:	4615      	mov	r5, r2
 80185a0:	f103 0454 	add.w	r4, r3, #84	; 0x54
 80185a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80185a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80185a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80185ac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80185b0:	6878      	ldr	r0, [r7, #4]
 80185b2:	370c      	adds	r7, #12
 80185b4:	46bd      	mov	sp, r7
 80185b6:	bcb0      	pop	{r4, r5, r7}
 80185b8:	4770      	bx	lr

080185ba <_ZN13TWIPR_Sensors8_readImuEv>:
	this->imu.fastOffsetCalibration();
	return 0;
}

/* ======================================================= */
void TWIPR_Sensors::_readImu() {
 80185ba:	b580      	push	{r7, lr}
 80185bc:	b082      	sub	sp, #8
 80185be:	af00      	add	r7, sp, #0
 80185c0:	6078      	str	r0, [r7, #4]
	this->imu.update();
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	3304      	adds	r3, #4
 80185c6:	4618      	mov	r0, r3
 80185c8:	f003 ff9b 	bl	801c502 <_ZN6BMI1606updateEv>
	memcpy(&this->_data.acc, &this->imu.acc, sizeof(this->_data.acc));
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	3320      	adds	r3, #32
 80185d6:	220c      	movs	r2, #12
 80185d8:	4619      	mov	r1, r3
 80185da:	f005 fb82 	bl	801dce2 <memcpy>
	memcpy(&this->_data.gyr, &this->imu.gyr, sizeof(this->_data.gyr));
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	f103 0068 	add.w	r0, r3, #104	; 0x68
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	330c      	adds	r3, #12
 80185e8:	220c      	movs	r2, #12
 80185ea:	4619      	mov	r1, r3
 80185ec:	f005 fb79 	bl	801dce2 <memcpy>
}
 80185f0:	bf00      	nop
 80185f2:	3708      	adds	r7, #8
 80185f4:	46bd      	mov	sp, r7
 80185f6:	bd80      	pop	{r7, pc}

080185f8 <_ZN13TWIPR_Sensors15_readMotorSpeedEv>:

/* ======================================================= */
void TWIPR_Sensors::_readMotorSpeed() {
 80185f8:	b580      	push	{r7, lr}
 80185fa:	b084      	sub	sp, #16
 80185fc:	af00      	add	r7, sp, #0
 80185fe:	6078      	str	r0, [r7, #4]
	// TODO: I probably need some check here if this has been initialized or so

	twipr_drive_speed_t motor_speed = this->_config.drive->getSpeed();
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018604:	4618      	mov	r0, r3
 8018606:	f7ff fc49 	bl	8017e9c <_ZN11TWIPR_Drive8getSpeedEv>
 801860a:	eeb0 7a40 	vmov.f32	s14, s0
 801860e:	eef0 7a60 	vmov.f32	s15, s1
 8018612:	ed87 7a02 	vstr	s14, [r7, #8]
 8018616:	edc7 7a03 	vstr	s15, [r7, #12]

	this->_data.speed_left = motor_speed.speed_left;
 801861a:	68ba      	ldr	r2, [r7, #8]
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	655a      	str	r2, [r3, #84]	; 0x54
	this->_data.speed_right = motor_speed.speed_right;
 8018620:	68fa      	ldr	r2, [r7, #12]
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	659a      	str	r2, [r3, #88]	; 0x58

	nop();
 8018626:	f7fa f895 	bl	8012754 <_Z3nopv>
}
 801862a:	bf00      	nop
 801862c:	3710      	adds	r7, #16
 801862e:	46bd      	mov	sp, r7
 8018630:	bd80      	pop	{r7, pc}
	...

08018634 <_Z7deg2radf>:

#include "stdint.h"

const float pi = 3.14159265;

inline float deg2rad(float angle) {
 8018634:	b480      	push	{r7}
 8018636:	b083      	sub	sp, #12
 8018638:	af00      	add	r7, sp, #0
 801863a:	ed87 0a01 	vstr	s0, [r7, #4]
	return angle * pi / 180.0;
 801863e:	edd7 7a01 	vldr	s15, [r7, #4]
 8018642:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8018664 <_Z7deg2radf+0x30>
 8018646:	ee67 7a87 	vmul.f32	s15, s15, s14
 801864a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8018668 <_Z7deg2radf+0x34>
 801864e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8018652:	eef0 7a66 	vmov.f32	s15, s13
}
 8018656:	eeb0 0a67 	vmov.f32	s0, s15
 801865a:	370c      	adds	r7, #12
 801865c:	46bd      	mov	sp, r7
 801865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018662:	4770      	bx	lr
 8018664:	40490fdb 	.word	0x40490fdb
 8018668:	43340000 	.word	0x43340000

0801866c <firmware>:
uint8_t test = 0;

void sample_dma_transfer_cmplt_callback(DMA_HandleTypeDef *hdma);

/* =======================================================*/
void firmware() {
 801866c:	b580      	push	{r7, lr}
 801866e:	af00      	add	r7, sp, #0
	osThreadNew(firmware_task, (void*) &twipr_firmware,
 8018670:	4a03      	ldr	r2, [pc, #12]	; (8018680 <firmware+0x14>)
 8018672:	4904      	ldr	r1, [pc, #16]	; (8018684 <firmware+0x18>)
 8018674:	4804      	ldr	r0, [pc, #16]	; (8018688 <firmware+0x1c>)
 8018676:	f7f5 fc76 	bl	800df66 <osThreadNew>
			&firmware_task_attributes);
}
 801867a:	bf00      	nop
 801867c:	bd80      	pop	{r7, pc}
 801867e:	bf00      	nop
 8018680:	080209d4 	.word	0x080209d4
 8018684:	240152c8 	.word	0x240152c8
 8018688:	0801868d 	.word	0x0801868d

0801868c <_Z13firmware_taskPv>:

/* =======================================================*/
void firmware_task(void *argument) {
 801868c:	b580      	push	{r7, lr}
 801868e:	b084      	sub	sp, #16
 8018690:	af00      	add	r7, sp, #0
 8018692:	6078      	str	r0, [r7, #4]
	TWIPR_Firmware *firmware = (TWIPR_Firmware*) argument;
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	60fb      	str	r3, [r7, #12]
	firmware->task = xTaskGetCurrentTaskHandle();
 8018698:	f7f8 f86e 	bl	8010778 <xTaskGetCurrentTaskHandle>
 801869c:	4602      	mov	r2, r0
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	firmware->task_function();
 80186a4:	68f8      	ldr	r0, [r7, #12]
 80186a6:	f000 f84b 	bl	8018740 <_ZN14TWIPR_Firmware13task_functionEv>
}
 80186aa:	bf00      	nop
 80186ac:	3710      	adds	r7, #16
 80186ae:	46bd      	mov	sp, r7
 80186b0:	bd80      	pop	{r7, pc}

080186b2 <_ZN33twipr_firmware_register_entries_tC1Ev>:
	TWIPR_FIRMWARE_STATE_IDLE = 0,
	TWIPR_FIRMWARE_STATE_RUNNING = 1,
	TWIPR_FIRMWARE_STATE_RESET = 2,
} twipr_firmware_state_t;

typedef struct twipr_firmware_register_entries_t {
 80186b2:	b580      	push	{r7, lr}
 80186b4:	b082      	sub	sp, #8
 80186b6:	af00      	add	r7, sp, #0
 80186b8:	6078      	str	r0, [r7, #4]
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	4618      	mov	r0, r3
 80186be:	f000 fb4b 	bl	8018d58 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tEC1Ev>
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	3314      	adds	r3, #20
 80186c6:	4618      	mov	r0, r3
 80186c8:	f000 fb6a 	bl	8018da0 <_ZN24core_utils_RegisterEntryIhEC1Ev>
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	4618      	mov	r0, r3
 80186d0:	3708      	adds	r7, #8
 80186d2:	46bd      	mov	sp, r7
 80186d4:	bd80      	pop	{r7, pc}

080186d6 <_ZN14TWIPR_FirmwareC1Ev>:

/* =======================================================*/
TWIPR_Firmware::TWIPR_Firmware() {
 80186d6:	b580      	push	{r7, lr}
 80186d8:	b082      	sub	sp, #8
 80186da:	af00      	add	r7, sp, #0
 80186dc:	6078      	str	r0, [r7, #4]
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	2101      	movs	r1, #1
 80186e2:	4618      	mov	r0, r3
 80186e4:	f000 fb1a 	bl	8018d1c <_ZN22core_utils_RegisterMapILi60EEC1Et>
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	33fc      	adds	r3, #252	; 0xfc
 80186ec:	4618      	mov	r0, r3
 80186ee:	f7ff ffe0 	bl	80186b2 <_ZN33twipr_firmware_register_entries_tC1Ev>
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	2202      	movs	r2, #2
 80186f6:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	2200      	movs	r2, #0
 80186fe:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8018708:	4618      	mov	r0, r3
 801870a:	f7ff fa51 	bl	8017bb0 <_ZN11TWIPR_DriveC1Ev>
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8018714:	4618      	mov	r0, r3
 8018716:	f7fb fcde 	bl	80140d6 <_ZN26TWIPR_CommunicationManagerC1Ev>
 801871a:	687a      	ldr	r2, [r7, #4]
 801871c:	f641 036c 	movw	r3, #6252	; 0x186c
 8018720:	4413      	add	r3, r2
 8018722:	4618      	mov	r0, r3
 8018724:	f7fc fcd6 	bl	80150d4 <_ZN20TWIPR_ControlManagerC1Ev>
 8018728:	687a      	ldr	r2, [r7, #4]
 801872a:	f647 1350 	movw	r3, #31056	; 0x7950
 801872e:	4413      	add	r3, r2
 8018730:	4618      	mov	r0, r3
 8018732:	f7ff fc9c 	bl	801806e <_ZN16TWIPR_EstimationC1Ev>

}
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	4618      	mov	r0, r3
 801873a:	3708      	adds	r7, #8
 801873c:	46bd      	mov	sp, r7
 801873e:	bd80      	pop	{r7, pc}

08018740 <_ZN14TWIPR_Firmware13task_functionEv>:

/* =======================================================*/
void TWIPR_Firmware::task_function() {
 8018740:	b580      	push	{r7, lr}
 8018742:	b084      	sub	sp, #16
 8018744:	af00      	add	r7, sp, #0
 8018746:	6078      	str	r0, [r7, #4]
	this->init();
 8018748:	6878      	ldr	r0, [r7, #4]
 801874a:	f000 f847 	bl	80187dc <_ZN14TWIPR_Firmware4initEv>
	this->start();
 801874e:	6878      	ldr	r0, [r7, #4]
 8018750:	f000 fa18 	bl	8018b84 <_ZN14TWIPR_Firmware5startEv>

	while (true) {
		led1.toggle();
 8018754:	481f      	ldr	r0, [pc, #124]	; (80187d4 <_ZN14TWIPR_Firmware13task_functionEv+0x94>)
 8018756:	f003 f805 	bl	801b764 <_ZN17core_hardware_LED6toggleEv>

		twipr_drive_speed_t speed = this->_drive.getSpeed();
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8018760:	4618      	mov	r0, r3
 8018762:	f7ff fb9b 	bl	8017e9c <_ZN11TWIPR_Drive8getSpeedEv>
 8018766:	eeb0 7a40 	vmov.f32	s14, s0
 801876a:	eef0 7a60 	vmov.f32	s15, s1
 801876e:	ed87 7a02 	vstr	s14, [r7, #8]
 8018772:	edc7 7a03 	vstr	s15, [r7, #12]
		if (abs(speed.speed_left) > 50 || abs(speed.speed_right) > 50) {
 8018776:	edd7 7a02 	vldr	s15, [r7, #8]
 801877a:	eeb0 0a67 	vmov.f32	s0, s15
 801877e:	f7ff f98a 	bl	8017a96 <_ZSt3absf>
 8018782:	eef0 7a40 	vmov.f32	s15, s0
 8018786:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80187d8 <_ZN14TWIPR_Firmware13task_functionEv+0x98>
 801878a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801878e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018792:	dc0e      	bgt.n	80187b2 <_ZN14TWIPR_Firmware13task_functionEv+0x72>
 8018794:	edd7 7a03 	vldr	s15, [r7, #12]
 8018798:	eeb0 0a67 	vmov.f32	s0, s15
 801879c:	f7ff f97b 	bl	8017a96 <_ZSt3absf>
 80187a0:	eef0 7a40 	vmov.f32	s15, s0
 80187a4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80187d8 <_ZN14TWIPR_Firmware13task_functionEv+0x98>
 80187a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80187ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187b0:	dd01      	ble.n	80187b6 <_ZN14TWIPR_Firmware13task_functionEv+0x76>
 80187b2:	2301      	movs	r3, #1
 80187b4:	e000      	b.n	80187b8 <_ZN14TWIPR_Firmware13task_functionEv+0x78>
 80187b6:	2300      	movs	r3, #0
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d006      	beq.n	80187ca <_ZN14TWIPR_Firmware13task_functionEv+0x8a>
			this->_control.stop();
 80187bc:	687a      	ldr	r2, [r7, #4]
 80187be:	f641 036c 	movw	r3, #6252	; 0x186c
 80187c2:	4413      	add	r3, r2
 80187c4:	4618      	mov	r0, r3
 80187c6:	f7fc fe33 	bl	8015430 <_ZN20TWIPR_ControlManager4stopEv>
		}
		osDelay(100);
 80187ca:	2064      	movs	r0, #100	; 0x64
 80187cc:	f7f5 fc68 	bl	800e0a0 <osDelay>

	}
 80187d0:	e7c0      	b.n	8018754 <_ZN14TWIPR_Firmware13task_functionEv+0x14>
 80187d2:	bf00      	nop
 80187d4:	2401db7c 	.word	0x2401db7c
 80187d8:	42480000 	.word	0x42480000

080187dc <_ZN14TWIPR_Firmware4initEv>:
}

/* =======================================================*/
void TWIPR_Firmware::init() {
 80187dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187de:	b0d9      	sub	sp, #356	; 0x164
 80187e0:	af0a      	add	r7, sp, #40	; 0x28
 80187e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80187e6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80187ea:	6018      	str	r0, [r3, #0]
	robot_control_init();
 80187ec:	f001 f81d 	bl	801982a <_Z18robot_control_initv>
	robot_control_start();
 80187f0:	f001 f822 	bl	8019838 <_Z19robot_control_startv>

	osDelay(250);
 80187f4:	20fa      	movs	r0, #250	; 0xfa
 80187f6:	f7f5 fc53 	bl	800e0a0 <osDelay>
	// Initialize the communication module
	twipr_communication_config_t twipr_comm_config = { .huart = BOARD_CM4_UART,
 80187fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80187fe:	2228      	movs	r2, #40	; 0x28
 8018800:	2100      	movs	r1, #0
 8018802:	4618      	mov	r0, r3
 8018804:	f005 fa7b 	bl	801dcfe <memset>
 8018808:	4bcf      	ldr	r3, [pc, #828]	; (8018b48 <_ZN14TWIPR_Firmware4initEv+0x36c>)
 801880a:	673b      	str	r3, [r7, #112]	; 0x70
 801880c:	4bcf      	ldr	r3, [pc, #828]	; (8018b4c <_ZN14TWIPR_Firmware4initEv+0x370>)
 801880e:	677b      	str	r3, [r7, #116]	; 0x74
 8018810:	230a      	movs	r3, #10
 8018812:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8018816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801881a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
			GPIO_PIN_7), .reg_map_control = &this->_control.reg_map,
			.reg_map_general = &this->register_map, .sample_tx_buffer =
					this->_sample_buffer_tx, .len_sample_buffer =
			TWIPR_FIRMWARE_SAMPLE_BUFFER_SIZE, .trajectory_rx_buffer =
					this->_control.trajectory_rx_buffer,
			.len_trajectory_buffer = TWIPR_CONTROL_TRAJECTORY_BUFFER_SIZE };
 801881e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8018822:	3308      	adds	r3, #8
 8018824:	2280      	movs	r2, #128	; 0x80
 8018826:	49ca      	ldr	r1, [pc, #808]	; (8018b50 <_ZN14TWIPR_Firmware4initEv+0x374>)
 8018828:	4618      	mov	r0, r3
 801882a:	f004 fbde 	bl	801cfea <_ZN15core_utils_GPIOC1EP12GPIO_TypeDeft>
 801882e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8018832:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8018836:	681a      	ldr	r2, [r3, #0]
 8018838:	f641 2318 	movw	r3, #6680	; 0x1a18
 801883c:	4413      	add	r3, r2
 801883e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8018842:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8018846:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
					this->_sample_buffer_tx, .len_sample_buffer =
 8018850:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8018854:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8018858:	681a      	ldr	r2, [r3, #0]
 801885a:	f248 5360 	movw	r3, #34144	; 0x8560
 801885e:	4413      	add	r3, r2
			.len_trajectory_buffer = TWIPR_CONTROL_TRAJECTORY_BUFFER_SIZE };
 8018860:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					this->_control.trajectory_rx_buffer,
 8018864:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8018868:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801886c:	681a      	ldr	r2, [r3, #0]
 801886e:	f641 2374 	movw	r3, #6772	; 0x1a74
 8018872:	4413      	add	r3, r2
			.len_trajectory_buffer = TWIPR_CONTROL_TRAJECTORY_BUFFER_SIZE };
 8018874:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	this->_comm.init(twipr_comm_config);
 8018878:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801887c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	f503 7650 	add.w	r6, r3, #832	; 0x340
 8018886:	466d      	mov	r5, sp
 8018888:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 801888c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801888e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018890:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018894:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8018898:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801889c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801889e:	4630      	mov	r0, r6
 80188a0:	f7fb fc3a 	bl	8014118 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t>
	this->_comm.registerCallback(TWIPR_COMM_CALLBACK_NEW_TRAJECTORY,
 80188a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80188a8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	f503 7450 	add.w	r4, r3, #832	; 0x340
			core_utils_Callback<void, uint16_t>(&this->_control,
 80188b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80188b6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	f641 016c 	movw	r1, #6252	; 0x186c
 80188c0:	4419      	add	r1, r3
 80188c2:	4ba4      	ldr	r3, [pc, #656]	; (8018b54 <_ZN14TWIPR_Firmware4initEv+0x378>)
 80188c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80188c8:	2300      	movs	r3, #0
 80188ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80188ce:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80188d2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80188d6:	cb0c      	ldmia	r3, {r2, r3}
 80188d8:	f000 fa86 	bl	8018de8 <_ZN19core_utils_CallbackIvtEC1I20TWIPR_ControlManagerEEPT_MS3_FvtE>
	this->_comm.registerCallback(TWIPR_COMM_CALLBACK_NEW_TRAJECTORY,
 80188dc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80188e0:	461a      	mov	r2, r3
 80188e2:	2100      	movs	r1, #0
 80188e4:	4620      	mov	r0, r4
 80188e6:	f7fb fcfd 	bl	80142e4 <_ZN26TWIPR_CommunicationManager16registerCallbackE33twipr_communication_callback_id_t19core_utils_CallbackIvtE>
					&TWIPR_ControlManager::newTrajectoryReceived_callback));

	// Initilize the estimation module
	twipr_estimation_config_t twipr_estimation_config = {
 80188ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80188ee:	2220      	movs	r2, #32
 80188f0:	2100      	movs	r1, #0
 80188f2:	4618      	mov	r0, r3
 80188f4:	f005 fa03 	bl	801dcfe <memset>
 80188f8:	2301      	movs	r3, #1
 80188fa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 80188fe:	2301      	movs	r3, #1
 8018900:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			.drive = &this->_drive, .enable_slip_detection = 1,
 8018904:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8018908:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801890c:	681b      	ldr	r3, [r3, #0]
 801890e:	f503 7398 	add.w	r3, r3, #304	; 0x130
			.enable_angle_threshold = 1, .angle_threshold = deg2rad(70.0),
			.model = twipr_model_small };
 8018912:	653b      	str	r3, [r7, #80]	; 0x50
			.enable_angle_threshold = 1, .angle_threshold = deg2rad(70.0),
 8018914:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8018b58 <_ZN14TWIPR_Firmware4initEv+0x37c>
 8018918:	f7ff fe8c 	bl	8018634 <_Z7deg2radf>
 801891c:	eef0 7a40 	vmov.f32	s15, s0
			.model = twipr_model_small };
 8018920:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8018924:	4b8d      	ldr	r3, [pc, #564]	; (8018b5c <_ZN14TWIPR_Firmware4initEv+0x380>)
 8018926:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 801892a:	461d      	mov	r5, r3
 801892c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801892e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018930:	682b      	ldr	r3, [r5, #0]
 8018932:	6023      	str	r3, [r4, #0]

	this->_estimation.init(twipr_estimation_config);
 8018934:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8018938:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	f647 1650 	movw	r6, #31056	; 0x7950
 8018942:	441e      	add	r6, r3
 8018944:	466d      	mov	r5, sp
 8018946:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 801894a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801894c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801894e:	6823      	ldr	r3, [r4, #0]
 8018950:	602b      	str	r3, [r5, #0]
 8018952:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018956:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018958:	4630      	mov	r0, r6
 801895a:	f7ff fba3 	bl	80180a4 <_ZN16TWIPR_Estimation4initE25twipr_estimation_config_t>

	// Initialize the control module
	twipr_control_config_t twipr_control_config = { .estimation =
 801895e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8018962:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8018966:	4618      	mov	r0, r3
 8018968:	2330      	movs	r3, #48	; 0x30
 801896a:	461a      	mov	r2, r3
 801896c:	2100      	movs	r1, #0
 801896e:	f005 f9c6 	bl	801dcfe <memset>
 8018972:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8018976:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801897a:	4a79      	ldr	r2, [pc, #484]	; (8018b60 <_ZN14TWIPR_Firmware4initEv+0x384>)
 801897c:	629a      	str	r2, [r3, #40]	; 0x28
 801897e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8018982:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8018986:	2264      	movs	r2, #100	; 0x64
 8018988:	62da      	str	r2, [r3, #44]	; 0x2c
			&this->_estimation, .drive = &this->_drive, .max_torque =
 801898a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801898e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8018992:	681a      	ldr	r2, [r3, #0]
 8018994:	f647 1350 	movw	r3, #31056	; 0x7950
 8018998:	4413      	add	r3, r2
	TWIPR_CONTROL_MAX_TORQUE, .freq = 100 };
 801899a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 801899e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80189a2:	6013      	str	r3, [r2, #0]
			&this->_estimation, .drive = &this->_drive, .max_torque =
 80189a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80189a8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80189ac:	681b      	ldr	r3, [r3, #0]
 80189ae:	f503 7298 	add.w	r2, r3, #304	; 0x130
	TWIPR_CONTROL_MAX_TORQUE, .freq = 100 };
 80189b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80189b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80189ba:	605a      	str	r2, [r3, #4]
	memcpy(twipr_control_config.K, twipr_control_default_K, sizeof(float) * 8);
 80189bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80189c0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80189c4:	4a67      	ldr	r2, [pc, #412]	; (8018b64 <_ZN14TWIPR_Firmware4initEv+0x388>)
 80189c6:	f103 0408 	add.w	r4, r3, #8
 80189ca:	4615      	mov	r5, r2
 80189cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80189ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80189d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80189d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	this->_control.init(twipr_control_config);
 80189d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80189dc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80189e0:	681b      	ldr	r3, [r3, #0]
 80189e2:	f641 066c 	movw	r6, #6252	; 0x186c
 80189e6:	441e      	add	r6, r3
 80189e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80189ec:	f5a3 7c8c 	sub.w	ip, r3, #280	; 0x118
 80189f0:	466d      	mov	r5, sp
 80189f2:	f10c 040c 	add.w	r4, ip, #12
 80189f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80189f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80189fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80189fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80189fe:	6823      	ldr	r3, [r4, #0]
 8018a00:	602b      	str	r3, [r5, #0]
 8018a02:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
 8018a06:	4630      	mov	r0, r6
 8018a08:	f7fc fb9e 	bl	8015148 <_ZN20TWIPR_ControlManager4initE22twipr_control_config_t>
	this->_control.registerCallback(TWIPR_CONTROL_CALLBACK_STEP,
 8018a0c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8018a10:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	f641 046c 	movw	r4, #6252	; 0x186c
 8018a1a:	441c      	add	r4, r3
			core_utils_Callback<void, uint32_t>(this,
 8018a1c:	4b52      	ldr	r3, [pc, #328]	; (8018b68 <_ZN14TWIPR_Firmware4initEv+0x38c>)
 8018a1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8018a22:	2300      	movs	r3, #0
 8018a24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8018a28:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8018a2c:	f5a3 719a 	sub.w	r1, r3, #308	; 0x134
 8018a30:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8018a34:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8018a38:	cb0c      	ldmia	r3, {r2, r3}
 8018a3a:	6809      	ldr	r1, [r1, #0]
 8018a3c:	f000 fa08 	bl	8018e50 <_ZN19core_utils_CallbackIvmEC1I14TWIPR_FirmwareEEPT_MS3_FvmE>
	this->_control.registerCallback(TWIPR_CONTROL_CALLBACK_STEP,
 8018a40:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8018a44:	461a      	mov	r2, r3
 8018a46:	2103      	movs	r1, #3
 8018a48:	4620      	mov	r0, r4
 8018a4a:	f7fd f979 	bl	8015d40 <_ZN20TWIPR_ControlManager16registerCallbackE27twipr_control_callback_id_t19core_utils_CallbackIvmE>
					&TWIPR_Firmware::_controlStep_callback));

	// Initialize the drive module
	twipr_drive_config_t twipr_drive_config = { .id_left = 1, .id_right = 2,
 8018a4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8018a52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8018a56:	4a45      	ldr	r2, [pc, #276]	; (8018b6c <_ZN14TWIPR_Firmware4initEv+0x390>)
 8018a58:	461c      	mov	r4, r3
 8018a5a:	4615      	mov	r5, r2
 8018a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018a60:	682b      	ldr	r3, [r5, #0]
 8018a62:	6023      	str	r3, [r4, #0]
			.direction_left = -1, .direction_right = 1, .torque_max = 0.3,
			.modbus_config = { .huart = BOARD_RS485_UART, .EN_GPIOx =
			BOARD_RS485_UART_EN_GPIOx, .EN_GPIO_Pin =
			BOARD_RS485_UART_EN_GPIO_PIN, .hardware = MB_UART_DMA }, };

	this->_drive.init(twipr_drive_config);
 8018a64:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8018a68:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	f503 7498 	add.w	r4, r3, #304	; 0x130
 8018a72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8018a76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8018a7a:	466d      	mov	r5, sp
 8018a7c:	f103 020c 	add.w	r2, r3, #12
 8018a80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018a84:	e885 0003 	stmia.w	r5, {r0, r1}
 8018a88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018a8a:	4620      	mov	r0, r4
 8018a8c:	f7ff f8b0 	bl	8017bf0 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t>
//	float voltage = this->_drive.getVoltage();

// Initialize the supervisor module

// Initalize the data transfer
	HAL_DMA_RegisterCallback(TWIPR_FIRMWARE_SAMPLE_DMA_STREAM,
 8018a90:	4a37      	ldr	r2, [pc, #220]	; (8018b70 <_ZN14TWIPR_Firmware4initEv+0x394>)
 8018a92:	2100      	movs	r1, #0
 8018a94:	4837      	ldr	r0, [pc, #220]	; (8018b74 <_ZN14TWIPR_Firmware4initEv+0x398>)
 8018a96:	f7eb fc4f 	bl	8004338 <HAL_DMA_RegisterCallback>
			HAL_DMA_XFER_CPLT_CB_ID, sample_dma_transfer_cmplt_callback);

	// Register all register entries
//	this->reg_entries.firmware_state.set(0x01, &this->register_map,
//			&this->firmware_state, REGISTER_ENTRY_READ);
	this->reg_entries.test.set(0x02, &this->register_map, &test,
 8018a9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8018a9e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	f503 7088 	add.w	r0, r3, #272	; 0x110
 8018aa8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8018aac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8018ab0:	681a      	ldr	r2, [r3, #0]
 8018ab2:	2302      	movs	r3, #2
 8018ab4:	9300      	str	r3, [sp, #0]
 8018ab6:	4b30      	ldr	r3, [pc, #192]	; (8018b78 <_ZN14TWIPR_Firmware4initEv+0x39c>)
 8018ab8:	2102      	movs	r1, #2
 8018aba:	f000 f9fd 	bl	8018eb8 <_ZN24core_utils_RegisterEntryIhE3setEtP11RegisterMapPh19register_entry_rw_t>
			REGISTER_ENTRY_READWRITE);

	this->_sample_buffer_index = 0;
 8018abe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8018ac2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8018ac6:	681b      	ldr	r3, [r3, #0]
 8018ac8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8018acc:	461a      	mov	r2, r3
 8018ace:	2300      	movs	r3, #0
 8018ad0:	f8c2 38a8 	str.w	r3, [r2, #2216]	; 0x8a8

	core_utils_gpio_registerExtiCallback(GPIO_PIN_8,
			core_utils_Callback<void, void>(&this->_comm,
 8018ad4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8018ad8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8018adc:	681b      	ldr	r3, [r3, #0]
 8018ade:	f503 7150 	add.w	r1, r3, #832	; 0x340
 8018ae2:	4b26      	ldr	r3, [pc, #152]	; (8018b7c <_ZN14TWIPR_Firmware4initEv+0x3a0>)
 8018ae4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8018ae8:	2300      	movs	r3, #0
 8018aea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8018aee:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 8018af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018af6:	cb0c      	ldmia	r3, {r2, r3}
 8018af8:	f000 f9fc 	bl	8018ef4 <_ZN19core_utils_CallbackIvvEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvvE>
	core_utils_gpio_registerExtiCallback(GPIO_PIN_8,
 8018afc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8018b00:	4619      	mov	r1, r3
 8018b02:	f44f 7080 	mov.w	r0, #256	; 0x100
 8018b06:	f004 faa3 	bl	801d050 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE>
					&TWIPR_CommunicationManager::resetUART));

	core_utils_gpio_registerExtiCallback(GPIO_PIN_2,
			core_utils_Callback<void, void>(&this->_comm,
 8018b0a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8018b0e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	f503 7150 	add.w	r1, r3, #832	; 0x340
 8018b18:	4b19      	ldr	r3, [pc, #100]	; (8018b80 <_ZN14TWIPR_Firmware4initEv+0x3a4>)
 8018b1a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8018b1e:	2300      	movs	r3, #0
 8018b20:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8018b24:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8018b28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018b2c:	cb0c      	ldmia	r3, {r2, r3}
 8018b2e:	f000 f9e1 	bl	8018ef4 <_ZN19core_utils_CallbackIvvEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvvE>
	core_utils_gpio_registerExtiCallback(GPIO_PIN_2,
 8018b32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8018b36:	4619      	mov	r1, r3
 8018b38:	2004      	movs	r0, #4
 8018b3a:	f004 fa89 	bl	801d050 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE>
					&TWIPR_CommunicationManager::spi_pin_callback));

}
 8018b3e:	bf00      	nop
 8018b40:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8018b44:	46bd      	mov	sp, r7
 8018b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b48:	24000688 	.word	0x24000688
 8018b4c:	2400024c 	.word	0x2400024c
 8018b50:	58021000 	.word	0x58021000
 8018b54:	0801549f 	.word	0x0801549f
 8018b58:	428c0000 	.word	0x428c0000
 8018b5c:	2400003c 	.word	0x2400003c
 8018b60:	3e99999a 	.word	0x3e99999a
 8018b64:	2400001c 	.word	0x2400001c
 8018b68:	08018bc9 	.word	0x08018bc9
 8018b6c:	08020558 	.word	0x08020558
 8018b70:	08018d01 	.word	0x08018d01
 8018b74:	24000a24 	.word	0x24000a24
 8018b78:	2401db78 	.word	0x2401db78
 8018b7c:	08014311 	.word	0x08014311
 8018b80:	080147c5 	.word	0x080147c5

08018b84 <_ZN14TWIPR_Firmware5startEv>:

/* =======================================================*/
void TWIPR_Firmware::start() {
 8018b84:	b580      	push	{r7, lr}
 8018b86:	b082      	sub	sp, #8
 8018b88:	af00      	add	r7, sp, #0
 8018b8a:	6078      	str	r0, [r7, #4]

	// Start the communication module
	this->_comm.start();
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8018b92:	4618      	mov	r0, r3
 8018b94:	f7fb fb92 	bl	80142bc <_ZN26TWIPR_CommunicationManager5startEv>

	// Start the estimation module
	this->_estimation.start();
 8018b98:	687a      	ldr	r2, [r7, #4]
 8018b9a:	f647 1350 	movw	r3, #31056	; 0x7950
 8018b9e:	4413      	add	r3, r2
 8018ba0:	4618      	mov	r0, r3
 8018ba2:	f7ff faaf 	bl	8018104 <_ZN16TWIPR_Estimation5startEv>

	// Start the control module
	this->_drive.startup_check();
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8018bac:	4618      	mov	r0, r3
 8018bae:	f7ff f94f 	bl	8017e50 <_ZN11TWIPR_Drive13startup_checkEv>
	this->_control.start();
 8018bb2:	687a      	ldr	r2, [r7, #4]
 8018bb4:	f641 036c 	movw	r3, #6252	; 0x186c
 8018bb8:	4413      	add	r3, r2
 8018bba:	4618      	mov	r0, r3
 8018bbc:	f7fc fbe4 	bl	8015388 <_ZN20TWIPR_ControlManager5startEv>
}
 8018bc0:	bf00      	nop
 8018bc2:	3708      	adds	r7, #8
 8018bc4:	46bd      	mov	sp, r7
 8018bc6:	bd80      	pop	{r7, pc}

08018bc8 <_ZN14TWIPR_Firmware21_controlStep_callbackEm>:
//	}
//	}
}

/* =======================================================*/
void TWIPR_Firmware::_controlStep_callback(uint32_t tick) {
 8018bc8:	b5b0      	push	{r4, r5, r7, lr}
 8018bca:	b098      	sub	sp, #96	; 0x60
 8018bcc:	af00      	add	r7, sp, #0
 8018bce:	65f8      	str	r0, [r7, #92]	; 0x5c
 8018bd0:	65b9      	str	r1, [r7, #88]	; 0x58

	this->tick = tick;
 8018bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018bd4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8018bd8:	461a      	mov	r2, r3
 8018bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018bdc:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

//	osSemaphoreAcquire(sem, 100);
	// Build the sample
	this->_sample_buffer[this->_sample_buffer_index].general.tick = this->tick;
 8018be0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018be2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8018be6:	f8d3 38a8 	ldr.w	r3, [r3, #2216]	; 0x8a8
 8018bea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8018bec:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018bf0:	f8d2 2214 	ldr.w	r2, [r2, #532]	; 0x214
 8018bf4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8018bf6:	2054      	movs	r0, #84	; 0x54
 8018bf8:	fb00 f303 	mul.w	r3, r0, r3
 8018bfc:	4419      	add	r1, r3
 8018bfe:	f248 2318 	movw	r3, #33304	; 0x8218
 8018c02:	440b      	add	r3, r1
 8018c04:	601a      	str	r2, [r3, #0]
	this->_sample_buffer[this->_sample_buffer_index].control =
			this->_control.getSample();
 8018c06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8018c08:	f641 036c 	movw	r3, #6252	; 0x186c
 8018c0c:	4413      	add	r3, r2
	this->_sample_buffer[this->_sample_buffer_index].control =
 8018c0e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8018c10:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018c14:	f8d2 28a8 	ldr.w	r2, [r2, #2216]	; 0x8a8
			this->_control.getSample();
 8018c18:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8018c1a:	2054      	movs	r0, #84	; 0x54
 8018c1c:	fb00 f202 	mul.w	r2, r0, r2
 8018c20:	440a      	add	r2, r1
 8018c22:	f248 2418 	movw	r4, #33304	; 0x8218
 8018c26:	4414      	add	r4, r2
 8018c28:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8018c2c:	4619      	mov	r1, r3
 8018c2e:	4610      	mov	r0, r2
 8018c30:	f7fd f8e4 	bl	8015dfc <_ZN20TWIPR_ControlManager9getSampleEv>
 8018c34:	3404      	adds	r4, #4
 8018c36:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8018c3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018c3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018c42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	this->_sample_buffer[this->_sample_buffer_index].estimation =
			this->_estimation.getSample();
 8018c46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8018c48:	f647 1350 	movw	r3, #31056	; 0x7950
 8018c4c:	4413      	add	r3, r2
	this->_sample_buffer[this->_sample_buffer_index].estimation =
 8018c4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8018c50:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018c54:	f8d2 28a8 	ldr.w	r2, [r2, #2216]	; 0x8a8
			this->_estimation.getSample();
 8018c58:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8018c5a:	2054      	movs	r0, #84	; 0x54
 8018c5c:	fb00 f202 	mul.w	r2, r0, r2
 8018c60:	440a      	add	r2, r1
 8018c62:	f248 2438 	movw	r4, #33336	; 0x8238
 8018c66:	4414      	add	r4, r2
 8018c68:	463a      	mov	r2, r7
 8018c6a:	4619      	mov	r1, r3
 8018c6c:	4610      	mov	r0, r2
 8018c6e:	f7ff fbe9 	bl	8018444 <_ZN16TWIPR_Estimation9getSampleEv>
 8018c72:	4625      	mov	r5, r4
 8018c74:	463c      	mov	r4, r7
 8018c76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018c78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018c7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018c7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018c7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018c80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018c82:	6823      	ldr	r3, [r4, #0]
 8018c84:	602b      	str	r3, [r5, #0]

	this->_sample_buffer_index++;
 8018c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018c88:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8018c8c:	f8d3 38a8 	ldr.w	r3, [r3, #2216]	; 0x8a8
 8018c90:	3301      	adds	r3, #1
 8018c92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8018c94:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018c98:	f8c2 38a8 	str.w	r3, [r2, #2216]	; 0x8a8

	if (this->_sample_buffer_index == TWIPR_FIRMWARE_SAMPLE_BUFFER_SIZE) {
 8018c9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018c9e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8018ca2:	f8d3 38a8 	ldr.w	r3, [r3, #2216]	; 0x8a8
 8018ca6:	2b0a      	cmp	r3, #10
 8018ca8:	d115      	bne.n	8018cd6 <_ZN14TWIPR_Firmware21_controlStep_callbackEm+0x10e>
		// Copy the sample buffer to the outgoing buffer
		HAL_DMA_Start_IT(TWIPR_FIRMWARE_SAMPLE_DMA_STREAM,
				(uint32_t) &this->_sample_buffer,
 8018caa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8018cac:	f248 2318 	movw	r3, #33304	; 0x8218
 8018cb0:	4413      	add	r3, r2
		HAL_DMA_Start_IT(TWIPR_FIRMWARE_SAMPLE_DMA_STREAM,
 8018cb2:	4619      	mov	r1, r3
				(uint32_t) &this->_sample_buffer_tx,
 8018cb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8018cb6:	f248 5360 	movw	r3, #34144	; 0x8560
 8018cba:	4413      	add	r3, r2
		HAL_DMA_Start_IT(TWIPR_FIRMWARE_SAMPLE_DMA_STREAM,
 8018cbc:	461a      	mov	r2, r3
 8018cbe:	f44f 7352 	mov.w	r3, #840	; 0x348
 8018cc2:	4807      	ldr	r0, [pc, #28]	; (8018ce0 <_ZN14TWIPR_Firmware21_controlStep_callbackEm+0x118>)
 8018cc4:	f7e9 fc40 	bl	8002548 <HAL_DMA_Start_IT>
				TWIPR_FIRMWARE_SAMPLE_BUFFER_SIZE
						* sizeof(twipr_logging_sample_t));
		this->_sample_buffer_index = 0;
 8018cc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018cca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8018cce:	461a      	mov	r2, r3
 8018cd0:	2300      	movs	r3, #0
 8018cd2:	f8c2 38a8 	str.w	r3, [r2, #2216]	; 0x8a8
	} else {
//		osSemaphoreRelease(sem);
	}

}
 8018cd6:	bf00      	nop
 8018cd8:	3760      	adds	r7, #96	; 0x60
 8018cda:	46bd      	mov	sp, r7
 8018cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8018cde:	bf00      	nop
 8018ce0:	24000a24 	.word	0x24000a24

08018ce4 <_ZN14TWIPR_Firmware22notifySampleBufferFullEv>:

/* =======================================================*/
void TWIPR_Firmware::notifySampleBufferFull() {
 8018ce4:	b580      	push	{r7, lr}
 8018ce6:	b082      	sub	sp, #8
 8018ce8:	af00      	add	r7, sp, #0
 8018cea:	6078      	str	r0, [r7, #4]
	this->_comm.sampleBufferFull();
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8018cf2:	4618      	mov	r0, r3
 8018cf4:	f7fb fd33 	bl	801475e <_ZN26TWIPR_CommunicationManager16sampleBufferFullEv>
}
 8018cf8:	bf00      	nop
 8018cfa:	3708      	adds	r7, #8
 8018cfc:	46bd      	mov	sp, r7
 8018cfe:	bd80      	pop	{r7, pc}

08018d00 <_Z34sample_dma_transfer_cmplt_callbackP19__DMA_HandleTypeDef>:

/* =======================================================*/
void sample_dma_transfer_cmplt_callback(DMA_HandleTypeDef *hdma) {
 8018d00:	b580      	push	{r7, lr}
 8018d02:	b082      	sub	sp, #8
 8018d04:	af00      	add	r7, sp, #0
 8018d06:	6078      	str	r0, [r7, #4]
//	osSemaphoreRelease(sem);

	twipr_firmware.notifySampleBufferFull();
 8018d08:	4803      	ldr	r0, [pc, #12]	; (8018d18 <_Z34sample_dma_transfer_cmplt_callbackP19__DMA_HandleTypeDef+0x18>)
 8018d0a:	f7ff ffeb 	bl	8018ce4 <_ZN14TWIPR_Firmware22notifySampleBufferFullEv>
}
 8018d0e:	bf00      	nop
 8018d10:	3708      	adds	r7, #8
 8018d12:	46bd      	mov	sp, r7
 8018d14:	bd80      	pop	{r7, pc}
 8018d16:	bf00      	nop
 8018d18:	240152c8 	.word	0x240152c8

08018d1c <_ZN22core_utils_RegisterMapILi60EEC1Et>:
	core_utils_RegisterMap<size>(uint16_t address) {
 8018d1c:	b580      	push	{r7, lr}
 8018d1e:	b082      	sub	sp, #8
 8018d20:	af00      	add	r7, sp, #0
 8018d22:	6078      	str	r0, [r7, #4]
 8018d24:	460b      	mov	r3, r1
 8018d26:	807b      	strh	r3, [r7, #2]
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	f7fd f8aa 	bl	8015e84 <_ZN11RegisterMapC1Ev>
 8018d30:	4a08      	ldr	r2, [pc, #32]	; (8018d54 <_ZN22core_utils_RegisterMapILi60EEC1Et+0x38>)
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	601a      	str	r2, [r3, #0]
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	330c      	adds	r3, #12
 8018d3a:	22f0      	movs	r2, #240	; 0xf0
 8018d3c:	2100      	movs	r1, #0
 8018d3e:	4618      	mov	r0, r3
 8018d40:	f004 ffdd 	bl	801dcfe <memset>
		this->address = address;
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	887a      	ldrh	r2, [r7, #2]
 8018d48:	809a      	strh	r2, [r3, #4]
	}
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	4618      	mov	r0, r3
 8018d4e:	3708      	adds	r7, #8
 8018d50:	46bd      	mov	sp, r7
 8018d52:	bd80      	pop	{r7, pc}
 8018d54:	08020a00 	.word	0x08020a00

08018d58 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tEC1Ev>:
	core_utils_RegisterEntry() {
 8018d58:	b590      	push	{r4, r7, lr}
 8018d5a:	b08b      	sub	sp, #44	; 0x2c
 8018d5c:	af00      	add	r7, sp, #0
 8018d5e:	6078      	str	r0, [r7, #4]
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	4618      	mov	r0, r3
 8018d64:	f7fc f8a8 	bl	8014eb8 <_ZN13RegisterEntryC1Ev>
 8018d68:	4a0c      	ldr	r2, [pc, #48]	; (8018d9c <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tEC1Ev+0x44>)
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	601a      	str	r2, [r3, #0]
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	2201      	movs	r2, #1
 8018d72:	71da      	strb	r2, [r3, #7]
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	f103 0410 	add.w	r4, r3, #16
 8018d7a:	f107 0308 	add.w	r3, r7, #8
 8018d7e:	4618      	mov	r0, r3
 8018d80:	f7f9 ff00 	bl	8012b84 <_ZN19core_utils_CallbackIvvEC1Ev>
 8018d84:	f107 0308 	add.w	r3, r7, #8
 8018d88:	4619      	mov	r1, r3
 8018d8a:	4620      	mov	r0, r4
 8018d8c:	f7fc f8bc 	bl	8014f08 <_ZN8CallbackC1EOS_>
	}
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	4618      	mov	r0, r3
 8018d94:	372c      	adds	r7, #44	; 0x2c
 8018d96:	46bd      	mov	sp, r7
 8018d98:	bd90      	pop	{r4, r7, pc}
 8018d9a:	bf00      	nop
 8018d9c:	08020a60 	.word	0x08020a60

08018da0 <_ZN24core_utils_RegisterEntryIhEC1Ev>:
	core_utils_RegisterEntry() {
 8018da0:	b590      	push	{r4, r7, lr}
 8018da2:	b08b      	sub	sp, #44	; 0x2c
 8018da4:	af00      	add	r7, sp, #0
 8018da6:	6078      	str	r0, [r7, #4]
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	4618      	mov	r0, r3
 8018dac:	f7fc f884 	bl	8014eb8 <_ZN13RegisterEntryC1Ev>
 8018db0:	4a0c      	ldr	r2, [pc, #48]	; (8018de4 <_ZN24core_utils_RegisterEntryIhEC1Ev+0x44>)
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	601a      	str	r2, [r3, #0]
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	2201      	movs	r2, #1
 8018dba:	71da      	strb	r2, [r3, #7]
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	f103 0410 	add.w	r4, r3, #16
 8018dc2:	f107 0308 	add.w	r3, r7, #8
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	f7f9 fedc 	bl	8012b84 <_ZN19core_utils_CallbackIvvEC1Ev>
 8018dcc:	f107 0308 	add.w	r3, r7, #8
 8018dd0:	4619      	mov	r1, r3
 8018dd2:	4620      	mov	r0, r4
 8018dd4:	f7fc f898 	bl	8014f08 <_ZN8CallbackC1EOS_>
	}
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	4618      	mov	r0, r3
 8018ddc:	372c      	adds	r7, #44	; 0x2c
 8018dde:	46bd      	mov	sp, r7
 8018de0:	bd90      	pop	{r4, r7, pc}
 8018de2:	bf00      	nop
 8018de4:	08020a30 	.word	0x08020a30

08018de8 <_ZN19core_utils_CallbackIvtEC1I20TWIPR_ControlManagerEEPT_MS3_FvtE>:
	core_utils_Callback(T *object, R (T::*member)(A)) {
 8018de8:	b5b0      	push	{r4, r5, r7, lr}
 8018dea:	b08a      	sub	sp, #40	; 0x28
 8018dec:	af00      	add	r7, sp, #0
 8018dee:	60f8      	str	r0, [r7, #12]
 8018df0:	60b9      	str	r1, [r7, #8]
 8018df2:	4639      	mov	r1, r7
 8018df4:	e881 000c 	stmia.w	r1, {r2, r3}
 8018df8:	68fb      	ldr	r3, [r7, #12]
 8018dfa:	4618      	mov	r0, r3
 8018dfc:	f7f9 f970 	bl	80120e0 <_ZN8CallbackC1Ev>
 8018e00:	4a12      	ldr	r2, [pc, #72]	; (8018e4c <_ZN19core_utils_CallbackIvtEC1I20TWIPR_ControlManagerEEPT_MS3_FvtE+0x64>)
 8018e02:	68fb      	ldr	r3, [r7, #12]
 8018e04:	601a      	str	r2, [r3, #0]
 8018e06:	68fb      	ldr	r3, [r7, #12]
 8018e08:	2200      	movs	r2, #0
 8018e0a:	711a      	strb	r2, [r3, #4]
 8018e0c:	68fb      	ldr	r3, [r7, #12]
 8018e0e:	3308      	adds	r3, #8
 8018e10:	2100      	movs	r1, #0
 8018e12:	4618      	mov	r0, r3
 8018e14:	f7f9 fb88 	bl	8012528 <_ZN26core_utils_FunctionPointerIvtEC1EPFvtE>
		_fp = core_utils_FunctionPointer<R,A>(object, member);
 8018e18:	f107 0010 	add.w	r0, r7, #16
 8018e1c:	463b      	mov	r3, r7
 8018e1e:	cb0c      	ldmia	r3, {r2, r3}
 8018e20:	68b9      	ldr	r1, [r7, #8]
 8018e22:	f000 f89b 	bl	8018f5c <_ZN26core_utils_FunctionPointerIvtEC1I20TWIPR_ControlManagerEEPT_MS3_FvtE>
 8018e26:	68fb      	ldr	r3, [r7, #12]
 8018e28:	f103 0408 	add.w	r4, r3, #8
 8018e2c:	f107 0510 	add.w	r5, r7, #16
 8018e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018e34:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018e38:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8018e3c:	68fb      	ldr	r3, [r7, #12]
 8018e3e:	2201      	movs	r2, #1
 8018e40:	711a      	strb	r2, [r3, #4]
	}
 8018e42:	68fb      	ldr	r3, [r7, #12]
 8018e44:	4618      	mov	r0, r3
 8018e46:	3728      	adds	r7, #40	; 0x28
 8018e48:	46bd      	mov	sp, r7
 8018e4a:	bdb0      	pop	{r4, r5, r7, pc}
 8018e4c:	08020630 	.word	0x08020630

08018e50 <_ZN19core_utils_CallbackIvmEC1I14TWIPR_FirmwareEEPT_MS3_FvmE>:
	core_utils_Callback(T *object, R (T::*member)(A)) {
 8018e50:	b5b0      	push	{r4, r5, r7, lr}
 8018e52:	b08a      	sub	sp, #40	; 0x28
 8018e54:	af00      	add	r7, sp, #0
 8018e56:	60f8      	str	r0, [r7, #12]
 8018e58:	60b9      	str	r1, [r7, #8]
 8018e5a:	4639      	mov	r1, r7
 8018e5c:	e881 000c 	stmia.w	r1, {r2, r3}
 8018e60:	68fb      	ldr	r3, [r7, #12]
 8018e62:	4618      	mov	r0, r3
 8018e64:	f7f9 f93c 	bl	80120e0 <_ZN8CallbackC1Ev>
 8018e68:	4a12      	ldr	r2, [pc, #72]	; (8018eb4 <_ZN19core_utils_CallbackIvmEC1I14TWIPR_FirmwareEEPT_MS3_FvmE+0x64>)
 8018e6a:	68fb      	ldr	r3, [r7, #12]
 8018e6c:	601a      	str	r2, [r3, #0]
 8018e6e:	68fb      	ldr	r3, [r7, #12]
 8018e70:	2200      	movs	r2, #0
 8018e72:	711a      	strb	r2, [r3, #4]
 8018e74:	68fb      	ldr	r3, [r7, #12]
 8018e76:	3308      	adds	r3, #8
 8018e78:	2100      	movs	r1, #0
 8018e7a:	4618      	mov	r0, r3
 8018e7c:	f7fd fbe4 	bl	8016648 <_ZN26core_utils_FunctionPointerIvmEC1EPFvmE>
		_fp = core_utils_FunctionPointer<R,A>(object, member);
 8018e80:	f107 0010 	add.w	r0, r7, #16
 8018e84:	463b      	mov	r3, r7
 8018e86:	cb0c      	ldmia	r3, {r2, r3}
 8018e88:	68b9      	ldr	r1, [r7, #8]
 8018e8a:	f000 f87a 	bl	8018f82 <_ZN26core_utils_FunctionPointerIvmEC1I14TWIPR_FirmwareEEPT_MS3_FvmE>
 8018e8e:	68fb      	ldr	r3, [r7, #12]
 8018e90:	f103 0408 	add.w	r4, r3, #8
 8018e94:	f107 0510 	add.w	r5, r7, #16
 8018e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018e9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018ea0:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8018ea4:	68fb      	ldr	r3, [r7, #12]
 8018ea6:	2201      	movs	r2, #1
 8018ea8:	711a      	strb	r2, [r3, #4]
	}
 8018eaa:	68fb      	ldr	r3, [r7, #12]
 8018eac:	4618      	mov	r0, r3
 8018eae:	3728      	adds	r7, #40	; 0x28
 8018eb0:	46bd      	mov	sp, r7
 8018eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8018eb4:	080208d0 	.word	0x080208d0

08018eb8 <_ZN24core_utils_RegisterEntryIhE3setEtP11RegisterMapPh19register_entry_rw_t>:
	void set(uint16_t address, RegisterMap *map, T *data,
 8018eb8:	b580      	push	{r7, lr}
 8018eba:	b084      	sub	sp, #16
 8018ebc:	af00      	add	r7, sp, #0
 8018ebe:	60f8      	str	r0, [r7, #12]
 8018ec0:	607a      	str	r2, [r7, #4]
 8018ec2:	603b      	str	r3, [r7, #0]
 8018ec4:	460b      	mov	r3, r1
 8018ec6:	817b      	strh	r3, [r7, #10]
		this->address = address;
 8018ec8:	68fb      	ldr	r3, [r7, #12]
 8018eca:	897a      	ldrh	r2, [r7, #10]
 8018ecc:	811a      	strh	r2, [r3, #8]
		this->data = data;
 8018ece:	68fb      	ldr	r3, [r7, #12]
 8018ed0:	683a      	ldr	r2, [r7, #0]
 8018ed2:	60da      	str	r2, [r3, #12]
		map->addEntry(address, this);
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	3308      	adds	r3, #8
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	68fa      	ldr	r2, [r7, #12]
 8018ede:	8979      	ldrh	r1, [r7, #10]
 8018ee0:	6878      	ldr	r0, [r7, #4]
 8018ee2:	4798      	blx	r3
		this->rw = rw;
 8018ee4:	68fb      	ldr	r3, [r7, #12]
 8018ee6:	7e3a      	ldrb	r2, [r7, #24]
 8018ee8:	729a      	strb	r2, [r3, #10]
	}
 8018eea:	bf00      	nop
 8018eec:	3710      	adds	r7, #16
 8018eee:	46bd      	mov	sp, r7
 8018ef0:	bd80      	pop	{r7, pc}
	...

08018ef4 <_ZN19core_utils_CallbackIvvEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvvE>:
	core_utils_Callback(T *object, R (T::*member)(void)) {
 8018ef4:	b5b0      	push	{r4, r5, r7, lr}
 8018ef6:	b08a      	sub	sp, #40	; 0x28
 8018ef8:	af00      	add	r7, sp, #0
 8018efa:	60f8      	str	r0, [r7, #12]
 8018efc:	60b9      	str	r1, [r7, #8]
 8018efe:	4639      	mov	r1, r7
 8018f00:	e881 000c 	stmia.w	r1, {r2, r3}
 8018f04:	68fb      	ldr	r3, [r7, #12]
 8018f06:	4618      	mov	r0, r3
 8018f08:	f7f9 f8ea 	bl	80120e0 <_ZN8CallbackC1Ev>
 8018f0c:	4a12      	ldr	r2, [pc, #72]	; (8018f58 <_ZN19core_utils_CallbackIvvEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvvE+0x64>)
 8018f0e:	68fb      	ldr	r3, [r7, #12]
 8018f10:	601a      	str	r2, [r3, #0]
 8018f12:	68fb      	ldr	r3, [r7, #12]
 8018f14:	2200      	movs	r2, #0
 8018f16:	711a      	strb	r2, [r3, #4]
 8018f18:	68fb      	ldr	r3, [r7, #12]
 8018f1a:	3308      	adds	r3, #8
 8018f1c:	2100      	movs	r1, #0
 8018f1e:	4618      	mov	r0, r3
 8018f20:	f7f9 fae9 	bl	80124f6 <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		_fp = core_utils_FunctionPointer<R,void>(object, member);
 8018f24:	f107 0010 	add.w	r0, r7, #16
 8018f28:	463b      	mov	r3, r7
 8018f2a:	cb0c      	ldmia	r3, {r2, r3}
 8018f2c:	68b9      	ldr	r1, [r7, #8]
 8018f2e:	f000 f83b 	bl	8018fa8 <_ZN26core_utils_FunctionPointerIvvEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvvE>
 8018f32:	68fb      	ldr	r3, [r7, #12]
 8018f34:	f103 0408 	add.w	r4, r3, #8
 8018f38:	f107 0510 	add.w	r5, r7, #16
 8018f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018f40:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018f44:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8018f48:	68fb      	ldr	r3, [r7, #12]
 8018f4a:	2201      	movs	r2, #1
 8018f4c:	711a      	strb	r2, [r3, #4]
	}
 8018f4e:	68fb      	ldr	r3, [r7, #12]
 8018f50:	4618      	mov	r0, r3
 8018f52:	3728      	adds	r7, #40	; 0x28
 8018f54:	46bd      	mov	sp, r7
 8018f56:	bdb0      	pop	{r4, r5, r7, pc}
 8018f58:	08020640 	.word	0x08020640

08018f5c <_ZN26core_utils_FunctionPointerIvtEC1I20TWIPR_ControlManagerEEPT_MS3_FvtE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8018f5c:	b580      	push	{r7, lr}
 8018f5e:	b084      	sub	sp, #16
 8018f60:	af00      	add	r7, sp, #0
 8018f62:	60f8      	str	r0, [r7, #12]
 8018f64:	60b9      	str	r1, [r7, #8]
 8018f66:	4639      	mov	r1, r7
 8018f68:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8018f6c:	463b      	mov	r3, r7
 8018f6e:	cb0c      	ldmia	r3, {r2, r3}
 8018f70:	68b9      	ldr	r1, [r7, #8]
 8018f72:	68f8      	ldr	r0, [r7, #12]
 8018f74:	f000 f82c 	bl	8018fd0 <_ZN26core_utils_FunctionPointerIvtE6attachI20TWIPR_ControlManagerEEvPT_MS3_FvtE>
    }
 8018f78:	68fb      	ldr	r3, [r7, #12]
 8018f7a:	4618      	mov	r0, r3
 8018f7c:	3710      	adds	r7, #16
 8018f7e:	46bd      	mov	sp, r7
 8018f80:	bd80      	pop	{r7, pc}

08018f82 <_ZN26core_utils_FunctionPointerIvmEC1I14TWIPR_FirmwareEEPT_MS3_FvmE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8018f82:	b580      	push	{r7, lr}
 8018f84:	b084      	sub	sp, #16
 8018f86:	af00      	add	r7, sp, #0
 8018f88:	60f8      	str	r0, [r7, #12]
 8018f8a:	60b9      	str	r1, [r7, #8]
 8018f8c:	4639      	mov	r1, r7
 8018f8e:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8018f92:	463b      	mov	r3, r7
 8018f94:	cb0c      	ldmia	r3, {r2, r3}
 8018f96:	68b9      	ldr	r1, [r7, #8]
 8018f98:	68f8      	ldr	r0, [r7, #12]
 8018f9a:	f000 f837 	bl	801900c <_ZN26core_utils_FunctionPointerIvmE6attachI14TWIPR_FirmwareEEvPT_MS3_FvmE>
    }
 8018f9e:	68fb      	ldr	r3, [r7, #12]
 8018fa0:	4618      	mov	r0, r3
 8018fa2:	3710      	adds	r7, #16
 8018fa4:	46bd      	mov	sp, r7
 8018fa6:	bd80      	pop	{r7, pc}

08018fa8 <_ZN26core_utils_FunctionPointerIvvEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvvE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(void)) {
 8018fa8:	b580      	push	{r7, lr}
 8018faa:	b084      	sub	sp, #16
 8018fac:	af00      	add	r7, sp, #0
 8018fae:	60f8      	str	r0, [r7, #12]
 8018fb0:	60b9      	str	r1, [r7, #8]
 8018fb2:	4639      	mov	r1, r7
 8018fb4:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8018fb8:	463b      	mov	r3, r7
 8018fba:	cb0c      	ldmia	r3, {r2, r3}
 8018fbc:	68b9      	ldr	r1, [r7, #8]
 8018fbe:	68f8      	ldr	r0, [r7, #12]
 8018fc0:	f000 f842 	bl	8019048 <_ZN26core_utils_FunctionPointerIvvE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvvE>
    }
 8018fc4:	68fb      	ldr	r3, [r7, #12]
 8018fc6:	4618      	mov	r0, r3
 8018fc8:	3710      	adds	r7, #16
 8018fca:	46bd      	mov	sp, r7
 8018fcc:	bd80      	pop	{r7, pc}
	...

08018fd0 <_ZN26core_utils_FunctionPointerIvtE6attachI20TWIPR_ControlManagerEEvPT_MS3_FvtE>:
    void attach(T *object, R (T::*member)(A1)) {
 8018fd0:	b480      	push	{r7}
 8018fd2:	b085      	sub	sp, #20
 8018fd4:	af00      	add	r7, sp, #0
 8018fd6:	60f8      	str	r0, [r7, #12]
 8018fd8:	60b9      	str	r1, [r7, #8]
 8018fda:	4639      	mov	r1, r7
 8018fdc:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8018fe0:	68fb      	ldr	r3, [r7, #12]
 8018fe2:	68ba      	ldr	r2, [r7, #8]
 8018fe4:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 8018fe6:	68fb      	ldr	r3, [r7, #12]
 8018fe8:	3304      	adds	r3, #4
 8018fea:	461a      	mov	r2, r3
 8018fec:	463b      	mov	r3, r7
 8018fee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018ff2:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8018ff6:	68fb      	ldr	r3, [r7, #12]
 8018ff8:	4a03      	ldr	r2, [pc, #12]	; (8019008 <_ZN26core_utils_FunctionPointerIvtE6attachI20TWIPR_ControlManagerEEvPT_MS3_FvtE+0x38>)
 8018ffa:	615a      	str	r2, [r3, #20]
    }
 8018ffc:	bf00      	nop
 8018ffe:	3714      	adds	r7, #20
 8019000:	46bd      	mov	sp, r7
 8019002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019006:	4770      	bx	lr
 8019008:	08019085 	.word	0x08019085

0801900c <_ZN26core_utils_FunctionPointerIvmE6attachI14TWIPR_FirmwareEEvPT_MS3_FvmE>:
    void attach(T *object, R (T::*member)(A1)) {
 801900c:	b480      	push	{r7}
 801900e:	b085      	sub	sp, #20
 8019010:	af00      	add	r7, sp, #0
 8019012:	60f8      	str	r0, [r7, #12]
 8019014:	60b9      	str	r1, [r7, #8]
 8019016:	4639      	mov	r1, r7
 8019018:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 801901c:	68fb      	ldr	r3, [r7, #12]
 801901e:	68ba      	ldr	r2, [r7, #8]
 8019020:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 8019022:	68fb      	ldr	r3, [r7, #12]
 8019024:	3304      	adds	r3, #4
 8019026:	461a      	mov	r2, r3
 8019028:	463b      	mov	r3, r7
 801902a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801902e:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8019032:	68fb      	ldr	r3, [r7, #12]
 8019034:	4a03      	ldr	r2, [pc, #12]	; (8019044 <_ZN26core_utils_FunctionPointerIvmE6attachI14TWIPR_FirmwareEEvPT_MS3_FvmE+0x38>)
 8019036:	615a      	str	r2, [r3, #20]
    }
 8019038:	bf00      	nop
 801903a:	3714      	adds	r7, #20
 801903c:	46bd      	mov	sp, r7
 801903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019042:	4770      	bx	lr
 8019044:	080190dd 	.word	0x080190dd

08019048 <_ZN26core_utils_FunctionPointerIvvE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvvE>:
    void attach(T *object, R (T::*member)(void)) {
 8019048:	b480      	push	{r7}
 801904a:	b085      	sub	sp, #20
 801904c:	af00      	add	r7, sp, #0
 801904e:	60f8      	str	r0, [r7, #12]
 8019050:	60b9      	str	r1, [r7, #8]
 8019052:	4639      	mov	r1, r7
 8019054:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8019058:	68fb      	ldr	r3, [r7, #12]
 801905a:	68ba      	ldr	r2, [r7, #8]
 801905c:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(void)>(_member) = member;
 801905e:	68fb      	ldr	r3, [r7, #12]
 8019060:	3304      	adds	r3, #4
 8019062:	461a      	mov	r2, r3
 8019064:	463b      	mov	r3, r7
 8019066:	e893 0003 	ldmia.w	r3, {r0, r1}
 801906a:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801906e:	68fb      	ldr	r3, [r7, #12]
 8019070:	4a03      	ldr	r2, [pc, #12]	; (8019080 <_ZN26core_utils_FunctionPointerIvvE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvvE+0x38>)
 8019072:	615a      	str	r2, [r3, #20]
    }
 8019074:	bf00      	nop
 8019076:	3714      	adds	r7, #20
 8019078:	46bd      	mov	sp, r7
 801907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801907e:	4770      	bx	lr
 8019080:	08019131 	.word	0x08019131

08019084 <_ZN26core_utils_FunctionPointerIvtE12membercallerI20TWIPR_ControlManagerEEvPvPjt>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8019084:	b580      	push	{r7, lr}
 8019086:	b086      	sub	sp, #24
 8019088:	af00      	add	r7, sp, #0
 801908a:	60f8      	str	r0, [r7, #12]
 801908c:	60b9      	str	r1, [r7, #8]
 801908e:	4613      	mov	r3, r2
 8019090:	80fb      	strh	r3, [r7, #6]
        T* o = static_cast<T*>(object);
 8019092:	68fb      	ldr	r3, [r7, #12]
 8019094:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8019096:	68bb      	ldr	r3, [r7, #8]
 8019098:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 801909a:	693b      	ldr	r3, [r7, #16]
 801909c:	685b      	ldr	r3, [r3, #4]
 801909e:	105b      	asrs	r3, r3, #1
 80190a0:	461a      	mov	r2, r3
 80190a2:	697b      	ldr	r3, [r7, #20]
 80190a4:	1898      	adds	r0, r3, r2
 80190a6:	693b      	ldr	r3, [r7, #16]
 80190a8:	685b      	ldr	r3, [r3, #4]
 80190aa:	f003 0301 	and.w	r3, r3, #1
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	d00b      	beq.n	80190ca <_ZN26core_utils_FunctionPointerIvtE12membercallerI20TWIPR_ControlManagerEEvPvPjt+0x46>
 80190b2:	693b      	ldr	r3, [r7, #16]
 80190b4:	685b      	ldr	r3, [r3, #4]
 80190b6:	105b      	asrs	r3, r3, #1
 80190b8:	461a      	mov	r2, r3
 80190ba:	697b      	ldr	r3, [r7, #20]
 80190bc:	4413      	add	r3, r2
 80190be:	681b      	ldr	r3, [r3, #0]
 80190c0:	693a      	ldr	r2, [r7, #16]
 80190c2:	6812      	ldr	r2, [r2, #0]
 80190c4:	4413      	add	r3, r2
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	e001      	b.n	80190ce <_ZN26core_utils_FunctionPointerIvtE12membercallerI20TWIPR_ControlManagerEEvPvPjt+0x4a>
 80190ca:	693b      	ldr	r3, [r7, #16]
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	88fa      	ldrh	r2, [r7, #6]
 80190d0:	4611      	mov	r1, r2
 80190d2:	4798      	blx	r3
 80190d4:	bf00      	nop
    }
 80190d6:	3718      	adds	r7, #24
 80190d8:	46bd      	mov	sp, r7
 80190da:	bd80      	pop	{r7, pc}

080190dc <_ZN26core_utils_FunctionPointerIvmE12membercallerI14TWIPR_FirmwareEEvPvPjm>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 80190dc:	b580      	push	{r7, lr}
 80190de:	b086      	sub	sp, #24
 80190e0:	af00      	add	r7, sp, #0
 80190e2:	60f8      	str	r0, [r7, #12]
 80190e4:	60b9      	str	r1, [r7, #8]
 80190e6:	607a      	str	r2, [r7, #4]
        T* o = static_cast<T*>(object);
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 80190ec:	68bb      	ldr	r3, [r7, #8]
 80190ee:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 80190f0:	693b      	ldr	r3, [r7, #16]
 80190f2:	685b      	ldr	r3, [r3, #4]
 80190f4:	105b      	asrs	r3, r3, #1
 80190f6:	461a      	mov	r2, r3
 80190f8:	697b      	ldr	r3, [r7, #20]
 80190fa:	1898      	adds	r0, r3, r2
 80190fc:	693b      	ldr	r3, [r7, #16]
 80190fe:	685b      	ldr	r3, [r3, #4]
 8019100:	f003 0301 	and.w	r3, r3, #1
 8019104:	2b00      	cmp	r3, #0
 8019106:	d00b      	beq.n	8019120 <_ZN26core_utils_FunctionPointerIvmE12membercallerI14TWIPR_FirmwareEEvPvPjm+0x44>
 8019108:	693b      	ldr	r3, [r7, #16]
 801910a:	685b      	ldr	r3, [r3, #4]
 801910c:	105b      	asrs	r3, r3, #1
 801910e:	461a      	mov	r2, r3
 8019110:	697b      	ldr	r3, [r7, #20]
 8019112:	4413      	add	r3, r2
 8019114:	681b      	ldr	r3, [r3, #0]
 8019116:	693a      	ldr	r2, [r7, #16]
 8019118:	6812      	ldr	r2, [r2, #0]
 801911a:	4413      	add	r3, r2
 801911c:	681b      	ldr	r3, [r3, #0]
 801911e:	e001      	b.n	8019124 <_ZN26core_utils_FunctionPointerIvmE12membercallerI14TWIPR_FirmwareEEvPvPjm+0x48>
 8019120:	693b      	ldr	r3, [r7, #16]
 8019122:	681b      	ldr	r3, [r3, #0]
 8019124:	6879      	ldr	r1, [r7, #4]
 8019126:	4798      	blx	r3
 8019128:	bf00      	nop
    }
 801912a:	3718      	adds	r7, #24
 801912c:	46bd      	mov	sp, r7
 801912e:	bd80      	pop	{r7, pc}

08019130 <_ZN26core_utils_FunctionPointerIvvE12membercallerI26TWIPR_CommunicationManagerEEvPvPj>:
    static R membercaller(void *object, uintptr_t *member) {
 8019130:	b580      	push	{r7, lr}
 8019132:	b084      	sub	sp, #16
 8019134:	af00      	add	r7, sp, #0
 8019136:	6078      	str	r0, [r7, #4]
 8019138:	6039      	str	r1, [r7, #0]
        T* o = static_cast<T*>(object);
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	60fb      	str	r3, [r7, #12]
        R (T::**m)(void) = reinterpret_cast<R (T::**)(void)>(member);
 801913e:	683b      	ldr	r3, [r7, #0]
 8019140:	60bb      	str	r3, [r7, #8]
        return (o->**m)();
 8019142:	68bb      	ldr	r3, [r7, #8]
 8019144:	685b      	ldr	r3, [r3, #4]
 8019146:	105b      	asrs	r3, r3, #1
 8019148:	461a      	mov	r2, r3
 801914a:	68fb      	ldr	r3, [r7, #12]
 801914c:	1899      	adds	r1, r3, r2
 801914e:	68bb      	ldr	r3, [r7, #8]
 8019150:	685b      	ldr	r3, [r3, #4]
 8019152:	f003 0301 	and.w	r3, r3, #1
 8019156:	2b00      	cmp	r3, #0
 8019158:	d00b      	beq.n	8019172 <_ZN26core_utils_FunctionPointerIvvE12membercallerI26TWIPR_CommunicationManagerEEvPvPj+0x42>
 801915a:	68bb      	ldr	r3, [r7, #8]
 801915c:	685b      	ldr	r3, [r3, #4]
 801915e:	105b      	asrs	r3, r3, #1
 8019160:	461a      	mov	r2, r3
 8019162:	68fb      	ldr	r3, [r7, #12]
 8019164:	4413      	add	r3, r2
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	68ba      	ldr	r2, [r7, #8]
 801916a:	6812      	ldr	r2, [r2, #0]
 801916c:	4413      	add	r3, r2
 801916e:	681b      	ldr	r3, [r3, #0]
 8019170:	e001      	b.n	8019176 <_ZN26core_utils_FunctionPointerIvvE12membercallerI26TWIPR_CommunicationManagerEEvPvPj+0x46>
 8019172:	68bb      	ldr	r3, [r7, #8]
 8019174:	681b      	ldr	r3, [r3, #0]
 8019176:	4608      	mov	r0, r1
 8019178:	4798      	blx	r3
 801917a:	bf00      	nop
    }
 801917c:	3710      	adds	r7, #16
 801917e:	46bd      	mov	sp, r7
 8019180:	bd80      	pop	{r7, pc}
	...

08019184 <_Z41__static_initialization_and_destruction_0ii>:
 8019184:	b580      	push	{r7, lr}
 8019186:	b082      	sub	sp, #8
 8019188:	af00      	add	r7, sp, #0
 801918a:	6078      	str	r0, [r7, #4]
 801918c:	6039      	str	r1, [r7, #0]
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	2b01      	cmp	r3, #1
 8019192:	d10f      	bne.n	80191b4 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8019194:	683b      	ldr	r3, [r7, #0]
 8019196:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801919a:	4293      	cmp	r3, r2
 801919c:	d10a      	bne.n	80191b4 <_Z41__static_initialization_and_destruction_0ii+0x30>
TWIPR_Firmware twipr_firmware;
 801919e:	4807      	ldr	r0, [pc, #28]	; (80191bc <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80191a0:	f7ff fa99 	bl	80186d6 <_ZN14TWIPR_FirmwareC1Ev>
osSemaphoreId_t sem = osSemaphoreNew(1, 1, NULL);
 80191a4:	2200      	movs	r2, #0
 80191a6:	2101      	movs	r1, #1
 80191a8:	2001      	movs	r0, #1
 80191aa:	f7f5 f853 	bl	800e254 <osSemaphoreNew>
 80191ae:	4603      	mov	r3, r0
 80191b0:	4a03      	ldr	r2, [pc, #12]	; (80191c0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80191b2:	6013      	str	r3, [r2, #0]
}
 80191b4:	bf00      	nop
 80191b6:	3708      	adds	r7, #8
 80191b8:	46bd      	mov	sp, r7
 80191ba:	bd80      	pop	{r7, pc}
 80191bc:	240152c8 	.word	0x240152c8
 80191c0:	2401db74 	.word	0x2401db74

080191c4 <_ZN22core_utils_RegisterMapILi60EE5writeEtPv>:
	void write(uint16_t address, void *data) {
 80191c4:	b580      	push	{r7, lr}
 80191c6:	b084      	sub	sp, #16
 80191c8:	af00      	add	r7, sp, #0
 80191ca:	60f8      	str	r0, [r7, #12]
 80191cc:	460b      	mov	r3, r1
 80191ce:	607a      	str	r2, [r7, #4]
 80191d0:	817b      	strh	r3, [r7, #10]
		if (this->entries[address] != NULL
 80191d2:	897b      	ldrh	r3, [r7, #10]
 80191d4:	68fa      	ldr	r2, [r7, #12]
 80191d6:	3302      	adds	r3, #2
 80191d8:	009b      	lsls	r3, r3, #2
 80191da:	4413      	add	r3, r2
 80191dc:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType() == REGISTER_ENTRY_DATA) {
 80191de:	2b00      	cmp	r3, #0
 80191e0:	d015      	beq.n	801920e <_ZN22core_utils_RegisterMapILi60EE5writeEtPv+0x4a>
 80191e2:	897b      	ldrh	r3, [r7, #10]
 80191e4:	68fa      	ldr	r2, [r7, #12]
 80191e6:	3302      	adds	r3, #2
 80191e8:	009b      	lsls	r3, r3, #2
 80191ea:	4413      	add	r3, r2
 80191ec:	6859      	ldr	r1, [r3, #4]
 80191ee:	897b      	ldrh	r3, [r7, #10]
 80191f0:	68fa      	ldr	r2, [r7, #12]
 80191f2:	3302      	adds	r3, #2
 80191f4:	009b      	lsls	r3, r3, #2
 80191f6:	4413      	add	r3, r2
 80191f8:	685b      	ldr	r3, [r3, #4]
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	3320      	adds	r3, #32
 80191fe:	681b      	ldr	r3, [r3, #0]
 8019200:	4608      	mov	r0, r1
 8019202:	4798      	blx	r3
 8019204:	4603      	mov	r3, r0
 8019206:	2b01      	cmp	r3, #1
 8019208:	d101      	bne.n	801920e <_ZN22core_utils_RegisterMapILi60EE5writeEtPv+0x4a>
 801920a:	2301      	movs	r3, #1
 801920c:	e000      	b.n	8019210 <_ZN22core_utils_RegisterMapILi60EE5writeEtPv+0x4c>
 801920e:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 8019210:	2b00      	cmp	r3, #0
 8019212:	d00f      	beq.n	8019234 <_ZN22core_utils_RegisterMapILi60EE5writeEtPv+0x70>
			this->entries[address]->write(data);
 8019214:	897b      	ldrh	r3, [r7, #10]
 8019216:	68fa      	ldr	r2, [r7, #12]
 8019218:	3302      	adds	r3, #2
 801921a:	009b      	lsls	r3, r3, #2
 801921c:	4413      	add	r3, r2
 801921e:	6858      	ldr	r0, [r3, #4]
 8019220:	897b      	ldrh	r3, [r7, #10]
 8019222:	68fa      	ldr	r2, [r7, #12]
 8019224:	3302      	adds	r3, #2
 8019226:	009b      	lsls	r3, r3, #2
 8019228:	4413      	add	r3, r2
 801922a:	685b      	ldr	r3, [r3, #4]
 801922c:	681b      	ldr	r3, [r3, #0]
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	6879      	ldr	r1, [r7, #4]
 8019232:	4798      	blx	r3
	}
 8019234:	bf00      	nop
 8019236:	3710      	adds	r7, #16
 8019238:	46bd      	mov	sp, r7
 801923a:	bd80      	pop	{r7, pc}

0801923c <_ZN22core_utils_RegisterMapILi60EE5writeEtPh>:
	void write(uint16_t address, uint8_t *data) {
 801923c:	b580      	push	{r7, lr}
 801923e:	b084      	sub	sp, #16
 8019240:	af00      	add	r7, sp, #0
 8019242:	60f8      	str	r0, [r7, #12]
 8019244:	460b      	mov	r3, r1
 8019246:	607a      	str	r2, [r7, #4]
 8019248:	817b      	strh	r3, [r7, #10]
		if (this->entries[address] != NULL
 801924a:	897b      	ldrh	r3, [r7, #10]
 801924c:	68fa      	ldr	r2, [r7, #12]
 801924e:	3302      	adds	r3, #2
 8019250:	009b      	lsls	r3, r3, #2
 8019252:	4413      	add	r3, r2
 8019254:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType() == REGISTER_ENTRY_DATA) {
 8019256:	2b00      	cmp	r3, #0
 8019258:	d015      	beq.n	8019286 <_ZN22core_utils_RegisterMapILi60EE5writeEtPh+0x4a>
 801925a:	897b      	ldrh	r3, [r7, #10]
 801925c:	68fa      	ldr	r2, [r7, #12]
 801925e:	3302      	adds	r3, #2
 8019260:	009b      	lsls	r3, r3, #2
 8019262:	4413      	add	r3, r2
 8019264:	6859      	ldr	r1, [r3, #4]
 8019266:	897b      	ldrh	r3, [r7, #10]
 8019268:	68fa      	ldr	r2, [r7, #12]
 801926a:	3302      	adds	r3, #2
 801926c:	009b      	lsls	r3, r3, #2
 801926e:	4413      	add	r3, r2
 8019270:	685b      	ldr	r3, [r3, #4]
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	3320      	adds	r3, #32
 8019276:	681b      	ldr	r3, [r3, #0]
 8019278:	4608      	mov	r0, r1
 801927a:	4798      	blx	r3
 801927c:	4603      	mov	r3, r0
 801927e:	2b01      	cmp	r3, #1
 8019280:	d101      	bne.n	8019286 <_ZN22core_utils_RegisterMapILi60EE5writeEtPh+0x4a>
 8019282:	2301      	movs	r3, #1
 8019284:	e000      	b.n	8019288 <_ZN22core_utils_RegisterMapILi60EE5writeEtPh+0x4c>
 8019286:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 8019288:	2b00      	cmp	r3, #0
 801928a:	d010      	beq.n	80192ae <_ZN22core_utils_RegisterMapILi60EE5writeEtPh+0x72>
			this->entries[address]->write(data);
 801928c:	897b      	ldrh	r3, [r7, #10]
 801928e:	68fa      	ldr	r2, [r7, #12]
 8019290:	3302      	adds	r3, #2
 8019292:	009b      	lsls	r3, r3, #2
 8019294:	4413      	add	r3, r2
 8019296:	6858      	ldr	r0, [r3, #4]
 8019298:	897b      	ldrh	r3, [r7, #10]
 801929a:	68fa      	ldr	r2, [r7, #12]
 801929c:	3302      	adds	r3, #2
 801929e:	009b      	lsls	r3, r3, #2
 80192a0:	4413      	add	r3, r2
 80192a2:	685b      	ldr	r3, [r3, #4]
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	3304      	adds	r3, #4
 80192a8:	681b      	ldr	r3, [r3, #0]
 80192aa:	6879      	ldr	r1, [r7, #4]
 80192ac:	4798      	blx	r3
	}
 80192ae:	bf00      	nop
 80192b0:	3710      	adds	r7, #16
 80192b2:	46bd      	mov	sp, r7
 80192b4:	bd80      	pop	{r7, pc}

080192b6 <_ZN22core_utils_RegisterMapILi60EE8addEntryEtP13RegisterEntry>:
	void addEntry(uint16_t address, RegisterEntry *entry) {
 80192b6:	b480      	push	{r7}
 80192b8:	b085      	sub	sp, #20
 80192ba:	af00      	add	r7, sp, #0
 80192bc:	60f8      	str	r0, [r7, #12]
 80192be:	460b      	mov	r3, r1
 80192c0:	607a      	str	r2, [r7, #4]
 80192c2:	817b      	strh	r3, [r7, #10]
		this->entries[address] = entry;
 80192c4:	897b      	ldrh	r3, [r7, #10]
 80192c6:	68fa      	ldr	r2, [r7, #12]
 80192c8:	3302      	adds	r3, #2
 80192ca:	009b      	lsls	r3, r3, #2
 80192cc:	4413      	add	r3, r2
 80192ce:	687a      	ldr	r2, [r7, #4]
 80192d0:	605a      	str	r2, [r3, #4]
	}
 80192d2:	bf00      	nop
 80192d4:	3714      	adds	r7, #20
 80192d6:	46bd      	mov	sp, r7
 80192d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192dc:	4770      	bx	lr

080192de <_ZN22core_utils_RegisterMapILi60EE8hasEntryEt>:
	bool hasEntry(uint16_t address) {
 80192de:	b480      	push	{r7}
 80192e0:	b083      	sub	sp, #12
 80192e2:	af00      	add	r7, sp, #0
 80192e4:	6078      	str	r0, [r7, #4]
 80192e6:	460b      	mov	r3, r1
 80192e8:	807b      	strh	r3, [r7, #2]
		if (this->entries[address] != NULL) {
 80192ea:	887b      	ldrh	r3, [r7, #2]
 80192ec:	687a      	ldr	r2, [r7, #4]
 80192ee:	3302      	adds	r3, #2
 80192f0:	009b      	lsls	r3, r3, #2
 80192f2:	4413      	add	r3, r2
 80192f4:	685b      	ldr	r3, [r3, #4]
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d001      	beq.n	80192fe <_ZN22core_utils_RegisterMapILi60EE8hasEntryEt+0x20>
			return true;
 80192fa:	2301      	movs	r3, #1
 80192fc:	e000      	b.n	8019300 <_ZN22core_utils_RegisterMapILi60EE8hasEntryEt+0x22>
			return false;
 80192fe:	2300      	movs	r3, #0
	}
 8019300:	4618      	mov	r0, r3
 8019302:	370c      	adds	r7, #12
 8019304:	46bd      	mov	sp, r7
 8019306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801930a:	4770      	bx	lr

0801930c <_ZN22core_utils_RegisterMapILi60EE4readEtPh>:
	uint8_t read(uint16_t address, uint8_t *data) {
 801930c:	b580      	push	{r7, lr}
 801930e:	b084      	sub	sp, #16
 8019310:	af00      	add	r7, sp, #0
 8019312:	60f8      	str	r0, [r7, #12]
 8019314:	460b      	mov	r3, r1
 8019316:	607a      	str	r2, [r7, #4]
 8019318:	817b      	strh	r3, [r7, #10]
		if (this->entries[address] != NULL
 801931a:	897b      	ldrh	r3, [r7, #10]
 801931c:	68fa      	ldr	r2, [r7, #12]
 801931e:	3302      	adds	r3, #2
 8019320:	009b      	lsls	r3, r3, #2
 8019322:	4413      	add	r3, r2
 8019324:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType() == REGISTER_ENTRY_DATA) {
 8019326:	2b00      	cmp	r3, #0
 8019328:	d015      	beq.n	8019356 <_ZN22core_utils_RegisterMapILi60EE4readEtPh+0x4a>
 801932a:	897b      	ldrh	r3, [r7, #10]
 801932c:	68fa      	ldr	r2, [r7, #12]
 801932e:	3302      	adds	r3, #2
 8019330:	009b      	lsls	r3, r3, #2
 8019332:	4413      	add	r3, r2
 8019334:	6859      	ldr	r1, [r3, #4]
 8019336:	897b      	ldrh	r3, [r7, #10]
 8019338:	68fa      	ldr	r2, [r7, #12]
 801933a:	3302      	adds	r3, #2
 801933c:	009b      	lsls	r3, r3, #2
 801933e:	4413      	add	r3, r2
 8019340:	685b      	ldr	r3, [r3, #4]
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	3320      	adds	r3, #32
 8019346:	681b      	ldr	r3, [r3, #0]
 8019348:	4608      	mov	r0, r1
 801934a:	4798      	blx	r3
 801934c:	4603      	mov	r3, r0
 801934e:	2b01      	cmp	r3, #1
 8019350:	d101      	bne.n	8019356 <_ZN22core_utils_RegisterMapILi60EE4readEtPh+0x4a>
 8019352:	2301      	movs	r3, #1
 8019354:	e000      	b.n	8019358 <_ZN22core_utils_RegisterMapILi60EE4readEtPh+0x4c>
 8019356:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 8019358:	2b00      	cmp	r3, #0
 801935a:	d012      	beq.n	8019382 <_ZN22core_utils_RegisterMapILi60EE4readEtPh+0x76>
			return this->entries[address]->readBytes(data);
 801935c:	897b      	ldrh	r3, [r7, #10]
 801935e:	68fa      	ldr	r2, [r7, #12]
 8019360:	3302      	adds	r3, #2
 8019362:	009b      	lsls	r3, r3, #2
 8019364:	4413      	add	r3, r2
 8019366:	6858      	ldr	r0, [r3, #4]
 8019368:	897b      	ldrh	r3, [r7, #10]
 801936a:	68fa      	ldr	r2, [r7, #12]
 801936c:	3302      	adds	r3, #2
 801936e:	009b      	lsls	r3, r3, #2
 8019370:	4413      	add	r3, r2
 8019372:	685b      	ldr	r3, [r3, #4]
 8019374:	681b      	ldr	r3, [r3, #0]
 8019376:	3308      	adds	r3, #8
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	6879      	ldr	r1, [r7, #4]
 801937c:	4798      	blx	r3
 801937e:	4603      	mov	r3, r0
 8019380:	e000      	b.n	8019384 <_ZN22core_utils_RegisterMapILi60EE4readEtPh+0x78>
		return 0;
 8019382:	2300      	movs	r3, #0
	}
 8019384:	4618      	mov	r0, r3
 8019386:	3710      	adds	r7, #16
 8019388:	46bd      	mov	sp, r7
 801938a:	bd80      	pop	{r7, pc}

0801938c <_ZN22core_utils_RegisterMapILi60EE7getSizeEt>:
	uint8_t getSize(uint16_t address) {
 801938c:	b580      	push	{r7, lr}
 801938e:	b082      	sub	sp, #8
 8019390:	af00      	add	r7, sp, #0
 8019392:	6078      	str	r0, [r7, #4]
 8019394:	460b      	mov	r3, r1
 8019396:	807b      	strh	r3, [r7, #2]
		return this->entries[address]->getSize();
 8019398:	887b      	ldrh	r3, [r7, #2]
 801939a:	687a      	ldr	r2, [r7, #4]
 801939c:	3302      	adds	r3, #2
 801939e:	009b      	lsls	r3, r3, #2
 80193a0:	4413      	add	r3, r2
 80193a2:	6859      	ldr	r1, [r3, #4]
 80193a4:	887b      	ldrh	r3, [r7, #2]
 80193a6:	687a      	ldr	r2, [r7, #4]
 80193a8:	3302      	adds	r3, #2
 80193aa:	009b      	lsls	r3, r3, #2
 80193ac:	4413      	add	r3, r2
 80193ae:	685b      	ldr	r3, [r3, #4]
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	330c      	adds	r3, #12
 80193b4:	681b      	ldr	r3, [r3, #0]
 80193b6:	4608      	mov	r0, r1
 80193b8:	4798      	blx	r3
 80193ba:	4603      	mov	r3, r0
	}
 80193bc:	4618      	mov	r0, r3
 80193be:	3708      	adds	r7, #8
 80193c0:	46bd      	mov	sp, r7
 80193c2:	bd80      	pop	{r7, pc}

080193c4 <_ZN22core_utils_RegisterMapILi60EE7getTypeEt>:
	register_entry_type getType(uint16_t address) {
 80193c4:	b580      	push	{r7, lr}
 80193c6:	b082      	sub	sp, #8
 80193c8:	af00      	add	r7, sp, #0
 80193ca:	6078      	str	r0, [r7, #4]
 80193cc:	460b      	mov	r3, r1
 80193ce:	807b      	strh	r3, [r7, #2]
		return this->entries[address]->getType();
 80193d0:	887b      	ldrh	r3, [r7, #2]
 80193d2:	687a      	ldr	r2, [r7, #4]
 80193d4:	3302      	adds	r3, #2
 80193d6:	009b      	lsls	r3, r3, #2
 80193d8:	4413      	add	r3, r2
 80193da:	6859      	ldr	r1, [r3, #4]
 80193dc:	887b      	ldrh	r3, [r7, #2]
 80193de:	687a      	ldr	r2, [r7, #4]
 80193e0:	3302      	adds	r3, #2
 80193e2:	009b      	lsls	r3, r3, #2
 80193e4:	4413      	add	r3, r2
 80193e6:	685b      	ldr	r3, [r3, #4]
 80193e8:	681b      	ldr	r3, [r3, #0]
 80193ea:	3320      	adds	r3, #32
 80193ec:	681b      	ldr	r3, [r3, #0]
 80193ee:	4608      	mov	r0, r1
 80193f0:	4798      	blx	r3
 80193f2:	4603      	mov	r3, r0
	}
 80193f4:	4618      	mov	r0, r3
 80193f6:	3708      	adds	r7, #8
 80193f8:	46bd      	mov	sp, r7
 80193fa:	bd80      	pop	{r7, pc}

080193fc <_ZN22core_utils_RegisterMapILi60EE19getReadWriteSettingEt>:
	register_entry_rw_t getReadWriteSetting(uint16_t address) {
 80193fc:	b580      	push	{r7, lr}
 80193fe:	b082      	sub	sp, #8
 8019400:	af00      	add	r7, sp, #0
 8019402:	6078      	str	r0, [r7, #4]
 8019404:	460b      	mov	r3, r1
 8019406:	807b      	strh	r3, [r7, #2]
		return this->entries[address]->getReadWriteSetting();
 8019408:	887b      	ldrh	r3, [r7, #2]
 801940a:	687a      	ldr	r2, [r7, #4]
 801940c:	3302      	adds	r3, #2
 801940e:	009b      	lsls	r3, r3, #2
 8019410:	4413      	add	r3, r2
 8019412:	6859      	ldr	r1, [r3, #4]
 8019414:	887b      	ldrh	r3, [r7, #2]
 8019416:	687a      	ldr	r2, [r7, #4]
 8019418:	3302      	adds	r3, #2
 801941a:	009b      	lsls	r3, r3, #2
 801941c:	4413      	add	r3, r2
 801941e:	685b      	ldr	r3, [r3, #4]
 8019420:	681b      	ldr	r3, [r3, #0]
 8019422:	3324      	adds	r3, #36	; 0x24
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	4608      	mov	r0, r1
 8019428:	4798      	blx	r3
 801942a:	4603      	mov	r3, r0
	}
 801942c:	4618      	mov	r0, r3
 801942e:	3708      	adds	r7, #8
 8019430:	46bd      	mov	sp, r7
 8019432:	bd80      	pop	{r7, pc}

08019434 <_ZN22core_utils_RegisterMapILi60EE7executeEtPhS1_>:
	uint8_t execute(uint16_t address, uint8_t *input, uint8_t *output) {
 8019434:	b580      	push	{r7, lr}
 8019436:	b084      	sub	sp, #16
 8019438:	af00      	add	r7, sp, #0
 801943a:	60f8      	str	r0, [r7, #12]
 801943c:	607a      	str	r2, [r7, #4]
 801943e:	603b      	str	r3, [r7, #0]
 8019440:	460b      	mov	r3, r1
 8019442:	817b      	strh	r3, [r7, #10]
		if (this->entries[address] != NULL
 8019444:	897b      	ldrh	r3, [r7, #10]
 8019446:	68fa      	ldr	r2, [r7, #12]
 8019448:	3302      	adds	r3, #2
 801944a:	009b      	lsls	r3, r3, #2
 801944c:	4413      	add	r3, r2
 801944e:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType()
 8019450:	2b00      	cmp	r3, #0
 8019452:	d015      	beq.n	8019480 <_ZN22core_utils_RegisterMapILi60EE7executeEtPhS1_+0x4c>
 8019454:	897b      	ldrh	r3, [r7, #10]
 8019456:	68fa      	ldr	r2, [r7, #12]
 8019458:	3302      	adds	r3, #2
 801945a:	009b      	lsls	r3, r3, #2
 801945c:	4413      	add	r3, r2
 801945e:	6859      	ldr	r1, [r3, #4]
 8019460:	897b      	ldrh	r3, [r7, #10]
 8019462:	68fa      	ldr	r2, [r7, #12]
 8019464:	3302      	adds	r3, #2
 8019466:	009b      	lsls	r3, r3, #2
 8019468:	4413      	add	r3, r2
 801946a:	685b      	ldr	r3, [r3, #4]
 801946c:	681b      	ldr	r3, [r3, #0]
 801946e:	3320      	adds	r3, #32
 8019470:	681b      	ldr	r3, [r3, #0]
 8019472:	4608      	mov	r0, r1
 8019474:	4798      	blx	r3
 8019476:	4603      	mov	r3, r0
 8019478:	2b02      	cmp	r3, #2
 801947a:	d101      	bne.n	8019480 <_ZN22core_utils_RegisterMapILi60EE7executeEtPhS1_+0x4c>
 801947c:	2301      	movs	r3, #1
 801947e:	e000      	b.n	8019482 <_ZN22core_utils_RegisterMapILi60EE7executeEtPhS1_+0x4e>
 8019480:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 8019482:	2b00      	cmp	r3, #0
 8019484:	d013      	beq.n	80194ae <_ZN22core_utils_RegisterMapILi60EE7executeEtPhS1_+0x7a>
			return this->entries[address]->execute(input, output);
 8019486:	897b      	ldrh	r3, [r7, #10]
 8019488:	68fa      	ldr	r2, [r7, #12]
 801948a:	3302      	adds	r3, #2
 801948c:	009b      	lsls	r3, r3, #2
 801948e:	4413      	add	r3, r2
 8019490:	6858      	ldr	r0, [r3, #4]
 8019492:	897b      	ldrh	r3, [r7, #10]
 8019494:	68fa      	ldr	r2, [r7, #12]
 8019496:	3302      	adds	r3, #2
 8019498:	009b      	lsls	r3, r3, #2
 801949a:	4413      	add	r3, r2
 801949c:	685b      	ldr	r3, [r3, #4]
 801949e:	681b      	ldr	r3, [r3, #0]
 80194a0:	331c      	adds	r3, #28
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	683a      	ldr	r2, [r7, #0]
 80194a6:	6879      	ldr	r1, [r7, #4]
 80194a8:	4798      	blx	r3
 80194aa:	4603      	mov	r3, r0
 80194ac:	e000      	b.n	80194b0 <_ZN22core_utils_RegisterMapILi60EE7executeEtPhS1_+0x7c>
		return 0;
 80194ae:	2300      	movs	r3, #0
	}
 80194b0:	4618      	mov	r0, r3
 80194b2:	3710      	adds	r7, #16
 80194b4:	46bd      	mov	sp, r7
 80194b6:	bd80      	pop	{r7, pc}

080194b8 <_ZN22core_utils_RegisterMapILi60EE7executeEt>:
	uint8_t execute(uint16_t address) {
 80194b8:	b580      	push	{r7, lr}
 80194ba:	b082      	sub	sp, #8
 80194bc:	af00      	add	r7, sp, #0
 80194be:	6078      	str	r0, [r7, #4]
 80194c0:	460b      	mov	r3, r1
 80194c2:	807b      	strh	r3, [r7, #2]
		if (this->entries[address] != NULL
 80194c4:	887b      	ldrh	r3, [r7, #2]
 80194c6:	687a      	ldr	r2, [r7, #4]
 80194c8:	3302      	adds	r3, #2
 80194ca:	009b      	lsls	r3, r3, #2
 80194cc:	4413      	add	r3, r2
 80194ce:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType()
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d015      	beq.n	8019500 <_ZN22core_utils_RegisterMapILi60EE7executeEt+0x48>
 80194d4:	887b      	ldrh	r3, [r7, #2]
 80194d6:	687a      	ldr	r2, [r7, #4]
 80194d8:	3302      	adds	r3, #2
 80194da:	009b      	lsls	r3, r3, #2
 80194dc:	4413      	add	r3, r2
 80194de:	6859      	ldr	r1, [r3, #4]
 80194e0:	887b      	ldrh	r3, [r7, #2]
 80194e2:	687a      	ldr	r2, [r7, #4]
 80194e4:	3302      	adds	r3, #2
 80194e6:	009b      	lsls	r3, r3, #2
 80194e8:	4413      	add	r3, r2
 80194ea:	685b      	ldr	r3, [r3, #4]
 80194ec:	681b      	ldr	r3, [r3, #0]
 80194ee:	3320      	adds	r3, #32
 80194f0:	681b      	ldr	r3, [r3, #0]
 80194f2:	4608      	mov	r0, r1
 80194f4:	4798      	blx	r3
 80194f6:	4603      	mov	r3, r0
 80194f8:	2b02      	cmp	r3, #2
 80194fa:	d101      	bne.n	8019500 <_ZN22core_utils_RegisterMapILi60EE7executeEt+0x48>
 80194fc:	2301      	movs	r3, #1
 80194fe:	e000      	b.n	8019502 <_ZN22core_utils_RegisterMapILi60EE7executeEt+0x4a>
 8019500:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 8019502:	2b00      	cmp	r3, #0
 8019504:	d03d      	beq.n	8019582 <_ZN22core_utils_RegisterMapILi60EE7executeEt+0xca>
			if (this->entries[address]->getInputSize() == 0
 8019506:	887b      	ldrh	r3, [r7, #2]
 8019508:	687a      	ldr	r2, [r7, #4]
 801950a:	3302      	adds	r3, #2
 801950c:	009b      	lsls	r3, r3, #2
 801950e:	4413      	add	r3, r2
 8019510:	6859      	ldr	r1, [r3, #4]
 8019512:	887b      	ldrh	r3, [r7, #2]
 8019514:	687a      	ldr	r2, [r7, #4]
 8019516:	3302      	adds	r3, #2
 8019518:	009b      	lsls	r3, r3, #2
 801951a:	4413      	add	r3, r2
 801951c:	685b      	ldr	r3, [r3, #4]
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	3310      	adds	r3, #16
 8019522:	681b      	ldr	r3, [r3, #0]
 8019524:	4608      	mov	r0, r1
 8019526:	4798      	blx	r3
 8019528:	4603      	mov	r3, r0
					&& this->entries[address]->getOutputSize() == 0) {
 801952a:	2b00      	cmp	r3, #0
 801952c:	d115      	bne.n	801955a <_ZN22core_utils_RegisterMapILi60EE7executeEt+0xa2>
 801952e:	887b      	ldrh	r3, [r7, #2]
 8019530:	687a      	ldr	r2, [r7, #4]
 8019532:	3302      	adds	r3, #2
 8019534:	009b      	lsls	r3, r3, #2
 8019536:	4413      	add	r3, r2
 8019538:	6859      	ldr	r1, [r3, #4]
 801953a:	887b      	ldrh	r3, [r7, #2]
 801953c:	687a      	ldr	r2, [r7, #4]
 801953e:	3302      	adds	r3, #2
 8019540:	009b      	lsls	r3, r3, #2
 8019542:	4413      	add	r3, r2
 8019544:	685b      	ldr	r3, [r3, #4]
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	3314      	adds	r3, #20
 801954a:	681b      	ldr	r3, [r3, #0]
 801954c:	4608      	mov	r0, r1
 801954e:	4798      	blx	r3
 8019550:	4603      	mov	r3, r0
 8019552:	2b00      	cmp	r3, #0
 8019554:	d101      	bne.n	801955a <_ZN22core_utils_RegisterMapILi60EE7executeEt+0xa2>
 8019556:	2301      	movs	r3, #1
 8019558:	e000      	b.n	801955c <_ZN22core_utils_RegisterMapILi60EE7executeEt+0xa4>
 801955a:	2300      	movs	r3, #0
			if (this->entries[address]->getInputSize() == 0
 801955c:	2b00      	cmp	r3, #0
 801955e:	d010      	beq.n	8019582 <_ZN22core_utils_RegisterMapILi60EE7executeEt+0xca>
				this->entries[address]->execute();
 8019560:	887b      	ldrh	r3, [r7, #2]
 8019562:	687a      	ldr	r2, [r7, #4]
 8019564:	3302      	adds	r3, #2
 8019566:	009b      	lsls	r3, r3, #2
 8019568:	4413      	add	r3, r2
 801956a:	6859      	ldr	r1, [r3, #4]
 801956c:	887b      	ldrh	r3, [r7, #2]
 801956e:	687a      	ldr	r2, [r7, #4]
 8019570:	3302      	adds	r3, #2
 8019572:	009b      	lsls	r3, r3, #2
 8019574:	4413      	add	r3, r2
 8019576:	685b      	ldr	r3, [r3, #4]
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	3318      	adds	r3, #24
 801957c:	681b      	ldr	r3, [r3, #0]
 801957e:	4608      	mov	r0, r1
 8019580:	4798      	blx	r3
		return 0;
 8019582:	2300      	movs	r3, #0
	}
 8019584:	4618      	mov	r0, r3
 8019586:	3708      	adds	r7, #8
 8019588:	46bd      	mov	sp, r7
 801958a:	bd80      	pop	{r7, pc}

0801958c <_ZN24core_utils_RegisterEntryIhE5writeEPv>:
	void write(void *value) {
 801958c:	b580      	push	{r7, lr}
 801958e:	b084      	sub	sp, #16
 8019590:	af00      	add	r7, sp, #0
 8019592:	6078      	str	r0, [r7, #4]
 8019594:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	7a9b      	ldrb	r3, [r3, #10]
 801959a:	2b00      	cmp	r3, #0
 801959c:	d00c      	beq.n	80195b8 <_ZN24core_utils_RegisterEntryIhE5writeEPv+0x2c>
		T *value_typed = (T*) value;
 801959e:	683b      	ldr	r3, [r7, #0]
 80195a0:	60fb      	str	r3, [r7, #12]
		*(this->data) = *value_typed;
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	68db      	ldr	r3, [r3, #12]
 80195a6:	68fa      	ldr	r2, [r7, #12]
 80195a8:	7812      	ldrb	r2, [r2, #0]
 80195aa:	701a      	strb	r2, [r3, #0]
		this->write_function.call();
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	3310      	adds	r3, #16
 80195b0:	4618      	mov	r0, r3
 80195b2:	f7f8 fda5 	bl	8012100 <_ZN8Callback4callEv>
 80195b6:	e000      	b.n	80195ba <_ZN24core_utils_RegisterEntryIhE5writeEPv+0x2e>
			return;
 80195b8:	bf00      	nop
	}
 80195ba:	3710      	adds	r7, #16
 80195bc:	46bd      	mov	sp, r7
 80195be:	bd80      	pop	{r7, pc}

080195c0 <_ZN24core_utils_RegisterEntryIhE5writeEPh>:
	void write(uint8_t *data) { // TODO: not good
 80195c0:	b580      	push	{r7, lr}
 80195c2:	b084      	sub	sp, #16
 80195c4:	af00      	add	r7, sp, #0
 80195c6:	6078      	str	r0, [r7, #4]
 80195c8:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	7a9b      	ldrb	r3, [r3, #10]
 80195ce:	2b00      	cmp	r3, #0
 80195d0:	d018      	beq.n	8019604 <_ZN24core_utils_RegisterEntryIhE5writeEPh+0x44>
		for (uint8_t i = 0; i < sizeof(T); i++) {
 80195d2:	2300      	movs	r3, #0
 80195d4:	73fb      	strb	r3, [r7, #15]
 80195d6:	7bfb      	ldrb	r3, [r7, #15]
 80195d8:	2b00      	cmp	r3, #0
 80195da:	d10c      	bne.n	80195f6 <_ZN24core_utils_RegisterEntryIhE5writeEPh+0x36>
			this->data_union.data_bytes[i] = data[i];
 80195dc:	7bfb      	ldrb	r3, [r7, #15]
 80195de:	683a      	ldr	r2, [r7, #0]
 80195e0:	441a      	add	r2, r3
 80195e2:	7bfb      	ldrb	r3, [r7, #15]
 80195e4:	7811      	ldrb	r1, [r2, #0]
 80195e6:	687a      	ldr	r2, [r7, #4]
 80195e8:	4413      	add	r3, r2
 80195ea:	460a      	mov	r2, r1
 80195ec:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 80195ee:	7bfb      	ldrb	r3, [r7, #15]
 80195f0:	3301      	adds	r3, #1
 80195f2:	73fb      	strb	r3, [r7, #15]
 80195f4:	e7ef      	b.n	80195d6 <_ZN24core_utils_RegisterEntryIhE5writeEPh+0x16>
		this->write(this->data_union.data);
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	799b      	ldrb	r3, [r3, #6]
 80195fa:	4619      	mov	r1, r3
 80195fc:	6878      	ldr	r0, [r7, #4]
 80195fe:	f000 f8dc 	bl	80197ba <_ZN24core_utils_RegisterEntryIhE5writeEh>
 8019602:	e000      	b.n	8019606 <_ZN24core_utils_RegisterEntryIhE5writeEPh+0x46>
			return;
 8019604:	bf00      	nop
	}
 8019606:	3710      	adds	r7, #16
 8019608:	46bd      	mov	sp, r7
 801960a:	bd80      	pop	{r7, pc}

0801960c <_ZN24core_utils_RegisterEntryIhE9readBytesEPh>:
	uint8_t readBytes(uint8_t *data) {
 801960c:	b480      	push	{r7}
 801960e:	b085      	sub	sp, #20
 8019610:	af00      	add	r7, sp, #0
 8019612:	6078      	str	r0, [r7, #4]
 8019614:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_WRITE) {
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	7a9b      	ldrb	r3, [r3, #10]
 801961a:	2b01      	cmp	r3, #1
 801961c:	d101      	bne.n	8019622 <_ZN24core_utils_RegisterEntryIhE9readBytesEPh+0x16>
			return 0;
 801961e:	2300      	movs	r3, #0
 8019620:	e016      	b.n	8019650 <_ZN24core_utils_RegisterEntryIhE9readBytesEPh+0x44>
		this->data_union.data = *(this->data);
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	68db      	ldr	r3, [r3, #12]
 8019626:	781a      	ldrb	r2, [r3, #0]
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 801962c:	2300      	movs	r3, #0
 801962e:	73fb      	strb	r3, [r7, #15]
 8019630:	7bfb      	ldrb	r3, [r7, #15]
 8019632:	2b00      	cmp	r3, #0
 8019634:	d10b      	bne.n	801964e <_ZN24core_utils_RegisterEntryIhE9readBytesEPh+0x42>
			data[i] = this->data_union.data_bytes[i];
 8019636:	7bfa      	ldrb	r2, [r7, #15]
 8019638:	7bfb      	ldrb	r3, [r7, #15]
 801963a:	6839      	ldr	r1, [r7, #0]
 801963c:	440b      	add	r3, r1
 801963e:	6879      	ldr	r1, [r7, #4]
 8019640:	440a      	add	r2, r1
 8019642:	7992      	ldrb	r2, [r2, #6]
 8019644:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 8019646:	7bfb      	ldrb	r3, [r7, #15]
 8019648:	3301      	adds	r3, #1
 801964a:	73fb      	strb	r3, [r7, #15]
 801964c:	e7f0      	b.n	8019630 <_ZN24core_utils_RegisterEntryIhE9readBytesEPh+0x24>
		return sizeof(T);
 801964e:	2301      	movs	r3, #1
	}
 8019650:	4618      	mov	r0, r3
 8019652:	3714      	adds	r7, #20
 8019654:	46bd      	mov	sp, r7
 8019656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801965a:	4770      	bx	lr

0801965c <_ZN24core_utils_RegisterEntryIhE7getSizeEv>:
	uint8_t getSize() {
 801965c:	b480      	push	{r7}
 801965e:	b083      	sub	sp, #12
 8019660:	af00      	add	r7, sp, #0
 8019662:	6078      	str	r0, [r7, #4]
		return sizeof(T);
 8019664:	2301      	movs	r3, #1
	}
 8019666:	4618      	mov	r0, r3
 8019668:	370c      	adds	r7, #12
 801966a:	46bd      	mov	sp, r7
 801966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019670:	4770      	bx	lr

08019672 <_ZN24core_utils_RegisterEntryIhE7getTypeEv>:
	register_entry_type getType() {
 8019672:	b480      	push	{r7}
 8019674:	b083      	sub	sp, #12
 8019676:	af00      	add	r7, sp, #0
 8019678:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_DATA;
 801967a:	2301      	movs	r3, #1
	}
 801967c:	4618      	mov	r0, r3
 801967e:	370c      	adds	r7, #12
 8019680:	46bd      	mov	sp, r7
 8019682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019686:	4770      	bx	lr

08019688 <_ZN24core_utils_RegisterEntryIhE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 8019688:	b480      	push	{r7}
 801968a:	b083      	sub	sp, #12
 801968c:	af00      	add	r7, sp, #0
 801968e:	6078      	str	r0, [r7, #4]
		return this->rw;
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	7a9b      	ldrb	r3, [r3, #10]
	}
 8019694:	4618      	mov	r0, r3
 8019696:	370c      	adds	r7, #12
 8019698:	46bd      	mov	sp, r7
 801969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801969e:	4770      	bx	lr

080196a0 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeEPv>:
	void write(void *value) {
 80196a0:	b580      	push	{r7, lr}
 80196a2:	b084      	sub	sp, #16
 80196a4:	af00      	add	r7, sp, #0
 80196a6:	6078      	str	r0, [r7, #4]
 80196a8:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	7a9b      	ldrb	r3, [r3, #10]
 80196ae:	2b00      	cmp	r3, #0
 80196b0:	d00d      	beq.n	80196ce <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeEPv+0x2e>
		T *value_typed = (T*) value;
 80196b2:	683b      	ldr	r3, [r7, #0]
 80196b4:	60fb      	str	r3, [r7, #12]
		*(this->data) = *value_typed;
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	68db      	ldr	r3, [r3, #12]
 80196ba:	68fa      	ldr	r2, [r7, #12]
 80196bc:	f992 2000 	ldrsb.w	r2, [r2]
 80196c0:	701a      	strb	r2, [r3, #0]
		this->write_function.call();
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	3310      	adds	r3, #16
 80196c6:	4618      	mov	r0, r3
 80196c8:	f7f8 fd1a 	bl	8012100 <_ZN8Callback4callEv>
 80196cc:	e000      	b.n	80196d0 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeEPv+0x30>
			return;
 80196ce:	bf00      	nop
	}
 80196d0:	3710      	adds	r7, #16
 80196d2:	46bd      	mov	sp, r7
 80196d4:	bd80      	pop	{r7, pc}

080196d6 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeEPh>:
	void write(uint8_t *data) { // TODO: not good
 80196d6:	b580      	push	{r7, lr}
 80196d8:	b084      	sub	sp, #16
 80196da:	af00      	add	r7, sp, #0
 80196dc:	6078      	str	r0, [r7, #4]
 80196de:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	7a9b      	ldrb	r3, [r3, #10]
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d019      	beq.n	801971c <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeEPh+0x46>
		for (uint8_t i = 0; i < sizeof(T); i++) {
 80196e8:	2300      	movs	r3, #0
 80196ea:	73fb      	strb	r3, [r7, #15]
 80196ec:	7bfb      	ldrb	r3, [r7, #15]
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	d10c      	bne.n	801970c <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeEPh+0x36>
			this->data_union.data_bytes[i] = data[i];
 80196f2:	7bfb      	ldrb	r3, [r7, #15]
 80196f4:	683a      	ldr	r2, [r7, #0]
 80196f6:	441a      	add	r2, r3
 80196f8:	7bfb      	ldrb	r3, [r7, #15]
 80196fa:	7811      	ldrb	r1, [r2, #0]
 80196fc:	687a      	ldr	r2, [r7, #4]
 80196fe:	4413      	add	r3, r2
 8019700:	460a      	mov	r2, r1
 8019702:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 8019704:	7bfb      	ldrb	r3, [r7, #15]
 8019706:	3301      	adds	r3, #1
 8019708:	73fb      	strb	r3, [r7, #15]
 801970a:	e7ef      	b.n	80196ec <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeEPh+0x16>
		this->write(this->data_union.data);
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8019712:	4619      	mov	r1, r3
 8019714:	6878      	ldr	r0, [r7, #4]
 8019716:	f000 f868 	bl	80197ea <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeES0_>
 801971a:	e000      	b.n	801971e <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeEPh+0x48>
			return;
 801971c:	bf00      	nop
	}
 801971e:	3710      	adds	r7, #16
 8019720:	46bd      	mov	sp, r7
 8019722:	bd80      	pop	{r7, pc}

08019724 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE9readBytesEPh>:
	uint8_t readBytes(uint8_t *data) {
 8019724:	b480      	push	{r7}
 8019726:	b085      	sub	sp, #20
 8019728:	af00      	add	r7, sp, #0
 801972a:	6078      	str	r0, [r7, #4]
 801972c:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_WRITE) {
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	7a9b      	ldrb	r3, [r3, #10]
 8019732:	2b01      	cmp	r3, #1
 8019734:	d101      	bne.n	801973a <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE9readBytesEPh+0x16>
			return 0;
 8019736:	2300      	movs	r3, #0
 8019738:	e017      	b.n	801976a <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE9readBytesEPh+0x46>
		this->data_union.data = *(this->data);
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	68db      	ldr	r3, [r3, #12]
 801973e:	f993 2000 	ldrsb.w	r2, [r3]
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 8019746:	2300      	movs	r3, #0
 8019748:	73fb      	strb	r3, [r7, #15]
 801974a:	7bfb      	ldrb	r3, [r7, #15]
 801974c:	2b00      	cmp	r3, #0
 801974e:	d10b      	bne.n	8019768 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE9readBytesEPh+0x44>
			data[i] = this->data_union.data_bytes[i];
 8019750:	7bfa      	ldrb	r2, [r7, #15]
 8019752:	7bfb      	ldrb	r3, [r7, #15]
 8019754:	6839      	ldr	r1, [r7, #0]
 8019756:	440b      	add	r3, r1
 8019758:	6879      	ldr	r1, [r7, #4]
 801975a:	440a      	add	r2, r1
 801975c:	7992      	ldrb	r2, [r2, #6]
 801975e:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 8019760:	7bfb      	ldrb	r3, [r7, #15]
 8019762:	3301      	adds	r3, #1
 8019764:	73fb      	strb	r3, [r7, #15]
 8019766:	e7f0      	b.n	801974a <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE9readBytesEPh+0x26>
		return sizeof(T);
 8019768:	2301      	movs	r3, #1
	}
 801976a:	4618      	mov	r0, r3
 801976c:	3714      	adds	r7, #20
 801976e:	46bd      	mov	sp, r7
 8019770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019774:	4770      	bx	lr

08019776 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE7getSizeEv>:
	uint8_t getSize() {
 8019776:	b480      	push	{r7}
 8019778:	b083      	sub	sp, #12
 801977a:	af00      	add	r7, sp, #0
 801977c:	6078      	str	r0, [r7, #4]
		return sizeof(T);
 801977e:	2301      	movs	r3, #1
	}
 8019780:	4618      	mov	r0, r3
 8019782:	370c      	adds	r7, #12
 8019784:	46bd      	mov	sp, r7
 8019786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801978a:	4770      	bx	lr

0801978c <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE7getTypeEv>:
	register_entry_type getType() {
 801978c:	b480      	push	{r7}
 801978e:	b083      	sub	sp, #12
 8019790:	af00      	add	r7, sp, #0
 8019792:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_DATA;
 8019794:	2301      	movs	r3, #1
	}
 8019796:	4618      	mov	r0, r3
 8019798:	370c      	adds	r7, #12
 801979a:	46bd      	mov	sp, r7
 801979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197a0:	4770      	bx	lr

080197a2 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 80197a2:	b480      	push	{r7}
 80197a4:	b083      	sub	sp, #12
 80197a6:	af00      	add	r7, sp, #0
 80197a8:	6078      	str	r0, [r7, #4]
		return this->rw;
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	7a9b      	ldrb	r3, [r3, #10]
	}
 80197ae:	4618      	mov	r0, r3
 80197b0:	370c      	adds	r7, #12
 80197b2:	46bd      	mov	sp, r7
 80197b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197b8:	4770      	bx	lr

080197ba <_ZN24core_utils_RegisterEntryIhE5writeEh>:
	void write(T value) {
 80197ba:	b580      	push	{r7, lr}
 80197bc:	b082      	sub	sp, #8
 80197be:	af00      	add	r7, sp, #0
 80197c0:	6078      	str	r0, [r7, #4]
 80197c2:	460b      	mov	r3, r1
 80197c4:	70fb      	strb	r3, [r7, #3]
		if (this->rw == REGISTER_ENTRY_READ) {
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	7a9b      	ldrb	r3, [r3, #10]
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d009      	beq.n	80197e2 <_ZN24core_utils_RegisterEntryIhE5writeEh+0x28>
		*(this->data) = value;
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	68db      	ldr	r3, [r3, #12]
 80197d2:	78fa      	ldrb	r2, [r7, #3]
 80197d4:	701a      	strb	r2, [r3, #0]
		this->write_function.call();
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	3310      	adds	r3, #16
 80197da:	4618      	mov	r0, r3
 80197dc:	f7f8 fc90 	bl	8012100 <_ZN8Callback4callEv>
 80197e0:	e000      	b.n	80197e4 <_ZN24core_utils_RegisterEntryIhE5writeEh+0x2a>
			return;
 80197e2:	bf00      	nop
	}
 80197e4:	3708      	adds	r7, #8
 80197e6:	46bd      	mov	sp, r7
 80197e8:	bd80      	pop	{r7, pc}

080197ea <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeES0_>:
	void write(T value) {
 80197ea:	b580      	push	{r7, lr}
 80197ec:	b082      	sub	sp, #8
 80197ee:	af00      	add	r7, sp, #0
 80197f0:	6078      	str	r0, [r7, #4]
 80197f2:	460b      	mov	r3, r1
 80197f4:	70fb      	strb	r3, [r7, #3]
		if (this->rw == REGISTER_ENTRY_READ) {
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	7a9b      	ldrb	r3, [r3, #10]
 80197fa:	2b00      	cmp	r3, #0
 80197fc:	d009      	beq.n	8019812 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeES0_+0x28>
		*(this->data) = value;
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	68db      	ldr	r3, [r3, #12]
 8019802:	78fa      	ldrb	r2, [r7, #3]
 8019804:	701a      	strb	r2, [r3, #0]
		this->write_function.call();
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	3310      	adds	r3, #16
 801980a:	4618      	mov	r0, r3
 801980c:	f7f8 fc78 	bl	8012100 <_ZN8Callback4callEv>
 8019810:	e000      	b.n	8019814 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeES0_+0x2a>
			return;
 8019812:	bf00      	nop
	}
 8019814:	3708      	adds	r7, #8
 8019816:	46bd      	mov	sp, r7
 8019818:	bd80      	pop	{r7, pc}

0801981a <_GLOBAL__sub_I_twipr_firmware>:
 801981a:	b580      	push	{r7, lr}
 801981c:	af00      	add	r7, sp, #0
 801981e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019822:	2001      	movs	r0, #1
 8019824:	f7ff fcae 	bl	8019184 <_Z41__static_initialization_and_destruction_0ii>
 8019828:	bd80      	pop	{r7, pc}

0801982a <_Z18robot_control_initv>:
void robot_control_task(void *argument);



// ------------------------------------------------------------------------------------------------------------
void robot_control_init(){
 801982a:	b480      	push	{r7}
 801982c:	af00      	add	r7, sp, #0
//	debug_uart.init();
//	debug_uart.registerCallback(CORE_COMM_SERIAL_SOCKET_CB_RX, uart_rx_fun, NULL);

}
 801982e:	bf00      	nop
 8019830:	46bd      	mov	sp, r7
 8019832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019836:	4770      	bx	lr

08019838 <_Z19robot_control_startv>:
// ------------------------------------------------------------------------------------------------------------
void robot_control_start(){
 8019838:	b580      	push	{r7, lr}
 801983a:	af00      	add	r7, sp, #0
//	debug_uart.start();
	osThreadNew(robot_control_task, NULL, &rc_task_attributes);
 801983c:	4a03      	ldr	r2, [pc, #12]	; (801984c <_Z19robot_control_startv+0x14>)
 801983e:	2100      	movs	r1, #0
 8019840:	4803      	ldr	r0, [pc, #12]	; (8019850 <_Z19robot_control_startv+0x18>)
 8019842:	f7f4 fb90 	bl	800df66 <osThreadNew>
}
 8019846:	bf00      	nop
 8019848:	bd80      	pop	{r7, pc}
 801984a:	bf00      	nop
 801984c:	08020a88 	.word	0x08020a88
 8019850:	08019855 	.word	0x08019855

08019854 <_Z18robot_control_taskPv>:

// ------------------------------------------------------------------------------------------------------------
void robot_control_task(void *argument){
 8019854:	b580      	push	{r7, lr}
 8019856:	b084      	sub	sp, #16
 8019858:	af00      	add	r7, sp, #0
 801985a:	6078      	str	r0, [r7, #4]
//	debug.start();

	uint32_t kernel_ticks = 0;
 801985c:	2300      	movs	r3, #0
 801985e:	60fb      	str	r3, [r7, #12]
	while (true){
			kernel_ticks = osKernelGetTickCount();
 8019860:	f7f4 fb6c 	bl	800df3c <osKernelGetTickCount>
 8019864:	60f8      	str	r0, [r7, #12]
			led_act.toggle();
 8019866:	4804      	ldr	r0, [pc, #16]	; (8019878 <_Z18robot_control_taskPv+0x24>)
 8019868:	f001 ff7c 	bl	801b764 <_ZN17core_hardware_LED6toggleEv>
			osDelayUntil(kernel_ticks + (uint32_t) 250);
 801986c:	68fb      	ldr	r3, [r7, #12]
 801986e:	33fa      	adds	r3, #250	; 0xfa
 8019870:	4618      	mov	r0, r3
 8019872:	f7f4 fc30 	bl	800e0d6 <osDelayUntil>
			kernel_ticks = osKernelGetTickCount();
 8019876:	e7f3      	b.n	8019860 <_Z18robot_control_taskPv+0xc>
 8019878:	2401db8c 	.word	0x2401db8c

0801987c <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 801987c:	b580      	push	{r7, lr}
 801987e:	b082      	sub	sp, #8
 8019880:	af00      	add	r7, sp, #0
 8019882:	6078      	str	r0, [r7, #4]
 8019884:	6039      	str	r1, [r7, #0]
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	2b01      	cmp	r3, #1
 801988a:	d119      	bne.n	80198c0 <_Z41__static_initialization_and_destruction_0ii+0x44>
 801988c:	683b      	ldr	r3, [r7, #0]
 801988e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019892:	4293      	cmp	r3, r2
 8019894:	d114      	bne.n	80198c0 <_Z41__static_initialization_and_destruction_0ii+0x44>
core_hardware_LED led1(BOARD_LED_1_PORT, BOARD_LED_1_PIN);
 8019896:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801989a:	490b      	ldr	r1, [pc, #44]	; (80198c8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 801989c:	480b      	ldr	r0, [pc, #44]	; (80198cc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 801989e:	f001 ff2d 	bl	801b6fc <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>
core_hardware_LED led2(BOARD_LED_2_PORT, BOARD_LED_2_PIN);
 80198a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80198a6:	4908      	ldr	r1, [pc, #32]	; (80198c8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80198a8:	4809      	ldr	r0, [pc, #36]	; (80198d0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80198aa:	f001 ff27 	bl	801b6fc <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>
core_hardware_LED led_act(BOARD_LED_ACT_PORT, BOARD_LED_ACT_PIN);
 80198ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80198b2:	4908      	ldr	r1, [pc, #32]	; (80198d4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80198b4:	4808      	ldr	r0, [pc, #32]	; (80198d8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80198b6:	f001 ff21 	bl	801b6fc <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>
Madgwick sensor_fusion;
 80198ba:	4808      	ldr	r0, [pc, #32]	; (80198dc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80198bc:	f001 fb00 	bl	801aec0 <_ZN8MadgwickC1Ev>
}
 80198c0:	bf00      	nop
 80198c2:	3708      	adds	r7, #8
 80198c4:	46bd      	mov	sp, r7
 80198c6:	bd80      	pop	{r7, pc}
 80198c8:	58021000 	.word	0x58021000
 80198cc:	2401db7c 	.word	0x2401db7c
 80198d0:	2401db84 	.word	0x2401db84
 80198d4:	58020c00 	.word	0x58020c00
 80198d8:	2401db8c 	.word	0x2401db8c
 80198dc:	2401db94 	.word	0x2401db94

080198e0 <_GLOBAL__sub_I_led1>:
 80198e0:	b580      	push	{r7, lr}
 80198e2:	af00      	add	r7, sp, #0
 80198e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80198e8:	2001      	movs	r0, #1
 80198ea:	f7ff ffc7 	bl	801987c <_Z41__static_initialization_and_destruction_0ii>
 80198ee:	bd80      	pop	{r7, pc}

080198f0 <_ZN12ModbusMasterC1Ev>:
void uartRxCompleteDMA_callback(UART_HandleTypeDef *huart, uint16_t size);
static void uartRxCompleteIT_callback(UART_HandleTypeDef *huart);
void uartTxCompleteDMA_callback(UART_HandleTypeDef *huart);

/* ================================================================ */
ModbusMaster::ModbusMaster() {
 80198f0:	b580      	push	{r7, lr}
 80198f2:	b082      	sub	sp, #8
 80198f4:	af00      	add	r7, sp, #0
 80198f6:	6078      	str	r0, [r7, #4]
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	33a8      	adds	r3, #168	; 0xa8
 80198fc:	4618      	mov	r0, r3
 80198fe:	f001 f8e2 	bl	801aac6 <_ZN21core_utils_RingBufferILi128EEC1Ev>

}
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	4618      	mov	r0, r3
 8019906:	3708      	adds	r7, #8
 8019908:	46bd      	mov	sp, r7
 801990a:	bd80      	pop	{r7, pc}

0801990c <_ZN12ModbusMaster4initE15modbus_config_t>:
/* ================================================================ */
void ModbusMaster::init(modbus_config_t config) {
 801990c:	b580      	push	{r7, lr}
 801990e:	b086      	sub	sp, #24
 8019910:	af02      	add	r7, sp, #8
 8019912:	60f8      	str	r0, [r7, #12]
 8019914:	4638      	mov	r0, r7
 8019916:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	this->config = config;
 801991a:	68fb      	ldr	r3, [r7, #12]
 801991c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8019920:	463a      	mov	r2, r7
 8019922:	ca07      	ldmia	r2, {r0, r1, r2}
 8019924:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	if (num_handlers < MAX_MODBUS_HANDLERS) {
 8019928:	4b3a      	ldr	r3, [pc, #232]	; (8019a14 <_ZN12ModbusMaster4initE15modbus_config_t+0x108>)
 801992a:	781b      	ldrb	r3, [r3, #0]
 801992c:	2b01      	cmp	r3, #1
 801992e:	d86c      	bhi.n	8019a0a <_ZN12ModbusMaster4initE15modbus_config_t+0xfe>

		// Initialize the ring buffer
		this->xBufferRX.clear();
 8019930:	68fb      	ldr	r3, [r7, #12]
 8019932:	33a8      	adds	r3, #168	; 0xa8
 8019934:	4618      	mov	r0, r3
 8019936:	f001 f8d1 	bl	801aadc <_ZN21core_utils_RingBufferILi128EE5clearEv>

		// Create the master task and the queue for telegrams
		this->thread_handle = osThreadNew(modbusMasterTask, this,
 801993a:	4a37      	ldr	r2, [pc, #220]	; (8019a18 <_ZN12ModbusMaster4initE15modbus_config_t+0x10c>)
 801993c:	68f9      	ldr	r1, [r7, #12]
 801993e:	4837      	ldr	r0, [pc, #220]	; (8019a1c <_ZN12ModbusMaster4initE15modbus_config_t+0x110>)
 8019940:	f7f4 fb11 	bl	800df66 <osThreadNew>
 8019944:	4602      	mov	r2, r0
 8019946:	68fb      	ldr	r3, [r7, #12]
 8019948:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				&task_attributes);

		//
		this->u16timeOut = 250;
 801994c:	68fb      	ldr	r3, [r7, #12]
 801994e:	22fa      	movs	r2, #250	; 0xfa
 8019950:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		// Initialize the timeout timer
		this->xTimerTimeout = xTimerCreate("xTimerTimeout", // Just a text name, not used by the kernel.
				this->u16timeOut,     		// The timer period in ticks.
 8019954:	68fb      	ldr	r3, [r7, #12]
 8019956:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
		this->xTimerTimeout = xTimerCreate("xTimerTimeout", // Just a text name, not used by the kernel.
 801995a:	4619      	mov	r1, r3
				pdFALSE, // The timers will auto-reload themselves when they expire.
				(void*) this->xTimerTimeout, // Assign each timer a unique id equal to its array index.
 801995c:	68fb      	ldr	r3, [r7, #12]
 801995e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
		this->xTimerTimeout = xTimerCreate("xTimerTimeout", // Just a text name, not used by the kernel.
 8019962:	4a2f      	ldr	r2, [pc, #188]	; (8019a20 <_ZN12ModbusMaster4initE15modbus_config_t+0x114>)
 8019964:	9200      	str	r2, [sp, #0]
 8019966:	2200      	movs	r2, #0
 8019968:	482e      	ldr	r0, [pc, #184]	; (8019a24 <_ZN12ModbusMaster4initE15modbus_config_t+0x118>)
 801996a:	f7f7 fbbd 	bl	80110e8 <xTimerCreate>
 801996e:	4602      	mov	r2, r0
 8019970:	68fb      	ldr	r3, [r7, #12]
 8019972:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				(TimerCallbackFunction_t) vTimerCallbackTimeout // Each timer calls the same callback when it expires.
				);

		if (this->xTimerTimeout == NULL) {
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801997c:	2b00      	cmp	r3, #0
 801997e:	d100      	bne.n	8019982 <_ZN12ModbusMaster4initE15modbus_config_t+0x76>
			while (1)
 8019980:	e7fe      	b.n	8019980 <_ZN12ModbusMaster4initE15modbus_config_t+0x74>
				; // TODO error creating timer, check heap and stack size
		}

		modbus_query_queue = osMessageQueueNew(MAX_TELEGRAMS,
 8019982:	2200      	movs	r2, #0
 8019984:	2110      	movs	r1, #16
 8019986:	200a      	movs	r0, #10
 8019988:	f7f4 fd84 	bl	800e494 <osMessageQueueNew>
 801998c:	4603      	mov	r3, r0
 801998e:	4a26      	ldr	r2, [pc, #152]	; (8019a28 <_ZN12ModbusMaster4initE15modbus_config_t+0x11c>)
 8019990:	6013      	str	r3, [r2, #0]
				sizeof(modbus_query_t), NULL);

		if (modbus_query_queue == NULL) {
 8019992:	4b25      	ldr	r3, [pc, #148]	; (8019a28 <_ZN12ModbusMaster4initE15modbus_config_t+0x11c>)
 8019994:	681b      	ldr	r3, [r3, #0]
 8019996:	2b00      	cmp	r3, #0
 8019998:	d100      	bne.n	801999c <_ZN12ModbusMaster4initE15modbus_config_t+0x90>
			while (1)
 801999a:	e7fe      	b.n	801999a <_ZN12ModbusMaster4initE15modbus_config_t+0x8e>
				; //error creating queue for telegrams, check heap and stack size
		}

		if (this->thread_handle == NULL) {
 801999c:	68fb      	ldr	r3, [r7, #12]
 801999e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80199a2:	2b00      	cmp	r3, #0
 80199a4:	d100      	bne.n	80199a8 <_ZN12ModbusMaster4initE15modbus_config_t+0x9c>
			while (1)
 80199a6:	e7fe      	b.n	80199a6 <_ZN12ModbusMaster4initE15modbus_config_t+0x9a>
		}

		this->xTimerT35 = xTimerCreate("TimerT35", // Just a text name, not used by the kernel.
				T35,     // The timer period in ticks.
				pdFALSE, // The timers will auto-reload themselves when they expire.
				(void*) this->xTimerT35, // Assign each timer a unique id equal to its array index.
 80199a8:	68fb      	ldr	r3, [r7, #12]
 80199aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
		this->xTimerT35 = xTimerCreate("TimerT35", // Just a text name, not used by the kernel.
 80199ae:	4a1f      	ldr	r2, [pc, #124]	; (8019a2c <_ZN12ModbusMaster4initE15modbus_config_t+0x120>)
 80199b0:	9200      	str	r2, [sp, #0]
 80199b2:	2200      	movs	r2, #0
 80199b4:	2106      	movs	r1, #6
 80199b6:	481e      	ldr	r0, [pc, #120]	; (8019a30 <_ZN12ModbusMaster4initE15modbus_config_t+0x124>)
 80199b8:	f7f7 fb96 	bl	80110e8 <xTimerCreate>
 80199bc:	4602      	mov	r2, r0
 80199be:	68fb      	ldr	r3, [r7, #12]
 80199c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
				(TimerCallbackFunction_t) vTimerCallbackT35 // Each timer calls the same callback when it expires.
				);
		if (this->xTimerT35 == NULL) {
 80199c4:	68fb      	ldr	r3, [r7, #12]
 80199c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d100      	bne.n	80199d0 <_ZN12ModbusMaster4initE15modbus_config_t+0xc4>
			while (1)
 80199ce:	e7fe      	b.n	80199ce <_ZN12ModbusMaster4initE15modbus_config_t+0xc2>
				; //Error creating the timer, check heap and stack size
		}
		this->ModBusSphrHandle = osSemaphoreNew(1, 1, &semaphore_attributes);
 80199d0:	4a18      	ldr	r2, [pc, #96]	; (8019a34 <_ZN12ModbusMaster4initE15modbus_config_t+0x128>)
 80199d2:	2101      	movs	r1, #1
 80199d4:	2001      	movs	r0, #1
 80199d6:	f7f4 fc3d 	bl	800e254 <osSemaphoreNew>
 80199da:	4602      	mov	r2, r0
 80199dc:	68fb      	ldr	r3, [r7, #12]
 80199de:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

		if (this->ModBusSphrHandle == NULL) {
 80199e2:	68fb      	ldr	r3, [r7, #12]
 80199e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	d100      	bne.n	80199ee <_ZN12ModbusMaster4initE15modbus_config_t+0xe2>
			while (1)
 80199ec:	e7fe      	b.n	80199ec <_ZN12ModbusMaster4initE15modbus_config_t+0xe0>
				; //Error creating the semaphore, check heap and stack size
		}

		handlers[num_handlers] = this;
 80199ee:	4b09      	ldr	r3, [pc, #36]	; (8019a14 <_ZN12ModbusMaster4initE15modbus_config_t+0x108>)
 80199f0:	781b      	ldrb	r3, [r3, #0]
 80199f2:	4619      	mov	r1, r3
 80199f4:	4a10      	ldr	r2, [pc, #64]	; (8019a38 <_ZN12ModbusMaster4initE15modbus_config_t+0x12c>)
 80199f6:	68fb      	ldr	r3, [r7, #12]
 80199f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		num_handlers++;
 80199fc:	4b05      	ldr	r3, [pc, #20]	; (8019a14 <_ZN12ModbusMaster4initE15modbus_config_t+0x108>)
 80199fe:	781b      	ldrb	r3, [r3, #0]
 8019a00:	3301      	adds	r3, #1
 8019a02:	b2da      	uxtb	r2, r3
 8019a04:	4b03      	ldr	r3, [pc, #12]	; (8019a14 <_ZN12ModbusMaster4initE15modbus_config_t+0x108>)
 8019a06:	701a      	strb	r2, [r3, #0]
	// Initialize the UART

	// TODO: Add UART Initialization and checking whether it is correctly initialized
	// Should I be able to use one of my UART classes?

}
 8019a08:	e000      	b.n	8019a0c <_ZN12ModbusMaster4initE15modbus_config_t+0x100>
		while (1)
 8019a0a:	e7fe      	b.n	8019a0a <_ZN12ModbusMaster4initE15modbus_config_t+0xfe>
}
 8019a0c:	3710      	adds	r7, #16
 8019a0e:	46bd      	mov	sp, r7
 8019a10:	bd80      	pop	{r7, pc}
 8019a12:	bf00      	nop
 8019a14:	2401dbc4 	.word	0x2401dbc4
 8019a18:	08020aac 	.word	0x08020aac
 8019a1c:	08019cf1 	.word	0x08019cf1
 8019a20:	0801a599 	.word	0x0801a599
 8019a24:	08020598 	.word	0x08020598
 8019a28:	2401dbc8 	.word	0x2401dbc8
 8019a2c:	0801a525 	.word	0x0801a525
 8019a30:	080205a8 	.word	0x080205a8
 8019a34:	08020ad0 	.word	0x08020ad0
 8019a38:	2401dbbc 	.word	0x2401dbbc

08019a3c <_ZN12ModbusMaster5startEv>:
/* ================================================================ */
void ModbusMaster::start() {
 8019a3c:	b580      	push	{r7, lr}
 8019a3e:	b082      	sub	sp, #8
 8019a40:	af00      	add	r7, sp, #0
 8019a42:	6078      	str	r0, [r7, #4]

	if (this->config.EN_GPIOx != NULL) {
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d009      	beq.n	8019a62 <_ZN12ModbusMaster5startEv+0x26>
		// Set RS485 Transmitter to transmit mode
		HAL_GPIO_WritePin(config.EN_GPIOx, config.EN_GPIO_Pin, GPIO_PIN_RESET);
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 8019a5a:	2200      	movs	r2, #0
 8019a5c:	4619      	mov	r1, r3
 8019a5e:	f7eb fa81 	bl	8004f64 <HAL_GPIO_WritePin>
	}

	// Wait until UART is ready
	while (HAL_UART_GetState(this->config.huart) != HAL_UART_STATE_READY) {
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8019a68:	4618      	mov	r0, r3
 8019a6a:	f7f1 fdb5 	bl	800b5d8 <HAL_UART_GetState>
 8019a6e:	4603      	mov	r3, r0
 8019a70:	2b20      	cmp	r3, #32
 8019a72:	bf14      	ite	ne
 8019a74:	2301      	movne	r3, #1
 8019a76:	2300      	moveq	r3, #0
 8019a78:	b2db      	uxtb	r3, r3
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	d000      	beq.n	8019a80 <_ZN12ModbusMaster5startEv+0x44>
 8019a7e:	e7f0      	b.n	8019a62 <_ZN12ModbusMaster5startEv+0x26>

	}

	if (this->config.hardware == MB_UART_IT) {
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8019a86:	2b01      	cmp	r3, #1
 8019a88:	d11a      	bne.n	8019ac0 <_ZN12ModbusMaster5startEv+0x84>

		// Register the callback for the UART Interrupt
		HAL_UART_RegisterCallback(this->config.huart,
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8019a90:	4a84      	ldr	r2, [pc, #528]	; (8019ca4 <_ZN12ModbusMaster5startEv+0x268>)
 8019a92:	2103      	movs	r1, #3
 8019a94:	4618      	mov	r0, r3
 8019a96:	f7f0 fc03 	bl	800a2a0 <HAL_UART_RegisterCallback>
				HAL_UART_RX_COMPLETE_CB_ID, uartRxCompleteIT_callback);

//		HAL_UART_RegisterCallback(this->huart, HAL_UART_TX_COMPLETE_CB_ID, uartTxCompleteIT_callback);

		// Receive data from serial port for Modbus using interrupt
		if (HAL_UART_Receive_IT(this->config.huart, &this->dataRX, 1)
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	3392      	adds	r3, #146	; 0x92
 8019aa4:	2201      	movs	r2, #1
 8019aa6:	4619      	mov	r1, r3
 8019aa8:	f7f0 fd86 	bl	800a5b8 <HAL_UART_Receive_IT>
 8019aac:	4603      	mov	r3, r0
				!= HAL_OK) {
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	bf14      	ite	ne
 8019ab2:	2301      	movne	r3, #1
 8019ab4:	2300      	moveq	r3, #0
 8019ab6:	b2db      	uxtb	r3, r3
		if (HAL_UART_Receive_IT(this->config.huart, &this->dataRX, 1)
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	f000 80da 	beq.w	8019c72 <_ZN12ModbusMaster5startEv+0x236>
			while (1) {
 8019abe:	e7fe      	b.n	8019abe <_ZN12ModbusMaster5startEv+0x82>
				//error in your initialization code
			}
		}
	} else if (this->config.hardware == MB_UART_DMA) {
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8019ac6:	2b02      	cmp	r3, #2
 8019ac8:	f040 80d3 	bne.w	8019c72 <_ZN12ModbusMaster5startEv+0x236>
		HAL_UART_RegisterRxEventCallback(this->config.huart,
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8019ad2:	4975      	ldr	r1, [pc, #468]	; (8019ca8 <_ZN12ModbusMaster5startEv+0x26c>)
 8019ad4:	4618      	mov	r0, r3
 8019ad6:	f7f0 fc9d 	bl	800a414 <HAL_UART_RegisterRxEventCallback>
				uartRxCompleteDMA_callback);

		HAL_UART_RegisterCallback(this->config.huart,
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8019ae0:	4a72      	ldr	r2, [pc, #456]	; (8019cac <_ZN12ModbusMaster5startEv+0x270>)
 8019ae2:	2101      	movs	r1, #1
 8019ae4:	4618      	mov	r0, r3
 8019ae6:	f7f0 fbdb 	bl	800a2a0 <HAL_UART_RegisterCallback>
				HAL_UART_TX_COMPLETE_CB_ID, uartTxCompleteDMA_callback);

		if (HAL_UARTEx_ReceiveToIdle_DMA(this->config.huart,
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
				this->xBufferRX.buffer,
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	33a8      	adds	r3, #168	; 0xa8
		if (HAL_UARTEx_ReceiveToIdle_DMA(this->config.huart,
 8019af4:	2280      	movs	r2, #128	; 0x80
 8019af6:	4619      	mov	r1, r3
 8019af8:	f7f4 f8cd 	bl	800dc96 <HAL_UARTEx_ReceiveToIdle_DMA>
 8019afc:	4603      	mov	r3, r0
				MAX_BUFFER) != HAL_OK) {
 8019afe:	2b00      	cmp	r3, #0
 8019b00:	bf14      	ite	ne
 8019b02:	2301      	movne	r3, #1
 8019b04:	2300      	moveq	r3, #0
 8019b06:	b2db      	uxtb	r3, r3
		if (HAL_UARTEx_ReceiveToIdle_DMA(this->config.huart,
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	d000      	beq.n	8019b0e <_ZN12ModbusMaster5startEv+0xd2>
			while (1) {
 8019b0c:	e7fe      	b.n	8019b0c <_ZN12ModbusMaster5startEv+0xd0>
				//error in your initialization code
			}
		}
		__HAL_DMA_DISABLE_IT(this->config.huart->hdmarx, DMA_IT_HT);
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8019b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019b18:	681b      	ldr	r3, [r3, #0]
 8019b1a:	4a65      	ldr	r2, [pc, #404]	; (8019cb0 <_ZN12ModbusMaster5startEv+0x274>)
 8019b1c:	4293      	cmp	r3, r2
 8019b1e:	f000 8087 	beq.w	8019c30 <_ZN12ModbusMaster5startEv+0x1f4>
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8019b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019b2c:	681b      	ldr	r3, [r3, #0]
 8019b2e:	4a61      	ldr	r2, [pc, #388]	; (8019cb4 <_ZN12ModbusMaster5startEv+0x278>)
 8019b30:	4293      	cmp	r3, r2
 8019b32:	d07d      	beq.n	8019c30 <_ZN12ModbusMaster5startEv+0x1f4>
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8019b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	4a5d      	ldr	r2, [pc, #372]	; (8019cb8 <_ZN12ModbusMaster5startEv+0x27c>)
 8019b42:	4293      	cmp	r3, r2
 8019b44:	d074      	beq.n	8019c30 <_ZN12ModbusMaster5startEv+0x1f4>
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8019b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019b50:	681b      	ldr	r3, [r3, #0]
 8019b52:	4a5a      	ldr	r2, [pc, #360]	; (8019cbc <_ZN12ModbusMaster5startEv+0x280>)
 8019b54:	4293      	cmp	r3, r2
 8019b56:	d06b      	beq.n	8019c30 <_ZN12ModbusMaster5startEv+0x1f4>
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8019b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019b62:	681b      	ldr	r3, [r3, #0]
 8019b64:	4a56      	ldr	r2, [pc, #344]	; (8019cc0 <_ZN12ModbusMaster5startEv+0x284>)
 8019b66:	4293      	cmp	r3, r2
 8019b68:	d062      	beq.n	8019c30 <_ZN12ModbusMaster5startEv+0x1f4>
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8019b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019b74:	681b      	ldr	r3, [r3, #0]
 8019b76:	4a53      	ldr	r2, [pc, #332]	; (8019cc4 <_ZN12ModbusMaster5startEv+0x288>)
 8019b78:	4293      	cmp	r3, r2
 8019b7a:	d059      	beq.n	8019c30 <_ZN12ModbusMaster5startEv+0x1f4>
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8019b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019b86:	681b      	ldr	r3, [r3, #0]
 8019b88:	4a4f      	ldr	r2, [pc, #316]	; (8019cc8 <_ZN12ModbusMaster5startEv+0x28c>)
 8019b8a:	4293      	cmp	r3, r2
 8019b8c:	d050      	beq.n	8019c30 <_ZN12ModbusMaster5startEv+0x1f4>
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8019b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019b98:	681b      	ldr	r3, [r3, #0]
 8019b9a:	4a4c      	ldr	r2, [pc, #304]	; (8019ccc <_ZN12ModbusMaster5startEv+0x290>)
 8019b9c:	4293      	cmp	r3, r2
 8019b9e:	d047      	beq.n	8019c30 <_ZN12ModbusMaster5startEv+0x1f4>
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8019ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019baa:	681b      	ldr	r3, [r3, #0]
 8019bac:	4a48      	ldr	r2, [pc, #288]	; (8019cd0 <_ZN12ModbusMaster5startEv+0x294>)
 8019bae:	4293      	cmp	r3, r2
 8019bb0:	d03e      	beq.n	8019c30 <_ZN12ModbusMaster5startEv+0x1f4>
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8019bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019bbc:	681b      	ldr	r3, [r3, #0]
 8019bbe:	4a45      	ldr	r2, [pc, #276]	; (8019cd4 <_ZN12ModbusMaster5startEv+0x298>)
 8019bc0:	4293      	cmp	r3, r2
 8019bc2:	d035      	beq.n	8019c30 <_ZN12ModbusMaster5startEv+0x1f4>
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8019bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	4a41      	ldr	r2, [pc, #260]	; (8019cd8 <_ZN12ModbusMaster5startEv+0x29c>)
 8019bd2:	4293      	cmp	r3, r2
 8019bd4:	d02c      	beq.n	8019c30 <_ZN12ModbusMaster5startEv+0x1f4>
 8019bd6:	687b      	ldr	r3, [r7, #4]
 8019bd8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8019bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019be0:	681b      	ldr	r3, [r3, #0]
 8019be2:	4a3e      	ldr	r2, [pc, #248]	; (8019cdc <_ZN12ModbusMaster5startEv+0x2a0>)
 8019be4:	4293      	cmp	r3, r2
 8019be6:	d023      	beq.n	8019c30 <_ZN12ModbusMaster5startEv+0x1f4>
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8019bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019bf2:	681b      	ldr	r3, [r3, #0]
 8019bf4:	4a3a      	ldr	r2, [pc, #232]	; (8019ce0 <_ZN12ModbusMaster5startEv+0x2a4>)
 8019bf6:	4293      	cmp	r3, r2
 8019bf8:	d01a      	beq.n	8019c30 <_ZN12ModbusMaster5startEv+0x1f4>
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8019c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019c04:	681b      	ldr	r3, [r3, #0]
 8019c06:	4a37      	ldr	r2, [pc, #220]	; (8019ce4 <_ZN12ModbusMaster5startEv+0x2a8>)
 8019c08:	4293      	cmp	r3, r2
 8019c0a:	d011      	beq.n	8019c30 <_ZN12ModbusMaster5startEv+0x1f4>
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8019c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019c16:	681b      	ldr	r3, [r3, #0]
 8019c18:	4a33      	ldr	r2, [pc, #204]	; (8019ce8 <_ZN12ModbusMaster5startEv+0x2ac>)
 8019c1a:	4293      	cmp	r3, r2
 8019c1c:	d008      	beq.n	8019c30 <_ZN12ModbusMaster5startEv+0x1f4>
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8019c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019c28:	681b      	ldr	r3, [r3, #0]
 8019c2a:	4a30      	ldr	r2, [pc, #192]	; (8019cec <_ZN12ModbusMaster5startEv+0x2b0>)
 8019c2c:	4293      	cmp	r3, r2
 8019c2e:	d110      	bne.n	8019c52 <_ZN12ModbusMaster5startEv+0x216>
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8019c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019c3a:	681b      	ldr	r3, [r3, #0]
 8019c3c:	681a      	ldr	r2, [r3, #0]
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8019c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019c48:	681b      	ldr	r3, [r3, #0]
 8019c4a:	f022 0208 	bic.w	r2, r2, #8
 8019c4e:	601a      	str	r2, [r3, #0]
 8019c50:	e00f      	b.n	8019c72 <_ZN12ModbusMaster5startEv+0x236>
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8019c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	681a      	ldr	r2, [r3, #0]
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8019c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019c6a:	681b      	ldr	r3, [r3, #0]
 8019c6c:	f022 0204 	bic.w	r2, r2, #4
 8019c70:	601a      	str	r2, [r3, #0]
	}

	// Reset all statistics
	this->u8lastRec = 0;
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	2200      	movs	r2, #0
 8019c76:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	this->u8BufferSize = 0;
 8019c7a:	687b      	ldr	r3, [r7, #4]
 8019c7c:	2200      	movs	r2, #0
 8019c7e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	this->u16InCnt = 0;
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	2200      	movs	r2, #0
 8019c86:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	this->u16OutCnt = 0;
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	2200      	movs	r2, #0
 8019c8e:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	this->u16errCnt = 0;
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	2200      	movs	r2, #0
 8019c96:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
}
 8019c9a:	bf00      	nop
 8019c9c:	3708      	adds	r7, #8
 8019c9e:	46bd      	mov	sp, r7
 8019ca0:	bd80      	pop	{r7, pc}
 8019ca2:	bf00      	nop
 8019ca4:	0801a167 	.word	0x0801a167
 8019ca8:	0801a17d 	.word	0x0801a17d
 8019cac:	0801a4a5 	.word	0x0801a4a5
 8019cb0:	40020010 	.word	0x40020010
 8019cb4:	40020028 	.word	0x40020028
 8019cb8:	40020040 	.word	0x40020040
 8019cbc:	40020058 	.word	0x40020058
 8019cc0:	40020070 	.word	0x40020070
 8019cc4:	40020088 	.word	0x40020088
 8019cc8:	400200a0 	.word	0x400200a0
 8019ccc:	400200b8 	.word	0x400200b8
 8019cd0:	40020410 	.word	0x40020410
 8019cd4:	40020428 	.word	0x40020428
 8019cd8:	40020440 	.word	0x40020440
 8019cdc:	40020458 	.word	0x40020458
 8019ce0:	40020470 	.word	0x40020470
 8019ce4:	40020488 	.word	0x40020488
 8019ce8:	400204a0 	.word	0x400204a0
 8019cec:	400204b8 	.word	0x400204b8

08019cf0 <_Z16modbusMasterTaskPv>:

/* ================================================================ */
void modbusMasterTask(void *argument) {
 8019cf0:	b580      	push	{r7, lr}
 8019cf2:	b08c      	sub	sp, #48	; 0x30
 8019cf4:	af02      	add	r7, sp, #8
 8019cf6:	6078      	str	r0, [r7, #4]
	ModbusMaster *master = (ModbusMaster*) argument;
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	627b      	str	r3, [r7, #36]	; 0x24

	// Get the task handle for later notifying this task
	master->task_handle = xTaskGetCurrentTaskHandle();
 8019cfc:	f7f6 fd3c 	bl	8010778 <xTaskGetCurrentTaskHandle>
 8019d00:	4602      	mov	r2, r0
 8019d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d04:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	uint32_t ulNotificationValue;
	modbus_query_t telegram;

	for (;;) {
		/*Wait indefinitely for a telegram to send */
		osMessageQueueGet(modbus_query_queue, &telegram, 0, portMAX_DELAY);
 8019d08:	4b67      	ldr	r3, [pc, #412]	; (8019ea8 <_Z16modbusMasterTaskPv+0x1b8>)
 8019d0a:	6818      	ldr	r0, [r3, #0]
 8019d0c:	f107 010c 	add.w	r1, r7, #12
 8019d10:	f04f 33ff 	mov.w	r3, #4294967295
 8019d14:	2200      	movs	r2, #0
 8019d16:	f7f4 fc91 	bl	800e63c <osMessageQueueGet>

		// This is the case for implementations with only USART support
		master->sendQuery(telegram);
 8019d1a:	69bb      	ldr	r3, [r7, #24]
 8019d1c:	9300      	str	r3, [sp, #0]
 8019d1e:	f107 030c 	add.w	r3, r7, #12
 8019d22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019d24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019d26:	f000 fc65 	bl	801a5f4 <_ZN12ModbusMaster9sendQueryE14modbus_query_t>
		/* Block indefinitely until a Modbus Frame arrives or query timeouts*/
		ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8019d2a:	f04f 31ff 	mov.w	r1, #4294967295
 8019d2e:	2001      	movs	r0, #1
 8019d30:	f7f6 febc 	bl	8010aac <ulTaskNotifyTake>
 8019d34:	6238      	str	r0, [r7, #32]

		// notify the task the request timeout
		master->lastError = 0;
 8019d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d38:	2200      	movs	r2, #0
 8019d3a:	701a      	strb	r2, [r3, #0]
		if (ulNotificationValue) {
 8019d3c:	6a3b      	ldr	r3, [r7, #32]
 8019d3e:	2b00      	cmp	r3, #0
 8019d40:	d018      	beq.n	8019d74 <_Z16modbusMasterTaskPv+0x84>
			master->i8state = COM_IDLE;
 8019d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d44:	2200      	movs	r2, #0
 8019d46:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
			master->lastError = ERR_TIME_OUT;
 8019d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d4c:	22f8      	movs	r2, #248	; 0xf8
 8019d4e:	701a      	strb	r2, [r3, #0]
			master->u16errCnt++;
 8019d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d52:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8019d56:	3301      	adds	r3, #1
 8019d58:	b29a      	uxth	r2, r3
 8019d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d5c:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
			xTaskNotify((TaskHandle_t )telegram.u32CurrentTask,
 8019d60:	69b8      	ldr	r0, [r7, #24]
 8019d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d64:	f993 3000 	ldrsb.w	r3, [r3]
 8019d68:	4619      	mov	r1, r3
 8019d6a:	2300      	movs	r3, #0
 8019d6c:	2203      	movs	r2, #3
 8019d6e:	f7f6 fee9 	bl	8010b44 <xTaskGenericNotify>
					master->lastError, eSetValueWithOverwrite);
			continue;
 8019d72:	e097      	b.n	8019ea4 <_Z16modbusMasterTaskPv+0x1b4>
		}
		master->getRxBuffer();
 8019d74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019d76:	f000 f9ab 	bl	801a0d0 <_ZN12ModbusMaster11getRxBufferEv>

		if (master->u8BufferSize < 6) {
 8019d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d7c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8019d80:	2b05      	cmp	r3, #5
 8019d82:	d818      	bhi.n	8019db6 <_Z16modbusMasterTaskPv+0xc6>

			master->i8state = COM_IDLE;
 8019d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d86:	2200      	movs	r2, #0
 8019d88:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
			master->lastError = ERR_BAD_SIZE;
 8019d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d8e:	22fa      	movs	r2, #250	; 0xfa
 8019d90:	701a      	strb	r2, [r3, #0]
			master->u16errCnt++;
 8019d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d94:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8019d98:	3301      	adds	r3, #1
 8019d9a:	b29a      	uxth	r2, r3
 8019d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d9e:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
			xTaskNotify((TaskHandle_t )telegram.u32CurrentTask,
 8019da2:	69b8      	ldr	r0, [r7, #24]
 8019da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019da6:	f993 3000 	ldrsb.w	r3, [r3]
 8019daa:	4619      	mov	r1, r3
 8019dac:	2300      	movs	r3, #0
 8019dae:	2203      	movs	r2, #3
 8019db0:	f7f6 fec8 	bl	8010b44 <xTaskGenericNotify>
					master->lastError, eSetValueWithOverwrite);
			continue;
 8019db4:	e076      	b.n	8019ea4 <_Z16modbusMasterTaskPv+0x1b4>
		}

		xTimerStop(master->xTimerTimeout, 0); // cancel timeout timer
 8019db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019db8:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 8019dbc:	2300      	movs	r3, #0
 8019dbe:	9300      	str	r3, [sp, #0]
 8019dc0:	2300      	movs	r3, #0
 8019dc2:	2200      	movs	r2, #0
 8019dc4:	2103      	movs	r1, #3
 8019dc6:	f7f7 fa29 	bl	801121c <xTimerGenericCommand>

		// validate message: id, CRC, FCT, exception
		int8_t u8exception = master->validateAnswer();
 8019dca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019dcc:	f000 f90e 	bl	8019fec <_ZN12ModbusMaster14validateAnswerEv>
 8019dd0:	4603      	mov	r3, r0
 8019dd2:	77fb      	strb	r3, [r7, #31]
		if (u8exception != 0) {
 8019dd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8019dd8:	2b00      	cmp	r3, #0
 8019dda:	d010      	beq.n	8019dfe <_Z16modbusMasterTaskPv+0x10e>
			master->i8state = COM_IDLE;
 8019ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dde:	2200      	movs	r2, #0
 8019de0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
			master->lastError = u8exception;
 8019de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019de6:	7ffa      	ldrb	r2, [r7, #31]
 8019de8:	701a      	strb	r2, [r3, #0]
			xTaskNotify((TaskHandle_t )telegram.u32CurrentTask,
 8019dea:	69b8      	ldr	r0, [r7, #24]
 8019dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dee:	f993 3000 	ldrsb.w	r3, [r3]
 8019df2:	4619      	mov	r1, r3
 8019df4:	2300      	movs	r3, #0
 8019df6:	2203      	movs	r2, #3
 8019df8:	f7f6 fea4 	bl	8010b44 <xTaskGenericNotify>
					master->lastError, eSetValueWithOverwrite);
			continue;
 8019dfc:	e052      	b.n	8019ea4 <_Z16modbusMasterTaskPv+0x1b4>
		}

		master->lastError = u8exception; // Should be 0
 8019dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e00:	7ffa      	ldrb	r2, [r7, #31]
 8019e02:	701a      	strb	r2, [r3, #0]

		osSemaphoreAcquire(master->ModBusSphrHandle, portMAX_DELAY); //before processing the message get the semaphore
 8019e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8019e0a:	f04f 31ff 	mov.w	r1, #4294967295
 8019e0e:	4618      	mov	r0, r3
 8019e10:	f7f4 faaa 	bl	800e368 <osSemaphoreAcquire>
		// process answer
		switch (master->u8Buffer[FUNC]) {
 8019e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e16:	789b      	ldrb	r3, [r3, #2]
 8019e18:	3b01      	subs	r3, #1
 8019e1a:	2b0f      	cmp	r3, #15
 8019e1c:	d82a      	bhi.n	8019e74 <_Z16modbusMasterTaskPv+0x184>
 8019e1e:	a201      	add	r2, pc, #4	; (adr r2, 8019e24 <_Z16modbusMasterTaskPv+0x134>)
 8019e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e24:	08019e65 	.word	0x08019e65
 8019e28:	08019e65 	.word	0x08019e65
 8019e2c:	08019e6d 	.word	0x08019e6d
 8019e30:	08019e6d 	.word	0x08019e6d
 8019e34:	08019e75 	.word	0x08019e75
 8019e38:	08019e75 	.word	0x08019e75
 8019e3c:	08019e75 	.word	0x08019e75
 8019e40:	08019e75 	.word	0x08019e75
 8019e44:	08019e75 	.word	0x08019e75
 8019e48:	08019e75 	.word	0x08019e75
 8019e4c:	08019e75 	.word	0x08019e75
 8019e50:	08019e75 	.word	0x08019e75
 8019e54:	08019e75 	.word	0x08019e75
 8019e58:	08019e75 	.word	0x08019e75
 8019e5c:	08019e75 	.word	0x08019e75
 8019e60:	08019e75 	.word	0x08019e75
		case MB_FC_READ_COILS:
		case MB_FC_READ_DISCRETE_INPUT:
			//call get_FC1 to transfer the incoming message to u16regs buffer
			master->get_FC1();
 8019e64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019e66:	f000 f83f 	bl	8019ee8 <_ZN12ModbusMaster7get_FC1Ev>
			break;
 8019e6a:	e004      	b.n	8019e76 <_Z16modbusMasterTaskPv+0x186>
		case MB_FC_READ_INPUT_REGISTER:
		case MB_FC_READ_REGISTERS:
			// call get_FC3 to transfer the incoming message to u16regs buffer
			master->get_FC3();
 8019e6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019e6e:	f000 f890 	bl	8019f92 <_ZN12ModbusMaster7get_FC3Ev>
			break;
 8019e72:	e000      	b.n	8019e76 <_Z16modbusMasterTaskPv+0x186>
		case MB_FC_WRITE_MULTIPLE_COILS:
		case MB_FC_WRITE_MULTIPLE_REGISTERS:
			// nothing to do
			break;
		default:
			break;
 8019e74:	bf00      	nop
		}
		master->i8state = COM_IDLE;
 8019e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e78:	2200      	movs	r2, #0
 8019e7a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

		if (master->lastError == 0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 8019e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e80:	f993 3000 	ldrsb.w	r3, [r3]
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	d10c      	bne.n	8019ea2 <_Z16modbusMasterTaskPv+0x1b2>
				{
			osSemaphoreRelease(master->ModBusSphrHandle);
 8019e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8019e8e:	4618      	mov	r0, r3
 8019e90:	f7f4 fabc 	bl	800e40c <osSemaphoreRelease>
			xTaskNotify((TaskHandle_t )telegram.u32CurrentTask, ERR_OK_QUERY,
 8019e94:	69b8      	ldr	r0, [r7, #24]
 8019e96:	2300      	movs	r3, #0
 8019e98:	2203      	movs	r2, #3
 8019e9a:	f06f 010a 	mvn.w	r1, #10
 8019e9e:	f7f6 fe51 	bl	8010b44 <xTaskGenericNotify>
					eSetValueWithOverwrite);
		}
		continue;
 8019ea2:	bf00      	nop
	}
 8019ea4:	e730      	b.n	8019d08 <_Z16modbusMasterTaskPv+0x18>
 8019ea6:	bf00      	nop
 8019ea8:	2401dbc8 	.word	0x2401dbc8

08019eac <_ZN12ModbusMaster5queryE14modbus_query_t>:
}

/* ================================================================ */
void ModbusMaster::query(modbus_query_t telegram) {
 8019eac:	b084      	sub	sp, #16
 8019eae:	b580      	push	{r7, lr}
 8019eb0:	b082      	sub	sp, #8
 8019eb2:	af00      	add	r7, sp, #0
 8019eb4:	6078      	str	r0, [r7, #4]
 8019eb6:	f107 0014 	add.w	r0, r7, #20
 8019eba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	// Add the telegram to the TX tail of the telegram queue
	telegram.u32CurrentTask = (uint32_t*) osThreadGetId();
 8019ebe:	f7f4 f8e4 	bl	800e08a <osThreadGetId>
 8019ec2:	4603      	mov	r3, r0
 8019ec4:	623b      	str	r3, [r7, #32]
	osMessageQueuePut(modbus_query_queue, &telegram, 0, 0);
 8019ec6:	4b07      	ldr	r3, [pc, #28]	; (8019ee4 <_ZN12ModbusMaster5queryE14modbus_query_t+0x38>)
 8019ec8:	6818      	ldr	r0, [r3, #0]
 8019eca:	f107 0114 	add.w	r1, r7, #20
 8019ece:	2300      	movs	r3, #0
 8019ed0:	2200      	movs	r2, #0
 8019ed2:	f7f4 fb53 	bl	800e57c <osMessageQueuePut>
}
 8019ed6:	bf00      	nop
 8019ed8:	3708      	adds	r7, #8
 8019eda:	46bd      	mov	sp, r7
 8019edc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8019ee0:	b004      	add	sp, #16
 8019ee2:	4770      	bx	lr
 8019ee4:	2401dbc8 	.word	0x2401dbc8

08019ee8 <_ZN12ModbusMaster7get_FC1Ev>:
	telegram.u32CurrentTask = threadId;
	osMessageQueuePut(modbus_query_queue, &telegram, 0, 0);
}

/* ================================================================ */
void ModbusMaster::get_FC1() {
 8019ee8:	b590      	push	{r4, r7, lr}
 8019eea:	b085      	sub	sp, #20
 8019eec:	af00      	add	r7, sp, #0
 8019eee:	6078      	str	r0, [r7, #4]
	uint8_t u8byte, i;
	u8byte = 3;
 8019ef0:	2303      	movs	r3, #3
 8019ef2:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < this->u8Buffer[2]; i++) {
 8019ef4:	2300      	movs	r3, #0
 8019ef6:	73fb      	strb	r3, [r7, #15]
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	78db      	ldrb	r3, [r3, #3]
 8019efc:	7bfa      	ldrb	r2, [r7, #15]
 8019efe:	429a      	cmp	r2, r3
 8019f00:	d243      	bcs.n	8019f8a <_ZN12ModbusMaster7get_FC1Ev+0xa2>

		if (i % 2) {
 8019f02:	7bfb      	ldrb	r3, [r7, #15]
 8019f04:	f003 0301 	and.w	r3, r3, #1
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	d01c      	beq.n	8019f46 <_ZN12ModbusMaster7get_FC1Ev+0x5e>
			this->u16regs[i / 2] = word(this->u8Buffer[i + u8byte],
 8019f0c:	7bfa      	ldrb	r2, [r7, #15]
 8019f0e:	7bbb      	ldrb	r3, [r7, #14]
 8019f10:	4413      	add	r3, r2
 8019f12:	687a      	ldr	r2, [r7, #4]
 8019f14:	4413      	add	r3, r2
 8019f16:	7858      	ldrb	r0, [r3, #1]
					lowByte(this->u16regs[i / 2]));
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8019f1e:	7bfb      	ldrb	r3, [r7, #15]
 8019f20:	085b      	lsrs	r3, r3, #1
 8019f22:	b2db      	uxtb	r3, r3
 8019f24:	005b      	lsls	r3, r3, #1
 8019f26:	4413      	add	r3, r2
 8019f28:	881b      	ldrh	r3, [r3, #0]
			this->u16regs[i / 2] = word(this->u8Buffer[i + u8byte],
 8019f2a:	b2d9      	uxtb	r1, r3
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8019f32:	7bfb      	ldrb	r3, [r7, #15]
 8019f34:	085b      	lsrs	r3, r3, #1
 8019f36:	b2db      	uxtb	r3, r3
 8019f38:	005b      	lsls	r3, r3, #1
 8019f3a:	18d4      	adds	r4, r2, r3
 8019f3c:	f000 fd6a 	bl	801aa14 <_Z4wordhh>
 8019f40:	4603      	mov	r3, r0
 8019f42:	8023      	strh	r3, [r4, #0]
 8019f44:	e01d      	b.n	8019f82 <_ZN12ModbusMaster7get_FC1Ev+0x9a>
		} else {

			this->u16regs[i / 2] = word(highByte(this->u16regs[i / 2]),
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8019f4c:	7bfb      	ldrb	r3, [r7, #15]
 8019f4e:	085b      	lsrs	r3, r3, #1
 8019f50:	b2db      	uxtb	r3, r3
 8019f52:	005b      	lsls	r3, r3, #1
 8019f54:	4413      	add	r3, r2
 8019f56:	881b      	ldrh	r3, [r3, #0]
 8019f58:	0a1b      	lsrs	r3, r3, #8
 8019f5a:	b29b      	uxth	r3, r3
 8019f5c:	b2d8      	uxtb	r0, r3
					this->u8Buffer[i + u8byte]);
 8019f5e:	7bfa      	ldrb	r2, [r7, #15]
 8019f60:	7bbb      	ldrb	r3, [r7, #14]
 8019f62:	4413      	add	r3, r2
			this->u16regs[i / 2] = word(highByte(this->u16regs[i / 2]),
 8019f64:	687a      	ldr	r2, [r7, #4]
 8019f66:	4413      	add	r3, r2
 8019f68:	7859      	ldrb	r1, [r3, #1]
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8019f70:	7bfb      	ldrb	r3, [r7, #15]
 8019f72:	085b      	lsrs	r3, r3, #1
 8019f74:	b2db      	uxtb	r3, r3
 8019f76:	005b      	lsls	r3, r3, #1
 8019f78:	18d4      	adds	r4, r2, r3
 8019f7a:	f000 fd4b 	bl	801aa14 <_Z4wordhh>
 8019f7e:	4603      	mov	r3, r0
 8019f80:	8023      	strh	r3, [r4, #0]
	for (i = 0; i < this->u8Buffer[2]; i++) {
 8019f82:	7bfb      	ldrb	r3, [r7, #15]
 8019f84:	3301      	adds	r3, #1
 8019f86:	73fb      	strb	r3, [r7, #15]
 8019f88:	e7b6      	b.n	8019ef8 <_ZN12ModbusMaster7get_FC1Ev+0x10>
		}

	}
}
 8019f8a:	bf00      	nop
 8019f8c:	3714      	adds	r7, #20
 8019f8e:	46bd      	mov	sp, r7
 8019f90:	bd90      	pop	{r4, r7, pc}

08019f92 <_ZN12ModbusMaster7get_FC3Ev>:

/* ================================================================ */
void ModbusMaster::get_FC3() {
 8019f92:	b590      	push	{r4, r7, lr}
 8019f94:	b085      	sub	sp, #20
 8019f96:	af00      	add	r7, sp, #0
 8019f98:	6078      	str	r0, [r7, #4]
	 *
	 * @ingroup register
	 */

	uint8_t u8byte, i;
	u8byte = 3;
 8019f9a:	2303      	movs	r3, #3
 8019f9c:	73fb      	strb	r3, [r7, #15]

	for (i = 0; i < this->u8Buffer[2] / 2; i++) {
 8019f9e:	2300      	movs	r3, #0
 8019fa0:	73bb      	strb	r3, [r7, #14]
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	78db      	ldrb	r3, [r3, #3]
 8019fa6:	085b      	lsrs	r3, r3, #1
 8019fa8:	b2db      	uxtb	r3, r3
 8019faa:	7bba      	ldrb	r2, [r7, #14]
 8019fac:	429a      	cmp	r2, r3
 8019fae:	d219      	bcs.n	8019fe4 <_ZN12ModbusMaster7get_FC3Ev+0x52>
		this->u16regs[i] = word(this->u8Buffer[u8byte],
 8019fb0:	7bfb      	ldrb	r3, [r7, #15]
 8019fb2:	687a      	ldr	r2, [r7, #4]
 8019fb4:	4413      	add	r3, r2
 8019fb6:	7858      	ldrb	r0, [r3, #1]
				this->u8Buffer[u8byte + 1]);
 8019fb8:	7bfb      	ldrb	r3, [r7, #15]
 8019fba:	3301      	adds	r3, #1
		this->u16regs[i] = word(this->u8Buffer[u8byte],
 8019fbc:	687a      	ldr	r2, [r7, #4]
 8019fbe:	4413      	add	r3, r2
 8019fc0:	7859      	ldrb	r1, [r3, #1]
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8019fc8:	7bbb      	ldrb	r3, [r7, #14]
 8019fca:	005b      	lsls	r3, r3, #1
 8019fcc:	18d4      	adds	r4, r2, r3
 8019fce:	f000 fd21 	bl	801aa14 <_Z4wordhh>
 8019fd2:	4603      	mov	r3, r0
 8019fd4:	8023      	strh	r3, [r4, #0]
		u8byte += 2;
 8019fd6:	7bfb      	ldrb	r3, [r7, #15]
 8019fd8:	3302      	adds	r3, #2
 8019fda:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < this->u8Buffer[2] / 2; i++) {
 8019fdc:	7bbb      	ldrb	r3, [r7, #14]
 8019fde:	3301      	adds	r3, #1
 8019fe0:	73bb      	strb	r3, [r7, #14]
 8019fe2:	e7de      	b.n	8019fa2 <_ZN12ModbusMaster7get_FC3Ev+0x10>
//		this->u16regs[i] = this->u8Buffer[u8byte];
//		u8byte += 1;
	}

}
 8019fe4:	bf00      	nop
 8019fe6:	3714      	adds	r7, #20
 8019fe8:	46bd      	mov	sp, r7
 8019fea:	bd90      	pop	{r4, r7, pc}

08019fec <_ZN12ModbusMaster14validateAnswerEv>:
 * This method validates master incoming messages
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t ModbusMaster::validateAnswer() {
 8019fec:	b580      	push	{r7, lr}
 8019fee:	b084      	sub	sp, #16
 8019ff0:	af00      	add	r7, sp, #0
 8019ff2:	6078      	str	r0, [r7, #4]
	// check message crc vs calculated crc

	uint16_t u16MsgCRC = ((this->u8Buffer[this->u8BufferSize - 2] << 8)
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8019ffa:	3b02      	subs	r3, #2
 8019ffc:	687a      	ldr	r2, [r7, #4]
 8019ffe:	4413      	add	r3, r2
 801a000:	785b      	ldrb	r3, [r3, #1]
 801a002:	021b      	lsls	r3, r3, #8
			| this->u8Buffer[this->u8BufferSize - 1]); // combine the crc Low & High bytes
 801a004:	b21a      	sxth	r2, r3
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801a00c:	3b01      	subs	r3, #1
 801a00e:	6879      	ldr	r1, [r7, #4]
 801a010:	440b      	add	r3, r1
 801a012:	785b      	ldrb	r3, [r3, #1]
 801a014:	b21b      	sxth	r3, r3
 801a016:	4313      	orrs	r3, r2
 801a018:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC = ((this->u8Buffer[this->u8BufferSize - 2] << 8)
 801a01a:	81bb      	strh	r3, [r7, #12]
	if (calcCRC(this->u8Buffer, this->u8BufferSize - 2) != u16MsgCRC) {
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	1c5a      	adds	r2, r3, #1
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801a026:	3b02      	subs	r3, #2
 801a028:	b2db      	uxtb	r3, r3
 801a02a:	4619      	mov	r1, r3
 801a02c:	4610      	mov	r0, r2
 801a02e:	f000 fd04 	bl	801aa3a <_Z7calcCRCPhh>
 801a032:	4603      	mov	r3, r0
 801a034:	461a      	mov	r2, r3
 801a036:	89bb      	ldrh	r3, [r7, #12]
 801a038:	4293      	cmp	r3, r2
 801a03a:	bf14      	ite	ne
 801a03c:	2301      	movne	r3, #1
 801a03e:	2300      	moveq	r3, #0
 801a040:	b2db      	uxtb	r3, r3
 801a042:	2b00      	cmp	r3, #0
 801a044:	d009      	beq.n	801a05a <_ZN12ModbusMaster14validateAnswerEv+0x6e>
		this->u16errCnt++;
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 801a04c:	3301      	adds	r3, #1
 801a04e:	b29a      	uxth	r2, r3
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
		return ERR_BAD_CRC;
 801a056:	23fc      	movs	r3, #252	; 0xfc
 801a058:	e034      	b.n	801a0c4 <_ZN12ModbusMaster14validateAnswerEv+0xd8>
	}

	// check exception
	if ((this->u8Buffer[FUNC] & 0x80) != 0) {
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	789b      	ldrb	r3, [r3, #2]
 801a05e:	b25b      	sxtb	r3, r3
 801a060:	2b00      	cmp	r3, #0
 801a062:	da09      	bge.n	801a078 <_ZN12ModbusMaster14validateAnswerEv+0x8c>
		this->u16errCnt++;
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 801a06a:	3301      	adds	r3, #1
 801a06c:	b29a      	uxth	r2, r3
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
		return ERR_EXCEPTION;
 801a074:	23fb      	movs	r3, #251	; 0xfb
 801a076:	e025      	b.n	801a0c4 <_ZN12ModbusMaster14validateAnswerEv+0xd8>
	}

	// check fct code
	bool isSupported = false;
 801a078:	2300      	movs	r3, #0
 801a07a:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(fctsupported); i++) {
 801a07c:	2300      	movs	r3, #0
 801a07e:	73bb      	strb	r3, [r7, #14]
 801a080:	7bbb      	ldrb	r3, [r7, #14]
 801a082:	2b07      	cmp	r3, #7
 801a084:	d80d      	bhi.n	801a0a2 <_ZN12ModbusMaster14validateAnswerEv+0xb6>
		if (fctsupported[i] == this->u8Buffer[FUNC]) {
 801a086:	7bbb      	ldrb	r3, [r7, #14]
 801a088:	4a10      	ldr	r2, [pc, #64]	; (801a0cc <_ZN12ModbusMaster14validateAnswerEv+0xe0>)
 801a08a:	5cd2      	ldrb	r2, [r2, r3]
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	789b      	ldrb	r3, [r3, #2]
 801a090:	429a      	cmp	r2, r3
 801a092:	d102      	bne.n	801a09a <_ZN12ModbusMaster14validateAnswerEv+0xae>
			isSupported = 1;
 801a094:	2301      	movs	r3, #1
 801a096:	73fb      	strb	r3, [r7, #15]
			break;
 801a098:	e003      	b.n	801a0a2 <_ZN12ModbusMaster14validateAnswerEv+0xb6>
	for (uint8_t i = 0; i < sizeof(fctsupported); i++) {
 801a09a:	7bbb      	ldrb	r3, [r7, #14]
 801a09c:	3301      	adds	r3, #1
 801a09e:	73bb      	strb	r3, [r7, #14]
 801a0a0:	e7ee      	b.n	801a080 <_ZN12ModbusMaster14validateAnswerEv+0x94>
		}
	}
	if (!isSupported) {
 801a0a2:	7bfb      	ldrb	r3, [r7, #15]
 801a0a4:	f083 0301 	eor.w	r3, r3, #1
 801a0a8:	b2db      	uxtb	r3, r3
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	d009      	beq.n	801a0c2 <_ZN12ModbusMaster14validateAnswerEv+0xd6>
		this->u16errCnt++;
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 801a0b4:	3301      	adds	r3, #1
 801a0b6:	b29a      	uxth	r2, r3
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
		return EXC_FUNC_CODE;
 801a0be:	2301      	movs	r3, #1
 801a0c0:	e000      	b.n	801a0c4 <_ZN12ModbusMaster14validateAnswerEv+0xd8>
	}

	return 0; // OK, no exception code thrown
 801a0c2:	2300      	movs	r3, #0
}
 801a0c4:	4618      	mov	r0, r3
 801a0c6:	3710      	adds	r7, #16
 801a0c8:	46bd      	mov	sp, r7
 801a0ca:	bd80      	pop	{r7, pc}
 801a0cc:	08020ae0 	.word	0x08020ae0

0801a0d0 <_ZN12ModbusMaster11getRxBufferEv>:

/* ================================================================ */
int16_t ModbusMaster::getRxBuffer() {
 801a0d0:	b580      	push	{r7, lr}
 801a0d2:	b084      	sub	sp, #16
 801a0d4:	af00      	add	r7, sp, #0
 801a0d6:	6078      	str	r0, [r7, #4]

	int16_t i16result;

	if (this->config.hardware == MB_UART_IT) {
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 801a0de:	2b01      	cmp	r3, #1
 801a0e0:	d105      	bne.n	801a0ee <_ZN12ModbusMaster11getRxBufferEv+0x1e>
		HAL_UART_AbortReceive_IT(this->config.huart); // disable interrupts to avoid race conditions on serial port
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801a0e8:	4618      	mov	r0, r3
 801a0ea:	f7f0 fcd5 	bl	800aa98 <HAL_UART_AbortReceive_IT>
	}

	if (this->xBufferRX.overflow) {
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 801a0f4:	2b00      	cmp	r3, #0
 801a0f6:	d008      	beq.n	801a10a <_ZN12ModbusMaster11getRxBufferEv+0x3a>
		this->xBufferRX.clear();
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	33a8      	adds	r3, #168	; 0xa8
 801a0fc:	4618      	mov	r0, r3
 801a0fe:	f000 fced 	bl	801aadc <_ZN21core_utils_RingBufferILi128EE5clearEv>
		i16result = ERR_BUFF_OVERFLOW;
 801a102:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801a106:	81fb      	strh	r3, [r7, #14]
 801a108:	e019      	b.n	801a13e <_ZN12ModbusMaster11getRxBufferEv+0x6e>
	} else {
		this->u8BufferSize = this->xBufferRX.get_all_bytes(this->u8Buffer);
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	3301      	adds	r3, #1
 801a114:	4619      	mov	r1, r3
 801a116:	4610      	mov	r0, r2
 801a118:	f000 fcfa 	bl	801ab10 <_ZN21core_utils_RingBufferILi128EE13get_all_bytesEPh>
 801a11c:	4603      	mov	r3, r0
 801a11e:	461a      	mov	r2, r3
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		this->u16InCnt++;
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 801a12c:	3301      	adds	r3, #1
 801a12e:	b29a      	uxth	r2, r3
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
		i16result = this->u8BufferSize;
 801a136:	687b      	ldr	r3, [r7, #4]
 801a138:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801a13c:	81fb      	strh	r3, [r7, #14]
	}

	if (this->config.hardware == MB_UART_IT) {
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 801a144:	2b01      	cmp	r3, #1
 801a146:	d108      	bne.n	801a15a <_ZN12ModbusMaster11getRxBufferEv+0x8a>
		HAL_UART_Receive_IT(this->config.huart, &this->dataRX, 1);
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	3392      	adds	r3, #146	; 0x92
 801a152:	2201      	movs	r2, #1
 801a154:	4619      	mov	r1, r3
 801a156:	f7f0 fa2f 	bl	800a5b8 <HAL_UART_Receive_IT>
	}

	return i16result;
 801a15a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 801a15e:	4618      	mov	r0, r3
 801a160:	3710      	adds	r7, #16
 801a162:	46bd      	mov	sp, r7
 801a164:	bd80      	pop	{r7, pc}

0801a166 <_ZL25uartRxCompleteIT_callbackP20__UART_HandleTypeDef>:

/* ================================================================ */
void uartRxCompleteIT_callback(UART_HandleTypeDef *huart) {
 801a166:	b580      	push	{r7, lr}
 801a168:	b082      	sub	sp, #8
 801a16a:	af00      	add	r7, sp, #0
 801a16c:	6078      	str	r0, [r7, #4]
	nop();
 801a16e:	f7f8 faf1 	bl	8012754 <_Z3nopv>
}
 801a172:	bf00      	nop
 801a174:	3708      	adds	r7, #8
 801a176:	46bd      	mov	sp, r7
 801a178:	bd80      	pop	{r7, pc}
	...

0801a17c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft>:

/* ================================================================ */
void uartRxCompleteDMA_callback(UART_HandleTypeDef *huart, uint16_t size) {
 801a17c:	b580      	push	{r7, lr}
 801a17e:	b086      	sub	sp, #24
 801a180:	af02      	add	r7, sp, #8
 801a182:	6078      	str	r0, [r7, #4]
 801a184:	460b      	mov	r3, r1
 801a186:	807b      	strh	r3, [r7, #2]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801a188:	2300      	movs	r3, #0
 801a18a:	60bb      	str	r3, [r7, #8]

	int i;
	for (i = 0; i < num_handlers; i++) {
 801a18c:	2300      	movs	r3, #0
 801a18e:	60fb      	str	r3, [r7, #12]
 801a190:	4bb1      	ldr	r3, [pc, #708]	; (801a458 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2dc>)
 801a192:	781b      	ldrb	r3, [r3, #0]
 801a194:	461a      	mov	r2, r3
 801a196:	68fb      	ldr	r3, [r7, #12]
 801a198:	4293      	cmp	r3, r2
 801a19a:	f280 814d 	bge.w	801a438 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2bc>
		if (handlers[i]->config.huart == huart) {
 801a19e:	4aaf      	ldr	r2, [pc, #700]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a1a0:	68fb      	ldr	r3, [r7, #12]
 801a1a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a1a6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801a1aa:	687a      	ldr	r2, [r7, #4]
 801a1ac:	429a      	cmp	r2, r3
 801a1ae:	f040 813e 	bne.w	801a42e <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2b2>

			if (handlers[i]->config.hardware == MB_UART_DMA) {
 801a1b2:	4aaa      	ldr	r2, [pc, #680]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a1b4:	68fb      	ldr	r3, [r7, #12]
 801a1b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a1ba:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 801a1be:	2b02      	cmp	r3, #2
 801a1c0:	f040 8139 	bne.w	801a436 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2ba>
				if (size) //check if we have received any byte
 801a1c4:	887b      	ldrh	r3, [r7, #2]
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	f000 8135 	beq.w	801a436 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2ba>
				{
					handlers[i]->xBufferRX.available = size;
 801a1cc:	4aa3      	ldr	r2, [pc, #652]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a1ce:	68fb      	ldr	r3, [r7, #12]
 801a1d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a1d4:	887a      	ldrh	r2, [r7, #2]
 801a1d6:	b2d2      	uxtb	r2, r2
 801a1d8:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
					handlers[i]->xBufferRX.overflow = false;
 801a1dc:	4a9f      	ldr	r2, [pc, #636]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a1de:	68fb      	ldr	r3, [r7, #12]
 801a1e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a1e4:	2200      	movs	r2, #0
 801a1e6:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b

					while (HAL_UARTEx_ReceiveToIdle_DMA(
							handlers[i]->config.huart,
 801a1ea:	4a9c      	ldr	r2, [pc, #624]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a1ec:	68fb      	ldr	r3, [r7, #12]
 801a1ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
					while (HAL_UARTEx_ReceiveToIdle_DMA(
 801a1f2:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
							handlers[i]->xBufferRX.buffer, MAX_BUFFER) != HAL_OK) {
 801a1f6:	4a99      	ldr	r2, [pc, #612]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a1f8:	68fb      	ldr	r3, [r7, #12]
 801a1fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a1fe:	33a8      	adds	r3, #168	; 0xa8
					while (HAL_UARTEx_ReceiveToIdle_DMA(
 801a200:	2280      	movs	r2, #128	; 0x80
 801a202:	4619      	mov	r1, r3
 801a204:	f7f3 fd47 	bl	800dc96 <HAL_UARTEx_ReceiveToIdle_DMA>
 801a208:	4603      	mov	r3, r0
							handlers[i]->xBufferRX.buffer, MAX_BUFFER) != HAL_OK) {
 801a20a:	2b00      	cmp	r3, #0
 801a20c:	bf14      	ite	ne
 801a20e:	2301      	movne	r3, #1
 801a210:	2300      	moveq	r3, #0
 801a212:	b2db      	uxtb	r3, r3
 801a214:	2b00      	cmp	r3, #0
 801a216:	d009      	beq.n	801a22c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0xb0>
						HAL_UART_DMAStop(handlers[i]->config.huart);
 801a218:	4a90      	ldr	r2, [pc, #576]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a21a:	68fb      	ldr	r3, [r7, #12]
 801a21c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a220:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801a224:	4618      	mov	r0, r3
 801a226:	f7f0 fa93 	bl	800a750 <HAL_UART_DMAStop>
					while (HAL_UARTEx_ReceiveToIdle_DMA(
 801a22a:	e7de      	b.n	801a1ea <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x6e>

					}
					__HAL_DMA_DISABLE_IT(handlers[i]->config.huart->hdmarx,
 801a22c:	4a8b      	ldr	r2, [pc, #556]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a22e:	68fb      	ldr	r3, [r7, #12]
 801a230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a234:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801a238:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	4a88      	ldr	r2, [pc, #544]	; (801a460 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e4>)
 801a240:	4293      	cmp	r3, r2
 801a242:	f000 80b8 	beq.w	801a3b6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x23a>
 801a246:	4a85      	ldr	r2, [pc, #532]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a248:	68fb      	ldr	r3, [r7, #12]
 801a24a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a24e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801a252:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a256:	681b      	ldr	r3, [r3, #0]
 801a258:	4a82      	ldr	r2, [pc, #520]	; (801a464 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e8>)
 801a25a:	4293      	cmp	r3, r2
 801a25c:	f000 80ab 	beq.w	801a3b6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x23a>
 801a260:	4a7e      	ldr	r2, [pc, #504]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a262:	68fb      	ldr	r3, [r7, #12]
 801a264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a268:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801a26c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a270:	681b      	ldr	r3, [r3, #0]
 801a272:	4a7d      	ldr	r2, [pc, #500]	; (801a468 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2ec>)
 801a274:	4293      	cmp	r3, r2
 801a276:	f000 809e 	beq.w	801a3b6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x23a>
 801a27a:	4a78      	ldr	r2, [pc, #480]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a27c:	68fb      	ldr	r3, [r7, #12]
 801a27e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a282:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801a286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	4a77      	ldr	r2, [pc, #476]	; (801a46c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2f0>)
 801a28e:	4293      	cmp	r3, r2
 801a290:	f000 8091 	beq.w	801a3b6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x23a>
 801a294:	4a71      	ldr	r2, [pc, #452]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a296:	68fb      	ldr	r3, [r7, #12]
 801a298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a29c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801a2a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a2a4:	681b      	ldr	r3, [r3, #0]
 801a2a6:	4a72      	ldr	r2, [pc, #456]	; (801a470 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2f4>)
 801a2a8:	4293      	cmp	r3, r2
 801a2aa:	f000 8084 	beq.w	801a3b6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x23a>
 801a2ae:	4a6b      	ldr	r2, [pc, #428]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a2b0:	68fb      	ldr	r3, [r7, #12]
 801a2b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a2b6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801a2ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	4a6c      	ldr	r2, [pc, #432]	; (801a474 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2f8>)
 801a2c2:	4293      	cmp	r3, r2
 801a2c4:	d077      	beq.n	801a3b6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x23a>
 801a2c6:	4a65      	ldr	r2, [pc, #404]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a2c8:	68fb      	ldr	r3, [r7, #12]
 801a2ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a2ce:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801a2d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a2d6:	681b      	ldr	r3, [r3, #0]
 801a2d8:	4a67      	ldr	r2, [pc, #412]	; (801a478 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2fc>)
 801a2da:	4293      	cmp	r3, r2
 801a2dc:	d06b      	beq.n	801a3b6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x23a>
 801a2de:	4a5f      	ldr	r2, [pc, #380]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a2e0:	68fb      	ldr	r3, [r7, #12]
 801a2e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a2e6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801a2ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a2ee:	681b      	ldr	r3, [r3, #0]
 801a2f0:	4a62      	ldr	r2, [pc, #392]	; (801a47c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x300>)
 801a2f2:	4293      	cmp	r3, r2
 801a2f4:	d05f      	beq.n	801a3b6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x23a>
 801a2f6:	4a59      	ldr	r2, [pc, #356]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a2f8:	68fb      	ldr	r3, [r7, #12]
 801a2fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a2fe:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801a302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a306:	681b      	ldr	r3, [r3, #0]
 801a308:	4a5d      	ldr	r2, [pc, #372]	; (801a480 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x304>)
 801a30a:	4293      	cmp	r3, r2
 801a30c:	d053      	beq.n	801a3b6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x23a>
 801a30e:	4a53      	ldr	r2, [pc, #332]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a310:	68fb      	ldr	r3, [r7, #12]
 801a312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a316:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801a31a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a31e:	681b      	ldr	r3, [r3, #0]
 801a320:	4a58      	ldr	r2, [pc, #352]	; (801a484 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x308>)
 801a322:	4293      	cmp	r3, r2
 801a324:	d047      	beq.n	801a3b6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x23a>
 801a326:	4a4d      	ldr	r2, [pc, #308]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a328:	68fb      	ldr	r3, [r7, #12]
 801a32a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a32e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801a332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a336:	681b      	ldr	r3, [r3, #0]
 801a338:	4a53      	ldr	r2, [pc, #332]	; (801a488 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x30c>)
 801a33a:	4293      	cmp	r3, r2
 801a33c:	d03b      	beq.n	801a3b6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x23a>
 801a33e:	4a47      	ldr	r2, [pc, #284]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a340:	68fb      	ldr	r3, [r7, #12]
 801a342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a346:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801a34a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	4a4e      	ldr	r2, [pc, #312]	; (801a48c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x310>)
 801a352:	4293      	cmp	r3, r2
 801a354:	d02f      	beq.n	801a3b6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x23a>
 801a356:	4a41      	ldr	r2, [pc, #260]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a358:	68fb      	ldr	r3, [r7, #12]
 801a35a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a35e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801a362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a366:	681b      	ldr	r3, [r3, #0]
 801a368:	4a49      	ldr	r2, [pc, #292]	; (801a490 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x314>)
 801a36a:	4293      	cmp	r3, r2
 801a36c:	d023      	beq.n	801a3b6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x23a>
 801a36e:	4a3b      	ldr	r2, [pc, #236]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a370:	68fb      	ldr	r3, [r7, #12]
 801a372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a376:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801a37a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a37e:	681b      	ldr	r3, [r3, #0]
 801a380:	4a44      	ldr	r2, [pc, #272]	; (801a494 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x318>)
 801a382:	4293      	cmp	r3, r2
 801a384:	d017      	beq.n	801a3b6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x23a>
 801a386:	4a35      	ldr	r2, [pc, #212]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a388:	68fb      	ldr	r3, [r7, #12]
 801a38a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a38e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801a392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a396:	681b      	ldr	r3, [r3, #0]
 801a398:	4a3f      	ldr	r2, [pc, #252]	; (801a498 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x31c>)
 801a39a:	4293      	cmp	r3, r2
 801a39c:	d00b      	beq.n	801a3b6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x23a>
 801a39e:	4a2f      	ldr	r2, [pc, #188]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a3a0:	68fb      	ldr	r3, [r7, #12]
 801a3a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a3a6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801a3aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a3ae:	681b      	ldr	r3, [r3, #0]
 801a3b0:	4a3a      	ldr	r2, [pc, #232]	; (801a49c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x320>)
 801a3b2:	4293      	cmp	r3, r2
 801a3b4:	d116      	bne.n	801a3e4 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x268>
 801a3b6:	4a29      	ldr	r2, [pc, #164]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a3b8:	68fb      	ldr	r3, [r7, #12]
 801a3ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a3be:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801a3c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a3c6:	681b      	ldr	r3, [r3, #0]
 801a3c8:	681a      	ldr	r2, [r3, #0]
 801a3ca:	4924      	ldr	r1, [pc, #144]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a3cc:	68fb      	ldr	r3, [r7, #12]
 801a3ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801a3d2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801a3d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a3da:	681b      	ldr	r3, [r3, #0]
 801a3dc:	f022 0208 	bic.w	r2, r2, #8
 801a3e0:	601a      	str	r2, [r3, #0]
 801a3e2:	e015      	b.n	801a410 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x294>
 801a3e4:	4a1d      	ldr	r2, [pc, #116]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a3e6:	68fb      	ldr	r3, [r7, #12]
 801a3e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a3ec:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801a3f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	681a      	ldr	r2, [r3, #0]
 801a3f8:	4918      	ldr	r1, [pc, #96]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a3fa:	68fb      	ldr	r3, [r7, #12]
 801a3fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801a400:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801a404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a408:	681b      	ldr	r3, [r3, #0]
 801a40a:	f022 0204 	bic.w	r2, r2, #4
 801a40e:	601a      	str	r2, [r3, #0]
							DMA_IT_HT); // we don't need half-transfer interrupt

					xTaskNotifyFromISR(handlers[i]->task_handle, 0,
 801a410:	4a12      	ldr	r2, [pc, #72]	; (801a45c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a418:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 801a41c:	f107 0308 	add.w	r3, r7, #8
 801a420:	9300      	str	r3, [sp, #0]
 801a422:	2300      	movs	r3, #0
 801a424:	2203      	movs	r2, #3
 801a426:	2100      	movs	r1, #0
 801a428:	f7f6 fc4a 	bl	8010cc0 <xTaskGenericNotifyFromISR>
							eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
				}
			}
			break;
 801a42c:	e003      	b.n	801a436 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2ba>
	for (i = 0; i < num_handlers; i++) {
 801a42e:	68fb      	ldr	r3, [r7, #12]
 801a430:	3301      	adds	r3, #1
 801a432:	60fb      	str	r3, [r7, #12]
 801a434:	e6ac      	b.n	801a190 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x14>
			break;
 801a436:	bf00      	nop
		}
	}
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801a438:	68bb      	ldr	r3, [r7, #8]
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	d007      	beq.n	801a44e <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2d2>
 801a43e:	4b18      	ldr	r3, [pc, #96]	; (801a4a0 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x324>)
 801a440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a444:	601a      	str	r2, [r3, #0]
 801a446:	f3bf 8f4f 	dsb	sy
 801a44a:	f3bf 8f6f 	isb	sy
}
 801a44e:	bf00      	nop
 801a450:	3710      	adds	r7, #16
 801a452:	46bd      	mov	sp, r7
 801a454:	bd80      	pop	{r7, pc}
 801a456:	bf00      	nop
 801a458:	2401dbc4 	.word	0x2401dbc4
 801a45c:	2401dbbc 	.word	0x2401dbbc
 801a460:	40020010 	.word	0x40020010
 801a464:	40020028 	.word	0x40020028
 801a468:	40020040 	.word	0x40020040
 801a46c:	40020058 	.word	0x40020058
 801a470:	40020070 	.word	0x40020070
 801a474:	40020088 	.word	0x40020088
 801a478:	400200a0 	.word	0x400200a0
 801a47c:	400200b8 	.word	0x400200b8
 801a480:	40020410 	.word	0x40020410
 801a484:	40020428 	.word	0x40020428
 801a488:	40020440 	.word	0x40020440
 801a48c:	40020458 	.word	0x40020458
 801a490:	40020470 	.word	0x40020470
 801a494:	40020488 	.word	0x40020488
 801a498:	400204a0 	.word	0x400204a0
 801a49c:	400204b8 	.word	0x400204b8
 801a4a0:	e000ed04 	.word	0xe000ed04

0801a4a4 <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef>:

/* ================================================================ */
void uartTxCompleteDMA_callback(UART_HandleTypeDef *huart) {
 801a4a4:	b580      	push	{r7, lr}
 801a4a6:	b086      	sub	sp, #24
 801a4a8:	af02      	add	r7, sp, #8
 801a4aa:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801a4ac:	2300      	movs	r3, #0
 801a4ae:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < num_handlers; i++) {
 801a4b0:	2300      	movs	r3, #0
 801a4b2:	60fb      	str	r3, [r7, #12]
 801a4b4:	4b18      	ldr	r3, [pc, #96]	; (801a518 <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef+0x74>)
 801a4b6:	781b      	ldrb	r3, [r3, #0]
 801a4b8:	461a      	mov	r2, r3
 801a4ba:	68fb      	ldr	r3, [r7, #12]
 801a4bc:	4293      	cmp	r3, r2
 801a4be:	da1b      	bge.n	801a4f8 <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef+0x54>
		if (handlers[i]->config.huart == huart) {
 801a4c0:	4a16      	ldr	r2, [pc, #88]	; (801a51c <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef+0x78>)
 801a4c2:	68fb      	ldr	r3, [r7, #12]
 801a4c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a4c8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801a4cc:	687a      	ldr	r2, [r7, #4]
 801a4ce:	429a      	cmp	r2, r3
 801a4d0:	d10e      	bne.n	801a4f0 <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef+0x4c>
			// notify the end of TX
//			vTaskNotifyGiveFromISR(handlers[i]->task_handle, &xHigherPriorityTaskWoken);
			xTaskNotifyFromISR(handlers[i]->task_handle, 0, eNoAction,
 801a4d2:	4a12      	ldr	r2, [pc, #72]	; (801a51c <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef+0x78>)
 801a4d4:	68fb      	ldr	r3, [r7, #12]
 801a4d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a4da:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 801a4de:	f107 0308 	add.w	r3, r7, #8
 801a4e2:	9300      	str	r3, [sp, #0]
 801a4e4:	2300      	movs	r3, #0
 801a4e6:	2200      	movs	r2, #0
 801a4e8:	2100      	movs	r1, #0
 801a4ea:	f7f6 fbe9 	bl	8010cc0 <xTaskGenericNotifyFromISR>
					&xHigherPriorityTaskWoken);
			break;
 801a4ee:	e003      	b.n	801a4f8 <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef+0x54>
	for (i = 0; i < num_handlers; i++) {
 801a4f0:	68fb      	ldr	r3, [r7, #12]
 801a4f2:	3301      	adds	r3, #1
 801a4f4:	60fb      	str	r3, [r7, #12]
 801a4f6:	e7dd      	b.n	801a4b4 <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef+0x10>
		}

	}
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801a4f8:	68bb      	ldr	r3, [r7, #8]
 801a4fa:	2b00      	cmp	r3, #0
 801a4fc:	d007      	beq.n	801a50e <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef+0x6a>
 801a4fe:	4b08      	ldr	r3, [pc, #32]	; (801a520 <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef+0x7c>)
 801a500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a504:	601a      	str	r2, [r3, #0]
 801a506:	f3bf 8f4f 	dsb	sy
 801a50a:	f3bf 8f6f 	isb	sy
}
 801a50e:	bf00      	nop
 801a510:	3710      	adds	r7, #16
 801a512:	46bd      	mov	sp, r7
 801a514:	bd80      	pop	{r7, pc}
 801a516:	bf00      	nop
 801a518:	2401dbc4 	.word	0x2401dbc4
 801a51c:	2401dbbc 	.word	0x2401dbbc
 801a520:	e000ed04 	.word	0xe000ed04

0801a524 <_ZL17vTimerCallbackT35PP15tmrTimerControl>:

/* ================================================================ */
void vTimerCallbackT35(TimerHandle_t *pxTimer) {
 801a524:	b580      	push	{r7, lr}
 801a526:	b086      	sub	sp, #24
 801a528:	af02      	add	r7, sp, #8
 801a52a:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for (i = 0; i < num_handlers; i++) {
 801a52c:	2300      	movs	r3, #0
 801a52e:	60fb      	str	r3, [r7, #12]
 801a530:	4b17      	ldr	r3, [pc, #92]	; (801a590 <_ZL17vTimerCallbackT35PP15tmrTimerControl+0x6c>)
 801a532:	781b      	ldrb	r3, [r3, #0]
 801a534:	461a      	mov	r2, r3
 801a536:	68fb      	ldr	r3, [r7, #12]
 801a538:	4293      	cmp	r3, r2
 801a53a:	da24      	bge.n	801a586 <_ZL17vTimerCallbackT35PP15tmrTimerControl+0x62>

		if ((TimerHandle_t*) handlers[i]->xTimerT35 == pxTimer) {
 801a53c:	4a15      	ldr	r2, [pc, #84]	; (801a594 <_ZL17vTimerCallbackT35PP15tmrTimerControl+0x70>)
 801a53e:	68fb      	ldr	r3, [r7, #12]
 801a540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a544:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a548:	687a      	ldr	r2, [r7, #4]
 801a54a:	429a      	cmp	r2, r3
 801a54c:	d117      	bne.n	801a57e <_ZL17vTimerCallbackT35PP15tmrTimerControl+0x5a>
			xTimerStop(handlers[i]->xTimerTimeout, 0);
 801a54e:	4a11      	ldr	r2, [pc, #68]	; (801a594 <_ZL17vTimerCallbackT35PP15tmrTimerControl+0x70>)
 801a550:	68fb      	ldr	r3, [r7, #12]
 801a552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a556:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 801a55a:	2300      	movs	r3, #0
 801a55c:	9300      	str	r3, [sp, #0]
 801a55e:	2300      	movs	r3, #0
 801a560:	2200      	movs	r2, #0
 801a562:	2103      	movs	r1, #3
 801a564:	f7f6 fe5a 	bl	801121c <xTimerGenericCommand>
			xTaskNotify(handlers[i]->task_handle, 0, eSetValueWithOverwrite); // TODO this conversion to TaskHandle_t might not work and I have to save the real TaskHandle_t
 801a568:	4a0a      	ldr	r2, [pc, #40]	; (801a594 <_ZL17vTimerCallbackT35PP15tmrTimerControl+0x70>)
 801a56a:	68fb      	ldr	r3, [r7, #12]
 801a56c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a570:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 801a574:	2300      	movs	r3, #0
 801a576:	2203      	movs	r2, #3
 801a578:	2100      	movs	r1, #0
 801a57a:	f7f6 fae3 	bl	8010b44 <xTaskGenericNotify>
	for (i = 0; i < num_handlers; i++) {
 801a57e:	68fb      	ldr	r3, [r7, #12]
 801a580:	3301      	adds	r3, #1
 801a582:	60fb      	str	r3, [r7, #12]
 801a584:	e7d4      	b.n	801a530 <_ZL17vTimerCallbackT35PP15tmrTimerControl+0xc>
		}

	}
}
 801a586:	bf00      	nop
 801a588:	3710      	adds	r7, #16
 801a58a:	46bd      	mov	sp, r7
 801a58c:	bd80      	pop	{r7, pc}
 801a58e:	bf00      	nop
 801a590:	2401dbc4 	.word	0x2401dbc4
 801a594:	2401dbbc 	.word	0x2401dbbc

0801a598 <_ZL21vTimerCallbackTimeoutPP15tmrTimerControl>:

/* ================================================================ */
void vTimerCallbackTimeout(TimerHandle_t *pxTimer) {
 801a598:	b580      	push	{r7, lr}
 801a59a:	b084      	sub	sp, #16
 801a59c:	af00      	add	r7, sp, #0
 801a59e:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for (i = 0; i < num_handlers; i++) {
 801a5a0:	2300      	movs	r3, #0
 801a5a2:	60fb      	str	r3, [r7, #12]
 801a5a4:	4b11      	ldr	r3, [pc, #68]	; (801a5ec <_ZL21vTimerCallbackTimeoutPP15tmrTimerControl+0x54>)
 801a5a6:	781b      	ldrb	r3, [r3, #0]
 801a5a8:	461a      	mov	r2, r3
 801a5aa:	68fb      	ldr	r3, [r7, #12]
 801a5ac:	4293      	cmp	r3, r2
 801a5ae:	da18      	bge.n	801a5e2 <_ZL21vTimerCallbackTimeoutPP15tmrTimerControl+0x4a>

		if ((TimerHandle_t*) handlers[i]->xTimerTimeout == pxTimer) {
 801a5b0:	4a0f      	ldr	r2, [pc, #60]	; (801a5f0 <_ZL21vTimerCallbackTimeoutPP15tmrTimerControl+0x58>)
 801a5b2:	68fb      	ldr	r3, [r7, #12]
 801a5b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a5b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801a5bc:	687a      	ldr	r2, [r7, #4]
 801a5be:	429a      	cmp	r2, r3
 801a5c0:	d10b      	bne.n	801a5da <_ZL21vTimerCallbackTimeoutPP15tmrTimerControl+0x42>
			xTaskNotify((TaskHandle_t ) handlers[i]->task_handle, ERR_TIME_OUT,
 801a5c2:	4a0b      	ldr	r2, [pc, #44]	; (801a5f0 <_ZL21vTimerCallbackTimeoutPP15tmrTimerControl+0x58>)
 801a5c4:	68fb      	ldr	r3, [r7, #12]
 801a5c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a5ca:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 801a5ce:	2300      	movs	r3, #0
 801a5d0:	2203      	movs	r2, #3
 801a5d2:	f06f 0107 	mvn.w	r1, #7
 801a5d6:	f7f6 fab5 	bl	8010b44 <xTaskGenericNotify>
	for (i = 0; i < num_handlers; i++) {
 801a5da:	68fb      	ldr	r3, [r7, #12]
 801a5dc:	3301      	adds	r3, #1
 801a5de:	60fb      	str	r3, [r7, #12]
 801a5e0:	e7e0      	b.n	801a5a4 <_ZL21vTimerCallbackTimeoutPP15tmrTimerControl+0xc>
					eSetValueWithOverwrite); // TODO this conversion to TaskHandle_t might not work and I have to save the real TaskHandle_t
		}

	}

}
 801a5e2:	bf00      	nop
 801a5e4:	3710      	adds	r7, #16
 801a5e6:	46bd      	mov	sp, r7
 801a5e8:	bd80      	pop	{r7, pc}
 801a5ea:	bf00      	nop
 801a5ec:	2401dbc4 	.word	0x2401dbc4
 801a5f0:	2401dbbc 	.word	0x2401dbbc

0801a5f4 <_ZN12ModbusMaster9sendQueryE14modbus_query_t>:

/* ================================================================ */
int8_t ModbusMaster::sendQuery(modbus_query_t telegram) {
 801a5f4:	b084      	sub	sp, #16
 801a5f6:	b580      	push	{r7, lr}
 801a5f8:	b084      	sub	sp, #16
 801a5fa:	af00      	add	r7, sp, #0
 801a5fc:	6078      	str	r0, [r7, #4]
 801a5fe:	f107 001c 	add.w	r0, r7, #28
 801a602:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t u8regsno, u8bytesno;
	int8_t error = 0;
 801a606:	2300      	movs	r3, #0
 801a608:	73bb      	strb	r3, [r7, #14]
	osSemaphoreAcquire(this->ModBusSphrHandle, portMAX_DELAY);
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801a610:	f04f 31ff 	mov.w	r1, #4294967295
 801a614:	4618      	mov	r0, r3
 801a616:	f7f3 fea7 	bl	800e368 <osSemaphoreAcquire>

	if (this->i8state != COM_IDLE)
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
 801a620:	2b00      	cmp	r3, #0
 801a622:	d001      	beq.n	801a628 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x34>
		error = ERR_POLLING;
 801a624:	23fe      	movs	r3, #254	; 0xfe
 801a626:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id == 0) || (telegram.u8id > 247))
 801a628:	7f3b      	ldrb	r3, [r7, #28]
 801a62a:	2b00      	cmp	r3, #0
 801a62c:	d002      	beq.n	801a634 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x40>
 801a62e:	7f3b      	ldrb	r3, [r7, #28]
 801a630:	2bf7      	cmp	r3, #247	; 0xf7
 801a632:	d901      	bls.n	801a638 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x44>
		error = ERR_BAD_SLAVE_ID;
 801a634:	23f7      	movs	r3, #247	; 0xf7
 801a636:	73bb      	strb	r3, [r7, #14]

	if (error) {
 801a638:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a63c:	2b00      	cmp	r3, #0
 801a63e:	d00b      	beq.n	801a658 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x64>
		this->lastError = error;
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	7bba      	ldrb	r2, [r7, #14]
 801a644:	701a      	strb	r2, [r3, #0]
		osSemaphoreRelease(this->ModBusSphrHandle);
 801a646:	687b      	ldr	r3, [r7, #4]
 801a648:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801a64c:	4618      	mov	r0, r3
 801a64e:	f7f3 fedd 	bl	800e40c <osSemaphoreRelease>
		return error;
 801a652:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a656:	e126      	b.n	801a8a6 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x2b2>
	}

	this->u16regs = telegram.u16reg;
 801a658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	// telegram header
	this->u8Buffer[ID] = telegram.u8id;
 801a660:	7f3a      	ldrb	r2, [r7, #28]
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	705a      	strb	r2, [r3, #1]
	this->u8Buffer[FUNC] = telegram.u8fct;
 801a666:	7f7a      	ldrb	r2, [r7, #29]
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	709a      	strb	r2, [r3, #2]
	this->u8Buffer[ADD_HI] = highByte(telegram.u16RegAdd);
 801a66c:	8bfb      	ldrh	r3, [r7, #30]
 801a66e:	0a1b      	lsrs	r3, r3, #8
 801a670:	b29b      	uxth	r3, r3
 801a672:	b2da      	uxtb	r2, r3
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	70da      	strb	r2, [r3, #3]
	this->u8Buffer[ADD_LO] = lowByte(telegram.u16RegAdd);
 801a678:	8bfb      	ldrh	r3, [r7, #30]
 801a67a:	b2da      	uxtb	r2, r3
 801a67c:	687b      	ldr	r3, [r7, #4]
 801a67e:	711a      	strb	r2, [r3, #4]
//
	switch (telegram.u8fct) {
 801a680:	7f7b      	ldrb	r3, [r7, #29]
 801a682:	3b01      	subs	r3, #1
 801a684:	2b0f      	cmp	r3, #15
 801a686:	f200 80fd 	bhi.w	801a884 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x290>
 801a68a:	a201      	add	r2, pc, #4	; (adr r2, 801a690 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x9c>)
 801a68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a690:	0801a6d1 	.word	0x0801a6d1
 801a694:	0801a6d1 	.word	0x0801a6d1
 801a698:	0801a6d1 	.word	0x0801a6d1
 801a69c:	0801a6d1 	.word	0x0801a6d1
 801a6a0:	0801a6ef 	.word	0x0801a6ef
 801a6a4:	0801a711 	.word	0x0801a711
 801a6a8:	0801a885 	.word	0x0801a885
 801a6ac:	0801a885 	.word	0x0801a885
 801a6b0:	0801a885 	.word	0x0801a885
 801a6b4:	0801a885 	.word	0x0801a885
 801a6b8:	0801a885 	.word	0x0801a885
 801a6bc:	0801a885 	.word	0x0801a885
 801a6c0:	0801a885 	.word	0x0801a885
 801a6c4:	0801a885 	.word	0x0801a885
 801a6c8:	0801a733 	.word	0x0801a733
 801a6cc:	0801a7eb 	.word	0x0801a7eb
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
		this->u8Buffer[NB_HI] = highByte(telegram.u16CoilsNo);
 801a6d0:	8c3b      	ldrh	r3, [r7, #32]
 801a6d2:	0a1b      	lsrs	r3, r3, #8
 801a6d4:	b29b      	uxth	r3, r3
 801a6d6:	b2da      	uxtb	r2, r3
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	715a      	strb	r2, [r3, #5]
		this->u8Buffer[NB_LO] = lowByte(telegram.u16CoilsNo);
 801a6dc:	8c3b      	ldrh	r3, [r7, #32]
 801a6de:	b2da      	uxtb	r2, r3
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	719a      	strb	r2, [r3, #6]
		this->u8BufferSize = 6;
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	2206      	movs	r2, #6
 801a6e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		break;
 801a6ec:	e0ca      	b.n	801a884 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x290>
	case MB_FC_WRITE_COIL:
		this->u8Buffer[NB_HI] = ((telegram.u16reg[0] > 0) ? 0xff : 0);
 801a6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6f0:	881b      	ldrh	r3, [r3, #0]
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	d001      	beq.n	801a6fa <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x106>
 801a6f6:	22ff      	movs	r2, #255	; 0xff
 801a6f8:	e000      	b.n	801a6fc <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x108>
 801a6fa:	2200      	movs	r2, #0
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	715a      	strb	r2, [r3, #5]
		this->u8Buffer[NB_LO] = 0;
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	2200      	movs	r2, #0
 801a704:	719a      	strb	r2, [r3, #6]
		this->u8BufferSize = 6;
 801a706:	687b      	ldr	r3, [r7, #4]
 801a708:	2206      	movs	r2, #6
 801a70a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		break;
 801a70e:	e0b9      	b.n	801a884 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x290>
	case MB_FC_WRITE_REGISTER:
		this->u8Buffer[NB_HI] = highByte(telegram.u16reg[0]);
 801a710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a712:	881b      	ldrh	r3, [r3, #0]
 801a714:	0a1b      	lsrs	r3, r3, #8
 801a716:	b29b      	uxth	r3, r3
 801a718:	b2da      	uxtb	r2, r3
 801a71a:	687b      	ldr	r3, [r7, #4]
 801a71c:	715a      	strb	r2, [r3, #5]
		this->u8Buffer[NB_LO] = lowByte(telegram.u16reg[0]);
 801a71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a720:	881b      	ldrh	r3, [r3, #0]
 801a722:	b2da      	uxtb	r2, r3
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	719a      	strb	r2, [r3, #6]
		this->u8BufferSize = 6;
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	2206      	movs	r2, #6
 801a72c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		break;
 801a730:	e0a8      	b.n	801a884 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x290>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
		u8regsno = telegram.u16CoilsNo / 16;
 801a732:	8c3b      	ldrh	r3, [r7, #32]
 801a734:	091b      	lsrs	r3, r3, #4
 801a736:	b29b      	uxth	r3, r3
 801a738:	727b      	strb	r3, [r7, #9]
		u8bytesno = u8regsno * 2;
 801a73a:	7a7b      	ldrb	r3, [r7, #9]
 801a73c:	005b      	lsls	r3, r3, #1
 801a73e:	73fb      	strb	r3, [r7, #15]
		if ((telegram.u16CoilsNo % 16) != 0) {
 801a740:	8c3b      	ldrh	r3, [r7, #32]
 801a742:	f003 030f 	and.w	r3, r3, #15
 801a746:	2b00      	cmp	r3, #0
 801a748:	d005      	beq.n	801a756 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x162>
			u8bytesno++;
 801a74a:	7bfb      	ldrb	r3, [r7, #15]
 801a74c:	3301      	adds	r3, #1
 801a74e:	73fb      	strb	r3, [r7, #15]
			u8regsno++;
 801a750:	7a7b      	ldrb	r3, [r7, #9]
 801a752:	3301      	adds	r3, #1
 801a754:	727b      	strb	r3, [r7, #9]
		}

		this->u8Buffer[NB_HI] = highByte(telegram.u16CoilsNo);
 801a756:	8c3b      	ldrh	r3, [r7, #32]
 801a758:	0a1b      	lsrs	r3, r3, #8
 801a75a:	b29b      	uxth	r3, r3
 801a75c:	b2da      	uxtb	r2, r3
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	715a      	strb	r2, [r3, #5]
		this->u8Buffer[NB_LO] = lowByte(telegram.u16CoilsNo);
 801a762:	8c3b      	ldrh	r3, [r7, #32]
 801a764:	b2da      	uxtb	r2, r3
 801a766:	687b      	ldr	r3, [r7, #4]
 801a768:	719a      	strb	r2, [r3, #6]
		this->u8Buffer[BYTE_CNT] = u8bytesno;
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	7bfa      	ldrb	r2, [r7, #15]
 801a76e:	71da      	strb	r2, [r3, #7]
		this->u8BufferSize = 7;
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	2207      	movs	r2, #7
 801a774:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

		for (uint16_t i = 0; i < u8bytesno; i++) {
 801a778:	2300      	movs	r3, #0
 801a77a:	81bb      	strh	r3, [r7, #12]
 801a77c:	7bfb      	ldrb	r3, [r7, #15]
 801a77e:	b29b      	uxth	r3, r3
 801a780:	89ba      	ldrh	r2, [r7, #12]
 801a782:	429a      	cmp	r2, r3
 801a784:	d27b      	bcs.n	801a87e <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x28a>
			if (i % 2) {
 801a786:	89bb      	ldrh	r3, [r7, #12]
 801a788:	f003 0301 	and.w	r3, r3, #1
 801a78c:	2b00      	cmp	r3, #0
 801a78e:	d00f      	beq.n	801a7b0 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x1bc>
				this->u8Buffer[this->u8BufferSize] = lowByte(
 801a790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a792:	89bb      	ldrh	r3, [r7, #12]
 801a794:	085b      	lsrs	r3, r3, #1
 801a796:	b29b      	uxth	r3, r3
 801a798:	005b      	lsls	r3, r3, #1
 801a79a:	4413      	add	r3, r2
 801a79c:	881a      	ldrh	r2, [r3, #0]
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801a7a4:	4619      	mov	r1, r3
 801a7a6:	b2d2      	uxtb	r2, r2
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	440b      	add	r3, r1
 801a7ac:	705a      	strb	r2, [r3, #1]
 801a7ae:	e010      	b.n	801a7d2 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x1de>
						telegram.u16reg[i / 2]);
			} else {
				this->u8Buffer[this->u8BufferSize] = highByte(
 801a7b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a7b2:	89bb      	ldrh	r3, [r7, #12]
 801a7b4:	085b      	lsrs	r3, r3, #1
 801a7b6:	b29b      	uxth	r3, r3
 801a7b8:	005b      	lsls	r3, r3, #1
 801a7ba:	4413      	add	r3, r2
 801a7bc:	881b      	ldrh	r3, [r3, #0]
 801a7be:	0a1b      	lsrs	r3, r3, #8
 801a7c0:	b29a      	uxth	r2, r3
 801a7c2:	687b      	ldr	r3, [r7, #4]
 801a7c4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801a7c8:	4619      	mov	r1, r3
 801a7ca:	b2d2      	uxtb	r2, r2
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	440b      	add	r3, r1
 801a7d0:	705a      	strb	r2, [r3, #1]
						telegram.u16reg[i / 2]);

			}
			this->u8BufferSize++;
 801a7d2:	687b      	ldr	r3, [r7, #4]
 801a7d4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801a7d8:	3301      	adds	r3, #1
 801a7da:	b2da      	uxtb	r2, r3
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		for (uint16_t i = 0; i < u8bytesno; i++) {
 801a7e2:	89bb      	ldrh	r3, [r7, #12]
 801a7e4:	3301      	adds	r3, #1
 801a7e6:	81bb      	strh	r3, [r7, #12]
 801a7e8:	e7c8      	b.n	801a77c <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x188>
		}
		break;

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
		this->u8Buffer[NB_HI] = highByte(telegram.u16CoilsNo);
 801a7ea:	8c3b      	ldrh	r3, [r7, #32]
 801a7ec:	0a1b      	lsrs	r3, r3, #8
 801a7ee:	b29b      	uxth	r3, r3
 801a7f0:	b2da      	uxtb	r2, r3
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	715a      	strb	r2, [r3, #5]
		this->u8Buffer[NB_LO] = lowByte(telegram.u16CoilsNo);
 801a7f6:	8c3b      	ldrh	r3, [r7, #32]
 801a7f8:	b2da      	uxtb	r2, r3
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	719a      	strb	r2, [r3, #6]
		this->u8Buffer[BYTE_CNT] = (uint8_t) (telegram.u16CoilsNo * 2);
 801a7fe:	8c3b      	ldrh	r3, [r7, #32]
 801a800:	b2db      	uxtb	r3, r3
 801a802:	005b      	lsls	r3, r3, #1
 801a804:	b2da      	uxtb	r2, r3
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	71da      	strb	r2, [r3, #7]
		this->u8BufferSize = 7;
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	2207      	movs	r2, #7
 801a80e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

		for (uint16_t i = 0; i < telegram.u16CoilsNo; i++) {
 801a812:	2300      	movs	r3, #0
 801a814:	817b      	strh	r3, [r7, #10]
 801a816:	8c3b      	ldrh	r3, [r7, #32]
 801a818:	897a      	ldrh	r2, [r7, #10]
 801a81a:	429a      	cmp	r2, r3
 801a81c:	d231      	bcs.n	801a882 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x28e>

			this->u8Buffer[this->u8BufferSize] = highByte(telegram.u16reg[i]);
 801a81e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a820:	897b      	ldrh	r3, [r7, #10]
 801a822:	005b      	lsls	r3, r3, #1
 801a824:	4413      	add	r3, r2
 801a826:	881b      	ldrh	r3, [r3, #0]
 801a828:	0a1b      	lsrs	r3, r3, #8
 801a82a:	b29a      	uxth	r2, r3
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801a832:	4619      	mov	r1, r3
 801a834:	b2d2      	uxtb	r2, r2
 801a836:	687b      	ldr	r3, [r7, #4]
 801a838:	440b      	add	r3, r1
 801a83a:	705a      	strb	r2, [r3, #1]
			this->u8BufferSize++;
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801a842:	3301      	adds	r3, #1
 801a844:	b2da      	uxtb	r2, r3
 801a846:	687b      	ldr	r3, [r7, #4]
 801a848:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
			this->u8Buffer[this->u8BufferSize] = lowByte(telegram.u16reg[i]);
 801a84c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a84e:	897b      	ldrh	r3, [r7, #10]
 801a850:	005b      	lsls	r3, r3, #1
 801a852:	4413      	add	r3, r2
 801a854:	881a      	ldrh	r2, [r3, #0]
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801a85c:	4619      	mov	r1, r3
 801a85e:	b2d2      	uxtb	r2, r2
 801a860:	687b      	ldr	r3, [r7, #4]
 801a862:	440b      	add	r3, r1
 801a864:	705a      	strb	r2, [r3, #1]
			this->u8BufferSize++;
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801a86c:	3301      	adds	r3, #1
 801a86e:	b2da      	uxtb	r2, r3
 801a870:	687b      	ldr	r3, [r7, #4]
 801a872:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		for (uint16_t i = 0; i < telegram.u16CoilsNo; i++) {
 801a876:	897b      	ldrh	r3, [r7, #10]
 801a878:	3301      	adds	r3, #1
 801a87a:	817b      	strh	r3, [r7, #10]
 801a87c:	e7cb      	b.n	801a816 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x222>
		break;
 801a87e:	bf00      	nop
 801a880:	e000      	b.n	801a884 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x290>
		}
		break;
 801a882:	bf00      	nop
	}

	this->sendTxBuffer();
 801a884:	6878      	ldr	r0, [r7, #4]
 801a886:	f000 f815 	bl	801a8b4 <_ZN12ModbusMaster12sendTxBufferEv>

	osSemaphoreRelease(this->ModBusSphrHandle);
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801a890:	4618      	mov	r0, r3
 801a892:	f7f3 fdbb 	bl	800e40c <osSemaphoreRelease>
	this->i8state = COM_WAITING;
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	2201      	movs	r2, #1
 801a89a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	this->lastError = 0;
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	2200      	movs	r2, #0
 801a8a2:	701a      	strb	r2, [r3, #0]
	return 0;
 801a8a4:	2300      	movs	r3, #0
}
 801a8a6:	4618      	mov	r0, r3
 801a8a8:	3710      	adds	r7, #16
 801a8aa:	46bd      	mov	sp, r7
 801a8ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a8b0:	b004      	add	sp, #16
 801a8b2:	4770      	bx	lr

0801a8b4 <_ZN12ModbusMaster12sendTxBufferEv>:

/* ================================================================ */
void ModbusMaster::sendTxBuffer() {
 801a8b4:	b590      	push	{r4, r7, lr}
 801a8b6:	b087      	sub	sp, #28
 801a8b8:	af02      	add	r7, sp, #8
 801a8ba:	6078      	str	r0, [r7, #4]
	uint16_t u16crc = calcCRC(this->u8Buffer, this->u8BufferSize);
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	1c5a      	adds	r2, r3, #1
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801a8c6:	4619      	mov	r1, r3
 801a8c8:	4610      	mov	r0, r2
 801a8ca:	f000 f8b6 	bl	801aa3a <_Z7calcCRCPhh>
 801a8ce:	4603      	mov	r3, r0
 801a8d0:	81fb      	strh	r3, [r7, #14]
	this->u8Buffer[this->u8BufferSize] = u16crc >> 8;
 801a8d2:	89fb      	ldrh	r3, [r7, #14]
 801a8d4:	0a1b      	lsrs	r3, r3, #8
 801a8d6:	b29a      	uxth	r2, r3
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801a8de:	4619      	mov	r1, r3
 801a8e0:	b2d2      	uxtb	r2, r2
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	440b      	add	r3, r1
 801a8e6:	705a      	strb	r2, [r3, #1]
	this->u8BufferSize++;
 801a8e8:	687b      	ldr	r3, [r7, #4]
 801a8ea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801a8ee:	3301      	adds	r3, #1
 801a8f0:	b2da      	uxtb	r2, r3
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	this->u8Buffer[this->u8BufferSize] = u16crc & 0x00ff;
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801a8fe:	4619      	mov	r1, r3
 801a900:	89fb      	ldrh	r3, [r7, #14]
 801a902:	b2da      	uxtb	r2, r3
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	440b      	add	r3, r1
 801a908:	705a      	strb	r2, [r3, #1]
	this->u8BufferSize++;
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801a910:	3301      	adds	r3, #1
 801a912:	b2da      	uxtb	r2, r3
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	if (this->config.EN_GPIOx != NULL) {
 801a91a:	687b      	ldr	r3, [r7, #4]
 801a91c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801a920:	2b00      	cmp	r3, #0
 801a922:	d00f      	beq.n	801a944 <_ZN12ModbusMaster12sendTxBufferEv+0x90>
		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
		HAL_HalfDuplex_EnableTransmitter(this->config.huart);
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801a92a:	4618      	mov	r0, r3
 801a92c:	f7f0 fdac 	bl	800b488 <HAL_HalfDuplex_EnableTransmitter>
		HAL_GPIO_WritePin(this->config.EN_GPIOx, this->config.EN_GPIO_Pin,
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
 801a936:	687b      	ldr	r3, [r7, #4]
 801a938:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 801a93c:	2201      	movs	r2, #1
 801a93e:	4619      	mov	r1, r3
 801a940:	f7ea fb10 	bl	8004f64 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
	}

	if (this->config.hardware == MB_UART_IT) {
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 801a94a:	2b01      	cmp	r3, #1
 801a94c:	d10c      	bne.n	801a968 <_ZN12ModbusMaster12sendTxBufferEv+0xb4>
		HAL_UART_Transmit_IT(this->config.huart, this->u8Buffer,
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	1c59      	adds	r1, r3, #1
				this->u8BufferSize);
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
		HAL_UART_Transmit_IT(this->config.huart, this->u8Buffer,
 801a95e:	b29b      	uxth	r3, r3
 801a960:	461a      	mov	r2, r3
 801a962:	f7ef fd95 	bl	800a490 <HAL_UART_Transmit_IT>
 801a966:	e010      	b.n	801a98a <_ZN12ModbusMaster12sendTxBufferEv+0xd6>
	} else if (this->config.hardware == MB_UART_DMA) {
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 801a96e:	2b02      	cmp	r3, #2
 801a970:	d10b      	bne.n	801a98a <_ZN12ModbusMaster12sendTxBufferEv+0xd6>
		HAL_UART_Transmit_DMA(this->config.huart, this->u8Buffer,
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	1c59      	adds	r1, r3, #1
				this->u8BufferSize);
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
		HAL_UART_Transmit_DMA(this->config.huart, this->u8Buffer,
 801a982:	b29b      	uxth	r3, r3
 801a984:	461a      	mov	r2, r3
 801a986:	f7ef fe63 	bl	800a650 <HAL_UART_Transmit_DMA>
	}

	ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 801a98a:	21fa      	movs	r1, #250	; 0xfa
 801a98c:	2001      	movs	r0, #1
 801a98e:	f7f6 f88d 	bl	8010aac <ulTaskNotifyTake>
	 * If you are porting the library to a different MCU check the
	 * USART datasheet and add the corresponding family in the following
	 * preprocessor conditions
	 */
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4)
	while ((this->config.huart->Instance->ISR & USART_ISR_TC) == 0) {
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801a998:	681b      	ldr	r3, [r3, #0]
 801a99a:	69db      	ldr	r3, [r3, #28]
 801a99c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a9a0:	2b00      	cmp	r3, #0
 801a9a2:	bf0c      	ite	eq
 801a9a4:	2301      	moveq	r3, #1
 801a9a6:	2300      	movne	r3, #0
 801a9a8:	b2db      	uxtb	r3, r3
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	d000      	beq.n	801a9b0 <_ZN12ModbusMaster12sendTxBufferEv+0xfc>
 801a9ae:	e7f0      	b.n	801a992 <_ZN12ModbusMaster12sendTxBufferEv+0xde>
  while((this->config.huart->Instance->SR & USART_SR_TC) ==0 ) {

  }
#endif

	if (this->config.EN_GPIOx != NULL) {
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801a9b6:	2b00      	cmp	r3, #0
 801a9b8:	d00f      	beq.n	801a9da <_ZN12ModbusMaster12sendTxBufferEv+0x126>

		//return RS485 transceiver to receive mode
		HAL_GPIO_WritePin(this->config.EN_GPIOx, this->config.EN_GPIO_Pin,
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 801a9c6:	2200      	movs	r2, #0
 801a9c8:	4619      	mov	r1, r3
 801a9ca:	f7ea facb 	bl	8004f64 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		//enable receiver, disable transmitter
		HAL_HalfDuplex_EnableReceiver(this->config.huart);
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801a9d4:	4618      	mov	r0, r3
 801a9d6:	f7f0 fdab 	bl	800b530 <HAL_HalfDuplex_EnableReceiver>

	}

	// set timeout for master query

	xTimerReset(this->xTimerTimeout, 0);
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 801a9e0:	f7f5 fb78 	bl	80100d4 <xTaskGetTickCount>
 801a9e4:	4602      	mov	r2, r0
 801a9e6:	2300      	movs	r3, #0
 801a9e8:	9300      	str	r3, [sp, #0]
 801a9ea:	2300      	movs	r3, #0
 801a9ec:	2102      	movs	r1, #2
 801a9ee:	4620      	mov	r0, r4
 801a9f0:	f7f6 fc14 	bl	801121c <xTimerGenericCommand>

	this->u8BufferSize = 0;
 801a9f4:	687b      	ldr	r3, [r7, #4]
 801a9f6:	2200      	movs	r2, #0
 801a9f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	// increase message counter
	this->u16OutCnt++;
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 801aa02:	3301      	adds	r3, #1
 801aa04:	b29a      	uxth	r2, r3
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
}
 801aa0c:	bf00      	nop
 801aa0e:	3714      	adds	r7, #20
 801aa10:	46bd      	mov	sp, r7
 801aa12:	bd90      	pop	{r4, r7, pc}

0801aa14 <_Z4wordhh>:
 *
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L) {
 801aa14:	b480      	push	{r7}
 801aa16:	b085      	sub	sp, #20
 801aa18:	af00      	add	r7, sp, #0
 801aa1a:	4603      	mov	r3, r0
 801aa1c:	460a      	mov	r2, r1
 801aa1e:	71fb      	strb	r3, [r7, #7]
 801aa20:	4613      	mov	r3, r2
 801aa22:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 801aa24:	79bb      	ldrb	r3, [r7, #6]
 801aa26:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 801aa28:	79fb      	ldrb	r3, [r7, #7]
 801aa2a:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 801aa2c:	89bb      	ldrh	r3, [r7, #12]
}
 801aa2e:	4618      	mov	r0, r3
 801aa30:	3714      	adds	r7, #20
 801aa32:	46bd      	mov	sp, r7
 801aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa38:	4770      	bx	lr

0801aa3a <_Z7calcCRCPhh>:
 *
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length) {
 801aa3a:	b480      	push	{r7}
 801aa3c:	b087      	sub	sp, #28
 801aa3e:	af00      	add	r7, sp, #0
 801aa40:	6078      	str	r0, [r7, #4]
 801aa42:	460b      	mov	r3, r1
 801aa44:	70fb      	strb	r3, [r7, #3]
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
 801aa46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aa4a:	617b      	str	r3, [r7, #20]
	for (unsigned char i = 0; i < u8length; i++) {
 801aa4c:	2300      	movs	r3, #0
 801aa4e:	74fb      	strb	r3, [r7, #19]
 801aa50:	7cfa      	ldrb	r2, [r7, #19]
 801aa52:	78fb      	ldrb	r3, [r7, #3]
 801aa54:	429a      	cmp	r2, r3
 801aa56:	d223      	bcs.n	801aaa0 <_Z7calcCRCPhh+0x66>
		temp = temp ^ Buffer[i];
 801aa58:	7cfb      	ldrb	r3, [r7, #19]
 801aa5a:	687a      	ldr	r2, [r7, #4]
 801aa5c:	4413      	add	r3, r2
 801aa5e:	781b      	ldrb	r3, [r3, #0]
 801aa60:	461a      	mov	r2, r3
 801aa62:	697b      	ldr	r3, [r7, #20]
 801aa64:	4053      	eors	r3, r2
 801aa66:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 801aa68:	2301      	movs	r3, #1
 801aa6a:	74bb      	strb	r3, [r7, #18]
 801aa6c:	7cbb      	ldrb	r3, [r7, #18]
 801aa6e:	2b08      	cmp	r3, #8
 801aa70:	d812      	bhi.n	801aa98 <_Z7calcCRCPhh+0x5e>
			flag = temp & 0x0001;
 801aa72:	697b      	ldr	r3, [r7, #20]
 801aa74:	f003 0301 	and.w	r3, r3, #1
 801aa78:	60fb      	str	r3, [r7, #12]
			temp >>= 1;
 801aa7a:	697b      	ldr	r3, [r7, #20]
 801aa7c:	085b      	lsrs	r3, r3, #1
 801aa7e:	617b      	str	r3, [r7, #20]
			if (flag)
 801aa80:	68fb      	ldr	r3, [r7, #12]
 801aa82:	2b00      	cmp	r3, #0
 801aa84:	d004      	beq.n	801aa90 <_Z7calcCRCPhh+0x56>
				temp ^= 0xA001;
 801aa86:	697a      	ldr	r2, [r7, #20]
 801aa88:	f24a 0301 	movw	r3, #40961	; 0xa001
 801aa8c:	4053      	eors	r3, r2
 801aa8e:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 801aa90:	7cbb      	ldrb	r3, [r7, #18]
 801aa92:	3301      	adds	r3, #1
 801aa94:	74bb      	strb	r3, [r7, #18]
 801aa96:	e7e9      	b.n	801aa6c <_Z7calcCRCPhh+0x32>
	for (unsigned char i = 0; i < u8length; i++) {
 801aa98:	7cfb      	ldrb	r3, [r7, #19]
 801aa9a:	3301      	adds	r3, #1
 801aa9c:	74fb      	strb	r3, [r7, #19]
 801aa9e:	e7d7      	b.n	801aa50 <_Z7calcCRCPhh+0x16>
		}
	}
	// Reverse byte order.
	temp2 = temp >> 8;
 801aaa0:	697b      	ldr	r3, [r7, #20]
 801aaa2:	0a1b      	lsrs	r3, r3, #8
 801aaa4:	60bb      	str	r3, [r7, #8]
	temp = (temp << 8) | temp2;
 801aaa6:	697b      	ldr	r3, [r7, #20]
 801aaa8:	021b      	lsls	r3, r3, #8
 801aaaa:	68ba      	ldr	r2, [r7, #8]
 801aaac:	4313      	orrs	r3, r2
 801aaae:	617b      	str	r3, [r7, #20]
	temp &= 0xFFFF;
 801aab0:	697b      	ldr	r3, [r7, #20]
 801aab2:	b29b      	uxth	r3, r3
 801aab4:	617b      	str	r3, [r7, #20]
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
 801aab6:	697b      	ldr	r3, [r7, #20]
 801aab8:	b29b      	uxth	r3, r3

}
 801aaba:	4618      	mov	r0, r3
 801aabc:	371c      	adds	r7, #28
 801aabe:	46bd      	mov	sp, r7
 801aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aac4:	4770      	bx	lr

0801aac6 <_ZN21core_utils_RingBufferILi128EEC1Ev>:

template<int size>
class core_utils_RingBuffer {
public:

	core_utils_RingBuffer() {
 801aac6:	b480      	push	{r7}
 801aac8:	b083      	sub	sp, #12
 801aaca:	af00      	add	r7, sp, #0
 801aacc:	6078      	str	r0, [r7, #4]

	}
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	4618      	mov	r0, r3
 801aad2:	370c      	adds	r7, #12
 801aad4:	46bd      	mov	sp, r7
 801aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aada:	4770      	bx	lr

0801aadc <_ZN21core_utils_RingBufferILi128EE5clearEv>:

	void clear() {
 801aadc:	b480      	push	{r7}
 801aade:	b083      	sub	sp, #12
 801aae0:	af00      	add	r7, sp, #0
 801aae2:	6078      	str	r0, [r7, #4]
		this->start = 0;
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	2200      	movs	r2, #0
 801aae8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		this->end = 0;
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	2200      	movs	r2, #0
 801aaf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		this->available = 0;
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	2200      	movs	r2, #0
 801aaf8:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		this->overflow = false;
 801aafc:	687b      	ldr	r3, [r7, #4]
 801aafe:	2200      	movs	r2, #0
 801ab00:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	}
 801ab04:	bf00      	nop
 801ab06:	370c      	adds	r7, #12
 801ab08:	46bd      	mov	sp, r7
 801ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab0e:	4770      	bx	lr

0801ab10 <_ZN21core_utils_RingBufferILi128EE13get_all_bytesEPh>:
		this->clear();

		return uCounter;
	}

	uint8_t get_all_bytes(uint8_t *buffer) {
 801ab10:	b580      	push	{r7, lr}
 801ab12:	b082      	sub	sp, #8
 801ab14:	af00      	add	r7, sp, #0
 801ab16:	6078      	str	r0, [r7, #4]
 801ab18:	6039      	str	r1, [r7, #0]
		return this->get_n_bytes(buffer, this->available);
 801ab1a:	687b      	ldr	r3, [r7, #4]
 801ab1c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 801ab20:	461a      	mov	r2, r3
 801ab22:	6839      	ldr	r1, [r7, #0]
 801ab24:	6878      	ldr	r0, [r7, #4]
 801ab26:	f000 f805 	bl	801ab34 <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh>
 801ab2a:	4603      	mov	r3, r0
	}
 801ab2c:	4618      	mov	r0, r3
 801ab2e:	3708      	adds	r7, #8
 801ab30:	46bd      	mov	sp, r7
 801ab32:	bd80      	pop	{r7, pc}

0801ab34 <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh>:
	uint8_t get_n_bytes(uint8_t *buffer, uint8_t number) {
 801ab34:	b580      	push	{r7, lr}
 801ab36:	b086      	sub	sp, #24
 801ab38:	af00      	add	r7, sp, #0
 801ab3a:	60f8      	str	r0, [r7, #12]
 801ab3c:	60b9      	str	r1, [r7, #8]
 801ab3e:	4613      	mov	r3, r2
 801ab40:	71fb      	strb	r3, [r7, #7]
		if (this->available == 0 || number == 0)
 801ab42:	68fb      	ldr	r3, [r7, #12]
 801ab44:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	d002      	beq.n	801ab52 <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh+0x1e>
 801ab4c:	79fb      	ldrb	r3, [r7, #7]
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	d101      	bne.n	801ab56 <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh+0x22>
			return 0;
 801ab52:	2300      	movs	r3, #0
 801ab54:	e03e      	b.n	801abd4 <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh+0xa0>
		if (number > size)
 801ab56:	79fb      	ldrb	r3, [r7, #7]
 801ab58:	2b80      	cmp	r3, #128	; 0x80
 801ab5a:	d901      	bls.n	801ab60 <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh+0x2c>
			return 0;
 801ab5c:	2300      	movs	r3, #0
 801ab5e:	e039      	b.n	801abd4 <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh+0xa0>
		for (uCounter = 0; uCounter < number && uCounter < this->available;
 801ab60:	2300      	movs	r3, #0
 801ab62:	75fb      	strb	r3, [r7, #23]
 801ab64:	7dfa      	ldrb	r2, [r7, #23]
 801ab66:	79fb      	ldrb	r3, [r7, #7]
 801ab68:	429a      	cmp	r2, r3
 801ab6a:	d222      	bcs.n	801abb2 <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh+0x7e>
 801ab6c:	68fb      	ldr	r3, [r7, #12]
 801ab6e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 801ab72:	7dfa      	ldrb	r2, [r7, #23]
 801ab74:	429a      	cmp	r2, r3
 801ab76:	d21c      	bcs.n	801abb2 <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh+0x7e>
			buffer[uCounter] = this->buffer[this->start];
 801ab78:	68fb      	ldr	r3, [r7, #12]
 801ab7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801ab7e:	4619      	mov	r1, r3
 801ab80:	7dfb      	ldrb	r3, [r7, #23]
 801ab82:	68ba      	ldr	r2, [r7, #8]
 801ab84:	4413      	add	r3, r2
 801ab86:	68fa      	ldr	r2, [r7, #12]
 801ab88:	5c52      	ldrb	r2, [r2, r1]
 801ab8a:	701a      	strb	r2, [r3, #0]
			this->start = (this->start + 1) % size;
 801ab8c:	68fb      	ldr	r3, [r7, #12]
 801ab8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801ab92:	3301      	adds	r3, #1
 801ab94:	425a      	negs	r2, r3
 801ab96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ab9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801ab9e:	bf58      	it	pl
 801aba0:	4253      	negpl	r3, r2
 801aba2:	b2da      	uxtb	r2, r3
 801aba4:	68fb      	ldr	r3, [r7, #12]
 801aba6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		for (uCounter = 0; uCounter < number && uCounter < this->available;
 801abaa:	7dfb      	ldrb	r3, [r7, #23]
 801abac:	3301      	adds	r3, #1
 801abae:	75fb      	strb	r3, [r7, #23]
 801abb0:	e7d8      	b.n	801ab64 <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh+0x30>
		this->available = this->available - uCounter;
 801abb2:	68fb      	ldr	r3, [r7, #12]
 801abb4:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 801abb8:	7dfb      	ldrb	r3, [r7, #23]
 801abba:	1ad3      	subs	r3, r2, r3
 801abbc:	b2da      	uxtb	r2, r3
 801abbe:	68fb      	ldr	r3, [r7, #12]
 801abc0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		this->overflow = false;
 801abc4:	68fb      	ldr	r3, [r7, #12]
 801abc6:	2200      	movs	r2, #0
 801abc8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		this->clear();
 801abcc:	68f8      	ldr	r0, [r7, #12]
 801abce:	f7ff ff85 	bl	801aadc <_ZN21core_utils_RingBufferILi128EE5clearEv>
		return uCounter;
 801abd2:	7dfb      	ldrb	r3, [r7, #23]
	}
 801abd4:	4618      	mov	r0, r3
 801abd6:	3718      	adds	r7, #24
 801abd8:	46bd      	mov	sp, r7
 801abda:	bd80      	pop	{r7, pc}

0801abdc <_ZN23core_comm_SerialMessage6copyToEPS_>:
 *      Author: Dustin Lehmann
 */

#include "core_comm_SerialProtocol.h"

void core_comm_SerialMessage::copyTo(core_comm_SerialMessage *msg) {
 801abdc:	b480      	push	{r7}
 801abde:	b085      	sub	sp, #20
 801abe0:	af00      	add	r7, sp, #0
 801abe2:	6078      	str	r0, [r7, #4]
 801abe4:	6039      	str	r1, [r7, #0]
	msg->address_1 = this->address_1;
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	785a      	ldrb	r2, [r3, #1]
 801abea:	683b      	ldr	r3, [r7, #0]
 801abec:	705a      	strb	r2, [r3, #1]
	msg->address_2 = this->address_2;
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	789a      	ldrb	r2, [r3, #2]
 801abf2:	683b      	ldr	r3, [r7, #0]
 801abf4:	709a      	strb	r2, [r3, #2]
	msg->address_3 = this->address_3;
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	78da      	ldrb	r2, [r3, #3]
 801abfa:	683b      	ldr	r3, [r7, #0]
 801abfc:	70da      	strb	r2, [r3, #3]
	msg->cmd = this->cmd;
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	781a      	ldrb	r2, [r3, #0]
 801ac02:	683b      	ldr	r3, [r7, #0]
 801ac04:	701a      	strb	r2, [r3, #0]
	msg->len = this->len;
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	899a      	ldrh	r2, [r3, #12]
 801ac0a:	683b      	ldr	r3, [r7, #0]
 801ac0c:	819a      	strh	r2, [r3, #12]

	for (int i = 0; i < len; i++) {
 801ac0e:	2300      	movs	r3, #0
 801ac10:	60fb      	str	r3, [r7, #12]
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	899b      	ldrh	r3, [r3, #12]
 801ac16:	461a      	mov	r2, r3
 801ac18:	68fb      	ldr	r3, [r7, #12]
 801ac1a:	4293      	cmp	r3, r2
 801ac1c:	da0d      	bge.n	801ac3a <_ZN23core_comm_SerialMessage6copyToEPS_+0x5e>
		msg->data_ptr[i] = this->data_ptr[i];
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	689a      	ldr	r2, [r3, #8]
 801ac22:	68fb      	ldr	r3, [r7, #12]
 801ac24:	441a      	add	r2, r3
 801ac26:	683b      	ldr	r3, [r7, #0]
 801ac28:	6899      	ldr	r1, [r3, #8]
 801ac2a:	68fb      	ldr	r3, [r7, #12]
 801ac2c:	440b      	add	r3, r1
 801ac2e:	7812      	ldrb	r2, [r2, #0]
 801ac30:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 801ac32:	68fb      	ldr	r3, [r7, #12]
 801ac34:	3301      	adds	r3, #1
 801ac36:	60fb      	str	r3, [r7, #12]
 801ac38:	e7eb      	b.n	801ac12 <_ZN23core_comm_SerialMessage6copyToEPS_+0x36>
	}
}
 801ac3a:	bf00      	nop
 801ac3c:	3714      	adds	r7, #20
 801ac3e:	46bd      	mov	sp, r7
 801ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac44:	4770      	bx	lr

0801ac46 <_ZN23core_comm_SerialMessage6encodeEPh>:

uint8_t core_comm_SerialMessage::encode(uint8_t *buffer) {
 801ac46:	b480      	push	{r7}
 801ac48:	b085      	sub	sp, #20
 801ac4a:	af00      	add	r7, sp, #0
 801ac4c:	6078      	str	r0, [r7, #4]
 801ac4e:	6039      	str	r1, [r7, #0]
	buffer[0] = CORE_SERIAL_MESSAGE_HEADER;
 801ac50:	683b      	ldr	r3, [r7, #0]
 801ac52:	2255      	movs	r2, #85	; 0x55
 801ac54:	701a      	strb	r2, [r3, #0]
	buffer[1] = this->cmd;
 801ac56:	683b      	ldr	r3, [r7, #0]
 801ac58:	3301      	adds	r3, #1
 801ac5a:	687a      	ldr	r2, [r7, #4]
 801ac5c:	7812      	ldrb	r2, [r2, #0]
 801ac5e:	701a      	strb	r2, [r3, #0]
	buffer[2] = this->address_1;
 801ac60:	683b      	ldr	r3, [r7, #0]
 801ac62:	3302      	adds	r3, #2
 801ac64:	687a      	ldr	r2, [r7, #4]
 801ac66:	7852      	ldrb	r2, [r2, #1]
 801ac68:	701a      	strb	r2, [r3, #0]
	buffer[3] = this->address_2;
 801ac6a:	683b      	ldr	r3, [r7, #0]
 801ac6c:	3303      	adds	r3, #3
 801ac6e:	687a      	ldr	r2, [r7, #4]
 801ac70:	7892      	ldrb	r2, [r2, #2]
 801ac72:	701a      	strb	r2, [r3, #0]
	buffer[4] = this->address_3;
 801ac74:	683b      	ldr	r3, [r7, #0]
 801ac76:	3304      	adds	r3, #4
 801ac78:	687a      	ldr	r2, [r7, #4]
 801ac7a:	78d2      	ldrb	r2, [r2, #3]
 801ac7c:	701a      	strb	r2, [r3, #0]
	buffer[5] = this->flag;
 801ac7e:	683b      	ldr	r3, [r7, #0]
 801ac80:	3305      	adds	r3, #5
 801ac82:	687a      	ldr	r2, [r7, #4]
 801ac84:	7912      	ldrb	r2, [r2, #4]
 801ac86:	701a      	strb	r2, [r3, #0]
	buffer[6] = this->len >> 8;
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	899b      	ldrh	r3, [r3, #12]
 801ac8c:	0a1b      	lsrs	r3, r3, #8
 801ac8e:	b29a      	uxth	r2, r3
 801ac90:	683b      	ldr	r3, [r7, #0]
 801ac92:	3306      	adds	r3, #6
 801ac94:	b2d2      	uxtb	r2, r2
 801ac96:	701a      	strb	r2, [r3, #0]
	buffer[7] = this->len & 0xFF;
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	899a      	ldrh	r2, [r3, #12]
 801ac9c:	683b      	ldr	r3, [r7, #0]
 801ac9e:	3307      	adds	r3, #7
 801aca0:	b2d2      	uxtb	r2, r2
 801aca2:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < this->len; i++) {
 801aca4:	2300      	movs	r3, #0
 801aca6:	73fb      	strb	r3, [r7, #15]
 801aca8:	7bfb      	ldrb	r3, [r7, #15]
 801acaa:	687a      	ldr	r2, [r7, #4]
 801acac:	8992      	ldrh	r2, [r2, #12]
 801acae:	4293      	cmp	r3, r2
 801acb0:	da0e      	bge.n	801acd0 <_ZN23core_comm_SerialMessage6encodeEPh+0x8a>
		buffer[8 + i] = this->data_ptr[i];
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	689a      	ldr	r2, [r3, #8]
 801acb6:	7bfb      	ldrb	r3, [r7, #15]
 801acb8:	441a      	add	r2, r3
 801acba:	7bfb      	ldrb	r3, [r7, #15]
 801acbc:	3308      	adds	r3, #8
 801acbe:	4619      	mov	r1, r3
 801acc0:	683b      	ldr	r3, [r7, #0]
 801acc2:	440b      	add	r3, r1
 801acc4:	7812      	ldrb	r2, [r2, #0]
 801acc6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < this->len; i++) {
 801acc8:	7bfb      	ldrb	r3, [r7, #15]
 801acca:	3301      	adds	r3, #1
 801accc:	73fb      	strb	r3, [r7, #15]
 801acce:	e7eb      	b.n	801aca8 <_ZN23core_comm_SerialMessage6encodeEPh+0x62>
	}
	buffer[8 + this->len] = 0; // CRC8
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	899b      	ldrh	r3, [r3, #12]
 801acd4:	3308      	adds	r3, #8
 801acd6:	461a      	mov	r2, r3
 801acd8:	683b      	ldr	r3, [r7, #0]
 801acda:	4413      	add	r3, r2
 801acdc:	2200      	movs	r2, #0
 801acde:	701a      	strb	r2, [r3, #0]
	return CORE_SERIAL_MESSAGE_PROTOCOL_OVERHEAD + this->len;
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	899b      	ldrh	r3, [r3, #12]
 801ace4:	b2db      	uxtb	r3, r3
 801ace6:	3309      	adds	r3, #9
 801ace8:	b2db      	uxtb	r3, r3
//	CORE_SERIAL_MESSAGE_PROTOCOL_OVERHEAD + this->len;
}
 801acea:	4618      	mov	r0, r3
 801acec:	3714      	adds	r7, #20
 801acee:	46bd      	mov	sp, r7
 801acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acf4:	4770      	bx	lr

0801acf6 <_ZN23core_comm_SerialMessage5checkEPht>:
	}
	buffer->data_ptr[8 + this->len] = 0; // CRC8
	buffer->len = this->len;
}

uint8_t core_comm_SerialMessage::check(uint8_t *buffer, uint16_t len) {
 801acf6:	b580      	push	{r7, lr}
 801acf8:	b086      	sub	sp, #24
 801acfa:	af00      	add	r7, sp, #0
 801acfc:	60f8      	str	r0, [r7, #12]
 801acfe:	60b9      	str	r1, [r7, #8]
 801ad00:	4613      	mov	r3, r2
 801ad02:	80fb      	strh	r3, [r7, #6]

	if (len < CORE_SERIAL_MESSAGE_PROTOCOL_OVERHEAD) {
 801ad04:	88fb      	ldrh	r3, [r7, #6]
 801ad06:	2b08      	cmp	r3, #8
 801ad08:	d801      	bhi.n	801ad0e <_ZN23core_comm_SerialMessage5checkEPht+0x18>
		return CORE_ERROR;
 801ad0a:	2300      	movs	r3, #0
 801ad0c:	e019      	b.n	801ad42 <_ZN23core_comm_SerialMessage5checkEPht+0x4c>
	}

	/* Check for the header */
	if (!(buffer[0] == CORE_SERIAL_MESSAGE_HEADER)) {
 801ad0e:	68bb      	ldr	r3, [r7, #8]
 801ad10:	781b      	ldrb	r3, [r3, #0]
 801ad12:	2b55      	cmp	r3, #85	; 0x55
 801ad14:	d001      	beq.n	801ad1a <_ZN23core_comm_SerialMessage5checkEPht+0x24>
		return CORE_ERROR;
 801ad16:	2300      	movs	r3, #0
 801ad18:	e013      	b.n	801ad42 <_ZN23core_comm_SerialMessage5checkEPht+0x4c>
//		return CORE_ERROR;
//	}

	/* Extract the data length */
	// Check if the data length matches with the length of the message
	uint16_t data_len = uint8_to_uint16(buffer[6], buffer[7]);
 801ad1a:	68bb      	ldr	r3, [r7, #8]
 801ad1c:	3306      	adds	r3, #6
 801ad1e:	781a      	ldrb	r2, [r3, #0]
 801ad20:	68bb      	ldr	r3, [r7, #8]
 801ad22:	3307      	adds	r3, #7
 801ad24:	781b      	ldrb	r3, [r3, #0]
 801ad26:	4619      	mov	r1, r3
 801ad28:	4610      	mov	r0, r2
 801ad2a:	f002 f8e9 	bl	801cf00 <_Z15uint8_to_uint16hh>
 801ad2e:	4603      	mov	r3, r0
 801ad30:	82fb      	strh	r3, [r7, #22]
	if ((len - data_len) == CORE_SERIAL_MESSAGE_PROTOCOL_OVERHEAD) {
 801ad32:	88fa      	ldrh	r2, [r7, #6]
 801ad34:	8afb      	ldrh	r3, [r7, #22]
 801ad36:	1ad3      	subs	r3, r2, r3
 801ad38:	2b09      	cmp	r3, #9
 801ad3a:	d001      	beq.n	801ad40 <_ZN23core_comm_SerialMessage5checkEPht+0x4a>
	} else {
		return CORE_ERROR;
 801ad3c:	2300      	movs	r3, #0
 801ad3e:	e000      	b.n	801ad42 <_ZN23core_comm_SerialMessage5checkEPht+0x4c>
	}

	return CORE_OK;
 801ad40:	2301      	movs	r3, #1

}
 801ad42:	4618      	mov	r0, r3
 801ad44:	3718      	adds	r7, #24
 801ad46:	46bd      	mov	sp, r7
 801ad48:	bd80      	pop	{r7, pc}

0801ad4a <_ZN23core_comm_SerialMessage6decodeEPht>:
uint8_t core_comm_SerialMessage::check(Buffer *buffer) {
	return this->check(buffer->data_ptr, buffer->len);
}

uint8_t core_comm_SerialMessage::decode(uint8_t *buffer, uint16_t len) {
 801ad4a:	b580      	push	{r7, lr}
 801ad4c:	b086      	sub	sp, #24
 801ad4e:	af00      	add	r7, sp, #0
 801ad50:	60f8      	str	r0, [r7, #12]
 801ad52:	60b9      	str	r1, [r7, #8]
 801ad54:	4613      	mov	r3, r2
 801ad56:	80fb      	strh	r3, [r7, #6]
	if (this->check(buffer, len) == CORE_ERROR) {
 801ad58:	88fb      	ldrh	r3, [r7, #6]
 801ad5a:	461a      	mov	r2, r3
 801ad5c:	68b9      	ldr	r1, [r7, #8]
 801ad5e:	68f8      	ldr	r0, [r7, #12]
 801ad60:	f7ff ffc9 	bl	801acf6 <_ZN23core_comm_SerialMessage5checkEPht>
 801ad64:	4603      	mov	r3, r0
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	bf0c      	ite	eq
 801ad6a:	2301      	moveq	r3, #1
 801ad6c:	2300      	movne	r3, #0
 801ad6e:	b2db      	uxtb	r3, r3
 801ad70:	2b00      	cmp	r3, #0
 801ad72:	d001      	beq.n	801ad78 <_ZN23core_comm_SerialMessage6decodeEPht+0x2e>
		return CORE_ERROR;
 801ad74:	2300      	movs	r3, #0
 801ad76:	e037      	b.n	801ade8 <_ZN23core_comm_SerialMessage6decodeEPht+0x9e>
	}

	/* Extract the command */
	this->cmd = buffer[1];
 801ad78:	68bb      	ldr	r3, [r7, #8]
 801ad7a:	785a      	ldrb	r2, [r3, #1]
 801ad7c:	68fb      	ldr	r3, [r7, #12]
 801ad7e:	701a      	strb	r2, [r3, #0]

	/* Extract the address */
	this->address_1 = buffer[2];
 801ad80:	68bb      	ldr	r3, [r7, #8]
 801ad82:	789a      	ldrb	r2, [r3, #2]
 801ad84:	68fb      	ldr	r3, [r7, #12]
 801ad86:	705a      	strb	r2, [r3, #1]
	this->address_2 = buffer[3];
 801ad88:	68bb      	ldr	r3, [r7, #8]
 801ad8a:	78da      	ldrb	r2, [r3, #3]
 801ad8c:	68fb      	ldr	r3, [r7, #12]
 801ad8e:	709a      	strb	r2, [r3, #2]
	this->address_3 = buffer[4];
 801ad90:	68bb      	ldr	r3, [r7, #8]
 801ad92:	791a      	ldrb	r2, [r3, #4]
 801ad94:	68fb      	ldr	r3, [r7, #12]
 801ad96:	70da      	strb	r2, [r3, #3]

	/* Flag */
	this->flag = buffer[5];
 801ad98:	68bb      	ldr	r3, [r7, #8]
 801ad9a:	795a      	ldrb	r2, [r3, #5]
 801ad9c:	68fb      	ldr	r3, [r7, #12]
 801ad9e:	711a      	strb	r2, [r3, #4]

	/* Extract the data length */
	this->len = uint8_to_uint16(buffer[6], buffer[7]);
 801ada0:	68bb      	ldr	r3, [r7, #8]
 801ada2:	3306      	adds	r3, #6
 801ada4:	781a      	ldrb	r2, [r3, #0]
 801ada6:	68bb      	ldr	r3, [r7, #8]
 801ada8:	3307      	adds	r3, #7
 801adaa:	781b      	ldrb	r3, [r3, #0]
 801adac:	4619      	mov	r1, r3
 801adae:	4610      	mov	r0, r2
 801adb0:	f002 f8a6 	bl	801cf00 <_Z15uint8_to_uint16hh>
 801adb4:	4603      	mov	r3, r0
 801adb6:	461a      	mov	r2, r3
 801adb8:	68fb      	ldr	r3, [r7, #12]
 801adba:	819a      	strh	r2, [r3, #12]

	/* Extract the data */
	for (uint8_t i = 0; i < this->len; i++) {
 801adbc:	2300      	movs	r3, #0
 801adbe:	75fb      	strb	r3, [r7, #23]
 801adc0:	7dfb      	ldrb	r3, [r7, #23]
 801adc2:	68fa      	ldr	r2, [r7, #12]
 801adc4:	8992      	ldrh	r2, [r2, #12]
 801adc6:	4293      	cmp	r3, r2
 801adc8:	da0d      	bge.n	801ade6 <_ZN23core_comm_SerialMessage6decodeEPht+0x9c>
		this->data_ptr[i] = buffer[i + 8];
 801adca:	7dfb      	ldrb	r3, [r7, #23]
 801adcc:	3308      	adds	r3, #8
 801adce:	68ba      	ldr	r2, [r7, #8]
 801add0:	441a      	add	r2, r3
 801add2:	68fb      	ldr	r3, [r7, #12]
 801add4:	6899      	ldr	r1, [r3, #8]
 801add6:	7dfb      	ldrb	r3, [r7, #23]
 801add8:	440b      	add	r3, r1
 801adda:	7812      	ldrb	r2, [r2, #0]
 801addc:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < this->len; i++) {
 801adde:	7dfb      	ldrb	r3, [r7, #23]
 801ade0:	3301      	adds	r3, #1
 801ade2:	75fb      	strb	r3, [r7, #23]
 801ade4:	e7ec      	b.n	801adc0 <_ZN23core_comm_SerialMessage6decodeEPht+0x76>
	}

	return CORE_OK;
 801ade6:	2301      	movs	r3, #1
}
 801ade8:	4618      	mov	r0, r3
 801adea:	3718      	adds	r7, #24
 801adec:	46bd      	mov	sp, r7
 801adee:	bd80      	pop	{r7, pc}

0801adf0 <_ZN23core_comm_SerialMessage6decodeEP6Buffer>:

uint8_t core_comm_SerialMessage::decode(Buffer *buffer) {
 801adf0:	b580      	push	{r7, lr}
 801adf2:	b082      	sub	sp, #8
 801adf4:	af00      	add	r7, sp, #0
 801adf6:	6078      	str	r0, [r7, #4]
 801adf8:	6039      	str	r1, [r7, #0]
	return this->decode(buffer->data_ptr, buffer->len);
 801adfa:	683b      	ldr	r3, [r7, #0]
 801adfc:	6819      	ldr	r1, [r3, #0]
 801adfe:	683b      	ldr	r3, [r7, #0]
 801ae00:	889b      	ldrh	r3, [r3, #4]
 801ae02:	461a      	mov	r2, r3
 801ae04:	6878      	ldr	r0, [r7, #4]
 801ae06:	f7ff ffa0 	bl	801ad4a <_ZN23core_comm_SerialMessage6decodeEPht>
 801ae0a:	4603      	mov	r3, r0
}
 801ae0c:	4618      	mov	r0, r3
 801ae0e:	3708      	adds	r7, #8
 801ae10:	46bd      	mov	sp, r7
 801ae12:	bd80      	pop	{r7, pc}

0801ae14 <_Z32core_comm_SerialSocket_RTOS_TaskPv>:

core_comm_UartInterface_config_t std_uart_config = { .uart =
		std_hardware_uart_config, .use_protocol = 1, .use_queue = 1 };

/* ============================================================================= */
void core_comm_SerialSocket_RTOS_Task(void *SerialSocket) {
 801ae14:	b590      	push	{r4, r7, lr}
 801ae16:	b085      	sub	sp, #20
 801ae18:	af00      	add	r7, sp, #0
 801ae1a:	6078      	str	r0, [r7, #4]
	UartInterface *socket = (UartInterface*) SerialSocket;
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	60fb      	str	r3, [r7, #12]

// Get the task handle and save it in the RTOS structure for later notifying this task
	socket->setTaskID(xTaskGetCurrentTaskHandle());
 801ae20:	68fb      	ldr	r3, [r7, #12]
 801ae22:	681b      	ldr	r3, [r3, #0]
 801ae24:	3304      	adds	r3, #4
 801ae26:	681c      	ldr	r4, [r3, #0]
 801ae28:	f7f5 fca6 	bl	8010778 <xTaskGetCurrentTaskHandle>
 801ae2c:	4603      	mov	r3, r0
 801ae2e:	4619      	mov	r1, r3
 801ae30:	68f8      	ldr	r0, [r7, #12]
 801ae32:	47a0      	blx	r4

	while (!socket->exit) {
 801ae34:	68fb      	ldr	r3, [r7, #12]
 801ae36:	791b      	ldrb	r3, [r3, #4]
 801ae38:	2b00      	cmp	r3, #0
 801ae3a:	d10e      	bne.n	801ae5a <_Z32core_comm_SerialSocket_RTOS_TaskPv+0x46>

		// TODO: this is now waiting only for receiving a notification, but maybe we want to do other things
		uint32_t ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 801ae3c:	f04f 31ff 	mov.w	r1, #4294967295
 801ae40:	2001      	movs	r0, #1
 801ae42:	f7f5 fe33 	bl	8010aac <ulTaskNotifyTake>
 801ae46:	60b8      	str	r0, [r7, #8]
		if (ulNotificationValue) {
 801ae48:	68bb      	ldr	r3, [r7, #8]
 801ae4a:	2b00      	cmp	r3, #0
 801ae4c:	d0f2      	beq.n	801ae34 <_Z32core_comm_SerialSocket_RTOS_TaskPv+0x20>
			socket->rx_function();
 801ae4e:	68fb      	ldr	r3, [r7, #12]
 801ae50:	681b      	ldr	r3, [r3, #0]
 801ae52:	681b      	ldr	r3, [r3, #0]
 801ae54:	68f8      	ldr	r0, [r7, #12]
 801ae56:	4798      	blx	r3
	while (!socket->exit) {
 801ae58:	e7ec      	b.n	801ae34 <_Z32core_comm_SerialSocket_RTOS_TaskPv+0x20>
		}

	}
	vTaskDelete(socket->getTaskID());
 801ae5a:	68fb      	ldr	r3, [r7, #12]
 801ae5c:	681b      	ldr	r3, [r3, #0]
 801ae5e:	3308      	adds	r3, #8
 801ae60:	681b      	ldr	r3, [r3, #0]
 801ae62:	68f8      	ldr	r0, [r7, #12]
 801ae64:	4798      	blx	r3
 801ae66:	4603      	mov	r3, r0
 801ae68:	4618      	mov	r0, r3
 801ae6a:	f7f4 fef3 	bl	800fc54 <vTaskDelete>
}
 801ae6e:	bf00      	nop
 801ae70:	3714      	adds	r7, #20
 801ae72:	46bd      	mov	sp, r7
 801ae74:	bd90      	pop	{r4, r7, pc}
	...

0801ae78 <_Z41__static_initialization_and_destruction_0ii>:
 801ae78:	b480      	push	{r7}
 801ae7a:	b083      	sub	sp, #12
 801ae7c:	af00      	add	r7, sp, #0
 801ae7e:	6078      	str	r0, [r7, #4]
 801ae80:	6039      	str	r1, [r7, #0]
 801ae82:	687b      	ldr	r3, [r7, #4]
 801ae84:	2b01      	cmp	r3, #1
 801ae86:	d108      	bne.n	801ae9a <_Z41__static_initialization_and_destruction_0ii+0x22>
 801ae88:	683b      	ldr	r3, [r7, #0]
 801ae8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ae8e:	4293      	cmp	r3, r2
 801ae90:	d103      	bne.n	801ae9a <_Z41__static_initialization_and_destruction_0ii+0x22>
		std_hardware_uart_config, .use_protocol = 1, .use_queue = 1 };
 801ae92:	4a05      	ldr	r2, [pc, #20]	; (801aea8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 801ae94:	4b05      	ldr	r3, [pc, #20]	; (801aeac <_Z41__static_initialization_and_destruction_0ii+0x34>)
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	6013      	str	r3, [r2, #0]
}
 801ae9a:	bf00      	nop
 801ae9c:	370c      	adds	r7, #12
 801ae9e:	46bd      	mov	sp, r7
 801aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aea4:	4770      	bx	lr
 801aea6:	bf00      	nop
 801aea8:	24000054 	.word	0x24000054
 801aeac:	24000050 	.word	0x24000050

0801aeb0 <_GLOBAL__sub_I_std_hardware_uart_config>:
 801aeb0:	b580      	push	{r7, lr}
 801aeb2:	af00      	add	r7, sp, #0
 801aeb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801aeb8:	2001      	movs	r0, #1
 801aeba:	f7ff ffdd 	bl	801ae78 <_Z41__static_initialization_and_destruction_0ii>
 801aebe:	bd80      	pop	{r7, pc}

0801aec0 <_ZN8MadgwickC1Ev>:
// Functions

//-------------------------------------------------------------------------------------------
// AHRS algorithm update

Madgwick::Madgwick() {
 801aec0:	b480      	push	{r7}
 801aec2:	b083      	sub	sp, #12
 801aec4:	af00      	add	r7, sp, #0
 801aec6:	6078      	str	r0, [r7, #4]
	beta = betaDef;
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 801aece:	601a      	str	r2, [r3, #0]
	q0 = 1.0f;
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801aed6:	619a      	str	r2, [r3, #24]
	q1 = 0.0f;
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	f04f 0200 	mov.w	r2, #0
 801aede:	61da      	str	r2, [r3, #28]
	q2 = 0.0f;
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	f04f 0200 	mov.w	r2, #0
 801aee6:	621a      	str	r2, [r3, #32]
	q3 = 0.0f;
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	f04f 0200 	mov.w	r2, #0
 801aeee:	625a      	str	r2, [r3, #36]	; 0x24
	invSampleFreq = 1.0f / sampleFreqDef;
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	4a06      	ldr	r2, [pc, #24]	; (801af0c <_ZN8MadgwickC1Ev+0x4c>)
 801aef4:	611a      	str	r2, [r3, #16]
	anglesComputed = 0;
 801aef6:	687b      	ldr	r3, [r7, #4]
 801aef8:	2200      	movs	r2, #0
 801aefa:	751a      	strb	r2, [r3, #20]
}
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	4618      	mov	r0, r3
 801af00:	370c      	adds	r7, #12
 801af02:	46bd      	mov	sp, r7
 801af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af08:	4770      	bx	lr
 801af0a:	bf00      	nop
 801af0c:	3c23d70a 	.word	0x3c23d70a

0801af10 <_ZN8Madgwick9updateIMUEffffff>:
}

//-------------------------------------------------------------------------------------------
// IMU algorithm update

void Madgwick::updateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 801af10:	b580      	push	{r7, lr}
 801af12:	b09e      	sub	sp, #120	; 0x78
 801af14:	af00      	add	r7, sp, #0
 801af16:	61f8      	str	r0, [r7, #28]
 801af18:	ed87 0a06 	vstr	s0, [r7, #24]
 801af1c:	edc7 0a05 	vstr	s1, [r7, #20]
 801af20:	ed87 1a04 	vstr	s2, [r7, #16]
 801af24:	edc7 1a03 	vstr	s3, [r7, #12]
 801af28:	ed87 2a02 	vstr	s4, [r7, #8]
 801af2c:	edc7 2a01 	vstr	s5, [r7, #4]
//	gx *= 0.0174533f;
//	gy *= 0.0174533f;
//	gz *= 0.0174533f;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 801af30:	69fb      	ldr	r3, [r7, #28]
 801af32:	edd3 7a07 	vldr	s15, [r3, #28]
 801af36:	eeb1 7a67 	vneg.f32	s14, s15
 801af3a:	edd7 7a06 	vldr	s15, [r7, #24]
 801af3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 801af42:	69fb      	ldr	r3, [r7, #28]
 801af44:	edd3 6a08 	vldr	s13, [r3, #32]
 801af48:	edd7 7a05 	vldr	s15, [r7, #20]
 801af4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801af50:	ee37 7a67 	vsub.f32	s14, s14, s15
 801af54:	69fb      	ldr	r3, [r7, #28]
 801af56:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 801af5a:	edd7 7a04 	vldr	s15, [r7, #16]
 801af5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801af62:	ee77 7a67 	vsub.f32	s15, s14, s15
 801af66:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801af6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801af6e:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 801af72:	69fb      	ldr	r3, [r7, #28]
 801af74:	ed93 7a06 	vldr	s14, [r3, #24]
 801af78:	edd7 7a06 	vldr	s15, [r7, #24]
 801af7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801af80:	69fb      	ldr	r3, [r7, #28]
 801af82:	edd3 6a08 	vldr	s13, [r3, #32]
 801af86:	edd7 7a04 	vldr	s15, [r7, #16]
 801af8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801af8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801af92:	69fb      	ldr	r3, [r7, #28]
 801af94:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 801af98:	edd7 7a05 	vldr	s15, [r7, #20]
 801af9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801afa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801afa4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801afa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 801afac:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 801afb0:	69fb      	ldr	r3, [r7, #28]
 801afb2:	ed93 7a06 	vldr	s14, [r3, #24]
 801afb6:	edd7 7a05 	vldr	s15, [r7, #20]
 801afba:	ee27 7a27 	vmul.f32	s14, s14, s15
 801afbe:	69fb      	ldr	r3, [r7, #28]
 801afc0:	edd3 6a07 	vldr	s13, [r3, #28]
 801afc4:	edd7 7a04 	vldr	s15, [r7, #16]
 801afc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801afcc:	ee37 7a67 	vsub.f32	s14, s14, s15
 801afd0:	69fb      	ldr	r3, [r7, #28]
 801afd2:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 801afd6:	edd7 7a06 	vldr	s15, [r7, #24]
 801afda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801afde:	ee77 7a27 	vadd.f32	s15, s14, s15
 801afe2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801afe6:	ee67 7a87 	vmul.f32	s15, s15, s14
 801afea:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 801afee:	69fb      	ldr	r3, [r7, #28]
 801aff0:	ed93 7a06 	vldr	s14, [r3, #24]
 801aff4:	edd7 7a04 	vldr	s15, [r7, #16]
 801aff8:	ee27 7a27 	vmul.f32	s14, s14, s15
 801affc:	69fb      	ldr	r3, [r7, #28]
 801affe:	edd3 6a07 	vldr	s13, [r3, #28]
 801b002:	edd7 7a05 	vldr	s15, [r7, #20]
 801b006:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b00a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b00e:	69fb      	ldr	r3, [r7, #28]
 801b010:	edd3 6a08 	vldr	s13, [r3, #32]
 801b014:	edd7 7a06 	vldr	s15, [r7, #24]
 801b018:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b01c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b020:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801b024:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b028:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 801b02c:	edd7 7a03 	vldr	s15, [r7, #12]
 801b030:	eef5 7a40 	vcmp.f32	s15, #0.0
 801b034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b038:	d10e      	bne.n	801b058 <_ZN8Madgwick9updateIMUEffffff+0x148>
 801b03a:	edd7 7a02 	vldr	s15, [r7, #8]
 801b03e:	eef5 7a40 	vcmp.f32	s15, #0.0
 801b042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b046:	d107      	bne.n	801b058 <_ZN8Madgwick9updateIMUEffffff+0x148>
 801b048:	edd7 7a01 	vldr	s15, [r7, #4]
 801b04c:	eef5 7a40 	vcmp.f32	s15, #0.0
 801b050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b054:	f000 81db 	beq.w	801b40e <_ZN8Madgwick9updateIMUEffffff+0x4fe>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 801b058:	edd7 7a03 	vldr	s15, [r7, #12]
 801b05c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801b060:	edd7 7a02 	vldr	s15, [r7, #8]
 801b064:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801b068:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b06c:	edd7 7a01 	vldr	s15, [r7, #4]
 801b070:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801b074:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b078:	eeb0 0a67 	vmov.f32	s0, s15
 801b07c:	f000 fa5e 	bl	801b53c <_ZN8Madgwick7invSqrtEf>
 801b080:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		ax *= recipNorm;
 801b084:	ed97 7a03 	vldr	s14, [r7, #12]
 801b088:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801b08c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b090:	edc7 7a03 	vstr	s15, [r7, #12]
		ay *= recipNorm;
 801b094:	ed97 7a02 	vldr	s14, [r7, #8]
 801b098:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801b09c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b0a0:	edc7 7a02 	vstr	s15, [r7, #8]
		az *= recipNorm;
 801b0a4:	ed97 7a01 	vldr	s14, [r7, #4]
 801b0a8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801b0ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b0b0:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 801b0b4:	69fb      	ldr	r3, [r7, #28]
 801b0b6:	edd3 7a06 	vldr	s15, [r3, #24]
 801b0ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801b0be:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_2q1 = 2.0f * q1;
 801b0c2:	69fb      	ldr	r3, [r7, #28]
 801b0c4:	edd3 7a07 	vldr	s15, [r3, #28]
 801b0c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801b0cc:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_2q2 = 2.0f * q2;
 801b0d0:	69fb      	ldr	r3, [r7, #28]
 801b0d2:	edd3 7a08 	vldr	s15, [r3, #32]
 801b0d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801b0da:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q3 = 2.0f * q3;
 801b0de:	69fb      	ldr	r3, [r7, #28]
 801b0e0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801b0e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801b0e8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_4q0 = 4.0f * q0;
 801b0ec:	69fb      	ldr	r3, [r7, #28]
 801b0ee:	edd3 7a06 	vldr	s15, [r3, #24]
 801b0f2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801b0f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b0fa:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_4q1 = 4.0f * q1;
 801b0fe:	69fb      	ldr	r3, [r7, #28]
 801b100:	edd3 7a07 	vldr	s15, [r3, #28]
 801b104:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801b108:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b10c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q2 = 4.0f * q2;
 801b110:	69fb      	ldr	r3, [r7, #28]
 801b112:	edd3 7a08 	vldr	s15, [r3, #32]
 801b116:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801b11a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b11e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_8q1 = 8.0f * q1;
 801b122:	69fb      	ldr	r3, [r7, #28]
 801b124:	edd3 7a07 	vldr	s15, [r3, #28]
 801b128:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 801b12c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b130:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_8q2 = 8.0f * q2;
 801b134:	69fb      	ldr	r3, [r7, #28]
 801b136:	edd3 7a08 	vldr	s15, [r3, #32]
 801b13a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 801b13e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b142:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		q0q0 = q0 * q0;
 801b146:	69fb      	ldr	r3, [r7, #28]
 801b148:	ed93 7a06 	vldr	s14, [r3, #24]
 801b14c:	69fb      	ldr	r3, [r7, #28]
 801b14e:	edd3 7a06 	vldr	s15, [r3, #24]
 801b152:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b156:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		q1q1 = q1 * q1;
 801b15a:	69fb      	ldr	r3, [r7, #28]
 801b15c:	ed93 7a07 	vldr	s14, [r3, #28]
 801b160:	69fb      	ldr	r3, [r7, #28]
 801b162:	edd3 7a07 	vldr	s15, [r3, #28]
 801b166:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b16a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q2q2 = q2 * q2;
 801b16e:	69fb      	ldr	r3, [r7, #28]
 801b170:	ed93 7a08 	vldr	s14, [r3, #32]
 801b174:	69fb      	ldr	r3, [r7, #28]
 801b176:	edd3 7a08 	vldr	s15, [r3, #32]
 801b17a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b17e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q3q3 = q3 * q3;
 801b182:	69fb      	ldr	r3, [r7, #28]
 801b184:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801b188:	69fb      	ldr	r3, [r7, #28]
 801b18a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801b18e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b192:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 801b196:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801b19a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801b19e:	ee27 7a27 	vmul.f32	s14, s14, s15
 801b1a2:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 801b1a6:	edd7 7a03 	vldr	s15, [r7, #12]
 801b1aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b1ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b1b2:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 801b1b6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801b1ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b1be:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b1c2:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 801b1c6:	edd7 7a02 	vldr	s15, [r7, #8]
 801b1ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b1ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b1d2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 801b1d6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801b1da:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801b1de:	ee27 7a27 	vmul.f32	s14, s14, s15
 801b1e2:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 801b1e6:	edd7 7a03 	vldr	s15, [r7, #12]
 801b1ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b1ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b1f2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801b1f6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 801b1fa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801b1fe:	69fb      	ldr	r3, [r7, #28]
 801b200:	edd3 7a07 	vldr	s15, [r3, #28]
 801b204:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b208:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b20c:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 801b210:	edd7 7a02 	vldr	s15, [r7, #8]
 801b214:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b218:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b21c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801b220:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b224:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 801b228:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801b22c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b230:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b234:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 801b238:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801b23c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b240:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b244:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 801b248:	edd7 7a01 	vldr	s15, [r7, #4]
 801b24c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b250:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b254:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 801b258:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801b25c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801b260:	ee27 7a87 	vmul.f32	s14, s15, s14
 801b264:	69fb      	ldr	r3, [r7, #28]
 801b266:	edd3 7a08 	vldr	s15, [r3, #32]
 801b26a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801b26e:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 801b272:	edd7 7a03 	vldr	s15, [r7, #12]
 801b276:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b27a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b27e:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 801b282:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801b286:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b28a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b28e:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 801b292:	edd7 7a02 	vldr	s15, [r7, #8]
 801b296:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b29a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b29e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801b2a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b2a6:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 801b2aa:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801b2ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b2b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b2b6:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 801b2ba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801b2be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b2c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b2c6:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 801b2ca:	edd7 7a01 	vldr	s15, [r7, #4]
 801b2ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b2d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b2d6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 801b2da:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801b2de:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801b2e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 801b2e6:	69fb      	ldr	r3, [r7, #28]
 801b2e8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801b2ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 801b2f0:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 801b2f4:	edd7 7a03 	vldr	s15, [r7, #12]
 801b2f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b2fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b300:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801b304:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 801b308:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801b30c:	69fb      	ldr	r3, [r7, #28]
 801b30e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801b312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b316:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b31a:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 801b31e:	edd7 7a02 	vldr	s15, [r7, #8]
 801b322:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b326:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b32a:	edc7 7a08 	vstr	s15, [r7, #32]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 801b32e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801b332:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801b336:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801b33a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801b33e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b342:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801b346:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801b34a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b34e:	edd7 7a08 	vldr	s15, [r7, #32]
 801b352:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801b356:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b35a:	eeb0 0a67 	vmov.f32	s0, s15
 801b35e:	f000 f8ed 	bl	801b53c <_ZN8Madgwick7invSqrtEf>
 801b362:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		s0 *= recipNorm;
 801b366:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801b36a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801b36e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b372:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 *= recipNorm;
 801b376:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801b37a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801b37e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b382:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 *= recipNorm;
 801b386:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801b38a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801b38e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b392:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 *= recipNorm;
 801b396:	ed97 7a08 	vldr	s14, [r7, #32]
 801b39a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801b39e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b3a2:	edc7 7a08 	vstr	s15, [r7, #32]

		// Apply feedback step
		qDot1 -= beta * s0;
 801b3a6:	69fb      	ldr	r3, [r7, #28]
 801b3a8:	ed93 7a00 	vldr	s14, [r3]
 801b3ac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801b3b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b3b4:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 801b3b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b3bc:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		qDot2 -= beta * s1;
 801b3c0:	69fb      	ldr	r3, [r7, #28]
 801b3c2:	ed93 7a00 	vldr	s14, [r3]
 801b3c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801b3ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b3ce:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 801b3d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b3d6:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		qDot3 -= beta * s2;
 801b3da:	69fb      	ldr	r3, [r7, #28]
 801b3dc:	ed93 7a00 	vldr	s14, [r3]
 801b3e0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801b3e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b3e8:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 801b3ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b3f0:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot4 -= beta * s3;
 801b3f4:	69fb      	ldr	r3, [r7, #28]
 801b3f6:	ed93 7a00 	vldr	s14, [r3]
 801b3fa:	edd7 7a08 	vldr	s15, [r7, #32]
 801b3fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b402:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 801b406:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b40a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * invSampleFreq;
 801b40e:	69fb      	ldr	r3, [r7, #28]
 801b410:	ed93 7a06 	vldr	s14, [r3, #24]
 801b414:	69fb      	ldr	r3, [r7, #28]
 801b416:	edd3 6a04 	vldr	s13, [r3, #16]
 801b41a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 801b41e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b422:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b426:	69fb      	ldr	r3, [r7, #28]
 801b428:	edc3 7a06 	vstr	s15, [r3, #24]
	q1 += qDot2 * invSampleFreq;
 801b42c:	69fb      	ldr	r3, [r7, #28]
 801b42e:	ed93 7a07 	vldr	s14, [r3, #28]
 801b432:	69fb      	ldr	r3, [r7, #28]
 801b434:	edd3 6a04 	vldr	s13, [r3, #16]
 801b438:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 801b43c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b440:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b444:	69fb      	ldr	r3, [r7, #28]
 801b446:	edc3 7a07 	vstr	s15, [r3, #28]
	q2 += qDot3 * invSampleFreq;
 801b44a:	69fb      	ldr	r3, [r7, #28]
 801b44c:	ed93 7a08 	vldr	s14, [r3, #32]
 801b450:	69fb      	ldr	r3, [r7, #28]
 801b452:	edd3 6a04 	vldr	s13, [r3, #16]
 801b456:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 801b45a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b45e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b462:	69fb      	ldr	r3, [r7, #28]
 801b464:	edc3 7a08 	vstr	s15, [r3, #32]
	q3 += qDot4 * invSampleFreq;
 801b468:	69fb      	ldr	r3, [r7, #28]
 801b46a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801b46e:	69fb      	ldr	r3, [r7, #28]
 801b470:	edd3 6a04 	vldr	s13, [r3, #16]
 801b474:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 801b478:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b47c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b480:	69fb      	ldr	r3, [r7, #28]
 801b482:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 801b486:	69fb      	ldr	r3, [r7, #28]
 801b488:	ed93 7a06 	vldr	s14, [r3, #24]
 801b48c:	69fb      	ldr	r3, [r7, #28]
 801b48e:	edd3 7a06 	vldr	s15, [r3, #24]
 801b492:	ee27 7a27 	vmul.f32	s14, s14, s15
 801b496:	69fb      	ldr	r3, [r7, #28]
 801b498:	edd3 6a07 	vldr	s13, [r3, #28]
 801b49c:	69fb      	ldr	r3, [r7, #28]
 801b49e:	edd3 7a07 	vldr	s15, [r3, #28]
 801b4a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b4a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b4aa:	69fb      	ldr	r3, [r7, #28]
 801b4ac:	edd3 6a08 	vldr	s13, [r3, #32]
 801b4b0:	69fb      	ldr	r3, [r7, #28]
 801b4b2:	edd3 7a08 	vldr	s15, [r3, #32]
 801b4b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b4ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b4be:	69fb      	ldr	r3, [r7, #28]
 801b4c0:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 801b4c4:	69fb      	ldr	r3, [r7, #28]
 801b4c6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801b4ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b4ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b4d2:	eeb0 0a67 	vmov.f32	s0, s15
 801b4d6:	f000 f831 	bl	801b53c <_ZN8Madgwick7invSqrtEf>
 801b4da:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
	q0 *= recipNorm;
 801b4de:	69fb      	ldr	r3, [r7, #28]
 801b4e0:	ed93 7a06 	vldr	s14, [r3, #24]
 801b4e4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801b4e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b4ec:	69fb      	ldr	r3, [r7, #28]
 801b4ee:	edc3 7a06 	vstr	s15, [r3, #24]
	q1 *= recipNorm;
 801b4f2:	69fb      	ldr	r3, [r7, #28]
 801b4f4:	ed93 7a07 	vldr	s14, [r3, #28]
 801b4f8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801b4fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b500:	69fb      	ldr	r3, [r7, #28]
 801b502:	edc3 7a07 	vstr	s15, [r3, #28]
	q2 *= recipNorm;
 801b506:	69fb      	ldr	r3, [r7, #28]
 801b508:	ed93 7a08 	vldr	s14, [r3, #32]
 801b50c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801b510:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b514:	69fb      	ldr	r3, [r7, #28]
 801b516:	edc3 7a08 	vstr	s15, [r3, #32]
	q3 *= recipNorm;
 801b51a:	69fb      	ldr	r3, [r7, #28]
 801b51c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801b520:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801b524:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b528:	69fb      	ldr	r3, [r7, #28]
 801b52a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	anglesComputed = 0;
 801b52e:	69fb      	ldr	r3, [r7, #28]
 801b530:	2200      	movs	r2, #0
 801b532:	751a      	strb	r2, [r3, #20]
}
 801b534:	bf00      	nop
 801b536:	3778      	adds	r7, #120	; 0x78
 801b538:	46bd      	mov	sp, r7
 801b53a:	bd80      	pop	{r7, pc}

0801b53c <_ZN8Madgwick7invSqrtEf>:

//-------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float Madgwick::invSqrt(float x) {
 801b53c:	b480      	push	{r7}
 801b53e:	b087      	sub	sp, #28
 801b540:	af00      	add	r7, sp, #0
 801b542:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 801b546:	edd7 7a01 	vldr	s15, [r7, #4]
 801b54a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801b54e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b552:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 801b556:	687b      	ldr	r3, [r7, #4]
 801b558:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 801b55a:	f107 0310 	add.w	r3, r7, #16
 801b55e:	681b      	ldr	r3, [r3, #0]
 801b560:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 801b562:	68fb      	ldr	r3, [r7, #12]
 801b564:	105a      	asrs	r2, r3, #1
 801b566:	4b1c      	ldr	r3, [pc, #112]	; (801b5d8 <_ZN8Madgwick7invSqrtEf+0x9c>)
 801b568:	1a9b      	subs	r3, r3, r2
 801b56a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 801b56c:	f107 030c 	add.w	r3, r7, #12
 801b570:	681b      	ldr	r3, [r3, #0]
 801b572:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 801b574:	ed97 7a04 	vldr	s14, [r7, #16]
 801b578:	edd7 7a05 	vldr	s15, [r7, #20]
 801b57c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801b580:	edd7 7a04 	vldr	s15, [r7, #16]
 801b584:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b588:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 801b58c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b590:	edd7 7a04 	vldr	s15, [r7, #16]
 801b594:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b598:	edc7 7a04 	vstr	s15, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 801b59c:	ed97 7a04 	vldr	s14, [r7, #16]
 801b5a0:	edd7 7a05 	vldr	s15, [r7, #20]
 801b5a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 801b5a8:	edd7 7a04 	vldr	s15, [r7, #16]
 801b5ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b5b0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 801b5b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b5b8:	edd7 7a04 	vldr	s15, [r7, #16]
 801b5bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b5c0:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 801b5c4:	693b      	ldr	r3, [r7, #16]
 801b5c6:	ee07 3a90 	vmov	s15, r3
}
 801b5ca:	eeb0 0a67 	vmov.f32	s0, s15
 801b5ce:	371c      	adds	r7, #28
 801b5d0:	46bd      	mov	sp, r7
 801b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5d6:	4770      	bx	lr
 801b5d8:	5f3759df 	.word	0x5f3759df

0801b5dc <_ZN8Madgwick13computeAnglesEv>:

//-------------------------------------------------------------------------------------------

void Madgwick::computeAngles()
{
 801b5dc:	b580      	push	{r7, lr}
 801b5de:	b082      	sub	sp, #8
 801b5e0:	af00      	add	r7, sp, #0
 801b5e2:	6078      	str	r0, [r7, #4]
	roll = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	ed93 7a06 	vldr	s14, [r3, #24]
 801b5ea:	687b      	ldr	r3, [r7, #4]
 801b5ec:	edd3 7a07 	vldr	s15, [r3, #28]
 801b5f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 801b5f4:	687b      	ldr	r3, [r7, #4]
 801b5f6:	edd3 6a08 	vldr	s13, [r3, #32]
 801b5fa:	687b      	ldr	r3, [r7, #4]
 801b5fc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801b600:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b604:	ee37 6a27 	vadd.f32	s12, s14, s15
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	ed93 7a07 	vldr	s14, [r3, #28]
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	edd3 7a07 	vldr	s15, [r3, #28]
 801b614:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b618:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801b61c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	edd3 6a08 	vldr	s13, [r3, #32]
 801b626:	687b      	ldr	r3, [r7, #4]
 801b628:	edd3 7a08 	vldr	s15, [r3, #32]
 801b62c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b630:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b634:	eef0 0a67 	vmov.f32	s1, s15
 801b638:	eeb0 0a46 	vmov.f32	s0, s12
 801b63c:	f001 ffba 	bl	801d5b4 <atan2f>
 801b640:	eef0 7a40 	vmov.f32	s15, s0
 801b644:	687b      	ldr	r3, [r7, #4]
 801b646:	edc3 7a01 	vstr	s15, [r3, #4]
	pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 801b64a:	687b      	ldr	r3, [r7, #4]
 801b64c:	ed93 7a07 	vldr	s14, [r3, #28]
 801b650:	687b      	ldr	r3, [r7, #4]
 801b652:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801b656:	ee27 7a27 	vmul.f32	s14, s14, s15
 801b65a:	687b      	ldr	r3, [r7, #4]
 801b65c:	edd3 6a06 	vldr	s13, [r3, #24]
 801b660:	687b      	ldr	r3, [r7, #4]
 801b662:	edd3 7a08 	vldr	s15, [r3, #32]
 801b666:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b66a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b66e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 801b672:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b676:	eeb0 0a67 	vmov.f32	s0, s15
 801b67a:	f001 ff6f 	bl	801d55c <asinf>
 801b67e:	eef0 7a40 	vmov.f32	s15, s0
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	edc3 7a02 	vstr	s15, [r3, #8]
	yaw = atan2f(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3);
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	ed93 7a07 	vldr	s14, [r3, #28]
 801b68e:	687b      	ldr	r3, [r7, #4]
 801b690:	edd3 7a08 	vldr	s15, [r3, #32]
 801b694:	ee27 7a27 	vmul.f32	s14, s14, s15
 801b698:	687b      	ldr	r3, [r7, #4]
 801b69a:	edd3 6a06 	vldr	s13, [r3, #24]
 801b69e:	687b      	ldr	r3, [r7, #4]
 801b6a0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801b6a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b6a8:	ee37 6a27 	vadd.f32	s12, s14, s15
 801b6ac:	687b      	ldr	r3, [r7, #4]
 801b6ae:	ed93 7a08 	vldr	s14, [r3, #32]
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	edd3 7a08 	vldr	s15, [r3, #32]
 801b6b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b6bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801b6c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801b6d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801b6d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b6d8:	eef0 0a67 	vmov.f32	s1, s15
 801b6dc:	eeb0 0a46 	vmov.f32	s0, s12
 801b6e0:	f001 ff68 	bl	801d5b4 <atan2f>
 801b6e4:	eef0 7a40 	vmov.f32	s15, s0
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	edc3 7a03 	vstr	s15, [r3, #12]
	anglesComputed = 1;
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	2201      	movs	r2, #1
 801b6f2:	751a      	strb	r2, [r3, #20]
}
 801b6f4:	bf00      	nop
 801b6f6:	3708      	adds	r7, #8
 801b6f8:	46bd      	mov	sp, r7
 801b6fa:	bd80      	pop	{r7, pc}

0801b6fc <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>:
 */


#include "core_hardware_led.h"

core_hardware_LED::core_hardware_LED(GPIO_TypeDef* GPIOx, uint16_t PINx) {
 801b6fc:	b480      	push	{r7}
 801b6fe:	b085      	sub	sp, #20
 801b700:	af00      	add	r7, sp, #0
 801b702:	60f8      	str	r0, [r7, #12]
 801b704:	60b9      	str	r1, [r7, #8]
 801b706:	4613      	mov	r3, r2
 801b708:	80fb      	strh	r3, [r7, #6]
	this->GPIOx = GPIOx;
 801b70a:	68fb      	ldr	r3, [r7, #12]
 801b70c:	68ba      	ldr	r2, [r7, #8]
 801b70e:	601a      	str	r2, [r3, #0]
	this->PINx = PINx;
 801b710:	68fb      	ldr	r3, [r7, #12]
 801b712:	88fa      	ldrh	r2, [r7, #6]
 801b714:	809a      	strh	r2, [r3, #4]
}
 801b716:	68fb      	ldr	r3, [r7, #12]
 801b718:	4618      	mov	r0, r3
 801b71a:	3714      	adds	r7, #20
 801b71c:	46bd      	mov	sp, r7
 801b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b722:	4770      	bx	lr

0801b724 <_ZN17core_hardware_LED2onEv>:

void core_hardware_LED::on() {
 801b724:	b580      	push	{r7, lr}
 801b726:	b082      	sub	sp, #8
 801b728:	af00      	add	r7, sp, #0
 801b72a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->GPIOx, this->PINx, GPIO_PIN_SET);
 801b72c:	687b      	ldr	r3, [r7, #4]
 801b72e:	6818      	ldr	r0, [r3, #0]
 801b730:	687b      	ldr	r3, [r7, #4]
 801b732:	889b      	ldrh	r3, [r3, #4]
 801b734:	2201      	movs	r2, #1
 801b736:	4619      	mov	r1, r3
 801b738:	f7e9 fc14 	bl	8004f64 <HAL_GPIO_WritePin>
}
 801b73c:	bf00      	nop
 801b73e:	3708      	adds	r7, #8
 801b740:	46bd      	mov	sp, r7
 801b742:	bd80      	pop	{r7, pc}

0801b744 <_ZN17core_hardware_LED3offEv>:


void core_hardware_LED::off() {
 801b744:	b580      	push	{r7, lr}
 801b746:	b082      	sub	sp, #8
 801b748:	af00      	add	r7, sp, #0
 801b74a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->GPIOx, this->PINx, GPIO_PIN_RESET);
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	6818      	ldr	r0, [r3, #0]
 801b750:	687b      	ldr	r3, [r7, #4]
 801b752:	889b      	ldrh	r3, [r3, #4]
 801b754:	2200      	movs	r2, #0
 801b756:	4619      	mov	r1, r3
 801b758:	f7e9 fc04 	bl	8004f64 <HAL_GPIO_WritePin>
}
 801b75c:	bf00      	nop
 801b75e:	3708      	adds	r7, #8
 801b760:	46bd      	mov	sp, r7
 801b762:	bd80      	pop	{r7, pc}

0801b764 <_ZN17core_hardware_LED6toggleEv>:

void core_hardware_LED::toggle() {
 801b764:	b580      	push	{r7, lr}
 801b766:	b082      	sub	sp, #8
 801b768:	af00      	add	r7, sp, #0
 801b76a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(this->GPIOx, this->PINx);
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	681a      	ldr	r2, [r3, #0]
 801b770:	687b      	ldr	r3, [r7, #4]
 801b772:	889b      	ldrh	r3, [r3, #4]
 801b774:	4619      	mov	r1, r3
 801b776:	4610      	mov	r0, r2
 801b778:	f7e9 fc0d 	bl	8004f96 <HAL_GPIO_TogglePin>
}
 801b77c:	bf00      	nop
 801b77e:	3708      	adds	r7, #8
 801b780:	46bd      	mov	sp, r7
 801b782:	bd80      	pop	{r7, pc}

0801b784 <_Z15spi_callback_rxP19__SPI_HandleTypeDef>:
#include "core_hardware_spi.h"

core_hardware_SPI_slave *active_spi_slave = NULL;

/* ====================================================== */
void spi_callback_rx(SPI_HandleTypeDef *hspi) {
 801b784:	b580      	push	{r7, lr}
 801b786:	b082      	sub	sp, #8
 801b788:	af00      	add	r7, sp, #0
 801b78a:	6078      	str	r0, [r7, #4]

	if (active_spi_slave != NULL) {
 801b78c:	4b06      	ldr	r3, [pc, #24]	; (801b7a8 <_Z15spi_callback_rxP19__SPI_HandleTypeDef+0x24>)
 801b78e:	681b      	ldr	r3, [r3, #0]
 801b790:	2b00      	cmp	r3, #0
 801b792:	d004      	beq.n	801b79e <_Z15spi_callback_rxP19__SPI_HandleTypeDef+0x1a>
		active_spi_slave->rx_cmplt_function();
 801b794:	4b04      	ldr	r3, [pc, #16]	; (801b7a8 <_Z15spi_callback_rxP19__SPI_HandleTypeDef+0x24>)
 801b796:	681b      	ldr	r3, [r3, #0]
 801b798:	4618      	mov	r0, r3
 801b79a:	f000 f8eb 	bl	801b974 <_ZN23core_hardware_SPI_slave17rx_cmplt_functionEv>
	}
}
 801b79e:	bf00      	nop
 801b7a0:	3708      	adds	r7, #8
 801b7a2:	46bd      	mov	sp, r7
 801b7a4:	bd80      	pop	{r7, pc}
 801b7a6:	bf00      	nop
 801b7a8:	2401dbcc 	.word	0x2401dbcc

0801b7ac <_Z15spi_callback_txP19__SPI_HandleTypeDef>:

/* ====================================================== */
void spi_callback_tx(SPI_HandleTypeDef *hspi) {
 801b7ac:	b580      	push	{r7, lr}
 801b7ae:	b082      	sub	sp, #8
 801b7b0:	af00      	add	r7, sp, #0
 801b7b2:	6078      	str	r0, [r7, #4]
	if (active_spi_slave != NULL) {
 801b7b4:	4b06      	ldr	r3, [pc, #24]	; (801b7d0 <_Z15spi_callback_txP19__SPI_HandleTypeDef+0x24>)
 801b7b6:	681b      	ldr	r3, [r3, #0]
 801b7b8:	2b00      	cmp	r3, #0
 801b7ba:	d004      	beq.n	801b7c6 <_Z15spi_callback_txP19__SPI_HandleTypeDef+0x1a>
		active_spi_slave->tx_cmplt_function();
 801b7bc:	4b04      	ldr	r3, [pc, #16]	; (801b7d0 <_Z15spi_callback_txP19__SPI_HandleTypeDef+0x24>)
 801b7be:	681b      	ldr	r3, [r3, #0]
 801b7c0:	4618      	mov	r0, r3
 801b7c2:	f000 f8e8 	bl	801b996 <_ZN23core_hardware_SPI_slave17tx_cmplt_functionEv>
	}
}
 801b7c6:	bf00      	nop
 801b7c8:	3708      	adds	r7, #8
 801b7ca:	46bd      	mov	sp, r7
 801b7cc:	bd80      	pop	{r7, pc}
 801b7ce:	bf00      	nop
 801b7d0:	2401dbcc 	.word	0x2401dbcc

0801b7d4 <_Z17spi_callback_rxtxP19__SPI_HandleTypeDef>:

/* ====================================================== */
void spi_callback_rxtx(SPI_HandleTypeDef *hspi) {
 801b7d4:	b580      	push	{r7, lr}
 801b7d6:	b082      	sub	sp, #8
 801b7d8:	af00      	add	r7, sp, #0
 801b7da:	6078      	str	r0, [r7, #4]
	if (active_spi_slave != NULL) {
 801b7dc:	4b06      	ldr	r3, [pc, #24]	; (801b7f8 <_Z17spi_callback_rxtxP19__SPI_HandleTypeDef+0x24>)
 801b7de:	681b      	ldr	r3, [r3, #0]
 801b7e0:	2b00      	cmp	r3, #0
 801b7e2:	d004      	beq.n	801b7ee <_Z17spi_callback_rxtxP19__SPI_HandleTypeDef+0x1a>
		active_spi_slave->rxtx_cmplt_function();
 801b7e4:	4b04      	ldr	r3, [pc, #16]	; (801b7f8 <_Z17spi_callback_rxtxP19__SPI_HandleTypeDef+0x24>)
 801b7e6:	681b      	ldr	r3, [r3, #0]
 801b7e8:	4618      	mov	r0, r3
 801b7ea:	f000 f8e6 	bl	801b9ba <_ZN23core_hardware_SPI_slave19rxtx_cmplt_functionEv>
	}
}
 801b7ee:	bf00      	nop
 801b7f0:	3708      	adds	r7, #8
 801b7f2:	46bd      	mov	sp, r7
 801b7f4:	bd80      	pop	{r7, pc}
 801b7f6:	bf00      	nop
 801b7f8:	2401dbcc 	.word	0x2401dbcc

0801b7fc <_ZN29core_hardware_spi_callbacks_tC1Ev>:
	SPI_HandleTypeDef *hspi;
	uint8_t *rx_buffer;
	uint8_t *tx_buffer;
} core_hardware_spi_config_t;

typedef struct core_hardware_spi_callbacks_t {
 801b7fc:	b580      	push	{r7, lr}
 801b7fe:	b082      	sub	sp, #8
 801b800:	af00      	add	r7, sp, #0
 801b802:	6078      	str	r0, [r7, #4]
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	4618      	mov	r0, r3
 801b808:	f7f7 f9bc 	bl	8012b84 <_ZN19core_utils_CallbackIvvEC1Ev>
 801b80c:	687b      	ldr	r3, [r7, #4]
 801b80e:	3320      	adds	r3, #32
 801b810:	4618      	mov	r0, r3
 801b812:	f7f7 f9b7 	bl	8012b84 <_ZN19core_utils_CallbackIvvEC1Ev>
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	3340      	adds	r3, #64	; 0x40
 801b81a:	4618      	mov	r0, r3
 801b81c:	f7f7 f9b2 	bl	8012b84 <_ZN19core_utils_CallbackIvvEC1Ev>
 801b820:	687b      	ldr	r3, [r7, #4]
 801b822:	4618      	mov	r0, r3
 801b824:	3708      	adds	r7, #8
 801b826:	46bd      	mov	sp, r7
 801b828:	bd80      	pop	{r7, pc}

0801b82a <_ZN23core_hardware_SPI_slaveC1Ev>:

/* ====================================================== */
core_hardware_SPI_slave::core_hardware_SPI_slave() {
 801b82a:	b580      	push	{r7, lr}
 801b82c:	b082      	sub	sp, #8
 801b82e:	af00      	add	r7, sp, #0
 801b830:	6078      	str	r0, [r7, #4]
 801b832:	687b      	ldr	r3, [r7, #4]
 801b834:	330c      	adds	r3, #12
 801b836:	4618      	mov	r0, r3
 801b838:	f7ff ffe0 	bl	801b7fc <_ZN29core_hardware_spi_callbacks_tC1Ev>

}
 801b83c:	687b      	ldr	r3, [r7, #4]
 801b83e:	4618      	mov	r0, r3
 801b840:	3708      	adds	r7, #8
 801b842:	46bd      	mov	sp, r7
 801b844:	bd80      	pop	{r7, pc}
	...

0801b848 <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t>:

/* ====================================================== */
void core_hardware_SPI_slave::init(core_hardware_spi_config_t config) {
 801b848:	b590      	push	{r4, r7, lr}
 801b84a:	b085      	sub	sp, #20
 801b84c:	af00      	add	r7, sp, #0
 801b84e:	60f8      	str	r0, [r7, #12]
 801b850:	4638      	mov	r0, r7
 801b852:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 801b856:	68fb      	ldr	r3, [r7, #12]
 801b858:	461c      	mov	r4, r3
 801b85a:	463b      	mov	r3, r7
 801b85c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b860:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	active_spi_slave = this;
 801b864:	4a13      	ldr	r2, [pc, #76]	; (801b8b4 <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t+0x6c>)
 801b866:	68fb      	ldr	r3, [r7, #12]
 801b868:	6013      	str	r3, [r2, #0]

	this->callbacks.rx_callback.registered = 0;
 801b86a:	68fb      	ldr	r3, [r7, #12]
 801b86c:	2200      	movs	r2, #0
 801b86e:	741a      	strb	r2, [r3, #16]
	this->callbacks.tx_callback.registered = 0;
 801b870:	68fb      	ldr	r3, [r7, #12]
 801b872:	2200      	movs	r2, #0
 801b874:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	this->callbacks.rxtx_callback.registered = 0;
 801b878:	68fb      	ldr	r3, [r7, #12]
 801b87a:	2200      	movs	r2, #0
 801b87c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	HAL_SPI_RegisterCallback(this->config.hspi, HAL_SPI_RX_COMPLETE_CB_ID,
 801b880:	68fb      	ldr	r3, [r7, #12]
 801b882:	681b      	ldr	r3, [r3, #0]
 801b884:	4a0c      	ldr	r2, [pc, #48]	; (801b8b8 <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t+0x70>)
 801b886:	2101      	movs	r1, #1
 801b888:	4618      	mov	r0, r3
 801b88a:	f7ec fbad 	bl	8007fe8 <HAL_SPI_RegisterCallback>
			spi_callback_rx);
	HAL_SPI_RegisterCallback(this->config.hspi, HAL_SPI_TX_COMPLETE_CB_ID,
 801b88e:	68fb      	ldr	r3, [r7, #12]
 801b890:	681b      	ldr	r3, [r3, #0]
 801b892:	4a0a      	ldr	r2, [pc, #40]	; (801b8bc <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t+0x74>)
 801b894:	2100      	movs	r1, #0
 801b896:	4618      	mov	r0, r3
 801b898:	f7ec fba6 	bl	8007fe8 <HAL_SPI_RegisterCallback>
			spi_callback_tx);
	HAL_SPI_RegisterCallback(this->config.hspi, HAL_SPI_TX_RX_COMPLETE_CB_ID,
 801b89c:	68fb      	ldr	r3, [r7, #12]
 801b89e:	681b      	ldr	r3, [r3, #0]
 801b8a0:	4a07      	ldr	r2, [pc, #28]	; (801b8c0 <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t+0x78>)
 801b8a2:	2102      	movs	r1, #2
 801b8a4:	4618      	mov	r0, r3
 801b8a6:	f7ec fb9f 	bl	8007fe8 <HAL_SPI_RegisterCallback>
			spi_callback_rxtx);
}
 801b8aa:	bf00      	nop
 801b8ac:	3714      	adds	r7, #20
 801b8ae:	46bd      	mov	sp, r7
 801b8b0:	bd90      	pop	{r4, r7, pc}
 801b8b2:	bf00      	nop
 801b8b4:	2401dbcc 	.word	0x2401dbcc
 801b8b8:	0801b785 	.word	0x0801b785
 801b8bc:	0801b7ad 	.word	0x0801b7ad
 801b8c0:	0801b7d5 	.word	0x0801b7d5

0801b8c4 <_ZN23core_hardware_SPI_slave5startEv>:
/* ====================================================== */
void core_hardware_SPI_slave::start() {
 801b8c4:	b480      	push	{r7}
 801b8c6:	b083      	sub	sp, #12
 801b8c8:	af00      	add	r7, sp, #0
 801b8ca:	6078      	str	r0, [r7, #4]

}
 801b8cc:	bf00      	nop
 801b8ce:	370c      	adds	r7, #12
 801b8d0:	46bd      	mov	sp, r7
 801b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8d6:	4770      	bx	lr

0801b8d8 <_ZN23core_hardware_SPI_slave11receiveDataEPht>:
/* ====================================================== */
void core_hardware_SPI_slave::receiveData(uint16_t len) {
	HAL_SPI_Receive_DMA(this->config.hspi, this->config.rx_buffer, len);
}
/* ====================================================== */
void core_hardware_SPI_slave::receiveData(uint8_t *data, uint16_t len) {
 801b8d8:	b580      	push	{r7, lr}
 801b8da:	b084      	sub	sp, #16
 801b8dc:	af00      	add	r7, sp, #0
 801b8de:	60f8      	str	r0, [r7, #12]
 801b8e0:	60b9      	str	r1, [r7, #8]
 801b8e2:	4613      	mov	r3, r2
 801b8e4:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Receive_DMA(this->config.hspi, data, len);
 801b8e6:	68fb      	ldr	r3, [r7, #12]
 801b8e8:	681b      	ldr	r3, [r3, #0]
 801b8ea:	88fa      	ldrh	r2, [r7, #6]
 801b8ec:	68b9      	ldr	r1, [r7, #8]
 801b8ee:	4618      	mov	r0, r3
 801b8f0:	f7ed f916 	bl	8008b20 <HAL_SPI_Receive_DMA>
}
 801b8f4:	bf00      	nop
 801b8f6:	3710      	adds	r7, #16
 801b8f8:	46bd      	mov	sp, r7
 801b8fa:	bd80      	pop	{r7, pc}

0801b8fc <_ZN23core_hardware_SPI_slave11provideDataEPht>:
/* ====================================================== */
void core_hardware_SPI_slave::provideData(uint16_t len) {
	HAL_SPI_Transmit_DMA(this->config.hspi, this->config.tx_buffer, len);
}
/* ====================================================== */
void core_hardware_SPI_slave::provideData(uint8_t *data, uint16_t len) {
 801b8fc:	b580      	push	{r7, lr}
 801b8fe:	b084      	sub	sp, #16
 801b900:	af00      	add	r7, sp, #0
 801b902:	60f8      	str	r0, [r7, #12]
 801b904:	60b9      	str	r1, [r7, #8]
 801b906:	4613      	mov	r3, r2
 801b908:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit_DMA(this->config.hspi, data, len);
 801b90a:	68fb      	ldr	r3, [r7, #12]
 801b90c:	681b      	ldr	r3, [r3, #0]
 801b90e:	88fa      	ldrh	r2, [r7, #6]
 801b910:	68b9      	ldr	r1, [r7, #8]
 801b912:	4618      	mov	r0, r3
 801b914:	f7ec ffb0 	bl	8008878 <HAL_SPI_Transmit_DMA>
}
 801b918:	bf00      	nop
 801b91a:	3710      	adds	r7, #16
 801b91c:	46bd      	mov	sp, r7
 801b91e:	bd80      	pop	{r7, pc}

0801b920 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE>:
	HAL_SPI_TransmitReceive_DMA(this->config.hspi, tx_buf, rx_buf, len);
}
/* ====================================================== */
void core_hardware_SPI_slave::registerCallback(
		core_hardware_spi_callback_id_t callback_id,
		core_utils_Callback<void, void> callback) {
 801b920:	b580      	push	{r7, lr}
 801b922:	b084      	sub	sp, #16
 801b924:	af00      	add	r7, sp, #0
 801b926:	60f8      	str	r0, [r7, #12]
 801b928:	460b      	mov	r3, r1
 801b92a:	607a      	str	r2, [r7, #4]
 801b92c:	72fb      	strb	r3, [r7, #11]

	switch (callback_id) {
 801b92e:	7afb      	ldrb	r3, [r7, #11]
 801b930:	2b02      	cmp	r3, #2
 801b932:	d014      	beq.n	801b95e <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x3e>
 801b934:	2b02      	cmp	r3, #2
 801b936:	dc19      	bgt.n	801b96c <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x4c>
 801b938:	2b00      	cmp	r3, #0
 801b93a:	d002      	beq.n	801b942 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x22>
 801b93c:	2b01      	cmp	r3, #1
 801b93e:	d007      	beq.n	801b950 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x30>
	case CORE_HARDWARE_SPI_CALLBACK_RXTX: {
		this->callbacks.rxtx_callback = callback;
		break;
	}
	}
}
 801b940:	e014      	b.n	801b96c <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x4c>
		this->callbacks.rx_callback = callback;
 801b942:	68fb      	ldr	r3, [r7, #12]
 801b944:	330c      	adds	r3, #12
 801b946:	6879      	ldr	r1, [r7, #4]
 801b948:	4618      	mov	r0, r3
 801b94a:	f7f6 fee3 	bl	8012714 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801b94e:	e00d      	b.n	801b96c <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x4c>
		this->callbacks.tx_callback = callback;
 801b950:	68fb      	ldr	r3, [r7, #12]
 801b952:	332c      	adds	r3, #44	; 0x2c
 801b954:	6879      	ldr	r1, [r7, #4]
 801b956:	4618      	mov	r0, r3
 801b958:	f7f6 fedc 	bl	8012714 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801b95c:	e006      	b.n	801b96c <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x4c>
		this->callbacks.rxtx_callback = callback;
 801b95e:	68fb      	ldr	r3, [r7, #12]
 801b960:	334c      	adds	r3, #76	; 0x4c
 801b962:	6879      	ldr	r1, [r7, #4]
 801b964:	4618      	mov	r0, r3
 801b966:	f7f6 fed5 	bl	8012714 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801b96a:	bf00      	nop
}
 801b96c:	bf00      	nop
 801b96e:	3710      	adds	r7, #16
 801b970:	46bd      	mov	sp, r7
 801b972:	bd80      	pop	{r7, pc}

0801b974 <_ZN23core_hardware_SPI_slave17rx_cmplt_functionEv>:

/* ====================================================== */
void core_hardware_SPI_slave::rx_cmplt_function() {
 801b974:	b580      	push	{r7, lr}
 801b976:	b082      	sub	sp, #8
 801b978:	af00      	add	r7, sp, #0
 801b97a:	6078      	str	r0, [r7, #4]
	// TODO
	if (this->callbacks.rx_callback.registered) {
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	7c1b      	ldrb	r3, [r3, #16]
 801b980:	2b00      	cmp	r3, #0
 801b982:	d004      	beq.n	801b98e <_ZN23core_hardware_SPI_slave17rx_cmplt_functionEv+0x1a>
		this->callbacks.rx_callback.call();
 801b984:	687b      	ldr	r3, [r7, #4]
 801b986:	330c      	adds	r3, #12
 801b988:	4618      	mov	r0, r3
 801b98a:	f7f6 fd43 	bl	8012414 <_ZN19core_utils_CallbackIvvE4callEv>
	}
}
 801b98e:	bf00      	nop
 801b990:	3708      	adds	r7, #8
 801b992:	46bd      	mov	sp, r7
 801b994:	bd80      	pop	{r7, pc}

0801b996 <_ZN23core_hardware_SPI_slave17tx_cmplt_functionEv>:
/* ====================================================== */
void core_hardware_SPI_slave::tx_cmplt_function() {
 801b996:	b580      	push	{r7, lr}
 801b998:	b082      	sub	sp, #8
 801b99a:	af00      	add	r7, sp, #0
 801b99c:	6078      	str	r0, [r7, #4]
	// TODO
	if (this->callbacks.tx_callback.registered) {
 801b99e:	687b      	ldr	r3, [r7, #4]
 801b9a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b9a4:	2b00      	cmp	r3, #0
 801b9a6:	d004      	beq.n	801b9b2 <_ZN23core_hardware_SPI_slave17tx_cmplt_functionEv+0x1c>
		this->callbacks.tx_callback.call();
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	332c      	adds	r3, #44	; 0x2c
 801b9ac:	4618      	mov	r0, r3
 801b9ae:	f7f6 fd31 	bl	8012414 <_ZN19core_utils_CallbackIvvE4callEv>
	}
}
 801b9b2:	bf00      	nop
 801b9b4:	3708      	adds	r7, #8
 801b9b6:	46bd      	mov	sp, r7
 801b9b8:	bd80      	pop	{r7, pc}

0801b9ba <_ZN23core_hardware_SPI_slave19rxtx_cmplt_functionEv>:
/* ====================================================== */
void core_hardware_SPI_slave::rxtx_cmplt_function() {
 801b9ba:	b580      	push	{r7, lr}
 801b9bc:	b082      	sub	sp, #8
 801b9be:	af00      	add	r7, sp, #0
 801b9c0:	6078      	str	r0, [r7, #4]
	// TODO
	if (this->callbacks.rxtx_callback.registered) {
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801b9c8:	2b00      	cmp	r3, #0
 801b9ca:	d004      	beq.n	801b9d6 <_ZN23core_hardware_SPI_slave19rxtx_cmplt_functionEv+0x1c>
		this->callbacks.rxtx_callback.call();
 801b9cc:	687b      	ldr	r3, [r7, #4]
 801b9ce:	334c      	adds	r3, #76	; 0x4c
 801b9d0:	4618      	mov	r0, r3
 801b9d2:	f7f6 fd1f 	bl	8012414 <_ZN19core_utils_CallbackIvvE4callEv>
	}
}
 801b9d6:	bf00      	nop
 801b9d8:	3708      	adds	r7, #8
 801b9da:	46bd      	mov	sp, r7
 801b9dc:	bd80      	pop	{r7, pc}
	...

0801b9e0 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft>:
		CORE_HARDWARE_UART_MODE_DMA, .cobs_encode_rx = 1, .cobs_encode_tx = 1,
		.queues = 1, };


/* ============================================================================= */
void uartRxCmpltDMA_callback(UART_HandleTypeDef *huart, uint16_t size) {
 801b9e0:	b580      	push	{r7, lr}
 801b9e2:	b084      	sub	sp, #16
 801b9e4:	af00      	add	r7, sp, #0
 801b9e6:	6078      	str	r0, [r7, #4]
 801b9e8:	460b      	mov	r3, r1
 801b9ea:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < num_uarts; i++) {
 801b9ec:	2300      	movs	r3, #0
 801b9ee:	60fb      	str	r3, [r7, #12]
 801b9f0:	4b1b      	ldr	r3, [pc, #108]	; (801ba60 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x80>)
 801b9f2:	781b      	ldrb	r3, [r3, #0]
 801b9f4:	461a      	mov	r2, r3
 801b9f6:	68fb      	ldr	r3, [r7, #12]
 801b9f8:	4293      	cmp	r3, r2
 801b9fa:	da2c      	bge.n	801ba56 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x76>
		if (!(uarts[i] == NULL) && (uarts[i]->get_huart() == huart)) {
 801b9fc:	4a19      	ldr	r2, [pc, #100]	; (801ba64 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x84>)
 801b9fe:	68fb      	ldr	r3, [r7, #12]
 801ba00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ba04:	2b00      	cmp	r3, #0
 801ba06:	d012      	beq.n	801ba2e <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x4e>
 801ba08:	4a16      	ldr	r2, [pc, #88]	; (801ba64 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x84>)
 801ba0a:	68fb      	ldr	r3, [r7, #12]
 801ba0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801ba10:	4914      	ldr	r1, [pc, #80]	; (801ba64 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x84>)
 801ba12:	68fb      	ldr	r3, [r7, #12]
 801ba14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801ba18:	681b      	ldr	r3, [r3, #0]
 801ba1a:	3304      	adds	r3, #4
 801ba1c:	681b      	ldr	r3, [r3, #0]
 801ba1e:	4610      	mov	r0, r2
 801ba20:	4798      	blx	r3
 801ba22:	4602      	mov	r2, r0
 801ba24:	687b      	ldr	r3, [r7, #4]
 801ba26:	4293      	cmp	r3, r2
 801ba28:	d101      	bne.n	801ba2e <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x4e>
 801ba2a:	2301      	movs	r3, #1
 801ba2c:	e000      	b.n	801ba30 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x50>
 801ba2e:	2300      	movs	r3, #0
 801ba30:	2b00      	cmp	r3, #0
 801ba32:	d00c      	beq.n	801ba4e <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x6e>
			uarts[i]->rxFunction(size);
 801ba34:	4a0b      	ldr	r2, [pc, #44]	; (801ba64 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x84>)
 801ba36:	68fb      	ldr	r3, [r7, #12]
 801ba38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801ba3c:	4909      	ldr	r1, [pc, #36]	; (801ba64 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x84>)
 801ba3e:	68fb      	ldr	r3, [r7, #12]
 801ba40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801ba44:	681b      	ldr	r3, [r3, #0]
 801ba46:	681b      	ldr	r3, [r3, #0]
 801ba48:	8879      	ldrh	r1, [r7, #2]
 801ba4a:	4610      	mov	r0, r2
 801ba4c:	4798      	blx	r3
	for (int i = 0; i < num_uarts; i++) {
 801ba4e:	68fb      	ldr	r3, [r7, #12]
 801ba50:	3301      	adds	r3, #1
 801ba52:	60fb      	str	r3, [r7, #12]
 801ba54:	e7cc      	b.n	801b9f0 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x10>
		}
	}
}
 801ba56:	bf00      	nop
 801ba58:	3710      	adds	r7, #16
 801ba5a:	46bd      	mov	sp, r7
 801ba5c:	bd80      	pop	{r7, pc}
 801ba5e:	bf00      	nop
 801ba60:	2401dbe4 	.word	0x2401dbe4
 801ba64:	2401dbd0 	.word	0x2401dbd0

0801ba68 <_ZN23simplexmotion_callbacksC1Ev>:

typedef enum simplexmotion_callback_id {
	SIMPLEXMOTION_CB_ERROR = 0,
} simplexmotion_callback_id;

typedef struct simplexmotion_callbacks {
 801ba68:	b580      	push	{r7, lr}
 801ba6a:	b082      	sub	sp, #8
 801ba6c:	af00      	add	r7, sp, #0
 801ba6e:	6078      	str	r0, [r7, #4]
 801ba70:	687b      	ldr	r3, [r7, #4]
 801ba72:	4618      	mov	r0, r3
 801ba74:	f7f7 f886 	bl	8012b84 <_ZN19core_utils_CallbackIvvEC1Ev>
 801ba78:	687b      	ldr	r3, [r7, #4]
 801ba7a:	4618      	mov	r0, r3
 801ba7c:	3708      	adds	r7, #8
 801ba7e:	46bd      	mov	sp, r7
 801ba80:	bd80      	pop	{r7, pc}

0801ba82 <_ZN18SimplexMotionMotorC1Ev>:
 *      Author: lehmann_workstation
 */

#include "simplexmotion.hpp"

SimplexMotionMotor::SimplexMotionMotor() {
 801ba82:	b580      	push	{r7, lr}
 801ba84:	b082      	sub	sp, #8
 801ba86:	af00      	add	r7, sp, #0
 801ba88:	6078      	str	r0, [r7, #4]
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	3304      	adds	r3, #4
 801ba8e:	4618      	mov	r0, r3
 801ba90:	f7ff ffea 	bl	801ba68 <_ZN23simplexmotion_callbacksC1Ev>
 801ba94:	687b      	ldr	r3, [r7, #4]
 801ba96:	f04f 0200 	mov.w	r2, #0
 801ba9a:	649a      	str	r2, [r3, #72]	; 0x48
 801ba9c:	687b      	ldr	r3, [r7, #4]
 801ba9e:	2200      	movs	r2, #0
 801baa0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 801baa4:	687b      	ldr	r3, [r7, #4]
 801baa6:	2200      	movs	r2, #0
 801baa8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	2200      	movs	r2, #0
 801bab0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

}
 801bab4:	687b      	ldr	r3, [r7, #4]
 801bab6:	4618      	mov	r0, r3
 801bab8:	3708      	adds	r7, #8
 801baba:	46bd      	mov	sp, r7
 801babc:	bd80      	pop	{r7, pc}

0801babe <_ZN18SimplexMotionMotor14writeRegistersEttPt>:

// ==============================================================
uint8_t SimplexMotionMotor::writeRegisters(uint16_t address,
		uint16_t num_registers, uint16_t *data) {
 801babe:	b580      	push	{r7, lr}
 801bac0:	b08e      	sub	sp, #56	; 0x38
 801bac2:	af02      	add	r7, sp, #8
 801bac4:	60f8      	str	r0, [r7, #12]
 801bac6:	607b      	str	r3, [r7, #4]
 801bac8:	460b      	mov	r3, r1
 801baca:	817b      	strh	r3, [r7, #10]
 801bacc:	4613      	mov	r3, r2
 801bace:	813b      	strh	r3, [r7, #8]

	int32_t u32NotificationValue;
	modbus_query_t telegram;

	telegram.u8id = this->_config.id;
 801bad0:	68fb      	ldr	r3, [r7, #12]
 801bad2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801bad6:	753b      	strb	r3, [r7, #20]

	if (num_registers > 1) {
 801bad8:	893b      	ldrh	r3, [r7, #8]
 801bada:	2b01      	cmp	r3, #1
 801badc:	d902      	bls.n	801bae4 <_ZN18SimplexMotionMotor14writeRegistersEttPt+0x26>
		telegram.u8fct = MB_FC_WRITE_MULTIPLE_REGISTERS;
 801bade:	2310      	movs	r3, #16
 801bae0:	757b      	strb	r3, [r7, #21]
 801bae2:	e001      	b.n	801bae8 <_ZN18SimplexMotionMotor14writeRegistersEttPt+0x2a>
	} else {
		telegram.u8fct = MB_FC_WRITE_REGISTER;
 801bae4:	2306      	movs	r3, #6
 801bae6:	757b      	strb	r3, [r7, #21]
	}
	telegram.u16RegAdd = address; //read temp of motor = 101
 801bae8:	897b      	ldrh	r3, [r7, #10]
 801baea:	82fb      	strh	r3, [r7, #22]
	telegram.u16CoilsNo = num_registers;
 801baec:	893b      	ldrh	r3, [r7, #8]
 801baee:	833b      	strh	r3, [r7, #24]
	telegram.u16reg = data;
 801baf0:	687b      	ldr	r3, [r7, #4]
 801baf2:	61fb      	str	r3, [r7, #28]

	this->_config.modbus->query(telegram);
 801baf4:	68fb      	ldr	r3, [r7, #12]
 801baf6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 801baf8:	6a3b      	ldr	r3, [r7, #32]
 801bafa:	9300      	str	r3, [sp, #0]
 801bafc:	f107 0314 	add.w	r3, r7, #20
 801bb00:	cb0e      	ldmia	r3, {r1, r2, r3}
 801bb02:	f7fe f9d3 	bl	8019eac <_ZN12ModbusMaster5queryE14modbus_query_t>
//	u32NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // block until query finished
	uint32_t ticks1 = osKernelGetTickCount();
 801bb06:	f7f2 fa19 	bl	800df3c <osKernelGetTickCount>
 801bb0a:	62f8      	str	r0, [r7, #44]	; 0x2c
	u32NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // block until query finished
 801bb0c:	f04f 31ff 	mov.w	r1, #4294967295
 801bb10:	2001      	movs	r0, #1
 801bb12:	f7f4 ffcb 	bl	8010aac <ulTaskNotifyTake>
 801bb16:	4603      	mov	r3, r0
 801bb18:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ticks2 = osKernelGetTickCount();
 801bb1a:	f7f2 fa0f 	bl	800df3c <osKernelGetTickCount>
 801bb1e:	6278      	str	r0, [r7, #36]	; 0x24

	if (u32NotificationValue != ERR_OK_QUERY) {
 801bb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb22:	f113 0f0b 	cmn.w	r3, #11
 801bb26:	d006      	beq.n	801bb36 <_ZN18SimplexMotionMotor14writeRegistersEttPt+0x78>
		this->error_handler(SIMPLEXMOTION_ERROR_EXTERNAL_CONNECTION);
 801bb28:	f248 0101 	movw	r1, #32769	; 0x8001
 801bb2c:	68f8      	ldr	r0, [r7, #12]
 801bb2e:	f000 fb16 	bl	801c15e <_ZN18SimplexMotionMotor13error_handlerE19simplexmotion_error>
		return 0;
 801bb32:	2300      	movs	r3, #0
 801bb34:	e000      	b.n	801bb38 <_ZN18SimplexMotionMotor14writeRegistersEttPt+0x7a>
	} else {
		return 1;
 801bb36:	2301      	movs	r3, #1
	}
}
 801bb38:	4618      	mov	r0, r3
 801bb3a:	3730      	adds	r7, #48	; 0x30
 801bb3c:	46bd      	mov	sp, r7
 801bb3e:	bd80      	pop	{r7, pc}

0801bb40 <_ZN18SimplexMotionMotor13readRegistersEttPt>:

// ==============================================================
uint8_t SimplexMotionMotor::readRegisters(uint16_t address,
		uint16_t num_registers, uint16_t *data) {
 801bb40:	b580      	push	{r7, lr}
 801bb42:	b08c      	sub	sp, #48	; 0x30
 801bb44:	af02      	add	r7, sp, #8
 801bb46:	60f8      	str	r0, [r7, #12]
 801bb48:	607b      	str	r3, [r7, #4]
 801bb4a:	460b      	mov	r3, r1
 801bb4c:	817b      	strh	r3, [r7, #10]
 801bb4e:	4613      	mov	r3, r2
 801bb50:	813b      	strh	r3, [r7, #8]
	int32_t u32NotificationValue;
	modbus_query_t telegram;

	telegram.u8id = this->_config.id;
 801bb52:	68fb      	ldr	r3, [r7, #12]
 801bb54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801bb58:	753b      	strb	r3, [r7, #20]
	telegram.u8fct = MB_FC_READ_REGISTERS;
 801bb5a:	2303      	movs	r3, #3
 801bb5c:	757b      	strb	r3, [r7, #21]
	telegram.u16RegAdd = address; //read temp of motor = 101
 801bb5e:	897b      	ldrh	r3, [r7, #10]
 801bb60:	82fb      	strh	r3, [r7, #22]
	telegram.u16CoilsNo = num_registers;
 801bb62:	893b      	ldrh	r3, [r7, #8]
 801bb64:	833b      	strh	r3, [r7, #24]
	telegram.u16reg = data;
 801bb66:	687b      	ldr	r3, [r7, #4]
 801bb68:	61fb      	str	r3, [r7, #28]

	this->_config.modbus->query(telegram);
 801bb6a:	68fb      	ldr	r3, [r7, #12]
 801bb6c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 801bb6e:	6a3b      	ldr	r3, [r7, #32]
 801bb70:	9300      	str	r3, [sp, #0]
 801bb72:	f107 0314 	add.w	r3, r7, #20
 801bb76:	cb0e      	ldmia	r3, {r1, r2, r3}
 801bb78:	f7fe f998 	bl	8019eac <_ZN12ModbusMaster5queryE14modbus_query_t>
	u32NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // block until query finished
 801bb7c:	f04f 31ff 	mov.w	r1, #4294967295
 801bb80:	2001      	movs	r0, #1
 801bb82:	f7f4 ff93 	bl	8010aac <ulTaskNotifyTake>
 801bb86:	4603      	mov	r3, r0
 801bb88:	627b      	str	r3, [r7, #36]	; 0x24
	if (u32NotificationValue != ERR_OK_QUERY) {
 801bb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb8c:	f113 0f0b 	cmn.w	r3, #11
 801bb90:	d006      	beq.n	801bba0 <_ZN18SimplexMotionMotor13readRegistersEttPt+0x60>
		this->error_handler(SIMPLEXMOTION_ERROR_EXTERNAL_CONNECTION);
 801bb92:	f248 0101 	movw	r1, #32769	; 0x8001
 801bb96:	68f8      	ldr	r0, [r7, #12]
 801bb98:	f000 fae1 	bl	801c15e <_ZN18SimplexMotionMotor13error_handlerE19simplexmotion_error>
		return 0;
 801bb9c:	2300      	movs	r3, #0
 801bb9e:	e000      	b.n	801bba2 <_ZN18SimplexMotionMotor13readRegistersEttPt+0x62>
	} else {
		return 1;
 801bba0:	2301      	movs	r3, #1
	}
}
 801bba2:	4618      	mov	r0, r3
 801bba4:	3728      	adds	r7, #40	; 0x28
 801bba6:	46bd      	mov	sp, r7
 801bba8:	bd80      	pop	{r7, pc}

0801bbaa <_ZN18SimplexMotionMotor4initE22simplexmotion_config_t>:

// ==============================================================
uint8_t SimplexMotionMotor::init(simplexmotion_config_t config) {
 801bbaa:	b580      	push	{r7, lr}
 801bbac:	b088      	sub	sp, #32
 801bbae:	af00      	add	r7, sp, #0
 801bbb0:	60f8      	str	r0, [r7, #12]
 801bbb2:	1d3b      	adds	r3, r7, #4
 801bbb4:	e883 0006 	stmia.w	r3, {r1, r2}

	this->_config = config;
 801bbb8:	68fb      	ldr	r3, [r7, #12]
 801bbba:	3350      	adds	r3, #80	; 0x50
 801bbbc:	1d3a      	adds	r2, r7, #4
 801bbbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bbc2:	e883 0003 	stmia.w	r3, {r0, r1}

	this->_checked = 0;
 801bbc6:	68fb      	ldr	r3, [r7, #12]
 801bbc8:	2200      	movs	r2, #0
 801bbca:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	this->_init = 0;
 801bbce:	68fb      	ldr	r3, [r7, #12]
 801bbd0:	2200      	movs	r2, #0
 801bbd2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	uint8_t ret = 0;
 801bbd6:	2300      	movs	r3, #0
 801bbd8:	77fb      	strb	r3, [r7, #31]

	// Reset the motor
	ret = this->setMode(SIMPLEXMOTION_MODE_RESET);
 801bbda:	2101      	movs	r1, #1
 801bbdc:	68f8      	ldr	r0, [r7, #12]
 801bbde:	f000 f8b7 	bl	801bd50 <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t>
 801bbe2:	4603      	mov	r3, r0
 801bbe4:	77fb      	strb	r3, [r7, #31]

	// Read the motor status
	simplexmotion_status_t status;
	ret = this->getStatus(&status);
 801bbe6:	f107 0314 	add.w	r3, r7, #20
 801bbea:	4619      	mov	r1, r3
 801bbec:	68f8      	ldr	r0, [r7, #12]
 801bbee:	f000 fa5a 	bl	801c0a6 <_ZN18SimplexMotionMotor9getStatusEP22simplexmotion_status_t>
 801bbf2:	4603      	mov	r3, r0
 801bbf4:	77fb      	strb	r3, [r7, #31]

	if (not (ret)) {
 801bbf6:	7ffb      	ldrb	r3, [r7, #31]
 801bbf8:	2b00      	cmp	r3, #0
 801bbfa:	d101      	bne.n	801bc00 <_ZN18SimplexMotionMotor4initE22simplexmotion_config_t+0x56>
		return 0;
 801bbfc:	2300      	movs	r3, #0
 801bbfe:	e008      	b.n	801bc12 <_ZN18SimplexMotionMotor4initE22simplexmotion_config_t+0x68>
	// Read the torque limit
//	float torque_limit = this->getTorqueLimit();

	// Read the ...

	this->_init = 1;
 801bc00:	68fb      	ldr	r3, [r7, #12]
 801bc02:	2201      	movs	r2, #1
 801bc04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	this->_checked = 0;
 801bc08:	68fb      	ldr	r3, [r7, #12]
 801bc0a:	2200      	movs	r2, #0
 801bc0c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	return 1;
 801bc10:	2301      	movs	r3, #1
}
 801bc12:	4618      	mov	r0, r3
 801bc14:	3720      	adds	r7, #32
 801bc16:	46bd      	mov	sp, r7
 801bc18:	bd80      	pop	{r7, pc}

0801bc1a <_ZN18SimplexMotionMotor5startE20simplexmotion_mode_t>:

// ==============================================================
void SimplexMotionMotor::start(simplexmotion_mode_t mode) {
 801bc1a:	b580      	push	{r7, lr}
 801bc1c:	b084      	sub	sp, #16
 801bc1e:	af00      	add	r7, sp, #0
 801bc20:	6078      	str	r0, [r7, #4]
 801bc22:	460b      	mov	r3, r1
 801bc24:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0;
 801bc26:	2300      	movs	r3, #0
 801bc28:	73fb      	strb	r3, [r7, #15]
	if (!this->_init) {
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	d100      	bne.n	801bc36 <_ZN18SimplexMotionMotor5startE20simplexmotion_mode_t+0x1c>
		while (1) {
 801bc34:	e7fe      	b.n	801bc34 <_ZN18SimplexMotionMotor5startE20simplexmotion_mode_t+0x1a>
//
//		}
	}

	// Set the target to 0
	ret = this->setTarget(0);
 801bc36:	2100      	movs	r1, #0
 801bc38:	6878      	ldr	r0, [r7, #4]
 801bc3a:	f000 fa15 	bl	801c068 <_ZN18SimplexMotionMotor9setTargetEl>
 801bc3e:	4603      	mov	r3, r0
 801bc40:	73fb      	strb	r3, [r7, #15]
	if (not (ret)) {
 801bc42:	7bfb      	ldrb	r3, [r7, #15]
 801bc44:	2b00      	cmp	r3, #0
 801bc46:	d104      	bne.n	801bc52 <_ZN18SimplexMotionMotor5startE20simplexmotion_mode_t+0x38>
		this->error_handler(SIMPLEXMOTION_ERROR_EXTERNAL_CONNECTION);
 801bc48:	f248 0101 	movw	r1, #32769	; 0x8001
 801bc4c:	6878      	ldr	r0, [r7, #4]
 801bc4e:	f000 fa86 	bl	801c15e <_ZN18SimplexMotionMotor13error_handlerE19simplexmotion_error>
	}

	// Set the corresponding mode
	ret = this->setMode(mode);
 801bc52:	78fb      	ldrb	r3, [r7, #3]
 801bc54:	4619      	mov	r1, r3
 801bc56:	6878      	ldr	r0, [r7, #4]
 801bc58:	f000 f87a 	bl	801bd50 <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t>
 801bc5c:	4603      	mov	r3, r0
 801bc5e:	73fb      	strb	r3, [r7, #15]
	if (not (ret)) {
 801bc60:	7bfb      	ldrb	r3, [r7, #15]
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	d104      	bne.n	801bc70 <_ZN18SimplexMotionMotor5startE20simplexmotion_mode_t+0x56>
		this->error_handler(SIMPLEXMOTION_ERROR_EXTERNAL_CONNECTION);
 801bc66:	f248 0101 	movw	r1, #32769	; 0x8001
 801bc6a:	6878      	ldr	r0, [r7, #4]
 801bc6c:	f000 fa77 	bl	801c15e <_ZN18SimplexMotionMotor13error_handlerE19simplexmotion_error>
	}
}
 801bc70:	bf00      	nop
 801bc72:	3710      	adds	r7, #16
 801bc74:	46bd      	mov	sp, r7
 801bc76:	bd80      	pop	{r7, pc}

0801bc78 <_ZN18SimplexMotionMotor13startup_checkEv>:

// ==============================================================

uint8_t SimplexMotionMotor::startup_check() {
 801bc78:	b580      	push	{r7, lr}
 801bc7a:	b086      	sub	sp, #24
 801bc7c:	af00      	add	r7, sp, #0
 801bc7e:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 801bc80:	2300      	movs	r3, #0
 801bc82:	75fb      	strb	r3, [r7, #23]

	// Beep the motor once
	ret = this->beep(200);
 801bc84:	21c8      	movs	r1, #200	; 0xc8
 801bc86:	6878      	ldr	r0, [r7, #4]
 801bc88:	f000 f8b1 	bl	801bdee <_ZN18SimplexMotionMotor4beepEt>
 801bc8c:	4603      	mov	r3, r0
 801bc8e:	75fb      	strb	r3, [r7, #23]
	if (not (ret)) {
 801bc90:	7dfb      	ldrb	r3, [r7, #23]
 801bc92:	2b00      	cmp	r3, #0
 801bc94:	d101      	bne.n	801bc9a <_ZN18SimplexMotionMotor13startup_checkEv+0x22>
		return 0;
 801bc96:	2300      	movs	r3, #0
 801bc98:	e052      	b.n	801bd40 <_ZN18SimplexMotionMotor13startup_checkEv+0xc8>
	}

	osDelay(250);
 801bc9a:	20fa      	movs	r0, #250	; 0xfa
 801bc9c:	f7f2 fa00 	bl	800e0a0 <osDelay>

	ret = this->stop();
 801bca0:	6878      	ldr	r0, [r7, #4]
 801bca2:	f000 f88d 	bl	801bdc0 <_ZN18SimplexMotionMotor4stopEv>
 801bca6:	4603      	mov	r3, r0
 801bca8:	75fb      	strb	r3, [r7, #23]
	if (not (ret)) {
 801bcaa:	7dfb      	ldrb	r3, [r7, #23]
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	d101      	bne.n	801bcb4 <_ZN18SimplexMotionMotor13startup_checkEv+0x3c>
		return 0;
 801bcb0:	2300      	movs	r3, #0
 801bcb2:	e045      	b.n	801bd40 <_ZN18SimplexMotionMotor13startup_checkEv+0xc8>
	}
	// Set the motor into torque mode
	ret = this->setMode(SIMPLEXMOTION_MODE_TORQUE);
 801bcb4:	2128      	movs	r1, #40	; 0x28
 801bcb6:	6878      	ldr	r0, [r7, #4]
 801bcb8:	f000 f84a 	bl	801bd50 <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t>
 801bcbc:	4603      	mov	r3, r0
 801bcbe:	75fb      	strb	r3, [r7, #23]

	if (not (ret)) {
 801bcc0:	7dfb      	ldrb	r3, [r7, #23]
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d101      	bne.n	801bcca <_ZN18SimplexMotionMotor13startup_checkEv+0x52>
		return 0;
 801bcc6:	2300      	movs	r3, #0
 801bcc8:	e03a      	b.n	801bd40 <_ZN18SimplexMotionMotor13startup_checkEv+0xc8>
	}

	// Read the current position of the motor
	int32_t position_before = this->getPositionRaw();
 801bcca:	6878      	ldr	r0, [r7, #4]
 801bccc:	f000 f8a9 	bl	801be22 <_ZN18SimplexMotionMotor14getPositionRawEv>
 801bcd0:	6138      	str	r0, [r7, #16]

	// Apply a small torque for a short amount of time
	this->setTorque(0.03);
 801bcd2:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 801bd48 <_ZN18SimplexMotionMotor13startup_checkEv+0xd0>
 801bcd6:	6878      	ldr	r0, [r7, #4]
 801bcd8:	f000 f98a 	bl	801bff0 <_ZN18SimplexMotionMotor9setTorqueEf>
	osDelay(250);
 801bcdc:	20fa      	movs	r0, #250	; 0xfa
 801bcde:	f7f2 f9df 	bl	800e0a0 <osDelay>
	this->setTorque(0.0);
 801bce2:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 801bd4c <_ZN18SimplexMotionMotor13startup_checkEv+0xd4>
 801bce6:	6878      	ldr	r0, [r7, #4]
 801bce8:	f000 f982 	bl	801bff0 <_ZN18SimplexMotionMotor9setTorqueEf>
	osDelay(250);
 801bcec:	20fa      	movs	r0, #250	; 0xfa
 801bcee:	f7f2 f9d7 	bl	800e0a0 <osDelay>
	// Turn the motor off
//	this->stop();

	// Read the current position of the motor
	int32_t position_after = this->getPositionRaw();
 801bcf2:	6878      	ldr	r0, [r7, #4]
 801bcf4:	f000 f895 	bl	801be22 <_ZN18SimplexMotionMotor14getPositionRawEv>
 801bcf8:	60f8      	str	r0, [r7, #12]

	// Check if the position has changed
	if (position_before == position_after) {
 801bcfa:	693a      	ldr	r2, [r7, #16]
 801bcfc:	68fb      	ldr	r3, [r7, #12]
 801bcfe:	429a      	cmp	r2, r3
 801bd00:	d101      	bne.n	801bd06 <_ZN18SimplexMotionMotor13startup_checkEv+0x8e>
		return 0;
 801bd02:	2300      	movs	r3, #0
 801bd04:	e01c      	b.n	801bd40 <_ZN18SimplexMotionMotor13startup_checkEv+0xc8>
	}

	this->beep(200);
 801bd06:	21c8      	movs	r1, #200	; 0xc8
 801bd08:	6878      	ldr	r0, [r7, #4]
 801bd0a:	f000 f870 	bl	801bdee <_ZN18SimplexMotionMotor4beepEt>
	osDelay(150);
 801bd0e:	2096      	movs	r0, #150	; 0x96
 801bd10:	f7f2 f9c6 	bl	800e0a0 <osDelay>
	this->stop();
 801bd14:	6878      	ldr	r0, [r7, #4]
 801bd16:	f000 f853 	bl	801bdc0 <_ZN18SimplexMotionMotor4stopEv>
	osDelay(150);
 801bd1a:	2096      	movs	r0, #150	; 0x96
 801bd1c:	f7f2 f9c0 	bl	800e0a0 <osDelay>
	this->beep(200);
 801bd20:	21c8      	movs	r1, #200	; 0xc8
 801bd22:	6878      	ldr	r0, [r7, #4]
 801bd24:	f000 f863 	bl	801bdee <_ZN18SimplexMotionMotor4beepEt>
	osDelay(300);
 801bd28:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801bd2c:	f7f2 f9b8 	bl	800e0a0 <osDelay>
	this->stop();
 801bd30:	6878      	ldr	r0, [r7, #4]
 801bd32:	f000 f845 	bl	801bdc0 <_ZN18SimplexMotionMotor4stopEv>

	this->_checked = 1;
 801bd36:	687b      	ldr	r3, [r7, #4]
 801bd38:	2201      	movs	r2, #1
 801bd3a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	return 1;
 801bd3e:	2301      	movs	r3, #1
}
 801bd40:	4618      	mov	r0, r3
 801bd42:	3718      	adds	r7, #24
 801bd44:	46bd      	mov	sp, r7
 801bd46:	bd80      	pop	{r7, pc}
 801bd48:	3cf5c28f 	.word	0x3cf5c28f
 801bd4c:	00000000 	.word	0x00000000

0801bd50 <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t>:
uint8_t SimplexMotionMotor::check() {

	return 1;
}
// ==============================================================
uint8_t SimplexMotionMotor::setMode(simplexmotion_mode_t mode) {
 801bd50:	b580      	push	{r7, lr}
 801bd52:	b084      	sub	sp, #16
 801bd54:	af00      	add	r7, sp, #0
 801bd56:	6078      	str	r0, [r7, #4]
 801bd58:	460b      	mov	r3, r1
 801bd5a:	70fb      	strb	r3, [r7, #3]
	uint16_t data = (uint16_t) mode;
 801bd5c:	78fb      	ldrb	r3, [r7, #3]
 801bd5e:	b29b      	uxth	r3, r3
 801bd60:	81bb      	strh	r3, [r7, #12]

	// Set the mode
	uint8_t write_success = this->writeRegisters(SIMPLEXMOTION_REG_MODE, 1,
 801bd62:	f107 030c 	add.w	r3, r7, #12
 801bd66:	2201      	movs	r2, #1
 801bd68:	f240 118f 	movw	r1, #399	; 0x18f
 801bd6c:	6878      	ldr	r0, [r7, #4]
 801bd6e:	f7ff fea6 	bl	801babe <_ZN18SimplexMotionMotor14writeRegistersEttPt>
 801bd72:	4603      	mov	r3, r0
 801bd74:	73fb      	strb	r3, [r7, #15]
			&data);
	if (not write_success) {
 801bd76:	7bfb      	ldrb	r3, [r7, #15]
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	d101      	bne.n	801bd80 <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t+0x30>
		return 0;
 801bd7c:	2300      	movs	r3, #0
 801bd7e:	e01b      	b.n	801bdb8 <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t+0x68>
	}

	// Read back the mode
	uint16_t rx_data = 0;
 801bd80:	2300      	movs	r3, #0
 801bd82:	817b      	strh	r3, [r7, #10]
	uint8_t read_success = this->readRegisters(SIMPLEXMOTION_REG_MODE, 1,
 801bd84:	f107 030a 	add.w	r3, r7, #10
 801bd88:	2201      	movs	r2, #1
 801bd8a:	f240 118f 	movw	r1, #399	; 0x18f
 801bd8e:	6878      	ldr	r0, [r7, #4]
 801bd90:	f7ff fed6 	bl	801bb40 <_ZN18SimplexMotionMotor13readRegistersEttPt>
 801bd94:	4603      	mov	r3, r0
 801bd96:	73bb      	strb	r3, [r7, #14]
			&rx_data);

	if (not read_success) {
 801bd98:	7bbb      	ldrb	r3, [r7, #14]
 801bd9a:	2b00      	cmp	r3, #0
 801bd9c:	d101      	bne.n	801bda2 <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t+0x52>
		return 0;
 801bd9e:	2300      	movs	r3, #0
 801bda0:	e00a      	b.n	801bdb8 <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t+0x68>
	}

	this->mode = rx_data;
 801bda2:	897a      	ldrh	r2, [r7, #10]
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	801a      	strh	r2, [r3, #0]

	if (rx_data != mode) {
 801bda8:	78fb      	ldrb	r3, [r7, #3]
 801bdaa:	b29a      	uxth	r2, r3
 801bdac:	897b      	ldrh	r3, [r7, #10]
 801bdae:	429a      	cmp	r2, r3
 801bdb0:	d001      	beq.n	801bdb6 <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t+0x66>
		return 0;
 801bdb2:	2300      	movs	r3, #0
 801bdb4:	e000      	b.n	801bdb8 <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t+0x68>
	}
	return 1;
 801bdb6:	2301      	movs	r3, #1
}
 801bdb8:	4618      	mov	r0, r3
 801bdba:	3710      	adds	r7, #16
 801bdbc:	46bd      	mov	sp, r7
 801bdbe:	bd80      	pop	{r7, pc}

0801bdc0 <_ZN18SimplexMotionMotor4stopEv>:

// ==============================================================
uint8_t SimplexMotionMotor::stop() {
 801bdc0:	b580      	push	{r7, lr}
 801bdc2:	b084      	sub	sp, #16
 801bdc4:	af00      	add	r7, sp, #0
 801bdc6:	6078      	str	r0, [r7, #4]
//	uint16_t data = SIMPLEXMOTION_MODE_QUICKSTOP;
	uint16_t data = SIMPLEXMOTION_MODE_OFF;
 801bdc8:	2300      	movs	r3, #0
 801bdca:	81fb      	strh	r3, [r7, #14]
	this->setTarget(0);
 801bdcc:	2100      	movs	r1, #0
 801bdce:	6878      	ldr	r0, [r7, #4]
 801bdd0:	f000 f94a 	bl	801c068 <_ZN18SimplexMotionMotor9setTargetEl>
	return this->writeRegisters(SIMPLEXMOTION_REG_MODE, 1, &data);
 801bdd4:	f107 030e 	add.w	r3, r7, #14
 801bdd8:	2201      	movs	r2, #1
 801bdda:	f240 118f 	movw	r1, #399	; 0x18f
 801bdde:	6878      	ldr	r0, [r7, #4]
 801bde0:	f7ff fe6d 	bl	801babe <_ZN18SimplexMotionMotor14writeRegistersEttPt>
 801bde4:	4603      	mov	r3, r0
}
 801bde6:	4618      	mov	r0, r3
 801bde8:	3710      	adds	r7, #16
 801bdea:	46bd      	mov	sp, r7
 801bdec:	bd80      	pop	{r7, pc}

0801bdee <_ZN18SimplexMotionMotor4beepEt>:

// ==============================================================
uint8_t SimplexMotionMotor::beep(uint16_t amplitude) {
 801bdee:	b580      	push	{r7, lr}
 801bdf0:	b084      	sub	sp, #16
 801bdf2:	af00      	add	r7, sp, #0
 801bdf4:	6078      	str	r0, [r7, #4]
 801bdf6:	460b      	mov	r3, r1
 801bdf8:	807b      	strh	r3, [r7, #2]
	uint8_t ret = 0;
 801bdfa:	2300      	movs	r3, #0
 801bdfc:	73fb      	strb	r3, [r7, #15]
	ret = this->setMode(SIMPLEXMOTION_MODE_BEEP);
 801bdfe:	213c      	movs	r1, #60	; 0x3c
 801be00:	6878      	ldr	r0, [r7, #4]
 801be02:	f7ff ffa5 	bl	801bd50 <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t>
 801be06:	4603      	mov	r3, r0
 801be08:	73fb      	strb	r3, [r7, #15]



	// Set the amplitude
	ret = this->setTarget((int32_t) amplitude);
 801be0a:	887b      	ldrh	r3, [r7, #2]
 801be0c:	4619      	mov	r1, r3
 801be0e:	6878      	ldr	r0, [r7, #4]
 801be10:	f000 f92a 	bl	801c068 <_ZN18SimplexMotionMotor9setTargetEl>
 801be14:	4603      	mov	r3, r0
 801be16:	73fb      	strb	r3, [r7, #15]

	return ret;
 801be18:	7bfb      	ldrb	r3, [r7, #15]
}
 801be1a:	4618      	mov	r0, r3
 801be1c:	3710      	adds	r7, #16
 801be1e:	46bd      	mov	sp, r7
 801be20:	bd80      	pop	{r7, pc}

0801be22 <_ZN18SimplexMotionMotor14getPositionRawEv>:
	position = data[0] << 16 | data[1];
	return position / 4096.0 * this->_config.direction;
}

// ==============================================================
int32_t SimplexMotionMotor::getPositionRaw() {
 801be22:	b580      	push	{r7, lr}
 801be24:	b086      	sub	sp, #24
 801be26:	af00      	add	r7, sp, #0
 801be28:	6078      	str	r0, [r7, #4]
	int32_t position = 0;
 801be2a:	2300      	movs	r3, #0
 801be2c:	617b      	str	r3, [r7, #20]
	uint16_t data[2] = { 0 };
 801be2e:	2300      	movs	r3, #0
 801be30:	60fb      	str	r3, [r7, #12]

	uint8_t success = this->readRegisters(SIMPLEXMOTION_REG_POSITION, 2, data);
 801be32:	f107 030c 	add.w	r3, r7, #12
 801be36:	2202      	movs	r2, #2
 801be38:	21c7      	movs	r1, #199	; 0xc7
 801be3a:	6878      	ldr	r0, [r7, #4]
 801be3c:	f7ff fe80 	bl	801bb40 <_ZN18SimplexMotionMotor13readRegistersEttPt>
 801be40:	4603      	mov	r3, r0
 801be42:	74fb      	strb	r3, [r7, #19]

	if (!success) {
 801be44:	7cfb      	ldrb	r3, [r7, #19]
 801be46:	2b00      	cmp	r3, #0
 801be48:	d101      	bne.n	801be4e <_ZN18SimplexMotionMotor14getPositionRawEv+0x2c>
		return 0;
 801be4a:	2300      	movs	r3, #0
 801be4c:	e005      	b.n	801be5a <_ZN18SimplexMotionMotor14getPositionRawEv+0x38>
	}
	position = data[0] << 16 | data[1];
 801be4e:	89bb      	ldrh	r3, [r7, #12]
 801be50:	041b      	lsls	r3, r3, #16
 801be52:	89fa      	ldrh	r2, [r7, #14]
 801be54:	4313      	orrs	r3, r2
 801be56:	617b      	str	r3, [r7, #20]

	return position;
 801be58:	697b      	ldr	r3, [r7, #20]
}
 801be5a:	4618      	mov	r0, r3
 801be5c:	3718      	adds	r7, #24
 801be5e:	46bd      	mov	sp, r7
 801be60:	bd80      	pop	{r7, pc}
	...

0801be64 <_ZN18SimplexMotionMotor8getSpeedEv>:
	return voltage;
}


// ==============================================================
float SimplexMotionMotor::getSpeed() {
 801be64:	b580      	push	{r7, lr}
 801be66:	b086      	sub	sp, #24
 801be68:	af00      	add	r7, sp, #0
 801be6a:	6078      	str	r0, [r7, #4]
	uint16_t speed_raw = 0;
 801be6c:	2300      	movs	r3, #0
 801be6e:	81fb      	strh	r3, [r7, #14]
	uint8_t success = this->readRegisters(SIMPLEXMOTION_REG_SPEED, 1,
 801be70:	f107 030e 	add.w	r3, r7, #14
 801be74:	2201      	movs	r2, #1
 801be76:	21c9      	movs	r1, #201	; 0xc9
 801be78:	6878      	ldr	r0, [r7, #4]
 801be7a:	f7ff fe61 	bl	801bb40 <_ZN18SimplexMotionMotor13readRegistersEttPt>
 801be7e:	4603      	mov	r3, r0
 801be80:	75fb      	strb	r3, [r7, #23]
			&speed_raw);

	int16_t speed_signed = (int16_t) speed_raw;
 801be82:	89fb      	ldrh	r3, [r7, #14]
 801be84:	82bb      	strh	r3, [r7, #20]

	if (!success) {
 801be86:	7dfb      	ldrb	r3, [r7, #23]
 801be88:	2b00      	cmp	r3, #0
 801be8a:	d102      	bne.n	801be92 <_ZN18SimplexMotionMotor8getSpeedEv+0x2e>
		return 0;
 801be8c:	f04f 0300 	mov.w	r3, #0
 801be90:	e01a      	b.n	801bec8 <_ZN18SimplexMotionMotor8getSpeedEv+0x64>
	}
	float speed = this->_config.direction * 2 * pi * speed_signed / 256;
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	f993 3051 	ldrsb.w	r3, [r3, #81]	; 0x51
 801be98:	005b      	lsls	r3, r3, #1
 801be9a:	ee07 3a90 	vmov	s15, r3
 801be9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bea2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 801bed8 <_ZN18SimplexMotionMotor8getSpeedEv+0x74>
 801bea6:	ee27 7a87 	vmul.f32	s14, s15, s14
 801beaa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801beae:	ee07 3a90 	vmov	s15, r3
 801beb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801beb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 801beba:	eddf 6a08 	vldr	s13, [pc, #32]	; 801bedc <_ZN18SimplexMotionMotor8getSpeedEv+0x78>
 801bebe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801bec2:	edc7 7a04 	vstr	s15, [r7, #16]

	return speed;
 801bec6:	693b      	ldr	r3, [r7, #16]
}
 801bec8:	ee07 3a90 	vmov	s15, r3
 801becc:	eeb0 0a67 	vmov.f32	s0, s15
 801bed0:	3718      	adds	r7, #24
 801bed2:	46bd      	mov	sp, r7
 801bed4:	bd80      	pop	{r7, pc}
 801bed6:	bf00      	nop
 801bed8:	40490fdb 	.word	0x40490fdb
 801bedc:	43800000 	.word	0x43800000

0801bee0 <_ZN18SimplexMotionMotor14setTorqueLimitEf>:

// ==============================================================
uint8_t SimplexMotionMotor::setTorqueLimit(float maxTorque) {
 801bee0:	b580      	push	{r7, lr}
 801bee2:	b084      	sub	sp, #16
 801bee4:	af00      	add	r7, sp, #0
 801bee6:	6078      	str	r0, [r7, #4]
 801bee8:	ed87 0a00 	vstr	s0, [r7]
	uint16_t torque_limit_int = (uint16_t) (maxTorque * 1000);
 801beec:	edd7 7a00 	vldr	s15, [r7]
 801bef0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 801bf80 <_ZN18SimplexMotionMotor14setTorqueLimitEf+0xa0>
 801bef4:	ee67 7a87 	vmul.f32	s15, s15, s14
 801bef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801befc:	ee17 3a90 	vmov	r3, s15
 801bf00:	b29b      	uxth	r3, r3
 801bf02:	81bb      	strh	r3, [r7, #12]

	uint8_t ret = 0;
 801bf04:	2300      	movs	r3, #0
 801bf06:	73fb      	strb	r3, [r7, #15]

	ret = this->writeRegisters(SIMPLEXMOTION_REG_TORQUE_LIMIT, 1,
 801bf08:	f107 030c 	add.w	r3, r7, #12
 801bf0c:	2201      	movs	r2, #1
 801bf0e:	21cb      	movs	r1, #203	; 0xcb
 801bf10:	6878      	ldr	r0, [r7, #4]
 801bf12:	f7ff fdd4 	bl	801babe <_ZN18SimplexMotionMotor14writeRegistersEttPt>
 801bf16:	4603      	mov	r3, r0
 801bf18:	73fb      	strb	r3, [r7, #15]
			&torque_limit_int);

	if (not (ret)) {
 801bf1a:	7bfb      	ldrb	r3, [r7, #15]
 801bf1c:	2b00      	cmp	r3, #0
 801bf1e:	d101      	bne.n	801bf24 <_ZN18SimplexMotionMotor14setTorqueLimitEf+0x44>
		return 0;
 801bf20:	2300      	movs	r3, #0
 801bf22:	e024      	b.n	801bf6e <_ZN18SimplexMotionMotor14setTorqueLimitEf+0x8e>
	}

	uint16_t torque_limit_int_check = 0;
 801bf24:	2300      	movs	r3, #0
 801bf26:	817b      	strh	r3, [r7, #10]
	ret = this->readRegisters(SIMPLEXMOTION_REG_TORQUE_LIMIT, 1,
 801bf28:	f107 030a 	add.w	r3, r7, #10
 801bf2c:	2201      	movs	r2, #1
 801bf2e:	21cb      	movs	r1, #203	; 0xcb
 801bf30:	6878      	ldr	r0, [r7, #4]
 801bf32:	f7ff fe05 	bl	801bb40 <_ZN18SimplexMotionMotor13readRegistersEttPt>
 801bf36:	4603      	mov	r3, r0
 801bf38:	73fb      	strb	r3, [r7, #15]
			&torque_limit_int_check);

	if (not (ret)) {
 801bf3a:	7bfb      	ldrb	r3, [r7, #15]
 801bf3c:	2b00      	cmp	r3, #0
 801bf3e:	d101      	bne.n	801bf44 <_ZN18SimplexMotionMotor14setTorqueLimitEf+0x64>
		return 0;
 801bf40:	2300      	movs	r3, #0
 801bf42:	e014      	b.n	801bf6e <_ZN18SimplexMotionMotor14setTorqueLimitEf+0x8e>
	}

	this->torque_limit = torque_limit_int_check * 0.001;
 801bf44:	897b      	ldrh	r3, [r7, #10]
 801bf46:	ee07 3a90 	vmov	s15, r3
 801bf4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801bf4e:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 801bf78 <_ZN18SimplexMotionMotor14setTorqueLimitEf+0x98>
 801bf52:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bf56:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801bf5a:	687b      	ldr	r3, [r7, #4]
 801bf5c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

	if (!(torque_limit_int == torque_limit_int_check)) {
 801bf60:	89ba      	ldrh	r2, [r7, #12]
 801bf62:	897b      	ldrh	r3, [r7, #10]
 801bf64:	429a      	cmp	r2, r3
 801bf66:	d001      	beq.n	801bf6c <_ZN18SimplexMotionMotor14setTorqueLimitEf+0x8c>
		return 0;
 801bf68:	2300      	movs	r3, #0
 801bf6a:	e000      	b.n	801bf6e <_ZN18SimplexMotionMotor14setTorqueLimitEf+0x8e>
	}

	return 1;
 801bf6c:	2301      	movs	r3, #1
}
 801bf6e:	4618      	mov	r0, r3
 801bf70:	3710      	adds	r7, #16
 801bf72:	46bd      	mov	sp, r7
 801bf74:	bd80      	pop	{r7, pc}
 801bf76:	bf00      	nop
 801bf78:	d2f1a9fc 	.word	0xd2f1a9fc
 801bf7c:	3f50624d 	.word	0x3f50624d
 801bf80:	447a0000 	.word	0x447a0000
 801bf84:	00000000 	.word	0x00000000

0801bf88 <_ZN18SimplexMotionMotor14getTorqueLimitEv>:

// ==============================================================
float SimplexMotionMotor::getTorqueLimit() {
 801bf88:	b580      	push	{r7, lr}
 801bf8a:	b086      	sub	sp, #24
 801bf8c:	af00      	add	r7, sp, #0
 801bf8e:	6078      	str	r0, [r7, #4]

	uint16_t torque_limit_int = 0;
 801bf90:	2300      	movs	r3, #0
 801bf92:	81fb      	strh	r3, [r7, #14]
	uint8_t ret = this->readRegisters(SIMPLEXMOTION_REG_TORQUE_LIMIT, 1,
 801bf94:	f107 030e 	add.w	r3, r7, #14
 801bf98:	2201      	movs	r2, #1
 801bf9a:	21cb      	movs	r1, #203	; 0xcb
 801bf9c:	6878      	ldr	r0, [r7, #4]
 801bf9e:	f7ff fdcf 	bl	801bb40 <_ZN18SimplexMotionMotor13readRegistersEttPt>
 801bfa2:	4603      	mov	r3, r0
 801bfa4:	75fb      	strb	r3, [r7, #23]
			&torque_limit_int);

	if (not ret) {
 801bfa6:	7dfb      	ldrb	r3, [r7, #23]
 801bfa8:	2b00      	cmp	r3, #0
 801bfaa:	d101      	bne.n	801bfb0 <_ZN18SimplexMotionMotor14getTorqueLimitEv+0x28>
		return -1;
 801bfac:	4b0e      	ldr	r3, [pc, #56]	; (801bfe8 <_ZN18SimplexMotionMotor14getTorqueLimitEv+0x60>)
 801bfae:	e010      	b.n	801bfd2 <_ZN18SimplexMotionMotor14getTorqueLimitEv+0x4a>
	}

	float torque_limit = torque_limit_int * 0.001;
 801bfb0:	89fb      	ldrh	r3, [r7, #14]
 801bfb2:	ee07 3a90 	vmov	s15, r3
 801bfb6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801bfba:	ed9f 6b09 	vldr	d6, [pc, #36]	; 801bfe0 <_ZN18SimplexMotionMotor14getTorqueLimitEv+0x58>
 801bfbe:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bfc2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801bfc6:	edc7 7a04 	vstr	s15, [r7, #16]

	this->torque_limit = torque_limit;
 801bfca:	687b      	ldr	r3, [r7, #4]
 801bfcc:	693a      	ldr	r2, [r7, #16]
 801bfce:	649a      	str	r2, [r3, #72]	; 0x48
	return torque_limit;
 801bfd0:	693b      	ldr	r3, [r7, #16]
}
 801bfd2:	ee07 3a90 	vmov	s15, r3
 801bfd6:	eeb0 0a67 	vmov.f32	s0, s15
 801bfda:	3718      	adds	r7, #24
 801bfdc:	46bd      	mov	sp, r7
 801bfde:	bd80      	pop	{r7, pc}
 801bfe0:	d2f1a9fc 	.word	0xd2f1a9fc
 801bfe4:	3f50624d 	.word	0x3f50624d
 801bfe8:	bf800000 	.word	0xbf800000
 801bfec:	00000000 	.word	0x00000000

0801bff0 <_ZN18SimplexMotionMotor9setTorqueEf>:

	return 0.0;
}

// ==============================================================
uint8_t SimplexMotionMotor::setTorque(float torque) {
 801bff0:	b580      	push	{r7, lr}
 801bff2:	b086      	sub	sp, #24
 801bff4:	af00      	add	r7, sp, #0
 801bff6:	6078      	str	r0, [r7, #4]
 801bff8:	ed87 0a00 	vstr	s0, [r7]
	// First check if torque mode has been set
	if (!(this->mode == SIMPLEXMOTION_MODE_TORQUE)) {
 801bffc:	687b      	ldr	r3, [r7, #4]
 801bffe:	881b      	ldrh	r3, [r3, #0]
 801c000:	2b28      	cmp	r3, #40	; 0x28
 801c002:	d001      	beq.n	801c008 <_ZN18SimplexMotionMotor9setTorqueEf+0x18>
		return 0;
 801c004:	2300      	movs	r3, #0
 801c006:	e024      	b.n	801c052 <_ZN18SimplexMotionMotor9setTorqueEf+0x62>
	}

	// Calculate the corresponding torque value
	int16_t torque_value_int = (int16_t) (this->_config.direction * torque
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	f993 3051 	ldrsb.w	r3, [r3, #81]	; 0x51
 801c00e:	ee07 3a90 	vmov	s15, r3
 801c012:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c016:	edd7 7a00 	vldr	s15, [r7]
 801c01a:	ee67 6a27 	vmul.f32	s13, s14, s15
			/ this->torque_limit * 32767.0);
 801c01e:	687b      	ldr	r3, [r7, #4]
 801c020:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 801c024:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c028:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801c02c:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 801c060 <_ZN18SimplexMotionMotor9setTorqueEf+0x70>
 801c030:	ee27 7b06 	vmul.f64	d7, d7, d6
	int16_t torque_value_int = (int16_t) (this->_config.direction * torque
 801c034:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801c038:	ee17 3a90 	vmov	r3, s15
 801c03c:	82fb      	strh	r3, [r7, #22]
	int32_t target_input = (int32_t) torque_value_int;
 801c03e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c042:	613b      	str	r3, [r7, #16]

	uint8_t ret = this->setTarget(target_input);
 801c044:	6939      	ldr	r1, [r7, #16]
 801c046:	6878      	ldr	r0, [r7, #4]
 801c048:	f000 f80e 	bl	801c068 <_ZN18SimplexMotionMotor9setTargetEl>
 801c04c:	4603      	mov	r3, r0
 801c04e:	73fb      	strb	r3, [r7, #15]
	return ret;
 801c050:	7bfb      	ldrb	r3, [r7, #15]
}
 801c052:	4618      	mov	r0, r3
 801c054:	3718      	adds	r7, #24
 801c056:	46bd      	mov	sp, r7
 801c058:	bd80      	pop	{r7, pc}
 801c05a:	bf00      	nop
 801c05c:	f3af 8000 	nop.w
 801c060:	00000000 	.word	0x00000000
 801c064:	40dfffc0 	.word	0x40dfffc0

0801c068 <_ZN18SimplexMotionMotor9setTargetEl>:

// ==============================================================
uint8_t SimplexMotionMotor::setTarget(int32_t target) {
 801c068:	b580      	push	{r7, lr}
 801c06a:	b084      	sub	sp, #16
 801c06c:	af00      	add	r7, sp, #0
 801c06e:	6078      	str	r0, [r7, #4]
 801c070:	6039      	str	r1, [r7, #0]
	uint8_t ret = 0;
 801c072:	2300      	movs	r3, #0
 801c074:	73fb      	strb	r3, [r7, #15]
	uint16_t tx_data[2] = { 0 };
 801c076:	2300      	movs	r3, #0
 801c078:	60bb      	str	r3, [r7, #8]

	tx_data[0] = target >> 16;
 801c07a:	683b      	ldr	r3, [r7, #0]
 801c07c:	141b      	asrs	r3, r3, #16
 801c07e:	b29b      	uxth	r3, r3
 801c080:	813b      	strh	r3, [r7, #8]
	tx_data[1] = target & 0xFFFF;
 801c082:	683b      	ldr	r3, [r7, #0]
 801c084:	b29b      	uxth	r3, r3
 801c086:	817b      	strh	r3, [r7, #10]

	ret = this->writeRegisters(SIMPLEXMOTION_REG_TARGET_INPUT, 2, tx_data);
 801c088:	f107 0308 	add.w	r3, r7, #8
 801c08c:	2202      	movs	r2, #2
 801c08e:	f240 11c1 	movw	r1, #449	; 0x1c1
 801c092:	6878      	ldr	r0, [r7, #4]
 801c094:	f7ff fd13 	bl	801babe <_ZN18SimplexMotionMotor14writeRegistersEttPt>
 801c098:	4603      	mov	r3, r0
 801c09a:	73fb      	strb	r3, [r7, #15]
	return ret;
 801c09c:	7bfb      	ldrb	r3, [r7, #15]
}
 801c09e:	4618      	mov	r0, r3
 801c0a0:	3710      	adds	r7, #16
 801c0a2:	46bd      	mov	sp, r7
 801c0a4:	bd80      	pop	{r7, pc}

0801c0a6 <_ZN18SimplexMotionMotor9getStatusEP22simplexmotion_status_t>:

// ==============================================================
uint8_t SimplexMotionMotor::getStatus(simplexmotion_status_t *status) {
 801c0a6:	b580      	push	{r7, lr}
 801c0a8:	b084      	sub	sp, #16
 801c0aa:	af00      	add	r7, sp, #0
 801c0ac:	6078      	str	r0, [r7, #4]
 801c0ae:	6039      	str	r1, [r7, #0]
	uint16_t status_map = 0;
 801c0b0:	2300      	movs	r3, #0
 801c0b2:	81bb      	strh	r3, [r7, #12]
	uint8_t ret = this->readRegisters(SIMPLEXMOTION_REG_STATUS, 1, &status_map);
 801c0b4:	f107 030c 	add.w	r3, r7, #12
 801c0b8:	2201      	movs	r2, #1
 801c0ba:	f240 1199 	movw	r1, #409	; 0x199
 801c0be:	6878      	ldr	r0, [r7, #4]
 801c0c0:	f7ff fd3e 	bl	801bb40 <_ZN18SimplexMotionMotor13readRegistersEttPt>
 801c0c4:	4603      	mov	r3, r0
 801c0c6:	73fb      	strb	r3, [r7, #15]

	if (not (ret)) {
 801c0c8:	7bfb      	ldrb	r3, [r7, #15]
 801c0ca:	2b00      	cmp	r3, #0
 801c0cc:	d101      	bne.n	801c0d2 <_ZN18SimplexMotionMotor9getStatusEP22simplexmotion_status_t+0x2c>
		return 0;
 801c0ce:	2300      	movs	r3, #0
 801c0d0:	e041      	b.n	801c156 <_ZN18SimplexMotionMotor9getStatusEP22simplexmotion_status_t+0xb0>
	}

	status->fail = status_map & 1 << 0;
 801c0d2:	89bb      	ldrh	r3, [r7, #12]
 801c0d4:	b2db      	uxtb	r3, r3
 801c0d6:	f003 0301 	and.w	r3, r3, #1
 801c0da:	b2da      	uxtb	r2, r3
 801c0dc:	683b      	ldr	r3, [r7, #0]
 801c0de:	701a      	strb	r2, [r3, #0]
	status->communication_error = status_map & 1 << 1;
 801c0e0:	89bb      	ldrh	r3, [r7, #12]
 801c0e2:	b2db      	uxtb	r3, r3
 801c0e4:	f003 0302 	and.w	r3, r3, #2
 801c0e8:	b2da      	uxtb	r2, r3
 801c0ea:	683b      	ldr	r3, [r7, #0]
 801c0ec:	705a      	strb	r2, [r3, #1]
	status->current_error = status_map & 1 << 2;
 801c0ee:	89bb      	ldrh	r3, [r7, #12]
 801c0f0:	b2db      	uxtb	r3, r3
 801c0f2:	f003 0304 	and.w	r3, r3, #4
 801c0f6:	b2da      	uxtb	r2, r3
 801c0f8:	683b      	ldr	r3, [r7, #0]
 801c0fa:	709a      	strb	r2, [r3, #2]
	status->voltage_error = status_map & 1 << 3;
 801c0fc:	89bb      	ldrh	r3, [r7, #12]
 801c0fe:	b2db      	uxtb	r3, r3
 801c100:	f003 0308 	and.w	r3, r3, #8
 801c104:	b2da      	uxtb	r2, r3
 801c106:	683b      	ldr	r3, [r7, #0]
 801c108:	70da      	strb	r2, [r3, #3]
	status->temperature_error = status_map & 1 << 4;
 801c10a:	89bb      	ldrh	r3, [r7, #12]
 801c10c:	b2db      	uxtb	r3, r3
 801c10e:	f003 0310 	and.w	r3, r3, #16
 801c112:	b2da      	uxtb	r2, r3
 801c114:	683b      	ldr	r3, [r7, #0]
 801c116:	711a      	strb	r2, [r3, #4]
	status->torque_limit = status_map & 1 << 5;
 801c118:	89bb      	ldrh	r3, [r7, #12]
 801c11a:	b2db      	uxtb	r3, r3
 801c11c:	f003 0320 	and.w	r3, r3, #32
 801c120:	b2da      	uxtb	r2, r3
 801c122:	683b      	ldr	r3, [r7, #0]
 801c124:	715a      	strb	r2, [r3, #5]
	status->locked = status_map & 1 << 6;
 801c126:	89bb      	ldrh	r3, [r7, #12]
 801c128:	b2db      	uxtb	r3, r3
 801c12a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c12e:	b2da      	uxtb	r2, r3
 801c130:	683b      	ldr	r3, [r7, #0]
 801c132:	721a      	strb	r2, [r3, #8]
	status->regulator_error = status_map & 1 << 7;
 801c134:	89bb      	ldrh	r3, [r7, #12]
 801c136:	b2db      	uxtb	r3, r3
 801c138:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801c13c:	b2da      	uxtb	r2, r3
 801c13e:	683b      	ldr	r3, [r7, #0]
 801c140:	719a      	strb	r2, [r3, #6]
	status->moving = status_map & 1 << 8;
 801c142:	683b      	ldr	r3, [r7, #0]
 801c144:	2200      	movs	r2, #0
 801c146:	71da      	strb	r2, [r3, #7]
	status->reverse = status_map & 1 << 9;
 801c148:	683b      	ldr	r3, [r7, #0]
 801c14a:	2200      	movs	r2, #0
 801c14c:	725a      	strb	r2, [r3, #9]
	status->target = status_map & 1 << 10;
 801c14e:	683b      	ldr	r3, [r7, #0]
 801c150:	2200      	movs	r2, #0
 801c152:	729a      	strb	r2, [r3, #10]

	return 1;
 801c154:	2301      	movs	r3, #1
}
 801c156:	4618      	mov	r0, r3
 801c158:	3710      	adds	r7, #16
 801c15a:	46bd      	mov	sp, r7
 801c15c:	bd80      	pop	{r7, pc}

0801c15e <_ZN18SimplexMotionMotor13error_handlerE19simplexmotion_error>:
		this->callbacks.error = callback;
	}
}

// ==============================================================
void SimplexMotionMotor::error_handler(simplexmotion_error error) {
 801c15e:	b480      	push	{r7}
 801c160:	b083      	sub	sp, #12
 801c162:	af00      	add	r7, sp, #0
 801c164:	6078      	str	r0, [r7, #4]
 801c166:	460b      	mov	r3, r1
 801c168:	807b      	strh	r3, [r7, #2]

}
 801c16a:	bf00      	nop
 801c16c:	370c      	adds	r7, #12
 801c16e:	46bd      	mov	sp, r7
 801c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c174:	4770      	bx	lr

0801c176 <_ZN18bmi160_gyr_calib_tC1Ev>:
	float x;
	float y;
	float z;
} bmi160_acc;

typedef struct bmi160_gyr_calib_t {
 801c176:	b480      	push	{r7}
 801c178:	b083      	sub	sp, #12
 801c17a:	af00      	add	r7, sp, #0
 801c17c:	6078      	str	r0, [r7, #4]
 801c17e:	687b      	ldr	r3, [r7, #4]
 801c180:	f04f 0200 	mov.w	r2, #0
 801c184:	601a      	str	r2, [r3, #0]
 801c186:	687b      	ldr	r3, [r7, #4]
 801c188:	f04f 0200 	mov.w	r2, #0
 801c18c:	605a      	str	r2, [r3, #4]
 801c18e:	687b      	ldr	r3, [r7, #4]
 801c190:	f04f 0200 	mov.w	r2, #0
 801c194:	609a      	str	r2, [r3, #8]
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	4618      	mov	r0, r3
 801c19a:	370c      	adds	r7, #12
 801c19c:	46bd      	mov	sp, r7
 801c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1a2:	4770      	bx	lr

0801c1a4 <_ZN19bmi160_gyr_config_tC1Ev>:
	uint8_t bw = BMI160_ACCEL_BW_NORMAL_AVG4;
	uint8_t range = BMI160_ACCEL_RANGE_8G;
	uint8_t foc_enable = 0;
} bmi160_acc_config_t;

typedef struct bmi160_gyr_config_t {
 801c1a4:	b480      	push	{r7}
 801c1a6:	b083      	sub	sp, #12
 801c1a8:	af00      	add	r7, sp, #0
 801c1aa:	6078      	str	r0, [r7, #4]
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	220a      	movs	r2, #10
 801c1b0:	701a      	strb	r2, [r3, #0]
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	2220      	movs	r2, #32
 801c1b6:	705a      	strb	r2, [r3, #1]
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	2201      	movs	r2, #1
 801c1bc:	709a      	strb	r2, [r3, #2]
 801c1be:	687b      	ldr	r3, [r7, #4]
 801c1c0:	2201      	movs	r2, #1
 801c1c2:	70da      	strb	r2, [r3, #3]
 801c1c4:	687b      	ldr	r3, [r7, #4]
 801c1c6:	4618      	mov	r0, r3
 801c1c8:	370c      	adds	r7, #12
 801c1ca:	46bd      	mov	sp, r7
 801c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1d0:	4770      	bx	lr

0801c1d2 <_ZN19bmi160_acc_config_tC1Ev>:
typedef struct bmi160_acc_config_t {
 801c1d2:	b480      	push	{r7}
 801c1d4:	b083      	sub	sp, #12
 801c1d6:	af00      	add	r7, sp, #0
 801c1d8:	6078      	str	r0, [r7, #4]
 801c1da:	687b      	ldr	r3, [r7, #4]
 801c1dc:	220a      	movs	r2, #10
 801c1de:	701a      	strb	r2, [r3, #0]
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	2220      	movs	r2, #32
 801c1e4:	705a      	strb	r2, [r3, #1]
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	2208      	movs	r2, #8
 801c1ea:	709a      	strb	r2, [r3, #2]
 801c1ec:	687b      	ldr	r3, [r7, #4]
 801c1ee:	2200      	movs	r2, #0
 801c1f0:	70da      	strb	r2, [r3, #3]
 801c1f2:	687b      	ldr	r3, [r7, #4]
 801c1f4:	4618      	mov	r0, r3
 801c1f6:	370c      	adds	r7, #12
 801c1f8:	46bd      	mov	sp, r7
 801c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1fe:	4770      	bx	lr

0801c200 <_ZN15bmi160_config_tC1Ev>:
	uint8_t bw = BMI160_GYRO_BW_NORMAL_MODE;
	uint8_t range = BMI160_GYRO_RANGE_1000_DPS;
	uint8_t foc_enable = 1;
} bmi160_gyr_config_t;

typedef struct bmi160_config_t {
 801c200:	b580      	push	{r7, lr}
 801c202:	b082      	sub	sp, #8
 801c204:	af00      	add	r7, sp, #0
 801c206:	6078      	str	r0, [r7, #4]
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	330a      	adds	r3, #10
 801c20c:	4618      	mov	r0, r3
 801c20e:	f7ff ffc9 	bl	801c1a4 <_ZN19bmi160_gyr_config_tC1Ev>
 801c212:	687b      	ldr	r3, [r7, #4]
 801c214:	330e      	adds	r3, #14
 801c216:	4618      	mov	r0, r3
 801c218:	f7ff ffdb 	bl	801c1d2 <_ZN19bmi160_acc_config_tC1Ev>
 801c21c:	687b      	ldr	r3, [r7, #4]
 801c21e:	4618      	mov	r0, r3
 801c220:	3708      	adds	r7, #8
 801c222:	46bd      	mov	sp, r7
 801c224:	bd80      	pop	{r7, pc}

0801c226 <_ZN6BMI160C1Ev>:

#include "bmi160.h"

#if CORE_CONFIG_USE_SPI

BMI160::BMI160(){
 801c226:	b580      	push	{r7, lr}
 801c228:	b082      	sub	sp, #8
 801c22a:	af00      	add	r7, sp, #0
 801c22c:	6078      	str	r0, [r7, #4]
 801c22e:	687b      	ldr	r3, [r7, #4]
 801c230:	332c      	adds	r3, #44	; 0x2c
 801c232:	4618      	mov	r0, r3
 801c234:	f7ff ff9f 	bl	801c176 <_ZN18bmi160_gyr_calib_tC1Ev>
 801c238:	687b      	ldr	r3, [r7, #4]
 801c23a:	3338      	adds	r3, #56	; 0x38
 801c23c:	4618      	mov	r0, r3
 801c23e:	f7ff ffdf 	bl	801c200 <_ZN15bmi160_config_tC1Ev>

}
 801c242:	687b      	ldr	r3, [r7, #4]
 801c244:	4618      	mov	r0, r3
 801c246:	3708      	adds	r7, #8
 801c248:	46bd      	mov	sp, r7
 801c24a:	bd80      	pop	{r7, pc}

0801c24c <_ZN6BMI16013writeRegisterEhh>:

/* ============================================================================= */
uint8_t BMI160::writeRegister(uint8_t reg, uint8_t data) {
 801c24c:	b580      	push	{r7, lr}
 801c24e:	b082      	sub	sp, #8
 801c250:	af00      	add	r7, sp, #0
 801c252:	6078      	str	r0, [r7, #4]
 801c254:	460b      	mov	r3, r1
 801c256:	70fb      	strb	r3, [r7, #3]
 801c258:	4613      	mov	r3, r2
 801c25a:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_RESET);
 801c25c:	687b      	ldr	r3, [r7, #4]
 801c25e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801c260:	687b      	ldr	r3, [r7, #4]
 801c262:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801c266:	2200      	movs	r2, #0
 801c268:	4619      	mov	r1, r3
 801c26a:	f7e8 fe7b 	bl	8004f64 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_config.hspi, &reg, 1, 1);
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c272:	1cf9      	adds	r1, r7, #3
 801c274:	2301      	movs	r3, #1
 801c276:	2201      	movs	r2, #1
 801c278:	f7eb ff72 	bl	8008160 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(this->_config.hspi, &data, 1, 1);
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c280:	1cb9      	adds	r1, r7, #2
 801c282:	2301      	movs	r3, #1
 801c284:	2201      	movs	r2, #1
 801c286:	f7eb ff6b 	bl	8008160 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 801c28a:	687b      	ldr	r3, [r7, #4]
 801c28c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801c28e:	687b      	ldr	r3, [r7, #4]
 801c290:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801c294:	2201      	movs	r2, #1
 801c296:	4619      	mov	r1, r3
 801c298:	f7e8 fe64 	bl	8004f64 <HAL_GPIO_WritePin>

	return CORE_OK;
 801c29c:	2301      	movs	r3, #1
}
 801c29e:	4618      	mov	r0, r3
 801c2a0:	3708      	adds	r7, #8
 801c2a2:	46bd      	mov	sp, r7
 801c2a4:	bd80      	pop	{r7, pc}

0801c2a6 <_ZN6BMI1604initE15bmi160_config_t>:

/* ============================================================================= */
uint8_t BMI160::init(bmi160_config_t config) {
 801c2a6:	b084      	sub	sp, #16
 801c2a8:	b5b0      	push	{r4, r5, r7, lr}
 801c2aa:	b084      	sub	sp, #16
 801c2ac:	af00      	add	r7, sp, #0
 801c2ae:	6078      	str	r0, [r7, #4]
 801c2b0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801c2b4:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	this->_config = config;
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801c2be:	f107 0524 	add.w	r5, r7, #36	; 0x24
 801c2c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c2c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c2c6:	682b      	ldr	r3, [r5, #0]
 801c2c8:	6023      	str	r3, [r4, #0]
	// Make a dummy read to turn on SPI mode
//	this->readRegister(0x7F);
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 801c2ca:	687b      	ldr	r3, [r7, #4]
 801c2cc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801c2ce:	687b      	ldr	r3, [r7, #4]
 801c2d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801c2d4:	2201      	movs	r2, #1
 801c2d6:	4619      	mov	r1, r3
 801c2d8:	f7e8 fe44 	bl	8004f64 <HAL_GPIO_WritePin>
	delay(250);
 801c2dc:	20fa      	movs	r0, #250	; 0xfa
 801c2de:	f7fb fe3e 	bl	8017f5e <_Z5delaym>

	// Check if the IMU can be addressed
	if (not (this->check())) {
 801c2e2:	6878      	ldr	r0, [r7, #4]
 801c2e4:	f000 f8ed 	bl	801c4c2 <_ZN6BMI1605checkEv>
 801c2e8:	4603      	mov	r3, r0
 801c2ea:	2b00      	cmp	r3, #0
 801c2ec:	bf0c      	ite	eq
 801c2ee:	2301      	moveq	r3, #1
 801c2f0:	2300      	movne	r3, #0
 801c2f2:	b2db      	uxtb	r3, r3
 801c2f4:	2b00      	cmp	r3, #0
 801c2f6:	d001      	beq.n	801c2fc <_ZN6BMI1604initE15bmi160_config_t+0x56>
		return 0;
 801c2f8:	2300      	movs	r3, #0
 801c2fa:	e072      	b.n	801c3e2 <_ZN6BMI1604initE15bmi160_config_t+0x13c>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
	}

	// Reset the IMU to delete all previously loaded registers
	this->reset();
 801c2fc:	6878      	ldr	r0, [r7, #4]
 801c2fe:	f000 fd34 	bl	801cd6a <_ZN6BMI1605resetEv>

	// Wait until the reset is finished
	delay(250);
 801c302:	20fa      	movs	r0, #250	; 0xfa
 801c304:	f7fb fe2b 	bl	8017f5e <_Z5delaym>

	// Make a dummy read again to turn on SPI
	this->readRegister(0x7F);
 801c308:	217f      	movs	r1, #127	; 0x7f
 801c30a:	6878      	ldr	r0, [r7, #4]
 801c30c:	f000 f870 	bl	801c3f0 <_ZN6BMI16012readRegisterEh>

	// Set the power mode to normal in order for all registers to be writable
	this->setPowerMode(BMI160_Power_Normal);
 801c310:	2100      	movs	r1, #0
 801c312:	6878      	ldr	r0, [r7, #4]
 801c314:	f000 fcf4 	bl	801cd00 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode>

	// Set the accelerometer setting
	this->setAccConfig(this->_config.acc.odr | this->_config.acc.bw,
 801c318:	687b      	ldr	r3, [r7, #4]
 801c31a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 801c31e:	687b      	ldr	r3, [r7, #4]
 801c320:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801c324:	4313      	orrs	r3, r2
 801c326:	b2d9      	uxtb	r1, r3
 801c328:	687b      	ldr	r3, [r7, #4]
 801c32a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801c32e:	461a      	mov	r2, r3
 801c330:	6878      	ldr	r0, [r7, #4]
 801c332:	f000 fccc 	bl	801ccce <_ZN6BMI16012setAccConfigEhh>
			this->_config.acc.range);

	// Set the gyroscope setting
	this->setGyroConfig(this->_config.gyr.odr | this->_config.gyr.bw,
 801c336:	687b      	ldr	r3, [r7, #4]
 801c338:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 801c33c:	687b      	ldr	r3, [r7, #4]
 801c33e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c342:	4313      	orrs	r3, r2
 801c344:	b2d9      	uxtb	r1, r3
 801c346:	687b      	ldr	r3, [r7, #4]
 801c348:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801c34c:	461a      	mov	r2, r3
 801c34e:	6878      	ldr	r0, [r7, #4]
 801c350:	f000 fca4 	bl	801cc9c <_ZN6BMI16013setGyroConfigEhh>
			this->_config.gyr.range);

	// Check if the settings have been set correctly

	uint8_t acc_config_reg = this->readRegister(BMI160_REG_ACCEL_CONFIG);
 801c354:	2140      	movs	r1, #64	; 0x40
 801c356:	6878      	ldr	r0, [r7, #4]
 801c358:	f000 f84a 	bl	801c3f0 <_ZN6BMI16012readRegisterEh>
 801c35c:	4603      	mov	r3, r0
 801c35e:	73fb      	strb	r3, [r7, #15]
	uint8_t acc_range_reg = this->readRegister(BMI160_REG_ACCEL_RANGE);
 801c360:	2141      	movs	r1, #65	; 0x41
 801c362:	6878      	ldr	r0, [r7, #4]
 801c364:	f000 f844 	bl	801c3f0 <_ZN6BMI16012readRegisterEh>
 801c368:	4603      	mov	r3, r0
 801c36a:	73bb      	strb	r3, [r7, #14]
	uint8_t gyr_config_reg = this->readRegister(BMI160_REG_GYRO_CONFIG);
 801c36c:	2142      	movs	r1, #66	; 0x42
 801c36e:	6878      	ldr	r0, [r7, #4]
 801c370:	f000 f83e 	bl	801c3f0 <_ZN6BMI16012readRegisterEh>
 801c374:	4603      	mov	r3, r0
 801c376:	737b      	strb	r3, [r7, #13]
	uint8_t gyr_range_reg = this->readRegister(BMI160_REG_GYRO_RANGE);
 801c378:	2143      	movs	r1, #67	; 0x43
 801c37a:	6878      	ldr	r0, [r7, #4]
 801c37c:	f000 f838 	bl	801c3f0 <_ZN6BMI16012readRegisterEh>
 801c380:	4603      	mov	r3, r0
 801c382:	733b      	strb	r3, [r7, #12]

	if (acc_config_reg != (this->_config.acc.odr | this->_config.acc.bw)) {
 801c384:	687b      	ldr	r3, [r7, #4]
 801c386:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 801c38a:	687b      	ldr	r3, [r7, #4]
 801c38c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801c390:	4313      	orrs	r3, r2
 801c392:	b2db      	uxtb	r3, r3
 801c394:	7bfa      	ldrb	r2, [r7, #15]
 801c396:	429a      	cmp	r2, r3
 801c398:	d002      	beq.n	801c3a0 <_ZN6BMI1604initE15bmi160_config_t+0xfa>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 801c39a:	2008      	movs	r0, #8
 801c39c:	f000 fddd 	bl	801cf5a <_Z17core_ErrorHandleri>
	}
	if (acc_range_reg != this->_config.acc.range) {
 801c3a0:	687b      	ldr	r3, [r7, #4]
 801c3a2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801c3a6:	7bba      	ldrb	r2, [r7, #14]
 801c3a8:	429a      	cmp	r2, r3
 801c3aa:	d002      	beq.n	801c3b2 <_ZN6BMI1604initE15bmi160_config_t+0x10c>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 801c3ac:	2008      	movs	r0, #8
 801c3ae:	f000 fdd4 	bl	801cf5a <_Z17core_ErrorHandleri>
	}
	if (gyr_config_reg != (this->_config.gyr.odr | this->_config.gyr.bw)) {
 801c3b2:	687b      	ldr	r3, [r7, #4]
 801c3b4:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 801c3b8:	687b      	ldr	r3, [r7, #4]
 801c3ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c3be:	4313      	orrs	r3, r2
 801c3c0:	b2db      	uxtb	r3, r3
 801c3c2:	7b7a      	ldrb	r2, [r7, #13]
 801c3c4:	429a      	cmp	r2, r3
 801c3c6:	d002      	beq.n	801c3ce <_ZN6BMI1604initE15bmi160_config_t+0x128>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 801c3c8:	2008      	movs	r0, #8
 801c3ca:	f000 fdc6 	bl	801cf5a <_Z17core_ErrorHandleri>
	}
	if (gyr_range_reg != this->_config.gyr.range) {
 801c3ce:	687b      	ldr	r3, [r7, #4]
 801c3d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801c3d4:	7b3a      	ldrb	r2, [r7, #12]
 801c3d6:	429a      	cmp	r2, r3
 801c3d8:	d002      	beq.n	801c3e0 <_ZN6BMI1604initE15bmi160_config_t+0x13a>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 801c3da:	2008      	movs	r0, #8
 801c3dc:	f000 fdbd 	bl	801cf5a <_Z17core_ErrorHandleri>
	}

	return CORE_OK;
 801c3e0:	2301      	movs	r3, #1
}
 801c3e2:	4618      	mov	r0, r3
 801c3e4:	3710      	adds	r7, #16
 801c3e6:	46bd      	mov	sp, r7
 801c3e8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801c3ec:	b004      	add	sp, #16
 801c3ee:	4770      	bx	lr

0801c3f0 <_ZN6BMI16012readRegisterEh>:

/* ============================================================================= */
uint8_t BMI160::readRegister(uint8_t reg) {
 801c3f0:	b580      	push	{r7, lr}
 801c3f2:	b084      	sub	sp, #16
 801c3f4:	af00      	add	r7, sp, #0
 801c3f6:	6078      	str	r0, [r7, #4]
 801c3f8:	460b      	mov	r3, r1
 801c3fa:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0;
 801c3fc:	2300      	movs	r3, #0
 801c3fe:	73fb      	strb	r3, [r7, #15]
	reg |= 0x80;
 801c400:	78fb      	ldrb	r3, [r7, #3]
 801c402:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801c406:	b2db      	uxtb	r3, r3
 801c408:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_RESET);
 801c40a:	687b      	ldr	r3, [r7, #4]
 801c40c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801c414:	2200      	movs	r2, #0
 801c416:	4619      	mov	r1, r3
 801c418:	f7e8 fda4 	bl	8004f64 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_config.hspi, &reg, 1, 10);
 801c41c:	687b      	ldr	r3, [r7, #4]
 801c41e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c420:	1cf9      	adds	r1, r7, #3
 801c422:	230a      	movs	r3, #10
 801c424:	2201      	movs	r2, #1
 801c426:	f7eb fe9b 	bl	8008160 <HAL_SPI_Transmit>
	HAL_SPI_Receive(this->_config.hspi, &ret, 1, 10);
 801c42a:	687b      	ldr	r3, [r7, #4]
 801c42c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c42e:	f107 010f 	add.w	r1, r7, #15
 801c432:	230a      	movs	r3, #10
 801c434:	2201      	movs	r2, #1
 801c436:	f7ec f88f 	bl	8008558 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 801c43a:	687b      	ldr	r3, [r7, #4]
 801c43c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801c43e:	687b      	ldr	r3, [r7, #4]
 801c440:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801c444:	2201      	movs	r2, #1
 801c446:	4619      	mov	r1, r3
 801c448:	f7e8 fd8c 	bl	8004f64 <HAL_GPIO_WritePin>

	return ret;
 801c44c:	7bfb      	ldrb	r3, [r7, #15]
}
 801c44e:	4618      	mov	r0, r3
 801c450:	3710      	adds	r7, #16
 801c452:	46bd      	mov	sp, r7
 801c454:	bd80      	pop	{r7, pc}

0801c456 <_ZN6BMI16020readMultipleRegisterEhPhh>:

/* ============================================================================= */
uint8_t BMI160::readMultipleRegister(uint8_t reg, uint8_t *data, uint8_t len) {
 801c456:	b580      	push	{r7, lr}
 801c458:	b084      	sub	sp, #16
 801c45a:	af00      	add	r7, sp, #0
 801c45c:	60f8      	str	r0, [r7, #12]
 801c45e:	607a      	str	r2, [r7, #4]
 801c460:	461a      	mov	r2, r3
 801c462:	460b      	mov	r3, r1
 801c464:	72fb      	strb	r3, [r7, #11]
 801c466:	4613      	mov	r3, r2
 801c468:	72bb      	strb	r3, [r7, #10]
//	reg += 0x80;
	reg |= 0x80;
 801c46a:	7afb      	ldrb	r3, [r7, #11]
 801c46c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801c470:	b2db      	uxtb	r3, r3
 801c472:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_RESET);
 801c474:	68fb      	ldr	r3, [r7, #12]
 801c476:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801c478:	68fb      	ldr	r3, [r7, #12]
 801c47a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801c47e:	2200      	movs	r2, #0
 801c480:	4619      	mov	r1, r3
 801c482:	f7e8 fd6f 	bl	8004f64 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_config.hspi, &reg, 1, 10);
 801c486:	68fb      	ldr	r3, [r7, #12]
 801c488:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c48a:	f107 010b 	add.w	r1, r7, #11
 801c48e:	230a      	movs	r3, #10
 801c490:	2201      	movs	r2, #1
 801c492:	f7eb fe65 	bl	8008160 <HAL_SPI_Transmit>
	HAL_SPI_Receive(this->_config.hspi, data, len, 10);
 801c496:	68fb      	ldr	r3, [r7, #12]
 801c498:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c49a:	7abb      	ldrb	r3, [r7, #10]
 801c49c:	b29a      	uxth	r2, r3
 801c49e:	230a      	movs	r3, #10
 801c4a0:	6879      	ldr	r1, [r7, #4]
 801c4a2:	f7ec f859 	bl	8008558 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 801c4a6:	68fb      	ldr	r3, [r7, #12]
 801c4a8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801c4aa:	68fb      	ldr	r3, [r7, #12]
 801c4ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801c4b0:	2201      	movs	r2, #1
 801c4b2:	4619      	mov	r1, r3
 801c4b4:	f7e8 fd56 	bl	8004f64 <HAL_GPIO_WritePin>

	return CORE_OK;
 801c4b8:	2301      	movs	r3, #1
}
 801c4ba:	4618      	mov	r0, r3
 801c4bc:	3710      	adds	r7, #16
 801c4be:	46bd      	mov	sp, r7
 801c4c0:	bd80      	pop	{r7, pc}

0801c4c2 <_ZN6BMI1605checkEv>:

/* ============================================================================= */
uint8_t BMI160::check() {
 801c4c2:	b580      	push	{r7, lr}
 801c4c4:	b084      	sub	sp, #16
 801c4c6:	af00      	add	r7, sp, #0
 801c4c8:	6078      	str	r0, [r7, #4]
	uint8_t id = this->readID();
 801c4ca:	6878      	ldr	r0, [r7, #4]
 801c4cc:	f000 f80c 	bl	801c4e8 <_ZN6BMI1606readIDEv>
 801c4d0:	4603      	mov	r3, r0
 801c4d2:	73fb      	strb	r3, [r7, #15]
	if (id != 209) {
 801c4d4:	7bfb      	ldrb	r3, [r7, #15]
 801c4d6:	2bd1      	cmp	r3, #209	; 0xd1
 801c4d8:	d001      	beq.n	801c4de <_ZN6BMI1605checkEv+0x1c>
		return 0;
 801c4da:	2300      	movs	r3, #0
 801c4dc:	e000      	b.n	801c4e0 <_ZN6BMI1605checkEv+0x1e>
	}

	return CORE_OK;
 801c4de:	2301      	movs	r3, #1
}
 801c4e0:	4618      	mov	r0, r3
 801c4e2:	3710      	adds	r7, #16
 801c4e4:	46bd      	mov	sp, r7
 801c4e6:	bd80      	pop	{r7, pc}

0801c4e8 <_ZN6BMI1606readIDEv>:

/* ============================================================================= */
uint8_t BMI160::readID() {
 801c4e8:	b580      	push	{r7, lr}
 801c4ea:	b082      	sub	sp, #8
 801c4ec:	af00      	add	r7, sp, #0
 801c4ee:	6078      	str	r0, [r7, #4]
	return this->readRegister(BMI160_REG_CHIP_ID);
 801c4f0:	2100      	movs	r1, #0
 801c4f2:	6878      	ldr	r0, [r7, #4]
 801c4f4:	f7ff ff7c 	bl	801c3f0 <_ZN6BMI16012readRegisterEh>
 801c4f8:	4603      	mov	r3, r0
}
 801c4fa:	4618      	mov	r0, r3
 801c4fc:	3708      	adds	r7, #8
 801c4fe:	46bd      	mov	sp, r7
 801c500:	bd80      	pop	{r7, pc}

0801c502 <_ZN6BMI1606updateEv>:

/* ============================================================================= */
void BMI160::update() {
 801c502:	b580      	push	{r7, lr}
 801c504:	b082      	sub	sp, #8
 801c506:	af00      	add	r7, sp, #0
 801c508:	6078      	str	r0, [r7, #4]
	this->fetchData();
 801c50a:	6878      	ldr	r0, [r7, #4]
 801c50c:	f000 f807 	bl	801c51e <_ZN6BMI1609fetchDataEv>
	this->processData();
 801c510:	6878      	ldr	r0, [r7, #4]
 801c512:	f000 f815 	bl	801c540 <_ZN6BMI16011processDataEv>
}
 801c516:	bf00      	nop
 801c518:	3708      	adds	r7, #8
 801c51a:	46bd      	mov	sp, r7
 801c51c:	bd80      	pop	{r7, pc}

0801c51e <_ZN6BMI1609fetchDataEv>:

/* ============================================================================= */
uint8_t BMI160::fetchData() {
 801c51e:	b580      	push	{r7, lr}
 801c520:	b082      	sub	sp, #8
 801c522:	af00      	add	r7, sp, #0
 801c524:	6078      	str	r0, [r7, #4]
//	this->readSensorTime();
	this->readGyr();
 801c526:	6878      	ldr	r0, [r7, #4]
 801c528:	f000 fb56 	bl	801cbd8 <_ZN6BMI1607readGyrEv>
	this->readAcc();
 801c52c:	6878      	ldr	r0, [r7, #4]
 801c52e:	f000 fb84 	bl	801cc3a <_ZN6BMI1607readAccEv>

	return 1;
 801c532:	2301      	movs	r3, #1
}
 801c534:	4618      	mov	r0, r3
 801c536:	3708      	adds	r7, #8
 801c538:	46bd      	mov	sp, r7
 801c53a:	bd80      	pop	{r7, pc}
 801c53c:	0000      	movs	r0, r0
	...

0801c540 <_ZN6BMI16011processDataEv>:

/* ============================================================================= */
uint8_t BMI160::processData() {
 801c540:	b580      	push	{r7, lr}
 801c542:	b082      	sub	sp, #8
 801c544:	af00      	add	r7, sp, #0
 801c546:	6078      	str	r0, [r7, #4]

	// Gyroscope
	switch (this->_config.gyr.range) {
 801c548:	687b      	ldr	r3, [r7, #4]
 801c54a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801c54e:	2b04      	cmp	r3, #4
 801c550:	f200 8200 	bhi.w	801c954 <_ZN6BMI16011processDataEv+0x414>
 801c554:	a201      	add	r2, pc, #4	; (adr r2, 801c55c <_ZN6BMI16011processDataEv+0x1c>)
 801c556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c55a:	bf00      	nop
 801c55c:	0801c899 	.word	0x0801c899
 801c560:	0801c7a5 	.word	0x0801c7a5
 801c564:	0801c6e9 	.word	0x0801c6e9
 801c568:	0801c62d 	.word	0x0801c62d
 801c56c:	0801c571 	.word	0x0801c571
	case BMI160_GYRO_RANGE_125_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 125.0)
 801c570:	687b      	ldr	r3, [r7, #4]
 801c572:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c576:	ee07 3a90 	vmov	s15, r3
 801c57a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801c57e:	ed9f 5bc2 	vldr	d5, [pc, #776]	; 801c888 <_ZN6BMI16011processDataEv+0x348>
 801c582:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801c586:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 801c860 <_ZN6BMI16011processDataEv+0x320>
 801c58a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c58e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801c592:	eeb0 0a67 	vmov.f32	s0, s15
 801c596:	f7fc f84d 	bl	8018634 <_Z7deg2radf>
 801c59a:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 801c59e:	687b      	ldr	r3, [r7, #4]
 801c5a0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 801c5a4:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 125.0)
 801c5a8:	687b      	ldr	r3, [r7, #4]
 801c5aa:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 125.0)
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c5b4:	ee07 3a90 	vmov	s15, r3
 801c5b8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801c5bc:	ed9f 5bb2 	vldr	d5, [pc, #712]	; 801c888 <_ZN6BMI16011processDataEv+0x348>
 801c5c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801c5c4:	ed9f 6ba6 	vldr	d6, [pc, #664]	; 801c860 <_ZN6BMI16011processDataEv+0x320>
 801c5c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c5cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801c5d0:	eeb0 0a67 	vmov.f32	s0, s15
 801c5d4:	f7fc f82e 	bl	8018634 <_Z7deg2radf>
 801c5d8:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 801c5dc:	687b      	ldr	r3, [r7, #4]
 801c5de:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 801c5e2:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 125.0)
 801c5e6:	687b      	ldr	r3, [r7, #4]
 801c5e8:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 125.0)
 801c5ec:	687b      	ldr	r3, [r7, #4]
 801c5ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c5f2:	ee07 3a90 	vmov	s15, r3
 801c5f6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801c5fa:	ed9f 5ba3 	vldr	d5, [pc, #652]	; 801c888 <_ZN6BMI16011processDataEv+0x348>
 801c5fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801c602:	ed9f 6b97 	vldr	d6, [pc, #604]	; 801c860 <_ZN6BMI16011processDataEv+0x320>
 801c606:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c60a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801c60e:	eeb0 0a67 	vmov.f32	s0, s15
 801c612:	f7fc f80f 	bl	8018634 <_Z7deg2radf>
 801c616:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 801c620:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 125.0)
 801c624:	687b      	ldr	r3, [r7, #4]
 801c626:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 801c62a:	e193      	b.n	801c954 <_ZN6BMI16011processDataEv+0x414>
	}
	case BMI160_GYRO_RANGE_250_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 250.0)
 801c62c:	687b      	ldr	r3, [r7, #4]
 801c62e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c632:	ee07 3a90 	vmov	s15, r3
 801c636:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801c63a:	ed9f 5b93 	vldr	d5, [pc, #588]	; 801c888 <_ZN6BMI16011processDataEv+0x348>
 801c63e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801c642:	ed9f 6b89 	vldr	d6, [pc, #548]	; 801c868 <_ZN6BMI16011processDataEv+0x328>
 801c646:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c64a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801c64e:	eeb0 0a67 	vmov.f32	s0, s15
 801c652:	f7fb ffef 	bl	8018634 <_Z7deg2radf>
 801c656:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 801c65a:	687b      	ldr	r3, [r7, #4]
 801c65c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 801c660:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 250.0)
 801c664:	687b      	ldr	r3, [r7, #4]
 801c666:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 250.0)
 801c66a:	687b      	ldr	r3, [r7, #4]
 801c66c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c670:	ee07 3a90 	vmov	s15, r3
 801c674:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801c678:	ed9f 5b83 	vldr	d5, [pc, #524]	; 801c888 <_ZN6BMI16011processDataEv+0x348>
 801c67c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801c680:	ed9f 6b79 	vldr	d6, [pc, #484]	; 801c868 <_ZN6BMI16011processDataEv+0x328>
 801c684:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c688:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801c68c:	eeb0 0a67 	vmov.f32	s0, s15
 801c690:	f7fb ffd0 	bl	8018634 <_Z7deg2radf>
 801c694:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 801c698:	687b      	ldr	r3, [r7, #4]
 801c69a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 801c69e:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 250.0)
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 250.0)
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c6ae:	ee07 3a90 	vmov	s15, r3
 801c6b2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801c6b6:	ed9f 5b74 	vldr	d5, [pc, #464]	; 801c888 <_ZN6BMI16011processDataEv+0x348>
 801c6ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801c6be:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 801c868 <_ZN6BMI16011processDataEv+0x328>
 801c6c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c6c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801c6ca:	eeb0 0a67 	vmov.f32	s0, s15
 801c6ce:	f7fb ffb1 	bl	8018634 <_Z7deg2radf>
 801c6d2:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 801c6dc:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 250.0)
 801c6e0:	687b      	ldr	r3, [r7, #4]
 801c6e2:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 801c6e6:	e135      	b.n	801c954 <_ZN6BMI16011processDataEv+0x414>
	}
	case BMI160_GYRO_RANGE_500_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 500.0)
 801c6e8:	687b      	ldr	r3, [r7, #4]
 801c6ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c6ee:	ee07 3a90 	vmov	s15, r3
 801c6f2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801c6f6:	ed9f 5b64 	vldr	d5, [pc, #400]	; 801c888 <_ZN6BMI16011processDataEv+0x348>
 801c6fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801c6fe:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 801c870 <_ZN6BMI16011processDataEv+0x330>
 801c702:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c706:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801c70a:	eeb0 0a67 	vmov.f32	s0, s15
 801c70e:	f7fb ff91 	bl	8018634 <_Z7deg2radf>
 801c712:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 801c716:	687b      	ldr	r3, [r7, #4]
 801c718:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 801c71c:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 500.0)
 801c720:	687b      	ldr	r3, [r7, #4]
 801c722:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 500.0)
 801c726:	687b      	ldr	r3, [r7, #4]
 801c728:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c72c:	ee07 3a90 	vmov	s15, r3
 801c730:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801c734:	ed9f 5b54 	vldr	d5, [pc, #336]	; 801c888 <_ZN6BMI16011processDataEv+0x348>
 801c738:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801c73c:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 801c870 <_ZN6BMI16011processDataEv+0x330>
 801c740:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c744:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801c748:	eeb0 0a67 	vmov.f32	s0, s15
 801c74c:	f7fb ff72 	bl	8018634 <_Z7deg2radf>
 801c750:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 801c754:	687b      	ldr	r3, [r7, #4]
 801c756:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 801c75a:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 500.0)
 801c75e:	687b      	ldr	r3, [r7, #4]
 801c760:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 500.0)
 801c764:	687b      	ldr	r3, [r7, #4]
 801c766:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c76a:	ee07 3a90 	vmov	s15, r3
 801c76e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801c772:	ed9f 5b45 	vldr	d5, [pc, #276]	; 801c888 <_ZN6BMI16011processDataEv+0x348>
 801c776:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801c77a:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 801c870 <_ZN6BMI16011processDataEv+0x330>
 801c77e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c782:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801c786:	eeb0 0a67 	vmov.f32	s0, s15
 801c78a:	f7fb ff53 	bl	8018634 <_Z7deg2radf>
 801c78e:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 801c792:	687b      	ldr	r3, [r7, #4]
 801c794:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 801c798:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 500.0)
 801c79c:	687b      	ldr	r3, [r7, #4]
 801c79e:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 801c7a2:	e0d7      	b.n	801c954 <_ZN6BMI16011processDataEv+0x414>
	}
	case BMI160_GYRO_RANGE_1000_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 1000.0)
 801c7a4:	687b      	ldr	r3, [r7, #4]
 801c7a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c7aa:	ee07 3a90 	vmov	s15, r3
 801c7ae:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801c7b2:	ed9f 5b35 	vldr	d5, [pc, #212]	; 801c888 <_ZN6BMI16011processDataEv+0x348>
 801c7b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801c7ba:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 801c878 <_ZN6BMI16011processDataEv+0x338>
 801c7be:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c7c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801c7c6:	eeb0 0a67 	vmov.f32	s0, s15
 801c7ca:	f7fb ff33 	bl	8018634 <_Z7deg2radf>
 801c7ce:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 801c7d2:	687b      	ldr	r3, [r7, #4]
 801c7d4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 801c7d8:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 1000.0)
 801c7dc:	687b      	ldr	r3, [r7, #4]
 801c7de:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 1000.0)
 801c7e2:	687b      	ldr	r3, [r7, #4]
 801c7e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c7e8:	ee07 3a90 	vmov	s15, r3
 801c7ec:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801c7f0:	ed9f 5b25 	vldr	d5, [pc, #148]	; 801c888 <_ZN6BMI16011processDataEv+0x348>
 801c7f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801c7f8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 801c878 <_ZN6BMI16011processDataEv+0x338>
 801c7fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c800:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801c804:	eeb0 0a67 	vmov.f32	s0, s15
 801c808:	f7fb ff14 	bl	8018634 <_Z7deg2radf>
 801c80c:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 801c810:	687b      	ldr	r3, [r7, #4]
 801c812:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 801c816:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 1000.0)
 801c81a:	687b      	ldr	r3, [r7, #4]
 801c81c:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 1000.0)
 801c820:	687b      	ldr	r3, [r7, #4]
 801c822:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c826:	ee07 3a90 	vmov	s15, r3
 801c82a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801c82e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 801c888 <_ZN6BMI16011processDataEv+0x348>
 801c832:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801c836:	ed9f 6b10 	vldr	d6, [pc, #64]	; 801c878 <_ZN6BMI16011processDataEv+0x338>
 801c83a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c83e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801c842:	eeb0 0a67 	vmov.f32	s0, s15
 801c846:	f7fb fef5 	bl	8018634 <_Z7deg2radf>
 801c84a:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 801c84e:	687b      	ldr	r3, [r7, #4]
 801c850:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 801c854:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 1000.0)
 801c858:	687b      	ldr	r3, [r7, #4]
 801c85a:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 801c85e:	e079      	b.n	801c954 <_ZN6BMI16011processDataEv+0x414>
 801c860:	00000000 	.word	0x00000000
 801c864:	405f4000 	.word	0x405f4000
 801c868:	00000000 	.word	0x00000000
 801c86c:	406f4000 	.word	0x406f4000
 801c870:	00000000 	.word	0x00000000
 801c874:	407f4000 	.word	0x407f4000
 801c878:	00000000 	.word	0x00000000
 801c87c:	408f4000 	.word	0x408f4000
 801c880:	00000000 	.word	0x00000000
 801c884:	409f4000 	.word	0x409f4000
 801c888:	00000000 	.word	0x00000000
 801c88c:	40e00000 	.word	0x40e00000
 801c890:	51eb851f 	.word	0x51eb851f
 801c894:	40239eb8 	.word	0x40239eb8
	}
	case BMI160_GYRO_RANGE_2000_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 2000.0)
 801c898:	687b      	ldr	r3, [r7, #4]
 801c89a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c89e:	ee07 3a90 	vmov	s15, r3
 801c8a2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801c8a6:	ed1f 5b08 	vldr	d5, [pc, #-32]	; 801c888 <_ZN6BMI16011processDataEv+0x348>
 801c8aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801c8ae:	ed1f 6b0c 	vldr	d6, [pc, #-48]	; 801c880 <_ZN6BMI16011processDataEv+0x340>
 801c8b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c8b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801c8ba:	eeb0 0a67 	vmov.f32	s0, s15
 801c8be:	f7fb feb9 	bl	8018634 <_Z7deg2radf>
 801c8c2:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 801c8c6:	687b      	ldr	r3, [r7, #4]
 801c8c8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 801c8cc:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 2000.0)
 801c8d0:	687b      	ldr	r3, [r7, #4]
 801c8d2:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 2000.0)
 801c8d6:	687b      	ldr	r3, [r7, #4]
 801c8d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c8dc:	ee07 3a90 	vmov	s15, r3
 801c8e0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801c8e4:	ed1f 5b18 	vldr	d5, [pc, #-96]	; 801c888 <_ZN6BMI16011processDataEv+0x348>
 801c8e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801c8ec:	ed1f 6b1c 	vldr	d6, [pc, #-112]	; 801c880 <_ZN6BMI16011processDataEv+0x340>
 801c8f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c8f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801c8f8:	eeb0 0a67 	vmov.f32	s0, s15
 801c8fc:	f7fb fe9a 	bl	8018634 <_Z7deg2radf>
 801c900:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 801c904:	687b      	ldr	r3, [r7, #4]
 801c906:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 801c90a:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 2000.0)
 801c90e:	687b      	ldr	r3, [r7, #4]
 801c910:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 2000.0)
 801c914:	687b      	ldr	r3, [r7, #4]
 801c916:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c91a:	ee07 3a90 	vmov	s15, r3
 801c91e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801c922:	ed1f 5b27 	vldr	d5, [pc, #-156]	; 801c888 <_ZN6BMI16011processDataEv+0x348>
 801c926:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801c92a:	ed1f 6b2b 	vldr	d6, [pc, #-172]	; 801c880 <_ZN6BMI16011processDataEv+0x340>
 801c92e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c932:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801c936:	eeb0 0a67 	vmov.f32	s0, s15
 801c93a:	f7fb fe7b 	bl	8018634 <_Z7deg2radf>
 801c93e:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 801c942:	687b      	ldr	r3, [r7, #4]
 801c944:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 801c948:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 2000.0)
 801c94c:	687b      	ldr	r3, [r7, #4]
 801c94e:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 801c952:	bf00      	nop
	}
	}

	// Accelerometer
	switch (this->_config.acc.range) {
 801c954:	687b      	ldr	r3, [r7, #4]
 801c956:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801c95a:	3b03      	subs	r3, #3
 801c95c:	2b09      	cmp	r3, #9
 801c95e:	f200 8135 	bhi.w	801cbcc <_ZN6BMI16011processDataEv+0x68c>
 801c962:	a201      	add	r2, pc, #4	; (adr r2, 801c968 <_ZN6BMI16011processDataEv+0x428>)
 801c964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c968:	0801c991 	.word	0x0801c991
 801c96c:	0801cbcd 	.word	0x0801cbcd
 801c970:	0801ca17 	.word	0x0801ca17
 801c974:	0801cbcd 	.word	0x0801cbcd
 801c978:	0801cbcd 	.word	0x0801cbcd
 801c97c:	0801caa9 	.word	0x0801caa9
 801c980:	0801cbcd 	.word	0x0801cbcd
 801c984:	0801cbcd 	.word	0x0801cbcd
 801c988:	0801cbcd 	.word	0x0801cbcd
 801c98c:	0801cb3b 	.word	0x0801cb3b
	case BMI160_ACCEL_RANGE_2G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 2.0 * 9.81;
 801c990:	687b      	ldr	r3, [r7, #4]
 801c992:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801c996:	ee07 3a90 	vmov	s15, r3
 801c99a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801c99e:	ed1f 5b46 	vldr	d5, [pc, #-280]	; 801c888 <_ZN6BMI16011processDataEv+0x348>
 801c9a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801c9a6:	ee37 7b07 	vadd.f64	d7, d7, d7
 801c9aa:	ed1f 6b47 	vldr	d6, [pc, #-284]	; 801c890 <_ZN6BMI16011processDataEv+0x350>
 801c9ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c9b2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801c9b6:	687b      	ldr	r3, [r7, #4]
 801c9b8:	edc3 7a07 	vstr	s15, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 2.0 * 9.81;
 801c9bc:	687b      	ldr	r3, [r7, #4]
 801c9be:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801c9c2:	ee07 3a90 	vmov	s15, r3
 801c9c6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801c9ca:	ed1f 5b51 	vldr	d5, [pc, #-324]	; 801c888 <_ZN6BMI16011processDataEv+0x348>
 801c9ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801c9d2:	ee37 7b07 	vadd.f64	d7, d7, d7
 801c9d6:	ed1f 6b52 	vldr	d6, [pc, #-328]	; 801c890 <_ZN6BMI16011processDataEv+0x350>
 801c9da:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c9de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801c9e2:	687b      	ldr	r3, [r7, #4]
 801c9e4:	edc3 7a08 	vstr	s15, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 2.0 * 9.81;
 801c9e8:	687b      	ldr	r3, [r7, #4]
 801c9ea:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801c9ee:	ee07 3a90 	vmov	s15, r3
 801c9f2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801c9f6:	ed1f 5b5c 	vldr	d5, [pc, #-368]	; 801c888 <_ZN6BMI16011processDataEv+0x348>
 801c9fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801c9fe:	ee37 7b07 	vadd.f64	d7, d7, d7
 801ca02:	ed1f 6b5d 	vldr	d6, [pc, #-372]	; 801c890 <_ZN6BMI16011processDataEv+0x350>
 801ca06:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ca0a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801ca0e:	687b      	ldr	r3, [r7, #4]
 801ca10:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		break;
 801ca14:	e0da      	b.n	801cbcc <_ZN6BMI16011processDataEv+0x68c>
	}
	case BMI160_ACCEL_RANGE_4G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 4.0 * 9.81;
 801ca16:	687b      	ldr	r3, [r7, #4]
 801ca18:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801ca1c:	ee07 3a90 	vmov	s15, r3
 801ca20:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801ca24:	ed1f 5b68 	vldr	d5, [pc, #-416]	; 801c888 <_ZN6BMI16011processDataEv+0x348>
 801ca28:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801ca2c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 801ca30:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ca34:	ed1f 6b6a 	vldr	d6, [pc, #-424]	; 801c890 <_ZN6BMI16011processDataEv+0x350>
 801ca38:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ca3c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801ca40:	687b      	ldr	r3, [r7, #4]
 801ca42:	edc3 7a07 	vstr	s15, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 4.0 * 9.81;
 801ca46:	687b      	ldr	r3, [r7, #4]
 801ca48:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801ca4c:	ee07 3a90 	vmov	s15, r3
 801ca50:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801ca54:	ed1f 5b74 	vldr	d5, [pc, #-464]	; 801c888 <_ZN6BMI16011processDataEv+0x348>
 801ca58:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801ca5c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 801ca60:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ca64:	ed1f 6b76 	vldr	d6, [pc, #-472]	; 801c890 <_ZN6BMI16011processDataEv+0x350>
 801ca68:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ca6c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801ca70:	687b      	ldr	r3, [r7, #4]
 801ca72:	edc3 7a08 	vstr	s15, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 4.0 * 9.81;
 801ca76:	687b      	ldr	r3, [r7, #4]
 801ca78:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801ca7c:	ee07 3a90 	vmov	s15, r3
 801ca80:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801ca84:	ed1f 5b80 	vldr	d5, [pc, #-512]	; 801c888 <_ZN6BMI16011processDataEv+0x348>
 801ca88:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801ca8c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 801ca90:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ca94:	ed1f 6b82 	vldr	d6, [pc, #-520]	; 801c890 <_ZN6BMI16011processDataEv+0x350>
 801ca98:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ca9c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801caa0:	687b      	ldr	r3, [r7, #4]
 801caa2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		break;
 801caa6:	e091      	b.n	801cbcc <_ZN6BMI16011processDataEv+0x68c>
	}
	case BMI160_ACCEL_RANGE_8G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 8.0 * 9.81;
 801caa8:	687b      	ldr	r3, [r7, #4]
 801caaa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801caae:	ee07 3a90 	vmov	s15, r3
 801cab2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801cab6:	ed1f 5b8c 	vldr	d5, [pc, #-560]	; 801c888 <_ZN6BMI16011processDataEv+0x348>
 801caba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801cabe:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 801cac2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cac6:	ed1f 6b8e 	vldr	d6, [pc, #-568]	; 801c890 <_ZN6BMI16011processDataEv+0x350>
 801caca:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cace:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801cad2:	687b      	ldr	r3, [r7, #4]
 801cad4:	edc3 7a07 	vstr	s15, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 8.0 * 9.81;
 801cad8:	687b      	ldr	r3, [r7, #4]
 801cada:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801cade:	ee07 3a90 	vmov	s15, r3
 801cae2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801cae6:	ed1f 5b98 	vldr	d5, [pc, #-608]	; 801c888 <_ZN6BMI16011processDataEv+0x348>
 801caea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801caee:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 801caf2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801caf6:	ed1f 6b9a 	vldr	d6, [pc, #-616]	; 801c890 <_ZN6BMI16011processDataEv+0x350>
 801cafa:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cafe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801cb02:	687b      	ldr	r3, [r7, #4]
 801cb04:	edc3 7a08 	vstr	s15, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 8.0 * 9.81;
 801cb08:	687b      	ldr	r3, [r7, #4]
 801cb0a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801cb0e:	ee07 3a90 	vmov	s15, r3
 801cb12:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801cb16:	ed1f 5ba4 	vldr	d5, [pc, #-656]	; 801c888 <_ZN6BMI16011processDataEv+0x348>
 801cb1a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801cb1e:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 801cb22:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cb26:	ed1f 6ba6 	vldr	d6, [pc, #-664]	; 801c890 <_ZN6BMI16011processDataEv+0x350>
 801cb2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cb2e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801cb32:	687b      	ldr	r3, [r7, #4]
 801cb34:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		break;
 801cb38:	e048      	b.n	801cbcc <_ZN6BMI16011processDataEv+0x68c>
	}
	case BMI160_ACCEL_RANGE_16G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 16.0 * 9.81;
 801cb3a:	687b      	ldr	r3, [r7, #4]
 801cb3c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801cb40:	ee07 3a90 	vmov	s15, r3
 801cb44:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801cb48:	ed1f 5bb1 	vldr	d5, [pc, #-708]	; 801c888 <_ZN6BMI16011processDataEv+0x348>
 801cb4c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801cb50:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 801cb54:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cb58:	ed1f 6bb3 	vldr	d6, [pc, #-716]	; 801c890 <_ZN6BMI16011processDataEv+0x350>
 801cb5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cb60:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	edc3 7a07 	vstr	s15, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 16.0 * 9.81;
 801cb6a:	687b      	ldr	r3, [r7, #4]
 801cb6c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801cb70:	ee07 3a90 	vmov	s15, r3
 801cb74:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801cb78:	ed1f 5bbd 	vldr	d5, [pc, #-756]	; 801c888 <_ZN6BMI16011processDataEv+0x348>
 801cb7c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801cb80:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 801cb84:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cb88:	ed1f 6bbf 	vldr	d6, [pc, #-764]	; 801c890 <_ZN6BMI16011processDataEv+0x350>
 801cb8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cb90:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801cb94:	687b      	ldr	r3, [r7, #4]
 801cb96:	edc3 7a08 	vstr	s15, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 16.0 * 9.81;
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801cba0:	ee07 3a90 	vmov	s15, r3
 801cba4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801cba8:	ed1f 5bc9 	vldr	d5, [pc, #-804]	; 801c888 <_ZN6BMI16011processDataEv+0x348>
 801cbac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801cbb0:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 801cbb4:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cbb8:	ed1f 6bcb 	vldr	d6, [pc, #-812]	; 801c890 <_ZN6BMI16011processDataEv+0x350>
 801cbbc:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cbc0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		break;
 801cbca:	bf00      	nop
	}
	}

	return 1;
 801cbcc:	2301      	movs	r3, #1
}
 801cbce:	4618      	mov	r0, r3
 801cbd0:	3708      	adds	r7, #8
 801cbd2:	46bd      	mov	sp, r7
 801cbd4:	bd80      	pop	{r7, pc}
 801cbd6:	bf00      	nop

0801cbd8 <_ZN6BMI1607readGyrEv>:
	this->gyr_calib.y = gyr_y;
	this->gyr_calib.z = gyr_z;
}

/* ============================================================================= */
uint8_t BMI160::readGyr() {
 801cbd8:	b580      	push	{r7, lr}
 801cbda:	b084      	sub	sp, #16
 801cbdc:	af00      	add	r7, sp, #0
 801cbde:	6078      	str	r0, [r7, #4]
	uint8_t gyr_data[6] = { 0 };
 801cbe0:	2300      	movs	r3, #0
 801cbe2:	60bb      	str	r3, [r7, #8]
 801cbe4:	2300      	movs	r3, #0
 801cbe6:	81bb      	strh	r3, [r7, #12]
	this->readMultipleRegister(BMI160_REG_GYR_X_LOW, gyr_data, 6);
 801cbe8:	f107 0208 	add.w	r2, r7, #8
 801cbec:	2306      	movs	r3, #6
 801cbee:	210c      	movs	r1, #12
 801cbf0:	6878      	ldr	r0, [r7, #4]
 801cbf2:	f7ff fc30 	bl	801c456 <_ZN6BMI16020readMultipleRegisterEhPhh>

	this->gyr_raw.x = bytearray_to_int16(&gyr_data[0]);
 801cbf6:	f107 0308 	add.w	r3, r7, #8
 801cbfa:	4618      	mov	r0, r3
 801cbfc:	f000 f997 	bl	801cf2e <_Z18bytearray_to_int16Ph>
 801cc00:	4603      	mov	r3, r0
 801cc02:	461a      	mov	r2, r3
 801cc04:	687b      	ldr	r3, [r7, #4]
 801cc06:	801a      	strh	r2, [r3, #0]
	this->gyr_raw.y = bytearray_to_int16(&gyr_data[2]);
 801cc08:	f107 0308 	add.w	r3, r7, #8
 801cc0c:	3302      	adds	r3, #2
 801cc0e:	4618      	mov	r0, r3
 801cc10:	f000 f98d 	bl	801cf2e <_Z18bytearray_to_int16Ph>
 801cc14:	4603      	mov	r3, r0
 801cc16:	461a      	mov	r2, r3
 801cc18:	687b      	ldr	r3, [r7, #4]
 801cc1a:	805a      	strh	r2, [r3, #2]
	this->gyr_raw.z = bytearray_to_int16(&gyr_data[4]);
 801cc1c:	f107 0308 	add.w	r3, r7, #8
 801cc20:	3304      	adds	r3, #4
 801cc22:	4618      	mov	r0, r3
 801cc24:	f000 f983 	bl	801cf2e <_Z18bytearray_to_int16Ph>
 801cc28:	4603      	mov	r3, r0
 801cc2a:	461a      	mov	r2, r3
 801cc2c:	687b      	ldr	r3, [r7, #4]
 801cc2e:	809a      	strh	r2, [r3, #4]

	return 1;
 801cc30:	2301      	movs	r3, #1
}
 801cc32:	4618      	mov	r0, r3
 801cc34:	3710      	adds	r7, #16
 801cc36:	46bd      	mov	sp, r7
 801cc38:	bd80      	pop	{r7, pc}

0801cc3a <_ZN6BMI1607readAccEv>:

/* ============================================================================= */
uint8_t BMI160::readAcc() {
 801cc3a:	b580      	push	{r7, lr}
 801cc3c:	b084      	sub	sp, #16
 801cc3e:	af00      	add	r7, sp, #0
 801cc40:	6078      	str	r0, [r7, #4]
	uint8_t acc_data[6] = { 0 };
 801cc42:	2300      	movs	r3, #0
 801cc44:	60bb      	str	r3, [r7, #8]
 801cc46:	2300      	movs	r3, #0
 801cc48:	81bb      	strh	r3, [r7, #12]
	this->readMultipleRegister(BMI160_REG_ACC_X_LOW, acc_data, 6);
 801cc4a:	f107 0208 	add.w	r2, r7, #8
 801cc4e:	2306      	movs	r3, #6
 801cc50:	2112      	movs	r1, #18
 801cc52:	6878      	ldr	r0, [r7, #4]
 801cc54:	f7ff fbff 	bl	801c456 <_ZN6BMI16020readMultipleRegisterEhPhh>

	this->acc_raw.x = bytearray_to_int16(&acc_data[0]);
 801cc58:	f107 0308 	add.w	r3, r7, #8
 801cc5c:	4618      	mov	r0, r3
 801cc5e:	f000 f966 	bl	801cf2e <_Z18bytearray_to_int16Ph>
 801cc62:	4603      	mov	r3, r0
 801cc64:	461a      	mov	r2, r3
 801cc66:	687b      	ldr	r3, [r7, #4]
 801cc68:	829a      	strh	r2, [r3, #20]
	this->acc_raw.y = bytearray_to_int16(&acc_data[2]);
 801cc6a:	f107 0308 	add.w	r3, r7, #8
 801cc6e:	3302      	adds	r3, #2
 801cc70:	4618      	mov	r0, r3
 801cc72:	f000 f95c 	bl	801cf2e <_Z18bytearray_to_int16Ph>
 801cc76:	4603      	mov	r3, r0
 801cc78:	461a      	mov	r2, r3
 801cc7a:	687b      	ldr	r3, [r7, #4]
 801cc7c:	82da      	strh	r2, [r3, #22]
	this->acc_raw.z = bytearray_to_int16(&acc_data[4]);
 801cc7e:	f107 0308 	add.w	r3, r7, #8
 801cc82:	3304      	adds	r3, #4
 801cc84:	4618      	mov	r0, r3
 801cc86:	f000 f952 	bl	801cf2e <_Z18bytearray_to_int16Ph>
 801cc8a:	4603      	mov	r3, r0
 801cc8c:	461a      	mov	r2, r3
 801cc8e:	687b      	ldr	r3, [r7, #4]
 801cc90:	831a      	strh	r2, [r3, #24]

	return 1;
 801cc92:	2301      	movs	r3, #1
}
 801cc94:	4618      	mov	r0, r3
 801cc96:	3710      	adds	r7, #16
 801cc98:	46bd      	mov	sp, r7
 801cc9a:	bd80      	pop	{r7, pc}

0801cc9c <_ZN6BMI16013setGyroConfigEhh>:
	this->sensortime = bytearray_to_uint32(sensortime_data);
	return CORE_OK;
}

/* ============================================================================= */
uint8_t BMI160::setGyroConfig(uint8_t config, uint8_t range) {
 801cc9c:	b580      	push	{r7, lr}
 801cc9e:	b082      	sub	sp, #8
 801cca0:	af00      	add	r7, sp, #0
 801cca2:	6078      	str	r0, [r7, #4]
 801cca4:	460b      	mov	r3, r1
 801cca6:	70fb      	strb	r3, [r7, #3]
 801cca8:	4613      	mov	r3, r2
 801ccaa:	70bb      	strb	r3, [r7, #2]

	this->writeRegister(BMI160_REG_GYRO_RANGE, range);
 801ccac:	78bb      	ldrb	r3, [r7, #2]
 801ccae:	461a      	mov	r2, r3
 801ccb0:	2143      	movs	r1, #67	; 0x43
 801ccb2:	6878      	ldr	r0, [r7, #4]
 801ccb4:	f7ff faca 	bl	801c24c <_ZN6BMI16013writeRegisterEhh>
	this->writeRegister(BMI160_REG_GYRO_CONFIG, config);
 801ccb8:	78fb      	ldrb	r3, [r7, #3]
 801ccba:	461a      	mov	r2, r3
 801ccbc:	2142      	movs	r1, #66	; 0x42
 801ccbe:	6878      	ldr	r0, [r7, #4]
 801ccc0:	f7ff fac4 	bl	801c24c <_ZN6BMI16013writeRegisterEhh>

	return CORE_OK;
 801ccc4:	2301      	movs	r3, #1
}
 801ccc6:	4618      	mov	r0, r3
 801ccc8:	3708      	adds	r7, #8
 801ccca:	46bd      	mov	sp, r7
 801cccc:	bd80      	pop	{r7, pc}

0801ccce <_ZN6BMI16012setAccConfigEhh>:

/* ============================================================================= */
uint8_t BMI160::setAccConfig(uint8_t config, uint8_t range) {
 801ccce:	b580      	push	{r7, lr}
 801ccd0:	b082      	sub	sp, #8
 801ccd2:	af00      	add	r7, sp, #0
 801ccd4:	6078      	str	r0, [r7, #4]
 801ccd6:	460b      	mov	r3, r1
 801ccd8:	70fb      	strb	r3, [r7, #3]
 801ccda:	4613      	mov	r3, r2
 801ccdc:	70bb      	strb	r3, [r7, #2]
	this->writeRegister(BMI160_REG_ACCEL_CONFIG, config);
 801ccde:	78fb      	ldrb	r3, [r7, #3]
 801cce0:	461a      	mov	r2, r3
 801cce2:	2140      	movs	r1, #64	; 0x40
 801cce4:	6878      	ldr	r0, [r7, #4]
 801cce6:	f7ff fab1 	bl	801c24c <_ZN6BMI16013writeRegisterEhh>
	this->writeRegister(BMI160_REG_ACCEL_RANGE, range);
 801ccea:	78bb      	ldrb	r3, [r7, #2]
 801ccec:	461a      	mov	r2, r3
 801ccee:	2141      	movs	r1, #65	; 0x41
 801ccf0:	6878      	ldr	r0, [r7, #4]
 801ccf2:	f7ff faab 	bl	801c24c <_ZN6BMI16013writeRegisterEhh>

	return CORE_OK;
 801ccf6:	2301      	movs	r3, #1
}
 801ccf8:	4618      	mov	r0, r3
 801ccfa:	3708      	adds	r7, #8
 801ccfc:	46bd      	mov	sp, r7
 801ccfe:	bd80      	pop	{r7, pc}

0801cd00 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode>:

/* ============================================================================= */
uint8_t BMI160::setPowerMode(BMI160_PowerMode mode) {
 801cd00:	b580      	push	{r7, lr}
 801cd02:	b082      	sub	sp, #8
 801cd04:	af00      	add	r7, sp, #0
 801cd06:	6078      	str	r0, [r7, #4]
 801cd08:	460b      	mov	r3, r1
 801cd0a:	70fb      	strb	r3, [r7, #3]
	if (mode == BMI160_Power_Normal) {
 801cd0c:	78fb      	ldrb	r3, [r7, #3]
 801cd0e:	2b00      	cmp	r3, #0
 801cd10:	d113      	bne.n	801cd3a <_ZN6BMI16012setPowerModeE16BMI160_PowerMode+0x3a>
		delay(100);
 801cd12:	2064      	movs	r0, #100	; 0x64
 801cd14:	f7fb f923 	bl	8017f5e <_Z5delaym>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_GYRO_NORMAL_MODE);
 801cd18:	2215      	movs	r2, #21
 801cd1a:	217e      	movs	r1, #126	; 0x7e
 801cd1c:	6878      	ldr	r0, [r7, #4]
 801cd1e:	f7ff fa95 	bl	801c24c <_ZN6BMI16013writeRegisterEhh>
		delay(250);
 801cd22:	20fa      	movs	r0, #250	; 0xfa
 801cd24:	f7fb f91b 	bl	8017f5e <_Z5delaym>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_ACCEL_NORMAL_MODE);
 801cd28:	2211      	movs	r2, #17
 801cd2a:	217e      	movs	r1, #126	; 0x7e
 801cd2c:	6878      	ldr	r0, [r7, #4]
 801cd2e:	f7ff fa8d 	bl	801c24c <_ZN6BMI16013writeRegisterEhh>
		delay(250);
 801cd32:	20fa      	movs	r0, #250	; 0xfa
 801cd34:	f7fb f913 	bl	8017f5e <_Z5delaym>
 801cd38:	e012      	b.n	801cd60 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode+0x60>
	} else if (mode == BMI160_Power_Suspend) {
 801cd3a:	78fb      	ldrb	r3, [r7, #3]
 801cd3c:	2b01      	cmp	r3, #1
 801cd3e:	d10f      	bne.n	801cd60 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode+0x60>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_ACCEL_SUSPEND_MODE);
 801cd40:	2210      	movs	r2, #16
 801cd42:	217e      	movs	r1, #126	; 0x7e
 801cd44:	6878      	ldr	r0, [r7, #4]
 801cd46:	f7ff fa81 	bl	801c24c <_ZN6BMI16013writeRegisterEhh>
		delay(100);
 801cd4a:	2064      	movs	r0, #100	; 0x64
 801cd4c:	f7fb f907 	bl	8017f5e <_Z5delaym>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_GYRO_SUSPEND_MODE);
 801cd50:	2214      	movs	r2, #20
 801cd52:	217e      	movs	r1, #126	; 0x7e
 801cd54:	6878      	ldr	r0, [r7, #4]
 801cd56:	f7ff fa79 	bl	801c24c <_ZN6BMI16013writeRegisterEhh>
		delay(100);
 801cd5a:	2064      	movs	r0, #100	; 0x64
 801cd5c:	f7fb f8ff 	bl	8017f5e <_Z5delaym>
	}
	return CORE_OK;
 801cd60:	2301      	movs	r3, #1
}
 801cd62:	4618      	mov	r0, r3
 801cd64:	3708      	adds	r7, #8
 801cd66:	46bd      	mov	sp, r7
 801cd68:	bd80      	pop	{r7, pc}

0801cd6a <_ZN6BMI1605resetEv>:
	this->writeRegister(0x77, offset_register);

}

/* ============================================================================= */
void BMI160::reset() {
 801cd6a:	b580      	push	{r7, lr}
 801cd6c:	b082      	sub	sp, #8
 801cd6e:	af00      	add	r7, sp, #0
 801cd70:	6078      	str	r0, [r7, #4]
	this->writeRegister(BMI160_REG_COMMAND, 0xB6);
 801cd72:	22b6      	movs	r2, #182	; 0xb6
 801cd74:	217e      	movs	r1, #126	; 0x7e
 801cd76:	6878      	ldr	r0, [r7, #4]
 801cd78:	f7ff fa68 	bl	801c24c <_ZN6BMI16013writeRegisterEhh>
	delay(10);
 801cd7c:	200a      	movs	r0, #10
 801cd7e:	f7fb f8ee 	bl	8017f5e <_Z5delaym>
}
 801cd82:	bf00      	nop
 801cd84:	3708      	adds	r7, #8
 801cd86:	46bd      	mov	sp, r7
 801cd88:	bd80      	pop	{r7, pc}

0801cd8a <_Z10cobsEncodePhhS_>:
	@param buffer Pointer to encoded output buffer
	@return Encoded buffer length in bytes
	@note Does not output delimiter byte
*/
uint8_t cobsEncode(uint8_t *data_in, uint8_t length, uint8_t *data_out)
{
 801cd8a:	b480      	push	{r7}
 801cd8c:	b089      	sub	sp, #36	; 0x24
 801cd8e:	af00      	add	r7, sp, #0
 801cd90:	60f8      	str	r0, [r7, #12]
 801cd92:	460b      	mov	r3, r1
 801cd94:	607a      	str	r2, [r7, #4]
 801cd96:	72fb      	strb	r3, [r7, #11]

	uint8_t *encode = data_out; // Encoded byte pointer
 801cd98:	687b      	ldr	r3, [r7, #4]
 801cd9a:	61fb      	str	r3, [r7, #28]
	uint8_t *codep = encode++; // Output code pointer
 801cd9c:	69fb      	ldr	r3, [r7, #28]
 801cd9e:	1c5a      	adds	r2, r3, #1
 801cda0:	61fa      	str	r2, [r7, #28]
 801cda2:	61bb      	str	r3, [r7, #24]
	uint8_t code = 1; // Code value
 801cda4:	2301      	movs	r3, #1
 801cda6:	75fb      	strb	r3, [r7, #23]

	for (const uint8_t *byte = (const uint8_t *)data_in; length--; ++byte)
 801cda8:	68fb      	ldr	r3, [r7, #12]
 801cdaa:	613b      	str	r3, [r7, #16]
 801cdac:	7afb      	ldrb	r3, [r7, #11]
 801cdae:	1e5a      	subs	r2, r3, #1
 801cdb0:	72fa      	strb	r2, [r7, #11]
 801cdb2:	2b00      	cmp	r3, #0
 801cdb4:	bf14      	ite	ne
 801cdb6:	2301      	movne	r3, #1
 801cdb8:	2300      	moveq	r3, #0
 801cdba:	b2db      	uxtb	r3, r3
 801cdbc:	2b00      	cmp	r3, #0
 801cdbe:	d028      	beq.n	801ce12 <_Z10cobsEncodePhhS_+0x88>
	{
		if (*byte) // Byte not zero, write it
 801cdc0:	693b      	ldr	r3, [r7, #16]
 801cdc2:	781b      	ldrb	r3, [r3, #0]
 801cdc4:	2b00      	cmp	r3, #0
 801cdc6:	d008      	beq.n	801cdda <_Z10cobsEncodePhhS_+0x50>
			*encode++ = *byte, ++code;
 801cdc8:	69fb      	ldr	r3, [r7, #28]
 801cdca:	1c5a      	adds	r2, r3, #1
 801cdcc:	61fa      	str	r2, [r7, #28]
 801cdce:	693a      	ldr	r2, [r7, #16]
 801cdd0:	7812      	ldrb	r2, [r2, #0]
 801cdd2:	701a      	strb	r2, [r3, #0]
 801cdd4:	7dfb      	ldrb	r3, [r7, #23]
 801cdd6:	3301      	adds	r3, #1
 801cdd8:	75fb      	strb	r3, [r7, #23]

		if (!*byte || code == 0xff) // Input is zero or block completed, restart
 801cdda:	693b      	ldr	r3, [r7, #16]
 801cddc:	781b      	ldrb	r3, [r3, #0]
 801cdde:	2b00      	cmp	r3, #0
 801cde0:	d002      	beq.n	801cde8 <_Z10cobsEncodePhhS_+0x5e>
 801cde2:	7dfb      	ldrb	r3, [r7, #23]
 801cde4:	2bff      	cmp	r3, #255	; 0xff
 801cde6:	d110      	bne.n	801ce0a <_Z10cobsEncodePhhS_+0x80>
		{
			*codep = code, code = 1, codep = encode;
 801cde8:	69bb      	ldr	r3, [r7, #24]
 801cdea:	7dfa      	ldrb	r2, [r7, #23]
 801cdec:	701a      	strb	r2, [r3, #0]
 801cdee:	2301      	movs	r3, #1
 801cdf0:	75fb      	strb	r3, [r7, #23]
 801cdf2:	69fb      	ldr	r3, [r7, #28]
 801cdf4:	61bb      	str	r3, [r7, #24]
			if (!*byte || length)
 801cdf6:	693b      	ldr	r3, [r7, #16]
 801cdf8:	781b      	ldrb	r3, [r3, #0]
 801cdfa:	2b00      	cmp	r3, #0
 801cdfc:	d002      	beq.n	801ce04 <_Z10cobsEncodePhhS_+0x7a>
 801cdfe:	7afb      	ldrb	r3, [r7, #11]
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	d002      	beq.n	801ce0a <_Z10cobsEncodePhhS_+0x80>
				++encode;
 801ce04:	69fb      	ldr	r3, [r7, #28]
 801ce06:	3301      	adds	r3, #1
 801ce08:	61fb      	str	r3, [r7, #28]
	for (const uint8_t *byte = (const uint8_t *)data_in; length--; ++byte)
 801ce0a:	693b      	ldr	r3, [r7, #16]
 801ce0c:	3301      	adds	r3, #1
 801ce0e:	613b      	str	r3, [r7, #16]
 801ce10:	e7cc      	b.n	801cdac <_Z10cobsEncodePhhS_+0x22>
		}
	}
	*codep = code; // Write final code value
 801ce12:	69bb      	ldr	r3, [r7, #24]
 801ce14:	7dfa      	ldrb	r2, [r7, #23]
 801ce16:	701a      	strb	r2, [r3, #0]

	return (uint8_t)(encode - data_out);
 801ce18:	69fa      	ldr	r2, [r7, #28]
 801ce1a:	687b      	ldr	r3, [r7, #4]
 801ce1c:	1ad3      	subs	r3, r2, r3
 801ce1e:	b2db      	uxtb	r3, r3
}
 801ce20:	4618      	mov	r0, r3
 801ce22:	3724      	adds	r7, #36	; 0x24
 801ce24:	46bd      	mov	sp, r7
 801ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce2a:	4770      	bx	lr

0801ce2c <_Z10cobsDecodePhhS_>:
	@param data Pointer to decoded output data
	@return Number of bytes successfully decoded
	@note Stops decoding if delimiter byte is found
*/
uint8_t cobsDecode(uint8_t *buffer, uint8_t length, uint8_t *data)
{
 801ce2c:	b480      	push	{r7}
 801ce2e:	b089      	sub	sp, #36	; 0x24
 801ce30:	af00      	add	r7, sp, #0
 801ce32:	60f8      	str	r0, [r7, #12]
 801ce34:	460b      	mov	r3, r1
 801ce36:	607a      	str	r2, [r7, #4]
 801ce38:	72fb      	strb	r3, [r7, #11]

	const uint8_t *byte = buffer; // Encoded input byte pointer
 801ce3a:	68fb      	ldr	r3, [r7, #12]
 801ce3c:	61fb      	str	r3, [r7, #28]
	uint8_t *decode = (uint8_t *)data; // Decoded output byte pointer
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	61bb      	str	r3, [r7, #24]

	for (uint8_t code = 0xff, block = 0; byte < buffer + length; --block)
 801ce42:	23ff      	movs	r3, #255	; 0xff
 801ce44:	75fb      	strb	r3, [r7, #23]
 801ce46:	2300      	movs	r3, #0
 801ce48:	75bb      	strb	r3, [r7, #22]
 801ce4a:	7afb      	ldrb	r3, [r7, #11]
 801ce4c:	68fa      	ldr	r2, [r7, #12]
 801ce4e:	4413      	add	r3, r2
 801ce50:	69fa      	ldr	r2, [r7, #28]
 801ce52:	429a      	cmp	r2, r3
 801ce54:	d222      	bcs.n	801ce9c <_Z10cobsDecodePhhS_+0x70>
	{
		if (block) // Decode block byte
 801ce56:	7dbb      	ldrb	r3, [r7, #22]
 801ce58:	2b00      	cmp	r3, #0
 801ce5a:	d008      	beq.n	801ce6e <_Z10cobsDecodePhhS_+0x42>
			*decode++ = *byte++;
 801ce5c:	69fa      	ldr	r2, [r7, #28]
 801ce5e:	1c53      	adds	r3, r2, #1
 801ce60:	61fb      	str	r3, [r7, #28]
 801ce62:	69bb      	ldr	r3, [r7, #24]
 801ce64:	1c59      	adds	r1, r3, #1
 801ce66:	61b9      	str	r1, [r7, #24]
 801ce68:	7812      	ldrb	r2, [r2, #0]
 801ce6a:	701a      	strb	r2, [r3, #0]
 801ce6c:	e011      	b.n	801ce92 <_Z10cobsDecodePhhS_+0x66>
		else
		{
			if (code != 0xff) // Encoded zero, write it
 801ce6e:	7dfb      	ldrb	r3, [r7, #23]
 801ce70:	2bff      	cmp	r3, #255	; 0xff
 801ce72:	d004      	beq.n	801ce7e <_Z10cobsDecodePhhS_+0x52>
				*decode++ = 0;
 801ce74:	69bb      	ldr	r3, [r7, #24]
 801ce76:	1c5a      	adds	r2, r3, #1
 801ce78:	61ba      	str	r2, [r7, #24]
 801ce7a:	2200      	movs	r2, #0
 801ce7c:	701a      	strb	r2, [r3, #0]
			block = code = *byte++; // Next block length
 801ce7e:	69fb      	ldr	r3, [r7, #28]
 801ce80:	1c5a      	adds	r2, r3, #1
 801ce82:	61fa      	str	r2, [r7, #28]
 801ce84:	781b      	ldrb	r3, [r3, #0]
 801ce86:	75fb      	strb	r3, [r7, #23]
 801ce88:	7dfb      	ldrb	r3, [r7, #23]
 801ce8a:	75bb      	strb	r3, [r7, #22]
			if (!code) // Delimiter code found
 801ce8c:	7dfb      	ldrb	r3, [r7, #23]
 801ce8e:	2b00      	cmp	r3, #0
 801ce90:	d003      	beq.n	801ce9a <_Z10cobsDecodePhhS_+0x6e>
	for (uint8_t code = 0xff, block = 0; byte < buffer + length; --block)
 801ce92:	7dbb      	ldrb	r3, [r7, #22]
 801ce94:	3b01      	subs	r3, #1
 801ce96:	75bb      	strb	r3, [r7, #22]
 801ce98:	e7d7      	b.n	801ce4a <_Z10cobsDecodePhhS_+0x1e>
				break;
 801ce9a:	bf00      	nop
		}
	}

	return (uint8_t)(decode - (uint8_t *)data);
 801ce9c:	69ba      	ldr	r2, [r7, #24]
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	1ad3      	subs	r3, r2, r3
 801cea2:	b2db      	uxtb	r3, r3
}
 801cea4:	4618      	mov	r0, r3
 801cea6:	3724      	adds	r7, #36	; 0x24
 801cea8:	46bd      	mov	sp, r7
 801ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ceae:	4770      	bx	lr

0801ceb0 <_Z17cobsDecodeInPlacePhh>:



uint8_t cobsDecodeInPlace(uint8_t *buffer, uint8_t length)
{
 801ceb0:	b580      	push	{r7, lr}
 801ceb2:	b084      	sub	sp, #16
 801ceb4:	af00      	add	r7, sp, #0
 801ceb6:	6078      	str	r0, [r7, #4]
 801ceb8:	460b      	mov	r3, r1
 801ceba:	70fb      	strb	r3, [r7, #3]
	uint8_t decode_len = cobsDecode(buffer, length, cobsDecodeBuffer);
 801cebc:	78fb      	ldrb	r3, [r7, #3]
 801cebe:	4a0f      	ldr	r2, [pc, #60]	; (801cefc <_Z17cobsDecodeInPlacePhh+0x4c>)
 801cec0:	4619      	mov	r1, r3
 801cec2:	6878      	ldr	r0, [r7, #4]
 801cec4:	f7ff ffb2 	bl	801ce2c <_Z10cobsDecodePhhS_>
 801cec8:	4603      	mov	r3, r0
 801ceca:	72fb      	strb	r3, [r7, #11]

	for (int i = 0; i<decode_len; i++){
 801cecc:	2300      	movs	r3, #0
 801cece:	60fb      	str	r3, [r7, #12]
 801ced0:	7afb      	ldrb	r3, [r7, #11]
 801ced2:	68fa      	ldr	r2, [r7, #12]
 801ced4:	429a      	cmp	r2, r3
 801ced6:	da0b      	bge.n	801cef0 <_Z17cobsDecodeInPlacePhh+0x40>
		buffer[i] = cobsDecodeBuffer[i];
 801ced8:	68fb      	ldr	r3, [r7, #12]
 801ceda:	687a      	ldr	r2, [r7, #4]
 801cedc:	4413      	add	r3, r2
 801cede:	4907      	ldr	r1, [pc, #28]	; (801cefc <_Z17cobsDecodeInPlacePhh+0x4c>)
 801cee0:	68fa      	ldr	r2, [r7, #12]
 801cee2:	440a      	add	r2, r1
 801cee4:	7812      	ldrb	r2, [r2, #0]
 801cee6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<decode_len; i++){
 801cee8:	68fb      	ldr	r3, [r7, #12]
 801ceea:	3301      	adds	r3, #1
 801ceec:	60fb      	str	r3, [r7, #12]
 801ceee:	e7ef      	b.n	801ced0 <_Z17cobsDecodeInPlacePhh+0x20>
	}

	return decode_len;
 801cef0:	7afb      	ldrb	r3, [r7, #11]
}
 801cef2:	4618      	mov	r0, r3
 801cef4:	3710      	adds	r7, #16
 801cef6:	46bd      	mov	sp, r7
 801cef8:	bd80      	pop	{r7, pc}
 801cefa:	bf00      	nop
 801cefc:	2401dbe8 	.word	0x2401dbe8

0801cf00 <_Z15uint8_to_uint16hh>:
	temp = ((bytearray[3] << 24) | (bytearray[2] << 16) | (bytearray[1] << 8)
			| bytearray[0]);
	return *((float*) &temp);
}

uint16_t uint8_to_uint16(uint8_t byte1, uint8_t byte2) {
 801cf00:	b480      	push	{r7}
 801cf02:	b085      	sub	sp, #20
 801cf04:	af00      	add	r7, sp, #0
 801cf06:	4603      	mov	r3, r0
 801cf08:	460a      	mov	r2, r1
 801cf0a:	71fb      	strb	r3, [r7, #7]
 801cf0c:	4613      	mov	r3, r2
 801cf0e:	71bb      	strb	r3, [r7, #6]
	uint16_t out = byte1 << 8 | byte2;
 801cf10:	79fb      	ldrb	r3, [r7, #7]
 801cf12:	021b      	lsls	r3, r3, #8
 801cf14:	b21a      	sxth	r2, r3
 801cf16:	79bb      	ldrb	r3, [r7, #6]
 801cf18:	b21b      	sxth	r3, r3
 801cf1a:	4313      	orrs	r3, r2
 801cf1c:	b21b      	sxth	r3, r3
 801cf1e:	81fb      	strh	r3, [r7, #14]
	return out;
 801cf20:	89fb      	ldrh	r3, [r7, #14]
}
 801cf22:	4618      	mov	r0, r3
 801cf24:	3714      	adds	r7, #20
 801cf26:	46bd      	mov	sp, r7
 801cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf2c:	4770      	bx	lr

0801cf2e <_Z18bytearray_to_int16Ph>:
uint16_t bytearray_to_uint16(uint8_t *bytearray) {
	uint16_t out = bytearray[1] << 8 | bytearray[0];
	return out;
}

int16_t bytearray_to_int16(uint8_t *bytearray) {
 801cf2e:	b480      	push	{r7}
 801cf30:	b085      	sub	sp, #20
 801cf32:	af00      	add	r7, sp, #0
 801cf34:	6078      	str	r0, [r7, #4]
	int16_t out = bytearray[1] << 8 | bytearray[0];
 801cf36:	687b      	ldr	r3, [r7, #4]
 801cf38:	3301      	adds	r3, #1
 801cf3a:	781b      	ldrb	r3, [r3, #0]
 801cf3c:	021b      	lsls	r3, r3, #8
 801cf3e:	b21a      	sxth	r2, r3
 801cf40:	687b      	ldr	r3, [r7, #4]
 801cf42:	781b      	ldrb	r3, [r3, #0]
 801cf44:	b21b      	sxth	r3, r3
 801cf46:	4313      	orrs	r3, r2
 801cf48:	81fb      	strh	r3, [r7, #14]
	return out;
 801cf4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 801cf4e:	4618      	mov	r0, r3
 801cf50:	3714      	adds	r7, #20
 801cf52:	46bd      	mov	sp, r7
 801cf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf58:	4770      	bx	lr

0801cf5a <_Z17core_ErrorHandleri>:
 */


#include "core_errors.h"

void core_ErrorHandler(int error_id) {
 801cf5a:	b480      	push	{r7}
 801cf5c:	b083      	sub	sp, #12
 801cf5e:	af00      	add	r7, sp, #0
 801cf60:	6078      	str	r0, [r7, #4]
	while(1);
 801cf62:	e7fe      	b.n	801cf62 <_Z17core_ErrorHandleri+0x8>

0801cf64 <_Z5limitfff>:

	return sum / len;
}


float limit(float data, float min_value, float max_value){
 801cf64:	b480      	push	{r7}
 801cf66:	b085      	sub	sp, #20
 801cf68:	af00      	add	r7, sp, #0
 801cf6a:	ed87 0a03 	vstr	s0, [r7, #12]
 801cf6e:	edc7 0a02 	vstr	s1, [r7, #8]
 801cf72:	ed87 1a01 	vstr	s2, [r7, #4]
	if (data > max_value){
 801cf76:	ed97 7a03 	vldr	s14, [r7, #12]
 801cf7a:	edd7 7a01 	vldr	s15, [r7, #4]
 801cf7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cf82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf86:	dd01      	ble.n	801cf8c <_Z5limitfff+0x28>
		data = max_value;
 801cf88:	687b      	ldr	r3, [r7, #4]
 801cf8a:	60fb      	str	r3, [r7, #12]
	}
	if (data < min_value){
 801cf8c:	ed97 7a03 	vldr	s14, [r7, #12]
 801cf90:	edd7 7a02 	vldr	s15, [r7, #8]
 801cf94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cf98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf9c:	d501      	bpl.n	801cfa2 <_Z5limitfff+0x3e>
		data = min_value;
 801cf9e:	68bb      	ldr	r3, [r7, #8]
 801cfa0:	60fb      	str	r3, [r7, #12]
	}
	return data;
 801cfa2:	68fb      	ldr	r3, [r7, #12]
 801cfa4:	ee07 3a90 	vmov	s15, r3
}
 801cfa8:	eeb0 0a67 	vmov.f32	s0, s15
 801cfac:	3714      	adds	r7, #20
 801cfae:	46bd      	mov	sp, r7
 801cfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfb4:	4770      	bx	lr

0801cfb6 <_Z5limitff>:


float limit(float data, float max_value){
 801cfb6:	b580      	push	{r7, lr}
 801cfb8:	b082      	sub	sp, #8
 801cfba:	af00      	add	r7, sp, #0
 801cfbc:	ed87 0a01 	vstr	s0, [r7, #4]
 801cfc0:	edc7 0a00 	vstr	s1, [r7]
	return limit(data, -max_value, max_value);
 801cfc4:	edd7 7a00 	vldr	s15, [r7]
 801cfc8:	eef1 7a67 	vneg.f32	s15, s15
 801cfcc:	ed97 1a00 	vldr	s2, [r7]
 801cfd0:	eef0 0a67 	vmov.f32	s1, s15
 801cfd4:	ed97 0a01 	vldr	s0, [r7, #4]
 801cfd8:	f7ff ffc4 	bl	801cf64 <_Z5limitfff>
 801cfdc:	eef0 7a40 	vmov.f32	s15, s0
}
 801cfe0:	eeb0 0a67 	vmov.f32	s0, s15
 801cfe4:	3708      	adds	r7, #8
 801cfe6:	46bd      	mov	sp, r7
 801cfe8:	bd80      	pop	{r7, pc}

0801cfea <_ZN15core_utils_GPIOC1EP12GPIO_TypeDeft>:
#include "core_utils_gpio.h"

static core_utils_Callback<void, void> callbacks[16];
static void execute_gpio_callback(uint16_t gpio_pin);

core_utils_GPIO::core_utils_GPIO(GPIO_TypeDef *GPIOx, uint16_t pin) {
 801cfea:	b480      	push	{r7}
 801cfec:	b085      	sub	sp, #20
 801cfee:	af00      	add	r7, sp, #0
 801cff0:	60f8      	str	r0, [r7, #12]
 801cff2:	60b9      	str	r1, [r7, #8]
 801cff4:	4613      	mov	r3, r2
 801cff6:	80fb      	strh	r3, [r7, #6]
	this->GPIOx = GPIOx;
 801cff8:	68fb      	ldr	r3, [r7, #12]
 801cffa:	68ba      	ldr	r2, [r7, #8]
 801cffc:	601a      	str	r2, [r3, #0]
	this->pin = pin;
 801cffe:	68fb      	ldr	r3, [r7, #12]
 801d000:	88fa      	ldrh	r2, [r7, #6]
 801d002:	809a      	strh	r2, [r3, #4]
}
 801d004:	68fb      	ldr	r3, [r7, #12]
 801d006:	4618      	mov	r0, r3
 801d008:	3714      	adds	r7, #20
 801d00a:	46bd      	mov	sp, r7
 801d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d010:	4770      	bx	lr

0801d012 <_ZN15core_utils_GPIO5writeEh>:

/* -------------------------------------------------------------------------------- */
void core_utils_GPIO::write(uint8_t value) {
 801d012:	b580      	push	{r7, lr}
 801d014:	b082      	sub	sp, #8
 801d016:	af00      	add	r7, sp, #0
 801d018:	6078      	str	r0, [r7, #4]
 801d01a:	460b      	mov	r3, r1
 801d01c:	70fb      	strb	r3, [r7, #3]
	if (value) {
 801d01e:	78fb      	ldrb	r3, [r7, #3]
 801d020:	2b00      	cmp	r3, #0
 801d022:	d008      	beq.n	801d036 <_ZN15core_utils_GPIO5writeEh+0x24>
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_SET);
 801d024:	687b      	ldr	r3, [r7, #4]
 801d026:	6818      	ldr	r0, [r3, #0]
 801d028:	687b      	ldr	r3, [r7, #4]
 801d02a:	889b      	ldrh	r3, [r3, #4]
 801d02c:	2201      	movs	r2, #1
 801d02e:	4619      	mov	r1, r3
 801d030:	f7e7 ff98 	bl	8004f64 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
	}
}
 801d034:	e007      	b.n	801d046 <_ZN15core_utils_GPIO5writeEh+0x34>
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 801d036:	687b      	ldr	r3, [r7, #4]
 801d038:	6818      	ldr	r0, [r3, #0]
 801d03a:	687b      	ldr	r3, [r7, #4]
 801d03c:	889b      	ldrh	r3, [r3, #4]
 801d03e:	2200      	movs	r2, #0
 801d040:	4619      	mov	r1, r3
 801d042:	f7e7 ff8f 	bl	8004f64 <HAL_GPIO_WritePin>
}
 801d046:	bf00      	nop
 801d048:	3708      	adds	r7, #8
 801d04a:	46bd      	mov	sp, r7
 801d04c:	bd80      	pop	{r7, pc}
	...

0801d050 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE>:
	core_utils_gpio_registerExtiCallback(line,
			core_utils_Callback<void, void>(function));
}
/* -------------------------------------------------------------------------------- */
void core_utils_gpio_registerExtiCallback(uint16_t line,
		core_utils_Callback<void, void> callback) {
 801d050:	b580      	push	{r7, lr}
 801d052:	b082      	sub	sp, #8
 801d054:	af00      	add	r7, sp, #0
 801d056:	4603      	mov	r3, r0
 801d058:	6039      	str	r1, [r7, #0]
 801d05a:	80fb      	strh	r3, [r7, #6]
	switch (line) {
 801d05c:	88fb      	ldrh	r3, [r7, #6]
 801d05e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d062:	f000 80db 	beq.w	801d21c <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1cc>
 801d066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d06a:	f300 80dc 	bgt.w	801d226 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 801d06e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d072:	f000 80ce 	beq.w	801d212 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1c2>
 801d076:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d07a:	f300 80d4 	bgt.w	801d226 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 801d07e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d082:	f000 80c1 	beq.w	801d208 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1b8>
 801d086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d08a:	f300 80cc 	bgt.w	801d226 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 801d08e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d092:	f000 80b4 	beq.w	801d1fe <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1ae>
 801d096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d09a:	f300 80c4 	bgt.w	801d226 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 801d09e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801d0a2:	f000 80a7 	beq.w	801d1f4 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1a4>
 801d0a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801d0aa:	f300 80bc 	bgt.w	801d226 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 801d0ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d0b2:	f000 809a 	beq.w	801d1ea <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x19a>
 801d0b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d0ba:	f300 80b4 	bgt.w	801d226 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 801d0be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d0c2:	f000 808d 	beq.w	801d1e0 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x190>
 801d0c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d0ca:	f300 80ac 	bgt.w	801d226 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 801d0ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d0d2:	f000 8080 	beq.w	801d1d6 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x186>
 801d0d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d0da:	f300 80a4 	bgt.w	801d226 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 801d0de:	2b80      	cmp	r3, #128	; 0x80
 801d0e0:	d074      	beq.n	801d1cc <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x17c>
 801d0e2:	2b80      	cmp	r3, #128	; 0x80
 801d0e4:	f300 809f 	bgt.w	801d226 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 801d0e8:	2b20      	cmp	r3, #32
 801d0ea:	dc49      	bgt.n	801d180 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x130>
 801d0ec:	2b00      	cmp	r3, #0
 801d0ee:	f340 809a 	ble.w	801d226 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 801d0f2:	3b01      	subs	r3, #1
 801d0f4:	2b1f      	cmp	r3, #31
 801d0f6:	f200 8096 	bhi.w	801d226 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 801d0fa:	a201      	add	r2, pc, #4	; (adr r2, 801d100 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0xb0>)
 801d0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d100:	0801d187 	.word	0x0801d187
 801d104:	0801d191 	.word	0x0801d191
 801d108:	0801d227 	.word	0x0801d227
 801d10c:	0801d19b 	.word	0x0801d19b
 801d110:	0801d227 	.word	0x0801d227
 801d114:	0801d227 	.word	0x0801d227
 801d118:	0801d227 	.word	0x0801d227
 801d11c:	0801d1a5 	.word	0x0801d1a5
 801d120:	0801d227 	.word	0x0801d227
 801d124:	0801d227 	.word	0x0801d227
 801d128:	0801d227 	.word	0x0801d227
 801d12c:	0801d227 	.word	0x0801d227
 801d130:	0801d227 	.word	0x0801d227
 801d134:	0801d227 	.word	0x0801d227
 801d138:	0801d227 	.word	0x0801d227
 801d13c:	0801d1af 	.word	0x0801d1af
 801d140:	0801d227 	.word	0x0801d227
 801d144:	0801d227 	.word	0x0801d227
 801d148:	0801d227 	.word	0x0801d227
 801d14c:	0801d227 	.word	0x0801d227
 801d150:	0801d227 	.word	0x0801d227
 801d154:	0801d227 	.word	0x0801d227
 801d158:	0801d227 	.word	0x0801d227
 801d15c:	0801d227 	.word	0x0801d227
 801d160:	0801d227 	.word	0x0801d227
 801d164:	0801d227 	.word	0x0801d227
 801d168:	0801d227 	.word	0x0801d227
 801d16c:	0801d227 	.word	0x0801d227
 801d170:	0801d227 	.word	0x0801d227
 801d174:	0801d227 	.word	0x0801d227
 801d178:	0801d227 	.word	0x0801d227
 801d17c:	0801d1b9 	.word	0x0801d1b9
 801d180:	2b40      	cmp	r3, #64	; 0x40
 801d182:	d01e      	beq.n	801d1c2 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x172>
	case GPIO_PIN_15: {
		callbacks[15] = callback;
		break;
	}
	}
}
 801d184:	e04f      	b.n	801d226 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[0] = callback;
 801d186:	6839      	ldr	r1, [r7, #0]
 801d188:	4829      	ldr	r0, [pc, #164]	; (801d230 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1e0>)
 801d18a:	f7f5 fac3 	bl	8012714 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801d18e:	e04a      	b.n	801d226 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[1] = callback;
 801d190:	6839      	ldr	r1, [r7, #0]
 801d192:	4828      	ldr	r0, [pc, #160]	; (801d234 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1e4>)
 801d194:	f7f5 fabe 	bl	8012714 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801d198:	e045      	b.n	801d226 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[2] = callback;
 801d19a:	6839      	ldr	r1, [r7, #0]
 801d19c:	4826      	ldr	r0, [pc, #152]	; (801d238 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1e8>)
 801d19e:	f7f5 fab9 	bl	8012714 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801d1a2:	e040      	b.n	801d226 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[3] = callback;
 801d1a4:	6839      	ldr	r1, [r7, #0]
 801d1a6:	4825      	ldr	r0, [pc, #148]	; (801d23c <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1ec>)
 801d1a8:	f7f5 fab4 	bl	8012714 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801d1ac:	e03b      	b.n	801d226 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[4] = callback;
 801d1ae:	6839      	ldr	r1, [r7, #0]
 801d1b0:	4823      	ldr	r0, [pc, #140]	; (801d240 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1f0>)
 801d1b2:	f7f5 faaf 	bl	8012714 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801d1b6:	e036      	b.n	801d226 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[5] = callback;
 801d1b8:	6839      	ldr	r1, [r7, #0]
 801d1ba:	4822      	ldr	r0, [pc, #136]	; (801d244 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1f4>)
 801d1bc:	f7f5 faaa 	bl	8012714 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801d1c0:	e031      	b.n	801d226 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[6] = callback;
 801d1c2:	6839      	ldr	r1, [r7, #0]
 801d1c4:	4820      	ldr	r0, [pc, #128]	; (801d248 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1f8>)
 801d1c6:	f7f5 faa5 	bl	8012714 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801d1ca:	e02c      	b.n	801d226 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[7] = callback;
 801d1cc:	6839      	ldr	r1, [r7, #0]
 801d1ce:	481f      	ldr	r0, [pc, #124]	; (801d24c <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1fc>)
 801d1d0:	f7f5 faa0 	bl	8012714 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801d1d4:	e027      	b.n	801d226 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[8] = callback;
 801d1d6:	6839      	ldr	r1, [r7, #0]
 801d1d8:	481d      	ldr	r0, [pc, #116]	; (801d250 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x200>)
 801d1da:	f7f5 fa9b 	bl	8012714 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801d1de:	e022      	b.n	801d226 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[9] = callback;
 801d1e0:	6839      	ldr	r1, [r7, #0]
 801d1e2:	481c      	ldr	r0, [pc, #112]	; (801d254 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x204>)
 801d1e4:	f7f5 fa96 	bl	8012714 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801d1e8:	e01d      	b.n	801d226 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[10] = callback;
 801d1ea:	6839      	ldr	r1, [r7, #0]
 801d1ec:	481a      	ldr	r0, [pc, #104]	; (801d258 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x208>)
 801d1ee:	f7f5 fa91 	bl	8012714 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801d1f2:	e018      	b.n	801d226 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[11] = callback;
 801d1f4:	6839      	ldr	r1, [r7, #0]
 801d1f6:	4819      	ldr	r0, [pc, #100]	; (801d25c <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x20c>)
 801d1f8:	f7f5 fa8c 	bl	8012714 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801d1fc:	e013      	b.n	801d226 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[12] = callback;
 801d1fe:	6839      	ldr	r1, [r7, #0]
 801d200:	4817      	ldr	r0, [pc, #92]	; (801d260 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x210>)
 801d202:	f7f5 fa87 	bl	8012714 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801d206:	e00e      	b.n	801d226 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[13] = callback;
 801d208:	6839      	ldr	r1, [r7, #0]
 801d20a:	4816      	ldr	r0, [pc, #88]	; (801d264 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x214>)
 801d20c:	f7f5 fa82 	bl	8012714 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801d210:	e009      	b.n	801d226 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[14] = callback;
 801d212:	6839      	ldr	r1, [r7, #0]
 801d214:	4814      	ldr	r0, [pc, #80]	; (801d268 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x218>)
 801d216:	f7f5 fa7d 	bl	8012714 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801d21a:	e004      	b.n	801d226 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[15] = callback;
 801d21c:	6839      	ldr	r1, [r7, #0]
 801d21e:	4813      	ldr	r0, [pc, #76]	; (801d26c <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x21c>)
 801d220:	f7f5 fa78 	bl	8012714 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801d224:	bf00      	nop
}
 801d226:	bf00      	nop
 801d228:	3708      	adds	r7, #8
 801d22a:	46bd      	mov	sp, r7
 801d22c:	bd80      	pop	{r7, pc}
 801d22e:	bf00      	nop
 801d230:	2401dce8 	.word	0x2401dce8
 801d234:	2401dd08 	.word	0x2401dd08
 801d238:	2401dd28 	.word	0x2401dd28
 801d23c:	2401dd48 	.word	0x2401dd48
 801d240:	2401dd68 	.word	0x2401dd68
 801d244:	2401dd88 	.word	0x2401dd88
 801d248:	2401dda8 	.word	0x2401dda8
 801d24c:	2401ddc8 	.word	0x2401ddc8
 801d250:	2401dde8 	.word	0x2401dde8
 801d254:	2401de08 	.word	0x2401de08
 801d258:	2401de28 	.word	0x2401de28
 801d25c:	2401de48 	.word	0x2401de48
 801d260:	2401de68 	.word	0x2401de68
 801d264:	2401de88 	.word	0x2401de88
 801d268:	2401dea8 	.word	0x2401dea8
 801d26c:	2401dec8 	.word	0x2401dec8

0801d270 <HAL_GPIO_EXTI_Callback>:

/* -------------------------------------------------------------------------------- */
extern "C" {
void HAL_GPIO_EXTI_Callback(uint16_t gpio_pin) {
 801d270:	b580      	push	{r7, lr}
 801d272:	b082      	sub	sp, #8
 801d274:	af00      	add	r7, sp, #0
 801d276:	4603      	mov	r3, r0
 801d278:	80fb      	strh	r3, [r7, #6]
	execute_gpio_callback(gpio_pin);
 801d27a:	88fb      	ldrh	r3, [r7, #6]
 801d27c:	4618      	mov	r0, r3
 801d27e:	f000 f805 	bl	801d28c <_ZL21execute_gpio_callbackt>
}
 801d282:	bf00      	nop
 801d284:	3708      	adds	r7, #8
 801d286:	46bd      	mov	sp, r7
 801d288:	bd80      	pop	{r7, pc}
	...

0801d28c <_ZL21execute_gpio_callbackt>:
}

static void execute_gpio_callback(uint16_t gpio_pin) {
 801d28c:	b580      	push	{r7, lr}
 801d28e:	b082      	sub	sp, #8
 801d290:	af00      	add	r7, sp, #0
 801d292:	4603      	mov	r3, r0
 801d294:	80fb      	strh	r3, [r7, #6]
	switch (gpio_pin) {
 801d296:	88fb      	ldrh	r3, [r7, #6]
 801d298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d29c:	f000 80f6 	beq.w	801d48c <_ZL21execute_gpio_callbackt+0x200>
 801d2a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d2a4:	f300 80f9 	bgt.w	801d49a <_ZL21execute_gpio_callbackt+0x20e>
 801d2a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d2ac:	f000 80e7 	beq.w	801d47e <_ZL21execute_gpio_callbackt+0x1f2>
 801d2b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d2b4:	f300 80f1 	bgt.w	801d49a <_ZL21execute_gpio_callbackt+0x20e>
 801d2b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d2bc:	f000 80d8 	beq.w	801d470 <_ZL21execute_gpio_callbackt+0x1e4>
 801d2c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d2c4:	f300 80e9 	bgt.w	801d49a <_ZL21execute_gpio_callbackt+0x20e>
 801d2c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d2cc:	f000 80c9 	beq.w	801d462 <_ZL21execute_gpio_callbackt+0x1d6>
 801d2d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d2d4:	f300 80e1 	bgt.w	801d49a <_ZL21execute_gpio_callbackt+0x20e>
 801d2d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801d2dc:	f000 80ba 	beq.w	801d454 <_ZL21execute_gpio_callbackt+0x1c8>
 801d2e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801d2e4:	f300 80d9 	bgt.w	801d49a <_ZL21execute_gpio_callbackt+0x20e>
 801d2e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d2ec:	f000 80ab 	beq.w	801d446 <_ZL21execute_gpio_callbackt+0x1ba>
 801d2f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d2f4:	f300 80d1 	bgt.w	801d49a <_ZL21execute_gpio_callbackt+0x20e>
 801d2f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d2fc:	f000 809c 	beq.w	801d438 <_ZL21execute_gpio_callbackt+0x1ac>
 801d300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d304:	f300 80c9 	bgt.w	801d49a <_ZL21execute_gpio_callbackt+0x20e>
 801d308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d30c:	f000 808d 	beq.w	801d42a <_ZL21execute_gpio_callbackt+0x19e>
 801d310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d314:	f300 80c1 	bgt.w	801d49a <_ZL21execute_gpio_callbackt+0x20e>
 801d318:	2b80      	cmp	r3, #128	; 0x80
 801d31a:	d07f      	beq.n	801d41c <_ZL21execute_gpio_callbackt+0x190>
 801d31c:	2b80      	cmp	r3, #128	; 0x80
 801d31e:	f300 80bc 	bgt.w	801d49a <_ZL21execute_gpio_callbackt+0x20e>
 801d322:	2b20      	cmp	r3, #32
 801d324:	dc4a      	bgt.n	801d3bc <_ZL21execute_gpio_callbackt+0x130>
 801d326:	2b00      	cmp	r3, #0
 801d328:	f340 80b7 	ble.w	801d49a <_ZL21execute_gpio_callbackt+0x20e>
 801d32c:	3b01      	subs	r3, #1
 801d32e:	2b1f      	cmp	r3, #31
 801d330:	f200 80b3 	bhi.w	801d49a <_ZL21execute_gpio_callbackt+0x20e>
 801d334:	a201      	add	r2, pc, #4	; (adr r2, 801d33c <_ZL21execute_gpio_callbackt+0xb0>)
 801d336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d33a:	bf00      	nop
 801d33c:	0801d3c3 	.word	0x0801d3c3
 801d340:	0801d3cf 	.word	0x0801d3cf
 801d344:	0801d49b 	.word	0x0801d49b
 801d348:	0801d3db 	.word	0x0801d3db
 801d34c:	0801d49b 	.word	0x0801d49b
 801d350:	0801d49b 	.word	0x0801d49b
 801d354:	0801d49b 	.word	0x0801d49b
 801d358:	0801d3e7 	.word	0x0801d3e7
 801d35c:	0801d49b 	.word	0x0801d49b
 801d360:	0801d49b 	.word	0x0801d49b
 801d364:	0801d49b 	.word	0x0801d49b
 801d368:	0801d49b 	.word	0x0801d49b
 801d36c:	0801d49b 	.word	0x0801d49b
 801d370:	0801d49b 	.word	0x0801d49b
 801d374:	0801d49b 	.word	0x0801d49b
 801d378:	0801d3f3 	.word	0x0801d3f3
 801d37c:	0801d49b 	.word	0x0801d49b
 801d380:	0801d49b 	.word	0x0801d49b
 801d384:	0801d49b 	.word	0x0801d49b
 801d388:	0801d49b 	.word	0x0801d49b
 801d38c:	0801d49b 	.word	0x0801d49b
 801d390:	0801d49b 	.word	0x0801d49b
 801d394:	0801d49b 	.word	0x0801d49b
 801d398:	0801d49b 	.word	0x0801d49b
 801d39c:	0801d49b 	.word	0x0801d49b
 801d3a0:	0801d49b 	.word	0x0801d49b
 801d3a4:	0801d49b 	.word	0x0801d49b
 801d3a8:	0801d49b 	.word	0x0801d49b
 801d3ac:	0801d49b 	.word	0x0801d49b
 801d3b0:	0801d49b 	.word	0x0801d49b
 801d3b4:	0801d49b 	.word	0x0801d49b
 801d3b8:	0801d401 	.word	0x0801d401
 801d3bc:	2b40      	cmp	r3, #64	; 0x40
 801d3be:	d026      	beq.n	801d40e <_ZL21execute_gpio_callbackt+0x182>
	case GPIO_PIN_15: {
		callbacks[15].call();
		break;
	}
	}
}
 801d3c0:	e06b      	b.n	801d49a <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[0].call();
 801d3c2:	4b38      	ldr	r3, [pc, #224]	; (801d4a4 <_ZL21execute_gpio_callbackt+0x218>)
 801d3c4:	681b      	ldr	r3, [r3, #0]
 801d3c6:	681b      	ldr	r3, [r3, #0]
 801d3c8:	4836      	ldr	r0, [pc, #216]	; (801d4a4 <_ZL21execute_gpio_callbackt+0x218>)
 801d3ca:	4798      	blx	r3
		break;
 801d3cc:	e065      	b.n	801d49a <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[1].call();
 801d3ce:	4b35      	ldr	r3, [pc, #212]	; (801d4a4 <_ZL21execute_gpio_callbackt+0x218>)
 801d3d0:	6a1b      	ldr	r3, [r3, #32]
 801d3d2:	681b      	ldr	r3, [r3, #0]
 801d3d4:	4834      	ldr	r0, [pc, #208]	; (801d4a8 <_ZL21execute_gpio_callbackt+0x21c>)
 801d3d6:	4798      	blx	r3
		break;
 801d3d8:	e05f      	b.n	801d49a <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[2].call();
 801d3da:	4b32      	ldr	r3, [pc, #200]	; (801d4a4 <_ZL21execute_gpio_callbackt+0x218>)
 801d3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d3de:	681b      	ldr	r3, [r3, #0]
 801d3e0:	4832      	ldr	r0, [pc, #200]	; (801d4ac <_ZL21execute_gpio_callbackt+0x220>)
 801d3e2:	4798      	blx	r3
		break;
 801d3e4:	e059      	b.n	801d49a <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[3].call();
 801d3e6:	4b2f      	ldr	r3, [pc, #188]	; (801d4a4 <_ZL21execute_gpio_callbackt+0x218>)
 801d3e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d3ea:	681b      	ldr	r3, [r3, #0]
 801d3ec:	4830      	ldr	r0, [pc, #192]	; (801d4b0 <_ZL21execute_gpio_callbackt+0x224>)
 801d3ee:	4798      	blx	r3
		break;
 801d3f0:	e053      	b.n	801d49a <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[4].call();
 801d3f2:	4b2c      	ldr	r3, [pc, #176]	; (801d4a4 <_ZL21execute_gpio_callbackt+0x218>)
 801d3f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d3f8:	681b      	ldr	r3, [r3, #0]
 801d3fa:	482e      	ldr	r0, [pc, #184]	; (801d4b4 <_ZL21execute_gpio_callbackt+0x228>)
 801d3fc:	4798      	blx	r3
		break;
 801d3fe:	e04c      	b.n	801d49a <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[5].call();
 801d400:	4b28      	ldr	r3, [pc, #160]	; (801d4a4 <_ZL21execute_gpio_callbackt+0x218>)
 801d402:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801d406:	681b      	ldr	r3, [r3, #0]
 801d408:	482b      	ldr	r0, [pc, #172]	; (801d4b8 <_ZL21execute_gpio_callbackt+0x22c>)
 801d40a:	4798      	blx	r3
		break;
 801d40c:	e045      	b.n	801d49a <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[6].call();
 801d40e:	4b25      	ldr	r3, [pc, #148]	; (801d4a4 <_ZL21execute_gpio_callbackt+0x218>)
 801d410:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801d414:	681b      	ldr	r3, [r3, #0]
 801d416:	4829      	ldr	r0, [pc, #164]	; (801d4bc <_ZL21execute_gpio_callbackt+0x230>)
 801d418:	4798      	blx	r3
		break;
 801d41a:	e03e      	b.n	801d49a <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[7].call();
 801d41c:	4b21      	ldr	r3, [pc, #132]	; (801d4a4 <_ZL21execute_gpio_callbackt+0x218>)
 801d41e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801d422:	681b      	ldr	r3, [r3, #0]
 801d424:	4826      	ldr	r0, [pc, #152]	; (801d4c0 <_ZL21execute_gpio_callbackt+0x234>)
 801d426:	4798      	blx	r3
		break;
 801d428:	e037      	b.n	801d49a <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[8].call();
 801d42a:	4b1e      	ldr	r3, [pc, #120]	; (801d4a4 <_ZL21execute_gpio_callbackt+0x218>)
 801d42c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 801d430:	681b      	ldr	r3, [r3, #0]
 801d432:	4824      	ldr	r0, [pc, #144]	; (801d4c4 <_ZL21execute_gpio_callbackt+0x238>)
 801d434:	4798      	blx	r3
		break;
 801d436:	e030      	b.n	801d49a <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[9].call();
 801d438:	4b1a      	ldr	r3, [pc, #104]	; (801d4a4 <_ZL21execute_gpio_callbackt+0x218>)
 801d43a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 801d43e:	681b      	ldr	r3, [r3, #0]
 801d440:	4821      	ldr	r0, [pc, #132]	; (801d4c8 <_ZL21execute_gpio_callbackt+0x23c>)
 801d442:	4798      	blx	r3
		break;
 801d444:	e029      	b.n	801d49a <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[10].call();
 801d446:	4b17      	ldr	r3, [pc, #92]	; (801d4a4 <_ZL21execute_gpio_callbackt+0x218>)
 801d448:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801d44c:	681b      	ldr	r3, [r3, #0]
 801d44e:	481f      	ldr	r0, [pc, #124]	; (801d4cc <_ZL21execute_gpio_callbackt+0x240>)
 801d450:	4798      	blx	r3
		break;
 801d452:	e022      	b.n	801d49a <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[11].call();
 801d454:	4b13      	ldr	r3, [pc, #76]	; (801d4a4 <_ZL21execute_gpio_callbackt+0x218>)
 801d456:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 801d45a:	681b      	ldr	r3, [r3, #0]
 801d45c:	481c      	ldr	r0, [pc, #112]	; (801d4d0 <_ZL21execute_gpio_callbackt+0x244>)
 801d45e:	4798      	blx	r3
		break;
 801d460:	e01b      	b.n	801d49a <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[12].call();
 801d462:	4b10      	ldr	r3, [pc, #64]	; (801d4a4 <_ZL21execute_gpio_callbackt+0x218>)
 801d464:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 801d468:	681b      	ldr	r3, [r3, #0]
 801d46a:	481a      	ldr	r0, [pc, #104]	; (801d4d4 <_ZL21execute_gpio_callbackt+0x248>)
 801d46c:	4798      	blx	r3
		break;
 801d46e:	e014      	b.n	801d49a <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[13].call();
 801d470:	4b0c      	ldr	r3, [pc, #48]	; (801d4a4 <_ZL21execute_gpio_callbackt+0x218>)
 801d472:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 801d476:	681b      	ldr	r3, [r3, #0]
 801d478:	4817      	ldr	r0, [pc, #92]	; (801d4d8 <_ZL21execute_gpio_callbackt+0x24c>)
 801d47a:	4798      	blx	r3
		break;
 801d47c:	e00d      	b.n	801d49a <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[14].call();
 801d47e:	4b09      	ldr	r3, [pc, #36]	; (801d4a4 <_ZL21execute_gpio_callbackt+0x218>)
 801d480:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 801d484:	681b      	ldr	r3, [r3, #0]
 801d486:	4815      	ldr	r0, [pc, #84]	; (801d4dc <_ZL21execute_gpio_callbackt+0x250>)
 801d488:	4798      	blx	r3
		break;
 801d48a:	e006      	b.n	801d49a <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[15].call();
 801d48c:	4b05      	ldr	r3, [pc, #20]	; (801d4a4 <_ZL21execute_gpio_callbackt+0x218>)
 801d48e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801d492:	681b      	ldr	r3, [r3, #0]
 801d494:	4812      	ldr	r0, [pc, #72]	; (801d4e0 <_ZL21execute_gpio_callbackt+0x254>)
 801d496:	4798      	blx	r3
		break;
 801d498:	bf00      	nop
}
 801d49a:	bf00      	nop
 801d49c:	3708      	adds	r7, #8
 801d49e:	46bd      	mov	sp, r7
 801d4a0:	bd80      	pop	{r7, pc}
 801d4a2:	bf00      	nop
 801d4a4:	2401dce8 	.word	0x2401dce8
 801d4a8:	2401dd08 	.word	0x2401dd08
 801d4ac:	2401dd28 	.word	0x2401dd28
 801d4b0:	2401dd48 	.word	0x2401dd48
 801d4b4:	2401dd68 	.word	0x2401dd68
 801d4b8:	2401dd88 	.word	0x2401dd88
 801d4bc:	2401dda8 	.word	0x2401dda8
 801d4c0:	2401ddc8 	.word	0x2401ddc8
 801d4c4:	2401dde8 	.word	0x2401dde8
 801d4c8:	2401de08 	.word	0x2401de08
 801d4cc:	2401de28 	.word	0x2401de28
 801d4d0:	2401de48 	.word	0x2401de48
 801d4d4:	2401de68 	.word	0x2401de68
 801d4d8:	2401de88 	.word	0x2401de88
 801d4dc:	2401dea8 	.word	0x2401dea8
 801d4e0:	2401dec8 	.word	0x2401dec8

0801d4e4 <_Z41__static_initialization_and_destruction_0ii>:
 801d4e4:	b5b0      	push	{r4, r5, r7, lr}
 801d4e6:	b082      	sub	sp, #8
 801d4e8:	af00      	add	r7, sp, #0
 801d4ea:	6078      	str	r0, [r7, #4]
 801d4ec:	6039      	str	r1, [r7, #0]
 801d4ee:	687b      	ldr	r3, [r7, #4]
 801d4f0:	2b01      	cmp	r3, #1
 801d4f2:	d10f      	bne.n	801d514 <_Z41__static_initialization_and_destruction_0ii+0x30>
 801d4f4:	683b      	ldr	r3, [r7, #0]
 801d4f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d4fa:	4293      	cmp	r3, r2
 801d4fc:	d10a      	bne.n	801d514 <_Z41__static_initialization_and_destruction_0ii+0x30>
static core_utils_Callback<void, void> callbacks[16];
 801d4fe:	4b07      	ldr	r3, [pc, #28]	; (801d51c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 801d500:	240f      	movs	r4, #15
 801d502:	461d      	mov	r5, r3
 801d504:	2c00      	cmp	r4, #0
 801d506:	db05      	blt.n	801d514 <_Z41__static_initialization_and_destruction_0ii+0x30>
 801d508:	4628      	mov	r0, r5
 801d50a:	f7f5 fb3b 	bl	8012b84 <_ZN19core_utils_CallbackIvvEC1Ev>
 801d50e:	3520      	adds	r5, #32
 801d510:	3c01      	subs	r4, #1
 801d512:	e7f7      	b.n	801d504 <_Z41__static_initialization_and_destruction_0ii+0x20>
}
 801d514:	bf00      	nop
 801d516:	3708      	adds	r7, #8
 801d518:	46bd      	mov	sp, r7
 801d51a:	bdb0      	pop	{r4, r5, r7, pc}
 801d51c:	2401dce8 	.word	0x2401dce8

0801d520 <_GLOBAL__sub_I__ZN15core_utils_GPIOC2EP12GPIO_TypeDeft>:
 801d520:	b580      	push	{r7, lr}
 801d522:	af00      	add	r7, sp, #0
 801d524:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801d528:	2001      	movs	r0, #1
 801d52a:	f7ff ffdb 	bl	801d4e4 <_Z41__static_initialization_and_destruction_0ii>
 801d52e:	bd80      	pop	{r7, pc}

0801d530 <__cxa_pure_virtual>:
 801d530:	b508      	push	{r3, lr}
 801d532:	f000 f80d 	bl	801d550 <_ZSt9terminatev>

0801d536 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801d536:	b508      	push	{r3, lr}
 801d538:	4780      	blx	r0
 801d53a:	f000 faa7 	bl	801da8c <abort>
	...

0801d540 <_ZSt13get_terminatev>:
 801d540:	4b02      	ldr	r3, [pc, #8]	; (801d54c <_ZSt13get_terminatev+0xc>)
 801d542:	6818      	ldr	r0, [r3, #0]
 801d544:	f3bf 8f5b 	dmb	ish
 801d548:	4770      	bx	lr
 801d54a:	bf00      	nop
 801d54c:	2400005c 	.word	0x2400005c

0801d550 <_ZSt9terminatev>:
 801d550:	b508      	push	{r3, lr}
 801d552:	f7ff fff5 	bl	801d540 <_ZSt13get_terminatev>
 801d556:	f7ff ffee 	bl	801d536 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0801d55c <asinf>:
 801d55c:	b508      	push	{r3, lr}
 801d55e:	ed2d 8b02 	vpush	{d8}
 801d562:	eeb0 8a40 	vmov.f32	s16, s0
 801d566:	f000 f827 	bl	801d5b8 <__ieee754_asinf>
 801d56a:	eeb4 8a48 	vcmp.f32	s16, s16
 801d56e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d572:	eef0 8a40 	vmov.f32	s17, s0
 801d576:	d615      	bvs.n	801d5a4 <asinf+0x48>
 801d578:	eeb0 0a48 	vmov.f32	s0, s16
 801d57c:	f000 fa78 	bl	801da70 <fabsf>
 801d580:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801d584:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801d588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d58c:	dd0a      	ble.n	801d5a4 <asinf+0x48>
 801d58e:	f000 fa85 	bl	801da9c <__errno>
 801d592:	ecbd 8b02 	vpop	{d8}
 801d596:	2321      	movs	r3, #33	; 0x21
 801d598:	6003      	str	r3, [r0, #0]
 801d59a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801d59e:	4804      	ldr	r0, [pc, #16]	; (801d5b0 <asinf+0x54>)
 801d5a0:	f000 ba6e 	b.w	801da80 <nanf>
 801d5a4:	eeb0 0a68 	vmov.f32	s0, s17
 801d5a8:	ecbd 8b02 	vpop	{d8}
 801d5ac:	bd08      	pop	{r3, pc}
 801d5ae:	bf00      	nop
 801d5b0:	08020ddf 	.word	0x08020ddf

0801d5b4 <atan2f>:
 801d5b4:	f000 b8e6 	b.w	801d784 <__ieee754_atan2f>

0801d5b8 <__ieee754_asinf>:
 801d5b8:	b538      	push	{r3, r4, r5, lr}
 801d5ba:	ee10 5a10 	vmov	r5, s0
 801d5be:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801d5c2:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801d5c6:	ed2d 8b04 	vpush	{d8-d9}
 801d5ca:	d10c      	bne.n	801d5e6 <__ieee754_asinf+0x2e>
 801d5cc:	eddf 7a5d 	vldr	s15, [pc, #372]	; 801d744 <__ieee754_asinf+0x18c>
 801d5d0:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801d748 <__ieee754_asinf+0x190>
 801d5d4:	ee60 7a27 	vmul.f32	s15, s0, s15
 801d5d8:	eee0 7a07 	vfma.f32	s15, s0, s14
 801d5dc:	eeb0 0a67 	vmov.f32	s0, s15
 801d5e0:	ecbd 8b04 	vpop	{d8-d9}
 801d5e4:	bd38      	pop	{r3, r4, r5, pc}
 801d5e6:	dd04      	ble.n	801d5f2 <__ieee754_asinf+0x3a>
 801d5e8:	ee70 7a40 	vsub.f32	s15, s0, s0
 801d5ec:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801d5f0:	e7f6      	b.n	801d5e0 <__ieee754_asinf+0x28>
 801d5f2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801d5f6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801d5fa:	da0b      	bge.n	801d614 <__ieee754_asinf+0x5c>
 801d5fc:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 801d600:	da52      	bge.n	801d6a8 <__ieee754_asinf+0xf0>
 801d602:	eddf 7a52 	vldr	s15, [pc, #328]	; 801d74c <__ieee754_asinf+0x194>
 801d606:	ee70 7a27 	vadd.f32	s15, s0, s15
 801d60a:	eef4 7ae8 	vcmpe.f32	s15, s17
 801d60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d612:	dce5      	bgt.n	801d5e0 <__ieee754_asinf+0x28>
 801d614:	f000 fa2c 	bl	801da70 <fabsf>
 801d618:	ee38 0ac0 	vsub.f32	s0, s17, s0
 801d61c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 801d620:	ee20 8a08 	vmul.f32	s16, s0, s16
 801d624:	eddf 7a4a 	vldr	s15, [pc, #296]	; 801d750 <__ieee754_asinf+0x198>
 801d628:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 801d754 <__ieee754_asinf+0x19c>
 801d62c:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 801d758 <__ieee754_asinf+0x1a0>
 801d630:	eea8 7a27 	vfma.f32	s14, s16, s15
 801d634:	eddf 7a49 	vldr	s15, [pc, #292]	; 801d75c <__ieee754_asinf+0x1a4>
 801d638:	eee7 7a08 	vfma.f32	s15, s14, s16
 801d63c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801d760 <__ieee754_asinf+0x1a8>
 801d640:	eea7 7a88 	vfma.f32	s14, s15, s16
 801d644:	eddf 7a47 	vldr	s15, [pc, #284]	; 801d764 <__ieee754_asinf+0x1ac>
 801d648:	eee7 7a08 	vfma.f32	s15, s14, s16
 801d64c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801d768 <__ieee754_asinf+0x1b0>
 801d650:	eea7 9a88 	vfma.f32	s18, s15, s16
 801d654:	eddf 7a45 	vldr	s15, [pc, #276]	; 801d76c <__ieee754_asinf+0x1b4>
 801d658:	eee8 7a07 	vfma.f32	s15, s16, s14
 801d65c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801d770 <__ieee754_asinf+0x1b8>
 801d660:	eea7 7a88 	vfma.f32	s14, s15, s16
 801d664:	eddf 7a43 	vldr	s15, [pc, #268]	; 801d774 <__ieee754_asinf+0x1bc>
 801d668:	eee7 7a08 	vfma.f32	s15, s14, s16
 801d66c:	eeb0 0a48 	vmov.f32	s0, s16
 801d670:	eee7 8a88 	vfma.f32	s17, s15, s16
 801d674:	f000 f924 	bl	801d8c0 <__ieee754_sqrtf>
 801d678:	4b3f      	ldr	r3, [pc, #252]	; (801d778 <__ieee754_asinf+0x1c0>)
 801d67a:	ee29 9a08 	vmul.f32	s18, s18, s16
 801d67e:	429c      	cmp	r4, r3
 801d680:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801d684:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801d688:	dd3d      	ble.n	801d706 <__ieee754_asinf+0x14e>
 801d68a:	eea0 0a06 	vfma.f32	s0, s0, s12
 801d68e:	eddf 7a3b 	vldr	s15, [pc, #236]	; 801d77c <__ieee754_asinf+0x1c4>
 801d692:	eee0 7a26 	vfma.f32	s15, s0, s13
 801d696:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801d748 <__ieee754_asinf+0x190>
 801d69a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801d69e:	2d00      	cmp	r5, #0
 801d6a0:	bfd8      	it	le
 801d6a2:	eeb1 0a40 	vnegle.f32	s0, s0
 801d6a6:	e79b      	b.n	801d5e0 <__ieee754_asinf+0x28>
 801d6a8:	ee60 7a00 	vmul.f32	s15, s0, s0
 801d6ac:	eddf 6a28 	vldr	s13, [pc, #160]	; 801d750 <__ieee754_asinf+0x198>
 801d6b0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 801d754 <__ieee754_asinf+0x19c>
 801d6b4:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 801d768 <__ieee754_asinf+0x1b0>
 801d6b8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801d6bc:	eddf 6a27 	vldr	s13, [pc, #156]	; 801d75c <__ieee754_asinf+0x1a4>
 801d6c0:	eee7 6a27 	vfma.f32	s13, s14, s15
 801d6c4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 801d760 <__ieee754_asinf+0x1a8>
 801d6c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801d6cc:	eddf 6a25 	vldr	s13, [pc, #148]	; 801d764 <__ieee754_asinf+0x1ac>
 801d6d0:	eee7 6a27 	vfma.f32	s13, s14, s15
 801d6d4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801d758 <__ieee754_asinf+0x1a0>
 801d6d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801d6dc:	eddf 6a23 	vldr	s13, [pc, #140]	; 801d76c <__ieee754_asinf+0x1b4>
 801d6e0:	eee7 6a86 	vfma.f32	s13, s15, s12
 801d6e4:	ed9f 6a22 	vldr	s12, [pc, #136]	; 801d770 <__ieee754_asinf+0x1b8>
 801d6e8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801d6ec:	eddf 6a21 	vldr	s13, [pc, #132]	; 801d774 <__ieee754_asinf+0x1bc>
 801d6f0:	eee6 6a27 	vfma.f32	s13, s12, s15
 801d6f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d6f8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801d6fc:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801d700:	eea0 0a27 	vfma.f32	s0, s0, s15
 801d704:	e76c      	b.n	801d5e0 <__ieee754_asinf+0x28>
 801d706:	ee10 3a10 	vmov	r3, s0
 801d70a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801d70e:	f023 030f 	bic.w	r3, r3, #15
 801d712:	ee07 3a10 	vmov	s14, r3
 801d716:	eea7 8a47 	vfms.f32	s16, s14, s14
 801d71a:	ee70 7a07 	vadd.f32	s15, s0, s14
 801d71e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801d722:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801d726:	eddf 7a07 	vldr	s15, [pc, #28]	; 801d744 <__ieee754_asinf+0x18c>
 801d72a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 801d72e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 801d732:	ed9f 0a13 	vldr	s0, [pc, #76]	; 801d780 <__ieee754_asinf+0x1c8>
 801d736:	eeb0 6a40 	vmov.f32	s12, s0
 801d73a:	eea7 6a66 	vfms.f32	s12, s14, s13
 801d73e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801d742:	e7aa      	b.n	801d69a <__ieee754_asinf+0xe2>
 801d744:	b33bbd2e 	.word	0xb33bbd2e
 801d748:	3fc90fdb 	.word	0x3fc90fdb
 801d74c:	7149f2ca 	.word	0x7149f2ca
 801d750:	3811ef08 	.word	0x3811ef08
 801d754:	3a4f7f04 	.word	0x3a4f7f04
 801d758:	3e2aaaab 	.word	0x3e2aaaab
 801d75c:	bd241146 	.word	0xbd241146
 801d760:	3e4e0aa8 	.word	0x3e4e0aa8
 801d764:	bea6b090 	.word	0xbea6b090
 801d768:	3d9dc62e 	.word	0x3d9dc62e
 801d76c:	bf303361 	.word	0xbf303361
 801d770:	4001572d 	.word	0x4001572d
 801d774:	c019d139 	.word	0xc019d139
 801d778:	3f799999 	.word	0x3f799999
 801d77c:	333bbd2e 	.word	0x333bbd2e
 801d780:	3f490fdb 	.word	0x3f490fdb

0801d784 <__ieee754_atan2f>:
 801d784:	ee10 2a90 	vmov	r2, s1
 801d788:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801d78c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801d790:	b510      	push	{r4, lr}
 801d792:	eef0 7a40 	vmov.f32	s15, s0
 801d796:	dc06      	bgt.n	801d7a6 <__ieee754_atan2f+0x22>
 801d798:	ee10 0a10 	vmov	r0, s0
 801d79c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801d7a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801d7a4:	dd04      	ble.n	801d7b0 <__ieee754_atan2f+0x2c>
 801d7a6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801d7aa:	eeb0 0a67 	vmov.f32	s0, s15
 801d7ae:	bd10      	pop	{r4, pc}
 801d7b0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801d7b4:	d103      	bne.n	801d7be <__ieee754_atan2f+0x3a>
 801d7b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d7ba:	f000 b885 	b.w	801d8c8 <atanf>
 801d7be:	1794      	asrs	r4, r2, #30
 801d7c0:	f004 0402 	and.w	r4, r4, #2
 801d7c4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801d7c8:	b93b      	cbnz	r3, 801d7da <__ieee754_atan2f+0x56>
 801d7ca:	2c02      	cmp	r4, #2
 801d7cc:	d05c      	beq.n	801d888 <__ieee754_atan2f+0x104>
 801d7ce:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801d89c <__ieee754_atan2f+0x118>
 801d7d2:	2c03      	cmp	r4, #3
 801d7d4:	fe47 7a00 	vseleq.f32	s15, s14, s0
 801d7d8:	e7e7      	b.n	801d7aa <__ieee754_atan2f+0x26>
 801d7da:	b939      	cbnz	r1, 801d7ec <__ieee754_atan2f+0x68>
 801d7dc:	eddf 7a30 	vldr	s15, [pc, #192]	; 801d8a0 <__ieee754_atan2f+0x11c>
 801d7e0:	ed9f 0a30 	vldr	s0, [pc, #192]	; 801d8a4 <__ieee754_atan2f+0x120>
 801d7e4:	2800      	cmp	r0, #0
 801d7e6:	fe67 7a80 	vselge.f32	s15, s15, s0
 801d7ea:	e7de      	b.n	801d7aa <__ieee754_atan2f+0x26>
 801d7ec:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801d7f0:	d110      	bne.n	801d814 <__ieee754_atan2f+0x90>
 801d7f2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801d7f6:	f104 34ff 	add.w	r4, r4, #4294967295
 801d7fa:	d107      	bne.n	801d80c <__ieee754_atan2f+0x88>
 801d7fc:	2c02      	cmp	r4, #2
 801d7fe:	d846      	bhi.n	801d88e <__ieee754_atan2f+0x10a>
 801d800:	4b29      	ldr	r3, [pc, #164]	; (801d8a8 <__ieee754_atan2f+0x124>)
 801d802:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d806:	edd4 7a00 	vldr	s15, [r4]
 801d80a:	e7ce      	b.n	801d7aa <__ieee754_atan2f+0x26>
 801d80c:	2c02      	cmp	r4, #2
 801d80e:	d841      	bhi.n	801d894 <__ieee754_atan2f+0x110>
 801d810:	4b26      	ldr	r3, [pc, #152]	; (801d8ac <__ieee754_atan2f+0x128>)
 801d812:	e7f6      	b.n	801d802 <__ieee754_atan2f+0x7e>
 801d814:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801d818:	d0e0      	beq.n	801d7dc <__ieee754_atan2f+0x58>
 801d81a:	1a5b      	subs	r3, r3, r1
 801d81c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801d820:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801d824:	da1a      	bge.n	801d85c <__ieee754_atan2f+0xd8>
 801d826:	2a00      	cmp	r2, #0
 801d828:	da01      	bge.n	801d82e <__ieee754_atan2f+0xaa>
 801d82a:	313c      	adds	r1, #60	; 0x3c
 801d82c:	db19      	blt.n	801d862 <__ieee754_atan2f+0xde>
 801d82e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801d832:	f000 f91d 	bl	801da70 <fabsf>
 801d836:	f000 f847 	bl	801d8c8 <atanf>
 801d83a:	eef0 7a40 	vmov.f32	s15, s0
 801d83e:	2c01      	cmp	r4, #1
 801d840:	d012      	beq.n	801d868 <__ieee754_atan2f+0xe4>
 801d842:	2c02      	cmp	r4, #2
 801d844:	d017      	beq.n	801d876 <__ieee754_atan2f+0xf2>
 801d846:	2c00      	cmp	r4, #0
 801d848:	d0af      	beq.n	801d7aa <__ieee754_atan2f+0x26>
 801d84a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801d8b0 <__ieee754_atan2f+0x12c>
 801d84e:	ee77 7a80 	vadd.f32	s15, s15, s0
 801d852:	ed9f 0a18 	vldr	s0, [pc, #96]	; 801d8b4 <__ieee754_atan2f+0x130>
 801d856:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801d85a:	e7a6      	b.n	801d7aa <__ieee754_atan2f+0x26>
 801d85c:	eddf 7a10 	vldr	s15, [pc, #64]	; 801d8a0 <__ieee754_atan2f+0x11c>
 801d860:	e7ed      	b.n	801d83e <__ieee754_atan2f+0xba>
 801d862:	eddf 7a15 	vldr	s15, [pc, #84]	; 801d8b8 <__ieee754_atan2f+0x134>
 801d866:	e7ea      	b.n	801d83e <__ieee754_atan2f+0xba>
 801d868:	ee17 3a90 	vmov	r3, s15
 801d86c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801d870:	ee07 3a90 	vmov	s15, r3
 801d874:	e799      	b.n	801d7aa <__ieee754_atan2f+0x26>
 801d876:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801d8b0 <__ieee754_atan2f+0x12c>
 801d87a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801d87e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 801d8b4 <__ieee754_atan2f+0x130>
 801d882:	ee70 7a67 	vsub.f32	s15, s0, s15
 801d886:	e790      	b.n	801d7aa <__ieee754_atan2f+0x26>
 801d888:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801d8b4 <__ieee754_atan2f+0x130>
 801d88c:	e78d      	b.n	801d7aa <__ieee754_atan2f+0x26>
 801d88e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801d8bc <__ieee754_atan2f+0x138>
 801d892:	e78a      	b.n	801d7aa <__ieee754_atan2f+0x26>
 801d894:	eddf 7a08 	vldr	s15, [pc, #32]	; 801d8b8 <__ieee754_atan2f+0x134>
 801d898:	e787      	b.n	801d7aa <__ieee754_atan2f+0x26>
 801d89a:	bf00      	nop
 801d89c:	c0490fdb 	.word	0xc0490fdb
 801d8a0:	3fc90fdb 	.word	0x3fc90fdb
 801d8a4:	bfc90fdb 	.word	0xbfc90fdb
 801d8a8:	08020ae8 	.word	0x08020ae8
 801d8ac:	08020af4 	.word	0x08020af4
 801d8b0:	33bbbd2e 	.word	0x33bbbd2e
 801d8b4:	40490fdb 	.word	0x40490fdb
 801d8b8:	00000000 	.word	0x00000000
 801d8bc:	3f490fdb 	.word	0x3f490fdb

0801d8c0 <__ieee754_sqrtf>:
 801d8c0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801d8c4:	4770      	bx	lr
	...

0801d8c8 <atanf>:
 801d8c8:	b538      	push	{r3, r4, r5, lr}
 801d8ca:	ee10 5a10 	vmov	r5, s0
 801d8ce:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801d8d2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801d8d6:	eef0 7a40 	vmov.f32	s15, s0
 801d8da:	db0f      	blt.n	801d8fc <atanf+0x34>
 801d8dc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801d8e0:	dd04      	ble.n	801d8ec <atanf+0x24>
 801d8e2:	ee70 7a00 	vadd.f32	s15, s0, s0
 801d8e6:	eeb0 0a67 	vmov.f32	s0, s15
 801d8ea:	bd38      	pop	{r3, r4, r5, pc}
 801d8ec:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801da24 <atanf+0x15c>
 801d8f0:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801da28 <atanf+0x160>
 801d8f4:	2d00      	cmp	r5, #0
 801d8f6:	fe77 7a80 	vselgt.f32	s15, s15, s0
 801d8fa:	e7f4      	b.n	801d8e6 <atanf+0x1e>
 801d8fc:	4b4b      	ldr	r3, [pc, #300]	; (801da2c <atanf+0x164>)
 801d8fe:	429c      	cmp	r4, r3
 801d900:	dc10      	bgt.n	801d924 <atanf+0x5c>
 801d902:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801d906:	da0a      	bge.n	801d91e <atanf+0x56>
 801d908:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801da30 <atanf+0x168>
 801d90c:	ee30 7a07 	vadd.f32	s14, s0, s14
 801d910:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d914:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801d918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d91c:	dce3      	bgt.n	801d8e6 <atanf+0x1e>
 801d91e:	f04f 33ff 	mov.w	r3, #4294967295
 801d922:	e013      	b.n	801d94c <atanf+0x84>
 801d924:	f000 f8a4 	bl	801da70 <fabsf>
 801d928:	4b42      	ldr	r3, [pc, #264]	; (801da34 <atanf+0x16c>)
 801d92a:	429c      	cmp	r4, r3
 801d92c:	dc4f      	bgt.n	801d9ce <atanf+0x106>
 801d92e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801d932:	429c      	cmp	r4, r3
 801d934:	dc41      	bgt.n	801d9ba <atanf+0xf2>
 801d936:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801d93a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801d93e:	eea0 7a27 	vfma.f32	s14, s0, s15
 801d942:	2300      	movs	r3, #0
 801d944:	ee30 0a27 	vadd.f32	s0, s0, s15
 801d948:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d94c:	1c5a      	adds	r2, r3, #1
 801d94e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801d952:	ed9f 7a39 	vldr	s14, [pc, #228]	; 801da38 <atanf+0x170>
 801d956:	eddf 5a39 	vldr	s11, [pc, #228]	; 801da3c <atanf+0x174>
 801d95a:	ed9f 5a39 	vldr	s10, [pc, #228]	; 801da40 <atanf+0x178>
 801d95e:	ee66 6a06 	vmul.f32	s13, s12, s12
 801d962:	eee6 5a87 	vfma.f32	s11, s13, s14
 801d966:	ed9f 7a37 	vldr	s14, [pc, #220]	; 801da44 <atanf+0x17c>
 801d96a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801d96e:	eddf 5a36 	vldr	s11, [pc, #216]	; 801da48 <atanf+0x180>
 801d972:	eee7 5a26 	vfma.f32	s11, s14, s13
 801d976:	ed9f 7a35 	vldr	s14, [pc, #212]	; 801da4c <atanf+0x184>
 801d97a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801d97e:	eddf 5a34 	vldr	s11, [pc, #208]	; 801da50 <atanf+0x188>
 801d982:	eee7 5a26 	vfma.f32	s11, s14, s13
 801d986:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801da54 <atanf+0x18c>
 801d98a:	eea6 5a87 	vfma.f32	s10, s13, s14
 801d98e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801da58 <atanf+0x190>
 801d992:	eea5 7a26 	vfma.f32	s14, s10, s13
 801d996:	ed9f 5a31 	vldr	s10, [pc, #196]	; 801da5c <atanf+0x194>
 801d99a:	eea7 5a26 	vfma.f32	s10, s14, s13
 801d99e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801da60 <atanf+0x198>
 801d9a2:	eea5 7a26 	vfma.f32	s14, s10, s13
 801d9a6:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d9aa:	eea5 7a86 	vfma.f32	s14, s11, s12
 801d9ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 801d9b2:	d121      	bne.n	801d9f8 <atanf+0x130>
 801d9b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d9b8:	e795      	b.n	801d8e6 <atanf+0x1e>
 801d9ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801d9be:	ee30 7a67 	vsub.f32	s14, s0, s15
 801d9c2:	ee30 0a27 	vadd.f32	s0, s0, s15
 801d9c6:	2301      	movs	r3, #1
 801d9c8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d9cc:	e7be      	b.n	801d94c <atanf+0x84>
 801d9ce:	4b25      	ldr	r3, [pc, #148]	; (801da64 <atanf+0x19c>)
 801d9d0:	429c      	cmp	r4, r3
 801d9d2:	dc0b      	bgt.n	801d9ec <atanf+0x124>
 801d9d4:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801d9d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d9dc:	eea0 7a27 	vfma.f32	s14, s0, s15
 801d9e0:	2302      	movs	r3, #2
 801d9e2:	ee70 6a67 	vsub.f32	s13, s0, s15
 801d9e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d9ea:	e7af      	b.n	801d94c <atanf+0x84>
 801d9ec:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801d9f0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d9f4:	2303      	movs	r3, #3
 801d9f6:	e7a9      	b.n	801d94c <atanf+0x84>
 801d9f8:	4a1b      	ldr	r2, [pc, #108]	; (801da68 <atanf+0x1a0>)
 801d9fa:	491c      	ldr	r1, [pc, #112]	; (801da6c <atanf+0x1a4>)
 801d9fc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801da00:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801da04:	ed93 0a00 	vldr	s0, [r3]
 801da08:	ee37 7a40 	vsub.f32	s14, s14, s0
 801da0c:	ed92 0a00 	vldr	s0, [r2]
 801da10:	ee77 7a67 	vsub.f32	s15, s14, s15
 801da14:	2d00      	cmp	r5, #0
 801da16:	ee70 7a67 	vsub.f32	s15, s0, s15
 801da1a:	bfb8      	it	lt
 801da1c:	eef1 7a67 	vneglt.f32	s15, s15
 801da20:	e761      	b.n	801d8e6 <atanf+0x1e>
 801da22:	bf00      	nop
 801da24:	3fc90fdb 	.word	0x3fc90fdb
 801da28:	bfc90fdb 	.word	0xbfc90fdb
 801da2c:	3edfffff 	.word	0x3edfffff
 801da30:	7149f2ca 	.word	0x7149f2ca
 801da34:	3f97ffff 	.word	0x3f97ffff
 801da38:	3c8569d7 	.word	0x3c8569d7
 801da3c:	3d4bda59 	.word	0x3d4bda59
 801da40:	bd6ef16b 	.word	0xbd6ef16b
 801da44:	3d886b35 	.word	0x3d886b35
 801da48:	3dba2e6e 	.word	0x3dba2e6e
 801da4c:	3e124925 	.word	0x3e124925
 801da50:	3eaaaaab 	.word	0x3eaaaaab
 801da54:	bd15a221 	.word	0xbd15a221
 801da58:	bd9d8795 	.word	0xbd9d8795
 801da5c:	bde38e38 	.word	0xbde38e38
 801da60:	be4ccccd 	.word	0xbe4ccccd
 801da64:	401bffff 	.word	0x401bffff
 801da68:	08020b00 	.word	0x08020b00
 801da6c:	08020b10 	.word	0x08020b10

0801da70 <fabsf>:
 801da70:	ee10 3a10 	vmov	r3, s0
 801da74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801da78:	ee00 3a10 	vmov	s0, r3
 801da7c:	4770      	bx	lr
	...

0801da80 <nanf>:
 801da80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801da88 <nanf+0x8>
 801da84:	4770      	bx	lr
 801da86:	bf00      	nop
 801da88:	7fc00000 	.word	0x7fc00000

0801da8c <abort>:
 801da8c:	b508      	push	{r3, lr}
 801da8e:	2006      	movs	r0, #6
 801da90:	f000 feb6 	bl	801e800 <raise>
 801da94:	2001      	movs	r0, #1
 801da96:	f7e3 ff2f 	bl	80018f8 <_exit>
	...

0801da9c <__errno>:
 801da9c:	4b01      	ldr	r3, [pc, #4]	; (801daa4 <__errno+0x8>)
 801da9e:	6818      	ldr	r0, [r3, #0]
 801daa0:	4770      	bx	lr
 801daa2:	bf00      	nop
 801daa4:	24000060 	.word	0x24000060

0801daa8 <std>:
 801daa8:	2300      	movs	r3, #0
 801daaa:	b510      	push	{r4, lr}
 801daac:	4604      	mov	r4, r0
 801daae:	e9c0 3300 	strd	r3, r3, [r0]
 801dab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dab6:	6083      	str	r3, [r0, #8]
 801dab8:	8181      	strh	r1, [r0, #12]
 801daba:	6643      	str	r3, [r0, #100]	; 0x64
 801dabc:	81c2      	strh	r2, [r0, #14]
 801dabe:	6183      	str	r3, [r0, #24]
 801dac0:	4619      	mov	r1, r3
 801dac2:	2208      	movs	r2, #8
 801dac4:	305c      	adds	r0, #92	; 0x5c
 801dac6:	f000 f91a 	bl	801dcfe <memset>
 801daca:	4b05      	ldr	r3, [pc, #20]	; (801dae0 <std+0x38>)
 801dacc:	6263      	str	r3, [r4, #36]	; 0x24
 801dace:	4b05      	ldr	r3, [pc, #20]	; (801dae4 <std+0x3c>)
 801dad0:	62a3      	str	r3, [r4, #40]	; 0x28
 801dad2:	4b05      	ldr	r3, [pc, #20]	; (801dae8 <std+0x40>)
 801dad4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801dad6:	4b05      	ldr	r3, [pc, #20]	; (801daec <std+0x44>)
 801dad8:	6224      	str	r4, [r4, #32]
 801dada:	6323      	str	r3, [r4, #48]	; 0x30
 801dadc:	bd10      	pop	{r4, pc}
 801dade:	bf00      	nop
 801dae0:	0801e839 	.word	0x0801e839
 801dae4:	0801e85b 	.word	0x0801e85b
 801dae8:	0801e893 	.word	0x0801e893
 801daec:	0801e8b7 	.word	0x0801e8b7

0801daf0 <_cleanup_r>:
 801daf0:	4901      	ldr	r1, [pc, #4]	; (801daf8 <_cleanup_r+0x8>)
 801daf2:	f000 b8af 	b.w	801dc54 <_fwalk_reent>
 801daf6:	bf00      	nop
 801daf8:	0801f609 	.word	0x0801f609

0801dafc <__sfmoreglue>:
 801dafc:	b570      	push	{r4, r5, r6, lr}
 801dafe:	2268      	movs	r2, #104	; 0x68
 801db00:	1e4d      	subs	r5, r1, #1
 801db02:	4355      	muls	r5, r2
 801db04:	460e      	mov	r6, r1
 801db06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801db0a:	f000 f921 	bl	801dd50 <_malloc_r>
 801db0e:	4604      	mov	r4, r0
 801db10:	b140      	cbz	r0, 801db24 <__sfmoreglue+0x28>
 801db12:	2100      	movs	r1, #0
 801db14:	e9c0 1600 	strd	r1, r6, [r0]
 801db18:	300c      	adds	r0, #12
 801db1a:	60a0      	str	r0, [r4, #8]
 801db1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801db20:	f000 f8ed 	bl	801dcfe <memset>
 801db24:	4620      	mov	r0, r4
 801db26:	bd70      	pop	{r4, r5, r6, pc}

0801db28 <__sfp_lock_acquire>:
 801db28:	4801      	ldr	r0, [pc, #4]	; (801db30 <__sfp_lock_acquire+0x8>)
 801db2a:	f000 b8d8 	b.w	801dcde <__retarget_lock_acquire_recursive>
 801db2e:	bf00      	nop
 801db30:	2401dee9 	.word	0x2401dee9

0801db34 <__sfp_lock_release>:
 801db34:	4801      	ldr	r0, [pc, #4]	; (801db3c <__sfp_lock_release+0x8>)
 801db36:	f000 b8d3 	b.w	801dce0 <__retarget_lock_release_recursive>
 801db3a:	bf00      	nop
 801db3c:	2401dee9 	.word	0x2401dee9

0801db40 <__sinit_lock_acquire>:
 801db40:	4801      	ldr	r0, [pc, #4]	; (801db48 <__sinit_lock_acquire+0x8>)
 801db42:	f000 b8cc 	b.w	801dcde <__retarget_lock_acquire_recursive>
 801db46:	bf00      	nop
 801db48:	2401deea 	.word	0x2401deea

0801db4c <__sinit_lock_release>:
 801db4c:	4801      	ldr	r0, [pc, #4]	; (801db54 <__sinit_lock_release+0x8>)
 801db4e:	f000 b8c7 	b.w	801dce0 <__retarget_lock_release_recursive>
 801db52:	bf00      	nop
 801db54:	2401deea 	.word	0x2401deea

0801db58 <__sinit>:
 801db58:	b510      	push	{r4, lr}
 801db5a:	4604      	mov	r4, r0
 801db5c:	f7ff fff0 	bl	801db40 <__sinit_lock_acquire>
 801db60:	69a3      	ldr	r3, [r4, #24]
 801db62:	b11b      	cbz	r3, 801db6c <__sinit+0x14>
 801db64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801db68:	f7ff bff0 	b.w	801db4c <__sinit_lock_release>
 801db6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801db70:	6523      	str	r3, [r4, #80]	; 0x50
 801db72:	4b13      	ldr	r3, [pc, #76]	; (801dbc0 <__sinit+0x68>)
 801db74:	4a13      	ldr	r2, [pc, #76]	; (801dbc4 <__sinit+0x6c>)
 801db76:	681b      	ldr	r3, [r3, #0]
 801db78:	62a2      	str	r2, [r4, #40]	; 0x28
 801db7a:	42a3      	cmp	r3, r4
 801db7c:	bf04      	itt	eq
 801db7e:	2301      	moveq	r3, #1
 801db80:	61a3      	streq	r3, [r4, #24]
 801db82:	4620      	mov	r0, r4
 801db84:	f000 f820 	bl	801dbc8 <__sfp>
 801db88:	6060      	str	r0, [r4, #4]
 801db8a:	4620      	mov	r0, r4
 801db8c:	f000 f81c 	bl	801dbc8 <__sfp>
 801db90:	60a0      	str	r0, [r4, #8]
 801db92:	4620      	mov	r0, r4
 801db94:	f000 f818 	bl	801dbc8 <__sfp>
 801db98:	2200      	movs	r2, #0
 801db9a:	60e0      	str	r0, [r4, #12]
 801db9c:	2104      	movs	r1, #4
 801db9e:	6860      	ldr	r0, [r4, #4]
 801dba0:	f7ff ff82 	bl	801daa8 <std>
 801dba4:	68a0      	ldr	r0, [r4, #8]
 801dba6:	2201      	movs	r2, #1
 801dba8:	2109      	movs	r1, #9
 801dbaa:	f7ff ff7d 	bl	801daa8 <std>
 801dbae:	68e0      	ldr	r0, [r4, #12]
 801dbb0:	2202      	movs	r2, #2
 801dbb2:	2112      	movs	r1, #18
 801dbb4:	f7ff ff78 	bl	801daa8 <std>
 801dbb8:	2301      	movs	r3, #1
 801dbba:	61a3      	str	r3, [r4, #24]
 801dbbc:	e7d2      	b.n	801db64 <__sinit+0xc>
 801dbbe:	bf00      	nop
 801dbc0:	08020b80 	.word	0x08020b80
 801dbc4:	0801daf1 	.word	0x0801daf1

0801dbc8 <__sfp>:
 801dbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dbca:	4607      	mov	r7, r0
 801dbcc:	f7ff ffac 	bl	801db28 <__sfp_lock_acquire>
 801dbd0:	4b1e      	ldr	r3, [pc, #120]	; (801dc4c <__sfp+0x84>)
 801dbd2:	681e      	ldr	r6, [r3, #0]
 801dbd4:	69b3      	ldr	r3, [r6, #24]
 801dbd6:	b913      	cbnz	r3, 801dbde <__sfp+0x16>
 801dbd8:	4630      	mov	r0, r6
 801dbda:	f7ff ffbd 	bl	801db58 <__sinit>
 801dbde:	3648      	adds	r6, #72	; 0x48
 801dbe0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801dbe4:	3b01      	subs	r3, #1
 801dbe6:	d503      	bpl.n	801dbf0 <__sfp+0x28>
 801dbe8:	6833      	ldr	r3, [r6, #0]
 801dbea:	b30b      	cbz	r3, 801dc30 <__sfp+0x68>
 801dbec:	6836      	ldr	r6, [r6, #0]
 801dbee:	e7f7      	b.n	801dbe0 <__sfp+0x18>
 801dbf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801dbf4:	b9d5      	cbnz	r5, 801dc2c <__sfp+0x64>
 801dbf6:	4b16      	ldr	r3, [pc, #88]	; (801dc50 <__sfp+0x88>)
 801dbf8:	60e3      	str	r3, [r4, #12]
 801dbfa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801dbfe:	6665      	str	r5, [r4, #100]	; 0x64
 801dc00:	f000 f86c 	bl	801dcdc <__retarget_lock_init_recursive>
 801dc04:	f7ff ff96 	bl	801db34 <__sfp_lock_release>
 801dc08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801dc0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801dc10:	6025      	str	r5, [r4, #0]
 801dc12:	61a5      	str	r5, [r4, #24]
 801dc14:	2208      	movs	r2, #8
 801dc16:	4629      	mov	r1, r5
 801dc18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801dc1c:	f000 f86f 	bl	801dcfe <memset>
 801dc20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801dc24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801dc28:	4620      	mov	r0, r4
 801dc2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dc2c:	3468      	adds	r4, #104	; 0x68
 801dc2e:	e7d9      	b.n	801dbe4 <__sfp+0x1c>
 801dc30:	2104      	movs	r1, #4
 801dc32:	4638      	mov	r0, r7
 801dc34:	f7ff ff62 	bl	801dafc <__sfmoreglue>
 801dc38:	4604      	mov	r4, r0
 801dc3a:	6030      	str	r0, [r6, #0]
 801dc3c:	2800      	cmp	r0, #0
 801dc3e:	d1d5      	bne.n	801dbec <__sfp+0x24>
 801dc40:	f7ff ff78 	bl	801db34 <__sfp_lock_release>
 801dc44:	230c      	movs	r3, #12
 801dc46:	603b      	str	r3, [r7, #0]
 801dc48:	e7ee      	b.n	801dc28 <__sfp+0x60>
 801dc4a:	bf00      	nop
 801dc4c:	08020b80 	.word	0x08020b80
 801dc50:	ffff0001 	.word	0xffff0001

0801dc54 <_fwalk_reent>:
 801dc54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dc58:	4606      	mov	r6, r0
 801dc5a:	4688      	mov	r8, r1
 801dc5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801dc60:	2700      	movs	r7, #0
 801dc62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dc66:	f1b9 0901 	subs.w	r9, r9, #1
 801dc6a:	d505      	bpl.n	801dc78 <_fwalk_reent+0x24>
 801dc6c:	6824      	ldr	r4, [r4, #0]
 801dc6e:	2c00      	cmp	r4, #0
 801dc70:	d1f7      	bne.n	801dc62 <_fwalk_reent+0xe>
 801dc72:	4638      	mov	r0, r7
 801dc74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dc78:	89ab      	ldrh	r3, [r5, #12]
 801dc7a:	2b01      	cmp	r3, #1
 801dc7c:	d907      	bls.n	801dc8e <_fwalk_reent+0x3a>
 801dc7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dc82:	3301      	adds	r3, #1
 801dc84:	d003      	beq.n	801dc8e <_fwalk_reent+0x3a>
 801dc86:	4629      	mov	r1, r5
 801dc88:	4630      	mov	r0, r6
 801dc8a:	47c0      	blx	r8
 801dc8c:	4307      	orrs	r7, r0
 801dc8e:	3568      	adds	r5, #104	; 0x68
 801dc90:	e7e9      	b.n	801dc66 <_fwalk_reent+0x12>
	...

0801dc94 <__libc_init_array>:
 801dc94:	b570      	push	{r4, r5, r6, lr}
 801dc96:	4d0d      	ldr	r5, [pc, #52]	; (801dccc <__libc_init_array+0x38>)
 801dc98:	4c0d      	ldr	r4, [pc, #52]	; (801dcd0 <__libc_init_array+0x3c>)
 801dc9a:	1b64      	subs	r4, r4, r5
 801dc9c:	10a4      	asrs	r4, r4, #2
 801dc9e:	2600      	movs	r6, #0
 801dca0:	42a6      	cmp	r6, r4
 801dca2:	d109      	bne.n	801dcb8 <__libc_init_array+0x24>
 801dca4:	4d0b      	ldr	r5, [pc, #44]	; (801dcd4 <__libc_init_array+0x40>)
 801dca6:	4c0c      	ldr	r4, [pc, #48]	; (801dcd8 <__libc_init_array+0x44>)
 801dca8:	f002 fbfe 	bl	80204a8 <_init>
 801dcac:	1b64      	subs	r4, r4, r5
 801dcae:	10a4      	asrs	r4, r4, #2
 801dcb0:	2600      	movs	r6, #0
 801dcb2:	42a6      	cmp	r6, r4
 801dcb4:	d105      	bne.n	801dcc2 <__libc_init_array+0x2e>
 801dcb6:	bd70      	pop	{r4, r5, r6, pc}
 801dcb8:	f855 3b04 	ldr.w	r3, [r5], #4
 801dcbc:	4798      	blx	r3
 801dcbe:	3601      	adds	r6, #1
 801dcc0:	e7ee      	b.n	801dca0 <__libc_init_array+0xc>
 801dcc2:	f855 3b04 	ldr.w	r3, [r5], #4
 801dcc6:	4798      	blx	r3
 801dcc8:	3601      	adds	r6, #1
 801dcca:	e7f2      	b.n	801dcb2 <__libc_init_array+0x1e>
 801dccc:	08020f04 	.word	0x08020f04
 801dcd0:	08020f04 	.word	0x08020f04
 801dcd4:	08020f04 	.word	0x08020f04
 801dcd8:	08020f1c 	.word	0x08020f1c

0801dcdc <__retarget_lock_init_recursive>:
 801dcdc:	4770      	bx	lr

0801dcde <__retarget_lock_acquire_recursive>:
 801dcde:	4770      	bx	lr

0801dce0 <__retarget_lock_release_recursive>:
 801dce0:	4770      	bx	lr

0801dce2 <memcpy>:
 801dce2:	440a      	add	r2, r1
 801dce4:	4291      	cmp	r1, r2
 801dce6:	f100 33ff 	add.w	r3, r0, #4294967295
 801dcea:	d100      	bne.n	801dcee <memcpy+0xc>
 801dcec:	4770      	bx	lr
 801dcee:	b510      	push	{r4, lr}
 801dcf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dcf4:	f803 4f01 	strb.w	r4, [r3, #1]!
 801dcf8:	4291      	cmp	r1, r2
 801dcfa:	d1f9      	bne.n	801dcf0 <memcpy+0xe>
 801dcfc:	bd10      	pop	{r4, pc}

0801dcfe <memset>:
 801dcfe:	4402      	add	r2, r0
 801dd00:	4603      	mov	r3, r0
 801dd02:	4293      	cmp	r3, r2
 801dd04:	d100      	bne.n	801dd08 <memset+0xa>
 801dd06:	4770      	bx	lr
 801dd08:	f803 1b01 	strb.w	r1, [r3], #1
 801dd0c:	e7f9      	b.n	801dd02 <memset+0x4>
	...

0801dd10 <sbrk_aligned>:
 801dd10:	b570      	push	{r4, r5, r6, lr}
 801dd12:	4e0e      	ldr	r6, [pc, #56]	; (801dd4c <sbrk_aligned+0x3c>)
 801dd14:	460c      	mov	r4, r1
 801dd16:	6831      	ldr	r1, [r6, #0]
 801dd18:	4605      	mov	r5, r0
 801dd1a:	b911      	cbnz	r1, 801dd22 <sbrk_aligned+0x12>
 801dd1c:	f000 fd38 	bl	801e790 <_sbrk_r>
 801dd20:	6030      	str	r0, [r6, #0]
 801dd22:	4621      	mov	r1, r4
 801dd24:	4628      	mov	r0, r5
 801dd26:	f000 fd33 	bl	801e790 <_sbrk_r>
 801dd2a:	1c43      	adds	r3, r0, #1
 801dd2c:	d00a      	beq.n	801dd44 <sbrk_aligned+0x34>
 801dd2e:	1cc4      	adds	r4, r0, #3
 801dd30:	f024 0403 	bic.w	r4, r4, #3
 801dd34:	42a0      	cmp	r0, r4
 801dd36:	d007      	beq.n	801dd48 <sbrk_aligned+0x38>
 801dd38:	1a21      	subs	r1, r4, r0
 801dd3a:	4628      	mov	r0, r5
 801dd3c:	f000 fd28 	bl	801e790 <_sbrk_r>
 801dd40:	3001      	adds	r0, #1
 801dd42:	d101      	bne.n	801dd48 <sbrk_aligned+0x38>
 801dd44:	f04f 34ff 	mov.w	r4, #4294967295
 801dd48:	4620      	mov	r0, r4
 801dd4a:	bd70      	pop	{r4, r5, r6, pc}
 801dd4c:	2401def0 	.word	0x2401def0

0801dd50 <_malloc_r>:
 801dd50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd54:	1ccd      	adds	r5, r1, #3
 801dd56:	f025 0503 	bic.w	r5, r5, #3
 801dd5a:	3508      	adds	r5, #8
 801dd5c:	2d0c      	cmp	r5, #12
 801dd5e:	bf38      	it	cc
 801dd60:	250c      	movcc	r5, #12
 801dd62:	2d00      	cmp	r5, #0
 801dd64:	4607      	mov	r7, r0
 801dd66:	db01      	blt.n	801dd6c <_malloc_r+0x1c>
 801dd68:	42a9      	cmp	r1, r5
 801dd6a:	d905      	bls.n	801dd78 <_malloc_r+0x28>
 801dd6c:	230c      	movs	r3, #12
 801dd6e:	603b      	str	r3, [r7, #0]
 801dd70:	2600      	movs	r6, #0
 801dd72:	4630      	mov	r0, r6
 801dd74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd78:	4e2e      	ldr	r6, [pc, #184]	; (801de34 <_malloc_r+0xe4>)
 801dd7a:	f001 fc9f 	bl	801f6bc <__malloc_lock>
 801dd7e:	6833      	ldr	r3, [r6, #0]
 801dd80:	461c      	mov	r4, r3
 801dd82:	bb34      	cbnz	r4, 801ddd2 <_malloc_r+0x82>
 801dd84:	4629      	mov	r1, r5
 801dd86:	4638      	mov	r0, r7
 801dd88:	f7ff ffc2 	bl	801dd10 <sbrk_aligned>
 801dd8c:	1c43      	adds	r3, r0, #1
 801dd8e:	4604      	mov	r4, r0
 801dd90:	d14d      	bne.n	801de2e <_malloc_r+0xde>
 801dd92:	6834      	ldr	r4, [r6, #0]
 801dd94:	4626      	mov	r6, r4
 801dd96:	2e00      	cmp	r6, #0
 801dd98:	d140      	bne.n	801de1c <_malloc_r+0xcc>
 801dd9a:	6823      	ldr	r3, [r4, #0]
 801dd9c:	4631      	mov	r1, r6
 801dd9e:	4638      	mov	r0, r7
 801dda0:	eb04 0803 	add.w	r8, r4, r3
 801dda4:	f000 fcf4 	bl	801e790 <_sbrk_r>
 801dda8:	4580      	cmp	r8, r0
 801ddaa:	d13a      	bne.n	801de22 <_malloc_r+0xd2>
 801ddac:	6821      	ldr	r1, [r4, #0]
 801ddae:	3503      	adds	r5, #3
 801ddb0:	1a6d      	subs	r5, r5, r1
 801ddb2:	f025 0503 	bic.w	r5, r5, #3
 801ddb6:	3508      	adds	r5, #8
 801ddb8:	2d0c      	cmp	r5, #12
 801ddba:	bf38      	it	cc
 801ddbc:	250c      	movcc	r5, #12
 801ddbe:	4629      	mov	r1, r5
 801ddc0:	4638      	mov	r0, r7
 801ddc2:	f7ff ffa5 	bl	801dd10 <sbrk_aligned>
 801ddc6:	3001      	adds	r0, #1
 801ddc8:	d02b      	beq.n	801de22 <_malloc_r+0xd2>
 801ddca:	6823      	ldr	r3, [r4, #0]
 801ddcc:	442b      	add	r3, r5
 801ddce:	6023      	str	r3, [r4, #0]
 801ddd0:	e00e      	b.n	801ddf0 <_malloc_r+0xa0>
 801ddd2:	6822      	ldr	r2, [r4, #0]
 801ddd4:	1b52      	subs	r2, r2, r5
 801ddd6:	d41e      	bmi.n	801de16 <_malloc_r+0xc6>
 801ddd8:	2a0b      	cmp	r2, #11
 801ddda:	d916      	bls.n	801de0a <_malloc_r+0xba>
 801dddc:	1961      	adds	r1, r4, r5
 801ddde:	42a3      	cmp	r3, r4
 801dde0:	6025      	str	r5, [r4, #0]
 801dde2:	bf18      	it	ne
 801dde4:	6059      	strne	r1, [r3, #4]
 801dde6:	6863      	ldr	r3, [r4, #4]
 801dde8:	bf08      	it	eq
 801ddea:	6031      	streq	r1, [r6, #0]
 801ddec:	5162      	str	r2, [r4, r5]
 801ddee:	604b      	str	r3, [r1, #4]
 801ddf0:	4638      	mov	r0, r7
 801ddf2:	f104 060b 	add.w	r6, r4, #11
 801ddf6:	f001 fc67 	bl	801f6c8 <__malloc_unlock>
 801ddfa:	f026 0607 	bic.w	r6, r6, #7
 801ddfe:	1d23      	adds	r3, r4, #4
 801de00:	1af2      	subs	r2, r6, r3
 801de02:	d0b6      	beq.n	801dd72 <_malloc_r+0x22>
 801de04:	1b9b      	subs	r3, r3, r6
 801de06:	50a3      	str	r3, [r4, r2]
 801de08:	e7b3      	b.n	801dd72 <_malloc_r+0x22>
 801de0a:	6862      	ldr	r2, [r4, #4]
 801de0c:	42a3      	cmp	r3, r4
 801de0e:	bf0c      	ite	eq
 801de10:	6032      	streq	r2, [r6, #0]
 801de12:	605a      	strne	r2, [r3, #4]
 801de14:	e7ec      	b.n	801ddf0 <_malloc_r+0xa0>
 801de16:	4623      	mov	r3, r4
 801de18:	6864      	ldr	r4, [r4, #4]
 801de1a:	e7b2      	b.n	801dd82 <_malloc_r+0x32>
 801de1c:	4634      	mov	r4, r6
 801de1e:	6876      	ldr	r6, [r6, #4]
 801de20:	e7b9      	b.n	801dd96 <_malloc_r+0x46>
 801de22:	230c      	movs	r3, #12
 801de24:	603b      	str	r3, [r7, #0]
 801de26:	4638      	mov	r0, r7
 801de28:	f001 fc4e 	bl	801f6c8 <__malloc_unlock>
 801de2c:	e7a1      	b.n	801dd72 <_malloc_r+0x22>
 801de2e:	6025      	str	r5, [r4, #0]
 801de30:	e7de      	b.n	801ddf0 <_malloc_r+0xa0>
 801de32:	bf00      	nop
 801de34:	2401deec 	.word	0x2401deec

0801de38 <__cvt>:
 801de38:	b5f0      	push	{r4, r5, r6, r7, lr}
 801de3a:	ed2d 8b02 	vpush	{d8}
 801de3e:	eeb0 8b40 	vmov.f64	d8, d0
 801de42:	b085      	sub	sp, #20
 801de44:	4617      	mov	r7, r2
 801de46:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801de48:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801de4a:	ee18 2a90 	vmov	r2, s17
 801de4e:	f025 0520 	bic.w	r5, r5, #32
 801de52:	2a00      	cmp	r2, #0
 801de54:	bfb6      	itet	lt
 801de56:	222d      	movlt	r2, #45	; 0x2d
 801de58:	2200      	movge	r2, #0
 801de5a:	eeb1 8b40 	vneglt.f64	d8, d0
 801de5e:	2d46      	cmp	r5, #70	; 0x46
 801de60:	460c      	mov	r4, r1
 801de62:	701a      	strb	r2, [r3, #0]
 801de64:	d004      	beq.n	801de70 <__cvt+0x38>
 801de66:	2d45      	cmp	r5, #69	; 0x45
 801de68:	d100      	bne.n	801de6c <__cvt+0x34>
 801de6a:	3401      	adds	r4, #1
 801de6c:	2102      	movs	r1, #2
 801de6e:	e000      	b.n	801de72 <__cvt+0x3a>
 801de70:	2103      	movs	r1, #3
 801de72:	ab03      	add	r3, sp, #12
 801de74:	9301      	str	r3, [sp, #4]
 801de76:	ab02      	add	r3, sp, #8
 801de78:	9300      	str	r3, [sp, #0]
 801de7a:	4622      	mov	r2, r4
 801de7c:	4633      	mov	r3, r6
 801de7e:	eeb0 0b48 	vmov.f64	d0, d8
 801de82:	f000 fdcd 	bl	801ea20 <_dtoa_r>
 801de86:	2d47      	cmp	r5, #71	; 0x47
 801de88:	d101      	bne.n	801de8e <__cvt+0x56>
 801de8a:	07fb      	lsls	r3, r7, #31
 801de8c:	d51a      	bpl.n	801dec4 <__cvt+0x8c>
 801de8e:	2d46      	cmp	r5, #70	; 0x46
 801de90:	eb00 0204 	add.w	r2, r0, r4
 801de94:	d10c      	bne.n	801deb0 <__cvt+0x78>
 801de96:	7803      	ldrb	r3, [r0, #0]
 801de98:	2b30      	cmp	r3, #48	; 0x30
 801de9a:	d107      	bne.n	801deac <__cvt+0x74>
 801de9c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801dea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dea4:	bf1c      	itt	ne
 801dea6:	f1c4 0401 	rsbne	r4, r4, #1
 801deaa:	6034      	strne	r4, [r6, #0]
 801deac:	6833      	ldr	r3, [r6, #0]
 801deae:	441a      	add	r2, r3
 801deb0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801deb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801deb8:	bf08      	it	eq
 801deba:	9203      	streq	r2, [sp, #12]
 801debc:	2130      	movs	r1, #48	; 0x30
 801debe:	9b03      	ldr	r3, [sp, #12]
 801dec0:	4293      	cmp	r3, r2
 801dec2:	d307      	bcc.n	801ded4 <__cvt+0x9c>
 801dec4:	9b03      	ldr	r3, [sp, #12]
 801dec6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801dec8:	1a1b      	subs	r3, r3, r0
 801deca:	6013      	str	r3, [r2, #0]
 801decc:	b005      	add	sp, #20
 801dece:	ecbd 8b02 	vpop	{d8}
 801ded2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ded4:	1c5c      	adds	r4, r3, #1
 801ded6:	9403      	str	r4, [sp, #12]
 801ded8:	7019      	strb	r1, [r3, #0]
 801deda:	e7f0      	b.n	801debe <__cvt+0x86>

0801dedc <__exponent>:
 801dedc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dede:	4603      	mov	r3, r0
 801dee0:	2900      	cmp	r1, #0
 801dee2:	bfb8      	it	lt
 801dee4:	4249      	neglt	r1, r1
 801dee6:	f803 2b02 	strb.w	r2, [r3], #2
 801deea:	bfb4      	ite	lt
 801deec:	222d      	movlt	r2, #45	; 0x2d
 801deee:	222b      	movge	r2, #43	; 0x2b
 801def0:	2909      	cmp	r1, #9
 801def2:	7042      	strb	r2, [r0, #1]
 801def4:	dd2a      	ble.n	801df4c <__exponent+0x70>
 801def6:	f10d 0407 	add.w	r4, sp, #7
 801defa:	46a4      	mov	ip, r4
 801defc:	270a      	movs	r7, #10
 801defe:	46a6      	mov	lr, r4
 801df00:	460a      	mov	r2, r1
 801df02:	fb91 f6f7 	sdiv	r6, r1, r7
 801df06:	fb07 1516 	mls	r5, r7, r6, r1
 801df0a:	3530      	adds	r5, #48	; 0x30
 801df0c:	2a63      	cmp	r2, #99	; 0x63
 801df0e:	f104 34ff 	add.w	r4, r4, #4294967295
 801df12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801df16:	4631      	mov	r1, r6
 801df18:	dcf1      	bgt.n	801defe <__exponent+0x22>
 801df1a:	3130      	adds	r1, #48	; 0x30
 801df1c:	f1ae 0502 	sub.w	r5, lr, #2
 801df20:	f804 1c01 	strb.w	r1, [r4, #-1]
 801df24:	1c44      	adds	r4, r0, #1
 801df26:	4629      	mov	r1, r5
 801df28:	4561      	cmp	r1, ip
 801df2a:	d30a      	bcc.n	801df42 <__exponent+0x66>
 801df2c:	f10d 0209 	add.w	r2, sp, #9
 801df30:	eba2 020e 	sub.w	r2, r2, lr
 801df34:	4565      	cmp	r5, ip
 801df36:	bf88      	it	hi
 801df38:	2200      	movhi	r2, #0
 801df3a:	4413      	add	r3, r2
 801df3c:	1a18      	subs	r0, r3, r0
 801df3e:	b003      	add	sp, #12
 801df40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801df42:	f811 2b01 	ldrb.w	r2, [r1], #1
 801df46:	f804 2f01 	strb.w	r2, [r4, #1]!
 801df4a:	e7ed      	b.n	801df28 <__exponent+0x4c>
 801df4c:	2330      	movs	r3, #48	; 0x30
 801df4e:	3130      	adds	r1, #48	; 0x30
 801df50:	7083      	strb	r3, [r0, #2]
 801df52:	70c1      	strb	r1, [r0, #3]
 801df54:	1d03      	adds	r3, r0, #4
 801df56:	e7f1      	b.n	801df3c <__exponent+0x60>

0801df58 <_printf_float>:
 801df58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df5c:	b08b      	sub	sp, #44	; 0x2c
 801df5e:	460c      	mov	r4, r1
 801df60:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801df64:	4616      	mov	r6, r2
 801df66:	461f      	mov	r7, r3
 801df68:	4605      	mov	r5, r0
 801df6a:	f001 fb89 	bl	801f680 <_localeconv_r>
 801df6e:	f8d0 b000 	ldr.w	fp, [r0]
 801df72:	4658      	mov	r0, fp
 801df74:	f7e2 f9b4 	bl	80002e0 <strlen>
 801df78:	2300      	movs	r3, #0
 801df7a:	9308      	str	r3, [sp, #32]
 801df7c:	f8d8 3000 	ldr.w	r3, [r8]
 801df80:	f894 9018 	ldrb.w	r9, [r4, #24]
 801df84:	6822      	ldr	r2, [r4, #0]
 801df86:	3307      	adds	r3, #7
 801df88:	f023 0307 	bic.w	r3, r3, #7
 801df8c:	f103 0108 	add.w	r1, r3, #8
 801df90:	f8c8 1000 	str.w	r1, [r8]
 801df94:	4682      	mov	sl, r0
 801df96:	e9d3 0100 	ldrd	r0, r1, [r3]
 801df9a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801df9e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 801e200 <_printf_float+0x2a8>
 801dfa2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801dfa6:	eeb0 6bc0 	vabs.f64	d6, d0
 801dfaa:	eeb4 6b47 	vcmp.f64	d6, d7
 801dfae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dfb2:	dd24      	ble.n	801dffe <_printf_float+0xa6>
 801dfb4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801dfb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dfbc:	d502      	bpl.n	801dfc4 <_printf_float+0x6c>
 801dfbe:	232d      	movs	r3, #45	; 0x2d
 801dfc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801dfc4:	4b90      	ldr	r3, [pc, #576]	; (801e208 <_printf_float+0x2b0>)
 801dfc6:	4891      	ldr	r0, [pc, #580]	; (801e20c <_printf_float+0x2b4>)
 801dfc8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801dfcc:	bf94      	ite	ls
 801dfce:	4698      	movls	r8, r3
 801dfd0:	4680      	movhi	r8, r0
 801dfd2:	2303      	movs	r3, #3
 801dfd4:	6123      	str	r3, [r4, #16]
 801dfd6:	f022 0204 	bic.w	r2, r2, #4
 801dfda:	2300      	movs	r3, #0
 801dfdc:	6022      	str	r2, [r4, #0]
 801dfde:	9304      	str	r3, [sp, #16]
 801dfe0:	9700      	str	r7, [sp, #0]
 801dfe2:	4633      	mov	r3, r6
 801dfe4:	aa09      	add	r2, sp, #36	; 0x24
 801dfe6:	4621      	mov	r1, r4
 801dfe8:	4628      	mov	r0, r5
 801dfea:	f000 f9d3 	bl	801e394 <_printf_common>
 801dfee:	3001      	adds	r0, #1
 801dff0:	f040 808a 	bne.w	801e108 <_printf_float+0x1b0>
 801dff4:	f04f 30ff 	mov.w	r0, #4294967295
 801dff8:	b00b      	add	sp, #44	; 0x2c
 801dffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dffe:	eeb4 0b40 	vcmp.f64	d0, d0
 801e002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e006:	d709      	bvc.n	801e01c <_printf_float+0xc4>
 801e008:	ee10 3a90 	vmov	r3, s1
 801e00c:	2b00      	cmp	r3, #0
 801e00e:	bfbc      	itt	lt
 801e010:	232d      	movlt	r3, #45	; 0x2d
 801e012:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801e016:	487e      	ldr	r0, [pc, #504]	; (801e210 <_printf_float+0x2b8>)
 801e018:	4b7e      	ldr	r3, [pc, #504]	; (801e214 <_printf_float+0x2bc>)
 801e01a:	e7d5      	b.n	801dfc8 <_printf_float+0x70>
 801e01c:	6863      	ldr	r3, [r4, #4]
 801e01e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801e022:	9104      	str	r1, [sp, #16]
 801e024:	1c59      	adds	r1, r3, #1
 801e026:	d13c      	bne.n	801e0a2 <_printf_float+0x14a>
 801e028:	2306      	movs	r3, #6
 801e02a:	6063      	str	r3, [r4, #4]
 801e02c:	2300      	movs	r3, #0
 801e02e:	9303      	str	r3, [sp, #12]
 801e030:	ab08      	add	r3, sp, #32
 801e032:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801e036:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801e03a:	ab07      	add	r3, sp, #28
 801e03c:	6861      	ldr	r1, [r4, #4]
 801e03e:	9300      	str	r3, [sp, #0]
 801e040:	6022      	str	r2, [r4, #0]
 801e042:	f10d 031b 	add.w	r3, sp, #27
 801e046:	4628      	mov	r0, r5
 801e048:	f7ff fef6 	bl	801de38 <__cvt>
 801e04c:	9b04      	ldr	r3, [sp, #16]
 801e04e:	9907      	ldr	r1, [sp, #28]
 801e050:	2b47      	cmp	r3, #71	; 0x47
 801e052:	4680      	mov	r8, r0
 801e054:	d108      	bne.n	801e068 <_printf_float+0x110>
 801e056:	1cc8      	adds	r0, r1, #3
 801e058:	db02      	blt.n	801e060 <_printf_float+0x108>
 801e05a:	6863      	ldr	r3, [r4, #4]
 801e05c:	4299      	cmp	r1, r3
 801e05e:	dd41      	ble.n	801e0e4 <_printf_float+0x18c>
 801e060:	f1a9 0902 	sub.w	r9, r9, #2
 801e064:	fa5f f989 	uxtb.w	r9, r9
 801e068:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801e06c:	d820      	bhi.n	801e0b0 <_printf_float+0x158>
 801e06e:	3901      	subs	r1, #1
 801e070:	464a      	mov	r2, r9
 801e072:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801e076:	9107      	str	r1, [sp, #28]
 801e078:	f7ff ff30 	bl	801dedc <__exponent>
 801e07c:	9a08      	ldr	r2, [sp, #32]
 801e07e:	9004      	str	r0, [sp, #16]
 801e080:	1813      	adds	r3, r2, r0
 801e082:	2a01      	cmp	r2, #1
 801e084:	6123      	str	r3, [r4, #16]
 801e086:	dc02      	bgt.n	801e08e <_printf_float+0x136>
 801e088:	6822      	ldr	r2, [r4, #0]
 801e08a:	07d2      	lsls	r2, r2, #31
 801e08c:	d501      	bpl.n	801e092 <_printf_float+0x13a>
 801e08e:	3301      	adds	r3, #1
 801e090:	6123      	str	r3, [r4, #16]
 801e092:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801e096:	2b00      	cmp	r3, #0
 801e098:	d0a2      	beq.n	801dfe0 <_printf_float+0x88>
 801e09a:	232d      	movs	r3, #45	; 0x2d
 801e09c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e0a0:	e79e      	b.n	801dfe0 <_printf_float+0x88>
 801e0a2:	9904      	ldr	r1, [sp, #16]
 801e0a4:	2947      	cmp	r1, #71	; 0x47
 801e0a6:	d1c1      	bne.n	801e02c <_printf_float+0xd4>
 801e0a8:	2b00      	cmp	r3, #0
 801e0aa:	d1bf      	bne.n	801e02c <_printf_float+0xd4>
 801e0ac:	2301      	movs	r3, #1
 801e0ae:	e7bc      	b.n	801e02a <_printf_float+0xd2>
 801e0b0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801e0b4:	d118      	bne.n	801e0e8 <_printf_float+0x190>
 801e0b6:	2900      	cmp	r1, #0
 801e0b8:	6863      	ldr	r3, [r4, #4]
 801e0ba:	dd0b      	ble.n	801e0d4 <_printf_float+0x17c>
 801e0bc:	6121      	str	r1, [r4, #16]
 801e0be:	b913      	cbnz	r3, 801e0c6 <_printf_float+0x16e>
 801e0c0:	6822      	ldr	r2, [r4, #0]
 801e0c2:	07d0      	lsls	r0, r2, #31
 801e0c4:	d502      	bpl.n	801e0cc <_printf_float+0x174>
 801e0c6:	3301      	adds	r3, #1
 801e0c8:	440b      	add	r3, r1
 801e0ca:	6123      	str	r3, [r4, #16]
 801e0cc:	2300      	movs	r3, #0
 801e0ce:	65a1      	str	r1, [r4, #88]	; 0x58
 801e0d0:	9304      	str	r3, [sp, #16]
 801e0d2:	e7de      	b.n	801e092 <_printf_float+0x13a>
 801e0d4:	b913      	cbnz	r3, 801e0dc <_printf_float+0x184>
 801e0d6:	6822      	ldr	r2, [r4, #0]
 801e0d8:	07d2      	lsls	r2, r2, #31
 801e0da:	d501      	bpl.n	801e0e0 <_printf_float+0x188>
 801e0dc:	3302      	adds	r3, #2
 801e0de:	e7f4      	b.n	801e0ca <_printf_float+0x172>
 801e0e0:	2301      	movs	r3, #1
 801e0e2:	e7f2      	b.n	801e0ca <_printf_float+0x172>
 801e0e4:	f04f 0967 	mov.w	r9, #103	; 0x67
 801e0e8:	9b08      	ldr	r3, [sp, #32]
 801e0ea:	4299      	cmp	r1, r3
 801e0ec:	db05      	blt.n	801e0fa <_printf_float+0x1a2>
 801e0ee:	6823      	ldr	r3, [r4, #0]
 801e0f0:	6121      	str	r1, [r4, #16]
 801e0f2:	07d8      	lsls	r0, r3, #31
 801e0f4:	d5ea      	bpl.n	801e0cc <_printf_float+0x174>
 801e0f6:	1c4b      	adds	r3, r1, #1
 801e0f8:	e7e7      	b.n	801e0ca <_printf_float+0x172>
 801e0fa:	2900      	cmp	r1, #0
 801e0fc:	bfd4      	ite	le
 801e0fe:	f1c1 0202 	rsble	r2, r1, #2
 801e102:	2201      	movgt	r2, #1
 801e104:	4413      	add	r3, r2
 801e106:	e7e0      	b.n	801e0ca <_printf_float+0x172>
 801e108:	6823      	ldr	r3, [r4, #0]
 801e10a:	055a      	lsls	r2, r3, #21
 801e10c:	d407      	bmi.n	801e11e <_printf_float+0x1c6>
 801e10e:	6923      	ldr	r3, [r4, #16]
 801e110:	4642      	mov	r2, r8
 801e112:	4631      	mov	r1, r6
 801e114:	4628      	mov	r0, r5
 801e116:	47b8      	blx	r7
 801e118:	3001      	adds	r0, #1
 801e11a:	d12a      	bne.n	801e172 <_printf_float+0x21a>
 801e11c:	e76a      	b.n	801dff4 <_printf_float+0x9c>
 801e11e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801e122:	f240 80e2 	bls.w	801e2ea <_printf_float+0x392>
 801e126:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801e12a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e12e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e132:	d133      	bne.n	801e19c <_printf_float+0x244>
 801e134:	4a38      	ldr	r2, [pc, #224]	; (801e218 <_printf_float+0x2c0>)
 801e136:	2301      	movs	r3, #1
 801e138:	4631      	mov	r1, r6
 801e13a:	4628      	mov	r0, r5
 801e13c:	47b8      	blx	r7
 801e13e:	3001      	adds	r0, #1
 801e140:	f43f af58 	beq.w	801dff4 <_printf_float+0x9c>
 801e144:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801e148:	429a      	cmp	r2, r3
 801e14a:	db02      	blt.n	801e152 <_printf_float+0x1fa>
 801e14c:	6823      	ldr	r3, [r4, #0]
 801e14e:	07d8      	lsls	r0, r3, #31
 801e150:	d50f      	bpl.n	801e172 <_printf_float+0x21a>
 801e152:	4653      	mov	r3, sl
 801e154:	465a      	mov	r2, fp
 801e156:	4631      	mov	r1, r6
 801e158:	4628      	mov	r0, r5
 801e15a:	47b8      	blx	r7
 801e15c:	3001      	adds	r0, #1
 801e15e:	f43f af49 	beq.w	801dff4 <_printf_float+0x9c>
 801e162:	f04f 0800 	mov.w	r8, #0
 801e166:	f104 091a 	add.w	r9, r4, #26
 801e16a:	9b08      	ldr	r3, [sp, #32]
 801e16c:	3b01      	subs	r3, #1
 801e16e:	4543      	cmp	r3, r8
 801e170:	dc09      	bgt.n	801e186 <_printf_float+0x22e>
 801e172:	6823      	ldr	r3, [r4, #0]
 801e174:	079b      	lsls	r3, r3, #30
 801e176:	f100 8108 	bmi.w	801e38a <_printf_float+0x432>
 801e17a:	68e0      	ldr	r0, [r4, #12]
 801e17c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e17e:	4298      	cmp	r0, r3
 801e180:	bfb8      	it	lt
 801e182:	4618      	movlt	r0, r3
 801e184:	e738      	b.n	801dff8 <_printf_float+0xa0>
 801e186:	2301      	movs	r3, #1
 801e188:	464a      	mov	r2, r9
 801e18a:	4631      	mov	r1, r6
 801e18c:	4628      	mov	r0, r5
 801e18e:	47b8      	blx	r7
 801e190:	3001      	adds	r0, #1
 801e192:	f43f af2f 	beq.w	801dff4 <_printf_float+0x9c>
 801e196:	f108 0801 	add.w	r8, r8, #1
 801e19a:	e7e6      	b.n	801e16a <_printf_float+0x212>
 801e19c:	9b07      	ldr	r3, [sp, #28]
 801e19e:	2b00      	cmp	r3, #0
 801e1a0:	dc3c      	bgt.n	801e21c <_printf_float+0x2c4>
 801e1a2:	4a1d      	ldr	r2, [pc, #116]	; (801e218 <_printf_float+0x2c0>)
 801e1a4:	2301      	movs	r3, #1
 801e1a6:	4631      	mov	r1, r6
 801e1a8:	4628      	mov	r0, r5
 801e1aa:	47b8      	blx	r7
 801e1ac:	3001      	adds	r0, #1
 801e1ae:	f43f af21 	beq.w	801dff4 <_printf_float+0x9c>
 801e1b2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801e1b6:	4313      	orrs	r3, r2
 801e1b8:	d102      	bne.n	801e1c0 <_printf_float+0x268>
 801e1ba:	6823      	ldr	r3, [r4, #0]
 801e1bc:	07d9      	lsls	r1, r3, #31
 801e1be:	d5d8      	bpl.n	801e172 <_printf_float+0x21a>
 801e1c0:	4653      	mov	r3, sl
 801e1c2:	465a      	mov	r2, fp
 801e1c4:	4631      	mov	r1, r6
 801e1c6:	4628      	mov	r0, r5
 801e1c8:	47b8      	blx	r7
 801e1ca:	3001      	adds	r0, #1
 801e1cc:	f43f af12 	beq.w	801dff4 <_printf_float+0x9c>
 801e1d0:	f04f 0900 	mov.w	r9, #0
 801e1d4:	f104 0a1a 	add.w	sl, r4, #26
 801e1d8:	9b07      	ldr	r3, [sp, #28]
 801e1da:	425b      	negs	r3, r3
 801e1dc:	454b      	cmp	r3, r9
 801e1de:	dc01      	bgt.n	801e1e4 <_printf_float+0x28c>
 801e1e0:	9b08      	ldr	r3, [sp, #32]
 801e1e2:	e795      	b.n	801e110 <_printf_float+0x1b8>
 801e1e4:	2301      	movs	r3, #1
 801e1e6:	4652      	mov	r2, sl
 801e1e8:	4631      	mov	r1, r6
 801e1ea:	4628      	mov	r0, r5
 801e1ec:	47b8      	blx	r7
 801e1ee:	3001      	adds	r0, #1
 801e1f0:	f43f af00 	beq.w	801dff4 <_printf_float+0x9c>
 801e1f4:	f109 0901 	add.w	r9, r9, #1
 801e1f8:	e7ee      	b.n	801e1d8 <_printf_float+0x280>
 801e1fa:	bf00      	nop
 801e1fc:	f3af 8000 	nop.w
 801e200:	ffffffff 	.word	0xffffffff
 801e204:	7fefffff 	.word	0x7fefffff
 801e208:	08020b84 	.word	0x08020b84
 801e20c:	08020b88 	.word	0x08020b88
 801e210:	08020b90 	.word	0x08020b90
 801e214:	08020b8c 	.word	0x08020b8c
 801e218:	08020b94 	.word	0x08020b94
 801e21c:	9a08      	ldr	r2, [sp, #32]
 801e21e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e220:	429a      	cmp	r2, r3
 801e222:	bfa8      	it	ge
 801e224:	461a      	movge	r2, r3
 801e226:	2a00      	cmp	r2, #0
 801e228:	4691      	mov	r9, r2
 801e22a:	dc38      	bgt.n	801e29e <_printf_float+0x346>
 801e22c:	2300      	movs	r3, #0
 801e22e:	9305      	str	r3, [sp, #20]
 801e230:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e234:	f104 021a 	add.w	r2, r4, #26
 801e238:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e23a:	9905      	ldr	r1, [sp, #20]
 801e23c:	9304      	str	r3, [sp, #16]
 801e23e:	eba3 0309 	sub.w	r3, r3, r9
 801e242:	428b      	cmp	r3, r1
 801e244:	dc33      	bgt.n	801e2ae <_printf_float+0x356>
 801e246:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801e24a:	429a      	cmp	r2, r3
 801e24c:	db3c      	blt.n	801e2c8 <_printf_float+0x370>
 801e24e:	6823      	ldr	r3, [r4, #0]
 801e250:	07da      	lsls	r2, r3, #31
 801e252:	d439      	bmi.n	801e2c8 <_printf_float+0x370>
 801e254:	9b08      	ldr	r3, [sp, #32]
 801e256:	9a04      	ldr	r2, [sp, #16]
 801e258:	9907      	ldr	r1, [sp, #28]
 801e25a:	1a9a      	subs	r2, r3, r2
 801e25c:	eba3 0901 	sub.w	r9, r3, r1
 801e260:	4591      	cmp	r9, r2
 801e262:	bfa8      	it	ge
 801e264:	4691      	movge	r9, r2
 801e266:	f1b9 0f00 	cmp.w	r9, #0
 801e26a:	dc35      	bgt.n	801e2d8 <_printf_float+0x380>
 801e26c:	f04f 0800 	mov.w	r8, #0
 801e270:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e274:	f104 0a1a 	add.w	sl, r4, #26
 801e278:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801e27c:	1a9b      	subs	r3, r3, r2
 801e27e:	eba3 0309 	sub.w	r3, r3, r9
 801e282:	4543      	cmp	r3, r8
 801e284:	f77f af75 	ble.w	801e172 <_printf_float+0x21a>
 801e288:	2301      	movs	r3, #1
 801e28a:	4652      	mov	r2, sl
 801e28c:	4631      	mov	r1, r6
 801e28e:	4628      	mov	r0, r5
 801e290:	47b8      	blx	r7
 801e292:	3001      	adds	r0, #1
 801e294:	f43f aeae 	beq.w	801dff4 <_printf_float+0x9c>
 801e298:	f108 0801 	add.w	r8, r8, #1
 801e29c:	e7ec      	b.n	801e278 <_printf_float+0x320>
 801e29e:	4613      	mov	r3, r2
 801e2a0:	4631      	mov	r1, r6
 801e2a2:	4642      	mov	r2, r8
 801e2a4:	4628      	mov	r0, r5
 801e2a6:	47b8      	blx	r7
 801e2a8:	3001      	adds	r0, #1
 801e2aa:	d1bf      	bne.n	801e22c <_printf_float+0x2d4>
 801e2ac:	e6a2      	b.n	801dff4 <_printf_float+0x9c>
 801e2ae:	2301      	movs	r3, #1
 801e2b0:	4631      	mov	r1, r6
 801e2b2:	4628      	mov	r0, r5
 801e2b4:	9204      	str	r2, [sp, #16]
 801e2b6:	47b8      	blx	r7
 801e2b8:	3001      	adds	r0, #1
 801e2ba:	f43f ae9b 	beq.w	801dff4 <_printf_float+0x9c>
 801e2be:	9b05      	ldr	r3, [sp, #20]
 801e2c0:	9a04      	ldr	r2, [sp, #16]
 801e2c2:	3301      	adds	r3, #1
 801e2c4:	9305      	str	r3, [sp, #20]
 801e2c6:	e7b7      	b.n	801e238 <_printf_float+0x2e0>
 801e2c8:	4653      	mov	r3, sl
 801e2ca:	465a      	mov	r2, fp
 801e2cc:	4631      	mov	r1, r6
 801e2ce:	4628      	mov	r0, r5
 801e2d0:	47b8      	blx	r7
 801e2d2:	3001      	adds	r0, #1
 801e2d4:	d1be      	bne.n	801e254 <_printf_float+0x2fc>
 801e2d6:	e68d      	b.n	801dff4 <_printf_float+0x9c>
 801e2d8:	9a04      	ldr	r2, [sp, #16]
 801e2da:	464b      	mov	r3, r9
 801e2dc:	4442      	add	r2, r8
 801e2de:	4631      	mov	r1, r6
 801e2e0:	4628      	mov	r0, r5
 801e2e2:	47b8      	blx	r7
 801e2e4:	3001      	adds	r0, #1
 801e2e6:	d1c1      	bne.n	801e26c <_printf_float+0x314>
 801e2e8:	e684      	b.n	801dff4 <_printf_float+0x9c>
 801e2ea:	9a08      	ldr	r2, [sp, #32]
 801e2ec:	2a01      	cmp	r2, #1
 801e2ee:	dc01      	bgt.n	801e2f4 <_printf_float+0x39c>
 801e2f0:	07db      	lsls	r3, r3, #31
 801e2f2:	d537      	bpl.n	801e364 <_printf_float+0x40c>
 801e2f4:	2301      	movs	r3, #1
 801e2f6:	4642      	mov	r2, r8
 801e2f8:	4631      	mov	r1, r6
 801e2fa:	4628      	mov	r0, r5
 801e2fc:	47b8      	blx	r7
 801e2fe:	3001      	adds	r0, #1
 801e300:	f43f ae78 	beq.w	801dff4 <_printf_float+0x9c>
 801e304:	4653      	mov	r3, sl
 801e306:	465a      	mov	r2, fp
 801e308:	4631      	mov	r1, r6
 801e30a:	4628      	mov	r0, r5
 801e30c:	47b8      	blx	r7
 801e30e:	3001      	adds	r0, #1
 801e310:	f43f ae70 	beq.w	801dff4 <_printf_float+0x9c>
 801e314:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801e318:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e320:	d01b      	beq.n	801e35a <_printf_float+0x402>
 801e322:	9b08      	ldr	r3, [sp, #32]
 801e324:	f108 0201 	add.w	r2, r8, #1
 801e328:	3b01      	subs	r3, #1
 801e32a:	4631      	mov	r1, r6
 801e32c:	4628      	mov	r0, r5
 801e32e:	47b8      	blx	r7
 801e330:	3001      	adds	r0, #1
 801e332:	d10e      	bne.n	801e352 <_printf_float+0x3fa>
 801e334:	e65e      	b.n	801dff4 <_printf_float+0x9c>
 801e336:	2301      	movs	r3, #1
 801e338:	464a      	mov	r2, r9
 801e33a:	4631      	mov	r1, r6
 801e33c:	4628      	mov	r0, r5
 801e33e:	47b8      	blx	r7
 801e340:	3001      	adds	r0, #1
 801e342:	f43f ae57 	beq.w	801dff4 <_printf_float+0x9c>
 801e346:	f108 0801 	add.w	r8, r8, #1
 801e34a:	9b08      	ldr	r3, [sp, #32]
 801e34c:	3b01      	subs	r3, #1
 801e34e:	4543      	cmp	r3, r8
 801e350:	dcf1      	bgt.n	801e336 <_printf_float+0x3de>
 801e352:	9b04      	ldr	r3, [sp, #16]
 801e354:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801e358:	e6db      	b.n	801e112 <_printf_float+0x1ba>
 801e35a:	f04f 0800 	mov.w	r8, #0
 801e35e:	f104 091a 	add.w	r9, r4, #26
 801e362:	e7f2      	b.n	801e34a <_printf_float+0x3f2>
 801e364:	2301      	movs	r3, #1
 801e366:	4642      	mov	r2, r8
 801e368:	e7df      	b.n	801e32a <_printf_float+0x3d2>
 801e36a:	2301      	movs	r3, #1
 801e36c:	464a      	mov	r2, r9
 801e36e:	4631      	mov	r1, r6
 801e370:	4628      	mov	r0, r5
 801e372:	47b8      	blx	r7
 801e374:	3001      	adds	r0, #1
 801e376:	f43f ae3d 	beq.w	801dff4 <_printf_float+0x9c>
 801e37a:	f108 0801 	add.w	r8, r8, #1
 801e37e:	68e3      	ldr	r3, [r4, #12]
 801e380:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e382:	1a5b      	subs	r3, r3, r1
 801e384:	4543      	cmp	r3, r8
 801e386:	dcf0      	bgt.n	801e36a <_printf_float+0x412>
 801e388:	e6f7      	b.n	801e17a <_printf_float+0x222>
 801e38a:	f04f 0800 	mov.w	r8, #0
 801e38e:	f104 0919 	add.w	r9, r4, #25
 801e392:	e7f4      	b.n	801e37e <_printf_float+0x426>

0801e394 <_printf_common>:
 801e394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e398:	4616      	mov	r6, r2
 801e39a:	4699      	mov	r9, r3
 801e39c:	688a      	ldr	r2, [r1, #8]
 801e39e:	690b      	ldr	r3, [r1, #16]
 801e3a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e3a4:	4293      	cmp	r3, r2
 801e3a6:	bfb8      	it	lt
 801e3a8:	4613      	movlt	r3, r2
 801e3aa:	6033      	str	r3, [r6, #0]
 801e3ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e3b0:	4607      	mov	r7, r0
 801e3b2:	460c      	mov	r4, r1
 801e3b4:	b10a      	cbz	r2, 801e3ba <_printf_common+0x26>
 801e3b6:	3301      	adds	r3, #1
 801e3b8:	6033      	str	r3, [r6, #0]
 801e3ba:	6823      	ldr	r3, [r4, #0]
 801e3bc:	0699      	lsls	r1, r3, #26
 801e3be:	bf42      	ittt	mi
 801e3c0:	6833      	ldrmi	r3, [r6, #0]
 801e3c2:	3302      	addmi	r3, #2
 801e3c4:	6033      	strmi	r3, [r6, #0]
 801e3c6:	6825      	ldr	r5, [r4, #0]
 801e3c8:	f015 0506 	ands.w	r5, r5, #6
 801e3cc:	d106      	bne.n	801e3dc <_printf_common+0x48>
 801e3ce:	f104 0a19 	add.w	sl, r4, #25
 801e3d2:	68e3      	ldr	r3, [r4, #12]
 801e3d4:	6832      	ldr	r2, [r6, #0]
 801e3d6:	1a9b      	subs	r3, r3, r2
 801e3d8:	42ab      	cmp	r3, r5
 801e3da:	dc26      	bgt.n	801e42a <_printf_common+0x96>
 801e3dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e3e0:	1e13      	subs	r3, r2, #0
 801e3e2:	6822      	ldr	r2, [r4, #0]
 801e3e4:	bf18      	it	ne
 801e3e6:	2301      	movne	r3, #1
 801e3e8:	0692      	lsls	r2, r2, #26
 801e3ea:	d42b      	bmi.n	801e444 <_printf_common+0xb0>
 801e3ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e3f0:	4649      	mov	r1, r9
 801e3f2:	4638      	mov	r0, r7
 801e3f4:	47c0      	blx	r8
 801e3f6:	3001      	adds	r0, #1
 801e3f8:	d01e      	beq.n	801e438 <_printf_common+0xa4>
 801e3fa:	6823      	ldr	r3, [r4, #0]
 801e3fc:	68e5      	ldr	r5, [r4, #12]
 801e3fe:	6832      	ldr	r2, [r6, #0]
 801e400:	f003 0306 	and.w	r3, r3, #6
 801e404:	2b04      	cmp	r3, #4
 801e406:	bf08      	it	eq
 801e408:	1aad      	subeq	r5, r5, r2
 801e40a:	68a3      	ldr	r3, [r4, #8]
 801e40c:	6922      	ldr	r2, [r4, #16]
 801e40e:	bf0c      	ite	eq
 801e410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e414:	2500      	movne	r5, #0
 801e416:	4293      	cmp	r3, r2
 801e418:	bfc4      	itt	gt
 801e41a:	1a9b      	subgt	r3, r3, r2
 801e41c:	18ed      	addgt	r5, r5, r3
 801e41e:	2600      	movs	r6, #0
 801e420:	341a      	adds	r4, #26
 801e422:	42b5      	cmp	r5, r6
 801e424:	d11a      	bne.n	801e45c <_printf_common+0xc8>
 801e426:	2000      	movs	r0, #0
 801e428:	e008      	b.n	801e43c <_printf_common+0xa8>
 801e42a:	2301      	movs	r3, #1
 801e42c:	4652      	mov	r2, sl
 801e42e:	4649      	mov	r1, r9
 801e430:	4638      	mov	r0, r7
 801e432:	47c0      	blx	r8
 801e434:	3001      	adds	r0, #1
 801e436:	d103      	bne.n	801e440 <_printf_common+0xac>
 801e438:	f04f 30ff 	mov.w	r0, #4294967295
 801e43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e440:	3501      	adds	r5, #1
 801e442:	e7c6      	b.n	801e3d2 <_printf_common+0x3e>
 801e444:	18e1      	adds	r1, r4, r3
 801e446:	1c5a      	adds	r2, r3, #1
 801e448:	2030      	movs	r0, #48	; 0x30
 801e44a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e44e:	4422      	add	r2, r4
 801e450:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e454:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e458:	3302      	adds	r3, #2
 801e45a:	e7c7      	b.n	801e3ec <_printf_common+0x58>
 801e45c:	2301      	movs	r3, #1
 801e45e:	4622      	mov	r2, r4
 801e460:	4649      	mov	r1, r9
 801e462:	4638      	mov	r0, r7
 801e464:	47c0      	blx	r8
 801e466:	3001      	adds	r0, #1
 801e468:	d0e6      	beq.n	801e438 <_printf_common+0xa4>
 801e46a:	3601      	adds	r6, #1
 801e46c:	e7d9      	b.n	801e422 <_printf_common+0x8e>
	...

0801e470 <_printf_i>:
 801e470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e474:	7e0f      	ldrb	r7, [r1, #24]
 801e476:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e478:	2f78      	cmp	r7, #120	; 0x78
 801e47a:	4691      	mov	r9, r2
 801e47c:	4680      	mov	r8, r0
 801e47e:	460c      	mov	r4, r1
 801e480:	469a      	mov	sl, r3
 801e482:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801e486:	d807      	bhi.n	801e498 <_printf_i+0x28>
 801e488:	2f62      	cmp	r7, #98	; 0x62
 801e48a:	d80a      	bhi.n	801e4a2 <_printf_i+0x32>
 801e48c:	2f00      	cmp	r7, #0
 801e48e:	f000 80d8 	beq.w	801e642 <_printf_i+0x1d2>
 801e492:	2f58      	cmp	r7, #88	; 0x58
 801e494:	f000 80a3 	beq.w	801e5de <_printf_i+0x16e>
 801e498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e49c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e4a0:	e03a      	b.n	801e518 <_printf_i+0xa8>
 801e4a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e4a6:	2b15      	cmp	r3, #21
 801e4a8:	d8f6      	bhi.n	801e498 <_printf_i+0x28>
 801e4aa:	a101      	add	r1, pc, #4	; (adr r1, 801e4b0 <_printf_i+0x40>)
 801e4ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e4b0:	0801e509 	.word	0x0801e509
 801e4b4:	0801e51d 	.word	0x0801e51d
 801e4b8:	0801e499 	.word	0x0801e499
 801e4bc:	0801e499 	.word	0x0801e499
 801e4c0:	0801e499 	.word	0x0801e499
 801e4c4:	0801e499 	.word	0x0801e499
 801e4c8:	0801e51d 	.word	0x0801e51d
 801e4cc:	0801e499 	.word	0x0801e499
 801e4d0:	0801e499 	.word	0x0801e499
 801e4d4:	0801e499 	.word	0x0801e499
 801e4d8:	0801e499 	.word	0x0801e499
 801e4dc:	0801e629 	.word	0x0801e629
 801e4e0:	0801e54d 	.word	0x0801e54d
 801e4e4:	0801e60b 	.word	0x0801e60b
 801e4e8:	0801e499 	.word	0x0801e499
 801e4ec:	0801e499 	.word	0x0801e499
 801e4f0:	0801e64b 	.word	0x0801e64b
 801e4f4:	0801e499 	.word	0x0801e499
 801e4f8:	0801e54d 	.word	0x0801e54d
 801e4fc:	0801e499 	.word	0x0801e499
 801e500:	0801e499 	.word	0x0801e499
 801e504:	0801e613 	.word	0x0801e613
 801e508:	682b      	ldr	r3, [r5, #0]
 801e50a:	1d1a      	adds	r2, r3, #4
 801e50c:	681b      	ldr	r3, [r3, #0]
 801e50e:	602a      	str	r2, [r5, #0]
 801e510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e514:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e518:	2301      	movs	r3, #1
 801e51a:	e0a3      	b.n	801e664 <_printf_i+0x1f4>
 801e51c:	6820      	ldr	r0, [r4, #0]
 801e51e:	6829      	ldr	r1, [r5, #0]
 801e520:	0606      	lsls	r6, r0, #24
 801e522:	f101 0304 	add.w	r3, r1, #4
 801e526:	d50a      	bpl.n	801e53e <_printf_i+0xce>
 801e528:	680e      	ldr	r6, [r1, #0]
 801e52a:	602b      	str	r3, [r5, #0]
 801e52c:	2e00      	cmp	r6, #0
 801e52e:	da03      	bge.n	801e538 <_printf_i+0xc8>
 801e530:	232d      	movs	r3, #45	; 0x2d
 801e532:	4276      	negs	r6, r6
 801e534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e538:	485e      	ldr	r0, [pc, #376]	; (801e6b4 <_printf_i+0x244>)
 801e53a:	230a      	movs	r3, #10
 801e53c:	e019      	b.n	801e572 <_printf_i+0x102>
 801e53e:	680e      	ldr	r6, [r1, #0]
 801e540:	602b      	str	r3, [r5, #0]
 801e542:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e546:	bf18      	it	ne
 801e548:	b236      	sxthne	r6, r6
 801e54a:	e7ef      	b.n	801e52c <_printf_i+0xbc>
 801e54c:	682b      	ldr	r3, [r5, #0]
 801e54e:	6820      	ldr	r0, [r4, #0]
 801e550:	1d19      	adds	r1, r3, #4
 801e552:	6029      	str	r1, [r5, #0]
 801e554:	0601      	lsls	r1, r0, #24
 801e556:	d501      	bpl.n	801e55c <_printf_i+0xec>
 801e558:	681e      	ldr	r6, [r3, #0]
 801e55a:	e002      	b.n	801e562 <_printf_i+0xf2>
 801e55c:	0646      	lsls	r6, r0, #25
 801e55e:	d5fb      	bpl.n	801e558 <_printf_i+0xe8>
 801e560:	881e      	ldrh	r6, [r3, #0]
 801e562:	4854      	ldr	r0, [pc, #336]	; (801e6b4 <_printf_i+0x244>)
 801e564:	2f6f      	cmp	r7, #111	; 0x6f
 801e566:	bf0c      	ite	eq
 801e568:	2308      	moveq	r3, #8
 801e56a:	230a      	movne	r3, #10
 801e56c:	2100      	movs	r1, #0
 801e56e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e572:	6865      	ldr	r5, [r4, #4]
 801e574:	60a5      	str	r5, [r4, #8]
 801e576:	2d00      	cmp	r5, #0
 801e578:	bfa2      	ittt	ge
 801e57a:	6821      	ldrge	r1, [r4, #0]
 801e57c:	f021 0104 	bicge.w	r1, r1, #4
 801e580:	6021      	strge	r1, [r4, #0]
 801e582:	b90e      	cbnz	r6, 801e588 <_printf_i+0x118>
 801e584:	2d00      	cmp	r5, #0
 801e586:	d04d      	beq.n	801e624 <_printf_i+0x1b4>
 801e588:	4615      	mov	r5, r2
 801e58a:	fbb6 f1f3 	udiv	r1, r6, r3
 801e58e:	fb03 6711 	mls	r7, r3, r1, r6
 801e592:	5dc7      	ldrb	r7, [r0, r7]
 801e594:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801e598:	4637      	mov	r7, r6
 801e59a:	42bb      	cmp	r3, r7
 801e59c:	460e      	mov	r6, r1
 801e59e:	d9f4      	bls.n	801e58a <_printf_i+0x11a>
 801e5a0:	2b08      	cmp	r3, #8
 801e5a2:	d10b      	bne.n	801e5bc <_printf_i+0x14c>
 801e5a4:	6823      	ldr	r3, [r4, #0]
 801e5a6:	07de      	lsls	r6, r3, #31
 801e5a8:	d508      	bpl.n	801e5bc <_printf_i+0x14c>
 801e5aa:	6923      	ldr	r3, [r4, #16]
 801e5ac:	6861      	ldr	r1, [r4, #4]
 801e5ae:	4299      	cmp	r1, r3
 801e5b0:	bfde      	ittt	le
 801e5b2:	2330      	movle	r3, #48	; 0x30
 801e5b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e5b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 801e5bc:	1b52      	subs	r2, r2, r5
 801e5be:	6122      	str	r2, [r4, #16]
 801e5c0:	f8cd a000 	str.w	sl, [sp]
 801e5c4:	464b      	mov	r3, r9
 801e5c6:	aa03      	add	r2, sp, #12
 801e5c8:	4621      	mov	r1, r4
 801e5ca:	4640      	mov	r0, r8
 801e5cc:	f7ff fee2 	bl	801e394 <_printf_common>
 801e5d0:	3001      	adds	r0, #1
 801e5d2:	d14c      	bne.n	801e66e <_printf_i+0x1fe>
 801e5d4:	f04f 30ff 	mov.w	r0, #4294967295
 801e5d8:	b004      	add	sp, #16
 801e5da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e5de:	4835      	ldr	r0, [pc, #212]	; (801e6b4 <_printf_i+0x244>)
 801e5e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801e5e4:	6829      	ldr	r1, [r5, #0]
 801e5e6:	6823      	ldr	r3, [r4, #0]
 801e5e8:	f851 6b04 	ldr.w	r6, [r1], #4
 801e5ec:	6029      	str	r1, [r5, #0]
 801e5ee:	061d      	lsls	r5, r3, #24
 801e5f0:	d514      	bpl.n	801e61c <_printf_i+0x1ac>
 801e5f2:	07df      	lsls	r7, r3, #31
 801e5f4:	bf44      	itt	mi
 801e5f6:	f043 0320 	orrmi.w	r3, r3, #32
 801e5fa:	6023      	strmi	r3, [r4, #0]
 801e5fc:	b91e      	cbnz	r6, 801e606 <_printf_i+0x196>
 801e5fe:	6823      	ldr	r3, [r4, #0]
 801e600:	f023 0320 	bic.w	r3, r3, #32
 801e604:	6023      	str	r3, [r4, #0]
 801e606:	2310      	movs	r3, #16
 801e608:	e7b0      	b.n	801e56c <_printf_i+0xfc>
 801e60a:	6823      	ldr	r3, [r4, #0]
 801e60c:	f043 0320 	orr.w	r3, r3, #32
 801e610:	6023      	str	r3, [r4, #0]
 801e612:	2378      	movs	r3, #120	; 0x78
 801e614:	4828      	ldr	r0, [pc, #160]	; (801e6b8 <_printf_i+0x248>)
 801e616:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e61a:	e7e3      	b.n	801e5e4 <_printf_i+0x174>
 801e61c:	0659      	lsls	r1, r3, #25
 801e61e:	bf48      	it	mi
 801e620:	b2b6      	uxthmi	r6, r6
 801e622:	e7e6      	b.n	801e5f2 <_printf_i+0x182>
 801e624:	4615      	mov	r5, r2
 801e626:	e7bb      	b.n	801e5a0 <_printf_i+0x130>
 801e628:	682b      	ldr	r3, [r5, #0]
 801e62a:	6826      	ldr	r6, [r4, #0]
 801e62c:	6961      	ldr	r1, [r4, #20]
 801e62e:	1d18      	adds	r0, r3, #4
 801e630:	6028      	str	r0, [r5, #0]
 801e632:	0635      	lsls	r5, r6, #24
 801e634:	681b      	ldr	r3, [r3, #0]
 801e636:	d501      	bpl.n	801e63c <_printf_i+0x1cc>
 801e638:	6019      	str	r1, [r3, #0]
 801e63a:	e002      	b.n	801e642 <_printf_i+0x1d2>
 801e63c:	0670      	lsls	r0, r6, #25
 801e63e:	d5fb      	bpl.n	801e638 <_printf_i+0x1c8>
 801e640:	8019      	strh	r1, [r3, #0]
 801e642:	2300      	movs	r3, #0
 801e644:	6123      	str	r3, [r4, #16]
 801e646:	4615      	mov	r5, r2
 801e648:	e7ba      	b.n	801e5c0 <_printf_i+0x150>
 801e64a:	682b      	ldr	r3, [r5, #0]
 801e64c:	1d1a      	adds	r2, r3, #4
 801e64e:	602a      	str	r2, [r5, #0]
 801e650:	681d      	ldr	r5, [r3, #0]
 801e652:	6862      	ldr	r2, [r4, #4]
 801e654:	2100      	movs	r1, #0
 801e656:	4628      	mov	r0, r5
 801e658:	f7e1 fe4a 	bl	80002f0 <memchr>
 801e65c:	b108      	cbz	r0, 801e662 <_printf_i+0x1f2>
 801e65e:	1b40      	subs	r0, r0, r5
 801e660:	6060      	str	r0, [r4, #4]
 801e662:	6863      	ldr	r3, [r4, #4]
 801e664:	6123      	str	r3, [r4, #16]
 801e666:	2300      	movs	r3, #0
 801e668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e66c:	e7a8      	b.n	801e5c0 <_printf_i+0x150>
 801e66e:	6923      	ldr	r3, [r4, #16]
 801e670:	462a      	mov	r2, r5
 801e672:	4649      	mov	r1, r9
 801e674:	4640      	mov	r0, r8
 801e676:	47d0      	blx	sl
 801e678:	3001      	adds	r0, #1
 801e67a:	d0ab      	beq.n	801e5d4 <_printf_i+0x164>
 801e67c:	6823      	ldr	r3, [r4, #0]
 801e67e:	079b      	lsls	r3, r3, #30
 801e680:	d413      	bmi.n	801e6aa <_printf_i+0x23a>
 801e682:	68e0      	ldr	r0, [r4, #12]
 801e684:	9b03      	ldr	r3, [sp, #12]
 801e686:	4298      	cmp	r0, r3
 801e688:	bfb8      	it	lt
 801e68a:	4618      	movlt	r0, r3
 801e68c:	e7a4      	b.n	801e5d8 <_printf_i+0x168>
 801e68e:	2301      	movs	r3, #1
 801e690:	4632      	mov	r2, r6
 801e692:	4649      	mov	r1, r9
 801e694:	4640      	mov	r0, r8
 801e696:	47d0      	blx	sl
 801e698:	3001      	adds	r0, #1
 801e69a:	d09b      	beq.n	801e5d4 <_printf_i+0x164>
 801e69c:	3501      	adds	r5, #1
 801e69e:	68e3      	ldr	r3, [r4, #12]
 801e6a0:	9903      	ldr	r1, [sp, #12]
 801e6a2:	1a5b      	subs	r3, r3, r1
 801e6a4:	42ab      	cmp	r3, r5
 801e6a6:	dcf2      	bgt.n	801e68e <_printf_i+0x21e>
 801e6a8:	e7eb      	b.n	801e682 <_printf_i+0x212>
 801e6aa:	2500      	movs	r5, #0
 801e6ac:	f104 0619 	add.w	r6, r4, #25
 801e6b0:	e7f5      	b.n	801e69e <_printf_i+0x22e>
 801e6b2:	bf00      	nop
 801e6b4:	08020b96 	.word	0x08020b96
 801e6b8:	08020ba7 	.word	0x08020ba7

0801e6bc <cleanup_glue>:
 801e6bc:	b538      	push	{r3, r4, r5, lr}
 801e6be:	460c      	mov	r4, r1
 801e6c0:	6809      	ldr	r1, [r1, #0]
 801e6c2:	4605      	mov	r5, r0
 801e6c4:	b109      	cbz	r1, 801e6ca <cleanup_glue+0xe>
 801e6c6:	f7ff fff9 	bl	801e6bc <cleanup_glue>
 801e6ca:	4621      	mov	r1, r4
 801e6cc:	4628      	mov	r0, r5
 801e6ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e6d2:	f001 bb99 	b.w	801fe08 <_free_r>
	...

0801e6d8 <_reclaim_reent>:
 801e6d8:	4b2c      	ldr	r3, [pc, #176]	; (801e78c <_reclaim_reent+0xb4>)
 801e6da:	681b      	ldr	r3, [r3, #0]
 801e6dc:	4283      	cmp	r3, r0
 801e6de:	b570      	push	{r4, r5, r6, lr}
 801e6e0:	4604      	mov	r4, r0
 801e6e2:	d051      	beq.n	801e788 <_reclaim_reent+0xb0>
 801e6e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801e6e6:	b143      	cbz	r3, 801e6fa <_reclaim_reent+0x22>
 801e6e8:	68db      	ldr	r3, [r3, #12]
 801e6ea:	2b00      	cmp	r3, #0
 801e6ec:	d14a      	bne.n	801e784 <_reclaim_reent+0xac>
 801e6ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e6f0:	6819      	ldr	r1, [r3, #0]
 801e6f2:	b111      	cbz	r1, 801e6fa <_reclaim_reent+0x22>
 801e6f4:	4620      	mov	r0, r4
 801e6f6:	f001 fb87 	bl	801fe08 <_free_r>
 801e6fa:	6961      	ldr	r1, [r4, #20]
 801e6fc:	b111      	cbz	r1, 801e704 <_reclaim_reent+0x2c>
 801e6fe:	4620      	mov	r0, r4
 801e700:	f001 fb82 	bl	801fe08 <_free_r>
 801e704:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801e706:	b111      	cbz	r1, 801e70e <_reclaim_reent+0x36>
 801e708:	4620      	mov	r0, r4
 801e70a:	f001 fb7d 	bl	801fe08 <_free_r>
 801e70e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801e710:	b111      	cbz	r1, 801e718 <_reclaim_reent+0x40>
 801e712:	4620      	mov	r0, r4
 801e714:	f001 fb78 	bl	801fe08 <_free_r>
 801e718:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801e71a:	b111      	cbz	r1, 801e722 <_reclaim_reent+0x4a>
 801e71c:	4620      	mov	r0, r4
 801e71e:	f001 fb73 	bl	801fe08 <_free_r>
 801e722:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801e724:	b111      	cbz	r1, 801e72c <_reclaim_reent+0x54>
 801e726:	4620      	mov	r0, r4
 801e728:	f001 fb6e 	bl	801fe08 <_free_r>
 801e72c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801e72e:	b111      	cbz	r1, 801e736 <_reclaim_reent+0x5e>
 801e730:	4620      	mov	r0, r4
 801e732:	f001 fb69 	bl	801fe08 <_free_r>
 801e736:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801e738:	b111      	cbz	r1, 801e740 <_reclaim_reent+0x68>
 801e73a:	4620      	mov	r0, r4
 801e73c:	f001 fb64 	bl	801fe08 <_free_r>
 801e740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e742:	b111      	cbz	r1, 801e74a <_reclaim_reent+0x72>
 801e744:	4620      	mov	r0, r4
 801e746:	f001 fb5f 	bl	801fe08 <_free_r>
 801e74a:	69a3      	ldr	r3, [r4, #24]
 801e74c:	b1e3      	cbz	r3, 801e788 <_reclaim_reent+0xb0>
 801e74e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801e750:	4620      	mov	r0, r4
 801e752:	4798      	blx	r3
 801e754:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801e756:	b1b9      	cbz	r1, 801e788 <_reclaim_reent+0xb0>
 801e758:	4620      	mov	r0, r4
 801e75a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e75e:	f7ff bfad 	b.w	801e6bc <cleanup_glue>
 801e762:	5949      	ldr	r1, [r1, r5]
 801e764:	b941      	cbnz	r1, 801e778 <_reclaim_reent+0xa0>
 801e766:	3504      	adds	r5, #4
 801e768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e76a:	2d80      	cmp	r5, #128	; 0x80
 801e76c:	68d9      	ldr	r1, [r3, #12]
 801e76e:	d1f8      	bne.n	801e762 <_reclaim_reent+0x8a>
 801e770:	4620      	mov	r0, r4
 801e772:	f001 fb49 	bl	801fe08 <_free_r>
 801e776:	e7ba      	b.n	801e6ee <_reclaim_reent+0x16>
 801e778:	680e      	ldr	r6, [r1, #0]
 801e77a:	4620      	mov	r0, r4
 801e77c:	f001 fb44 	bl	801fe08 <_free_r>
 801e780:	4631      	mov	r1, r6
 801e782:	e7ef      	b.n	801e764 <_reclaim_reent+0x8c>
 801e784:	2500      	movs	r5, #0
 801e786:	e7ef      	b.n	801e768 <_reclaim_reent+0x90>
 801e788:	bd70      	pop	{r4, r5, r6, pc}
 801e78a:	bf00      	nop
 801e78c:	24000060 	.word	0x24000060

0801e790 <_sbrk_r>:
 801e790:	b538      	push	{r3, r4, r5, lr}
 801e792:	4d06      	ldr	r5, [pc, #24]	; (801e7ac <_sbrk_r+0x1c>)
 801e794:	2300      	movs	r3, #0
 801e796:	4604      	mov	r4, r0
 801e798:	4608      	mov	r0, r1
 801e79a:	602b      	str	r3, [r5, #0]
 801e79c:	f7e3 f924 	bl	80019e8 <_sbrk>
 801e7a0:	1c43      	adds	r3, r0, #1
 801e7a2:	d102      	bne.n	801e7aa <_sbrk_r+0x1a>
 801e7a4:	682b      	ldr	r3, [r5, #0]
 801e7a6:	b103      	cbz	r3, 801e7aa <_sbrk_r+0x1a>
 801e7a8:	6023      	str	r3, [r4, #0]
 801e7aa:	bd38      	pop	{r3, r4, r5, pc}
 801e7ac:	2401def4 	.word	0x2401def4

0801e7b0 <_raise_r>:
 801e7b0:	291f      	cmp	r1, #31
 801e7b2:	b538      	push	{r3, r4, r5, lr}
 801e7b4:	4604      	mov	r4, r0
 801e7b6:	460d      	mov	r5, r1
 801e7b8:	d904      	bls.n	801e7c4 <_raise_r+0x14>
 801e7ba:	2316      	movs	r3, #22
 801e7bc:	6003      	str	r3, [r0, #0]
 801e7be:	f04f 30ff 	mov.w	r0, #4294967295
 801e7c2:	bd38      	pop	{r3, r4, r5, pc}
 801e7c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e7c6:	b112      	cbz	r2, 801e7ce <_raise_r+0x1e>
 801e7c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e7cc:	b94b      	cbnz	r3, 801e7e2 <_raise_r+0x32>
 801e7ce:	4620      	mov	r0, r4
 801e7d0:	f000 f830 	bl	801e834 <_getpid_r>
 801e7d4:	462a      	mov	r2, r5
 801e7d6:	4601      	mov	r1, r0
 801e7d8:	4620      	mov	r0, r4
 801e7da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e7de:	f000 b817 	b.w	801e810 <_kill_r>
 801e7e2:	2b01      	cmp	r3, #1
 801e7e4:	d00a      	beq.n	801e7fc <_raise_r+0x4c>
 801e7e6:	1c59      	adds	r1, r3, #1
 801e7e8:	d103      	bne.n	801e7f2 <_raise_r+0x42>
 801e7ea:	2316      	movs	r3, #22
 801e7ec:	6003      	str	r3, [r0, #0]
 801e7ee:	2001      	movs	r0, #1
 801e7f0:	e7e7      	b.n	801e7c2 <_raise_r+0x12>
 801e7f2:	2400      	movs	r4, #0
 801e7f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e7f8:	4628      	mov	r0, r5
 801e7fa:	4798      	blx	r3
 801e7fc:	2000      	movs	r0, #0
 801e7fe:	e7e0      	b.n	801e7c2 <_raise_r+0x12>

0801e800 <raise>:
 801e800:	4b02      	ldr	r3, [pc, #8]	; (801e80c <raise+0xc>)
 801e802:	4601      	mov	r1, r0
 801e804:	6818      	ldr	r0, [r3, #0]
 801e806:	f7ff bfd3 	b.w	801e7b0 <_raise_r>
 801e80a:	bf00      	nop
 801e80c:	24000060 	.word	0x24000060

0801e810 <_kill_r>:
 801e810:	b538      	push	{r3, r4, r5, lr}
 801e812:	4d07      	ldr	r5, [pc, #28]	; (801e830 <_kill_r+0x20>)
 801e814:	2300      	movs	r3, #0
 801e816:	4604      	mov	r4, r0
 801e818:	4608      	mov	r0, r1
 801e81a:	4611      	mov	r1, r2
 801e81c:	602b      	str	r3, [r5, #0]
 801e81e:	f7e3 f85b 	bl	80018d8 <_kill>
 801e822:	1c43      	adds	r3, r0, #1
 801e824:	d102      	bne.n	801e82c <_kill_r+0x1c>
 801e826:	682b      	ldr	r3, [r5, #0]
 801e828:	b103      	cbz	r3, 801e82c <_kill_r+0x1c>
 801e82a:	6023      	str	r3, [r4, #0]
 801e82c:	bd38      	pop	{r3, r4, r5, pc}
 801e82e:	bf00      	nop
 801e830:	2401def4 	.word	0x2401def4

0801e834 <_getpid_r>:
 801e834:	f7e3 b848 	b.w	80018c8 <_getpid>

0801e838 <__sread>:
 801e838:	b510      	push	{r4, lr}
 801e83a:	460c      	mov	r4, r1
 801e83c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e840:	f001 fb2e 	bl	801fea0 <_read_r>
 801e844:	2800      	cmp	r0, #0
 801e846:	bfab      	itete	ge
 801e848:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e84a:	89a3      	ldrhlt	r3, [r4, #12]
 801e84c:	181b      	addge	r3, r3, r0
 801e84e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e852:	bfac      	ite	ge
 801e854:	6563      	strge	r3, [r4, #84]	; 0x54
 801e856:	81a3      	strhlt	r3, [r4, #12]
 801e858:	bd10      	pop	{r4, pc}

0801e85a <__swrite>:
 801e85a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e85e:	461f      	mov	r7, r3
 801e860:	898b      	ldrh	r3, [r1, #12]
 801e862:	05db      	lsls	r3, r3, #23
 801e864:	4605      	mov	r5, r0
 801e866:	460c      	mov	r4, r1
 801e868:	4616      	mov	r6, r2
 801e86a:	d505      	bpl.n	801e878 <__swrite+0x1e>
 801e86c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e870:	2302      	movs	r3, #2
 801e872:	2200      	movs	r2, #0
 801e874:	f000 ff08 	bl	801f688 <_lseek_r>
 801e878:	89a3      	ldrh	r3, [r4, #12]
 801e87a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e87e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e882:	81a3      	strh	r3, [r4, #12]
 801e884:	4632      	mov	r2, r6
 801e886:	463b      	mov	r3, r7
 801e888:	4628      	mov	r0, r5
 801e88a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e88e:	f000 b817 	b.w	801e8c0 <_write_r>

0801e892 <__sseek>:
 801e892:	b510      	push	{r4, lr}
 801e894:	460c      	mov	r4, r1
 801e896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e89a:	f000 fef5 	bl	801f688 <_lseek_r>
 801e89e:	1c43      	adds	r3, r0, #1
 801e8a0:	89a3      	ldrh	r3, [r4, #12]
 801e8a2:	bf15      	itete	ne
 801e8a4:	6560      	strne	r0, [r4, #84]	; 0x54
 801e8a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e8aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e8ae:	81a3      	strheq	r3, [r4, #12]
 801e8b0:	bf18      	it	ne
 801e8b2:	81a3      	strhne	r3, [r4, #12]
 801e8b4:	bd10      	pop	{r4, pc}

0801e8b6 <__sclose>:
 801e8b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e8ba:	f000 b813 	b.w	801e8e4 <_close_r>
	...

0801e8c0 <_write_r>:
 801e8c0:	b538      	push	{r3, r4, r5, lr}
 801e8c2:	4d07      	ldr	r5, [pc, #28]	; (801e8e0 <_write_r+0x20>)
 801e8c4:	4604      	mov	r4, r0
 801e8c6:	4608      	mov	r0, r1
 801e8c8:	4611      	mov	r1, r2
 801e8ca:	2200      	movs	r2, #0
 801e8cc:	602a      	str	r2, [r5, #0]
 801e8ce:	461a      	mov	r2, r3
 801e8d0:	f7e3 f839 	bl	8001946 <_write>
 801e8d4:	1c43      	adds	r3, r0, #1
 801e8d6:	d102      	bne.n	801e8de <_write_r+0x1e>
 801e8d8:	682b      	ldr	r3, [r5, #0]
 801e8da:	b103      	cbz	r3, 801e8de <_write_r+0x1e>
 801e8dc:	6023      	str	r3, [r4, #0]
 801e8de:	bd38      	pop	{r3, r4, r5, pc}
 801e8e0:	2401def4 	.word	0x2401def4

0801e8e4 <_close_r>:
 801e8e4:	b538      	push	{r3, r4, r5, lr}
 801e8e6:	4d06      	ldr	r5, [pc, #24]	; (801e900 <_close_r+0x1c>)
 801e8e8:	2300      	movs	r3, #0
 801e8ea:	4604      	mov	r4, r0
 801e8ec:	4608      	mov	r0, r1
 801e8ee:	602b      	str	r3, [r5, #0]
 801e8f0:	f7e3 f845 	bl	800197e <_close>
 801e8f4:	1c43      	adds	r3, r0, #1
 801e8f6:	d102      	bne.n	801e8fe <_close_r+0x1a>
 801e8f8:	682b      	ldr	r3, [r5, #0]
 801e8fa:	b103      	cbz	r3, 801e8fe <_close_r+0x1a>
 801e8fc:	6023      	str	r3, [r4, #0]
 801e8fe:	bd38      	pop	{r3, r4, r5, pc}
 801e900:	2401def4 	.word	0x2401def4

0801e904 <quorem>:
 801e904:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e908:	6903      	ldr	r3, [r0, #16]
 801e90a:	690c      	ldr	r4, [r1, #16]
 801e90c:	42a3      	cmp	r3, r4
 801e90e:	4607      	mov	r7, r0
 801e910:	f2c0 8081 	blt.w	801ea16 <quorem+0x112>
 801e914:	3c01      	subs	r4, #1
 801e916:	f101 0814 	add.w	r8, r1, #20
 801e91a:	f100 0514 	add.w	r5, r0, #20
 801e91e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e922:	9301      	str	r3, [sp, #4]
 801e924:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801e928:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e92c:	3301      	adds	r3, #1
 801e92e:	429a      	cmp	r2, r3
 801e930:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801e934:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801e938:	fbb2 f6f3 	udiv	r6, r2, r3
 801e93c:	d331      	bcc.n	801e9a2 <quorem+0x9e>
 801e93e:	f04f 0e00 	mov.w	lr, #0
 801e942:	4640      	mov	r0, r8
 801e944:	46ac      	mov	ip, r5
 801e946:	46f2      	mov	sl, lr
 801e948:	f850 2b04 	ldr.w	r2, [r0], #4
 801e94c:	b293      	uxth	r3, r2
 801e94e:	fb06 e303 	mla	r3, r6, r3, lr
 801e952:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801e956:	b29b      	uxth	r3, r3
 801e958:	ebaa 0303 	sub.w	r3, sl, r3
 801e95c:	f8dc a000 	ldr.w	sl, [ip]
 801e960:	0c12      	lsrs	r2, r2, #16
 801e962:	fa13 f38a 	uxtah	r3, r3, sl
 801e966:	fb06 e202 	mla	r2, r6, r2, lr
 801e96a:	9300      	str	r3, [sp, #0]
 801e96c:	9b00      	ldr	r3, [sp, #0]
 801e96e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801e972:	b292      	uxth	r2, r2
 801e974:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801e978:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e97c:	f8bd 3000 	ldrh.w	r3, [sp]
 801e980:	4581      	cmp	r9, r0
 801e982:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e986:	f84c 3b04 	str.w	r3, [ip], #4
 801e98a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801e98e:	d2db      	bcs.n	801e948 <quorem+0x44>
 801e990:	f855 300b 	ldr.w	r3, [r5, fp]
 801e994:	b92b      	cbnz	r3, 801e9a2 <quorem+0x9e>
 801e996:	9b01      	ldr	r3, [sp, #4]
 801e998:	3b04      	subs	r3, #4
 801e99a:	429d      	cmp	r5, r3
 801e99c:	461a      	mov	r2, r3
 801e99e:	d32e      	bcc.n	801e9fe <quorem+0xfa>
 801e9a0:	613c      	str	r4, [r7, #16]
 801e9a2:	4638      	mov	r0, r7
 801e9a4:	f001 f918 	bl	801fbd8 <__mcmp>
 801e9a8:	2800      	cmp	r0, #0
 801e9aa:	db24      	blt.n	801e9f6 <quorem+0xf2>
 801e9ac:	3601      	adds	r6, #1
 801e9ae:	4628      	mov	r0, r5
 801e9b0:	f04f 0c00 	mov.w	ip, #0
 801e9b4:	f858 2b04 	ldr.w	r2, [r8], #4
 801e9b8:	f8d0 e000 	ldr.w	lr, [r0]
 801e9bc:	b293      	uxth	r3, r2
 801e9be:	ebac 0303 	sub.w	r3, ip, r3
 801e9c2:	0c12      	lsrs	r2, r2, #16
 801e9c4:	fa13 f38e 	uxtah	r3, r3, lr
 801e9c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801e9cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e9d0:	b29b      	uxth	r3, r3
 801e9d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e9d6:	45c1      	cmp	r9, r8
 801e9d8:	f840 3b04 	str.w	r3, [r0], #4
 801e9dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801e9e0:	d2e8      	bcs.n	801e9b4 <quorem+0xb0>
 801e9e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e9e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e9ea:	b922      	cbnz	r2, 801e9f6 <quorem+0xf2>
 801e9ec:	3b04      	subs	r3, #4
 801e9ee:	429d      	cmp	r5, r3
 801e9f0:	461a      	mov	r2, r3
 801e9f2:	d30a      	bcc.n	801ea0a <quorem+0x106>
 801e9f4:	613c      	str	r4, [r7, #16]
 801e9f6:	4630      	mov	r0, r6
 801e9f8:	b003      	add	sp, #12
 801e9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9fe:	6812      	ldr	r2, [r2, #0]
 801ea00:	3b04      	subs	r3, #4
 801ea02:	2a00      	cmp	r2, #0
 801ea04:	d1cc      	bne.n	801e9a0 <quorem+0x9c>
 801ea06:	3c01      	subs	r4, #1
 801ea08:	e7c7      	b.n	801e99a <quorem+0x96>
 801ea0a:	6812      	ldr	r2, [r2, #0]
 801ea0c:	3b04      	subs	r3, #4
 801ea0e:	2a00      	cmp	r2, #0
 801ea10:	d1f0      	bne.n	801e9f4 <quorem+0xf0>
 801ea12:	3c01      	subs	r4, #1
 801ea14:	e7eb      	b.n	801e9ee <quorem+0xea>
 801ea16:	2000      	movs	r0, #0
 801ea18:	e7ee      	b.n	801e9f8 <quorem+0xf4>
 801ea1a:	0000      	movs	r0, r0
 801ea1c:	0000      	movs	r0, r0
	...

0801ea20 <_dtoa_r>:
 801ea20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea24:	ed2d 8b02 	vpush	{d8}
 801ea28:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801ea2a:	b091      	sub	sp, #68	; 0x44
 801ea2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801ea30:	ec59 8b10 	vmov	r8, r9, d0
 801ea34:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801ea36:	9106      	str	r1, [sp, #24]
 801ea38:	4606      	mov	r6, r0
 801ea3a:	9208      	str	r2, [sp, #32]
 801ea3c:	930c      	str	r3, [sp, #48]	; 0x30
 801ea3e:	b975      	cbnz	r5, 801ea5e <_dtoa_r+0x3e>
 801ea40:	2010      	movs	r0, #16
 801ea42:	f000 fe33 	bl	801f6ac <malloc>
 801ea46:	4602      	mov	r2, r0
 801ea48:	6270      	str	r0, [r6, #36]	; 0x24
 801ea4a:	b920      	cbnz	r0, 801ea56 <_dtoa_r+0x36>
 801ea4c:	4baa      	ldr	r3, [pc, #680]	; (801ecf8 <_dtoa_r+0x2d8>)
 801ea4e:	21ea      	movs	r1, #234	; 0xea
 801ea50:	48aa      	ldr	r0, [pc, #680]	; (801ecfc <_dtoa_r+0x2dc>)
 801ea52:	f001 fa37 	bl	801fec4 <__assert_func>
 801ea56:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801ea5a:	6005      	str	r5, [r0, #0]
 801ea5c:	60c5      	str	r5, [r0, #12]
 801ea5e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801ea60:	6819      	ldr	r1, [r3, #0]
 801ea62:	b151      	cbz	r1, 801ea7a <_dtoa_r+0x5a>
 801ea64:	685a      	ldr	r2, [r3, #4]
 801ea66:	604a      	str	r2, [r1, #4]
 801ea68:	2301      	movs	r3, #1
 801ea6a:	4093      	lsls	r3, r2
 801ea6c:	608b      	str	r3, [r1, #8]
 801ea6e:	4630      	mov	r0, r6
 801ea70:	f000 fe70 	bl	801f754 <_Bfree>
 801ea74:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801ea76:	2200      	movs	r2, #0
 801ea78:	601a      	str	r2, [r3, #0]
 801ea7a:	f1b9 0300 	subs.w	r3, r9, #0
 801ea7e:	bfbb      	ittet	lt
 801ea80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801ea84:	9303      	strlt	r3, [sp, #12]
 801ea86:	2300      	movge	r3, #0
 801ea88:	2201      	movlt	r2, #1
 801ea8a:	bfac      	ite	ge
 801ea8c:	6023      	strge	r3, [r4, #0]
 801ea8e:	6022      	strlt	r2, [r4, #0]
 801ea90:	4b9b      	ldr	r3, [pc, #620]	; (801ed00 <_dtoa_r+0x2e0>)
 801ea92:	9c03      	ldr	r4, [sp, #12]
 801ea94:	43a3      	bics	r3, r4
 801ea96:	d11c      	bne.n	801ead2 <_dtoa_r+0xb2>
 801ea98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ea9a:	f242 730f 	movw	r3, #9999	; 0x270f
 801ea9e:	6013      	str	r3, [r2, #0]
 801eaa0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801eaa4:	ea53 0308 	orrs.w	r3, r3, r8
 801eaa8:	f000 84fd 	beq.w	801f4a6 <_dtoa_r+0xa86>
 801eaac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801eaae:	b963      	cbnz	r3, 801eaca <_dtoa_r+0xaa>
 801eab0:	4b94      	ldr	r3, [pc, #592]	; (801ed04 <_dtoa_r+0x2e4>)
 801eab2:	e01f      	b.n	801eaf4 <_dtoa_r+0xd4>
 801eab4:	4b94      	ldr	r3, [pc, #592]	; (801ed08 <_dtoa_r+0x2e8>)
 801eab6:	9301      	str	r3, [sp, #4]
 801eab8:	3308      	adds	r3, #8
 801eaba:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801eabc:	6013      	str	r3, [r2, #0]
 801eabe:	9801      	ldr	r0, [sp, #4]
 801eac0:	b011      	add	sp, #68	; 0x44
 801eac2:	ecbd 8b02 	vpop	{d8}
 801eac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eaca:	4b8e      	ldr	r3, [pc, #568]	; (801ed04 <_dtoa_r+0x2e4>)
 801eacc:	9301      	str	r3, [sp, #4]
 801eace:	3303      	adds	r3, #3
 801ead0:	e7f3      	b.n	801eaba <_dtoa_r+0x9a>
 801ead2:	ed9d 8b02 	vldr	d8, [sp, #8]
 801ead6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801eada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eade:	d10b      	bne.n	801eaf8 <_dtoa_r+0xd8>
 801eae0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801eae2:	2301      	movs	r3, #1
 801eae4:	6013      	str	r3, [r2, #0]
 801eae6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801eae8:	2b00      	cmp	r3, #0
 801eaea:	f000 84d9 	beq.w	801f4a0 <_dtoa_r+0xa80>
 801eaee:	4887      	ldr	r0, [pc, #540]	; (801ed0c <_dtoa_r+0x2ec>)
 801eaf0:	6018      	str	r0, [r3, #0]
 801eaf2:	1e43      	subs	r3, r0, #1
 801eaf4:	9301      	str	r3, [sp, #4]
 801eaf6:	e7e2      	b.n	801eabe <_dtoa_r+0x9e>
 801eaf8:	a90f      	add	r1, sp, #60	; 0x3c
 801eafa:	aa0e      	add	r2, sp, #56	; 0x38
 801eafc:	4630      	mov	r0, r6
 801eafe:	eeb0 0b48 	vmov.f64	d0, d8
 801eb02:	f001 f90f 	bl	801fd24 <__d2b>
 801eb06:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801eb0a:	4605      	mov	r5, r0
 801eb0c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801eb0e:	2900      	cmp	r1, #0
 801eb10:	d046      	beq.n	801eba0 <_dtoa_r+0x180>
 801eb12:	ee18 4a90 	vmov	r4, s17
 801eb16:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801eb1a:	ec53 2b18 	vmov	r2, r3, d8
 801eb1e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801eb22:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801eb26:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801eb2a:	2400      	movs	r4, #0
 801eb2c:	ec43 2b16 	vmov	d6, r2, r3
 801eb30:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801eb34:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801ece0 <_dtoa_r+0x2c0>
 801eb38:	ee36 7b47 	vsub.f64	d7, d6, d7
 801eb3c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 801ece8 <_dtoa_r+0x2c8>
 801eb40:	eea7 6b05 	vfma.f64	d6, d7, d5
 801eb44:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801ecf0 <_dtoa_r+0x2d0>
 801eb48:	ee07 1a90 	vmov	s15, r1
 801eb4c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801eb50:	eeb0 7b46 	vmov.f64	d7, d6
 801eb54:	eea4 7b05 	vfma.f64	d7, d4, d5
 801eb58:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801eb5c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801eb60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb64:	ee16 ba90 	vmov	fp, s13
 801eb68:	940a      	str	r4, [sp, #40]	; 0x28
 801eb6a:	d508      	bpl.n	801eb7e <_dtoa_r+0x15e>
 801eb6c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801eb70:	eeb4 6b47 	vcmp.f64	d6, d7
 801eb74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb78:	bf18      	it	ne
 801eb7a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801eb7e:	f1bb 0f16 	cmp.w	fp, #22
 801eb82:	d82f      	bhi.n	801ebe4 <_dtoa_r+0x1c4>
 801eb84:	4b62      	ldr	r3, [pc, #392]	; (801ed10 <_dtoa_r+0x2f0>)
 801eb86:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801eb8a:	ed93 7b00 	vldr	d7, [r3]
 801eb8e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801eb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb96:	d501      	bpl.n	801eb9c <_dtoa_r+0x17c>
 801eb98:	f10b 3bff 	add.w	fp, fp, #4294967295
 801eb9c:	2300      	movs	r3, #0
 801eb9e:	e022      	b.n	801ebe6 <_dtoa_r+0x1c6>
 801eba0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801eba2:	4401      	add	r1, r0
 801eba4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801eba8:	2b20      	cmp	r3, #32
 801ebaa:	bfc1      	itttt	gt
 801ebac:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801ebb0:	fa04 f303 	lslgt.w	r3, r4, r3
 801ebb4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801ebb8:	fa28 f804 	lsrgt.w	r8, r8, r4
 801ebbc:	bfd6      	itet	le
 801ebbe:	f1c3 0320 	rsble	r3, r3, #32
 801ebc2:	ea43 0808 	orrgt.w	r8, r3, r8
 801ebc6:	fa08 f803 	lslle.w	r8, r8, r3
 801ebca:	ee07 8a90 	vmov	s15, r8
 801ebce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801ebd2:	3901      	subs	r1, #1
 801ebd4:	ee17 4a90 	vmov	r4, s15
 801ebd8:	ec53 2b17 	vmov	r2, r3, d7
 801ebdc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 801ebe0:	2401      	movs	r4, #1
 801ebe2:	e7a3      	b.n	801eb2c <_dtoa_r+0x10c>
 801ebe4:	2301      	movs	r3, #1
 801ebe6:	930b      	str	r3, [sp, #44]	; 0x2c
 801ebe8:	1a43      	subs	r3, r0, r1
 801ebea:	1e5a      	subs	r2, r3, #1
 801ebec:	bf45      	ittet	mi
 801ebee:	f1c3 0301 	rsbmi	r3, r3, #1
 801ebf2:	9304      	strmi	r3, [sp, #16]
 801ebf4:	2300      	movpl	r3, #0
 801ebf6:	2300      	movmi	r3, #0
 801ebf8:	9205      	str	r2, [sp, #20]
 801ebfa:	bf54      	ite	pl
 801ebfc:	9304      	strpl	r3, [sp, #16]
 801ebfe:	9305      	strmi	r3, [sp, #20]
 801ec00:	f1bb 0f00 	cmp.w	fp, #0
 801ec04:	db18      	blt.n	801ec38 <_dtoa_r+0x218>
 801ec06:	9b05      	ldr	r3, [sp, #20]
 801ec08:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801ec0c:	445b      	add	r3, fp
 801ec0e:	9305      	str	r3, [sp, #20]
 801ec10:	2300      	movs	r3, #0
 801ec12:	9a06      	ldr	r2, [sp, #24]
 801ec14:	2a09      	cmp	r2, #9
 801ec16:	d849      	bhi.n	801ecac <_dtoa_r+0x28c>
 801ec18:	2a05      	cmp	r2, #5
 801ec1a:	bfc4      	itt	gt
 801ec1c:	3a04      	subgt	r2, #4
 801ec1e:	9206      	strgt	r2, [sp, #24]
 801ec20:	9a06      	ldr	r2, [sp, #24]
 801ec22:	f1a2 0202 	sub.w	r2, r2, #2
 801ec26:	bfcc      	ite	gt
 801ec28:	2400      	movgt	r4, #0
 801ec2a:	2401      	movle	r4, #1
 801ec2c:	2a03      	cmp	r2, #3
 801ec2e:	d848      	bhi.n	801ecc2 <_dtoa_r+0x2a2>
 801ec30:	e8df f002 	tbb	[pc, r2]
 801ec34:	3a2c2e0b 	.word	0x3a2c2e0b
 801ec38:	9b04      	ldr	r3, [sp, #16]
 801ec3a:	2200      	movs	r2, #0
 801ec3c:	eba3 030b 	sub.w	r3, r3, fp
 801ec40:	9304      	str	r3, [sp, #16]
 801ec42:	9209      	str	r2, [sp, #36]	; 0x24
 801ec44:	f1cb 0300 	rsb	r3, fp, #0
 801ec48:	e7e3      	b.n	801ec12 <_dtoa_r+0x1f2>
 801ec4a:	2200      	movs	r2, #0
 801ec4c:	9207      	str	r2, [sp, #28]
 801ec4e:	9a08      	ldr	r2, [sp, #32]
 801ec50:	2a00      	cmp	r2, #0
 801ec52:	dc39      	bgt.n	801ecc8 <_dtoa_r+0x2a8>
 801ec54:	f04f 0a01 	mov.w	sl, #1
 801ec58:	46d1      	mov	r9, sl
 801ec5a:	4652      	mov	r2, sl
 801ec5c:	f8cd a020 	str.w	sl, [sp, #32]
 801ec60:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801ec62:	2100      	movs	r1, #0
 801ec64:	6079      	str	r1, [r7, #4]
 801ec66:	2004      	movs	r0, #4
 801ec68:	f100 0c14 	add.w	ip, r0, #20
 801ec6c:	4594      	cmp	ip, r2
 801ec6e:	6879      	ldr	r1, [r7, #4]
 801ec70:	d92f      	bls.n	801ecd2 <_dtoa_r+0x2b2>
 801ec72:	4630      	mov	r0, r6
 801ec74:	930d      	str	r3, [sp, #52]	; 0x34
 801ec76:	f000 fd2d 	bl	801f6d4 <_Balloc>
 801ec7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ec7c:	9001      	str	r0, [sp, #4]
 801ec7e:	4602      	mov	r2, r0
 801ec80:	2800      	cmp	r0, #0
 801ec82:	d149      	bne.n	801ed18 <_dtoa_r+0x2f8>
 801ec84:	4b23      	ldr	r3, [pc, #140]	; (801ed14 <_dtoa_r+0x2f4>)
 801ec86:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801ec8a:	e6e1      	b.n	801ea50 <_dtoa_r+0x30>
 801ec8c:	2201      	movs	r2, #1
 801ec8e:	e7dd      	b.n	801ec4c <_dtoa_r+0x22c>
 801ec90:	2200      	movs	r2, #0
 801ec92:	9207      	str	r2, [sp, #28]
 801ec94:	9a08      	ldr	r2, [sp, #32]
 801ec96:	eb0b 0a02 	add.w	sl, fp, r2
 801ec9a:	f10a 0901 	add.w	r9, sl, #1
 801ec9e:	464a      	mov	r2, r9
 801eca0:	2a01      	cmp	r2, #1
 801eca2:	bfb8      	it	lt
 801eca4:	2201      	movlt	r2, #1
 801eca6:	e7db      	b.n	801ec60 <_dtoa_r+0x240>
 801eca8:	2201      	movs	r2, #1
 801ecaa:	e7f2      	b.n	801ec92 <_dtoa_r+0x272>
 801ecac:	2401      	movs	r4, #1
 801ecae:	2200      	movs	r2, #0
 801ecb0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801ecb4:	f04f 3aff 	mov.w	sl, #4294967295
 801ecb8:	2100      	movs	r1, #0
 801ecba:	46d1      	mov	r9, sl
 801ecbc:	2212      	movs	r2, #18
 801ecbe:	9108      	str	r1, [sp, #32]
 801ecc0:	e7ce      	b.n	801ec60 <_dtoa_r+0x240>
 801ecc2:	2201      	movs	r2, #1
 801ecc4:	9207      	str	r2, [sp, #28]
 801ecc6:	e7f5      	b.n	801ecb4 <_dtoa_r+0x294>
 801ecc8:	f8dd a020 	ldr.w	sl, [sp, #32]
 801eccc:	46d1      	mov	r9, sl
 801ecce:	4652      	mov	r2, sl
 801ecd0:	e7c6      	b.n	801ec60 <_dtoa_r+0x240>
 801ecd2:	3101      	adds	r1, #1
 801ecd4:	6079      	str	r1, [r7, #4]
 801ecd6:	0040      	lsls	r0, r0, #1
 801ecd8:	e7c6      	b.n	801ec68 <_dtoa_r+0x248>
 801ecda:	bf00      	nop
 801ecdc:	f3af 8000 	nop.w
 801ece0:	636f4361 	.word	0x636f4361
 801ece4:	3fd287a7 	.word	0x3fd287a7
 801ece8:	8b60c8b3 	.word	0x8b60c8b3
 801ecec:	3fc68a28 	.word	0x3fc68a28
 801ecf0:	509f79fb 	.word	0x509f79fb
 801ecf4:	3fd34413 	.word	0x3fd34413
 801ecf8:	08020bc5 	.word	0x08020bc5
 801ecfc:	08020bdc 	.word	0x08020bdc
 801ed00:	7ff00000 	.word	0x7ff00000
 801ed04:	08020bc1 	.word	0x08020bc1
 801ed08:	08020bb8 	.word	0x08020bb8
 801ed0c:	08020b95 	.word	0x08020b95
 801ed10:	08020cd0 	.word	0x08020cd0
 801ed14:	08020c37 	.word	0x08020c37
 801ed18:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801ed1a:	9901      	ldr	r1, [sp, #4]
 801ed1c:	6011      	str	r1, [r2, #0]
 801ed1e:	f1b9 0f0e 	cmp.w	r9, #14
 801ed22:	d86c      	bhi.n	801edfe <_dtoa_r+0x3de>
 801ed24:	2c00      	cmp	r4, #0
 801ed26:	d06a      	beq.n	801edfe <_dtoa_r+0x3de>
 801ed28:	f1bb 0f00 	cmp.w	fp, #0
 801ed2c:	f340 80a0 	ble.w	801ee70 <_dtoa_r+0x450>
 801ed30:	49c1      	ldr	r1, [pc, #772]	; (801f038 <_dtoa_r+0x618>)
 801ed32:	f00b 020f 	and.w	r2, fp, #15
 801ed36:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801ed3a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801ed3e:	ed92 7b00 	vldr	d7, [r2]
 801ed42:	ea4f 112b 	mov.w	r1, fp, asr #4
 801ed46:	f000 8087 	beq.w	801ee58 <_dtoa_r+0x438>
 801ed4a:	4abc      	ldr	r2, [pc, #752]	; (801f03c <_dtoa_r+0x61c>)
 801ed4c:	ed92 6b08 	vldr	d6, [r2, #32]
 801ed50:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801ed54:	ed8d 6b02 	vstr	d6, [sp, #8]
 801ed58:	f001 010f 	and.w	r1, r1, #15
 801ed5c:	2203      	movs	r2, #3
 801ed5e:	48b7      	ldr	r0, [pc, #732]	; (801f03c <_dtoa_r+0x61c>)
 801ed60:	2900      	cmp	r1, #0
 801ed62:	d17b      	bne.n	801ee5c <_dtoa_r+0x43c>
 801ed64:	ed9d 6b02 	vldr	d6, [sp, #8]
 801ed68:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801ed6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ed70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ed72:	2900      	cmp	r1, #0
 801ed74:	f000 80a2 	beq.w	801eebc <_dtoa_r+0x49c>
 801ed78:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801ed7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ed80:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801ed84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed88:	f140 8098 	bpl.w	801eebc <_dtoa_r+0x49c>
 801ed8c:	f1b9 0f00 	cmp.w	r9, #0
 801ed90:	f000 8094 	beq.w	801eebc <_dtoa_r+0x49c>
 801ed94:	f1ba 0f00 	cmp.w	sl, #0
 801ed98:	dd2f      	ble.n	801edfa <_dtoa_r+0x3da>
 801ed9a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801ed9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801eda2:	ed8d 7b02 	vstr	d7, [sp, #8]
 801eda6:	f10b 37ff 	add.w	r7, fp, #4294967295
 801edaa:	3201      	adds	r2, #1
 801edac:	4650      	mov	r0, sl
 801edae:	ed9d 6b02 	vldr	d6, [sp, #8]
 801edb2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801edb6:	ee07 2a90 	vmov	s15, r2
 801edba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801edbe:	eea7 5b06 	vfma.f64	d5, d7, d6
 801edc2:	ee15 4a90 	vmov	r4, s11
 801edc6:	ec52 1b15 	vmov	r1, r2, d5
 801edca:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801edce:	2800      	cmp	r0, #0
 801edd0:	d177      	bne.n	801eec2 <_dtoa_r+0x4a2>
 801edd2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801edd6:	ee36 6b47 	vsub.f64	d6, d6, d7
 801edda:	ec42 1b17 	vmov	d7, r1, r2
 801edde:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ede2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ede6:	f300 8263 	bgt.w	801f2b0 <_dtoa_r+0x890>
 801edea:	eeb1 7b47 	vneg.f64	d7, d7
 801edee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801edf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801edf6:	f100 8258 	bmi.w	801f2aa <_dtoa_r+0x88a>
 801edfa:	ed8d 8b02 	vstr	d8, [sp, #8]
 801edfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ee00:	2a00      	cmp	r2, #0
 801ee02:	f2c0 811d 	blt.w	801f040 <_dtoa_r+0x620>
 801ee06:	f1bb 0f0e 	cmp.w	fp, #14
 801ee0a:	f300 8119 	bgt.w	801f040 <_dtoa_r+0x620>
 801ee0e:	4b8a      	ldr	r3, [pc, #552]	; (801f038 <_dtoa_r+0x618>)
 801ee10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801ee14:	ed93 6b00 	vldr	d6, [r3]
 801ee18:	9b08      	ldr	r3, [sp, #32]
 801ee1a:	2b00      	cmp	r3, #0
 801ee1c:	f280 80b7 	bge.w	801ef8e <_dtoa_r+0x56e>
 801ee20:	f1b9 0f00 	cmp.w	r9, #0
 801ee24:	f300 80b3 	bgt.w	801ef8e <_dtoa_r+0x56e>
 801ee28:	f040 823f 	bne.w	801f2aa <_dtoa_r+0x88a>
 801ee2c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801ee30:	ee26 6b07 	vmul.f64	d6, d6, d7
 801ee34:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ee38:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ee3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee40:	464c      	mov	r4, r9
 801ee42:	464f      	mov	r7, r9
 801ee44:	f280 8215 	bge.w	801f272 <_dtoa_r+0x852>
 801ee48:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ee4c:	2331      	movs	r3, #49	; 0x31
 801ee4e:	f808 3b01 	strb.w	r3, [r8], #1
 801ee52:	f10b 0b01 	add.w	fp, fp, #1
 801ee56:	e211      	b.n	801f27c <_dtoa_r+0x85c>
 801ee58:	2202      	movs	r2, #2
 801ee5a:	e780      	b.n	801ed5e <_dtoa_r+0x33e>
 801ee5c:	07cc      	lsls	r4, r1, #31
 801ee5e:	d504      	bpl.n	801ee6a <_dtoa_r+0x44a>
 801ee60:	ed90 6b00 	vldr	d6, [r0]
 801ee64:	3201      	adds	r2, #1
 801ee66:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ee6a:	1049      	asrs	r1, r1, #1
 801ee6c:	3008      	adds	r0, #8
 801ee6e:	e777      	b.n	801ed60 <_dtoa_r+0x340>
 801ee70:	d022      	beq.n	801eeb8 <_dtoa_r+0x498>
 801ee72:	f1cb 0100 	rsb	r1, fp, #0
 801ee76:	4a70      	ldr	r2, [pc, #448]	; (801f038 <_dtoa_r+0x618>)
 801ee78:	f001 000f 	and.w	r0, r1, #15
 801ee7c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801ee80:	ed92 7b00 	vldr	d7, [r2]
 801ee84:	ee28 7b07 	vmul.f64	d7, d8, d7
 801ee88:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ee8c:	486b      	ldr	r0, [pc, #428]	; (801f03c <_dtoa_r+0x61c>)
 801ee8e:	1109      	asrs	r1, r1, #4
 801ee90:	2400      	movs	r4, #0
 801ee92:	2202      	movs	r2, #2
 801ee94:	b929      	cbnz	r1, 801eea2 <_dtoa_r+0x482>
 801ee96:	2c00      	cmp	r4, #0
 801ee98:	f43f af6a 	beq.w	801ed70 <_dtoa_r+0x350>
 801ee9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801eea0:	e766      	b.n	801ed70 <_dtoa_r+0x350>
 801eea2:	07cf      	lsls	r7, r1, #31
 801eea4:	d505      	bpl.n	801eeb2 <_dtoa_r+0x492>
 801eea6:	ed90 6b00 	vldr	d6, [r0]
 801eeaa:	3201      	adds	r2, #1
 801eeac:	2401      	movs	r4, #1
 801eeae:	ee27 7b06 	vmul.f64	d7, d7, d6
 801eeb2:	1049      	asrs	r1, r1, #1
 801eeb4:	3008      	adds	r0, #8
 801eeb6:	e7ed      	b.n	801ee94 <_dtoa_r+0x474>
 801eeb8:	2202      	movs	r2, #2
 801eeba:	e759      	b.n	801ed70 <_dtoa_r+0x350>
 801eebc:	465f      	mov	r7, fp
 801eebe:	4648      	mov	r0, r9
 801eec0:	e775      	b.n	801edae <_dtoa_r+0x38e>
 801eec2:	ec42 1b17 	vmov	d7, r1, r2
 801eec6:	4a5c      	ldr	r2, [pc, #368]	; (801f038 <_dtoa_r+0x618>)
 801eec8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801eecc:	ed12 4b02 	vldr	d4, [r2, #-8]
 801eed0:	9a01      	ldr	r2, [sp, #4]
 801eed2:	1814      	adds	r4, r2, r0
 801eed4:	9a07      	ldr	r2, [sp, #28]
 801eed6:	b352      	cbz	r2, 801ef2e <_dtoa_r+0x50e>
 801eed8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801eedc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801eee0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801eee4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801eee8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801eeec:	ee35 7b47 	vsub.f64	d7, d5, d7
 801eef0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801eef4:	ee14 2a90 	vmov	r2, s9
 801eef8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801eefc:	3230      	adds	r2, #48	; 0x30
 801eefe:	ee36 6b45 	vsub.f64	d6, d6, d5
 801ef02:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ef06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef0a:	f808 2b01 	strb.w	r2, [r8], #1
 801ef0e:	d439      	bmi.n	801ef84 <_dtoa_r+0x564>
 801ef10:	ee32 5b46 	vsub.f64	d5, d2, d6
 801ef14:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801ef18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef1c:	d472      	bmi.n	801f004 <_dtoa_r+0x5e4>
 801ef1e:	45a0      	cmp	r8, r4
 801ef20:	f43f af6b 	beq.w	801edfa <_dtoa_r+0x3da>
 801ef24:	ee27 7b03 	vmul.f64	d7, d7, d3
 801ef28:	ee26 6b03 	vmul.f64	d6, d6, d3
 801ef2c:	e7e0      	b.n	801eef0 <_dtoa_r+0x4d0>
 801ef2e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ef32:	ee27 7b04 	vmul.f64	d7, d7, d4
 801ef36:	4621      	mov	r1, r4
 801ef38:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801ef3c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801ef40:	ee14 2a90 	vmov	r2, s9
 801ef44:	3230      	adds	r2, #48	; 0x30
 801ef46:	f808 2b01 	strb.w	r2, [r8], #1
 801ef4a:	45a0      	cmp	r8, r4
 801ef4c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801ef50:	ee36 6b45 	vsub.f64	d6, d6, d5
 801ef54:	d118      	bne.n	801ef88 <_dtoa_r+0x568>
 801ef56:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801ef5a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801ef5e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801ef62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef66:	dc4d      	bgt.n	801f004 <_dtoa_r+0x5e4>
 801ef68:	ee35 7b47 	vsub.f64	d7, d5, d7
 801ef6c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ef70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef74:	f57f af41 	bpl.w	801edfa <_dtoa_r+0x3da>
 801ef78:	4688      	mov	r8, r1
 801ef7a:	3901      	subs	r1, #1
 801ef7c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801ef80:	2b30      	cmp	r3, #48	; 0x30
 801ef82:	d0f9      	beq.n	801ef78 <_dtoa_r+0x558>
 801ef84:	46bb      	mov	fp, r7
 801ef86:	e02a      	b.n	801efde <_dtoa_r+0x5be>
 801ef88:	ee26 6b03 	vmul.f64	d6, d6, d3
 801ef8c:	e7d6      	b.n	801ef3c <_dtoa_r+0x51c>
 801ef8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ef92:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801ef96:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ef9a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801ef9e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801efa2:	ee15 3a10 	vmov	r3, s10
 801efa6:	3330      	adds	r3, #48	; 0x30
 801efa8:	f808 3b01 	strb.w	r3, [r8], #1
 801efac:	9b01      	ldr	r3, [sp, #4]
 801efae:	eba8 0303 	sub.w	r3, r8, r3
 801efb2:	4599      	cmp	r9, r3
 801efb4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801efb8:	eea3 7b46 	vfms.f64	d7, d3, d6
 801efbc:	d133      	bne.n	801f026 <_dtoa_r+0x606>
 801efbe:	ee37 7b07 	vadd.f64	d7, d7, d7
 801efc2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801efc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efca:	dc1a      	bgt.n	801f002 <_dtoa_r+0x5e2>
 801efcc:	eeb4 7b46 	vcmp.f64	d7, d6
 801efd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efd4:	d103      	bne.n	801efde <_dtoa_r+0x5be>
 801efd6:	ee15 3a10 	vmov	r3, s10
 801efda:	07d9      	lsls	r1, r3, #31
 801efdc:	d411      	bmi.n	801f002 <_dtoa_r+0x5e2>
 801efde:	4629      	mov	r1, r5
 801efe0:	4630      	mov	r0, r6
 801efe2:	f000 fbb7 	bl	801f754 <_Bfree>
 801efe6:	2300      	movs	r3, #0
 801efe8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801efea:	f888 3000 	strb.w	r3, [r8]
 801efee:	f10b 0301 	add.w	r3, fp, #1
 801eff2:	6013      	str	r3, [r2, #0]
 801eff4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801eff6:	2b00      	cmp	r3, #0
 801eff8:	f43f ad61 	beq.w	801eabe <_dtoa_r+0x9e>
 801effc:	f8c3 8000 	str.w	r8, [r3]
 801f000:	e55d      	b.n	801eabe <_dtoa_r+0x9e>
 801f002:	465f      	mov	r7, fp
 801f004:	4643      	mov	r3, r8
 801f006:	4698      	mov	r8, r3
 801f008:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f00c:	2a39      	cmp	r2, #57	; 0x39
 801f00e:	d106      	bne.n	801f01e <_dtoa_r+0x5fe>
 801f010:	9a01      	ldr	r2, [sp, #4]
 801f012:	429a      	cmp	r2, r3
 801f014:	d1f7      	bne.n	801f006 <_dtoa_r+0x5e6>
 801f016:	9901      	ldr	r1, [sp, #4]
 801f018:	2230      	movs	r2, #48	; 0x30
 801f01a:	3701      	adds	r7, #1
 801f01c:	700a      	strb	r2, [r1, #0]
 801f01e:	781a      	ldrb	r2, [r3, #0]
 801f020:	3201      	adds	r2, #1
 801f022:	701a      	strb	r2, [r3, #0]
 801f024:	e7ae      	b.n	801ef84 <_dtoa_r+0x564>
 801f026:	ee27 7b04 	vmul.f64	d7, d7, d4
 801f02a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801f02e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f032:	d1b2      	bne.n	801ef9a <_dtoa_r+0x57a>
 801f034:	e7d3      	b.n	801efde <_dtoa_r+0x5be>
 801f036:	bf00      	nop
 801f038:	08020cd0 	.word	0x08020cd0
 801f03c:	08020ca8 	.word	0x08020ca8
 801f040:	9907      	ldr	r1, [sp, #28]
 801f042:	2900      	cmp	r1, #0
 801f044:	f000 80d0 	beq.w	801f1e8 <_dtoa_r+0x7c8>
 801f048:	9906      	ldr	r1, [sp, #24]
 801f04a:	2901      	cmp	r1, #1
 801f04c:	f300 80b4 	bgt.w	801f1b8 <_dtoa_r+0x798>
 801f050:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f052:	2900      	cmp	r1, #0
 801f054:	f000 80ac 	beq.w	801f1b0 <_dtoa_r+0x790>
 801f058:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801f05c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801f060:	461c      	mov	r4, r3
 801f062:	930a      	str	r3, [sp, #40]	; 0x28
 801f064:	9b04      	ldr	r3, [sp, #16]
 801f066:	4413      	add	r3, r2
 801f068:	9304      	str	r3, [sp, #16]
 801f06a:	9b05      	ldr	r3, [sp, #20]
 801f06c:	2101      	movs	r1, #1
 801f06e:	4413      	add	r3, r2
 801f070:	4630      	mov	r0, r6
 801f072:	9305      	str	r3, [sp, #20]
 801f074:	f000 fc26 	bl	801f8c4 <__i2b>
 801f078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f07a:	4607      	mov	r7, r0
 801f07c:	f1b8 0f00 	cmp.w	r8, #0
 801f080:	dd0d      	ble.n	801f09e <_dtoa_r+0x67e>
 801f082:	9a05      	ldr	r2, [sp, #20]
 801f084:	2a00      	cmp	r2, #0
 801f086:	dd0a      	ble.n	801f09e <_dtoa_r+0x67e>
 801f088:	4542      	cmp	r2, r8
 801f08a:	9904      	ldr	r1, [sp, #16]
 801f08c:	bfa8      	it	ge
 801f08e:	4642      	movge	r2, r8
 801f090:	1a89      	subs	r1, r1, r2
 801f092:	9104      	str	r1, [sp, #16]
 801f094:	9905      	ldr	r1, [sp, #20]
 801f096:	eba8 0802 	sub.w	r8, r8, r2
 801f09a:	1a8a      	subs	r2, r1, r2
 801f09c:	9205      	str	r2, [sp, #20]
 801f09e:	b303      	cbz	r3, 801f0e2 <_dtoa_r+0x6c2>
 801f0a0:	9a07      	ldr	r2, [sp, #28]
 801f0a2:	2a00      	cmp	r2, #0
 801f0a4:	f000 80a5 	beq.w	801f1f2 <_dtoa_r+0x7d2>
 801f0a8:	2c00      	cmp	r4, #0
 801f0aa:	dd13      	ble.n	801f0d4 <_dtoa_r+0x6b4>
 801f0ac:	4639      	mov	r1, r7
 801f0ae:	4622      	mov	r2, r4
 801f0b0:	4630      	mov	r0, r6
 801f0b2:	930d      	str	r3, [sp, #52]	; 0x34
 801f0b4:	f000 fcc6 	bl	801fa44 <__pow5mult>
 801f0b8:	462a      	mov	r2, r5
 801f0ba:	4601      	mov	r1, r0
 801f0bc:	4607      	mov	r7, r0
 801f0be:	4630      	mov	r0, r6
 801f0c0:	f000 fc16 	bl	801f8f0 <__multiply>
 801f0c4:	4629      	mov	r1, r5
 801f0c6:	900a      	str	r0, [sp, #40]	; 0x28
 801f0c8:	4630      	mov	r0, r6
 801f0ca:	f000 fb43 	bl	801f754 <_Bfree>
 801f0ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f0d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f0d2:	4615      	mov	r5, r2
 801f0d4:	1b1a      	subs	r2, r3, r4
 801f0d6:	d004      	beq.n	801f0e2 <_dtoa_r+0x6c2>
 801f0d8:	4629      	mov	r1, r5
 801f0da:	4630      	mov	r0, r6
 801f0dc:	f000 fcb2 	bl	801fa44 <__pow5mult>
 801f0e0:	4605      	mov	r5, r0
 801f0e2:	2101      	movs	r1, #1
 801f0e4:	4630      	mov	r0, r6
 801f0e6:	f000 fbed 	bl	801f8c4 <__i2b>
 801f0ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f0ec:	2b00      	cmp	r3, #0
 801f0ee:	4604      	mov	r4, r0
 801f0f0:	f340 8081 	ble.w	801f1f6 <_dtoa_r+0x7d6>
 801f0f4:	461a      	mov	r2, r3
 801f0f6:	4601      	mov	r1, r0
 801f0f8:	4630      	mov	r0, r6
 801f0fa:	f000 fca3 	bl	801fa44 <__pow5mult>
 801f0fe:	9b06      	ldr	r3, [sp, #24]
 801f100:	2b01      	cmp	r3, #1
 801f102:	4604      	mov	r4, r0
 801f104:	dd7a      	ble.n	801f1fc <_dtoa_r+0x7dc>
 801f106:	2300      	movs	r3, #0
 801f108:	930a      	str	r3, [sp, #40]	; 0x28
 801f10a:	6922      	ldr	r2, [r4, #16]
 801f10c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801f110:	6910      	ldr	r0, [r2, #16]
 801f112:	f000 fb87 	bl	801f824 <__hi0bits>
 801f116:	f1c0 0020 	rsb	r0, r0, #32
 801f11a:	9b05      	ldr	r3, [sp, #20]
 801f11c:	4418      	add	r0, r3
 801f11e:	f010 001f 	ands.w	r0, r0, #31
 801f122:	f000 808c 	beq.w	801f23e <_dtoa_r+0x81e>
 801f126:	f1c0 0220 	rsb	r2, r0, #32
 801f12a:	2a04      	cmp	r2, #4
 801f12c:	f340 8085 	ble.w	801f23a <_dtoa_r+0x81a>
 801f130:	f1c0 001c 	rsb	r0, r0, #28
 801f134:	9b04      	ldr	r3, [sp, #16]
 801f136:	4403      	add	r3, r0
 801f138:	9304      	str	r3, [sp, #16]
 801f13a:	9b05      	ldr	r3, [sp, #20]
 801f13c:	4403      	add	r3, r0
 801f13e:	4480      	add	r8, r0
 801f140:	9305      	str	r3, [sp, #20]
 801f142:	9b04      	ldr	r3, [sp, #16]
 801f144:	2b00      	cmp	r3, #0
 801f146:	dd05      	ble.n	801f154 <_dtoa_r+0x734>
 801f148:	4629      	mov	r1, r5
 801f14a:	461a      	mov	r2, r3
 801f14c:	4630      	mov	r0, r6
 801f14e:	f000 fcd3 	bl	801faf8 <__lshift>
 801f152:	4605      	mov	r5, r0
 801f154:	9b05      	ldr	r3, [sp, #20]
 801f156:	2b00      	cmp	r3, #0
 801f158:	dd05      	ble.n	801f166 <_dtoa_r+0x746>
 801f15a:	4621      	mov	r1, r4
 801f15c:	461a      	mov	r2, r3
 801f15e:	4630      	mov	r0, r6
 801f160:	f000 fcca 	bl	801faf8 <__lshift>
 801f164:	4604      	mov	r4, r0
 801f166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f168:	2b00      	cmp	r3, #0
 801f16a:	d06a      	beq.n	801f242 <_dtoa_r+0x822>
 801f16c:	4621      	mov	r1, r4
 801f16e:	4628      	mov	r0, r5
 801f170:	f000 fd32 	bl	801fbd8 <__mcmp>
 801f174:	2800      	cmp	r0, #0
 801f176:	da64      	bge.n	801f242 <_dtoa_r+0x822>
 801f178:	2300      	movs	r3, #0
 801f17a:	4629      	mov	r1, r5
 801f17c:	220a      	movs	r2, #10
 801f17e:	4630      	mov	r0, r6
 801f180:	f000 fb0a 	bl	801f798 <__multadd>
 801f184:	9b07      	ldr	r3, [sp, #28]
 801f186:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f18a:	4605      	mov	r5, r0
 801f18c:	2b00      	cmp	r3, #0
 801f18e:	f000 8191 	beq.w	801f4b4 <_dtoa_r+0xa94>
 801f192:	4639      	mov	r1, r7
 801f194:	2300      	movs	r3, #0
 801f196:	220a      	movs	r2, #10
 801f198:	4630      	mov	r0, r6
 801f19a:	f000 fafd 	bl	801f798 <__multadd>
 801f19e:	f1ba 0f00 	cmp.w	sl, #0
 801f1a2:	4607      	mov	r7, r0
 801f1a4:	f300 808d 	bgt.w	801f2c2 <_dtoa_r+0x8a2>
 801f1a8:	9b06      	ldr	r3, [sp, #24]
 801f1aa:	2b02      	cmp	r3, #2
 801f1ac:	dc50      	bgt.n	801f250 <_dtoa_r+0x830>
 801f1ae:	e088      	b.n	801f2c2 <_dtoa_r+0x8a2>
 801f1b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f1b2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801f1b6:	e751      	b.n	801f05c <_dtoa_r+0x63c>
 801f1b8:	f109 34ff 	add.w	r4, r9, #4294967295
 801f1bc:	42a3      	cmp	r3, r4
 801f1be:	bfbf      	itttt	lt
 801f1c0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801f1c2:	1ae3      	sublt	r3, r4, r3
 801f1c4:	18d2      	addlt	r2, r2, r3
 801f1c6:	9209      	strlt	r2, [sp, #36]	; 0x24
 801f1c8:	bfb6      	itet	lt
 801f1ca:	4623      	movlt	r3, r4
 801f1cc:	1b1c      	subge	r4, r3, r4
 801f1ce:	2400      	movlt	r4, #0
 801f1d0:	f1b9 0f00 	cmp.w	r9, #0
 801f1d4:	bfb5      	itete	lt
 801f1d6:	9a04      	ldrlt	r2, [sp, #16]
 801f1d8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801f1dc:	eba2 0809 	sublt.w	r8, r2, r9
 801f1e0:	464a      	movge	r2, r9
 801f1e2:	bfb8      	it	lt
 801f1e4:	2200      	movlt	r2, #0
 801f1e6:	e73c      	b.n	801f062 <_dtoa_r+0x642>
 801f1e8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801f1ec:	9f07      	ldr	r7, [sp, #28]
 801f1ee:	461c      	mov	r4, r3
 801f1f0:	e744      	b.n	801f07c <_dtoa_r+0x65c>
 801f1f2:	461a      	mov	r2, r3
 801f1f4:	e770      	b.n	801f0d8 <_dtoa_r+0x6b8>
 801f1f6:	9b06      	ldr	r3, [sp, #24]
 801f1f8:	2b01      	cmp	r3, #1
 801f1fa:	dc18      	bgt.n	801f22e <_dtoa_r+0x80e>
 801f1fc:	9b02      	ldr	r3, [sp, #8]
 801f1fe:	b9b3      	cbnz	r3, 801f22e <_dtoa_r+0x80e>
 801f200:	9b03      	ldr	r3, [sp, #12]
 801f202:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801f206:	b9a2      	cbnz	r2, 801f232 <_dtoa_r+0x812>
 801f208:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801f20c:	0d12      	lsrs	r2, r2, #20
 801f20e:	0512      	lsls	r2, r2, #20
 801f210:	b18a      	cbz	r2, 801f236 <_dtoa_r+0x816>
 801f212:	9b04      	ldr	r3, [sp, #16]
 801f214:	3301      	adds	r3, #1
 801f216:	9304      	str	r3, [sp, #16]
 801f218:	9b05      	ldr	r3, [sp, #20]
 801f21a:	3301      	adds	r3, #1
 801f21c:	9305      	str	r3, [sp, #20]
 801f21e:	2301      	movs	r3, #1
 801f220:	930a      	str	r3, [sp, #40]	; 0x28
 801f222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f224:	2b00      	cmp	r3, #0
 801f226:	f47f af70 	bne.w	801f10a <_dtoa_r+0x6ea>
 801f22a:	2001      	movs	r0, #1
 801f22c:	e775      	b.n	801f11a <_dtoa_r+0x6fa>
 801f22e:	2300      	movs	r3, #0
 801f230:	e7f6      	b.n	801f220 <_dtoa_r+0x800>
 801f232:	9b02      	ldr	r3, [sp, #8]
 801f234:	e7f4      	b.n	801f220 <_dtoa_r+0x800>
 801f236:	920a      	str	r2, [sp, #40]	; 0x28
 801f238:	e7f3      	b.n	801f222 <_dtoa_r+0x802>
 801f23a:	d082      	beq.n	801f142 <_dtoa_r+0x722>
 801f23c:	4610      	mov	r0, r2
 801f23e:	301c      	adds	r0, #28
 801f240:	e778      	b.n	801f134 <_dtoa_r+0x714>
 801f242:	f1b9 0f00 	cmp.w	r9, #0
 801f246:	dc37      	bgt.n	801f2b8 <_dtoa_r+0x898>
 801f248:	9b06      	ldr	r3, [sp, #24]
 801f24a:	2b02      	cmp	r3, #2
 801f24c:	dd34      	ble.n	801f2b8 <_dtoa_r+0x898>
 801f24e:	46ca      	mov	sl, r9
 801f250:	f1ba 0f00 	cmp.w	sl, #0
 801f254:	d10d      	bne.n	801f272 <_dtoa_r+0x852>
 801f256:	4621      	mov	r1, r4
 801f258:	4653      	mov	r3, sl
 801f25a:	2205      	movs	r2, #5
 801f25c:	4630      	mov	r0, r6
 801f25e:	f000 fa9b 	bl	801f798 <__multadd>
 801f262:	4601      	mov	r1, r0
 801f264:	4604      	mov	r4, r0
 801f266:	4628      	mov	r0, r5
 801f268:	f000 fcb6 	bl	801fbd8 <__mcmp>
 801f26c:	2800      	cmp	r0, #0
 801f26e:	f73f adeb 	bgt.w	801ee48 <_dtoa_r+0x428>
 801f272:	9b08      	ldr	r3, [sp, #32]
 801f274:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801f278:	ea6f 0b03 	mvn.w	fp, r3
 801f27c:	f04f 0900 	mov.w	r9, #0
 801f280:	4621      	mov	r1, r4
 801f282:	4630      	mov	r0, r6
 801f284:	f000 fa66 	bl	801f754 <_Bfree>
 801f288:	2f00      	cmp	r7, #0
 801f28a:	f43f aea8 	beq.w	801efde <_dtoa_r+0x5be>
 801f28e:	f1b9 0f00 	cmp.w	r9, #0
 801f292:	d005      	beq.n	801f2a0 <_dtoa_r+0x880>
 801f294:	45b9      	cmp	r9, r7
 801f296:	d003      	beq.n	801f2a0 <_dtoa_r+0x880>
 801f298:	4649      	mov	r1, r9
 801f29a:	4630      	mov	r0, r6
 801f29c:	f000 fa5a 	bl	801f754 <_Bfree>
 801f2a0:	4639      	mov	r1, r7
 801f2a2:	4630      	mov	r0, r6
 801f2a4:	f000 fa56 	bl	801f754 <_Bfree>
 801f2a8:	e699      	b.n	801efde <_dtoa_r+0x5be>
 801f2aa:	2400      	movs	r4, #0
 801f2ac:	4627      	mov	r7, r4
 801f2ae:	e7e0      	b.n	801f272 <_dtoa_r+0x852>
 801f2b0:	46bb      	mov	fp, r7
 801f2b2:	4604      	mov	r4, r0
 801f2b4:	4607      	mov	r7, r0
 801f2b6:	e5c7      	b.n	801ee48 <_dtoa_r+0x428>
 801f2b8:	9b07      	ldr	r3, [sp, #28]
 801f2ba:	46ca      	mov	sl, r9
 801f2bc:	2b00      	cmp	r3, #0
 801f2be:	f000 8100 	beq.w	801f4c2 <_dtoa_r+0xaa2>
 801f2c2:	f1b8 0f00 	cmp.w	r8, #0
 801f2c6:	dd05      	ble.n	801f2d4 <_dtoa_r+0x8b4>
 801f2c8:	4639      	mov	r1, r7
 801f2ca:	4642      	mov	r2, r8
 801f2cc:	4630      	mov	r0, r6
 801f2ce:	f000 fc13 	bl	801faf8 <__lshift>
 801f2d2:	4607      	mov	r7, r0
 801f2d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f2d6:	2b00      	cmp	r3, #0
 801f2d8:	d05d      	beq.n	801f396 <_dtoa_r+0x976>
 801f2da:	6879      	ldr	r1, [r7, #4]
 801f2dc:	4630      	mov	r0, r6
 801f2de:	f000 f9f9 	bl	801f6d4 <_Balloc>
 801f2e2:	4680      	mov	r8, r0
 801f2e4:	b928      	cbnz	r0, 801f2f2 <_dtoa_r+0x8d2>
 801f2e6:	4b82      	ldr	r3, [pc, #520]	; (801f4f0 <_dtoa_r+0xad0>)
 801f2e8:	4602      	mov	r2, r0
 801f2ea:	f240 21ea 	movw	r1, #746	; 0x2ea
 801f2ee:	f7ff bbaf 	b.w	801ea50 <_dtoa_r+0x30>
 801f2f2:	693a      	ldr	r2, [r7, #16]
 801f2f4:	3202      	adds	r2, #2
 801f2f6:	0092      	lsls	r2, r2, #2
 801f2f8:	f107 010c 	add.w	r1, r7, #12
 801f2fc:	300c      	adds	r0, #12
 801f2fe:	f7fe fcf0 	bl	801dce2 <memcpy>
 801f302:	2201      	movs	r2, #1
 801f304:	4641      	mov	r1, r8
 801f306:	4630      	mov	r0, r6
 801f308:	f000 fbf6 	bl	801faf8 <__lshift>
 801f30c:	9b01      	ldr	r3, [sp, #4]
 801f30e:	3301      	adds	r3, #1
 801f310:	9304      	str	r3, [sp, #16]
 801f312:	9b01      	ldr	r3, [sp, #4]
 801f314:	4453      	add	r3, sl
 801f316:	9308      	str	r3, [sp, #32]
 801f318:	9b02      	ldr	r3, [sp, #8]
 801f31a:	f003 0301 	and.w	r3, r3, #1
 801f31e:	46b9      	mov	r9, r7
 801f320:	9307      	str	r3, [sp, #28]
 801f322:	4607      	mov	r7, r0
 801f324:	9b04      	ldr	r3, [sp, #16]
 801f326:	4621      	mov	r1, r4
 801f328:	3b01      	subs	r3, #1
 801f32a:	4628      	mov	r0, r5
 801f32c:	9302      	str	r3, [sp, #8]
 801f32e:	f7ff fae9 	bl	801e904 <quorem>
 801f332:	4603      	mov	r3, r0
 801f334:	3330      	adds	r3, #48	; 0x30
 801f336:	9005      	str	r0, [sp, #20]
 801f338:	4649      	mov	r1, r9
 801f33a:	4628      	mov	r0, r5
 801f33c:	9309      	str	r3, [sp, #36]	; 0x24
 801f33e:	f000 fc4b 	bl	801fbd8 <__mcmp>
 801f342:	463a      	mov	r2, r7
 801f344:	4682      	mov	sl, r0
 801f346:	4621      	mov	r1, r4
 801f348:	4630      	mov	r0, r6
 801f34a:	f000 fc61 	bl	801fc10 <__mdiff>
 801f34e:	68c2      	ldr	r2, [r0, #12]
 801f350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f352:	4680      	mov	r8, r0
 801f354:	bb0a      	cbnz	r2, 801f39a <_dtoa_r+0x97a>
 801f356:	4601      	mov	r1, r0
 801f358:	4628      	mov	r0, r5
 801f35a:	f000 fc3d 	bl	801fbd8 <__mcmp>
 801f35e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f360:	4602      	mov	r2, r0
 801f362:	4641      	mov	r1, r8
 801f364:	4630      	mov	r0, r6
 801f366:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801f36a:	f000 f9f3 	bl	801f754 <_Bfree>
 801f36e:	9b06      	ldr	r3, [sp, #24]
 801f370:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f372:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801f376:	ea43 0102 	orr.w	r1, r3, r2
 801f37a:	9b07      	ldr	r3, [sp, #28]
 801f37c:	430b      	orrs	r3, r1
 801f37e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f380:	d10d      	bne.n	801f39e <_dtoa_r+0x97e>
 801f382:	2b39      	cmp	r3, #57	; 0x39
 801f384:	d029      	beq.n	801f3da <_dtoa_r+0x9ba>
 801f386:	f1ba 0f00 	cmp.w	sl, #0
 801f38a:	dd01      	ble.n	801f390 <_dtoa_r+0x970>
 801f38c:	9b05      	ldr	r3, [sp, #20]
 801f38e:	3331      	adds	r3, #49	; 0x31
 801f390:	9a02      	ldr	r2, [sp, #8]
 801f392:	7013      	strb	r3, [r2, #0]
 801f394:	e774      	b.n	801f280 <_dtoa_r+0x860>
 801f396:	4638      	mov	r0, r7
 801f398:	e7b8      	b.n	801f30c <_dtoa_r+0x8ec>
 801f39a:	2201      	movs	r2, #1
 801f39c:	e7e1      	b.n	801f362 <_dtoa_r+0x942>
 801f39e:	f1ba 0f00 	cmp.w	sl, #0
 801f3a2:	db06      	blt.n	801f3b2 <_dtoa_r+0x992>
 801f3a4:	9906      	ldr	r1, [sp, #24]
 801f3a6:	ea41 0a0a 	orr.w	sl, r1, sl
 801f3aa:	9907      	ldr	r1, [sp, #28]
 801f3ac:	ea5a 0101 	orrs.w	r1, sl, r1
 801f3b0:	d120      	bne.n	801f3f4 <_dtoa_r+0x9d4>
 801f3b2:	2a00      	cmp	r2, #0
 801f3b4:	ddec      	ble.n	801f390 <_dtoa_r+0x970>
 801f3b6:	4629      	mov	r1, r5
 801f3b8:	2201      	movs	r2, #1
 801f3ba:	4630      	mov	r0, r6
 801f3bc:	9304      	str	r3, [sp, #16]
 801f3be:	f000 fb9b 	bl	801faf8 <__lshift>
 801f3c2:	4621      	mov	r1, r4
 801f3c4:	4605      	mov	r5, r0
 801f3c6:	f000 fc07 	bl	801fbd8 <__mcmp>
 801f3ca:	2800      	cmp	r0, #0
 801f3cc:	9b04      	ldr	r3, [sp, #16]
 801f3ce:	dc02      	bgt.n	801f3d6 <_dtoa_r+0x9b6>
 801f3d0:	d1de      	bne.n	801f390 <_dtoa_r+0x970>
 801f3d2:	07da      	lsls	r2, r3, #31
 801f3d4:	d5dc      	bpl.n	801f390 <_dtoa_r+0x970>
 801f3d6:	2b39      	cmp	r3, #57	; 0x39
 801f3d8:	d1d8      	bne.n	801f38c <_dtoa_r+0x96c>
 801f3da:	9a02      	ldr	r2, [sp, #8]
 801f3dc:	2339      	movs	r3, #57	; 0x39
 801f3de:	7013      	strb	r3, [r2, #0]
 801f3e0:	4643      	mov	r3, r8
 801f3e2:	4698      	mov	r8, r3
 801f3e4:	3b01      	subs	r3, #1
 801f3e6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801f3ea:	2a39      	cmp	r2, #57	; 0x39
 801f3ec:	d051      	beq.n	801f492 <_dtoa_r+0xa72>
 801f3ee:	3201      	adds	r2, #1
 801f3f0:	701a      	strb	r2, [r3, #0]
 801f3f2:	e745      	b.n	801f280 <_dtoa_r+0x860>
 801f3f4:	2a00      	cmp	r2, #0
 801f3f6:	dd03      	ble.n	801f400 <_dtoa_r+0x9e0>
 801f3f8:	2b39      	cmp	r3, #57	; 0x39
 801f3fa:	d0ee      	beq.n	801f3da <_dtoa_r+0x9ba>
 801f3fc:	3301      	adds	r3, #1
 801f3fe:	e7c7      	b.n	801f390 <_dtoa_r+0x970>
 801f400:	9a04      	ldr	r2, [sp, #16]
 801f402:	9908      	ldr	r1, [sp, #32]
 801f404:	f802 3c01 	strb.w	r3, [r2, #-1]
 801f408:	428a      	cmp	r2, r1
 801f40a:	d02b      	beq.n	801f464 <_dtoa_r+0xa44>
 801f40c:	4629      	mov	r1, r5
 801f40e:	2300      	movs	r3, #0
 801f410:	220a      	movs	r2, #10
 801f412:	4630      	mov	r0, r6
 801f414:	f000 f9c0 	bl	801f798 <__multadd>
 801f418:	45b9      	cmp	r9, r7
 801f41a:	4605      	mov	r5, r0
 801f41c:	f04f 0300 	mov.w	r3, #0
 801f420:	f04f 020a 	mov.w	r2, #10
 801f424:	4649      	mov	r1, r9
 801f426:	4630      	mov	r0, r6
 801f428:	d107      	bne.n	801f43a <_dtoa_r+0xa1a>
 801f42a:	f000 f9b5 	bl	801f798 <__multadd>
 801f42e:	4681      	mov	r9, r0
 801f430:	4607      	mov	r7, r0
 801f432:	9b04      	ldr	r3, [sp, #16]
 801f434:	3301      	adds	r3, #1
 801f436:	9304      	str	r3, [sp, #16]
 801f438:	e774      	b.n	801f324 <_dtoa_r+0x904>
 801f43a:	f000 f9ad 	bl	801f798 <__multadd>
 801f43e:	4639      	mov	r1, r7
 801f440:	4681      	mov	r9, r0
 801f442:	2300      	movs	r3, #0
 801f444:	220a      	movs	r2, #10
 801f446:	4630      	mov	r0, r6
 801f448:	f000 f9a6 	bl	801f798 <__multadd>
 801f44c:	4607      	mov	r7, r0
 801f44e:	e7f0      	b.n	801f432 <_dtoa_r+0xa12>
 801f450:	f1ba 0f00 	cmp.w	sl, #0
 801f454:	9a01      	ldr	r2, [sp, #4]
 801f456:	bfcc      	ite	gt
 801f458:	46d0      	movgt	r8, sl
 801f45a:	f04f 0801 	movle.w	r8, #1
 801f45e:	4490      	add	r8, r2
 801f460:	f04f 0900 	mov.w	r9, #0
 801f464:	4629      	mov	r1, r5
 801f466:	2201      	movs	r2, #1
 801f468:	4630      	mov	r0, r6
 801f46a:	9302      	str	r3, [sp, #8]
 801f46c:	f000 fb44 	bl	801faf8 <__lshift>
 801f470:	4621      	mov	r1, r4
 801f472:	4605      	mov	r5, r0
 801f474:	f000 fbb0 	bl	801fbd8 <__mcmp>
 801f478:	2800      	cmp	r0, #0
 801f47a:	dcb1      	bgt.n	801f3e0 <_dtoa_r+0x9c0>
 801f47c:	d102      	bne.n	801f484 <_dtoa_r+0xa64>
 801f47e:	9b02      	ldr	r3, [sp, #8]
 801f480:	07db      	lsls	r3, r3, #31
 801f482:	d4ad      	bmi.n	801f3e0 <_dtoa_r+0x9c0>
 801f484:	4643      	mov	r3, r8
 801f486:	4698      	mov	r8, r3
 801f488:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f48c:	2a30      	cmp	r2, #48	; 0x30
 801f48e:	d0fa      	beq.n	801f486 <_dtoa_r+0xa66>
 801f490:	e6f6      	b.n	801f280 <_dtoa_r+0x860>
 801f492:	9a01      	ldr	r2, [sp, #4]
 801f494:	429a      	cmp	r2, r3
 801f496:	d1a4      	bne.n	801f3e2 <_dtoa_r+0x9c2>
 801f498:	f10b 0b01 	add.w	fp, fp, #1
 801f49c:	2331      	movs	r3, #49	; 0x31
 801f49e:	e778      	b.n	801f392 <_dtoa_r+0x972>
 801f4a0:	4b14      	ldr	r3, [pc, #80]	; (801f4f4 <_dtoa_r+0xad4>)
 801f4a2:	f7ff bb27 	b.w	801eaf4 <_dtoa_r+0xd4>
 801f4a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f4a8:	2b00      	cmp	r3, #0
 801f4aa:	f47f ab03 	bne.w	801eab4 <_dtoa_r+0x94>
 801f4ae:	4b12      	ldr	r3, [pc, #72]	; (801f4f8 <_dtoa_r+0xad8>)
 801f4b0:	f7ff bb20 	b.w	801eaf4 <_dtoa_r+0xd4>
 801f4b4:	f1ba 0f00 	cmp.w	sl, #0
 801f4b8:	dc03      	bgt.n	801f4c2 <_dtoa_r+0xaa2>
 801f4ba:	9b06      	ldr	r3, [sp, #24]
 801f4bc:	2b02      	cmp	r3, #2
 801f4be:	f73f aec7 	bgt.w	801f250 <_dtoa_r+0x830>
 801f4c2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801f4c6:	4621      	mov	r1, r4
 801f4c8:	4628      	mov	r0, r5
 801f4ca:	f7ff fa1b 	bl	801e904 <quorem>
 801f4ce:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801f4d2:	f808 3b01 	strb.w	r3, [r8], #1
 801f4d6:	9a01      	ldr	r2, [sp, #4]
 801f4d8:	eba8 0202 	sub.w	r2, r8, r2
 801f4dc:	4592      	cmp	sl, r2
 801f4de:	ddb7      	ble.n	801f450 <_dtoa_r+0xa30>
 801f4e0:	4629      	mov	r1, r5
 801f4e2:	2300      	movs	r3, #0
 801f4e4:	220a      	movs	r2, #10
 801f4e6:	4630      	mov	r0, r6
 801f4e8:	f000 f956 	bl	801f798 <__multadd>
 801f4ec:	4605      	mov	r5, r0
 801f4ee:	e7ea      	b.n	801f4c6 <_dtoa_r+0xaa6>
 801f4f0:	08020c37 	.word	0x08020c37
 801f4f4:	08020b94 	.word	0x08020b94
 801f4f8:	08020bb8 	.word	0x08020bb8

0801f4fc <__sflush_r>:
 801f4fc:	898a      	ldrh	r2, [r1, #12]
 801f4fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f502:	4605      	mov	r5, r0
 801f504:	0710      	lsls	r0, r2, #28
 801f506:	460c      	mov	r4, r1
 801f508:	d458      	bmi.n	801f5bc <__sflush_r+0xc0>
 801f50a:	684b      	ldr	r3, [r1, #4]
 801f50c:	2b00      	cmp	r3, #0
 801f50e:	dc05      	bgt.n	801f51c <__sflush_r+0x20>
 801f510:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f512:	2b00      	cmp	r3, #0
 801f514:	dc02      	bgt.n	801f51c <__sflush_r+0x20>
 801f516:	2000      	movs	r0, #0
 801f518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f51c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f51e:	2e00      	cmp	r6, #0
 801f520:	d0f9      	beq.n	801f516 <__sflush_r+0x1a>
 801f522:	2300      	movs	r3, #0
 801f524:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f528:	682f      	ldr	r7, [r5, #0]
 801f52a:	602b      	str	r3, [r5, #0]
 801f52c:	d032      	beq.n	801f594 <__sflush_r+0x98>
 801f52e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f530:	89a3      	ldrh	r3, [r4, #12]
 801f532:	075a      	lsls	r2, r3, #29
 801f534:	d505      	bpl.n	801f542 <__sflush_r+0x46>
 801f536:	6863      	ldr	r3, [r4, #4]
 801f538:	1ac0      	subs	r0, r0, r3
 801f53a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f53c:	b10b      	cbz	r3, 801f542 <__sflush_r+0x46>
 801f53e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f540:	1ac0      	subs	r0, r0, r3
 801f542:	2300      	movs	r3, #0
 801f544:	4602      	mov	r2, r0
 801f546:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f548:	6a21      	ldr	r1, [r4, #32]
 801f54a:	4628      	mov	r0, r5
 801f54c:	47b0      	blx	r6
 801f54e:	1c43      	adds	r3, r0, #1
 801f550:	89a3      	ldrh	r3, [r4, #12]
 801f552:	d106      	bne.n	801f562 <__sflush_r+0x66>
 801f554:	6829      	ldr	r1, [r5, #0]
 801f556:	291d      	cmp	r1, #29
 801f558:	d82c      	bhi.n	801f5b4 <__sflush_r+0xb8>
 801f55a:	4a2a      	ldr	r2, [pc, #168]	; (801f604 <__sflush_r+0x108>)
 801f55c:	40ca      	lsrs	r2, r1
 801f55e:	07d6      	lsls	r6, r2, #31
 801f560:	d528      	bpl.n	801f5b4 <__sflush_r+0xb8>
 801f562:	2200      	movs	r2, #0
 801f564:	6062      	str	r2, [r4, #4]
 801f566:	04d9      	lsls	r1, r3, #19
 801f568:	6922      	ldr	r2, [r4, #16]
 801f56a:	6022      	str	r2, [r4, #0]
 801f56c:	d504      	bpl.n	801f578 <__sflush_r+0x7c>
 801f56e:	1c42      	adds	r2, r0, #1
 801f570:	d101      	bne.n	801f576 <__sflush_r+0x7a>
 801f572:	682b      	ldr	r3, [r5, #0]
 801f574:	b903      	cbnz	r3, 801f578 <__sflush_r+0x7c>
 801f576:	6560      	str	r0, [r4, #84]	; 0x54
 801f578:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f57a:	602f      	str	r7, [r5, #0]
 801f57c:	2900      	cmp	r1, #0
 801f57e:	d0ca      	beq.n	801f516 <__sflush_r+0x1a>
 801f580:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f584:	4299      	cmp	r1, r3
 801f586:	d002      	beq.n	801f58e <__sflush_r+0x92>
 801f588:	4628      	mov	r0, r5
 801f58a:	f000 fc3d 	bl	801fe08 <_free_r>
 801f58e:	2000      	movs	r0, #0
 801f590:	6360      	str	r0, [r4, #52]	; 0x34
 801f592:	e7c1      	b.n	801f518 <__sflush_r+0x1c>
 801f594:	6a21      	ldr	r1, [r4, #32]
 801f596:	2301      	movs	r3, #1
 801f598:	4628      	mov	r0, r5
 801f59a:	47b0      	blx	r6
 801f59c:	1c41      	adds	r1, r0, #1
 801f59e:	d1c7      	bne.n	801f530 <__sflush_r+0x34>
 801f5a0:	682b      	ldr	r3, [r5, #0]
 801f5a2:	2b00      	cmp	r3, #0
 801f5a4:	d0c4      	beq.n	801f530 <__sflush_r+0x34>
 801f5a6:	2b1d      	cmp	r3, #29
 801f5a8:	d001      	beq.n	801f5ae <__sflush_r+0xb2>
 801f5aa:	2b16      	cmp	r3, #22
 801f5ac:	d101      	bne.n	801f5b2 <__sflush_r+0xb6>
 801f5ae:	602f      	str	r7, [r5, #0]
 801f5b0:	e7b1      	b.n	801f516 <__sflush_r+0x1a>
 801f5b2:	89a3      	ldrh	r3, [r4, #12]
 801f5b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f5b8:	81a3      	strh	r3, [r4, #12]
 801f5ba:	e7ad      	b.n	801f518 <__sflush_r+0x1c>
 801f5bc:	690f      	ldr	r7, [r1, #16]
 801f5be:	2f00      	cmp	r7, #0
 801f5c0:	d0a9      	beq.n	801f516 <__sflush_r+0x1a>
 801f5c2:	0793      	lsls	r3, r2, #30
 801f5c4:	680e      	ldr	r6, [r1, #0]
 801f5c6:	bf08      	it	eq
 801f5c8:	694b      	ldreq	r3, [r1, #20]
 801f5ca:	600f      	str	r7, [r1, #0]
 801f5cc:	bf18      	it	ne
 801f5ce:	2300      	movne	r3, #0
 801f5d0:	eba6 0807 	sub.w	r8, r6, r7
 801f5d4:	608b      	str	r3, [r1, #8]
 801f5d6:	f1b8 0f00 	cmp.w	r8, #0
 801f5da:	dd9c      	ble.n	801f516 <__sflush_r+0x1a>
 801f5dc:	6a21      	ldr	r1, [r4, #32]
 801f5de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f5e0:	4643      	mov	r3, r8
 801f5e2:	463a      	mov	r2, r7
 801f5e4:	4628      	mov	r0, r5
 801f5e6:	47b0      	blx	r6
 801f5e8:	2800      	cmp	r0, #0
 801f5ea:	dc06      	bgt.n	801f5fa <__sflush_r+0xfe>
 801f5ec:	89a3      	ldrh	r3, [r4, #12]
 801f5ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f5f2:	81a3      	strh	r3, [r4, #12]
 801f5f4:	f04f 30ff 	mov.w	r0, #4294967295
 801f5f8:	e78e      	b.n	801f518 <__sflush_r+0x1c>
 801f5fa:	4407      	add	r7, r0
 801f5fc:	eba8 0800 	sub.w	r8, r8, r0
 801f600:	e7e9      	b.n	801f5d6 <__sflush_r+0xda>
 801f602:	bf00      	nop
 801f604:	20400001 	.word	0x20400001

0801f608 <_fflush_r>:
 801f608:	b538      	push	{r3, r4, r5, lr}
 801f60a:	690b      	ldr	r3, [r1, #16]
 801f60c:	4605      	mov	r5, r0
 801f60e:	460c      	mov	r4, r1
 801f610:	b913      	cbnz	r3, 801f618 <_fflush_r+0x10>
 801f612:	2500      	movs	r5, #0
 801f614:	4628      	mov	r0, r5
 801f616:	bd38      	pop	{r3, r4, r5, pc}
 801f618:	b118      	cbz	r0, 801f622 <_fflush_r+0x1a>
 801f61a:	6983      	ldr	r3, [r0, #24]
 801f61c:	b90b      	cbnz	r3, 801f622 <_fflush_r+0x1a>
 801f61e:	f7fe fa9b 	bl	801db58 <__sinit>
 801f622:	4b14      	ldr	r3, [pc, #80]	; (801f674 <_fflush_r+0x6c>)
 801f624:	429c      	cmp	r4, r3
 801f626:	d11b      	bne.n	801f660 <_fflush_r+0x58>
 801f628:	686c      	ldr	r4, [r5, #4]
 801f62a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f62e:	2b00      	cmp	r3, #0
 801f630:	d0ef      	beq.n	801f612 <_fflush_r+0xa>
 801f632:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f634:	07d0      	lsls	r0, r2, #31
 801f636:	d404      	bmi.n	801f642 <_fflush_r+0x3a>
 801f638:	0599      	lsls	r1, r3, #22
 801f63a:	d402      	bmi.n	801f642 <_fflush_r+0x3a>
 801f63c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f63e:	f7fe fb4e 	bl	801dcde <__retarget_lock_acquire_recursive>
 801f642:	4628      	mov	r0, r5
 801f644:	4621      	mov	r1, r4
 801f646:	f7ff ff59 	bl	801f4fc <__sflush_r>
 801f64a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f64c:	07da      	lsls	r2, r3, #31
 801f64e:	4605      	mov	r5, r0
 801f650:	d4e0      	bmi.n	801f614 <_fflush_r+0xc>
 801f652:	89a3      	ldrh	r3, [r4, #12]
 801f654:	059b      	lsls	r3, r3, #22
 801f656:	d4dd      	bmi.n	801f614 <_fflush_r+0xc>
 801f658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f65a:	f7fe fb41 	bl	801dce0 <__retarget_lock_release_recursive>
 801f65e:	e7d9      	b.n	801f614 <_fflush_r+0xc>
 801f660:	4b05      	ldr	r3, [pc, #20]	; (801f678 <_fflush_r+0x70>)
 801f662:	429c      	cmp	r4, r3
 801f664:	d101      	bne.n	801f66a <_fflush_r+0x62>
 801f666:	68ac      	ldr	r4, [r5, #8]
 801f668:	e7df      	b.n	801f62a <_fflush_r+0x22>
 801f66a:	4b04      	ldr	r3, [pc, #16]	; (801f67c <_fflush_r+0x74>)
 801f66c:	429c      	cmp	r4, r3
 801f66e:	bf08      	it	eq
 801f670:	68ec      	ldreq	r4, [r5, #12]
 801f672:	e7da      	b.n	801f62a <_fflush_r+0x22>
 801f674:	08020b40 	.word	0x08020b40
 801f678:	08020b60 	.word	0x08020b60
 801f67c:	08020b20 	.word	0x08020b20

0801f680 <_localeconv_r>:
 801f680:	4800      	ldr	r0, [pc, #0]	; (801f684 <_localeconv_r+0x4>)
 801f682:	4770      	bx	lr
 801f684:	240001b4 	.word	0x240001b4

0801f688 <_lseek_r>:
 801f688:	b538      	push	{r3, r4, r5, lr}
 801f68a:	4d07      	ldr	r5, [pc, #28]	; (801f6a8 <_lseek_r+0x20>)
 801f68c:	4604      	mov	r4, r0
 801f68e:	4608      	mov	r0, r1
 801f690:	4611      	mov	r1, r2
 801f692:	2200      	movs	r2, #0
 801f694:	602a      	str	r2, [r5, #0]
 801f696:	461a      	mov	r2, r3
 801f698:	f7e2 f998 	bl	80019cc <_lseek>
 801f69c:	1c43      	adds	r3, r0, #1
 801f69e:	d102      	bne.n	801f6a6 <_lseek_r+0x1e>
 801f6a0:	682b      	ldr	r3, [r5, #0]
 801f6a2:	b103      	cbz	r3, 801f6a6 <_lseek_r+0x1e>
 801f6a4:	6023      	str	r3, [r4, #0]
 801f6a6:	bd38      	pop	{r3, r4, r5, pc}
 801f6a8:	2401def4 	.word	0x2401def4

0801f6ac <malloc>:
 801f6ac:	4b02      	ldr	r3, [pc, #8]	; (801f6b8 <malloc+0xc>)
 801f6ae:	4601      	mov	r1, r0
 801f6b0:	6818      	ldr	r0, [r3, #0]
 801f6b2:	f7fe bb4d 	b.w	801dd50 <_malloc_r>
 801f6b6:	bf00      	nop
 801f6b8:	24000060 	.word	0x24000060

0801f6bc <__malloc_lock>:
 801f6bc:	4801      	ldr	r0, [pc, #4]	; (801f6c4 <__malloc_lock+0x8>)
 801f6be:	f7fe bb0e 	b.w	801dcde <__retarget_lock_acquire_recursive>
 801f6c2:	bf00      	nop
 801f6c4:	2401dee8 	.word	0x2401dee8

0801f6c8 <__malloc_unlock>:
 801f6c8:	4801      	ldr	r0, [pc, #4]	; (801f6d0 <__malloc_unlock+0x8>)
 801f6ca:	f7fe bb09 	b.w	801dce0 <__retarget_lock_release_recursive>
 801f6ce:	bf00      	nop
 801f6d0:	2401dee8 	.word	0x2401dee8

0801f6d4 <_Balloc>:
 801f6d4:	b570      	push	{r4, r5, r6, lr}
 801f6d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801f6d8:	4604      	mov	r4, r0
 801f6da:	460d      	mov	r5, r1
 801f6dc:	b976      	cbnz	r6, 801f6fc <_Balloc+0x28>
 801f6de:	2010      	movs	r0, #16
 801f6e0:	f7ff ffe4 	bl	801f6ac <malloc>
 801f6e4:	4602      	mov	r2, r0
 801f6e6:	6260      	str	r0, [r4, #36]	; 0x24
 801f6e8:	b920      	cbnz	r0, 801f6f4 <_Balloc+0x20>
 801f6ea:	4b18      	ldr	r3, [pc, #96]	; (801f74c <_Balloc+0x78>)
 801f6ec:	4818      	ldr	r0, [pc, #96]	; (801f750 <_Balloc+0x7c>)
 801f6ee:	2166      	movs	r1, #102	; 0x66
 801f6f0:	f000 fbe8 	bl	801fec4 <__assert_func>
 801f6f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f6f8:	6006      	str	r6, [r0, #0]
 801f6fa:	60c6      	str	r6, [r0, #12]
 801f6fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801f6fe:	68f3      	ldr	r3, [r6, #12]
 801f700:	b183      	cbz	r3, 801f724 <_Balloc+0x50>
 801f702:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f704:	68db      	ldr	r3, [r3, #12]
 801f706:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801f70a:	b9b8      	cbnz	r0, 801f73c <_Balloc+0x68>
 801f70c:	2101      	movs	r1, #1
 801f70e:	fa01 f605 	lsl.w	r6, r1, r5
 801f712:	1d72      	adds	r2, r6, #5
 801f714:	0092      	lsls	r2, r2, #2
 801f716:	4620      	mov	r0, r4
 801f718:	f000 fb60 	bl	801fddc <_calloc_r>
 801f71c:	b160      	cbz	r0, 801f738 <_Balloc+0x64>
 801f71e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801f722:	e00e      	b.n	801f742 <_Balloc+0x6e>
 801f724:	2221      	movs	r2, #33	; 0x21
 801f726:	2104      	movs	r1, #4
 801f728:	4620      	mov	r0, r4
 801f72a:	f000 fb57 	bl	801fddc <_calloc_r>
 801f72e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f730:	60f0      	str	r0, [r6, #12]
 801f732:	68db      	ldr	r3, [r3, #12]
 801f734:	2b00      	cmp	r3, #0
 801f736:	d1e4      	bne.n	801f702 <_Balloc+0x2e>
 801f738:	2000      	movs	r0, #0
 801f73a:	bd70      	pop	{r4, r5, r6, pc}
 801f73c:	6802      	ldr	r2, [r0, #0]
 801f73e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801f742:	2300      	movs	r3, #0
 801f744:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f748:	e7f7      	b.n	801f73a <_Balloc+0x66>
 801f74a:	bf00      	nop
 801f74c:	08020bc5 	.word	0x08020bc5
 801f750:	08020c48 	.word	0x08020c48

0801f754 <_Bfree>:
 801f754:	b570      	push	{r4, r5, r6, lr}
 801f756:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801f758:	4605      	mov	r5, r0
 801f75a:	460c      	mov	r4, r1
 801f75c:	b976      	cbnz	r6, 801f77c <_Bfree+0x28>
 801f75e:	2010      	movs	r0, #16
 801f760:	f7ff ffa4 	bl	801f6ac <malloc>
 801f764:	4602      	mov	r2, r0
 801f766:	6268      	str	r0, [r5, #36]	; 0x24
 801f768:	b920      	cbnz	r0, 801f774 <_Bfree+0x20>
 801f76a:	4b09      	ldr	r3, [pc, #36]	; (801f790 <_Bfree+0x3c>)
 801f76c:	4809      	ldr	r0, [pc, #36]	; (801f794 <_Bfree+0x40>)
 801f76e:	218a      	movs	r1, #138	; 0x8a
 801f770:	f000 fba8 	bl	801fec4 <__assert_func>
 801f774:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f778:	6006      	str	r6, [r0, #0]
 801f77a:	60c6      	str	r6, [r0, #12]
 801f77c:	b13c      	cbz	r4, 801f78e <_Bfree+0x3a>
 801f77e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801f780:	6862      	ldr	r2, [r4, #4]
 801f782:	68db      	ldr	r3, [r3, #12]
 801f784:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f788:	6021      	str	r1, [r4, #0]
 801f78a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801f78e:	bd70      	pop	{r4, r5, r6, pc}
 801f790:	08020bc5 	.word	0x08020bc5
 801f794:	08020c48 	.word	0x08020c48

0801f798 <__multadd>:
 801f798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f79c:	690d      	ldr	r5, [r1, #16]
 801f79e:	4607      	mov	r7, r0
 801f7a0:	460c      	mov	r4, r1
 801f7a2:	461e      	mov	r6, r3
 801f7a4:	f101 0c14 	add.w	ip, r1, #20
 801f7a8:	2000      	movs	r0, #0
 801f7aa:	f8dc 3000 	ldr.w	r3, [ip]
 801f7ae:	b299      	uxth	r1, r3
 801f7b0:	fb02 6101 	mla	r1, r2, r1, r6
 801f7b4:	0c1e      	lsrs	r6, r3, #16
 801f7b6:	0c0b      	lsrs	r3, r1, #16
 801f7b8:	fb02 3306 	mla	r3, r2, r6, r3
 801f7bc:	b289      	uxth	r1, r1
 801f7be:	3001      	adds	r0, #1
 801f7c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801f7c4:	4285      	cmp	r5, r0
 801f7c6:	f84c 1b04 	str.w	r1, [ip], #4
 801f7ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801f7ce:	dcec      	bgt.n	801f7aa <__multadd+0x12>
 801f7d0:	b30e      	cbz	r6, 801f816 <__multadd+0x7e>
 801f7d2:	68a3      	ldr	r3, [r4, #8]
 801f7d4:	42ab      	cmp	r3, r5
 801f7d6:	dc19      	bgt.n	801f80c <__multadd+0x74>
 801f7d8:	6861      	ldr	r1, [r4, #4]
 801f7da:	4638      	mov	r0, r7
 801f7dc:	3101      	adds	r1, #1
 801f7de:	f7ff ff79 	bl	801f6d4 <_Balloc>
 801f7e2:	4680      	mov	r8, r0
 801f7e4:	b928      	cbnz	r0, 801f7f2 <__multadd+0x5a>
 801f7e6:	4602      	mov	r2, r0
 801f7e8:	4b0c      	ldr	r3, [pc, #48]	; (801f81c <__multadd+0x84>)
 801f7ea:	480d      	ldr	r0, [pc, #52]	; (801f820 <__multadd+0x88>)
 801f7ec:	21b5      	movs	r1, #181	; 0xb5
 801f7ee:	f000 fb69 	bl	801fec4 <__assert_func>
 801f7f2:	6922      	ldr	r2, [r4, #16]
 801f7f4:	3202      	adds	r2, #2
 801f7f6:	f104 010c 	add.w	r1, r4, #12
 801f7fa:	0092      	lsls	r2, r2, #2
 801f7fc:	300c      	adds	r0, #12
 801f7fe:	f7fe fa70 	bl	801dce2 <memcpy>
 801f802:	4621      	mov	r1, r4
 801f804:	4638      	mov	r0, r7
 801f806:	f7ff ffa5 	bl	801f754 <_Bfree>
 801f80a:	4644      	mov	r4, r8
 801f80c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801f810:	3501      	adds	r5, #1
 801f812:	615e      	str	r6, [r3, #20]
 801f814:	6125      	str	r5, [r4, #16]
 801f816:	4620      	mov	r0, r4
 801f818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f81c:	08020c37 	.word	0x08020c37
 801f820:	08020c48 	.word	0x08020c48

0801f824 <__hi0bits>:
 801f824:	0c03      	lsrs	r3, r0, #16
 801f826:	041b      	lsls	r3, r3, #16
 801f828:	b9d3      	cbnz	r3, 801f860 <__hi0bits+0x3c>
 801f82a:	0400      	lsls	r0, r0, #16
 801f82c:	2310      	movs	r3, #16
 801f82e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801f832:	bf04      	itt	eq
 801f834:	0200      	lsleq	r0, r0, #8
 801f836:	3308      	addeq	r3, #8
 801f838:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801f83c:	bf04      	itt	eq
 801f83e:	0100      	lsleq	r0, r0, #4
 801f840:	3304      	addeq	r3, #4
 801f842:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801f846:	bf04      	itt	eq
 801f848:	0080      	lsleq	r0, r0, #2
 801f84a:	3302      	addeq	r3, #2
 801f84c:	2800      	cmp	r0, #0
 801f84e:	db05      	blt.n	801f85c <__hi0bits+0x38>
 801f850:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801f854:	f103 0301 	add.w	r3, r3, #1
 801f858:	bf08      	it	eq
 801f85a:	2320      	moveq	r3, #32
 801f85c:	4618      	mov	r0, r3
 801f85e:	4770      	bx	lr
 801f860:	2300      	movs	r3, #0
 801f862:	e7e4      	b.n	801f82e <__hi0bits+0xa>

0801f864 <__lo0bits>:
 801f864:	6803      	ldr	r3, [r0, #0]
 801f866:	f013 0207 	ands.w	r2, r3, #7
 801f86a:	4601      	mov	r1, r0
 801f86c:	d00b      	beq.n	801f886 <__lo0bits+0x22>
 801f86e:	07da      	lsls	r2, r3, #31
 801f870:	d423      	bmi.n	801f8ba <__lo0bits+0x56>
 801f872:	0798      	lsls	r0, r3, #30
 801f874:	bf49      	itett	mi
 801f876:	085b      	lsrmi	r3, r3, #1
 801f878:	089b      	lsrpl	r3, r3, #2
 801f87a:	2001      	movmi	r0, #1
 801f87c:	600b      	strmi	r3, [r1, #0]
 801f87e:	bf5c      	itt	pl
 801f880:	600b      	strpl	r3, [r1, #0]
 801f882:	2002      	movpl	r0, #2
 801f884:	4770      	bx	lr
 801f886:	b298      	uxth	r0, r3
 801f888:	b9a8      	cbnz	r0, 801f8b6 <__lo0bits+0x52>
 801f88a:	0c1b      	lsrs	r3, r3, #16
 801f88c:	2010      	movs	r0, #16
 801f88e:	b2da      	uxtb	r2, r3
 801f890:	b90a      	cbnz	r2, 801f896 <__lo0bits+0x32>
 801f892:	3008      	adds	r0, #8
 801f894:	0a1b      	lsrs	r3, r3, #8
 801f896:	071a      	lsls	r2, r3, #28
 801f898:	bf04      	itt	eq
 801f89a:	091b      	lsreq	r3, r3, #4
 801f89c:	3004      	addeq	r0, #4
 801f89e:	079a      	lsls	r2, r3, #30
 801f8a0:	bf04      	itt	eq
 801f8a2:	089b      	lsreq	r3, r3, #2
 801f8a4:	3002      	addeq	r0, #2
 801f8a6:	07da      	lsls	r2, r3, #31
 801f8a8:	d403      	bmi.n	801f8b2 <__lo0bits+0x4e>
 801f8aa:	085b      	lsrs	r3, r3, #1
 801f8ac:	f100 0001 	add.w	r0, r0, #1
 801f8b0:	d005      	beq.n	801f8be <__lo0bits+0x5a>
 801f8b2:	600b      	str	r3, [r1, #0]
 801f8b4:	4770      	bx	lr
 801f8b6:	4610      	mov	r0, r2
 801f8b8:	e7e9      	b.n	801f88e <__lo0bits+0x2a>
 801f8ba:	2000      	movs	r0, #0
 801f8bc:	4770      	bx	lr
 801f8be:	2020      	movs	r0, #32
 801f8c0:	4770      	bx	lr
	...

0801f8c4 <__i2b>:
 801f8c4:	b510      	push	{r4, lr}
 801f8c6:	460c      	mov	r4, r1
 801f8c8:	2101      	movs	r1, #1
 801f8ca:	f7ff ff03 	bl	801f6d4 <_Balloc>
 801f8ce:	4602      	mov	r2, r0
 801f8d0:	b928      	cbnz	r0, 801f8de <__i2b+0x1a>
 801f8d2:	4b05      	ldr	r3, [pc, #20]	; (801f8e8 <__i2b+0x24>)
 801f8d4:	4805      	ldr	r0, [pc, #20]	; (801f8ec <__i2b+0x28>)
 801f8d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801f8da:	f000 faf3 	bl	801fec4 <__assert_func>
 801f8de:	2301      	movs	r3, #1
 801f8e0:	6144      	str	r4, [r0, #20]
 801f8e2:	6103      	str	r3, [r0, #16]
 801f8e4:	bd10      	pop	{r4, pc}
 801f8e6:	bf00      	nop
 801f8e8:	08020c37 	.word	0x08020c37
 801f8ec:	08020c48 	.word	0x08020c48

0801f8f0 <__multiply>:
 801f8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8f4:	4691      	mov	r9, r2
 801f8f6:	690a      	ldr	r2, [r1, #16]
 801f8f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f8fc:	429a      	cmp	r2, r3
 801f8fe:	bfb8      	it	lt
 801f900:	460b      	movlt	r3, r1
 801f902:	460c      	mov	r4, r1
 801f904:	bfbc      	itt	lt
 801f906:	464c      	movlt	r4, r9
 801f908:	4699      	movlt	r9, r3
 801f90a:	6927      	ldr	r7, [r4, #16]
 801f90c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801f910:	68a3      	ldr	r3, [r4, #8]
 801f912:	6861      	ldr	r1, [r4, #4]
 801f914:	eb07 060a 	add.w	r6, r7, sl
 801f918:	42b3      	cmp	r3, r6
 801f91a:	b085      	sub	sp, #20
 801f91c:	bfb8      	it	lt
 801f91e:	3101      	addlt	r1, #1
 801f920:	f7ff fed8 	bl	801f6d4 <_Balloc>
 801f924:	b930      	cbnz	r0, 801f934 <__multiply+0x44>
 801f926:	4602      	mov	r2, r0
 801f928:	4b44      	ldr	r3, [pc, #272]	; (801fa3c <__multiply+0x14c>)
 801f92a:	4845      	ldr	r0, [pc, #276]	; (801fa40 <__multiply+0x150>)
 801f92c:	f240 115d 	movw	r1, #349	; 0x15d
 801f930:	f000 fac8 	bl	801fec4 <__assert_func>
 801f934:	f100 0514 	add.w	r5, r0, #20
 801f938:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801f93c:	462b      	mov	r3, r5
 801f93e:	2200      	movs	r2, #0
 801f940:	4543      	cmp	r3, r8
 801f942:	d321      	bcc.n	801f988 <__multiply+0x98>
 801f944:	f104 0314 	add.w	r3, r4, #20
 801f948:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801f94c:	f109 0314 	add.w	r3, r9, #20
 801f950:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801f954:	9202      	str	r2, [sp, #8]
 801f956:	1b3a      	subs	r2, r7, r4
 801f958:	3a15      	subs	r2, #21
 801f95a:	f022 0203 	bic.w	r2, r2, #3
 801f95e:	3204      	adds	r2, #4
 801f960:	f104 0115 	add.w	r1, r4, #21
 801f964:	428f      	cmp	r7, r1
 801f966:	bf38      	it	cc
 801f968:	2204      	movcc	r2, #4
 801f96a:	9201      	str	r2, [sp, #4]
 801f96c:	9a02      	ldr	r2, [sp, #8]
 801f96e:	9303      	str	r3, [sp, #12]
 801f970:	429a      	cmp	r2, r3
 801f972:	d80c      	bhi.n	801f98e <__multiply+0x9e>
 801f974:	2e00      	cmp	r6, #0
 801f976:	dd03      	ble.n	801f980 <__multiply+0x90>
 801f978:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801f97c:	2b00      	cmp	r3, #0
 801f97e:	d05a      	beq.n	801fa36 <__multiply+0x146>
 801f980:	6106      	str	r6, [r0, #16]
 801f982:	b005      	add	sp, #20
 801f984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f988:	f843 2b04 	str.w	r2, [r3], #4
 801f98c:	e7d8      	b.n	801f940 <__multiply+0x50>
 801f98e:	f8b3 a000 	ldrh.w	sl, [r3]
 801f992:	f1ba 0f00 	cmp.w	sl, #0
 801f996:	d024      	beq.n	801f9e2 <__multiply+0xf2>
 801f998:	f104 0e14 	add.w	lr, r4, #20
 801f99c:	46a9      	mov	r9, r5
 801f99e:	f04f 0c00 	mov.w	ip, #0
 801f9a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 801f9a6:	f8d9 1000 	ldr.w	r1, [r9]
 801f9aa:	fa1f fb82 	uxth.w	fp, r2
 801f9ae:	b289      	uxth	r1, r1
 801f9b0:	fb0a 110b 	mla	r1, sl, fp, r1
 801f9b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801f9b8:	f8d9 2000 	ldr.w	r2, [r9]
 801f9bc:	4461      	add	r1, ip
 801f9be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801f9c2:	fb0a c20b 	mla	r2, sl, fp, ip
 801f9c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801f9ca:	b289      	uxth	r1, r1
 801f9cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801f9d0:	4577      	cmp	r7, lr
 801f9d2:	f849 1b04 	str.w	r1, [r9], #4
 801f9d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801f9da:	d8e2      	bhi.n	801f9a2 <__multiply+0xb2>
 801f9dc:	9a01      	ldr	r2, [sp, #4]
 801f9de:	f845 c002 	str.w	ip, [r5, r2]
 801f9e2:	9a03      	ldr	r2, [sp, #12]
 801f9e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801f9e8:	3304      	adds	r3, #4
 801f9ea:	f1b9 0f00 	cmp.w	r9, #0
 801f9ee:	d020      	beq.n	801fa32 <__multiply+0x142>
 801f9f0:	6829      	ldr	r1, [r5, #0]
 801f9f2:	f104 0c14 	add.w	ip, r4, #20
 801f9f6:	46ae      	mov	lr, r5
 801f9f8:	f04f 0a00 	mov.w	sl, #0
 801f9fc:	f8bc b000 	ldrh.w	fp, [ip]
 801fa00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801fa04:	fb09 220b 	mla	r2, r9, fp, r2
 801fa08:	4492      	add	sl, r2
 801fa0a:	b289      	uxth	r1, r1
 801fa0c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801fa10:	f84e 1b04 	str.w	r1, [lr], #4
 801fa14:	f85c 2b04 	ldr.w	r2, [ip], #4
 801fa18:	f8be 1000 	ldrh.w	r1, [lr]
 801fa1c:	0c12      	lsrs	r2, r2, #16
 801fa1e:	fb09 1102 	mla	r1, r9, r2, r1
 801fa22:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801fa26:	4567      	cmp	r7, ip
 801fa28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801fa2c:	d8e6      	bhi.n	801f9fc <__multiply+0x10c>
 801fa2e:	9a01      	ldr	r2, [sp, #4]
 801fa30:	50a9      	str	r1, [r5, r2]
 801fa32:	3504      	adds	r5, #4
 801fa34:	e79a      	b.n	801f96c <__multiply+0x7c>
 801fa36:	3e01      	subs	r6, #1
 801fa38:	e79c      	b.n	801f974 <__multiply+0x84>
 801fa3a:	bf00      	nop
 801fa3c:	08020c37 	.word	0x08020c37
 801fa40:	08020c48 	.word	0x08020c48

0801fa44 <__pow5mult>:
 801fa44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fa48:	4615      	mov	r5, r2
 801fa4a:	f012 0203 	ands.w	r2, r2, #3
 801fa4e:	4606      	mov	r6, r0
 801fa50:	460f      	mov	r7, r1
 801fa52:	d007      	beq.n	801fa64 <__pow5mult+0x20>
 801fa54:	4c25      	ldr	r4, [pc, #148]	; (801faec <__pow5mult+0xa8>)
 801fa56:	3a01      	subs	r2, #1
 801fa58:	2300      	movs	r3, #0
 801fa5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801fa5e:	f7ff fe9b 	bl	801f798 <__multadd>
 801fa62:	4607      	mov	r7, r0
 801fa64:	10ad      	asrs	r5, r5, #2
 801fa66:	d03d      	beq.n	801fae4 <__pow5mult+0xa0>
 801fa68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801fa6a:	b97c      	cbnz	r4, 801fa8c <__pow5mult+0x48>
 801fa6c:	2010      	movs	r0, #16
 801fa6e:	f7ff fe1d 	bl	801f6ac <malloc>
 801fa72:	4602      	mov	r2, r0
 801fa74:	6270      	str	r0, [r6, #36]	; 0x24
 801fa76:	b928      	cbnz	r0, 801fa84 <__pow5mult+0x40>
 801fa78:	4b1d      	ldr	r3, [pc, #116]	; (801faf0 <__pow5mult+0xac>)
 801fa7a:	481e      	ldr	r0, [pc, #120]	; (801faf4 <__pow5mult+0xb0>)
 801fa7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801fa80:	f000 fa20 	bl	801fec4 <__assert_func>
 801fa84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801fa88:	6004      	str	r4, [r0, #0]
 801fa8a:	60c4      	str	r4, [r0, #12]
 801fa8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801fa90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801fa94:	b94c      	cbnz	r4, 801faaa <__pow5mult+0x66>
 801fa96:	f240 2171 	movw	r1, #625	; 0x271
 801fa9a:	4630      	mov	r0, r6
 801fa9c:	f7ff ff12 	bl	801f8c4 <__i2b>
 801faa0:	2300      	movs	r3, #0
 801faa2:	f8c8 0008 	str.w	r0, [r8, #8]
 801faa6:	4604      	mov	r4, r0
 801faa8:	6003      	str	r3, [r0, #0]
 801faaa:	f04f 0900 	mov.w	r9, #0
 801faae:	07eb      	lsls	r3, r5, #31
 801fab0:	d50a      	bpl.n	801fac8 <__pow5mult+0x84>
 801fab2:	4639      	mov	r1, r7
 801fab4:	4622      	mov	r2, r4
 801fab6:	4630      	mov	r0, r6
 801fab8:	f7ff ff1a 	bl	801f8f0 <__multiply>
 801fabc:	4639      	mov	r1, r7
 801fabe:	4680      	mov	r8, r0
 801fac0:	4630      	mov	r0, r6
 801fac2:	f7ff fe47 	bl	801f754 <_Bfree>
 801fac6:	4647      	mov	r7, r8
 801fac8:	106d      	asrs	r5, r5, #1
 801faca:	d00b      	beq.n	801fae4 <__pow5mult+0xa0>
 801facc:	6820      	ldr	r0, [r4, #0]
 801face:	b938      	cbnz	r0, 801fae0 <__pow5mult+0x9c>
 801fad0:	4622      	mov	r2, r4
 801fad2:	4621      	mov	r1, r4
 801fad4:	4630      	mov	r0, r6
 801fad6:	f7ff ff0b 	bl	801f8f0 <__multiply>
 801fada:	6020      	str	r0, [r4, #0]
 801fadc:	f8c0 9000 	str.w	r9, [r0]
 801fae0:	4604      	mov	r4, r0
 801fae2:	e7e4      	b.n	801faae <__pow5mult+0x6a>
 801fae4:	4638      	mov	r0, r7
 801fae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801faea:	bf00      	nop
 801faec:	08020d98 	.word	0x08020d98
 801faf0:	08020bc5 	.word	0x08020bc5
 801faf4:	08020c48 	.word	0x08020c48

0801faf8 <__lshift>:
 801faf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fafc:	460c      	mov	r4, r1
 801fafe:	6849      	ldr	r1, [r1, #4]
 801fb00:	6923      	ldr	r3, [r4, #16]
 801fb02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801fb06:	68a3      	ldr	r3, [r4, #8]
 801fb08:	4607      	mov	r7, r0
 801fb0a:	4691      	mov	r9, r2
 801fb0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801fb10:	f108 0601 	add.w	r6, r8, #1
 801fb14:	42b3      	cmp	r3, r6
 801fb16:	db0b      	blt.n	801fb30 <__lshift+0x38>
 801fb18:	4638      	mov	r0, r7
 801fb1a:	f7ff fddb 	bl	801f6d4 <_Balloc>
 801fb1e:	4605      	mov	r5, r0
 801fb20:	b948      	cbnz	r0, 801fb36 <__lshift+0x3e>
 801fb22:	4602      	mov	r2, r0
 801fb24:	4b2a      	ldr	r3, [pc, #168]	; (801fbd0 <__lshift+0xd8>)
 801fb26:	482b      	ldr	r0, [pc, #172]	; (801fbd4 <__lshift+0xdc>)
 801fb28:	f240 11d9 	movw	r1, #473	; 0x1d9
 801fb2c:	f000 f9ca 	bl	801fec4 <__assert_func>
 801fb30:	3101      	adds	r1, #1
 801fb32:	005b      	lsls	r3, r3, #1
 801fb34:	e7ee      	b.n	801fb14 <__lshift+0x1c>
 801fb36:	2300      	movs	r3, #0
 801fb38:	f100 0114 	add.w	r1, r0, #20
 801fb3c:	f100 0210 	add.w	r2, r0, #16
 801fb40:	4618      	mov	r0, r3
 801fb42:	4553      	cmp	r3, sl
 801fb44:	db37      	blt.n	801fbb6 <__lshift+0xbe>
 801fb46:	6920      	ldr	r0, [r4, #16]
 801fb48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801fb4c:	f104 0314 	add.w	r3, r4, #20
 801fb50:	f019 091f 	ands.w	r9, r9, #31
 801fb54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801fb58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801fb5c:	d02f      	beq.n	801fbbe <__lshift+0xc6>
 801fb5e:	f1c9 0e20 	rsb	lr, r9, #32
 801fb62:	468a      	mov	sl, r1
 801fb64:	f04f 0c00 	mov.w	ip, #0
 801fb68:	681a      	ldr	r2, [r3, #0]
 801fb6a:	fa02 f209 	lsl.w	r2, r2, r9
 801fb6e:	ea42 020c 	orr.w	r2, r2, ip
 801fb72:	f84a 2b04 	str.w	r2, [sl], #4
 801fb76:	f853 2b04 	ldr.w	r2, [r3], #4
 801fb7a:	4298      	cmp	r0, r3
 801fb7c:	fa22 fc0e 	lsr.w	ip, r2, lr
 801fb80:	d8f2      	bhi.n	801fb68 <__lshift+0x70>
 801fb82:	1b03      	subs	r3, r0, r4
 801fb84:	3b15      	subs	r3, #21
 801fb86:	f023 0303 	bic.w	r3, r3, #3
 801fb8a:	3304      	adds	r3, #4
 801fb8c:	f104 0215 	add.w	r2, r4, #21
 801fb90:	4290      	cmp	r0, r2
 801fb92:	bf38      	it	cc
 801fb94:	2304      	movcc	r3, #4
 801fb96:	f841 c003 	str.w	ip, [r1, r3]
 801fb9a:	f1bc 0f00 	cmp.w	ip, #0
 801fb9e:	d001      	beq.n	801fba4 <__lshift+0xac>
 801fba0:	f108 0602 	add.w	r6, r8, #2
 801fba4:	3e01      	subs	r6, #1
 801fba6:	4638      	mov	r0, r7
 801fba8:	612e      	str	r6, [r5, #16]
 801fbaa:	4621      	mov	r1, r4
 801fbac:	f7ff fdd2 	bl	801f754 <_Bfree>
 801fbb0:	4628      	mov	r0, r5
 801fbb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fbb6:	f842 0f04 	str.w	r0, [r2, #4]!
 801fbba:	3301      	adds	r3, #1
 801fbbc:	e7c1      	b.n	801fb42 <__lshift+0x4a>
 801fbbe:	3904      	subs	r1, #4
 801fbc0:	f853 2b04 	ldr.w	r2, [r3], #4
 801fbc4:	f841 2f04 	str.w	r2, [r1, #4]!
 801fbc8:	4298      	cmp	r0, r3
 801fbca:	d8f9      	bhi.n	801fbc0 <__lshift+0xc8>
 801fbcc:	e7ea      	b.n	801fba4 <__lshift+0xac>
 801fbce:	bf00      	nop
 801fbd0:	08020c37 	.word	0x08020c37
 801fbd4:	08020c48 	.word	0x08020c48

0801fbd8 <__mcmp>:
 801fbd8:	b530      	push	{r4, r5, lr}
 801fbda:	6902      	ldr	r2, [r0, #16]
 801fbdc:	690c      	ldr	r4, [r1, #16]
 801fbde:	1b12      	subs	r2, r2, r4
 801fbe0:	d10e      	bne.n	801fc00 <__mcmp+0x28>
 801fbe2:	f100 0314 	add.w	r3, r0, #20
 801fbe6:	3114      	adds	r1, #20
 801fbe8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801fbec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801fbf0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801fbf4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801fbf8:	42a5      	cmp	r5, r4
 801fbfa:	d003      	beq.n	801fc04 <__mcmp+0x2c>
 801fbfc:	d305      	bcc.n	801fc0a <__mcmp+0x32>
 801fbfe:	2201      	movs	r2, #1
 801fc00:	4610      	mov	r0, r2
 801fc02:	bd30      	pop	{r4, r5, pc}
 801fc04:	4283      	cmp	r3, r0
 801fc06:	d3f3      	bcc.n	801fbf0 <__mcmp+0x18>
 801fc08:	e7fa      	b.n	801fc00 <__mcmp+0x28>
 801fc0a:	f04f 32ff 	mov.w	r2, #4294967295
 801fc0e:	e7f7      	b.n	801fc00 <__mcmp+0x28>

0801fc10 <__mdiff>:
 801fc10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc14:	460c      	mov	r4, r1
 801fc16:	4606      	mov	r6, r0
 801fc18:	4611      	mov	r1, r2
 801fc1a:	4620      	mov	r0, r4
 801fc1c:	4690      	mov	r8, r2
 801fc1e:	f7ff ffdb 	bl	801fbd8 <__mcmp>
 801fc22:	1e05      	subs	r5, r0, #0
 801fc24:	d110      	bne.n	801fc48 <__mdiff+0x38>
 801fc26:	4629      	mov	r1, r5
 801fc28:	4630      	mov	r0, r6
 801fc2a:	f7ff fd53 	bl	801f6d4 <_Balloc>
 801fc2e:	b930      	cbnz	r0, 801fc3e <__mdiff+0x2e>
 801fc30:	4b3a      	ldr	r3, [pc, #232]	; (801fd1c <__mdiff+0x10c>)
 801fc32:	4602      	mov	r2, r0
 801fc34:	f240 2132 	movw	r1, #562	; 0x232
 801fc38:	4839      	ldr	r0, [pc, #228]	; (801fd20 <__mdiff+0x110>)
 801fc3a:	f000 f943 	bl	801fec4 <__assert_func>
 801fc3e:	2301      	movs	r3, #1
 801fc40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801fc44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc48:	bfa4      	itt	ge
 801fc4a:	4643      	movge	r3, r8
 801fc4c:	46a0      	movge	r8, r4
 801fc4e:	4630      	mov	r0, r6
 801fc50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801fc54:	bfa6      	itte	ge
 801fc56:	461c      	movge	r4, r3
 801fc58:	2500      	movge	r5, #0
 801fc5a:	2501      	movlt	r5, #1
 801fc5c:	f7ff fd3a 	bl	801f6d4 <_Balloc>
 801fc60:	b920      	cbnz	r0, 801fc6c <__mdiff+0x5c>
 801fc62:	4b2e      	ldr	r3, [pc, #184]	; (801fd1c <__mdiff+0x10c>)
 801fc64:	4602      	mov	r2, r0
 801fc66:	f44f 7110 	mov.w	r1, #576	; 0x240
 801fc6a:	e7e5      	b.n	801fc38 <__mdiff+0x28>
 801fc6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801fc70:	6926      	ldr	r6, [r4, #16]
 801fc72:	60c5      	str	r5, [r0, #12]
 801fc74:	f104 0914 	add.w	r9, r4, #20
 801fc78:	f108 0514 	add.w	r5, r8, #20
 801fc7c:	f100 0e14 	add.w	lr, r0, #20
 801fc80:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801fc84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801fc88:	f108 0210 	add.w	r2, r8, #16
 801fc8c:	46f2      	mov	sl, lr
 801fc8e:	2100      	movs	r1, #0
 801fc90:	f859 3b04 	ldr.w	r3, [r9], #4
 801fc94:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801fc98:	fa1f f883 	uxth.w	r8, r3
 801fc9c:	fa11 f18b 	uxtah	r1, r1, fp
 801fca0:	0c1b      	lsrs	r3, r3, #16
 801fca2:	eba1 0808 	sub.w	r8, r1, r8
 801fca6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801fcaa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801fcae:	fa1f f888 	uxth.w	r8, r8
 801fcb2:	1419      	asrs	r1, r3, #16
 801fcb4:	454e      	cmp	r6, r9
 801fcb6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801fcba:	f84a 3b04 	str.w	r3, [sl], #4
 801fcbe:	d8e7      	bhi.n	801fc90 <__mdiff+0x80>
 801fcc0:	1b33      	subs	r3, r6, r4
 801fcc2:	3b15      	subs	r3, #21
 801fcc4:	f023 0303 	bic.w	r3, r3, #3
 801fcc8:	3304      	adds	r3, #4
 801fcca:	3415      	adds	r4, #21
 801fccc:	42a6      	cmp	r6, r4
 801fcce:	bf38      	it	cc
 801fcd0:	2304      	movcc	r3, #4
 801fcd2:	441d      	add	r5, r3
 801fcd4:	4473      	add	r3, lr
 801fcd6:	469e      	mov	lr, r3
 801fcd8:	462e      	mov	r6, r5
 801fcda:	4566      	cmp	r6, ip
 801fcdc:	d30e      	bcc.n	801fcfc <__mdiff+0xec>
 801fcde:	f10c 0203 	add.w	r2, ip, #3
 801fce2:	1b52      	subs	r2, r2, r5
 801fce4:	f022 0203 	bic.w	r2, r2, #3
 801fce8:	3d03      	subs	r5, #3
 801fcea:	45ac      	cmp	ip, r5
 801fcec:	bf38      	it	cc
 801fcee:	2200      	movcc	r2, #0
 801fcf0:	441a      	add	r2, r3
 801fcf2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801fcf6:	b17b      	cbz	r3, 801fd18 <__mdiff+0x108>
 801fcf8:	6107      	str	r7, [r0, #16]
 801fcfa:	e7a3      	b.n	801fc44 <__mdiff+0x34>
 801fcfc:	f856 8b04 	ldr.w	r8, [r6], #4
 801fd00:	fa11 f288 	uxtah	r2, r1, r8
 801fd04:	1414      	asrs	r4, r2, #16
 801fd06:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801fd0a:	b292      	uxth	r2, r2
 801fd0c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801fd10:	f84e 2b04 	str.w	r2, [lr], #4
 801fd14:	1421      	asrs	r1, r4, #16
 801fd16:	e7e0      	b.n	801fcda <__mdiff+0xca>
 801fd18:	3f01      	subs	r7, #1
 801fd1a:	e7ea      	b.n	801fcf2 <__mdiff+0xe2>
 801fd1c:	08020c37 	.word	0x08020c37
 801fd20:	08020c48 	.word	0x08020c48

0801fd24 <__d2b>:
 801fd24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801fd28:	4689      	mov	r9, r1
 801fd2a:	2101      	movs	r1, #1
 801fd2c:	ec57 6b10 	vmov	r6, r7, d0
 801fd30:	4690      	mov	r8, r2
 801fd32:	f7ff fccf 	bl	801f6d4 <_Balloc>
 801fd36:	4604      	mov	r4, r0
 801fd38:	b930      	cbnz	r0, 801fd48 <__d2b+0x24>
 801fd3a:	4602      	mov	r2, r0
 801fd3c:	4b25      	ldr	r3, [pc, #148]	; (801fdd4 <__d2b+0xb0>)
 801fd3e:	4826      	ldr	r0, [pc, #152]	; (801fdd8 <__d2b+0xb4>)
 801fd40:	f240 310a 	movw	r1, #778	; 0x30a
 801fd44:	f000 f8be 	bl	801fec4 <__assert_func>
 801fd48:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801fd4c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801fd50:	bb35      	cbnz	r5, 801fda0 <__d2b+0x7c>
 801fd52:	2e00      	cmp	r6, #0
 801fd54:	9301      	str	r3, [sp, #4]
 801fd56:	d028      	beq.n	801fdaa <__d2b+0x86>
 801fd58:	4668      	mov	r0, sp
 801fd5a:	9600      	str	r6, [sp, #0]
 801fd5c:	f7ff fd82 	bl	801f864 <__lo0bits>
 801fd60:	9900      	ldr	r1, [sp, #0]
 801fd62:	b300      	cbz	r0, 801fda6 <__d2b+0x82>
 801fd64:	9a01      	ldr	r2, [sp, #4]
 801fd66:	f1c0 0320 	rsb	r3, r0, #32
 801fd6a:	fa02 f303 	lsl.w	r3, r2, r3
 801fd6e:	430b      	orrs	r3, r1
 801fd70:	40c2      	lsrs	r2, r0
 801fd72:	6163      	str	r3, [r4, #20]
 801fd74:	9201      	str	r2, [sp, #4]
 801fd76:	9b01      	ldr	r3, [sp, #4]
 801fd78:	61a3      	str	r3, [r4, #24]
 801fd7a:	2b00      	cmp	r3, #0
 801fd7c:	bf14      	ite	ne
 801fd7e:	2202      	movne	r2, #2
 801fd80:	2201      	moveq	r2, #1
 801fd82:	6122      	str	r2, [r4, #16]
 801fd84:	b1d5      	cbz	r5, 801fdbc <__d2b+0x98>
 801fd86:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801fd8a:	4405      	add	r5, r0
 801fd8c:	f8c9 5000 	str.w	r5, [r9]
 801fd90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801fd94:	f8c8 0000 	str.w	r0, [r8]
 801fd98:	4620      	mov	r0, r4
 801fd9a:	b003      	add	sp, #12
 801fd9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fda0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801fda4:	e7d5      	b.n	801fd52 <__d2b+0x2e>
 801fda6:	6161      	str	r1, [r4, #20]
 801fda8:	e7e5      	b.n	801fd76 <__d2b+0x52>
 801fdaa:	a801      	add	r0, sp, #4
 801fdac:	f7ff fd5a 	bl	801f864 <__lo0bits>
 801fdb0:	9b01      	ldr	r3, [sp, #4]
 801fdb2:	6163      	str	r3, [r4, #20]
 801fdb4:	2201      	movs	r2, #1
 801fdb6:	6122      	str	r2, [r4, #16]
 801fdb8:	3020      	adds	r0, #32
 801fdba:	e7e3      	b.n	801fd84 <__d2b+0x60>
 801fdbc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801fdc0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801fdc4:	f8c9 0000 	str.w	r0, [r9]
 801fdc8:	6918      	ldr	r0, [r3, #16]
 801fdca:	f7ff fd2b 	bl	801f824 <__hi0bits>
 801fdce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801fdd2:	e7df      	b.n	801fd94 <__d2b+0x70>
 801fdd4:	08020c37 	.word	0x08020c37
 801fdd8:	08020c48 	.word	0x08020c48

0801fddc <_calloc_r>:
 801fddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fdde:	fba1 2402 	umull	r2, r4, r1, r2
 801fde2:	b94c      	cbnz	r4, 801fdf8 <_calloc_r+0x1c>
 801fde4:	4611      	mov	r1, r2
 801fde6:	9201      	str	r2, [sp, #4]
 801fde8:	f7fd ffb2 	bl	801dd50 <_malloc_r>
 801fdec:	9a01      	ldr	r2, [sp, #4]
 801fdee:	4605      	mov	r5, r0
 801fdf0:	b930      	cbnz	r0, 801fe00 <_calloc_r+0x24>
 801fdf2:	4628      	mov	r0, r5
 801fdf4:	b003      	add	sp, #12
 801fdf6:	bd30      	pop	{r4, r5, pc}
 801fdf8:	220c      	movs	r2, #12
 801fdfa:	6002      	str	r2, [r0, #0]
 801fdfc:	2500      	movs	r5, #0
 801fdfe:	e7f8      	b.n	801fdf2 <_calloc_r+0x16>
 801fe00:	4621      	mov	r1, r4
 801fe02:	f7fd ff7c 	bl	801dcfe <memset>
 801fe06:	e7f4      	b.n	801fdf2 <_calloc_r+0x16>

0801fe08 <_free_r>:
 801fe08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fe0a:	2900      	cmp	r1, #0
 801fe0c:	d044      	beq.n	801fe98 <_free_r+0x90>
 801fe0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fe12:	9001      	str	r0, [sp, #4]
 801fe14:	2b00      	cmp	r3, #0
 801fe16:	f1a1 0404 	sub.w	r4, r1, #4
 801fe1a:	bfb8      	it	lt
 801fe1c:	18e4      	addlt	r4, r4, r3
 801fe1e:	f7ff fc4d 	bl	801f6bc <__malloc_lock>
 801fe22:	4a1e      	ldr	r2, [pc, #120]	; (801fe9c <_free_r+0x94>)
 801fe24:	9801      	ldr	r0, [sp, #4]
 801fe26:	6813      	ldr	r3, [r2, #0]
 801fe28:	b933      	cbnz	r3, 801fe38 <_free_r+0x30>
 801fe2a:	6063      	str	r3, [r4, #4]
 801fe2c:	6014      	str	r4, [r2, #0]
 801fe2e:	b003      	add	sp, #12
 801fe30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801fe34:	f7ff bc48 	b.w	801f6c8 <__malloc_unlock>
 801fe38:	42a3      	cmp	r3, r4
 801fe3a:	d908      	bls.n	801fe4e <_free_r+0x46>
 801fe3c:	6825      	ldr	r5, [r4, #0]
 801fe3e:	1961      	adds	r1, r4, r5
 801fe40:	428b      	cmp	r3, r1
 801fe42:	bf01      	itttt	eq
 801fe44:	6819      	ldreq	r1, [r3, #0]
 801fe46:	685b      	ldreq	r3, [r3, #4]
 801fe48:	1949      	addeq	r1, r1, r5
 801fe4a:	6021      	streq	r1, [r4, #0]
 801fe4c:	e7ed      	b.n	801fe2a <_free_r+0x22>
 801fe4e:	461a      	mov	r2, r3
 801fe50:	685b      	ldr	r3, [r3, #4]
 801fe52:	b10b      	cbz	r3, 801fe58 <_free_r+0x50>
 801fe54:	42a3      	cmp	r3, r4
 801fe56:	d9fa      	bls.n	801fe4e <_free_r+0x46>
 801fe58:	6811      	ldr	r1, [r2, #0]
 801fe5a:	1855      	adds	r5, r2, r1
 801fe5c:	42a5      	cmp	r5, r4
 801fe5e:	d10b      	bne.n	801fe78 <_free_r+0x70>
 801fe60:	6824      	ldr	r4, [r4, #0]
 801fe62:	4421      	add	r1, r4
 801fe64:	1854      	adds	r4, r2, r1
 801fe66:	42a3      	cmp	r3, r4
 801fe68:	6011      	str	r1, [r2, #0]
 801fe6a:	d1e0      	bne.n	801fe2e <_free_r+0x26>
 801fe6c:	681c      	ldr	r4, [r3, #0]
 801fe6e:	685b      	ldr	r3, [r3, #4]
 801fe70:	6053      	str	r3, [r2, #4]
 801fe72:	4421      	add	r1, r4
 801fe74:	6011      	str	r1, [r2, #0]
 801fe76:	e7da      	b.n	801fe2e <_free_r+0x26>
 801fe78:	d902      	bls.n	801fe80 <_free_r+0x78>
 801fe7a:	230c      	movs	r3, #12
 801fe7c:	6003      	str	r3, [r0, #0]
 801fe7e:	e7d6      	b.n	801fe2e <_free_r+0x26>
 801fe80:	6825      	ldr	r5, [r4, #0]
 801fe82:	1961      	adds	r1, r4, r5
 801fe84:	428b      	cmp	r3, r1
 801fe86:	bf04      	itt	eq
 801fe88:	6819      	ldreq	r1, [r3, #0]
 801fe8a:	685b      	ldreq	r3, [r3, #4]
 801fe8c:	6063      	str	r3, [r4, #4]
 801fe8e:	bf04      	itt	eq
 801fe90:	1949      	addeq	r1, r1, r5
 801fe92:	6021      	streq	r1, [r4, #0]
 801fe94:	6054      	str	r4, [r2, #4]
 801fe96:	e7ca      	b.n	801fe2e <_free_r+0x26>
 801fe98:	b003      	add	sp, #12
 801fe9a:	bd30      	pop	{r4, r5, pc}
 801fe9c:	2401deec 	.word	0x2401deec

0801fea0 <_read_r>:
 801fea0:	b538      	push	{r3, r4, r5, lr}
 801fea2:	4d07      	ldr	r5, [pc, #28]	; (801fec0 <_read_r+0x20>)
 801fea4:	4604      	mov	r4, r0
 801fea6:	4608      	mov	r0, r1
 801fea8:	4611      	mov	r1, r2
 801feaa:	2200      	movs	r2, #0
 801feac:	602a      	str	r2, [r5, #0]
 801feae:	461a      	mov	r2, r3
 801feb0:	f7e1 fd2c 	bl	800190c <_read>
 801feb4:	1c43      	adds	r3, r0, #1
 801feb6:	d102      	bne.n	801febe <_read_r+0x1e>
 801feb8:	682b      	ldr	r3, [r5, #0]
 801feba:	b103      	cbz	r3, 801febe <_read_r+0x1e>
 801febc:	6023      	str	r3, [r4, #0]
 801febe:	bd38      	pop	{r3, r4, r5, pc}
 801fec0:	2401def4 	.word	0x2401def4

0801fec4 <__assert_func>:
 801fec4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fec6:	4614      	mov	r4, r2
 801fec8:	461a      	mov	r2, r3
 801feca:	4b09      	ldr	r3, [pc, #36]	; (801fef0 <__assert_func+0x2c>)
 801fecc:	681b      	ldr	r3, [r3, #0]
 801fece:	4605      	mov	r5, r0
 801fed0:	68d8      	ldr	r0, [r3, #12]
 801fed2:	b14c      	cbz	r4, 801fee8 <__assert_func+0x24>
 801fed4:	4b07      	ldr	r3, [pc, #28]	; (801fef4 <__assert_func+0x30>)
 801fed6:	9100      	str	r1, [sp, #0]
 801fed8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801fedc:	4906      	ldr	r1, [pc, #24]	; (801fef8 <__assert_func+0x34>)
 801fede:	462b      	mov	r3, r5
 801fee0:	f000 f80e 	bl	801ff00 <fiprintf>
 801fee4:	f7fd fdd2 	bl	801da8c <abort>
 801fee8:	4b04      	ldr	r3, [pc, #16]	; (801fefc <__assert_func+0x38>)
 801feea:	461c      	mov	r4, r3
 801feec:	e7f3      	b.n	801fed6 <__assert_func+0x12>
 801feee:	bf00      	nop
 801fef0:	24000060 	.word	0x24000060
 801fef4:	08020da4 	.word	0x08020da4
 801fef8:	08020db1 	.word	0x08020db1
 801fefc:	08020ddf 	.word	0x08020ddf

0801ff00 <fiprintf>:
 801ff00:	b40e      	push	{r1, r2, r3}
 801ff02:	b503      	push	{r0, r1, lr}
 801ff04:	4601      	mov	r1, r0
 801ff06:	ab03      	add	r3, sp, #12
 801ff08:	4805      	ldr	r0, [pc, #20]	; (801ff20 <fiprintf+0x20>)
 801ff0a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ff0e:	6800      	ldr	r0, [r0, #0]
 801ff10:	9301      	str	r3, [sp, #4]
 801ff12:	f000 f843 	bl	801ff9c <_vfiprintf_r>
 801ff16:	b002      	add	sp, #8
 801ff18:	f85d eb04 	ldr.w	lr, [sp], #4
 801ff1c:	b003      	add	sp, #12
 801ff1e:	4770      	bx	lr
 801ff20:	24000060 	.word	0x24000060

0801ff24 <__ascii_mbtowc>:
 801ff24:	b082      	sub	sp, #8
 801ff26:	b901      	cbnz	r1, 801ff2a <__ascii_mbtowc+0x6>
 801ff28:	a901      	add	r1, sp, #4
 801ff2a:	b142      	cbz	r2, 801ff3e <__ascii_mbtowc+0x1a>
 801ff2c:	b14b      	cbz	r3, 801ff42 <__ascii_mbtowc+0x1e>
 801ff2e:	7813      	ldrb	r3, [r2, #0]
 801ff30:	600b      	str	r3, [r1, #0]
 801ff32:	7812      	ldrb	r2, [r2, #0]
 801ff34:	1e10      	subs	r0, r2, #0
 801ff36:	bf18      	it	ne
 801ff38:	2001      	movne	r0, #1
 801ff3a:	b002      	add	sp, #8
 801ff3c:	4770      	bx	lr
 801ff3e:	4610      	mov	r0, r2
 801ff40:	e7fb      	b.n	801ff3a <__ascii_mbtowc+0x16>
 801ff42:	f06f 0001 	mvn.w	r0, #1
 801ff46:	e7f8      	b.n	801ff3a <__ascii_mbtowc+0x16>

0801ff48 <__sfputc_r>:
 801ff48:	6893      	ldr	r3, [r2, #8]
 801ff4a:	3b01      	subs	r3, #1
 801ff4c:	2b00      	cmp	r3, #0
 801ff4e:	b410      	push	{r4}
 801ff50:	6093      	str	r3, [r2, #8]
 801ff52:	da08      	bge.n	801ff66 <__sfputc_r+0x1e>
 801ff54:	6994      	ldr	r4, [r2, #24]
 801ff56:	42a3      	cmp	r3, r4
 801ff58:	db01      	blt.n	801ff5e <__sfputc_r+0x16>
 801ff5a:	290a      	cmp	r1, #10
 801ff5c:	d103      	bne.n	801ff66 <__sfputc_r+0x1e>
 801ff5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ff62:	f000 b94b 	b.w	80201fc <__swbuf_r>
 801ff66:	6813      	ldr	r3, [r2, #0]
 801ff68:	1c58      	adds	r0, r3, #1
 801ff6a:	6010      	str	r0, [r2, #0]
 801ff6c:	7019      	strb	r1, [r3, #0]
 801ff6e:	4608      	mov	r0, r1
 801ff70:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ff74:	4770      	bx	lr

0801ff76 <__sfputs_r>:
 801ff76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff78:	4606      	mov	r6, r0
 801ff7a:	460f      	mov	r7, r1
 801ff7c:	4614      	mov	r4, r2
 801ff7e:	18d5      	adds	r5, r2, r3
 801ff80:	42ac      	cmp	r4, r5
 801ff82:	d101      	bne.n	801ff88 <__sfputs_r+0x12>
 801ff84:	2000      	movs	r0, #0
 801ff86:	e007      	b.n	801ff98 <__sfputs_r+0x22>
 801ff88:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ff8c:	463a      	mov	r2, r7
 801ff8e:	4630      	mov	r0, r6
 801ff90:	f7ff ffda 	bl	801ff48 <__sfputc_r>
 801ff94:	1c43      	adds	r3, r0, #1
 801ff96:	d1f3      	bne.n	801ff80 <__sfputs_r+0xa>
 801ff98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ff9c <_vfiprintf_r>:
 801ff9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffa0:	460d      	mov	r5, r1
 801ffa2:	b09d      	sub	sp, #116	; 0x74
 801ffa4:	4614      	mov	r4, r2
 801ffa6:	4698      	mov	r8, r3
 801ffa8:	4606      	mov	r6, r0
 801ffaa:	b118      	cbz	r0, 801ffb4 <_vfiprintf_r+0x18>
 801ffac:	6983      	ldr	r3, [r0, #24]
 801ffae:	b90b      	cbnz	r3, 801ffb4 <_vfiprintf_r+0x18>
 801ffb0:	f7fd fdd2 	bl	801db58 <__sinit>
 801ffb4:	4b89      	ldr	r3, [pc, #548]	; (80201dc <_vfiprintf_r+0x240>)
 801ffb6:	429d      	cmp	r5, r3
 801ffb8:	d11b      	bne.n	801fff2 <_vfiprintf_r+0x56>
 801ffba:	6875      	ldr	r5, [r6, #4]
 801ffbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ffbe:	07d9      	lsls	r1, r3, #31
 801ffc0:	d405      	bmi.n	801ffce <_vfiprintf_r+0x32>
 801ffc2:	89ab      	ldrh	r3, [r5, #12]
 801ffc4:	059a      	lsls	r2, r3, #22
 801ffc6:	d402      	bmi.n	801ffce <_vfiprintf_r+0x32>
 801ffc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ffca:	f7fd fe88 	bl	801dcde <__retarget_lock_acquire_recursive>
 801ffce:	89ab      	ldrh	r3, [r5, #12]
 801ffd0:	071b      	lsls	r3, r3, #28
 801ffd2:	d501      	bpl.n	801ffd8 <_vfiprintf_r+0x3c>
 801ffd4:	692b      	ldr	r3, [r5, #16]
 801ffd6:	b9eb      	cbnz	r3, 8020014 <_vfiprintf_r+0x78>
 801ffd8:	4629      	mov	r1, r5
 801ffda:	4630      	mov	r0, r6
 801ffdc:	f000 f96e 	bl	80202bc <__swsetup_r>
 801ffe0:	b1c0      	cbz	r0, 8020014 <_vfiprintf_r+0x78>
 801ffe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ffe4:	07dc      	lsls	r4, r3, #31
 801ffe6:	d50e      	bpl.n	8020006 <_vfiprintf_r+0x6a>
 801ffe8:	f04f 30ff 	mov.w	r0, #4294967295
 801ffec:	b01d      	add	sp, #116	; 0x74
 801ffee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fff2:	4b7b      	ldr	r3, [pc, #492]	; (80201e0 <_vfiprintf_r+0x244>)
 801fff4:	429d      	cmp	r5, r3
 801fff6:	d101      	bne.n	801fffc <_vfiprintf_r+0x60>
 801fff8:	68b5      	ldr	r5, [r6, #8]
 801fffa:	e7df      	b.n	801ffbc <_vfiprintf_r+0x20>
 801fffc:	4b79      	ldr	r3, [pc, #484]	; (80201e4 <_vfiprintf_r+0x248>)
 801fffe:	429d      	cmp	r5, r3
 8020000:	bf08      	it	eq
 8020002:	68f5      	ldreq	r5, [r6, #12]
 8020004:	e7da      	b.n	801ffbc <_vfiprintf_r+0x20>
 8020006:	89ab      	ldrh	r3, [r5, #12]
 8020008:	0598      	lsls	r0, r3, #22
 802000a:	d4ed      	bmi.n	801ffe8 <_vfiprintf_r+0x4c>
 802000c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802000e:	f7fd fe67 	bl	801dce0 <__retarget_lock_release_recursive>
 8020012:	e7e9      	b.n	801ffe8 <_vfiprintf_r+0x4c>
 8020014:	2300      	movs	r3, #0
 8020016:	9309      	str	r3, [sp, #36]	; 0x24
 8020018:	2320      	movs	r3, #32
 802001a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802001e:	f8cd 800c 	str.w	r8, [sp, #12]
 8020022:	2330      	movs	r3, #48	; 0x30
 8020024:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80201e8 <_vfiprintf_r+0x24c>
 8020028:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802002c:	f04f 0901 	mov.w	r9, #1
 8020030:	4623      	mov	r3, r4
 8020032:	469a      	mov	sl, r3
 8020034:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020038:	b10a      	cbz	r2, 802003e <_vfiprintf_r+0xa2>
 802003a:	2a25      	cmp	r2, #37	; 0x25
 802003c:	d1f9      	bne.n	8020032 <_vfiprintf_r+0x96>
 802003e:	ebba 0b04 	subs.w	fp, sl, r4
 8020042:	d00b      	beq.n	802005c <_vfiprintf_r+0xc0>
 8020044:	465b      	mov	r3, fp
 8020046:	4622      	mov	r2, r4
 8020048:	4629      	mov	r1, r5
 802004a:	4630      	mov	r0, r6
 802004c:	f7ff ff93 	bl	801ff76 <__sfputs_r>
 8020050:	3001      	adds	r0, #1
 8020052:	f000 80aa 	beq.w	80201aa <_vfiprintf_r+0x20e>
 8020056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020058:	445a      	add	r2, fp
 802005a:	9209      	str	r2, [sp, #36]	; 0x24
 802005c:	f89a 3000 	ldrb.w	r3, [sl]
 8020060:	2b00      	cmp	r3, #0
 8020062:	f000 80a2 	beq.w	80201aa <_vfiprintf_r+0x20e>
 8020066:	2300      	movs	r3, #0
 8020068:	f04f 32ff 	mov.w	r2, #4294967295
 802006c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020070:	f10a 0a01 	add.w	sl, sl, #1
 8020074:	9304      	str	r3, [sp, #16]
 8020076:	9307      	str	r3, [sp, #28]
 8020078:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802007c:	931a      	str	r3, [sp, #104]	; 0x68
 802007e:	4654      	mov	r4, sl
 8020080:	2205      	movs	r2, #5
 8020082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020086:	4858      	ldr	r0, [pc, #352]	; (80201e8 <_vfiprintf_r+0x24c>)
 8020088:	f7e0 f932 	bl	80002f0 <memchr>
 802008c:	9a04      	ldr	r2, [sp, #16]
 802008e:	b9d8      	cbnz	r0, 80200c8 <_vfiprintf_r+0x12c>
 8020090:	06d1      	lsls	r1, r2, #27
 8020092:	bf44      	itt	mi
 8020094:	2320      	movmi	r3, #32
 8020096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802009a:	0713      	lsls	r3, r2, #28
 802009c:	bf44      	itt	mi
 802009e:	232b      	movmi	r3, #43	; 0x2b
 80200a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80200a4:	f89a 3000 	ldrb.w	r3, [sl]
 80200a8:	2b2a      	cmp	r3, #42	; 0x2a
 80200aa:	d015      	beq.n	80200d8 <_vfiprintf_r+0x13c>
 80200ac:	9a07      	ldr	r2, [sp, #28]
 80200ae:	4654      	mov	r4, sl
 80200b0:	2000      	movs	r0, #0
 80200b2:	f04f 0c0a 	mov.w	ip, #10
 80200b6:	4621      	mov	r1, r4
 80200b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80200bc:	3b30      	subs	r3, #48	; 0x30
 80200be:	2b09      	cmp	r3, #9
 80200c0:	d94e      	bls.n	8020160 <_vfiprintf_r+0x1c4>
 80200c2:	b1b0      	cbz	r0, 80200f2 <_vfiprintf_r+0x156>
 80200c4:	9207      	str	r2, [sp, #28]
 80200c6:	e014      	b.n	80200f2 <_vfiprintf_r+0x156>
 80200c8:	eba0 0308 	sub.w	r3, r0, r8
 80200cc:	fa09 f303 	lsl.w	r3, r9, r3
 80200d0:	4313      	orrs	r3, r2
 80200d2:	9304      	str	r3, [sp, #16]
 80200d4:	46a2      	mov	sl, r4
 80200d6:	e7d2      	b.n	802007e <_vfiprintf_r+0xe2>
 80200d8:	9b03      	ldr	r3, [sp, #12]
 80200da:	1d19      	adds	r1, r3, #4
 80200dc:	681b      	ldr	r3, [r3, #0]
 80200de:	9103      	str	r1, [sp, #12]
 80200e0:	2b00      	cmp	r3, #0
 80200e2:	bfbb      	ittet	lt
 80200e4:	425b      	neglt	r3, r3
 80200e6:	f042 0202 	orrlt.w	r2, r2, #2
 80200ea:	9307      	strge	r3, [sp, #28]
 80200ec:	9307      	strlt	r3, [sp, #28]
 80200ee:	bfb8      	it	lt
 80200f0:	9204      	strlt	r2, [sp, #16]
 80200f2:	7823      	ldrb	r3, [r4, #0]
 80200f4:	2b2e      	cmp	r3, #46	; 0x2e
 80200f6:	d10c      	bne.n	8020112 <_vfiprintf_r+0x176>
 80200f8:	7863      	ldrb	r3, [r4, #1]
 80200fa:	2b2a      	cmp	r3, #42	; 0x2a
 80200fc:	d135      	bne.n	802016a <_vfiprintf_r+0x1ce>
 80200fe:	9b03      	ldr	r3, [sp, #12]
 8020100:	1d1a      	adds	r2, r3, #4
 8020102:	681b      	ldr	r3, [r3, #0]
 8020104:	9203      	str	r2, [sp, #12]
 8020106:	2b00      	cmp	r3, #0
 8020108:	bfb8      	it	lt
 802010a:	f04f 33ff 	movlt.w	r3, #4294967295
 802010e:	3402      	adds	r4, #2
 8020110:	9305      	str	r3, [sp, #20]
 8020112:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80201f8 <_vfiprintf_r+0x25c>
 8020116:	7821      	ldrb	r1, [r4, #0]
 8020118:	2203      	movs	r2, #3
 802011a:	4650      	mov	r0, sl
 802011c:	f7e0 f8e8 	bl	80002f0 <memchr>
 8020120:	b140      	cbz	r0, 8020134 <_vfiprintf_r+0x198>
 8020122:	2340      	movs	r3, #64	; 0x40
 8020124:	eba0 000a 	sub.w	r0, r0, sl
 8020128:	fa03 f000 	lsl.w	r0, r3, r0
 802012c:	9b04      	ldr	r3, [sp, #16]
 802012e:	4303      	orrs	r3, r0
 8020130:	3401      	adds	r4, #1
 8020132:	9304      	str	r3, [sp, #16]
 8020134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020138:	482c      	ldr	r0, [pc, #176]	; (80201ec <_vfiprintf_r+0x250>)
 802013a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802013e:	2206      	movs	r2, #6
 8020140:	f7e0 f8d6 	bl	80002f0 <memchr>
 8020144:	2800      	cmp	r0, #0
 8020146:	d03f      	beq.n	80201c8 <_vfiprintf_r+0x22c>
 8020148:	4b29      	ldr	r3, [pc, #164]	; (80201f0 <_vfiprintf_r+0x254>)
 802014a:	bb1b      	cbnz	r3, 8020194 <_vfiprintf_r+0x1f8>
 802014c:	9b03      	ldr	r3, [sp, #12]
 802014e:	3307      	adds	r3, #7
 8020150:	f023 0307 	bic.w	r3, r3, #7
 8020154:	3308      	adds	r3, #8
 8020156:	9303      	str	r3, [sp, #12]
 8020158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802015a:	443b      	add	r3, r7
 802015c:	9309      	str	r3, [sp, #36]	; 0x24
 802015e:	e767      	b.n	8020030 <_vfiprintf_r+0x94>
 8020160:	fb0c 3202 	mla	r2, ip, r2, r3
 8020164:	460c      	mov	r4, r1
 8020166:	2001      	movs	r0, #1
 8020168:	e7a5      	b.n	80200b6 <_vfiprintf_r+0x11a>
 802016a:	2300      	movs	r3, #0
 802016c:	3401      	adds	r4, #1
 802016e:	9305      	str	r3, [sp, #20]
 8020170:	4619      	mov	r1, r3
 8020172:	f04f 0c0a 	mov.w	ip, #10
 8020176:	4620      	mov	r0, r4
 8020178:	f810 2b01 	ldrb.w	r2, [r0], #1
 802017c:	3a30      	subs	r2, #48	; 0x30
 802017e:	2a09      	cmp	r2, #9
 8020180:	d903      	bls.n	802018a <_vfiprintf_r+0x1ee>
 8020182:	2b00      	cmp	r3, #0
 8020184:	d0c5      	beq.n	8020112 <_vfiprintf_r+0x176>
 8020186:	9105      	str	r1, [sp, #20]
 8020188:	e7c3      	b.n	8020112 <_vfiprintf_r+0x176>
 802018a:	fb0c 2101 	mla	r1, ip, r1, r2
 802018e:	4604      	mov	r4, r0
 8020190:	2301      	movs	r3, #1
 8020192:	e7f0      	b.n	8020176 <_vfiprintf_r+0x1da>
 8020194:	ab03      	add	r3, sp, #12
 8020196:	9300      	str	r3, [sp, #0]
 8020198:	462a      	mov	r2, r5
 802019a:	4b16      	ldr	r3, [pc, #88]	; (80201f4 <_vfiprintf_r+0x258>)
 802019c:	a904      	add	r1, sp, #16
 802019e:	4630      	mov	r0, r6
 80201a0:	f7fd feda 	bl	801df58 <_printf_float>
 80201a4:	4607      	mov	r7, r0
 80201a6:	1c78      	adds	r0, r7, #1
 80201a8:	d1d6      	bne.n	8020158 <_vfiprintf_r+0x1bc>
 80201aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80201ac:	07d9      	lsls	r1, r3, #31
 80201ae:	d405      	bmi.n	80201bc <_vfiprintf_r+0x220>
 80201b0:	89ab      	ldrh	r3, [r5, #12]
 80201b2:	059a      	lsls	r2, r3, #22
 80201b4:	d402      	bmi.n	80201bc <_vfiprintf_r+0x220>
 80201b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80201b8:	f7fd fd92 	bl	801dce0 <__retarget_lock_release_recursive>
 80201bc:	89ab      	ldrh	r3, [r5, #12]
 80201be:	065b      	lsls	r3, r3, #25
 80201c0:	f53f af12 	bmi.w	801ffe8 <_vfiprintf_r+0x4c>
 80201c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80201c6:	e711      	b.n	801ffec <_vfiprintf_r+0x50>
 80201c8:	ab03      	add	r3, sp, #12
 80201ca:	9300      	str	r3, [sp, #0]
 80201cc:	462a      	mov	r2, r5
 80201ce:	4b09      	ldr	r3, [pc, #36]	; (80201f4 <_vfiprintf_r+0x258>)
 80201d0:	a904      	add	r1, sp, #16
 80201d2:	4630      	mov	r0, r6
 80201d4:	f7fe f94c 	bl	801e470 <_printf_i>
 80201d8:	e7e4      	b.n	80201a4 <_vfiprintf_r+0x208>
 80201da:	bf00      	nop
 80201dc:	08020b40 	.word	0x08020b40
 80201e0:	08020b60 	.word	0x08020b60
 80201e4:	08020b20 	.word	0x08020b20
 80201e8:	08020dea 	.word	0x08020dea
 80201ec:	08020df4 	.word	0x08020df4
 80201f0:	0801df59 	.word	0x0801df59
 80201f4:	0801ff77 	.word	0x0801ff77
 80201f8:	08020df0 	.word	0x08020df0

080201fc <__swbuf_r>:
 80201fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80201fe:	460e      	mov	r6, r1
 8020200:	4614      	mov	r4, r2
 8020202:	4605      	mov	r5, r0
 8020204:	b118      	cbz	r0, 802020e <__swbuf_r+0x12>
 8020206:	6983      	ldr	r3, [r0, #24]
 8020208:	b90b      	cbnz	r3, 802020e <__swbuf_r+0x12>
 802020a:	f7fd fca5 	bl	801db58 <__sinit>
 802020e:	4b21      	ldr	r3, [pc, #132]	; (8020294 <__swbuf_r+0x98>)
 8020210:	429c      	cmp	r4, r3
 8020212:	d12b      	bne.n	802026c <__swbuf_r+0x70>
 8020214:	686c      	ldr	r4, [r5, #4]
 8020216:	69a3      	ldr	r3, [r4, #24]
 8020218:	60a3      	str	r3, [r4, #8]
 802021a:	89a3      	ldrh	r3, [r4, #12]
 802021c:	071a      	lsls	r2, r3, #28
 802021e:	d52f      	bpl.n	8020280 <__swbuf_r+0x84>
 8020220:	6923      	ldr	r3, [r4, #16]
 8020222:	b36b      	cbz	r3, 8020280 <__swbuf_r+0x84>
 8020224:	6923      	ldr	r3, [r4, #16]
 8020226:	6820      	ldr	r0, [r4, #0]
 8020228:	1ac0      	subs	r0, r0, r3
 802022a:	6963      	ldr	r3, [r4, #20]
 802022c:	b2f6      	uxtb	r6, r6
 802022e:	4283      	cmp	r3, r0
 8020230:	4637      	mov	r7, r6
 8020232:	dc04      	bgt.n	802023e <__swbuf_r+0x42>
 8020234:	4621      	mov	r1, r4
 8020236:	4628      	mov	r0, r5
 8020238:	f7ff f9e6 	bl	801f608 <_fflush_r>
 802023c:	bb30      	cbnz	r0, 802028c <__swbuf_r+0x90>
 802023e:	68a3      	ldr	r3, [r4, #8]
 8020240:	3b01      	subs	r3, #1
 8020242:	60a3      	str	r3, [r4, #8]
 8020244:	6823      	ldr	r3, [r4, #0]
 8020246:	1c5a      	adds	r2, r3, #1
 8020248:	6022      	str	r2, [r4, #0]
 802024a:	701e      	strb	r6, [r3, #0]
 802024c:	6963      	ldr	r3, [r4, #20]
 802024e:	3001      	adds	r0, #1
 8020250:	4283      	cmp	r3, r0
 8020252:	d004      	beq.n	802025e <__swbuf_r+0x62>
 8020254:	89a3      	ldrh	r3, [r4, #12]
 8020256:	07db      	lsls	r3, r3, #31
 8020258:	d506      	bpl.n	8020268 <__swbuf_r+0x6c>
 802025a:	2e0a      	cmp	r6, #10
 802025c:	d104      	bne.n	8020268 <__swbuf_r+0x6c>
 802025e:	4621      	mov	r1, r4
 8020260:	4628      	mov	r0, r5
 8020262:	f7ff f9d1 	bl	801f608 <_fflush_r>
 8020266:	b988      	cbnz	r0, 802028c <__swbuf_r+0x90>
 8020268:	4638      	mov	r0, r7
 802026a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802026c:	4b0a      	ldr	r3, [pc, #40]	; (8020298 <__swbuf_r+0x9c>)
 802026e:	429c      	cmp	r4, r3
 8020270:	d101      	bne.n	8020276 <__swbuf_r+0x7a>
 8020272:	68ac      	ldr	r4, [r5, #8]
 8020274:	e7cf      	b.n	8020216 <__swbuf_r+0x1a>
 8020276:	4b09      	ldr	r3, [pc, #36]	; (802029c <__swbuf_r+0xa0>)
 8020278:	429c      	cmp	r4, r3
 802027a:	bf08      	it	eq
 802027c:	68ec      	ldreq	r4, [r5, #12]
 802027e:	e7ca      	b.n	8020216 <__swbuf_r+0x1a>
 8020280:	4621      	mov	r1, r4
 8020282:	4628      	mov	r0, r5
 8020284:	f000 f81a 	bl	80202bc <__swsetup_r>
 8020288:	2800      	cmp	r0, #0
 802028a:	d0cb      	beq.n	8020224 <__swbuf_r+0x28>
 802028c:	f04f 37ff 	mov.w	r7, #4294967295
 8020290:	e7ea      	b.n	8020268 <__swbuf_r+0x6c>
 8020292:	bf00      	nop
 8020294:	08020b40 	.word	0x08020b40
 8020298:	08020b60 	.word	0x08020b60
 802029c:	08020b20 	.word	0x08020b20

080202a0 <__ascii_wctomb>:
 80202a0:	b149      	cbz	r1, 80202b6 <__ascii_wctomb+0x16>
 80202a2:	2aff      	cmp	r2, #255	; 0xff
 80202a4:	bf85      	ittet	hi
 80202a6:	238a      	movhi	r3, #138	; 0x8a
 80202a8:	6003      	strhi	r3, [r0, #0]
 80202aa:	700a      	strbls	r2, [r1, #0]
 80202ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80202b0:	bf98      	it	ls
 80202b2:	2001      	movls	r0, #1
 80202b4:	4770      	bx	lr
 80202b6:	4608      	mov	r0, r1
 80202b8:	4770      	bx	lr
	...

080202bc <__swsetup_r>:
 80202bc:	4b32      	ldr	r3, [pc, #200]	; (8020388 <__swsetup_r+0xcc>)
 80202be:	b570      	push	{r4, r5, r6, lr}
 80202c0:	681d      	ldr	r5, [r3, #0]
 80202c2:	4606      	mov	r6, r0
 80202c4:	460c      	mov	r4, r1
 80202c6:	b125      	cbz	r5, 80202d2 <__swsetup_r+0x16>
 80202c8:	69ab      	ldr	r3, [r5, #24]
 80202ca:	b913      	cbnz	r3, 80202d2 <__swsetup_r+0x16>
 80202cc:	4628      	mov	r0, r5
 80202ce:	f7fd fc43 	bl	801db58 <__sinit>
 80202d2:	4b2e      	ldr	r3, [pc, #184]	; (802038c <__swsetup_r+0xd0>)
 80202d4:	429c      	cmp	r4, r3
 80202d6:	d10f      	bne.n	80202f8 <__swsetup_r+0x3c>
 80202d8:	686c      	ldr	r4, [r5, #4]
 80202da:	89a3      	ldrh	r3, [r4, #12]
 80202dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80202e0:	0719      	lsls	r1, r3, #28
 80202e2:	d42c      	bmi.n	802033e <__swsetup_r+0x82>
 80202e4:	06dd      	lsls	r5, r3, #27
 80202e6:	d411      	bmi.n	802030c <__swsetup_r+0x50>
 80202e8:	2309      	movs	r3, #9
 80202ea:	6033      	str	r3, [r6, #0]
 80202ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80202f0:	81a3      	strh	r3, [r4, #12]
 80202f2:	f04f 30ff 	mov.w	r0, #4294967295
 80202f6:	e03e      	b.n	8020376 <__swsetup_r+0xba>
 80202f8:	4b25      	ldr	r3, [pc, #148]	; (8020390 <__swsetup_r+0xd4>)
 80202fa:	429c      	cmp	r4, r3
 80202fc:	d101      	bne.n	8020302 <__swsetup_r+0x46>
 80202fe:	68ac      	ldr	r4, [r5, #8]
 8020300:	e7eb      	b.n	80202da <__swsetup_r+0x1e>
 8020302:	4b24      	ldr	r3, [pc, #144]	; (8020394 <__swsetup_r+0xd8>)
 8020304:	429c      	cmp	r4, r3
 8020306:	bf08      	it	eq
 8020308:	68ec      	ldreq	r4, [r5, #12]
 802030a:	e7e6      	b.n	80202da <__swsetup_r+0x1e>
 802030c:	0758      	lsls	r0, r3, #29
 802030e:	d512      	bpl.n	8020336 <__swsetup_r+0x7a>
 8020310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020312:	b141      	cbz	r1, 8020326 <__swsetup_r+0x6a>
 8020314:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020318:	4299      	cmp	r1, r3
 802031a:	d002      	beq.n	8020322 <__swsetup_r+0x66>
 802031c:	4630      	mov	r0, r6
 802031e:	f7ff fd73 	bl	801fe08 <_free_r>
 8020322:	2300      	movs	r3, #0
 8020324:	6363      	str	r3, [r4, #52]	; 0x34
 8020326:	89a3      	ldrh	r3, [r4, #12]
 8020328:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802032c:	81a3      	strh	r3, [r4, #12]
 802032e:	2300      	movs	r3, #0
 8020330:	6063      	str	r3, [r4, #4]
 8020332:	6923      	ldr	r3, [r4, #16]
 8020334:	6023      	str	r3, [r4, #0]
 8020336:	89a3      	ldrh	r3, [r4, #12]
 8020338:	f043 0308 	orr.w	r3, r3, #8
 802033c:	81a3      	strh	r3, [r4, #12]
 802033e:	6923      	ldr	r3, [r4, #16]
 8020340:	b94b      	cbnz	r3, 8020356 <__swsetup_r+0x9a>
 8020342:	89a3      	ldrh	r3, [r4, #12]
 8020344:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802034c:	d003      	beq.n	8020356 <__swsetup_r+0x9a>
 802034e:	4621      	mov	r1, r4
 8020350:	4630      	mov	r0, r6
 8020352:	f000 f847 	bl	80203e4 <__smakebuf_r>
 8020356:	89a0      	ldrh	r0, [r4, #12]
 8020358:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802035c:	f010 0301 	ands.w	r3, r0, #1
 8020360:	d00a      	beq.n	8020378 <__swsetup_r+0xbc>
 8020362:	2300      	movs	r3, #0
 8020364:	60a3      	str	r3, [r4, #8]
 8020366:	6963      	ldr	r3, [r4, #20]
 8020368:	425b      	negs	r3, r3
 802036a:	61a3      	str	r3, [r4, #24]
 802036c:	6923      	ldr	r3, [r4, #16]
 802036e:	b943      	cbnz	r3, 8020382 <__swsetup_r+0xc6>
 8020370:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020374:	d1ba      	bne.n	80202ec <__swsetup_r+0x30>
 8020376:	bd70      	pop	{r4, r5, r6, pc}
 8020378:	0781      	lsls	r1, r0, #30
 802037a:	bf58      	it	pl
 802037c:	6963      	ldrpl	r3, [r4, #20]
 802037e:	60a3      	str	r3, [r4, #8]
 8020380:	e7f4      	b.n	802036c <__swsetup_r+0xb0>
 8020382:	2000      	movs	r0, #0
 8020384:	e7f7      	b.n	8020376 <__swsetup_r+0xba>
 8020386:	bf00      	nop
 8020388:	24000060 	.word	0x24000060
 802038c:	08020b40 	.word	0x08020b40
 8020390:	08020b60 	.word	0x08020b60
 8020394:	08020b20 	.word	0x08020b20

08020398 <__swhatbuf_r>:
 8020398:	b570      	push	{r4, r5, r6, lr}
 802039a:	460e      	mov	r6, r1
 802039c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80203a0:	2900      	cmp	r1, #0
 80203a2:	b096      	sub	sp, #88	; 0x58
 80203a4:	4614      	mov	r4, r2
 80203a6:	461d      	mov	r5, r3
 80203a8:	da08      	bge.n	80203bc <__swhatbuf_r+0x24>
 80203aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80203ae:	2200      	movs	r2, #0
 80203b0:	602a      	str	r2, [r5, #0]
 80203b2:	061a      	lsls	r2, r3, #24
 80203b4:	d410      	bmi.n	80203d8 <__swhatbuf_r+0x40>
 80203b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80203ba:	e00e      	b.n	80203da <__swhatbuf_r+0x42>
 80203bc:	466a      	mov	r2, sp
 80203be:	f000 f851 	bl	8020464 <_fstat_r>
 80203c2:	2800      	cmp	r0, #0
 80203c4:	dbf1      	blt.n	80203aa <__swhatbuf_r+0x12>
 80203c6:	9a01      	ldr	r2, [sp, #4]
 80203c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80203cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80203d0:	425a      	negs	r2, r3
 80203d2:	415a      	adcs	r2, r3
 80203d4:	602a      	str	r2, [r5, #0]
 80203d6:	e7ee      	b.n	80203b6 <__swhatbuf_r+0x1e>
 80203d8:	2340      	movs	r3, #64	; 0x40
 80203da:	2000      	movs	r0, #0
 80203dc:	6023      	str	r3, [r4, #0]
 80203de:	b016      	add	sp, #88	; 0x58
 80203e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080203e4 <__smakebuf_r>:
 80203e4:	898b      	ldrh	r3, [r1, #12]
 80203e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80203e8:	079d      	lsls	r5, r3, #30
 80203ea:	4606      	mov	r6, r0
 80203ec:	460c      	mov	r4, r1
 80203ee:	d507      	bpl.n	8020400 <__smakebuf_r+0x1c>
 80203f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80203f4:	6023      	str	r3, [r4, #0]
 80203f6:	6123      	str	r3, [r4, #16]
 80203f8:	2301      	movs	r3, #1
 80203fa:	6163      	str	r3, [r4, #20]
 80203fc:	b002      	add	sp, #8
 80203fe:	bd70      	pop	{r4, r5, r6, pc}
 8020400:	ab01      	add	r3, sp, #4
 8020402:	466a      	mov	r2, sp
 8020404:	f7ff ffc8 	bl	8020398 <__swhatbuf_r>
 8020408:	9900      	ldr	r1, [sp, #0]
 802040a:	4605      	mov	r5, r0
 802040c:	4630      	mov	r0, r6
 802040e:	f7fd fc9f 	bl	801dd50 <_malloc_r>
 8020412:	b948      	cbnz	r0, 8020428 <__smakebuf_r+0x44>
 8020414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020418:	059a      	lsls	r2, r3, #22
 802041a:	d4ef      	bmi.n	80203fc <__smakebuf_r+0x18>
 802041c:	f023 0303 	bic.w	r3, r3, #3
 8020420:	f043 0302 	orr.w	r3, r3, #2
 8020424:	81a3      	strh	r3, [r4, #12]
 8020426:	e7e3      	b.n	80203f0 <__smakebuf_r+0xc>
 8020428:	4b0d      	ldr	r3, [pc, #52]	; (8020460 <__smakebuf_r+0x7c>)
 802042a:	62b3      	str	r3, [r6, #40]	; 0x28
 802042c:	89a3      	ldrh	r3, [r4, #12]
 802042e:	6020      	str	r0, [r4, #0]
 8020430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020434:	81a3      	strh	r3, [r4, #12]
 8020436:	9b00      	ldr	r3, [sp, #0]
 8020438:	6163      	str	r3, [r4, #20]
 802043a:	9b01      	ldr	r3, [sp, #4]
 802043c:	6120      	str	r0, [r4, #16]
 802043e:	b15b      	cbz	r3, 8020458 <__smakebuf_r+0x74>
 8020440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020444:	4630      	mov	r0, r6
 8020446:	f000 f81f 	bl	8020488 <_isatty_r>
 802044a:	b128      	cbz	r0, 8020458 <__smakebuf_r+0x74>
 802044c:	89a3      	ldrh	r3, [r4, #12]
 802044e:	f023 0303 	bic.w	r3, r3, #3
 8020452:	f043 0301 	orr.w	r3, r3, #1
 8020456:	81a3      	strh	r3, [r4, #12]
 8020458:	89a0      	ldrh	r0, [r4, #12]
 802045a:	4305      	orrs	r5, r0
 802045c:	81a5      	strh	r5, [r4, #12]
 802045e:	e7cd      	b.n	80203fc <__smakebuf_r+0x18>
 8020460:	0801daf1 	.word	0x0801daf1

08020464 <_fstat_r>:
 8020464:	b538      	push	{r3, r4, r5, lr}
 8020466:	4d07      	ldr	r5, [pc, #28]	; (8020484 <_fstat_r+0x20>)
 8020468:	2300      	movs	r3, #0
 802046a:	4604      	mov	r4, r0
 802046c:	4608      	mov	r0, r1
 802046e:	4611      	mov	r1, r2
 8020470:	602b      	str	r3, [r5, #0]
 8020472:	f7e1 fa90 	bl	8001996 <_fstat>
 8020476:	1c43      	adds	r3, r0, #1
 8020478:	d102      	bne.n	8020480 <_fstat_r+0x1c>
 802047a:	682b      	ldr	r3, [r5, #0]
 802047c:	b103      	cbz	r3, 8020480 <_fstat_r+0x1c>
 802047e:	6023      	str	r3, [r4, #0]
 8020480:	bd38      	pop	{r3, r4, r5, pc}
 8020482:	bf00      	nop
 8020484:	2401def4 	.word	0x2401def4

08020488 <_isatty_r>:
 8020488:	b538      	push	{r3, r4, r5, lr}
 802048a:	4d06      	ldr	r5, [pc, #24]	; (80204a4 <_isatty_r+0x1c>)
 802048c:	2300      	movs	r3, #0
 802048e:	4604      	mov	r4, r0
 8020490:	4608      	mov	r0, r1
 8020492:	602b      	str	r3, [r5, #0]
 8020494:	f7e1 fa8f 	bl	80019b6 <_isatty>
 8020498:	1c43      	adds	r3, r0, #1
 802049a:	d102      	bne.n	80204a2 <_isatty_r+0x1a>
 802049c:	682b      	ldr	r3, [r5, #0]
 802049e:	b103      	cbz	r3, 80204a2 <_isatty_r+0x1a>
 80204a0:	6023      	str	r3, [r4, #0]
 80204a2:	bd38      	pop	{r3, r4, r5, pc}
 80204a4:	2401def4 	.word	0x2401def4

080204a8 <_init>:
 80204a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80204aa:	bf00      	nop
 80204ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80204ae:	bc08      	pop	{r3}
 80204b0:	469e      	mov	lr, r3
 80204b2:	4770      	bx	lr

080204b4 <_fini>:
 80204b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80204b6:	bf00      	nop
 80204b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80204ba:	bc08      	pop	{r3}
 80204bc:	469e      	mov	lr, r3
 80204be:	4770      	bx	lr
