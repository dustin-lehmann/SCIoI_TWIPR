
RC_v3_H743_TWIPR-Simple_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013084  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  08013328  08013328  00023328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013854  08013854  00023854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000010  0801385c  0801385c  0002385c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801386c  0801386c  0002386c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001fc  24000000  08013870  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000c5ec  240001fc  08013a6c  000301fc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2400c7e8  08013a6c  0003c7e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003ecc6  00000000  00000000  0003022a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006a07  00000000  00000000  0006eef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000020e0  00000000  00000000  000758f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001eb0  00000000  00000000  000779d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000c23b  00000000  00000000  00079888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002ee02  00000000  00000000  00085ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017b541  00000000  00000000  000b48c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0022fe06  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000970c  00000000  00000000  0022fe58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001fc 	.word	0x240001fc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801330c 	.word	0x0801330c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000200 	.word	0x24000200
 80002dc:	0801330c 	.word	0x0801330c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f001 f81c 	bl	80016d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f822 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f000 fa20 	bl	8000ae4 <MX_GPIO_Init>
  MX_DMA_Init();
 80006a4:	f000 f9d6 	bl	8000a54 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006a8:	f000 f93a 	bl	8000920 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80006ac:	f000 f894 	bl	80007d8 <MX_SPI2_Init>
  MX_UART8_Init();
 80006b0:	f000 f8e8 	bl	8000884 <MX_UART8_Init>
  MX_USART2_UART_Init();
 80006b4:	f000 f980 	bl	80009b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006b8:	f00a f9f0 	bl	800aa9c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  firmware();
 80006bc:	f00d fc64 	bl	800df88 <firmware>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006c0:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <main+0x44>)
 80006c2:	2100      	movs	r1, #0
 80006c4:	4805      	ldr	r0, [pc, #20]	; (80006dc <main+0x48>)
 80006c6:	f00a fa6a 	bl	800ab9e <osThreadNew>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <main+0x4c>)
 80006ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006d0:	f00a fa2a 	bl	800ab28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <main+0x40>
 80006d6:	bf00      	nop
 80006d8:	08013388 	.word	0x08013388
 80006dc:	08000c29 	.word	0x08000c29
 80006e0:	240007d4 	.word	0x240007d4

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b09c      	sub	sp, #112	; 0x70
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ee:	224c      	movs	r2, #76	; 0x4c
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f010 fa2f 	bl	8010b56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2220      	movs	r2, #32
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f010 fa29 	bl	8010b56 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000704:	2002      	movs	r0, #2
 8000706:	f004 f971 	bl	80049ec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070a:	2300      	movs	r3, #0
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	4b30      	ldr	r3, [pc, #192]	; (80007d0 <SystemClock_Config+0xec>)
 8000710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000712:	4a2f      	ldr	r2, [pc, #188]	; (80007d0 <SystemClock_Config+0xec>)
 8000714:	f023 0301 	bic.w	r3, r3, #1
 8000718:	62d3      	str	r3, [r2, #44]	; 0x2c
 800071a:	4b2d      	ldr	r3, [pc, #180]	; (80007d0 <SystemClock_Config+0xec>)
 800071c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <SystemClock_Config+0xf0>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a2a      	ldr	r2, [pc, #168]	; (80007d4 <SystemClock_Config+0xf0>)
 800072a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <SystemClock_Config+0xf0>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800073c:	bf00      	nop
 800073e:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <SystemClock_Config+0xf0>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800074a:	d1f8      	bne.n	800073e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800074c:	2301      	movs	r3, #1
 800074e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000754:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075a:	2302      	movs	r3, #2
 800075c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800075e:	2302      	movs	r3, #2
 8000760:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000762:	2340      	movs	r3, #64	; 0x40
 8000764:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000766:	2302      	movs	r3, #2
 8000768:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800076a:	2304      	movs	r3, #4
 800076c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800076e:	2302      	movs	r3, #2
 8000770:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000772:	230c      	movs	r3, #12
 8000774:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000776:	2300      	movs	r3, #0
 8000778:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000782:	4618      	mov	r0, r3
 8000784:	f004 f96c 	bl	8004a60 <HAL_RCC_OscConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800078e:	f000 fa67 	bl	8000c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000792:	233f      	movs	r3, #63	; 0x3f
 8000794:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000796:	2303      	movs	r3, #3
 8000798:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800079e:	2308      	movs	r3, #8
 80007a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007a2:	2340      	movs	r3, #64	; 0x40
 80007a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007a6:	2340      	movs	r3, #64	; 0x40
 80007a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007b0:	2340      	movs	r3, #64	; 0x40
 80007b2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2102      	movs	r1, #2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f004 fdab 	bl	8005314 <HAL_RCC_ClockConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80007c4:	f000 fa4c 	bl	8000c60 <Error_Handler>
  }
}
 80007c8:	bf00      	nop
 80007ca:	3770      	adds	r7, #112	; 0x70
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	58000400 	.word	0x58000400
 80007d4:	58024800 	.word	0x58024800

080007d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007dc:	4b27      	ldr	r3, [pc, #156]	; (800087c <MX_SPI2_Init+0xa4>)
 80007de:	4a28      	ldr	r2, [pc, #160]	; (8000880 <MX_SPI2_Init+0xa8>)
 80007e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007e2:	4b26      	ldr	r3, [pc, #152]	; (800087c <MX_SPI2_Init+0xa4>)
 80007e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007ea:	4b24      	ldr	r3, [pc, #144]	; (800087c <MX_SPI2_Init+0xa4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f0:	4b22      	ldr	r3, [pc, #136]	; (800087c <MX_SPI2_Init+0xa4>)
 80007f2:	2207      	movs	r2, #7
 80007f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_SPI2_Init+0xa4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007fc:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_SPI2_Init+0xa4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000802:	4b1e      	ldr	r3, [pc, #120]	; (800087c <MX_SPI2_Init+0xa4>)
 8000804:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000808:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_SPI2_Init+0xa4>)
 800080c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000810:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000812:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_SPI2_Init+0xa4>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_SPI2_Init+0xa4>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800081e:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_SPI2_Init+0xa4>)
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_SPI2_Init+0xa4>)
 8000826:	2200      	movs	r2, #0
 8000828:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_SPI2_Init+0xa4>)
 800082c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000830:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_SPI2_Init+0xa4>)
 8000834:	2200      	movs	r2, #0
 8000836:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000838:	4b10      	ldr	r3, [pc, #64]	; (800087c <MX_SPI2_Init+0xa4>)
 800083a:	2200      	movs	r2, #0
 800083c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_SPI2_Init+0xa4>)
 8000840:	2200      	movs	r2, #0
 8000842:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <MX_SPI2_Init+0xa4>)
 8000846:	2200      	movs	r2, #0
 8000848:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_SPI2_Init+0xa4>)
 800084c:	2200      	movs	r2, #0
 800084e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MX_SPI2_Init+0xa4>)
 8000852:	2200      	movs	r2, #0
 8000854:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_SPI2_Init+0xa4>)
 8000858:	2200      	movs	r2, #0
 800085a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <MX_SPI2_Init+0xa4>)
 800085e:	2200      	movs	r2, #0
 8000860:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_SPI2_Init+0xa4>)
 8000864:	2200      	movs	r2, #0
 8000866:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_SPI2_Init+0xa4>)
 800086a:	f006 ff4d 	bl	8007708 <HAL_SPI_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000874:	f000 f9f4 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	24000218 	.word	0x24000218
 8000880:	40003800 	.word	0x40003800

08000884 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000888:	4b23      	ldr	r3, [pc, #140]	; (8000918 <MX_UART8_Init+0x94>)
 800088a:	4a24      	ldr	r2, [pc, #144]	; (800091c <MX_UART8_Init+0x98>)
 800088c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 57600;
 800088e:	4b22      	ldr	r3, [pc, #136]	; (8000918 <MX_UART8_Init+0x94>)
 8000890:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000894:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_9B;
 8000896:	4b20      	ldr	r3, [pc, #128]	; (8000918 <MX_UART8_Init+0x94>)
 8000898:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800089c:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800089e:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <MX_UART8_Init+0x94>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_UART8_Init+0x94>)
 80008a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008aa:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_UART8_Init+0x94>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_UART8_Init+0x94>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_UART8_Init+0x94>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_UART8_Init+0x94>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_UART8_Init+0x94>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_UART8_Init+0x94>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80008d0:	4811      	ldr	r0, [pc, #68]	; (8000918 <MX_UART8_Init+0x94>)
 80008d2:	f007 ff8b 	bl	80087ec <HAL_UART_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_UART8_Init+0x5c>
  {
    Error_Handler();
 80008dc:	f000 f9c0 	bl	8000c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e0:	2100      	movs	r1, #0
 80008e2:	480d      	ldr	r0, [pc, #52]	; (8000918 <MX_UART8_Init+0x94>)
 80008e4:	f009 ff78 	bl	800a7d8 <HAL_UARTEx_SetTxFifoThreshold>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_UART8_Init+0x6e>
  {
    Error_Handler();
 80008ee:	f000 f9b7 	bl	8000c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4808      	ldr	r0, [pc, #32]	; (8000918 <MX_UART8_Init+0x94>)
 80008f6:	f009 ffad 	bl	800a854 <HAL_UARTEx_SetRxFifoThreshold>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_UART8_Init+0x80>
  {
    Error_Handler();
 8000900:	f000 f9ae 	bl	8000c60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_UART8_Init+0x94>)
 8000906:	f009 ff2e 	bl	800a766 <HAL_UARTEx_DisableFifoMode>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_UART8_Init+0x90>
  {
    Error_Handler();
 8000910:	f000 f9a6 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	240002a0 	.word	0x240002a0
 800091c:	40007c00 	.word	0x40007c00

08000920 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000924:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <MX_USART1_UART_Init+0x90>)
 8000926:	4a23      	ldr	r2, [pc, #140]	; (80009b4 <MX_USART1_UART_Init+0x94>)
 8000928:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800092a:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <MX_USART1_UART_Init+0x90>)
 800092c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000930:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <MX_USART1_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <MX_USART1_UART_Init+0x90>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <MX_USART1_UART_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_USART1_UART_Init+0x90>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <MX_USART1_UART_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_USART1_UART_Init+0x90>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <MX_USART1_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_USART1_UART_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000962:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <MX_USART1_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000968:	4811      	ldr	r0, [pc, #68]	; (80009b0 <MX_USART1_UART_Init+0x90>)
 800096a:	f007 ff3f 	bl	80087ec <HAL_UART_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000974:	f000 f974 	bl	8000c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000978:	2100      	movs	r1, #0
 800097a:	480d      	ldr	r0, [pc, #52]	; (80009b0 <MX_USART1_UART_Init+0x90>)
 800097c:	f009 ff2c 	bl	800a7d8 <HAL_UARTEx_SetTxFifoThreshold>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000986:	f000 f96b 	bl	8000c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098a:	2100      	movs	r1, #0
 800098c:	4808      	ldr	r0, [pc, #32]	; (80009b0 <MX_USART1_UART_Init+0x90>)
 800098e:	f009 ff61 	bl	800a854 <HAL_UARTEx_SetRxFifoThreshold>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000998:	f000 f962 	bl	8000c60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_USART1_UART_Init+0x90>)
 800099e:	f009 fee2 	bl	800a766 <HAL_UARTEx_DisableFifoMode>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009a8:	f000 f95a 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2400036c 	.word	0x2400036c
 80009b4:	40011000 	.word	0x40011000

080009b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009bc:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 80009be:	4a23      	ldr	r2, [pc, #140]	; (8000a4c <MX_USART2_UART_Init+0x94>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 80009c2:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 80009c4:	4a22      	ldr	r2, [pc, #136]	; (8000a50 <MX_USART2_UART_Init+0x98>)
 80009c6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009c8:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ce:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009da:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 80009dc:	220c      	movs	r2, #12
 80009de:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e0:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ec:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f8:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009fe:	4812      	ldr	r0, [pc, #72]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 8000a00:	f007 fef4 	bl	80087ec <HAL_UART_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000a0a:	f000 f929 	bl	8000c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 8000a12:	f009 fee1 	bl	800a7d8 <HAL_UARTEx_SetTxFifoThreshold>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8000a1c:	f000 f920 	bl	8000c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a20:	2100      	movs	r1, #0
 8000a22:	4809      	ldr	r0, [pc, #36]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 8000a24:	f009 ff16 	bl	800a854 <HAL_UARTEx_SetRxFifoThreshold>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8000a2e:	f000 f917 	bl	8000c60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 8000a34:	f009 fe97 	bl	800a766 <HAL_UARTEx_DisableFifoMode>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8000a3e:	f000 f90f 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	24000438 	.word	0x24000438
 8000a4c:	40004400 	.word	0x40004400
 8000a50:	001e8480 	.word	0x001e8480

08000a54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a5a:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <MX_DMA_Init+0x8c>)
 8000a5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a60:	4a1f      	ldr	r2, [pc, #124]	; (8000ae0 <MX_DMA_Init+0x8c>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <MX_DMA_Init+0x8c>)
 8000a6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2105      	movs	r1, #5
 8000a7c:	200b      	movs	r0, #11
 8000a7e:	f000 ff6d 	bl	800195c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a82:	200b      	movs	r0, #11
 8000a84:	f000 ff84 	bl	8001990 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2105      	movs	r1, #5
 8000a8c:	200c      	movs	r0, #12
 8000a8e:	f000 ff65 	bl	800195c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000a92:	200c      	movs	r0, #12
 8000a94:	f000 ff7c 	bl	8001990 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2105      	movs	r1, #5
 8000a9c:	200d      	movs	r0, #13
 8000a9e:	f000 ff5d 	bl	800195c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000aa2:	200d      	movs	r0, #13
 8000aa4:	f000 ff74 	bl	8001990 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2105      	movs	r1, #5
 8000aac:	200e      	movs	r0, #14
 8000aae:	f000 ff55 	bl	800195c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ab2:	200e      	movs	r0, #14
 8000ab4:	f000 ff6c 	bl	8001990 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2105      	movs	r1, #5
 8000abc:	200f      	movs	r0, #15
 8000abe:	f000 ff4d 	bl	800195c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000ac2:	200f      	movs	r0, #15
 8000ac4:	f000 ff64 	bl	8001990 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2105      	movs	r1, #5
 8000acc:	2010      	movs	r0, #16
 8000ace:	f000 ff45 	bl	800195c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ad2:	2010      	movs	r0, #16
 8000ad4:	f000 ff5c 	bl	8001990 <HAL_NVIC_EnableIRQ>

}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	58024400 	.word	0x58024400

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afa:	4b47      	ldr	r3, [pc, #284]	; (8000c18 <MX_GPIO_Init+0x134>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b00:	4a45      	ldr	r2, [pc, #276]	; (8000c18 <MX_GPIO_Init+0x134>)
 8000b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b0a:	4b43      	ldr	r3, [pc, #268]	; (8000c18 <MX_GPIO_Init+0x134>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4b3f      	ldr	r3, [pc, #252]	; (8000c18 <MX_GPIO_Init+0x134>)
 8000b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1e:	4a3e      	ldr	r2, [pc, #248]	; (8000c18 <MX_GPIO_Init+0x134>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b28:	4b3b      	ldr	r3, [pc, #236]	; (8000c18 <MX_GPIO_Init+0x134>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b36:	4b38      	ldr	r3, [pc, #224]	; (8000c18 <MX_GPIO_Init+0x134>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3c:	4a36      	ldr	r2, [pc, #216]	; (8000c18 <MX_GPIO_Init+0x134>)
 8000b3e:	f043 0310 	orr.w	r3, r3, #16
 8000b42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b46:	4b34      	ldr	r3, [pc, #208]	; (8000c18 <MX_GPIO_Init+0x134>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4c:	f003 0310 	and.w	r3, r3, #16
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b54:	4b30      	ldr	r3, [pc, #192]	; (8000c18 <MX_GPIO_Init+0x134>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5a:	4a2f      	ldr	r2, [pc, #188]	; (8000c18 <MX_GPIO_Init+0x134>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b64:	4b2c      	ldr	r3, [pc, #176]	; (8000c18 <MX_GPIO_Init+0x134>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b72:	4b29      	ldr	r3, [pc, #164]	; (8000c18 <MX_GPIO_Init+0x134>)
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b78:	4a27      	ldr	r2, [pc, #156]	; (8000c18 <MX_GPIO_Init+0x134>)
 8000b7a:	f043 0308 	orr.w	r3, r3, #8
 8000b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b82:	4b25      	ldr	r3, [pc, #148]	; (8000c18 <MX_GPIO_Init+0x134>)
 8000b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b88:	f003 0308 	and.w	r3, r3, #8
 8000b8c:	603b      	str	r3, [r7, #0]
 8000b8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 8000b96:	4821      	ldr	r0, [pc, #132]	; (8000c1c <MX_GPIO_Init+0x138>)
 8000b98:	f003 fef4 	bl	8004984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ba2:	481f      	ldr	r0, [pc, #124]	; (8000c20 <MX_GPIO_Init+0x13c>)
 8000ba4:	f003 feee 	bl	8004984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|LED_ACT_Pin|RS485_EN_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
 8000bae:	481d      	ldr	r0, [pc, #116]	; (8000c24 <MX_GPIO_Init+0x140>)
 8000bb0:	f003 fee8 	bl	8004984 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8000bb4:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4813      	ldr	r0, [pc, #76]	; (8000c1c <MX_GPIO_Init+0x138>)
 8000bce:	f003 fd29 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_IMU_Pin */
  GPIO_InitStruct.Pin = CS_IMU_Pin;
 8000bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_IMU_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	480d      	ldr	r0, [pc, #52]	; (8000c20 <MX_GPIO_Init+0x13c>)
 8000bec:	f003 fd1a 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 LED_ACT_Pin RS485_EN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|LED_ACT_Pin|RS485_EN_Pin;
 8000bf0:	f44f 430b 	mov.w	r3, #35584	; 0x8b00
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	4806      	ldr	r0, [pc, #24]	; (8000c24 <MX_GPIO_Init+0x140>)
 8000c0a:	f003 fd0b 	bl	8004624 <HAL_GPIO_Init>

}
 8000c0e:	bf00      	nop
 8000c10:	3728      	adds	r7, #40	; 0x28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	58024400 	.word	0x58024400
 8000c1c:	58021000 	.word	0x58021000
 8000c20:	58020400 	.word	0x58020400
 8000c24:	58020c00 	.word	0x58020c00

08000c28 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
//	  firmware_loop();
	  osDelay(1000);
 8000c30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c34:	f00a f845 	bl	800acc2 <osDelay>
 8000c38:	e7fa      	b.n	8000c30 <StartDefaultTask+0x8>
	...

08000c3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d101      	bne.n	8000c52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c4e:	f000 fd7d 	bl	800174c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40001000 	.word	0x40001000

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <Error_Handler+0x8>
	...

08000c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <HAL_MspInit+0x38>)
 8000c74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c78:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <HAL_MspInit+0x38>)
 8000c7a:	f043 0302 	orr.w	r3, r3, #2
 8000c7e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <HAL_MspInit+0x38>)
 8000c84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c88:	f003 0302 	and.w	r3, r3, #2
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c90:	2200      	movs	r2, #0
 8000c92:	210f      	movs	r1, #15
 8000c94:	f06f 0001 	mvn.w	r0, #1
 8000c98:	f000 fe60 	bl	800195c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	58024400 	.word	0x58024400

08000ca8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b0ba      	sub	sp, #232	; 0xe8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	22c0      	movs	r2, #192	; 0xc0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f00f ff44 	bl	8010b56 <memset>
  if(hspi->Instance==SPI2)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a26      	ldr	r2, [pc, #152]	; (8000d6c <HAL_SPI_MspInit+0xc4>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d145      	bne.n	8000d64 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000cd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	4618      	mov	r0, r3
 8000cee:	f004 fedf 	bl	8005ab0 <HAL_RCCEx_PeriphCLKConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000cf8:	f7ff ffb2 	bl	8000c60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <HAL_SPI_MspInit+0xc8>)
 8000cfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d02:	4a1b      	ldr	r2, [pc, #108]	; (8000d70 <HAL_SPI_MspInit+0xc8>)
 8000d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d08:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d0c:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <HAL_SPI_MspInit+0xc8>)
 8000d0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_SPI_MspInit+0xc8>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d20:	4a13      	ldr	r2, [pc, #76]	; (8000d70 <HAL_SPI_MspInit+0xc8>)
 8000d22:	f043 0302 	orr.w	r3, r3, #2
 8000d26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_SPI_MspInit+0xc8>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d30:	f003 0302 	and.w	r3, r3, #2
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d38:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d52:	2305      	movs	r3, #5
 8000d54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <HAL_SPI_MspInit+0xcc>)
 8000d60:	f003 fc60 	bl	8004624 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d64:	bf00      	nop
 8000d66:	37e8      	adds	r7, #232	; 0xe8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40003800 	.word	0x40003800
 8000d70:	58024400 	.word	0x58024400
 8000d74:	58020400 	.word	0x58020400

08000d78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b0be      	sub	sp, #248	; 0xf8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d90:	f107 0320 	add.w	r3, r7, #32
 8000d94:	22c0      	movs	r2, #192	; 0xc0
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f00f fedc 	bl	8010b56 <memset>
  if(huart->Instance==UART8)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4aaf      	ldr	r2, [pc, #700]	; (8001060 <HAL_UART_MspInit+0x2e8>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	f040 80aa 	bne.w	8000efe <HAL_UART_MspInit+0x186>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8000daa:	f04f 0202 	mov.w	r2, #2
 8000dae:	f04f 0300 	mov.w	r3, #0
 8000db2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dbc:	f107 0320 	add.w	r3, r7, #32
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f004 fe75 	bl	8005ab0 <HAL_RCCEx_PeriphCLKConfig>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8000dcc:	f7ff ff48 	bl	8000c60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8000dd0:	4ba4      	ldr	r3, [pc, #656]	; (8001064 <HAL_UART_MspInit+0x2ec>)
 8000dd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dd6:	4aa3      	ldr	r2, [pc, #652]	; (8001064 <HAL_UART_MspInit+0x2ec>)
 8000dd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ddc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000de0:	4ba0      	ldr	r3, [pc, #640]	; (8001064 <HAL_UART_MspInit+0x2ec>)
 8000de2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000de6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000dea:	61fb      	str	r3, [r7, #28]
 8000dec:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dee:	4b9d      	ldr	r3, [pc, #628]	; (8001064 <HAL_UART_MspInit+0x2ec>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df4:	4a9b      	ldr	r2, [pc, #620]	; (8001064 <HAL_UART_MspInit+0x2ec>)
 8000df6:	f043 0310 	orr.w	r3, r3, #16
 8000dfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dfe:	4b99      	ldr	r3, [pc, #612]	; (8001064 <HAL_UART_MspInit+0x2ec>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e04:	f003 0310 	and.w	r3, r3, #16
 8000e08:	61bb      	str	r3, [r7, #24]
 8000e0a:	69bb      	ldr	r3, [r7, #24]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000e24:	2308      	movs	r3, #8
 8000e26:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e2a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e2e:	4619      	mov	r1, r3
 8000e30:	488d      	ldr	r0, [pc, #564]	; (8001068 <HAL_UART_MspInit+0x2f0>)
 8000e32:	f003 fbf7 	bl	8004624 <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream2;
 8000e36:	4b8d      	ldr	r3, [pc, #564]	; (800106c <HAL_UART_MspInit+0x2f4>)
 8000e38:	4a8d      	ldr	r2, [pc, #564]	; (8001070 <HAL_UART_MspInit+0x2f8>)
 8000e3a:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8000e3c:	4b8b      	ldr	r3, [pc, #556]	; (800106c <HAL_UART_MspInit+0x2f4>)
 8000e3e:	2251      	movs	r2, #81	; 0x51
 8000e40:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e42:	4b8a      	ldr	r3, [pc, #552]	; (800106c <HAL_UART_MspInit+0x2f4>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e48:	4b88      	ldr	r3, [pc, #544]	; (800106c <HAL_UART_MspInit+0x2f4>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e4e:	4b87      	ldr	r3, [pc, #540]	; (800106c <HAL_UART_MspInit+0x2f4>)
 8000e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e54:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e56:	4b85      	ldr	r3, [pc, #532]	; (800106c <HAL_UART_MspInit+0x2f4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e5c:	4b83      	ldr	r3, [pc, #524]	; (800106c <HAL_UART_MspInit+0x2f4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8000e62:	4b82      	ldr	r3, [pc, #520]	; (800106c <HAL_UART_MspInit+0x2f4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e68:	4b80      	ldr	r3, [pc, #512]	; (800106c <HAL_UART_MspInit+0x2f4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e6e:	4b7f      	ldr	r3, [pc, #508]	; (800106c <HAL_UART_MspInit+0x2f4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8000e74:	487d      	ldr	r0, [pc, #500]	; (800106c <HAL_UART_MspInit+0x2f4>)
 8000e76:	f000 fd99 	bl	80019ac <HAL_DMA_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8000e80:	f7ff feee 	bl	8000c60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a79      	ldr	r2, [pc, #484]	; (800106c <HAL_UART_MspInit+0x2f4>)
 8000e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000e8c:	4a77      	ldr	r2, [pc, #476]	; (800106c <HAL_UART_MspInit+0x2f4>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART8_TX Init */
    hdma_uart8_tx.Instance = DMA1_Stream3;
 8000e92:	4b78      	ldr	r3, [pc, #480]	; (8001074 <HAL_UART_MspInit+0x2fc>)
 8000e94:	4a78      	ldr	r2, [pc, #480]	; (8001078 <HAL_UART_MspInit+0x300>)
 8000e96:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8000e98:	4b76      	ldr	r3, [pc, #472]	; (8001074 <HAL_UART_MspInit+0x2fc>)
 8000e9a:	2252      	movs	r2, #82	; 0x52
 8000e9c:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e9e:	4b75      	ldr	r3, [pc, #468]	; (8001074 <HAL_UART_MspInit+0x2fc>)
 8000ea0:	2240      	movs	r2, #64	; 0x40
 8000ea2:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ea4:	4b73      	ldr	r3, [pc, #460]	; (8001074 <HAL_UART_MspInit+0x2fc>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000eaa:	4b72      	ldr	r3, [pc, #456]	; (8001074 <HAL_UART_MspInit+0x2fc>)
 8000eac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eb0:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eb2:	4b70      	ldr	r3, [pc, #448]	; (8001074 <HAL_UART_MspInit+0x2fc>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eb8:	4b6e      	ldr	r3, [pc, #440]	; (8001074 <HAL_UART_MspInit+0x2fc>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8000ebe:	4b6d      	ldr	r3, [pc, #436]	; (8001074 <HAL_UART_MspInit+0x2fc>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ec4:	4b6b      	ldr	r3, [pc, #428]	; (8001074 <HAL_UART_MspInit+0x2fc>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eca:	4b6a      	ldr	r3, [pc, #424]	; (8001074 <HAL_UART_MspInit+0x2fc>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8000ed0:	4868      	ldr	r0, [pc, #416]	; (8001074 <HAL_UART_MspInit+0x2fc>)
 8000ed2:	f000 fd6b 	bl	80019ac <HAL_DMA_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8000edc:	f7ff fec0 	bl	8000c60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a64      	ldr	r2, [pc, #400]	; (8001074 <HAL_UART_MspInit+0x2fc>)
 8000ee4:	67da      	str	r2, [r3, #124]	; 0x7c
 8000ee6:	4a63      	ldr	r2, [pc, #396]	; (8001074 <HAL_UART_MspInit+0x2fc>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2105      	movs	r1, #5
 8000ef0:	2053      	movs	r0, #83	; 0x53
 8000ef2:	f000 fd33 	bl	800195c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8000ef6:	2053      	movs	r0, #83	; 0x53
 8000ef8:	f000 fd4a 	bl	8001990 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000efc:	e179      	b.n	80011f2 <HAL_UART_MspInit+0x47a>
  else if(huart->Instance==USART1)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a5e      	ldr	r2, [pc, #376]	; (800107c <HAL_UART_MspInit+0x304>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	f040 80c5 	bne.w	8001094 <HAL_UART_MspInit+0x31c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f0a:	f04f 0201 	mov.w	r2, #1
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f1c:	f107 0320 	add.w	r3, r7, #32
 8000f20:	4618      	mov	r0, r3
 8000f22:	f004 fdc5 	bl	8005ab0 <HAL_RCCEx_PeriphCLKConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8000f2c:	f7ff fe98 	bl	8000c60 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f30:	4b4c      	ldr	r3, [pc, #304]	; (8001064 <HAL_UART_MspInit+0x2ec>)
 8000f32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f36:	4a4b      	ldr	r2, [pc, #300]	; (8001064 <HAL_UART_MspInit+0x2ec>)
 8000f38:	f043 0310 	orr.w	r3, r3, #16
 8000f3c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f40:	4b48      	ldr	r3, [pc, #288]	; (8001064 <HAL_UART_MspInit+0x2ec>)
 8000f42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f46:	f003 0310 	and.w	r3, r3, #16
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b45      	ldr	r3, [pc, #276]	; (8001064 <HAL_UART_MspInit+0x2ec>)
 8000f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f54:	4a43      	ldr	r2, [pc, #268]	; (8001064 <HAL_UART_MspInit+0x2ec>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f5e:	4b41      	ldr	r3, [pc, #260]	; (8001064 <HAL_UART_MspInit+0x2ec>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f6c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f86:	2307      	movs	r3, #7
 8000f88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f90:	4619      	mov	r1, r3
 8000f92:	483b      	ldr	r0, [pc, #236]	; (8001080 <HAL_UART_MspInit+0x308>)
 8000f94:	f003 fb46 	bl	8004624 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8000f98:	4b3a      	ldr	r3, [pc, #232]	; (8001084 <HAL_UART_MspInit+0x30c>)
 8000f9a:	4a3b      	ldr	r2, [pc, #236]	; (8001088 <HAL_UART_MspInit+0x310>)
 8000f9c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000f9e:	4b39      	ldr	r3, [pc, #228]	; (8001084 <HAL_UART_MspInit+0x30c>)
 8000fa0:	2229      	movs	r2, #41	; 0x29
 8000fa2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fa4:	4b37      	ldr	r3, [pc, #220]	; (8001084 <HAL_UART_MspInit+0x30c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000faa:	4b36      	ldr	r3, [pc, #216]	; (8001084 <HAL_UART_MspInit+0x30c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fb0:	4b34      	ldr	r3, [pc, #208]	; (8001084 <HAL_UART_MspInit+0x30c>)
 8000fb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fb6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fb8:	4b32      	ldr	r3, [pc, #200]	; (8001084 <HAL_UART_MspInit+0x30c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fbe:	4b31      	ldr	r3, [pc, #196]	; (8001084 <HAL_UART_MspInit+0x30c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000fc4:	4b2f      	ldr	r3, [pc, #188]	; (8001084 <HAL_UART_MspInit+0x30c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fca:	4b2e      	ldr	r3, [pc, #184]	; (8001084 <HAL_UART_MspInit+0x30c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fd0:	4b2c      	ldr	r3, [pc, #176]	; (8001084 <HAL_UART_MspInit+0x30c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000fd6:	482b      	ldr	r0, [pc, #172]	; (8001084 <HAL_UART_MspInit+0x30c>)
 8000fd8:	f000 fce8 	bl	80019ac <HAL_DMA_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_UART_MspInit+0x26e>
      Error_Handler();
 8000fe2:	f7ff fe3d 	bl	8000c60 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a26      	ldr	r2, [pc, #152]	; (8001084 <HAL_UART_MspInit+0x30c>)
 8000fea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000fee:	4a25      	ldr	r2, [pc, #148]	; (8001084 <HAL_UART_MspInit+0x30c>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8000ff4:	4b25      	ldr	r3, [pc, #148]	; (800108c <HAL_UART_MspInit+0x314>)
 8000ff6:	4a26      	ldr	r2, [pc, #152]	; (8001090 <HAL_UART_MspInit+0x318>)
 8000ff8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000ffa:	4b24      	ldr	r3, [pc, #144]	; (800108c <HAL_UART_MspInit+0x314>)
 8000ffc:	222a      	movs	r2, #42	; 0x2a
 8000ffe:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001000:	4b22      	ldr	r3, [pc, #136]	; (800108c <HAL_UART_MspInit+0x314>)
 8001002:	2240      	movs	r2, #64	; 0x40
 8001004:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <HAL_UART_MspInit+0x314>)
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800100c:	4b1f      	ldr	r3, [pc, #124]	; (800108c <HAL_UART_MspInit+0x314>)
 800100e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001012:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001014:	4b1d      	ldr	r3, [pc, #116]	; (800108c <HAL_UART_MspInit+0x314>)
 8001016:	2200      	movs	r2, #0
 8001018:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <HAL_UART_MspInit+0x314>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <HAL_UART_MspInit+0x314>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <HAL_UART_MspInit+0x314>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <HAL_UART_MspInit+0x314>)
 800102e:	2200      	movs	r2, #0
 8001030:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001032:	4816      	ldr	r0, [pc, #88]	; (800108c <HAL_UART_MspInit+0x314>)
 8001034:	f000 fcba 	bl	80019ac <HAL_DMA_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_UART_MspInit+0x2ca>
      Error_Handler();
 800103e:	f7ff fe0f 	bl	8000c60 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a11      	ldr	r2, [pc, #68]	; (800108c <HAL_UART_MspInit+0x314>)
 8001046:	67da      	str	r2, [r3, #124]	; 0x7c
 8001048:	4a10      	ldr	r2, [pc, #64]	; (800108c <HAL_UART_MspInit+0x314>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2105      	movs	r1, #5
 8001052:	2025      	movs	r0, #37	; 0x25
 8001054:	f000 fc82 	bl	800195c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001058:	2025      	movs	r0, #37	; 0x25
 800105a:	f000 fc99 	bl	8001990 <HAL_NVIC_EnableIRQ>
}
 800105e:	e0c8      	b.n	80011f2 <HAL_UART_MspInit+0x47a>
 8001060:	40007c00 	.word	0x40007c00
 8001064:	58024400 	.word	0x58024400
 8001068:	58021000 	.word	0x58021000
 800106c:	24000504 	.word	0x24000504
 8001070:	40020040 	.word	0x40020040
 8001074:	2400057c 	.word	0x2400057c
 8001078:	40020058 	.word	0x40020058
 800107c:	40011000 	.word	0x40011000
 8001080:	58020000 	.word	0x58020000
 8001084:	240005f4 	.word	0x240005f4
 8001088:	40020010 	.word	0x40020010
 800108c:	2400066c 	.word	0x2400066c
 8001090:	40020028 	.word	0x40020028
  else if(huart->Instance==USART2)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a58      	ldr	r2, [pc, #352]	; (80011fc <HAL_UART_MspInit+0x484>)
 800109a:	4293      	cmp	r3, r2
 800109c:	f040 80a9 	bne.w	80011f2 <HAL_UART_MspInit+0x47a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010a0:	f04f 0202 	mov.w	r2, #2
 80010a4:	f04f 0300 	mov.w	r3, #0
 80010a8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b2:	f107 0320 	add.w	r3, r7, #32
 80010b6:	4618      	mov	r0, r3
 80010b8:	f004 fcfa 	bl	8005ab0 <HAL_RCCEx_PeriphCLKConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_UART_MspInit+0x34e>
      Error_Handler();
 80010c2:	f7ff fdcd 	bl	8000c60 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010c6:	4b4e      	ldr	r3, [pc, #312]	; (8001200 <HAL_UART_MspInit+0x488>)
 80010c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010cc:	4a4c      	ldr	r2, [pc, #304]	; (8001200 <HAL_UART_MspInit+0x488>)
 80010ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010d6:	4b4a      	ldr	r3, [pc, #296]	; (8001200 <HAL_UART_MspInit+0x488>)
 80010d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e4:	4b46      	ldr	r3, [pc, #280]	; (8001200 <HAL_UART_MspInit+0x488>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ea:	4a45      	ldr	r2, [pc, #276]	; (8001200 <HAL_UART_MspInit+0x488>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f4:	4b42      	ldr	r3, [pc, #264]	; (8001200 <HAL_UART_MspInit+0x488>)
 80010f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001102:	230c      	movs	r3, #12
 8001104:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800111a:	2307      	movs	r3, #7
 800111c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001124:	4619      	mov	r1, r3
 8001126:	4837      	ldr	r0, [pc, #220]	; (8001204 <HAL_UART_MspInit+0x48c>)
 8001128:	f003 fa7c 	bl	8004624 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream4;
 800112c:	4b36      	ldr	r3, [pc, #216]	; (8001208 <HAL_UART_MspInit+0x490>)
 800112e:	4a37      	ldr	r2, [pc, #220]	; (800120c <HAL_UART_MspInit+0x494>)
 8001130:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001132:	4b35      	ldr	r3, [pc, #212]	; (8001208 <HAL_UART_MspInit+0x490>)
 8001134:	222b      	movs	r2, #43	; 0x2b
 8001136:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001138:	4b33      	ldr	r3, [pc, #204]	; (8001208 <HAL_UART_MspInit+0x490>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800113e:	4b32      	ldr	r3, [pc, #200]	; (8001208 <HAL_UART_MspInit+0x490>)
 8001140:	2200      	movs	r2, #0
 8001142:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001144:	4b30      	ldr	r3, [pc, #192]	; (8001208 <HAL_UART_MspInit+0x490>)
 8001146:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800114a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800114c:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <HAL_UART_MspInit+0x490>)
 800114e:	2200      	movs	r2, #0
 8001150:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001152:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <HAL_UART_MspInit+0x490>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001158:	4b2b      	ldr	r3, [pc, #172]	; (8001208 <HAL_UART_MspInit+0x490>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800115e:	4b2a      	ldr	r3, [pc, #168]	; (8001208 <HAL_UART_MspInit+0x490>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001164:	4b28      	ldr	r3, [pc, #160]	; (8001208 <HAL_UART_MspInit+0x490>)
 8001166:	2200      	movs	r2, #0
 8001168:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800116a:	4827      	ldr	r0, [pc, #156]	; (8001208 <HAL_UART_MspInit+0x490>)
 800116c:	f000 fc1e 	bl	80019ac <HAL_DMA_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_UART_MspInit+0x402>
      Error_Handler();
 8001176:	f7ff fd73 	bl	8000c60 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a22      	ldr	r2, [pc, #136]	; (8001208 <HAL_UART_MspInit+0x490>)
 800117e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001182:	4a21      	ldr	r2, [pc, #132]	; (8001208 <HAL_UART_MspInit+0x490>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream5;
 8001188:	4b21      	ldr	r3, [pc, #132]	; (8001210 <HAL_UART_MspInit+0x498>)
 800118a:	4a22      	ldr	r2, [pc, #136]	; (8001214 <HAL_UART_MspInit+0x49c>)
 800118c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <HAL_UART_MspInit+0x498>)
 8001190:	222c      	movs	r2, #44	; 0x2c
 8001192:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001194:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <HAL_UART_MspInit+0x498>)
 8001196:	2240      	movs	r2, #64	; 0x40
 8001198:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800119a:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <HAL_UART_MspInit+0x498>)
 800119c:	2200      	movs	r2, #0
 800119e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011a0:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <HAL_UART_MspInit+0x498>)
 80011a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011a6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011a8:	4b19      	ldr	r3, [pc, #100]	; (8001210 <HAL_UART_MspInit+0x498>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <HAL_UART_MspInit+0x498>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <HAL_UART_MspInit+0x498>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_UART_MspInit+0x498>)
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <HAL_UART_MspInit+0x498>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80011c6:	4812      	ldr	r0, [pc, #72]	; (8001210 <HAL_UART_MspInit+0x498>)
 80011c8:	f000 fbf0 	bl	80019ac <HAL_DMA_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_UART_MspInit+0x45e>
      Error_Handler();
 80011d2:	f7ff fd45 	bl	8000c60 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a0d      	ldr	r2, [pc, #52]	; (8001210 <HAL_UART_MspInit+0x498>)
 80011da:	67da      	str	r2, [r3, #124]	; 0x7c
 80011dc:	4a0c      	ldr	r2, [pc, #48]	; (8001210 <HAL_UART_MspInit+0x498>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2105      	movs	r1, #5
 80011e6:	2026      	movs	r0, #38	; 0x26
 80011e8:	f000 fbb8 	bl	800195c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011ec:	2026      	movs	r0, #38	; 0x26
 80011ee:	f000 fbcf 	bl	8001990 <HAL_NVIC_EnableIRQ>
}
 80011f2:	bf00      	nop
 80011f4:	37f8      	adds	r7, #248	; 0xf8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40004400 	.word	0x40004400
 8001200:	58024400 	.word	0x58024400
 8001204:	58020000 	.word	0x58020000
 8001208:	240006e4 	.word	0x240006e4
 800120c:	40020070 	.word	0x40020070
 8001210:	2400075c 	.word	0x2400075c
 8001214:	40020088 	.word	0x40020088

08001218 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b090      	sub	sp, #64	; 0x40
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b0f      	cmp	r3, #15
 8001224:	d827      	bhi.n	8001276 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001226:	2200      	movs	r2, #0
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	2036      	movs	r0, #54	; 0x36
 800122c:	f000 fb96 	bl	800195c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001230:	2036      	movs	r0, #54	; 0x36
 8001232:	f000 fbad 	bl	8001990 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001236:	4a29      	ldr	r2, [pc, #164]	; (80012dc <HAL_InitTick+0xc4>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800123c:	4b28      	ldr	r3, [pc, #160]	; (80012e0 <HAL_InitTick+0xc8>)
 800123e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001242:	4a27      	ldr	r2, [pc, #156]	; (80012e0 <HAL_InitTick+0xc8>)
 8001244:	f043 0310 	orr.w	r3, r3, #16
 8001248:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800124c:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <HAL_InitTick+0xc8>)
 800124e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800125a:	f107 0210 	add.w	r2, r7, #16
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f004 fbe1 	bl	8005a2c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800126a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800126c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800126e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001270:	2b00      	cmp	r3, #0
 8001272:	d106      	bne.n	8001282 <HAL_InitTick+0x6a>
 8001274:	e001      	b.n	800127a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e02b      	b.n	80012d2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800127a:	f004 fbab 	bl	80059d4 <HAL_RCC_GetPCLK1Freq>
 800127e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001280:	e004      	b.n	800128c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001282:	f004 fba7 	bl	80059d4 <HAL_RCC_GetPCLK1Freq>
 8001286:	4603      	mov	r3, r0
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800128c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800128e:	4a15      	ldr	r2, [pc, #84]	; (80012e4 <HAL_InitTick+0xcc>)
 8001290:	fba2 2303 	umull	r2, r3, r2, r3
 8001294:	0c9b      	lsrs	r3, r3, #18
 8001296:	3b01      	subs	r3, #1
 8001298:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <HAL_InitTick+0xd0>)
 800129c:	4a13      	ldr	r2, [pc, #76]	; (80012ec <HAL_InitTick+0xd4>)
 800129e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <HAL_InitTick+0xd0>)
 80012a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012a6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012a8:	4a0f      	ldr	r2, [pc, #60]	; (80012e8 <HAL_InitTick+0xd0>)
 80012aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ac:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <HAL_InitTick+0xd0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <HAL_InitTick+0xd0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80012ba:	480b      	ldr	r0, [pc, #44]	; (80012e8 <HAL_InitTick+0xd0>)
 80012bc:	f006 ffbd 	bl	800823a <HAL_TIM_Base_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d104      	bne.n	80012d0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80012c6:	4808      	ldr	r0, [pc, #32]	; (80012e8 <HAL_InitTick+0xd0>)
 80012c8:	f007 f818 	bl	80082fc <HAL_TIM_Base_Start_IT>
 80012cc:	4603      	mov	r3, r0
 80012ce:	e000      	b.n	80012d2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3740      	adds	r7, #64	; 0x40
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	24000008 	.word	0x24000008
 80012e0:	58024400 	.word	0x58024400
 80012e4:	431bde83 	.word	0x431bde83
 80012e8:	240007d8 	.word	0x240007d8
 80012ec:	40001000 	.word	0x40001000

080012f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <NMI_Handler+0x4>

080012f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fa:	e7fe      	b.n	80012fa <HardFault_Handler+0x4>

080012fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <MemManage_Handler+0x4>

08001302 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001306:	e7fe      	b.n	8001306 <BusFault_Handler+0x4>

08001308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800130c:	e7fe      	b.n	800130c <UsageFault_Handler+0x4>

0800130e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <DMA1_Stream0_IRQHandler+0x10>)
 8001322:	f001 fe6d 	bl	8003000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	240005f4 	.word	0x240005f4

08001330 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <DMA1_Stream1_IRQHandler+0x10>)
 8001336:	f001 fe63 	bl	8003000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2400066c 	.word	0x2400066c

08001344 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <DMA1_Stream2_IRQHandler+0x10>)
 800134a:	f001 fe59 	bl	8003000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	24000504 	.word	0x24000504

08001358 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <DMA1_Stream3_IRQHandler+0x10>)
 800135e:	f001 fe4f 	bl	8003000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	2400057c 	.word	0x2400057c

0800136c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <DMA1_Stream4_IRQHandler+0x10>)
 8001372:	f001 fe45 	bl	8003000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	240006e4 	.word	0x240006e4

08001380 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <DMA1_Stream5_IRQHandler+0x10>)
 8001386:	f001 fe3b 	bl	8003000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	2400075c 	.word	0x2400075c

08001394 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <USART1_IRQHandler+0x10>)
 800139a:	f007 fb45 	bl	8008a28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2400036c 	.word	0x2400036c

080013a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <USART2_IRQHandler+0x10>)
 80013ae:	f007 fb3b 	bl	8008a28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	24000438 	.word	0x24000438

080013bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <TIM6_DAC_IRQHandler+0x10>)
 80013c2:	f007 f813 	bl	80083ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	240007d8 	.word	0x240007d8

080013d0 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80013d4:	4802      	ldr	r0, [pc, #8]	; (80013e0 <UART8_IRQHandler+0x10>)
 80013d6:	f007 fb27 	bl	8008a28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	240002a0 	.word	0x240002a0

080013e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return 1;
 80013e8:	2301      	movs	r3, #1
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <_kill>:

int _kill(int pid, int sig)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013fe:	f00f fa79 	bl	80108f4 <__errno>
 8001402:	4603      	mov	r3, r0
 8001404:	2216      	movs	r2, #22
 8001406:	601a      	str	r2, [r3, #0]
  return -1;
 8001408:	f04f 33ff 	mov.w	r3, #4294967295
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <_exit>:

void _exit (int status)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800141c:	f04f 31ff 	mov.w	r1, #4294967295
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff ffe7 	bl	80013f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001426:	e7fe      	b.n	8001426 <_exit+0x12>

08001428 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	e00a      	b.n	8001450 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800143a:	f3af 8000 	nop.w
 800143e:	4601      	mov	r1, r0
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	60ba      	str	r2, [r7, #8]
 8001446:	b2ca      	uxtb	r2, r1
 8001448:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	3301      	adds	r3, #1
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	429a      	cmp	r2, r3
 8001456:	dbf0      	blt.n	800143a <_read+0x12>
  }

  return len;
 8001458:	687b      	ldr	r3, [r7, #4]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b086      	sub	sp, #24
 8001466:	af00      	add	r7, sp, #0
 8001468:	60f8      	str	r0, [r7, #12]
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	e009      	b.n	8001488 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	60ba      	str	r2, [r7, #8]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	3301      	adds	r3, #1
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	429a      	cmp	r2, r3
 800148e:	dbf1      	blt.n	8001474 <_write+0x12>
  }
  return len;
 8001490:	687b      	ldr	r3, [r7, #4]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <_close>:

int _close(int file)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014c2:	605a      	str	r2, [r3, #4]
  return 0;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <_isatty>:

int _isatty(int file)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014da:	2301      	movs	r3, #1
}
 80014dc:	4618      	mov	r0, r3
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800150c:	4a14      	ldr	r2, [pc, #80]	; (8001560 <_sbrk+0x5c>)
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <_sbrk+0x60>)
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001518:	4b13      	ldr	r3, [pc, #76]	; (8001568 <_sbrk+0x64>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d102      	bne.n	8001526 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <_sbrk+0x64>)
 8001522:	4a12      	ldr	r2, [pc, #72]	; (800156c <_sbrk+0x68>)
 8001524:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <_sbrk+0x64>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4413      	add	r3, r2
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	429a      	cmp	r2, r3
 8001532:	d207      	bcs.n	8001544 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001534:	f00f f9de 	bl	80108f4 <__errno>
 8001538:	4603      	mov	r3, r0
 800153a:	220c      	movs	r2, #12
 800153c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
 8001542:	e009      	b.n	8001558 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <_sbrk+0x64>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800154a:	4b07      	ldr	r3, [pc, #28]	; (8001568 <_sbrk+0x64>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	4a05      	ldr	r2, [pc, #20]	; (8001568 <_sbrk+0x64>)
 8001554:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001556:	68fb      	ldr	r3, [r7, #12]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	24080000 	.word	0x24080000
 8001564:	00000400 	.word	0x00000400
 8001568:	24000824 	.word	0x24000824
 800156c:	2400c7e8 	.word	0x2400c7e8

08001570 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001574:	4b37      	ldr	r3, [pc, #220]	; (8001654 <SystemInit+0xe4>)
 8001576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800157a:	4a36      	ldr	r2, [pc, #216]	; (8001654 <SystemInit+0xe4>)
 800157c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001584:	4b34      	ldr	r3, [pc, #208]	; (8001658 <SystemInit+0xe8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 030f 	and.w	r3, r3, #15
 800158c:	2b06      	cmp	r3, #6
 800158e:	d807      	bhi.n	80015a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001590:	4b31      	ldr	r3, [pc, #196]	; (8001658 <SystemInit+0xe8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f023 030f 	bic.w	r3, r3, #15
 8001598:	4a2f      	ldr	r2, [pc, #188]	; (8001658 <SystemInit+0xe8>)
 800159a:	f043 0307 	orr.w	r3, r3, #7
 800159e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80015a0:	4b2e      	ldr	r3, [pc, #184]	; (800165c <SystemInit+0xec>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a2d      	ldr	r2, [pc, #180]	; (800165c <SystemInit+0xec>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015ac:	4b2b      	ldr	r3, [pc, #172]	; (800165c <SystemInit+0xec>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015b2:	4b2a      	ldr	r3, [pc, #168]	; (800165c <SystemInit+0xec>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4929      	ldr	r1, [pc, #164]	; (800165c <SystemInit+0xec>)
 80015b8:	4b29      	ldr	r3, [pc, #164]	; (8001660 <SystemInit+0xf0>)
 80015ba:	4013      	ands	r3, r2
 80015bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015be:	4b26      	ldr	r3, [pc, #152]	; (8001658 <SystemInit+0xe8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d007      	beq.n	80015da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015ca:	4b23      	ldr	r3, [pc, #140]	; (8001658 <SystemInit+0xe8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f023 030f 	bic.w	r3, r3, #15
 80015d2:	4a21      	ldr	r2, [pc, #132]	; (8001658 <SystemInit+0xe8>)
 80015d4:	f043 0307 	orr.w	r3, r3, #7
 80015d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015da:	4b20      	ldr	r3, [pc, #128]	; (800165c <SystemInit+0xec>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015e0:	4b1e      	ldr	r3, [pc, #120]	; (800165c <SystemInit+0xec>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015e6:	4b1d      	ldr	r3, [pc, #116]	; (800165c <SystemInit+0xec>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <SystemInit+0xec>)
 80015ee:	4a1d      	ldr	r2, [pc, #116]	; (8001664 <SystemInit+0xf4>)
 80015f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <SystemInit+0xec>)
 80015f4:	4a1c      	ldr	r2, [pc, #112]	; (8001668 <SystemInit+0xf8>)
 80015f6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <SystemInit+0xec>)
 80015fa:	4a1c      	ldr	r2, [pc, #112]	; (800166c <SystemInit+0xfc>)
 80015fc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <SystemInit+0xec>)
 8001600:	2200      	movs	r2, #0
 8001602:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <SystemInit+0xec>)
 8001606:	4a19      	ldr	r2, [pc, #100]	; (800166c <SystemInit+0xfc>)
 8001608:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <SystemInit+0xec>)
 800160c:	2200      	movs	r2, #0
 800160e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <SystemInit+0xec>)
 8001612:	4a16      	ldr	r2, [pc, #88]	; (800166c <SystemInit+0xfc>)
 8001614:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <SystemInit+0xec>)
 8001618:	2200      	movs	r2, #0
 800161a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <SystemInit+0xec>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0e      	ldr	r2, [pc, #56]	; (800165c <SystemInit+0xec>)
 8001622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001626:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <SystemInit+0xec>)
 800162a:	2200      	movs	r2, #0
 800162c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <SystemInit+0x100>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <SystemInit+0x104>)
 8001634:	4013      	ands	r3, r2
 8001636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800163a:	d202      	bcs.n	8001642 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <SystemInit+0x108>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <SystemInit+0x10c>)
 8001644:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001648:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00
 8001658:	52002000 	.word	0x52002000
 800165c:	58024400 	.word	0x58024400
 8001660:	eaf6ed7f 	.word	0xeaf6ed7f
 8001664:	02020200 	.word	0x02020200
 8001668:	01ff0000 	.word	0x01ff0000
 800166c:	01010280 	.word	0x01010280
 8001670:	5c001000 	.word	0x5c001000
 8001674:	ffff0000 	.word	0xffff0000
 8001678:	51008108 	.word	0x51008108
 800167c:	52004000 	.word	0x52004000

08001680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001684:	f7ff ff74 	bl	8001570 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001688:	480c      	ldr	r0, [pc, #48]	; (80016bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800168a:	490d      	ldr	r1, [pc, #52]	; (80016c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800168c:	4a0d      	ldr	r2, [pc, #52]	; (80016c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001690:	e002      	b.n	8001698 <LoopCopyDataInit>

08001692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001696:	3304      	adds	r3, #4

08001698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800169c:	d3f9      	bcc.n	8001692 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016a0:	4c0a      	ldr	r4, [pc, #40]	; (80016cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a4:	e001      	b.n	80016aa <LoopFillZerobss>

080016a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a8:	3204      	adds	r2, #4

080016aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ac:	d3fb      	bcc.n	80016a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ae:	f00f fa1d 	bl	8010aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016b2:	f7fe ffef 	bl	8000694 <main>
  bx  lr
 80016b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016c0:	240001fc 	.word	0x240001fc
  ldr r2, =_sidata
 80016c4:	08013870 	.word	0x08013870
  ldr r2, =_sbss
 80016c8:	240001fc 	.word	0x240001fc
  ldr r4, =_ebss
 80016cc:	2400c7e8 	.word	0x2400c7e8

080016d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d0:	e7fe      	b.n	80016d0 <ADC3_IRQHandler>
	...

080016d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016da:	2003      	movs	r0, #3
 80016dc:	f000 f933 	bl	8001946 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016e0:	f003 ffce 	bl	8005680 <HAL_RCC_GetSysClockFreq>
 80016e4:	4602      	mov	r2, r0
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_Init+0x68>)
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	0a1b      	lsrs	r3, r3, #8
 80016ec:	f003 030f 	and.w	r3, r3, #15
 80016f0:	4913      	ldr	r1, [pc, #76]	; (8001740 <HAL_Init+0x6c>)
 80016f2:	5ccb      	ldrb	r3, [r1, r3]
 80016f4:	f003 031f 	and.w	r3, r3, #31
 80016f8:	fa22 f303 	lsr.w	r3, r2, r3
 80016fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <HAL_Init+0x68>)
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <HAL_Init+0x6c>)
 8001708:	5cd3      	ldrb	r3, [r2, r3]
 800170a:	f003 031f 	and.w	r3, r3, #31
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	fa22 f303 	lsr.w	r3, r2, r3
 8001714:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <HAL_Init+0x70>)
 8001716:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001718:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <HAL_Init+0x74>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800171e:	200f      	movs	r0, #15
 8001720:	f7ff fd7a 	bl	8001218 <HAL_InitTick>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e002      	b.n	8001734 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800172e:	f7ff fa9d 	bl	8000c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	58024400 	.word	0x58024400
 8001740:	080133ac 	.word	0x080133ac
 8001744:	24000004 	.word	0x24000004
 8001748:	24000000 	.word	0x24000000

0800174c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_IncTick+0x20>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x24>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <HAL_IncTick+0x24>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	2400000c 	.word	0x2400000c
 8001770:	24000828 	.word	0x24000828

08001774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <HAL_GetTick+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	24000828 	.word	0x24000828

0800178c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001794:	f7ff ffee 	bl	8001774 <HAL_GetTick>
 8001798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a4:	d005      	beq.n	80017b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_Delay+0x44>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017b2:	bf00      	nop
 80017b4:	f7ff ffde 	bl	8001774 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d8f7      	bhi.n	80017b4 <HAL_Delay+0x28>
  {
  }
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	2400000c 	.word	0x2400000c

080017d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <HAL_GetREVID+0x14>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	0c1b      	lsrs	r3, r3, #16
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	5c001000 	.word	0x5c001000

080017ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <__NVIC_SetPriorityGrouping+0x40>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001808:	4013      	ands	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 8001816:	4313      	orrs	r3, r2
 8001818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181a:	4a04      	ldr	r2, [pc, #16]	; (800182c <__NVIC_SetPriorityGrouping+0x40>)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	60d3      	str	r3, [r2, #12]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00
 8001830:	05fa0000 	.word	0x05fa0000

08001834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <__NVIC_GetPriorityGrouping+0x18>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	0a1b      	lsrs	r3, r3, #8
 800183e:	f003 0307 	and.w	r3, r3, #7
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800185a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185e:	2b00      	cmp	r3, #0
 8001860:	db0b      	blt.n	800187a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	f003 021f 	and.w	r2, r3, #31
 8001868:	4907      	ldr	r1, [pc, #28]	; (8001888 <__NVIC_EnableIRQ+0x38>)
 800186a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	2001      	movs	r0, #1
 8001872:	fa00 f202 	lsl.w	r2, r0, r2
 8001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000e100 	.word	0xe000e100

0800188c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001898:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800189c:	2b00      	cmp	r3, #0
 800189e:	db0a      	blt.n	80018b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	490c      	ldr	r1, [pc, #48]	; (80018d8 <__NVIC_SetPriority+0x4c>)
 80018a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018aa:	0112      	lsls	r2, r2, #4
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	440b      	add	r3, r1
 80018b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b4:	e00a      	b.n	80018cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4908      	ldr	r1, [pc, #32]	; (80018dc <__NVIC_SetPriority+0x50>)
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	3b04      	subs	r3, #4
 80018c4:	0112      	lsls	r2, r2, #4
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	440b      	add	r3, r1
 80018ca:	761a      	strb	r2, [r3, #24]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000e100 	.word	0xe000e100
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	; 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f1c3 0307 	rsb	r3, r3, #7
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	bf28      	it	cs
 80018fe:	2304      	movcs	r3, #4
 8001900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3304      	adds	r3, #4
 8001906:	2b06      	cmp	r3, #6
 8001908:	d902      	bls.n	8001910 <NVIC_EncodePriority+0x30>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3b03      	subs	r3, #3
 800190e:	e000      	b.n	8001912 <NVIC_EncodePriority+0x32>
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	f04f 32ff 	mov.w	r2, #4294967295
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	401a      	ands	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	43d9      	mvns	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	4313      	orrs	r3, r2
         );
}
 800193a:	4618      	mov	r0, r3
 800193c:	3724      	adds	r7, #36	; 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ff4c 	bl	80017ec <__NVIC_SetPriorityGrouping>
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
 8001968:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800196a:	f7ff ff63 	bl	8001834 <__NVIC_GetPriorityGrouping>
 800196e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	68b9      	ldr	r1, [r7, #8]
 8001974:	6978      	ldr	r0, [r7, #20]
 8001976:	f7ff ffb3 	bl	80018e0 <NVIC_EncodePriority>
 800197a:	4602      	mov	r2, r0
 800197c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001980:	4611      	mov	r1, r2
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff ff82 	bl	800188c <__NVIC_SetPriority>
}
 8001988:	bf00      	nop
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800199a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff ff56 	bl	8001850 <__NVIC_EnableIRQ>
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80019b4:	f7ff fede 	bl	8001774 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e316      	b.n	8001ff2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a66      	ldr	r2, [pc, #408]	; (8001b64 <HAL_DMA_Init+0x1b8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d04a      	beq.n	8001a64 <HAL_DMA_Init+0xb8>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a65      	ldr	r2, [pc, #404]	; (8001b68 <HAL_DMA_Init+0x1bc>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d045      	beq.n	8001a64 <HAL_DMA_Init+0xb8>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a63      	ldr	r2, [pc, #396]	; (8001b6c <HAL_DMA_Init+0x1c0>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d040      	beq.n	8001a64 <HAL_DMA_Init+0xb8>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a62      	ldr	r2, [pc, #392]	; (8001b70 <HAL_DMA_Init+0x1c4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d03b      	beq.n	8001a64 <HAL_DMA_Init+0xb8>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a60      	ldr	r2, [pc, #384]	; (8001b74 <HAL_DMA_Init+0x1c8>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d036      	beq.n	8001a64 <HAL_DMA_Init+0xb8>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a5f      	ldr	r2, [pc, #380]	; (8001b78 <HAL_DMA_Init+0x1cc>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d031      	beq.n	8001a64 <HAL_DMA_Init+0xb8>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a5d      	ldr	r2, [pc, #372]	; (8001b7c <HAL_DMA_Init+0x1d0>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d02c      	beq.n	8001a64 <HAL_DMA_Init+0xb8>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a5c      	ldr	r2, [pc, #368]	; (8001b80 <HAL_DMA_Init+0x1d4>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d027      	beq.n	8001a64 <HAL_DMA_Init+0xb8>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a5a      	ldr	r2, [pc, #360]	; (8001b84 <HAL_DMA_Init+0x1d8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d022      	beq.n	8001a64 <HAL_DMA_Init+0xb8>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a59      	ldr	r2, [pc, #356]	; (8001b88 <HAL_DMA_Init+0x1dc>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d01d      	beq.n	8001a64 <HAL_DMA_Init+0xb8>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a57      	ldr	r2, [pc, #348]	; (8001b8c <HAL_DMA_Init+0x1e0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d018      	beq.n	8001a64 <HAL_DMA_Init+0xb8>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a56      	ldr	r2, [pc, #344]	; (8001b90 <HAL_DMA_Init+0x1e4>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d013      	beq.n	8001a64 <HAL_DMA_Init+0xb8>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a54      	ldr	r2, [pc, #336]	; (8001b94 <HAL_DMA_Init+0x1e8>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d00e      	beq.n	8001a64 <HAL_DMA_Init+0xb8>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a53      	ldr	r2, [pc, #332]	; (8001b98 <HAL_DMA_Init+0x1ec>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d009      	beq.n	8001a64 <HAL_DMA_Init+0xb8>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a51      	ldr	r2, [pc, #324]	; (8001b9c <HAL_DMA_Init+0x1f0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d004      	beq.n	8001a64 <HAL_DMA_Init+0xb8>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a50      	ldr	r2, [pc, #320]	; (8001ba0 <HAL_DMA_Init+0x1f4>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d101      	bne.n	8001a68 <HAL_DMA_Init+0xbc>
 8001a64:	2301      	movs	r3, #1
 8001a66:	e000      	b.n	8001a6a <HAL_DMA_Init+0xbe>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 813b 	beq.w	8001ce6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2202      	movs	r2, #2
 8001a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a37      	ldr	r2, [pc, #220]	; (8001b64 <HAL_DMA_Init+0x1b8>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d04a      	beq.n	8001b20 <HAL_DMA_Init+0x174>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a36      	ldr	r2, [pc, #216]	; (8001b68 <HAL_DMA_Init+0x1bc>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d045      	beq.n	8001b20 <HAL_DMA_Init+0x174>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a34      	ldr	r2, [pc, #208]	; (8001b6c <HAL_DMA_Init+0x1c0>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d040      	beq.n	8001b20 <HAL_DMA_Init+0x174>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a33      	ldr	r2, [pc, #204]	; (8001b70 <HAL_DMA_Init+0x1c4>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d03b      	beq.n	8001b20 <HAL_DMA_Init+0x174>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a31      	ldr	r2, [pc, #196]	; (8001b74 <HAL_DMA_Init+0x1c8>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d036      	beq.n	8001b20 <HAL_DMA_Init+0x174>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a30      	ldr	r2, [pc, #192]	; (8001b78 <HAL_DMA_Init+0x1cc>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d031      	beq.n	8001b20 <HAL_DMA_Init+0x174>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a2e      	ldr	r2, [pc, #184]	; (8001b7c <HAL_DMA_Init+0x1d0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d02c      	beq.n	8001b20 <HAL_DMA_Init+0x174>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a2d      	ldr	r2, [pc, #180]	; (8001b80 <HAL_DMA_Init+0x1d4>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d027      	beq.n	8001b20 <HAL_DMA_Init+0x174>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a2b      	ldr	r2, [pc, #172]	; (8001b84 <HAL_DMA_Init+0x1d8>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d022      	beq.n	8001b20 <HAL_DMA_Init+0x174>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a2a      	ldr	r2, [pc, #168]	; (8001b88 <HAL_DMA_Init+0x1dc>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d01d      	beq.n	8001b20 <HAL_DMA_Init+0x174>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a28      	ldr	r2, [pc, #160]	; (8001b8c <HAL_DMA_Init+0x1e0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d018      	beq.n	8001b20 <HAL_DMA_Init+0x174>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a27      	ldr	r2, [pc, #156]	; (8001b90 <HAL_DMA_Init+0x1e4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d013      	beq.n	8001b20 <HAL_DMA_Init+0x174>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a25      	ldr	r2, [pc, #148]	; (8001b94 <HAL_DMA_Init+0x1e8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00e      	beq.n	8001b20 <HAL_DMA_Init+0x174>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a24      	ldr	r2, [pc, #144]	; (8001b98 <HAL_DMA_Init+0x1ec>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d009      	beq.n	8001b20 <HAL_DMA_Init+0x174>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a22      	ldr	r2, [pc, #136]	; (8001b9c <HAL_DMA_Init+0x1f0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d004      	beq.n	8001b20 <HAL_DMA_Init+0x174>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a21      	ldr	r2, [pc, #132]	; (8001ba0 <HAL_DMA_Init+0x1f4>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d108      	bne.n	8001b32 <HAL_DMA_Init+0x186>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0201 	bic.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	e007      	b.n	8001b42 <HAL_DMA_Init+0x196>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0201 	bic.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b42:	e02f      	b.n	8001ba4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b44:	f7ff fe16 	bl	8001774 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b05      	cmp	r3, #5
 8001b50:	d928      	bls.n	8001ba4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2220      	movs	r2, #32
 8001b56:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e246      	b.n	8001ff2 <HAL_DMA_Init+0x646>
 8001b64:	40020010 	.word	0x40020010
 8001b68:	40020028 	.word	0x40020028
 8001b6c:	40020040 	.word	0x40020040
 8001b70:	40020058 	.word	0x40020058
 8001b74:	40020070 	.word	0x40020070
 8001b78:	40020088 	.word	0x40020088
 8001b7c:	400200a0 	.word	0x400200a0
 8001b80:	400200b8 	.word	0x400200b8
 8001b84:	40020410 	.word	0x40020410
 8001b88:	40020428 	.word	0x40020428
 8001b8c:	40020440 	.word	0x40020440
 8001b90:	40020458 	.word	0x40020458
 8001b94:	40020470 	.word	0x40020470
 8001b98:	40020488 	.word	0x40020488
 8001b9c:	400204a0 	.word	0x400204a0
 8001ba0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1c8      	bne.n	8001b44 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	4b83      	ldr	r3, [pc, #524]	; (8001dcc <HAL_DMA_Init+0x420>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001bca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bd6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001be2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d107      	bne.n	8001c08 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	4313      	orrs	r3, r2
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001c08:	4b71      	ldr	r3, [pc, #452]	; (8001dd0 <HAL_DMA_Init+0x424>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b71      	ldr	r3, [pc, #452]	; (8001dd4 <HAL_DMA_Init+0x428>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c14:	d328      	bcc.n	8001c68 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b28      	cmp	r3, #40	; 0x28
 8001c1c:	d903      	bls.n	8001c26 <HAL_DMA_Init+0x27a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b2e      	cmp	r3, #46	; 0x2e
 8001c24:	d917      	bls.n	8001c56 <HAL_DMA_Init+0x2aa>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b3e      	cmp	r3, #62	; 0x3e
 8001c2c:	d903      	bls.n	8001c36 <HAL_DMA_Init+0x28a>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b42      	cmp	r3, #66	; 0x42
 8001c34:	d90f      	bls.n	8001c56 <HAL_DMA_Init+0x2aa>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b46      	cmp	r3, #70	; 0x46
 8001c3c:	d903      	bls.n	8001c46 <HAL_DMA_Init+0x29a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b48      	cmp	r3, #72	; 0x48
 8001c44:	d907      	bls.n	8001c56 <HAL_DMA_Init+0x2aa>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b4e      	cmp	r3, #78	; 0x4e
 8001c4c:	d905      	bls.n	8001c5a <HAL_DMA_Init+0x2ae>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b52      	cmp	r3, #82	; 0x52
 8001c54:	d801      	bhi.n	8001c5a <HAL_DMA_Init+0x2ae>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <HAL_DMA_Init+0x2b0>
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c66:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f023 0307 	bic.w	r3, r3, #7
 8001c7e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d117      	bne.n	8001cc2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00e      	beq.n	8001cc2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f002 fb33 	bl	8004310 <DMA_CheckFifoParam>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d008      	beq.n	8001cc2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2240      	movs	r2, #64	; 0x40
 8001cb4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e197      	b.n	8001ff2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f002 fa6e 	bl	80041ac <DMA_CalcBaseAndBitshift>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd8:	f003 031f 	and.w	r3, r3, #31
 8001cdc:	223f      	movs	r2, #63	; 0x3f
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	e0cd      	b.n	8001e82 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a3b      	ldr	r2, [pc, #236]	; (8001dd8 <HAL_DMA_Init+0x42c>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d022      	beq.n	8001d36 <HAL_DMA_Init+0x38a>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a39      	ldr	r2, [pc, #228]	; (8001ddc <HAL_DMA_Init+0x430>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d01d      	beq.n	8001d36 <HAL_DMA_Init+0x38a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a38      	ldr	r2, [pc, #224]	; (8001de0 <HAL_DMA_Init+0x434>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d018      	beq.n	8001d36 <HAL_DMA_Init+0x38a>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a36      	ldr	r2, [pc, #216]	; (8001de4 <HAL_DMA_Init+0x438>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d013      	beq.n	8001d36 <HAL_DMA_Init+0x38a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a35      	ldr	r2, [pc, #212]	; (8001de8 <HAL_DMA_Init+0x43c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d00e      	beq.n	8001d36 <HAL_DMA_Init+0x38a>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a33      	ldr	r2, [pc, #204]	; (8001dec <HAL_DMA_Init+0x440>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d009      	beq.n	8001d36 <HAL_DMA_Init+0x38a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a32      	ldr	r2, [pc, #200]	; (8001df0 <HAL_DMA_Init+0x444>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d004      	beq.n	8001d36 <HAL_DMA_Init+0x38a>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a30      	ldr	r2, [pc, #192]	; (8001df4 <HAL_DMA_Init+0x448>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d101      	bne.n	8001d3a <HAL_DMA_Init+0x38e>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <HAL_DMA_Init+0x390>
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 8097 	beq.w	8001e70 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a24      	ldr	r2, [pc, #144]	; (8001dd8 <HAL_DMA_Init+0x42c>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d021      	beq.n	8001d90 <HAL_DMA_Init+0x3e4>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a22      	ldr	r2, [pc, #136]	; (8001ddc <HAL_DMA_Init+0x430>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d01c      	beq.n	8001d90 <HAL_DMA_Init+0x3e4>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a21      	ldr	r2, [pc, #132]	; (8001de0 <HAL_DMA_Init+0x434>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d017      	beq.n	8001d90 <HAL_DMA_Init+0x3e4>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a1f      	ldr	r2, [pc, #124]	; (8001de4 <HAL_DMA_Init+0x438>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d012      	beq.n	8001d90 <HAL_DMA_Init+0x3e4>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a1e      	ldr	r2, [pc, #120]	; (8001de8 <HAL_DMA_Init+0x43c>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d00d      	beq.n	8001d90 <HAL_DMA_Init+0x3e4>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a1c      	ldr	r2, [pc, #112]	; (8001dec <HAL_DMA_Init+0x440>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d008      	beq.n	8001d90 <HAL_DMA_Init+0x3e4>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a1b      	ldr	r2, [pc, #108]	; (8001df0 <HAL_DMA_Init+0x444>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d003      	beq.n	8001d90 <HAL_DMA_Init+0x3e4>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a19      	ldr	r2, [pc, #100]	; (8001df4 <HAL_DMA_Init+0x448>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2202      	movs	r2, #2
 8001d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_DMA_Init+0x44c>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b40      	cmp	r3, #64	; 0x40
 8001db8:	d020      	beq.n	8001dfc <HAL_DMA_Init+0x450>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b80      	cmp	r3, #128	; 0x80
 8001dc0:	d102      	bne.n	8001dc8 <HAL_DMA_Init+0x41c>
 8001dc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dc6:	e01a      	b.n	8001dfe <HAL_DMA_Init+0x452>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	e018      	b.n	8001dfe <HAL_DMA_Init+0x452>
 8001dcc:	fe10803f 	.word	0xfe10803f
 8001dd0:	5c001000 	.word	0x5c001000
 8001dd4:	ffff0000 	.word	0xffff0000
 8001dd8:	58025408 	.word	0x58025408
 8001ddc:	5802541c 	.word	0x5802541c
 8001de0:	58025430 	.word	0x58025430
 8001de4:	58025444 	.word	0x58025444
 8001de8:	58025458 	.word	0x58025458
 8001dec:	5802546c 	.word	0x5802546c
 8001df0:	58025480 	.word	0x58025480
 8001df4:	58025494 	.word	0x58025494
 8001df8:	fffe000f 	.word	0xfffe000f
 8001dfc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68d2      	ldr	r2, [r2, #12]
 8001e02:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e2c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b6e      	ldr	r3, [pc, #440]	; (8001ffc <HAL_DMA_Init+0x650>)
 8001e44:	4413      	add	r3, r2
 8001e46:	4a6e      	ldr	r2, [pc, #440]	; (8002000 <HAL_DMA_Init+0x654>)
 8001e48:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4c:	091b      	lsrs	r3, r3, #4
 8001e4e:	009a      	lsls	r2, r3, #2
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f002 f9a9 	bl	80041ac <DMA_CalcBaseAndBitshift>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e62:	f003 031f 	and.w	r3, r3, #31
 8001e66:	2201      	movs	r2, #1
 8001e68:	409a      	lsls	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	e008      	b.n	8001e82 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2240      	movs	r2, #64	; 0x40
 8001e74:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2203      	movs	r2, #3
 8001e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0b7      	b.n	8001ff2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a5f      	ldr	r2, [pc, #380]	; (8002004 <HAL_DMA_Init+0x658>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d072      	beq.n	8001f72 <HAL_DMA_Init+0x5c6>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a5d      	ldr	r2, [pc, #372]	; (8002008 <HAL_DMA_Init+0x65c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d06d      	beq.n	8001f72 <HAL_DMA_Init+0x5c6>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a5c      	ldr	r2, [pc, #368]	; (800200c <HAL_DMA_Init+0x660>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d068      	beq.n	8001f72 <HAL_DMA_Init+0x5c6>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a5a      	ldr	r2, [pc, #360]	; (8002010 <HAL_DMA_Init+0x664>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d063      	beq.n	8001f72 <HAL_DMA_Init+0x5c6>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a59      	ldr	r2, [pc, #356]	; (8002014 <HAL_DMA_Init+0x668>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d05e      	beq.n	8001f72 <HAL_DMA_Init+0x5c6>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a57      	ldr	r2, [pc, #348]	; (8002018 <HAL_DMA_Init+0x66c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d059      	beq.n	8001f72 <HAL_DMA_Init+0x5c6>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a56      	ldr	r2, [pc, #344]	; (800201c <HAL_DMA_Init+0x670>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d054      	beq.n	8001f72 <HAL_DMA_Init+0x5c6>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a54      	ldr	r2, [pc, #336]	; (8002020 <HAL_DMA_Init+0x674>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d04f      	beq.n	8001f72 <HAL_DMA_Init+0x5c6>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a53      	ldr	r2, [pc, #332]	; (8002024 <HAL_DMA_Init+0x678>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d04a      	beq.n	8001f72 <HAL_DMA_Init+0x5c6>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a51      	ldr	r2, [pc, #324]	; (8002028 <HAL_DMA_Init+0x67c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d045      	beq.n	8001f72 <HAL_DMA_Init+0x5c6>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a50      	ldr	r2, [pc, #320]	; (800202c <HAL_DMA_Init+0x680>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d040      	beq.n	8001f72 <HAL_DMA_Init+0x5c6>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a4e      	ldr	r2, [pc, #312]	; (8002030 <HAL_DMA_Init+0x684>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d03b      	beq.n	8001f72 <HAL_DMA_Init+0x5c6>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a4d      	ldr	r2, [pc, #308]	; (8002034 <HAL_DMA_Init+0x688>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d036      	beq.n	8001f72 <HAL_DMA_Init+0x5c6>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a4b      	ldr	r2, [pc, #300]	; (8002038 <HAL_DMA_Init+0x68c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d031      	beq.n	8001f72 <HAL_DMA_Init+0x5c6>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a4a      	ldr	r2, [pc, #296]	; (800203c <HAL_DMA_Init+0x690>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d02c      	beq.n	8001f72 <HAL_DMA_Init+0x5c6>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a48      	ldr	r2, [pc, #288]	; (8002040 <HAL_DMA_Init+0x694>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d027      	beq.n	8001f72 <HAL_DMA_Init+0x5c6>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a47      	ldr	r2, [pc, #284]	; (8002044 <HAL_DMA_Init+0x698>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d022      	beq.n	8001f72 <HAL_DMA_Init+0x5c6>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a45      	ldr	r2, [pc, #276]	; (8002048 <HAL_DMA_Init+0x69c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d01d      	beq.n	8001f72 <HAL_DMA_Init+0x5c6>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a44      	ldr	r2, [pc, #272]	; (800204c <HAL_DMA_Init+0x6a0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d018      	beq.n	8001f72 <HAL_DMA_Init+0x5c6>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a42      	ldr	r2, [pc, #264]	; (8002050 <HAL_DMA_Init+0x6a4>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d013      	beq.n	8001f72 <HAL_DMA_Init+0x5c6>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a41      	ldr	r2, [pc, #260]	; (8002054 <HAL_DMA_Init+0x6a8>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d00e      	beq.n	8001f72 <HAL_DMA_Init+0x5c6>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a3f      	ldr	r2, [pc, #252]	; (8002058 <HAL_DMA_Init+0x6ac>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d009      	beq.n	8001f72 <HAL_DMA_Init+0x5c6>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a3e      	ldr	r2, [pc, #248]	; (800205c <HAL_DMA_Init+0x6b0>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d004      	beq.n	8001f72 <HAL_DMA_Init+0x5c6>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a3c      	ldr	r2, [pc, #240]	; (8002060 <HAL_DMA_Init+0x6b4>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d101      	bne.n	8001f76 <HAL_DMA_Init+0x5ca>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <HAL_DMA_Init+0x5cc>
 8001f76:	2300      	movs	r3, #0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d032      	beq.n	8001fe2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f002 fa43 	bl	8004408 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b80      	cmp	r3, #128	; 0x80
 8001f88:	d102      	bne.n	8001f90 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001fa4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d010      	beq.n	8001fd0 <HAL_DMA_Init+0x624>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	d80c      	bhi.n	8001fd0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f002 fac0 	bl	800453c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	e008      	b.n	8001fe2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	a7fdabf8 	.word	0xa7fdabf8
 8002000:	cccccccd 	.word	0xcccccccd
 8002004:	40020010 	.word	0x40020010
 8002008:	40020028 	.word	0x40020028
 800200c:	40020040 	.word	0x40020040
 8002010:	40020058 	.word	0x40020058
 8002014:	40020070 	.word	0x40020070
 8002018:	40020088 	.word	0x40020088
 800201c:	400200a0 	.word	0x400200a0
 8002020:	400200b8 	.word	0x400200b8
 8002024:	40020410 	.word	0x40020410
 8002028:	40020428 	.word	0x40020428
 800202c:	40020440 	.word	0x40020440
 8002030:	40020458 	.word	0x40020458
 8002034:	40020470 	.word	0x40020470
 8002038:	40020488 	.word	0x40020488
 800203c:	400204a0 	.word	0x400204a0
 8002040:	400204b8 	.word	0x400204b8
 8002044:	58025408 	.word	0x58025408
 8002048:	5802541c 	.word	0x5802541c
 800204c:	58025430 	.word	0x58025430
 8002050:	58025444 	.word	0x58025444
 8002054:	58025458 	.word	0x58025458
 8002058:	5802546c 	.word	0x5802546c
 800205c:	58025480 	.word	0x58025480
 8002060:	58025494 	.word	0x58025494

08002064 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
 8002070:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e226      	b.n	80024ce <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_DMA_Start_IT+0x2a>
 800208a:	2302      	movs	r3, #2
 800208c:	e21f      	b.n	80024ce <HAL_DMA_Start_IT+0x46a>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	f040 820a 	bne.w	80024b8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2202      	movs	r2, #2
 80020a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a68      	ldr	r2, [pc, #416]	; (8002258 <HAL_DMA_Start_IT+0x1f4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d04a      	beq.n	8002152 <HAL_DMA_Start_IT+0xee>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a66      	ldr	r2, [pc, #408]	; (800225c <HAL_DMA_Start_IT+0x1f8>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d045      	beq.n	8002152 <HAL_DMA_Start_IT+0xee>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a65      	ldr	r2, [pc, #404]	; (8002260 <HAL_DMA_Start_IT+0x1fc>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d040      	beq.n	8002152 <HAL_DMA_Start_IT+0xee>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a63      	ldr	r2, [pc, #396]	; (8002264 <HAL_DMA_Start_IT+0x200>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d03b      	beq.n	8002152 <HAL_DMA_Start_IT+0xee>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a62      	ldr	r2, [pc, #392]	; (8002268 <HAL_DMA_Start_IT+0x204>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d036      	beq.n	8002152 <HAL_DMA_Start_IT+0xee>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a60      	ldr	r2, [pc, #384]	; (800226c <HAL_DMA_Start_IT+0x208>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d031      	beq.n	8002152 <HAL_DMA_Start_IT+0xee>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a5f      	ldr	r2, [pc, #380]	; (8002270 <HAL_DMA_Start_IT+0x20c>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d02c      	beq.n	8002152 <HAL_DMA_Start_IT+0xee>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a5d      	ldr	r2, [pc, #372]	; (8002274 <HAL_DMA_Start_IT+0x210>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d027      	beq.n	8002152 <HAL_DMA_Start_IT+0xee>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a5c      	ldr	r2, [pc, #368]	; (8002278 <HAL_DMA_Start_IT+0x214>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d022      	beq.n	8002152 <HAL_DMA_Start_IT+0xee>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a5a      	ldr	r2, [pc, #360]	; (800227c <HAL_DMA_Start_IT+0x218>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d01d      	beq.n	8002152 <HAL_DMA_Start_IT+0xee>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a59      	ldr	r2, [pc, #356]	; (8002280 <HAL_DMA_Start_IT+0x21c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d018      	beq.n	8002152 <HAL_DMA_Start_IT+0xee>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a57      	ldr	r2, [pc, #348]	; (8002284 <HAL_DMA_Start_IT+0x220>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d013      	beq.n	8002152 <HAL_DMA_Start_IT+0xee>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a56      	ldr	r2, [pc, #344]	; (8002288 <HAL_DMA_Start_IT+0x224>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d00e      	beq.n	8002152 <HAL_DMA_Start_IT+0xee>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a54      	ldr	r2, [pc, #336]	; (800228c <HAL_DMA_Start_IT+0x228>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d009      	beq.n	8002152 <HAL_DMA_Start_IT+0xee>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a53      	ldr	r2, [pc, #332]	; (8002290 <HAL_DMA_Start_IT+0x22c>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d004      	beq.n	8002152 <HAL_DMA_Start_IT+0xee>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a51      	ldr	r2, [pc, #324]	; (8002294 <HAL_DMA_Start_IT+0x230>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d108      	bne.n	8002164 <HAL_DMA_Start_IT+0x100>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0201 	bic.w	r2, r2, #1
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	e007      	b.n	8002174 <HAL_DMA_Start_IT+0x110>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0201 	bic.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f001 fe6a 	bl	8003e54 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a34      	ldr	r2, [pc, #208]	; (8002258 <HAL_DMA_Start_IT+0x1f4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d04a      	beq.n	8002220 <HAL_DMA_Start_IT+0x1bc>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a33      	ldr	r2, [pc, #204]	; (800225c <HAL_DMA_Start_IT+0x1f8>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d045      	beq.n	8002220 <HAL_DMA_Start_IT+0x1bc>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a31      	ldr	r2, [pc, #196]	; (8002260 <HAL_DMA_Start_IT+0x1fc>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d040      	beq.n	8002220 <HAL_DMA_Start_IT+0x1bc>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a30      	ldr	r2, [pc, #192]	; (8002264 <HAL_DMA_Start_IT+0x200>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d03b      	beq.n	8002220 <HAL_DMA_Start_IT+0x1bc>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a2e      	ldr	r2, [pc, #184]	; (8002268 <HAL_DMA_Start_IT+0x204>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d036      	beq.n	8002220 <HAL_DMA_Start_IT+0x1bc>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a2d      	ldr	r2, [pc, #180]	; (800226c <HAL_DMA_Start_IT+0x208>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d031      	beq.n	8002220 <HAL_DMA_Start_IT+0x1bc>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a2b      	ldr	r2, [pc, #172]	; (8002270 <HAL_DMA_Start_IT+0x20c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d02c      	beq.n	8002220 <HAL_DMA_Start_IT+0x1bc>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a2a      	ldr	r2, [pc, #168]	; (8002274 <HAL_DMA_Start_IT+0x210>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d027      	beq.n	8002220 <HAL_DMA_Start_IT+0x1bc>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a28      	ldr	r2, [pc, #160]	; (8002278 <HAL_DMA_Start_IT+0x214>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d022      	beq.n	8002220 <HAL_DMA_Start_IT+0x1bc>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a27      	ldr	r2, [pc, #156]	; (800227c <HAL_DMA_Start_IT+0x218>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d01d      	beq.n	8002220 <HAL_DMA_Start_IT+0x1bc>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a25      	ldr	r2, [pc, #148]	; (8002280 <HAL_DMA_Start_IT+0x21c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d018      	beq.n	8002220 <HAL_DMA_Start_IT+0x1bc>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a24      	ldr	r2, [pc, #144]	; (8002284 <HAL_DMA_Start_IT+0x220>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d013      	beq.n	8002220 <HAL_DMA_Start_IT+0x1bc>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a22      	ldr	r2, [pc, #136]	; (8002288 <HAL_DMA_Start_IT+0x224>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d00e      	beq.n	8002220 <HAL_DMA_Start_IT+0x1bc>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a21      	ldr	r2, [pc, #132]	; (800228c <HAL_DMA_Start_IT+0x228>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d009      	beq.n	8002220 <HAL_DMA_Start_IT+0x1bc>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a1f      	ldr	r2, [pc, #124]	; (8002290 <HAL_DMA_Start_IT+0x22c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d004      	beq.n	8002220 <HAL_DMA_Start_IT+0x1bc>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a1e      	ldr	r2, [pc, #120]	; (8002294 <HAL_DMA_Start_IT+0x230>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d101      	bne.n	8002224 <HAL_DMA_Start_IT+0x1c0>
 8002220:	2301      	movs	r3, #1
 8002222:	e000      	b.n	8002226 <HAL_DMA_Start_IT+0x1c2>
 8002224:	2300      	movs	r3, #0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d036      	beq.n	8002298 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f023 021e 	bic.w	r2, r3, #30
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f042 0216 	orr.w	r2, r2, #22
 800223c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	2b00      	cmp	r3, #0
 8002244:	d03e      	beq.n	80022c4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0208 	orr.w	r2, r2, #8
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	e035      	b.n	80022c4 <HAL_DMA_Start_IT+0x260>
 8002258:	40020010 	.word	0x40020010
 800225c:	40020028 	.word	0x40020028
 8002260:	40020040 	.word	0x40020040
 8002264:	40020058 	.word	0x40020058
 8002268:	40020070 	.word	0x40020070
 800226c:	40020088 	.word	0x40020088
 8002270:	400200a0 	.word	0x400200a0
 8002274:	400200b8 	.word	0x400200b8
 8002278:	40020410 	.word	0x40020410
 800227c:	40020428 	.word	0x40020428
 8002280:	40020440 	.word	0x40020440
 8002284:	40020458 	.word	0x40020458
 8002288:	40020470 	.word	0x40020470
 800228c:	40020488 	.word	0x40020488
 8002290:	400204a0 	.word	0x400204a0
 8002294:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 020e 	bic.w	r2, r3, #14
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 020a 	orr.w	r2, r2, #10
 80022aa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d007      	beq.n	80022c4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0204 	orr.w	r2, r2, #4
 80022c2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a83      	ldr	r2, [pc, #524]	; (80024d8 <HAL_DMA_Start_IT+0x474>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d072      	beq.n	80023b4 <HAL_DMA_Start_IT+0x350>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a82      	ldr	r2, [pc, #520]	; (80024dc <HAL_DMA_Start_IT+0x478>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d06d      	beq.n	80023b4 <HAL_DMA_Start_IT+0x350>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a80      	ldr	r2, [pc, #512]	; (80024e0 <HAL_DMA_Start_IT+0x47c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d068      	beq.n	80023b4 <HAL_DMA_Start_IT+0x350>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a7f      	ldr	r2, [pc, #508]	; (80024e4 <HAL_DMA_Start_IT+0x480>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d063      	beq.n	80023b4 <HAL_DMA_Start_IT+0x350>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a7d      	ldr	r2, [pc, #500]	; (80024e8 <HAL_DMA_Start_IT+0x484>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d05e      	beq.n	80023b4 <HAL_DMA_Start_IT+0x350>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a7c      	ldr	r2, [pc, #496]	; (80024ec <HAL_DMA_Start_IT+0x488>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d059      	beq.n	80023b4 <HAL_DMA_Start_IT+0x350>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a7a      	ldr	r2, [pc, #488]	; (80024f0 <HAL_DMA_Start_IT+0x48c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d054      	beq.n	80023b4 <HAL_DMA_Start_IT+0x350>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a79      	ldr	r2, [pc, #484]	; (80024f4 <HAL_DMA_Start_IT+0x490>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d04f      	beq.n	80023b4 <HAL_DMA_Start_IT+0x350>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a77      	ldr	r2, [pc, #476]	; (80024f8 <HAL_DMA_Start_IT+0x494>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d04a      	beq.n	80023b4 <HAL_DMA_Start_IT+0x350>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a76      	ldr	r2, [pc, #472]	; (80024fc <HAL_DMA_Start_IT+0x498>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d045      	beq.n	80023b4 <HAL_DMA_Start_IT+0x350>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a74      	ldr	r2, [pc, #464]	; (8002500 <HAL_DMA_Start_IT+0x49c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d040      	beq.n	80023b4 <HAL_DMA_Start_IT+0x350>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a73      	ldr	r2, [pc, #460]	; (8002504 <HAL_DMA_Start_IT+0x4a0>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d03b      	beq.n	80023b4 <HAL_DMA_Start_IT+0x350>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a71      	ldr	r2, [pc, #452]	; (8002508 <HAL_DMA_Start_IT+0x4a4>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d036      	beq.n	80023b4 <HAL_DMA_Start_IT+0x350>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a70      	ldr	r2, [pc, #448]	; (800250c <HAL_DMA_Start_IT+0x4a8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d031      	beq.n	80023b4 <HAL_DMA_Start_IT+0x350>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a6e      	ldr	r2, [pc, #440]	; (8002510 <HAL_DMA_Start_IT+0x4ac>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d02c      	beq.n	80023b4 <HAL_DMA_Start_IT+0x350>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a6d      	ldr	r2, [pc, #436]	; (8002514 <HAL_DMA_Start_IT+0x4b0>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d027      	beq.n	80023b4 <HAL_DMA_Start_IT+0x350>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a6b      	ldr	r2, [pc, #428]	; (8002518 <HAL_DMA_Start_IT+0x4b4>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d022      	beq.n	80023b4 <HAL_DMA_Start_IT+0x350>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a6a      	ldr	r2, [pc, #424]	; (800251c <HAL_DMA_Start_IT+0x4b8>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d01d      	beq.n	80023b4 <HAL_DMA_Start_IT+0x350>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a68      	ldr	r2, [pc, #416]	; (8002520 <HAL_DMA_Start_IT+0x4bc>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d018      	beq.n	80023b4 <HAL_DMA_Start_IT+0x350>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a67      	ldr	r2, [pc, #412]	; (8002524 <HAL_DMA_Start_IT+0x4c0>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d013      	beq.n	80023b4 <HAL_DMA_Start_IT+0x350>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a65      	ldr	r2, [pc, #404]	; (8002528 <HAL_DMA_Start_IT+0x4c4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00e      	beq.n	80023b4 <HAL_DMA_Start_IT+0x350>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a64      	ldr	r2, [pc, #400]	; (800252c <HAL_DMA_Start_IT+0x4c8>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d009      	beq.n	80023b4 <HAL_DMA_Start_IT+0x350>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a62      	ldr	r2, [pc, #392]	; (8002530 <HAL_DMA_Start_IT+0x4cc>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d004      	beq.n	80023b4 <HAL_DMA_Start_IT+0x350>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a61      	ldr	r2, [pc, #388]	; (8002534 <HAL_DMA_Start_IT+0x4d0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d101      	bne.n	80023b8 <HAL_DMA_Start_IT+0x354>
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <HAL_DMA_Start_IT+0x356>
 80023b8:	2300      	movs	r3, #0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d01a      	beq.n	80023f4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d007      	beq.n	80023dc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023da:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d007      	beq.n	80023f4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023f2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a37      	ldr	r2, [pc, #220]	; (80024d8 <HAL_DMA_Start_IT+0x474>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d04a      	beq.n	8002494 <HAL_DMA_Start_IT+0x430>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a36      	ldr	r2, [pc, #216]	; (80024dc <HAL_DMA_Start_IT+0x478>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d045      	beq.n	8002494 <HAL_DMA_Start_IT+0x430>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a34      	ldr	r2, [pc, #208]	; (80024e0 <HAL_DMA_Start_IT+0x47c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d040      	beq.n	8002494 <HAL_DMA_Start_IT+0x430>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a33      	ldr	r2, [pc, #204]	; (80024e4 <HAL_DMA_Start_IT+0x480>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d03b      	beq.n	8002494 <HAL_DMA_Start_IT+0x430>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a31      	ldr	r2, [pc, #196]	; (80024e8 <HAL_DMA_Start_IT+0x484>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d036      	beq.n	8002494 <HAL_DMA_Start_IT+0x430>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a30      	ldr	r2, [pc, #192]	; (80024ec <HAL_DMA_Start_IT+0x488>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d031      	beq.n	8002494 <HAL_DMA_Start_IT+0x430>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a2e      	ldr	r2, [pc, #184]	; (80024f0 <HAL_DMA_Start_IT+0x48c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d02c      	beq.n	8002494 <HAL_DMA_Start_IT+0x430>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a2d      	ldr	r2, [pc, #180]	; (80024f4 <HAL_DMA_Start_IT+0x490>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d027      	beq.n	8002494 <HAL_DMA_Start_IT+0x430>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a2b      	ldr	r2, [pc, #172]	; (80024f8 <HAL_DMA_Start_IT+0x494>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d022      	beq.n	8002494 <HAL_DMA_Start_IT+0x430>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a2a      	ldr	r2, [pc, #168]	; (80024fc <HAL_DMA_Start_IT+0x498>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d01d      	beq.n	8002494 <HAL_DMA_Start_IT+0x430>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a28      	ldr	r2, [pc, #160]	; (8002500 <HAL_DMA_Start_IT+0x49c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d018      	beq.n	8002494 <HAL_DMA_Start_IT+0x430>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a27      	ldr	r2, [pc, #156]	; (8002504 <HAL_DMA_Start_IT+0x4a0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d013      	beq.n	8002494 <HAL_DMA_Start_IT+0x430>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a25      	ldr	r2, [pc, #148]	; (8002508 <HAL_DMA_Start_IT+0x4a4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00e      	beq.n	8002494 <HAL_DMA_Start_IT+0x430>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a24      	ldr	r2, [pc, #144]	; (800250c <HAL_DMA_Start_IT+0x4a8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d009      	beq.n	8002494 <HAL_DMA_Start_IT+0x430>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a22      	ldr	r2, [pc, #136]	; (8002510 <HAL_DMA_Start_IT+0x4ac>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d004      	beq.n	8002494 <HAL_DMA_Start_IT+0x430>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a21      	ldr	r2, [pc, #132]	; (8002514 <HAL_DMA_Start_IT+0x4b0>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d108      	bne.n	80024a6 <HAL_DMA_Start_IT+0x442>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	e012      	b.n	80024cc <HAL_DMA_Start_IT+0x468>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 0201 	orr.w	r2, r2, #1
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	e009      	b.n	80024cc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80024cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40020010 	.word	0x40020010
 80024dc:	40020028 	.word	0x40020028
 80024e0:	40020040 	.word	0x40020040
 80024e4:	40020058 	.word	0x40020058
 80024e8:	40020070 	.word	0x40020070
 80024ec:	40020088 	.word	0x40020088
 80024f0:	400200a0 	.word	0x400200a0
 80024f4:	400200b8 	.word	0x400200b8
 80024f8:	40020410 	.word	0x40020410
 80024fc:	40020428 	.word	0x40020428
 8002500:	40020440 	.word	0x40020440
 8002504:	40020458 	.word	0x40020458
 8002508:	40020470 	.word	0x40020470
 800250c:	40020488 	.word	0x40020488
 8002510:	400204a0 	.word	0x400204a0
 8002514:	400204b8 	.word	0x400204b8
 8002518:	58025408 	.word	0x58025408
 800251c:	5802541c 	.word	0x5802541c
 8002520:	58025430 	.word	0x58025430
 8002524:	58025444 	.word	0x58025444
 8002528:	58025458 	.word	0x58025458
 800252c:	5802546c 	.word	0x5802546c
 8002530:	58025480 	.word	0x58025480
 8002534:	58025494 	.word	0x58025494

08002538 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002540:	f7ff f918 	bl	8001774 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e2dc      	b.n	8002b0a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d008      	beq.n	800256e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2280      	movs	r2, #128	; 0x80
 8002560:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e2cd      	b.n	8002b0a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a76      	ldr	r2, [pc, #472]	; (800274c <HAL_DMA_Abort+0x214>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d04a      	beq.n	800260e <HAL_DMA_Abort+0xd6>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a74      	ldr	r2, [pc, #464]	; (8002750 <HAL_DMA_Abort+0x218>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d045      	beq.n	800260e <HAL_DMA_Abort+0xd6>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a73      	ldr	r2, [pc, #460]	; (8002754 <HAL_DMA_Abort+0x21c>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d040      	beq.n	800260e <HAL_DMA_Abort+0xd6>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a71      	ldr	r2, [pc, #452]	; (8002758 <HAL_DMA_Abort+0x220>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d03b      	beq.n	800260e <HAL_DMA_Abort+0xd6>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a70      	ldr	r2, [pc, #448]	; (800275c <HAL_DMA_Abort+0x224>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d036      	beq.n	800260e <HAL_DMA_Abort+0xd6>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a6e      	ldr	r2, [pc, #440]	; (8002760 <HAL_DMA_Abort+0x228>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d031      	beq.n	800260e <HAL_DMA_Abort+0xd6>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a6d      	ldr	r2, [pc, #436]	; (8002764 <HAL_DMA_Abort+0x22c>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d02c      	beq.n	800260e <HAL_DMA_Abort+0xd6>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a6b      	ldr	r2, [pc, #428]	; (8002768 <HAL_DMA_Abort+0x230>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d027      	beq.n	800260e <HAL_DMA_Abort+0xd6>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a6a      	ldr	r2, [pc, #424]	; (800276c <HAL_DMA_Abort+0x234>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d022      	beq.n	800260e <HAL_DMA_Abort+0xd6>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a68      	ldr	r2, [pc, #416]	; (8002770 <HAL_DMA_Abort+0x238>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d01d      	beq.n	800260e <HAL_DMA_Abort+0xd6>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a67      	ldr	r2, [pc, #412]	; (8002774 <HAL_DMA_Abort+0x23c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d018      	beq.n	800260e <HAL_DMA_Abort+0xd6>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a65      	ldr	r2, [pc, #404]	; (8002778 <HAL_DMA_Abort+0x240>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d013      	beq.n	800260e <HAL_DMA_Abort+0xd6>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a64      	ldr	r2, [pc, #400]	; (800277c <HAL_DMA_Abort+0x244>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d00e      	beq.n	800260e <HAL_DMA_Abort+0xd6>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a62      	ldr	r2, [pc, #392]	; (8002780 <HAL_DMA_Abort+0x248>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d009      	beq.n	800260e <HAL_DMA_Abort+0xd6>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a61      	ldr	r2, [pc, #388]	; (8002784 <HAL_DMA_Abort+0x24c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d004      	beq.n	800260e <HAL_DMA_Abort+0xd6>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a5f      	ldr	r2, [pc, #380]	; (8002788 <HAL_DMA_Abort+0x250>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d101      	bne.n	8002612 <HAL_DMA_Abort+0xda>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_DMA_Abort+0xdc>
 8002612:	2300      	movs	r3, #0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d013      	beq.n	8002640 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 021e 	bic.w	r2, r2, #30
 8002626:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695a      	ldr	r2, [r3, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002636:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	e00a      	b.n	8002656 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 020e 	bic.w	r2, r2, #14
 800264e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a3c      	ldr	r2, [pc, #240]	; (800274c <HAL_DMA_Abort+0x214>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d072      	beq.n	8002746 <HAL_DMA_Abort+0x20e>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a3a      	ldr	r2, [pc, #232]	; (8002750 <HAL_DMA_Abort+0x218>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d06d      	beq.n	8002746 <HAL_DMA_Abort+0x20e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a39      	ldr	r2, [pc, #228]	; (8002754 <HAL_DMA_Abort+0x21c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d068      	beq.n	8002746 <HAL_DMA_Abort+0x20e>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a37      	ldr	r2, [pc, #220]	; (8002758 <HAL_DMA_Abort+0x220>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d063      	beq.n	8002746 <HAL_DMA_Abort+0x20e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a36      	ldr	r2, [pc, #216]	; (800275c <HAL_DMA_Abort+0x224>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d05e      	beq.n	8002746 <HAL_DMA_Abort+0x20e>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a34      	ldr	r2, [pc, #208]	; (8002760 <HAL_DMA_Abort+0x228>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d059      	beq.n	8002746 <HAL_DMA_Abort+0x20e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a33      	ldr	r2, [pc, #204]	; (8002764 <HAL_DMA_Abort+0x22c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d054      	beq.n	8002746 <HAL_DMA_Abort+0x20e>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a31      	ldr	r2, [pc, #196]	; (8002768 <HAL_DMA_Abort+0x230>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d04f      	beq.n	8002746 <HAL_DMA_Abort+0x20e>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a30      	ldr	r2, [pc, #192]	; (800276c <HAL_DMA_Abort+0x234>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d04a      	beq.n	8002746 <HAL_DMA_Abort+0x20e>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a2e      	ldr	r2, [pc, #184]	; (8002770 <HAL_DMA_Abort+0x238>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d045      	beq.n	8002746 <HAL_DMA_Abort+0x20e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a2d      	ldr	r2, [pc, #180]	; (8002774 <HAL_DMA_Abort+0x23c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d040      	beq.n	8002746 <HAL_DMA_Abort+0x20e>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a2b      	ldr	r2, [pc, #172]	; (8002778 <HAL_DMA_Abort+0x240>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d03b      	beq.n	8002746 <HAL_DMA_Abort+0x20e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a2a      	ldr	r2, [pc, #168]	; (800277c <HAL_DMA_Abort+0x244>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d036      	beq.n	8002746 <HAL_DMA_Abort+0x20e>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a28      	ldr	r2, [pc, #160]	; (8002780 <HAL_DMA_Abort+0x248>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d031      	beq.n	8002746 <HAL_DMA_Abort+0x20e>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a27      	ldr	r2, [pc, #156]	; (8002784 <HAL_DMA_Abort+0x24c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d02c      	beq.n	8002746 <HAL_DMA_Abort+0x20e>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a25      	ldr	r2, [pc, #148]	; (8002788 <HAL_DMA_Abort+0x250>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d027      	beq.n	8002746 <HAL_DMA_Abort+0x20e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a24      	ldr	r2, [pc, #144]	; (800278c <HAL_DMA_Abort+0x254>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d022      	beq.n	8002746 <HAL_DMA_Abort+0x20e>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a22      	ldr	r2, [pc, #136]	; (8002790 <HAL_DMA_Abort+0x258>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d01d      	beq.n	8002746 <HAL_DMA_Abort+0x20e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a21      	ldr	r2, [pc, #132]	; (8002794 <HAL_DMA_Abort+0x25c>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d018      	beq.n	8002746 <HAL_DMA_Abort+0x20e>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a1f      	ldr	r2, [pc, #124]	; (8002798 <HAL_DMA_Abort+0x260>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d013      	beq.n	8002746 <HAL_DMA_Abort+0x20e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a1e      	ldr	r2, [pc, #120]	; (800279c <HAL_DMA_Abort+0x264>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d00e      	beq.n	8002746 <HAL_DMA_Abort+0x20e>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a1c      	ldr	r2, [pc, #112]	; (80027a0 <HAL_DMA_Abort+0x268>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d009      	beq.n	8002746 <HAL_DMA_Abort+0x20e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a1b      	ldr	r2, [pc, #108]	; (80027a4 <HAL_DMA_Abort+0x26c>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d004      	beq.n	8002746 <HAL_DMA_Abort+0x20e>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a19      	ldr	r2, [pc, #100]	; (80027a8 <HAL_DMA_Abort+0x270>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d132      	bne.n	80027ac <HAL_DMA_Abort+0x274>
 8002746:	2301      	movs	r3, #1
 8002748:	e031      	b.n	80027ae <HAL_DMA_Abort+0x276>
 800274a:	bf00      	nop
 800274c:	40020010 	.word	0x40020010
 8002750:	40020028 	.word	0x40020028
 8002754:	40020040 	.word	0x40020040
 8002758:	40020058 	.word	0x40020058
 800275c:	40020070 	.word	0x40020070
 8002760:	40020088 	.word	0x40020088
 8002764:	400200a0 	.word	0x400200a0
 8002768:	400200b8 	.word	0x400200b8
 800276c:	40020410 	.word	0x40020410
 8002770:	40020428 	.word	0x40020428
 8002774:	40020440 	.word	0x40020440
 8002778:	40020458 	.word	0x40020458
 800277c:	40020470 	.word	0x40020470
 8002780:	40020488 	.word	0x40020488
 8002784:	400204a0 	.word	0x400204a0
 8002788:	400204b8 	.word	0x400204b8
 800278c:	58025408 	.word	0x58025408
 8002790:	5802541c 	.word	0x5802541c
 8002794:	58025430 	.word	0x58025430
 8002798:	58025444 	.word	0x58025444
 800279c:	58025458 	.word	0x58025458
 80027a0:	5802546c 	.word	0x5802546c
 80027a4:	58025480 	.word	0x58025480
 80027a8:	58025494 	.word	0x58025494
 80027ac:	2300      	movs	r3, #0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d007      	beq.n	80027c2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a6d      	ldr	r2, [pc, #436]	; (800297c <HAL_DMA_Abort+0x444>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d04a      	beq.n	8002862 <HAL_DMA_Abort+0x32a>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a6b      	ldr	r2, [pc, #428]	; (8002980 <HAL_DMA_Abort+0x448>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d045      	beq.n	8002862 <HAL_DMA_Abort+0x32a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a6a      	ldr	r2, [pc, #424]	; (8002984 <HAL_DMA_Abort+0x44c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d040      	beq.n	8002862 <HAL_DMA_Abort+0x32a>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a68      	ldr	r2, [pc, #416]	; (8002988 <HAL_DMA_Abort+0x450>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d03b      	beq.n	8002862 <HAL_DMA_Abort+0x32a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a67      	ldr	r2, [pc, #412]	; (800298c <HAL_DMA_Abort+0x454>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d036      	beq.n	8002862 <HAL_DMA_Abort+0x32a>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a65      	ldr	r2, [pc, #404]	; (8002990 <HAL_DMA_Abort+0x458>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d031      	beq.n	8002862 <HAL_DMA_Abort+0x32a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a64      	ldr	r2, [pc, #400]	; (8002994 <HAL_DMA_Abort+0x45c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d02c      	beq.n	8002862 <HAL_DMA_Abort+0x32a>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a62      	ldr	r2, [pc, #392]	; (8002998 <HAL_DMA_Abort+0x460>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d027      	beq.n	8002862 <HAL_DMA_Abort+0x32a>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a61      	ldr	r2, [pc, #388]	; (800299c <HAL_DMA_Abort+0x464>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d022      	beq.n	8002862 <HAL_DMA_Abort+0x32a>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a5f      	ldr	r2, [pc, #380]	; (80029a0 <HAL_DMA_Abort+0x468>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d01d      	beq.n	8002862 <HAL_DMA_Abort+0x32a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a5e      	ldr	r2, [pc, #376]	; (80029a4 <HAL_DMA_Abort+0x46c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d018      	beq.n	8002862 <HAL_DMA_Abort+0x32a>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a5c      	ldr	r2, [pc, #368]	; (80029a8 <HAL_DMA_Abort+0x470>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d013      	beq.n	8002862 <HAL_DMA_Abort+0x32a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a5b      	ldr	r2, [pc, #364]	; (80029ac <HAL_DMA_Abort+0x474>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d00e      	beq.n	8002862 <HAL_DMA_Abort+0x32a>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a59      	ldr	r2, [pc, #356]	; (80029b0 <HAL_DMA_Abort+0x478>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d009      	beq.n	8002862 <HAL_DMA_Abort+0x32a>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a58      	ldr	r2, [pc, #352]	; (80029b4 <HAL_DMA_Abort+0x47c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d004      	beq.n	8002862 <HAL_DMA_Abort+0x32a>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a56      	ldr	r2, [pc, #344]	; (80029b8 <HAL_DMA_Abort+0x480>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d108      	bne.n	8002874 <HAL_DMA_Abort+0x33c>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0201 	bic.w	r2, r2, #1
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	e007      	b.n	8002884 <HAL_DMA_Abort+0x34c>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0201 	bic.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002884:	e013      	b.n	80028ae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002886:	f7fe ff75 	bl	8001774 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b05      	cmp	r3, #5
 8002892:	d90c      	bls.n	80028ae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2220      	movs	r2, #32
 8002898:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2203      	movs	r2, #3
 800289e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e12d      	b.n	8002b0a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1e5      	bne.n	8002886 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a2f      	ldr	r2, [pc, #188]	; (800297c <HAL_DMA_Abort+0x444>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d04a      	beq.n	800295a <HAL_DMA_Abort+0x422>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a2d      	ldr	r2, [pc, #180]	; (8002980 <HAL_DMA_Abort+0x448>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d045      	beq.n	800295a <HAL_DMA_Abort+0x422>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a2c      	ldr	r2, [pc, #176]	; (8002984 <HAL_DMA_Abort+0x44c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d040      	beq.n	800295a <HAL_DMA_Abort+0x422>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a2a      	ldr	r2, [pc, #168]	; (8002988 <HAL_DMA_Abort+0x450>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d03b      	beq.n	800295a <HAL_DMA_Abort+0x422>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a29      	ldr	r2, [pc, #164]	; (800298c <HAL_DMA_Abort+0x454>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d036      	beq.n	800295a <HAL_DMA_Abort+0x422>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a27      	ldr	r2, [pc, #156]	; (8002990 <HAL_DMA_Abort+0x458>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d031      	beq.n	800295a <HAL_DMA_Abort+0x422>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a26      	ldr	r2, [pc, #152]	; (8002994 <HAL_DMA_Abort+0x45c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d02c      	beq.n	800295a <HAL_DMA_Abort+0x422>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a24      	ldr	r2, [pc, #144]	; (8002998 <HAL_DMA_Abort+0x460>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d027      	beq.n	800295a <HAL_DMA_Abort+0x422>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a23      	ldr	r2, [pc, #140]	; (800299c <HAL_DMA_Abort+0x464>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d022      	beq.n	800295a <HAL_DMA_Abort+0x422>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a21      	ldr	r2, [pc, #132]	; (80029a0 <HAL_DMA_Abort+0x468>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d01d      	beq.n	800295a <HAL_DMA_Abort+0x422>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a20      	ldr	r2, [pc, #128]	; (80029a4 <HAL_DMA_Abort+0x46c>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d018      	beq.n	800295a <HAL_DMA_Abort+0x422>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a1e      	ldr	r2, [pc, #120]	; (80029a8 <HAL_DMA_Abort+0x470>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d013      	beq.n	800295a <HAL_DMA_Abort+0x422>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a1d      	ldr	r2, [pc, #116]	; (80029ac <HAL_DMA_Abort+0x474>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d00e      	beq.n	800295a <HAL_DMA_Abort+0x422>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a1b      	ldr	r2, [pc, #108]	; (80029b0 <HAL_DMA_Abort+0x478>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d009      	beq.n	800295a <HAL_DMA_Abort+0x422>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a1a      	ldr	r2, [pc, #104]	; (80029b4 <HAL_DMA_Abort+0x47c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d004      	beq.n	800295a <HAL_DMA_Abort+0x422>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a18      	ldr	r2, [pc, #96]	; (80029b8 <HAL_DMA_Abort+0x480>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d101      	bne.n	800295e <HAL_DMA_Abort+0x426>
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <HAL_DMA_Abort+0x428>
 800295e:	2300      	movs	r3, #0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d02b      	beq.n	80029bc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002968:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296e:	f003 031f 	and.w	r3, r3, #31
 8002972:	223f      	movs	r2, #63	; 0x3f
 8002974:	409a      	lsls	r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	609a      	str	r2, [r3, #8]
 800297a:	e02a      	b.n	80029d2 <HAL_DMA_Abort+0x49a>
 800297c:	40020010 	.word	0x40020010
 8002980:	40020028 	.word	0x40020028
 8002984:	40020040 	.word	0x40020040
 8002988:	40020058 	.word	0x40020058
 800298c:	40020070 	.word	0x40020070
 8002990:	40020088 	.word	0x40020088
 8002994:	400200a0 	.word	0x400200a0
 8002998:	400200b8 	.word	0x400200b8
 800299c:	40020410 	.word	0x40020410
 80029a0:	40020428 	.word	0x40020428
 80029a4:	40020440 	.word	0x40020440
 80029a8:	40020458 	.word	0x40020458
 80029ac:	40020470 	.word	0x40020470
 80029b0:	40020488 	.word	0x40020488
 80029b4:	400204a0 	.word	0x400204a0
 80029b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c6:	f003 031f 	and.w	r3, r3, #31
 80029ca:	2201      	movs	r2, #1
 80029cc:	409a      	lsls	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a4f      	ldr	r2, [pc, #316]	; (8002b14 <HAL_DMA_Abort+0x5dc>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d072      	beq.n	8002ac2 <HAL_DMA_Abort+0x58a>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a4d      	ldr	r2, [pc, #308]	; (8002b18 <HAL_DMA_Abort+0x5e0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d06d      	beq.n	8002ac2 <HAL_DMA_Abort+0x58a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a4c      	ldr	r2, [pc, #304]	; (8002b1c <HAL_DMA_Abort+0x5e4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d068      	beq.n	8002ac2 <HAL_DMA_Abort+0x58a>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a4a      	ldr	r2, [pc, #296]	; (8002b20 <HAL_DMA_Abort+0x5e8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d063      	beq.n	8002ac2 <HAL_DMA_Abort+0x58a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a49      	ldr	r2, [pc, #292]	; (8002b24 <HAL_DMA_Abort+0x5ec>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d05e      	beq.n	8002ac2 <HAL_DMA_Abort+0x58a>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a47      	ldr	r2, [pc, #284]	; (8002b28 <HAL_DMA_Abort+0x5f0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d059      	beq.n	8002ac2 <HAL_DMA_Abort+0x58a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a46      	ldr	r2, [pc, #280]	; (8002b2c <HAL_DMA_Abort+0x5f4>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d054      	beq.n	8002ac2 <HAL_DMA_Abort+0x58a>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a44      	ldr	r2, [pc, #272]	; (8002b30 <HAL_DMA_Abort+0x5f8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d04f      	beq.n	8002ac2 <HAL_DMA_Abort+0x58a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a43      	ldr	r2, [pc, #268]	; (8002b34 <HAL_DMA_Abort+0x5fc>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d04a      	beq.n	8002ac2 <HAL_DMA_Abort+0x58a>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a41      	ldr	r2, [pc, #260]	; (8002b38 <HAL_DMA_Abort+0x600>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d045      	beq.n	8002ac2 <HAL_DMA_Abort+0x58a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a40      	ldr	r2, [pc, #256]	; (8002b3c <HAL_DMA_Abort+0x604>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d040      	beq.n	8002ac2 <HAL_DMA_Abort+0x58a>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a3e      	ldr	r2, [pc, #248]	; (8002b40 <HAL_DMA_Abort+0x608>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d03b      	beq.n	8002ac2 <HAL_DMA_Abort+0x58a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a3d      	ldr	r2, [pc, #244]	; (8002b44 <HAL_DMA_Abort+0x60c>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d036      	beq.n	8002ac2 <HAL_DMA_Abort+0x58a>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a3b      	ldr	r2, [pc, #236]	; (8002b48 <HAL_DMA_Abort+0x610>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d031      	beq.n	8002ac2 <HAL_DMA_Abort+0x58a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a3a      	ldr	r2, [pc, #232]	; (8002b4c <HAL_DMA_Abort+0x614>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d02c      	beq.n	8002ac2 <HAL_DMA_Abort+0x58a>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a38      	ldr	r2, [pc, #224]	; (8002b50 <HAL_DMA_Abort+0x618>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d027      	beq.n	8002ac2 <HAL_DMA_Abort+0x58a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a37      	ldr	r2, [pc, #220]	; (8002b54 <HAL_DMA_Abort+0x61c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d022      	beq.n	8002ac2 <HAL_DMA_Abort+0x58a>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a35      	ldr	r2, [pc, #212]	; (8002b58 <HAL_DMA_Abort+0x620>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d01d      	beq.n	8002ac2 <HAL_DMA_Abort+0x58a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a34      	ldr	r2, [pc, #208]	; (8002b5c <HAL_DMA_Abort+0x624>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d018      	beq.n	8002ac2 <HAL_DMA_Abort+0x58a>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a32      	ldr	r2, [pc, #200]	; (8002b60 <HAL_DMA_Abort+0x628>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d013      	beq.n	8002ac2 <HAL_DMA_Abort+0x58a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a31      	ldr	r2, [pc, #196]	; (8002b64 <HAL_DMA_Abort+0x62c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d00e      	beq.n	8002ac2 <HAL_DMA_Abort+0x58a>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a2f      	ldr	r2, [pc, #188]	; (8002b68 <HAL_DMA_Abort+0x630>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d009      	beq.n	8002ac2 <HAL_DMA_Abort+0x58a>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a2e      	ldr	r2, [pc, #184]	; (8002b6c <HAL_DMA_Abort+0x634>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d004      	beq.n	8002ac2 <HAL_DMA_Abort+0x58a>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a2c      	ldr	r2, [pc, #176]	; (8002b70 <HAL_DMA_Abort+0x638>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d101      	bne.n	8002ac6 <HAL_DMA_Abort+0x58e>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <HAL_DMA_Abort+0x590>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d015      	beq.n	8002af8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ad4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00c      	beq.n	8002af8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ae8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002aec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002af6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40020010 	.word	0x40020010
 8002b18:	40020028 	.word	0x40020028
 8002b1c:	40020040 	.word	0x40020040
 8002b20:	40020058 	.word	0x40020058
 8002b24:	40020070 	.word	0x40020070
 8002b28:	40020088 	.word	0x40020088
 8002b2c:	400200a0 	.word	0x400200a0
 8002b30:	400200b8 	.word	0x400200b8
 8002b34:	40020410 	.word	0x40020410
 8002b38:	40020428 	.word	0x40020428
 8002b3c:	40020440 	.word	0x40020440
 8002b40:	40020458 	.word	0x40020458
 8002b44:	40020470 	.word	0x40020470
 8002b48:	40020488 	.word	0x40020488
 8002b4c:	400204a0 	.word	0x400204a0
 8002b50:	400204b8 	.word	0x400204b8
 8002b54:	58025408 	.word	0x58025408
 8002b58:	5802541c 	.word	0x5802541c
 8002b5c:	58025430 	.word	0x58025430
 8002b60:	58025444 	.word	0x58025444
 8002b64:	58025458 	.word	0x58025458
 8002b68:	5802546c 	.word	0x5802546c
 8002b6c:	58025480 	.word	0x58025480
 8002b70:	58025494 	.word	0x58025494

08002b74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e237      	b.n	8002ff6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d004      	beq.n	8002b9c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2280      	movs	r2, #128	; 0x80
 8002b96:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e22c      	b.n	8002ff6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a5c      	ldr	r2, [pc, #368]	; (8002d14 <HAL_DMA_Abort_IT+0x1a0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d04a      	beq.n	8002c3c <HAL_DMA_Abort_IT+0xc8>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a5b      	ldr	r2, [pc, #364]	; (8002d18 <HAL_DMA_Abort_IT+0x1a4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d045      	beq.n	8002c3c <HAL_DMA_Abort_IT+0xc8>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a59      	ldr	r2, [pc, #356]	; (8002d1c <HAL_DMA_Abort_IT+0x1a8>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d040      	beq.n	8002c3c <HAL_DMA_Abort_IT+0xc8>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a58      	ldr	r2, [pc, #352]	; (8002d20 <HAL_DMA_Abort_IT+0x1ac>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d03b      	beq.n	8002c3c <HAL_DMA_Abort_IT+0xc8>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a56      	ldr	r2, [pc, #344]	; (8002d24 <HAL_DMA_Abort_IT+0x1b0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d036      	beq.n	8002c3c <HAL_DMA_Abort_IT+0xc8>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a55      	ldr	r2, [pc, #340]	; (8002d28 <HAL_DMA_Abort_IT+0x1b4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d031      	beq.n	8002c3c <HAL_DMA_Abort_IT+0xc8>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a53      	ldr	r2, [pc, #332]	; (8002d2c <HAL_DMA_Abort_IT+0x1b8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d02c      	beq.n	8002c3c <HAL_DMA_Abort_IT+0xc8>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a52      	ldr	r2, [pc, #328]	; (8002d30 <HAL_DMA_Abort_IT+0x1bc>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d027      	beq.n	8002c3c <HAL_DMA_Abort_IT+0xc8>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a50      	ldr	r2, [pc, #320]	; (8002d34 <HAL_DMA_Abort_IT+0x1c0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d022      	beq.n	8002c3c <HAL_DMA_Abort_IT+0xc8>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a4f      	ldr	r2, [pc, #316]	; (8002d38 <HAL_DMA_Abort_IT+0x1c4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d01d      	beq.n	8002c3c <HAL_DMA_Abort_IT+0xc8>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a4d      	ldr	r2, [pc, #308]	; (8002d3c <HAL_DMA_Abort_IT+0x1c8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d018      	beq.n	8002c3c <HAL_DMA_Abort_IT+0xc8>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a4c      	ldr	r2, [pc, #304]	; (8002d40 <HAL_DMA_Abort_IT+0x1cc>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d013      	beq.n	8002c3c <HAL_DMA_Abort_IT+0xc8>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a4a      	ldr	r2, [pc, #296]	; (8002d44 <HAL_DMA_Abort_IT+0x1d0>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00e      	beq.n	8002c3c <HAL_DMA_Abort_IT+0xc8>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a49      	ldr	r2, [pc, #292]	; (8002d48 <HAL_DMA_Abort_IT+0x1d4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d009      	beq.n	8002c3c <HAL_DMA_Abort_IT+0xc8>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a47      	ldr	r2, [pc, #284]	; (8002d4c <HAL_DMA_Abort_IT+0x1d8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d004      	beq.n	8002c3c <HAL_DMA_Abort_IT+0xc8>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a46      	ldr	r2, [pc, #280]	; (8002d50 <HAL_DMA_Abort_IT+0x1dc>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d101      	bne.n	8002c40 <HAL_DMA_Abort_IT+0xcc>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <HAL_DMA_Abort_IT+0xce>
 8002c40:	2300      	movs	r3, #0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 8086 	beq.w	8002d54 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2204      	movs	r2, #4
 8002c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a2f      	ldr	r2, [pc, #188]	; (8002d14 <HAL_DMA_Abort_IT+0x1a0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d04a      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0x17c>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a2e      	ldr	r2, [pc, #184]	; (8002d18 <HAL_DMA_Abort_IT+0x1a4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d045      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0x17c>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a2c      	ldr	r2, [pc, #176]	; (8002d1c <HAL_DMA_Abort_IT+0x1a8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d040      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0x17c>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a2b      	ldr	r2, [pc, #172]	; (8002d20 <HAL_DMA_Abort_IT+0x1ac>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d03b      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0x17c>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a29      	ldr	r2, [pc, #164]	; (8002d24 <HAL_DMA_Abort_IT+0x1b0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d036      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0x17c>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a28      	ldr	r2, [pc, #160]	; (8002d28 <HAL_DMA_Abort_IT+0x1b4>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d031      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0x17c>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a26      	ldr	r2, [pc, #152]	; (8002d2c <HAL_DMA_Abort_IT+0x1b8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d02c      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0x17c>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a25      	ldr	r2, [pc, #148]	; (8002d30 <HAL_DMA_Abort_IT+0x1bc>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d027      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0x17c>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a23      	ldr	r2, [pc, #140]	; (8002d34 <HAL_DMA_Abort_IT+0x1c0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d022      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0x17c>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a22      	ldr	r2, [pc, #136]	; (8002d38 <HAL_DMA_Abort_IT+0x1c4>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d01d      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0x17c>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a20      	ldr	r2, [pc, #128]	; (8002d3c <HAL_DMA_Abort_IT+0x1c8>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d018      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0x17c>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a1f      	ldr	r2, [pc, #124]	; (8002d40 <HAL_DMA_Abort_IT+0x1cc>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d013      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0x17c>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1d      	ldr	r2, [pc, #116]	; (8002d44 <HAL_DMA_Abort_IT+0x1d0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00e      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0x17c>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a1c      	ldr	r2, [pc, #112]	; (8002d48 <HAL_DMA_Abort_IT+0x1d4>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d009      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0x17c>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a1a      	ldr	r2, [pc, #104]	; (8002d4c <HAL_DMA_Abort_IT+0x1d8>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d004      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0x17c>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a19      	ldr	r2, [pc, #100]	; (8002d50 <HAL_DMA_Abort_IT+0x1dc>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d108      	bne.n	8002d02 <HAL_DMA_Abort_IT+0x18e>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0201 	bic.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	e178      	b.n	8002ff4 <HAL_DMA_Abort_IT+0x480>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0201 	bic.w	r2, r2, #1
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	e16f      	b.n	8002ff4 <HAL_DMA_Abort_IT+0x480>
 8002d14:	40020010 	.word	0x40020010
 8002d18:	40020028 	.word	0x40020028
 8002d1c:	40020040 	.word	0x40020040
 8002d20:	40020058 	.word	0x40020058
 8002d24:	40020070 	.word	0x40020070
 8002d28:	40020088 	.word	0x40020088
 8002d2c:	400200a0 	.word	0x400200a0
 8002d30:	400200b8 	.word	0x400200b8
 8002d34:	40020410 	.word	0x40020410
 8002d38:	40020428 	.word	0x40020428
 8002d3c:	40020440 	.word	0x40020440
 8002d40:	40020458 	.word	0x40020458
 8002d44:	40020470 	.word	0x40020470
 8002d48:	40020488 	.word	0x40020488
 8002d4c:	400204a0 	.word	0x400204a0
 8002d50:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 020e 	bic.w	r2, r2, #14
 8002d62:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a6c      	ldr	r2, [pc, #432]	; (8002f1c <HAL_DMA_Abort_IT+0x3a8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d04a      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x290>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a6b      	ldr	r2, [pc, #428]	; (8002f20 <HAL_DMA_Abort_IT+0x3ac>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d045      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x290>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a69      	ldr	r2, [pc, #420]	; (8002f24 <HAL_DMA_Abort_IT+0x3b0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d040      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x290>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a68      	ldr	r2, [pc, #416]	; (8002f28 <HAL_DMA_Abort_IT+0x3b4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d03b      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x290>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a66      	ldr	r2, [pc, #408]	; (8002f2c <HAL_DMA_Abort_IT+0x3b8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d036      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x290>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a65      	ldr	r2, [pc, #404]	; (8002f30 <HAL_DMA_Abort_IT+0x3bc>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d031      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x290>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a63      	ldr	r2, [pc, #396]	; (8002f34 <HAL_DMA_Abort_IT+0x3c0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d02c      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x290>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a62      	ldr	r2, [pc, #392]	; (8002f38 <HAL_DMA_Abort_IT+0x3c4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d027      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x290>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a60      	ldr	r2, [pc, #384]	; (8002f3c <HAL_DMA_Abort_IT+0x3c8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d022      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x290>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a5f      	ldr	r2, [pc, #380]	; (8002f40 <HAL_DMA_Abort_IT+0x3cc>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d01d      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x290>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a5d      	ldr	r2, [pc, #372]	; (8002f44 <HAL_DMA_Abort_IT+0x3d0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d018      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x290>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a5c      	ldr	r2, [pc, #368]	; (8002f48 <HAL_DMA_Abort_IT+0x3d4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d013      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x290>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a5a      	ldr	r2, [pc, #360]	; (8002f4c <HAL_DMA_Abort_IT+0x3d8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00e      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x290>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a59      	ldr	r2, [pc, #356]	; (8002f50 <HAL_DMA_Abort_IT+0x3dc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d009      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x290>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a57      	ldr	r2, [pc, #348]	; (8002f54 <HAL_DMA_Abort_IT+0x3e0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d004      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x290>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a56      	ldr	r2, [pc, #344]	; (8002f58 <HAL_DMA_Abort_IT+0x3e4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d108      	bne.n	8002e16 <HAL_DMA_Abort_IT+0x2a2>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0201 	bic.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	e007      	b.n	8002e26 <HAL_DMA_Abort_IT+0x2b2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0201 	bic.w	r2, r2, #1
 8002e24:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a3c      	ldr	r2, [pc, #240]	; (8002f1c <HAL_DMA_Abort_IT+0x3a8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d072      	beq.n	8002f16 <HAL_DMA_Abort_IT+0x3a2>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a3a      	ldr	r2, [pc, #232]	; (8002f20 <HAL_DMA_Abort_IT+0x3ac>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d06d      	beq.n	8002f16 <HAL_DMA_Abort_IT+0x3a2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a39      	ldr	r2, [pc, #228]	; (8002f24 <HAL_DMA_Abort_IT+0x3b0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d068      	beq.n	8002f16 <HAL_DMA_Abort_IT+0x3a2>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a37      	ldr	r2, [pc, #220]	; (8002f28 <HAL_DMA_Abort_IT+0x3b4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d063      	beq.n	8002f16 <HAL_DMA_Abort_IT+0x3a2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a36      	ldr	r2, [pc, #216]	; (8002f2c <HAL_DMA_Abort_IT+0x3b8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d05e      	beq.n	8002f16 <HAL_DMA_Abort_IT+0x3a2>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a34      	ldr	r2, [pc, #208]	; (8002f30 <HAL_DMA_Abort_IT+0x3bc>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d059      	beq.n	8002f16 <HAL_DMA_Abort_IT+0x3a2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a33      	ldr	r2, [pc, #204]	; (8002f34 <HAL_DMA_Abort_IT+0x3c0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d054      	beq.n	8002f16 <HAL_DMA_Abort_IT+0x3a2>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a31      	ldr	r2, [pc, #196]	; (8002f38 <HAL_DMA_Abort_IT+0x3c4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d04f      	beq.n	8002f16 <HAL_DMA_Abort_IT+0x3a2>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a30      	ldr	r2, [pc, #192]	; (8002f3c <HAL_DMA_Abort_IT+0x3c8>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d04a      	beq.n	8002f16 <HAL_DMA_Abort_IT+0x3a2>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a2e      	ldr	r2, [pc, #184]	; (8002f40 <HAL_DMA_Abort_IT+0x3cc>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d045      	beq.n	8002f16 <HAL_DMA_Abort_IT+0x3a2>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a2d      	ldr	r2, [pc, #180]	; (8002f44 <HAL_DMA_Abort_IT+0x3d0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d040      	beq.n	8002f16 <HAL_DMA_Abort_IT+0x3a2>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a2b      	ldr	r2, [pc, #172]	; (8002f48 <HAL_DMA_Abort_IT+0x3d4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d03b      	beq.n	8002f16 <HAL_DMA_Abort_IT+0x3a2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a2a      	ldr	r2, [pc, #168]	; (8002f4c <HAL_DMA_Abort_IT+0x3d8>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d036      	beq.n	8002f16 <HAL_DMA_Abort_IT+0x3a2>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a28      	ldr	r2, [pc, #160]	; (8002f50 <HAL_DMA_Abort_IT+0x3dc>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d031      	beq.n	8002f16 <HAL_DMA_Abort_IT+0x3a2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a27      	ldr	r2, [pc, #156]	; (8002f54 <HAL_DMA_Abort_IT+0x3e0>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d02c      	beq.n	8002f16 <HAL_DMA_Abort_IT+0x3a2>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a25      	ldr	r2, [pc, #148]	; (8002f58 <HAL_DMA_Abort_IT+0x3e4>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d027      	beq.n	8002f16 <HAL_DMA_Abort_IT+0x3a2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a24      	ldr	r2, [pc, #144]	; (8002f5c <HAL_DMA_Abort_IT+0x3e8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d022      	beq.n	8002f16 <HAL_DMA_Abort_IT+0x3a2>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a22      	ldr	r2, [pc, #136]	; (8002f60 <HAL_DMA_Abort_IT+0x3ec>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d01d      	beq.n	8002f16 <HAL_DMA_Abort_IT+0x3a2>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a21      	ldr	r2, [pc, #132]	; (8002f64 <HAL_DMA_Abort_IT+0x3f0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d018      	beq.n	8002f16 <HAL_DMA_Abort_IT+0x3a2>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a1f      	ldr	r2, [pc, #124]	; (8002f68 <HAL_DMA_Abort_IT+0x3f4>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d013      	beq.n	8002f16 <HAL_DMA_Abort_IT+0x3a2>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a1e      	ldr	r2, [pc, #120]	; (8002f6c <HAL_DMA_Abort_IT+0x3f8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d00e      	beq.n	8002f16 <HAL_DMA_Abort_IT+0x3a2>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a1c      	ldr	r2, [pc, #112]	; (8002f70 <HAL_DMA_Abort_IT+0x3fc>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d009      	beq.n	8002f16 <HAL_DMA_Abort_IT+0x3a2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a1b      	ldr	r2, [pc, #108]	; (8002f74 <HAL_DMA_Abort_IT+0x400>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d004      	beq.n	8002f16 <HAL_DMA_Abort_IT+0x3a2>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a19      	ldr	r2, [pc, #100]	; (8002f78 <HAL_DMA_Abort_IT+0x404>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d132      	bne.n	8002f7c <HAL_DMA_Abort_IT+0x408>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e031      	b.n	8002f7e <HAL_DMA_Abort_IT+0x40a>
 8002f1a:	bf00      	nop
 8002f1c:	40020010 	.word	0x40020010
 8002f20:	40020028 	.word	0x40020028
 8002f24:	40020040 	.word	0x40020040
 8002f28:	40020058 	.word	0x40020058
 8002f2c:	40020070 	.word	0x40020070
 8002f30:	40020088 	.word	0x40020088
 8002f34:	400200a0 	.word	0x400200a0
 8002f38:	400200b8 	.word	0x400200b8
 8002f3c:	40020410 	.word	0x40020410
 8002f40:	40020428 	.word	0x40020428
 8002f44:	40020440 	.word	0x40020440
 8002f48:	40020458 	.word	0x40020458
 8002f4c:	40020470 	.word	0x40020470
 8002f50:	40020488 	.word	0x40020488
 8002f54:	400204a0 	.word	0x400204a0
 8002f58:	400204b8 	.word	0x400204b8
 8002f5c:	58025408 	.word	0x58025408
 8002f60:	5802541c 	.word	0x5802541c
 8002f64:	58025430 	.word	0x58025430
 8002f68:	58025444 	.word	0x58025444
 8002f6c:	58025458 	.word	0x58025458
 8002f70:	5802546c 	.word	0x5802546c
 8002f74:	58025480 	.word	0x58025480
 8002f78:	58025494 	.word	0x58025494
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d028      	beq.n	8002fd4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f90:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f96:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	409a      	lsls	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002fb0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00c      	beq.n	8002fd4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fc8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002fd2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop

08003000 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b08a      	sub	sp, #40	; 0x28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800300c:	4b67      	ldr	r3, [pc, #412]	; (80031ac <HAL_DMA_IRQHandler+0x1ac>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a67      	ldr	r2, [pc, #412]	; (80031b0 <HAL_DMA_IRQHandler+0x1b0>)
 8003012:	fba2 2303 	umull	r2, r3, r2, r3
 8003016:	0a9b      	lsrs	r3, r3, #10
 8003018:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003024:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a5f      	ldr	r2, [pc, #380]	; (80031b4 <HAL_DMA_IRQHandler+0x1b4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d04a      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a5d      	ldr	r2, [pc, #372]	; (80031b8 <HAL_DMA_IRQHandler+0x1b8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d045      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a5c      	ldr	r2, [pc, #368]	; (80031bc <HAL_DMA_IRQHandler+0x1bc>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d040      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a5a      	ldr	r2, [pc, #360]	; (80031c0 <HAL_DMA_IRQHandler+0x1c0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d03b      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a59      	ldr	r2, [pc, #356]	; (80031c4 <HAL_DMA_IRQHandler+0x1c4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d036      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a57      	ldr	r2, [pc, #348]	; (80031c8 <HAL_DMA_IRQHandler+0x1c8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d031      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a56      	ldr	r2, [pc, #344]	; (80031cc <HAL_DMA_IRQHandler+0x1cc>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d02c      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a54      	ldr	r2, [pc, #336]	; (80031d0 <HAL_DMA_IRQHandler+0x1d0>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d027      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a53      	ldr	r2, [pc, #332]	; (80031d4 <HAL_DMA_IRQHandler+0x1d4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d022      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a51      	ldr	r2, [pc, #324]	; (80031d8 <HAL_DMA_IRQHandler+0x1d8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d01d      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a50      	ldr	r2, [pc, #320]	; (80031dc <HAL_DMA_IRQHandler+0x1dc>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d018      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a4e      	ldr	r2, [pc, #312]	; (80031e0 <HAL_DMA_IRQHandler+0x1e0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d013      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a4d      	ldr	r2, [pc, #308]	; (80031e4 <HAL_DMA_IRQHandler+0x1e4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d00e      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a4b      	ldr	r2, [pc, #300]	; (80031e8 <HAL_DMA_IRQHandler+0x1e8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d009      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a4a      	ldr	r2, [pc, #296]	; (80031ec <HAL_DMA_IRQHandler+0x1ec>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d004      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xd2>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a48      	ldr	r2, [pc, #288]	; (80031f0 <HAL_DMA_IRQHandler+0x1f0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d101      	bne.n	80030d6 <HAL_DMA_IRQHandler+0xd6>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <HAL_DMA_IRQHandler+0xd8>
 80030d6:	2300      	movs	r3, #0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 842b 	beq.w	8003934 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	2208      	movs	r2, #8
 80030e8:	409a      	lsls	r2, r3
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	4013      	ands	r3, r2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 80a2 	beq.w	8003238 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a2e      	ldr	r2, [pc, #184]	; (80031b4 <HAL_DMA_IRQHandler+0x1b4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d04a      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a2d      	ldr	r2, [pc, #180]	; (80031b8 <HAL_DMA_IRQHandler+0x1b8>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d045      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a2b      	ldr	r2, [pc, #172]	; (80031bc <HAL_DMA_IRQHandler+0x1bc>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d040      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a2a      	ldr	r2, [pc, #168]	; (80031c0 <HAL_DMA_IRQHandler+0x1c0>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d03b      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a28      	ldr	r2, [pc, #160]	; (80031c4 <HAL_DMA_IRQHandler+0x1c4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d036      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a27      	ldr	r2, [pc, #156]	; (80031c8 <HAL_DMA_IRQHandler+0x1c8>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d031      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a25      	ldr	r2, [pc, #148]	; (80031cc <HAL_DMA_IRQHandler+0x1cc>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d02c      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a24      	ldr	r2, [pc, #144]	; (80031d0 <HAL_DMA_IRQHandler+0x1d0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d027      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a22      	ldr	r2, [pc, #136]	; (80031d4 <HAL_DMA_IRQHandler+0x1d4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d022      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a21      	ldr	r2, [pc, #132]	; (80031d8 <HAL_DMA_IRQHandler+0x1d8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d01d      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a1f      	ldr	r2, [pc, #124]	; (80031dc <HAL_DMA_IRQHandler+0x1dc>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d018      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a1e      	ldr	r2, [pc, #120]	; (80031e0 <HAL_DMA_IRQHandler+0x1e0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d013      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a1c      	ldr	r2, [pc, #112]	; (80031e4 <HAL_DMA_IRQHandler+0x1e4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00e      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a1b      	ldr	r2, [pc, #108]	; (80031e8 <HAL_DMA_IRQHandler+0x1e8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d009      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a19      	ldr	r2, [pc, #100]	; (80031ec <HAL_DMA_IRQHandler+0x1ec>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <HAL_DMA_IRQHandler+0x194>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a18      	ldr	r2, [pc, #96]	; (80031f0 <HAL_DMA_IRQHandler+0x1f0>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d12f      	bne.n	80031f4 <HAL_DMA_IRQHandler+0x1f4>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	2b00      	cmp	r3, #0
 80031a0:	bf14      	ite	ne
 80031a2:	2301      	movne	r3, #1
 80031a4:	2300      	moveq	r3, #0
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	e02e      	b.n	8003208 <HAL_DMA_IRQHandler+0x208>
 80031aa:	bf00      	nop
 80031ac:	24000000 	.word	0x24000000
 80031b0:	1b4e81b5 	.word	0x1b4e81b5
 80031b4:	40020010 	.word	0x40020010
 80031b8:	40020028 	.word	0x40020028
 80031bc:	40020040 	.word	0x40020040
 80031c0:	40020058 	.word	0x40020058
 80031c4:	40020070 	.word	0x40020070
 80031c8:	40020088 	.word	0x40020088
 80031cc:	400200a0 	.word	0x400200a0
 80031d0:	400200b8 	.word	0x400200b8
 80031d4:	40020410 	.word	0x40020410
 80031d8:	40020428 	.word	0x40020428
 80031dc:	40020440 	.word	0x40020440
 80031e0:	40020458 	.word	0x40020458
 80031e4:	40020470 	.word	0x40020470
 80031e8:	40020488 	.word	0x40020488
 80031ec:	400204a0 	.word	0x400204a0
 80031f0:	400204b8 	.word	0x400204b8
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	bf14      	ite	ne
 8003202:	2301      	movne	r3, #1
 8003204:	2300      	moveq	r3, #0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d015      	beq.n	8003238 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0204 	bic.w	r2, r2, #4
 800321a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	2208      	movs	r2, #8
 8003226:	409a      	lsls	r2, r3
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003230:	f043 0201 	orr.w	r2, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	fa22 f303 	lsr.w	r3, r2, r3
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d06e      	beq.n	800332c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a69      	ldr	r2, [pc, #420]	; (80033f8 <HAL_DMA_IRQHandler+0x3f8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d04a      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a67      	ldr	r2, [pc, #412]	; (80033fc <HAL_DMA_IRQHandler+0x3fc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d045      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a66      	ldr	r2, [pc, #408]	; (8003400 <HAL_DMA_IRQHandler+0x400>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d040      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a64      	ldr	r2, [pc, #400]	; (8003404 <HAL_DMA_IRQHandler+0x404>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d03b      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a63      	ldr	r2, [pc, #396]	; (8003408 <HAL_DMA_IRQHandler+0x408>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d036      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a61      	ldr	r2, [pc, #388]	; (800340c <HAL_DMA_IRQHandler+0x40c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d031      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a60      	ldr	r2, [pc, #384]	; (8003410 <HAL_DMA_IRQHandler+0x410>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d02c      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a5e      	ldr	r2, [pc, #376]	; (8003414 <HAL_DMA_IRQHandler+0x414>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d027      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a5d      	ldr	r2, [pc, #372]	; (8003418 <HAL_DMA_IRQHandler+0x418>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d022      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a5b      	ldr	r2, [pc, #364]	; (800341c <HAL_DMA_IRQHandler+0x41c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d01d      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a5a      	ldr	r2, [pc, #360]	; (8003420 <HAL_DMA_IRQHandler+0x420>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d018      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a58      	ldr	r2, [pc, #352]	; (8003424 <HAL_DMA_IRQHandler+0x424>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d013      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a57      	ldr	r2, [pc, #348]	; (8003428 <HAL_DMA_IRQHandler+0x428>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d00e      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a55      	ldr	r2, [pc, #340]	; (800342c <HAL_DMA_IRQHandler+0x42c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d009      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a54      	ldr	r2, [pc, #336]	; (8003430 <HAL_DMA_IRQHandler+0x430>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d004      	beq.n	80032ee <HAL_DMA_IRQHandler+0x2ee>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a52      	ldr	r2, [pc, #328]	; (8003434 <HAL_DMA_IRQHandler+0x434>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d10a      	bne.n	8003304 <HAL_DMA_IRQHandler+0x304>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bf14      	ite	ne
 80032fc:	2301      	movne	r3, #1
 80032fe:	2300      	moveq	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	e003      	b.n	800330c <HAL_DMA_IRQHandler+0x30c>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2300      	movs	r3, #0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00d      	beq.n	800332c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	2201      	movs	r2, #1
 800331a:	409a      	lsls	r2, r3
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003324:	f043 0202 	orr.w	r2, r3, #2
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	2204      	movs	r2, #4
 8003336:	409a      	lsls	r2, r3
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	4013      	ands	r3, r2
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 808f 	beq.w	8003460 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a2c      	ldr	r2, [pc, #176]	; (80033f8 <HAL_DMA_IRQHandler+0x3f8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d04a      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a2a      	ldr	r2, [pc, #168]	; (80033fc <HAL_DMA_IRQHandler+0x3fc>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d045      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a29      	ldr	r2, [pc, #164]	; (8003400 <HAL_DMA_IRQHandler+0x400>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d040      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a27      	ldr	r2, [pc, #156]	; (8003404 <HAL_DMA_IRQHandler+0x404>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d03b      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a26      	ldr	r2, [pc, #152]	; (8003408 <HAL_DMA_IRQHandler+0x408>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d036      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a24      	ldr	r2, [pc, #144]	; (800340c <HAL_DMA_IRQHandler+0x40c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d031      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a23      	ldr	r2, [pc, #140]	; (8003410 <HAL_DMA_IRQHandler+0x410>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d02c      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a21      	ldr	r2, [pc, #132]	; (8003414 <HAL_DMA_IRQHandler+0x414>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d027      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a20      	ldr	r2, [pc, #128]	; (8003418 <HAL_DMA_IRQHandler+0x418>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d022      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a1e      	ldr	r2, [pc, #120]	; (800341c <HAL_DMA_IRQHandler+0x41c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d01d      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a1d      	ldr	r2, [pc, #116]	; (8003420 <HAL_DMA_IRQHandler+0x420>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d018      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a1b      	ldr	r2, [pc, #108]	; (8003424 <HAL_DMA_IRQHandler+0x424>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a1a      	ldr	r2, [pc, #104]	; (8003428 <HAL_DMA_IRQHandler+0x428>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d00e      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a18      	ldr	r2, [pc, #96]	; (800342c <HAL_DMA_IRQHandler+0x42c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d009      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a17      	ldr	r2, [pc, #92]	; (8003430 <HAL_DMA_IRQHandler+0x430>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d004      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x3e2>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a15      	ldr	r2, [pc, #84]	; (8003434 <HAL_DMA_IRQHandler+0x434>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d12a      	bne.n	8003438 <HAL_DMA_IRQHandler+0x438>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf14      	ite	ne
 80033f0:	2301      	movne	r3, #1
 80033f2:	2300      	moveq	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	e023      	b.n	8003440 <HAL_DMA_IRQHandler+0x440>
 80033f8:	40020010 	.word	0x40020010
 80033fc:	40020028 	.word	0x40020028
 8003400:	40020040 	.word	0x40020040
 8003404:	40020058 	.word	0x40020058
 8003408:	40020070 	.word	0x40020070
 800340c:	40020088 	.word	0x40020088
 8003410:	400200a0 	.word	0x400200a0
 8003414:	400200b8 	.word	0x400200b8
 8003418:	40020410 	.word	0x40020410
 800341c:	40020428 	.word	0x40020428
 8003420:	40020440 	.word	0x40020440
 8003424:	40020458 	.word	0x40020458
 8003428:	40020470 	.word	0x40020470
 800342c:	40020488 	.word	0x40020488
 8003430:	400204a0 	.word	0x400204a0
 8003434:	400204b8 	.word	0x400204b8
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2300      	movs	r3, #0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00d      	beq.n	8003460 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	f003 031f 	and.w	r3, r3, #31
 800344c:	2204      	movs	r2, #4
 800344e:	409a      	lsls	r2, r3
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003458:	f043 0204 	orr.w	r2, r3, #4
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	2210      	movs	r2, #16
 800346a:	409a      	lsls	r2, r3
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	4013      	ands	r3, r2
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80a6 	beq.w	80035c2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a85      	ldr	r2, [pc, #532]	; (8003690 <HAL_DMA_IRQHandler+0x690>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d04a      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a83      	ldr	r2, [pc, #524]	; (8003694 <HAL_DMA_IRQHandler+0x694>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d045      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a82      	ldr	r2, [pc, #520]	; (8003698 <HAL_DMA_IRQHandler+0x698>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d040      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a80      	ldr	r2, [pc, #512]	; (800369c <HAL_DMA_IRQHandler+0x69c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d03b      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a7f      	ldr	r2, [pc, #508]	; (80036a0 <HAL_DMA_IRQHandler+0x6a0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d036      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a7d      	ldr	r2, [pc, #500]	; (80036a4 <HAL_DMA_IRQHandler+0x6a4>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d031      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a7c      	ldr	r2, [pc, #496]	; (80036a8 <HAL_DMA_IRQHandler+0x6a8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d02c      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a7a      	ldr	r2, [pc, #488]	; (80036ac <HAL_DMA_IRQHandler+0x6ac>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d027      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a79      	ldr	r2, [pc, #484]	; (80036b0 <HAL_DMA_IRQHandler+0x6b0>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d022      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a77      	ldr	r2, [pc, #476]	; (80036b4 <HAL_DMA_IRQHandler+0x6b4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d01d      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a76      	ldr	r2, [pc, #472]	; (80036b8 <HAL_DMA_IRQHandler+0x6b8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d018      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a74      	ldr	r2, [pc, #464]	; (80036bc <HAL_DMA_IRQHandler+0x6bc>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d013      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a73      	ldr	r2, [pc, #460]	; (80036c0 <HAL_DMA_IRQHandler+0x6c0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00e      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a71      	ldr	r2, [pc, #452]	; (80036c4 <HAL_DMA_IRQHandler+0x6c4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d009      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a70      	ldr	r2, [pc, #448]	; (80036c8 <HAL_DMA_IRQHandler+0x6c8>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d004      	beq.n	8003516 <HAL_DMA_IRQHandler+0x516>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a6e      	ldr	r2, [pc, #440]	; (80036cc <HAL_DMA_IRQHandler+0x6cc>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d10a      	bne.n	800352c <HAL_DMA_IRQHandler+0x52c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	bf14      	ite	ne
 8003524:	2301      	movne	r3, #1
 8003526:	2300      	moveq	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	e009      	b.n	8003540 <HAL_DMA_IRQHandler+0x540>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b00      	cmp	r3, #0
 8003538:	bf14      	ite	ne
 800353a:	2301      	movne	r3, #1
 800353c:	2300      	moveq	r3, #0
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d03e      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003548:	f003 031f 	and.w	r3, r3, #31
 800354c:	2210      	movs	r2, #16
 800354e:	409a      	lsls	r2, r3
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d018      	beq.n	8003594 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d108      	bne.n	8003582 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	2b00      	cmp	r3, #0
 8003576:	d024      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	4798      	blx	r3
 8003580:	e01f      	b.n	80035c2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003586:	2b00      	cmp	r3, #0
 8003588:	d01b      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	4798      	blx	r3
 8003592:	e016      	b.n	80035c2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d107      	bne.n	80035b2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0208 	bic.w	r2, r2, #8
 80035b0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c6:	f003 031f 	and.w	r3, r3, #31
 80035ca:	2220      	movs	r2, #32
 80035cc:	409a      	lsls	r2, r3
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 8110 	beq.w	80037f8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a2c      	ldr	r2, [pc, #176]	; (8003690 <HAL_DMA_IRQHandler+0x690>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d04a      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a2b      	ldr	r2, [pc, #172]	; (8003694 <HAL_DMA_IRQHandler+0x694>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d045      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a29      	ldr	r2, [pc, #164]	; (8003698 <HAL_DMA_IRQHandler+0x698>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d040      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a28      	ldr	r2, [pc, #160]	; (800369c <HAL_DMA_IRQHandler+0x69c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d03b      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a26      	ldr	r2, [pc, #152]	; (80036a0 <HAL_DMA_IRQHandler+0x6a0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d036      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a25      	ldr	r2, [pc, #148]	; (80036a4 <HAL_DMA_IRQHandler+0x6a4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d031      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a23      	ldr	r2, [pc, #140]	; (80036a8 <HAL_DMA_IRQHandler+0x6a8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d02c      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a22      	ldr	r2, [pc, #136]	; (80036ac <HAL_DMA_IRQHandler+0x6ac>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d027      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a20      	ldr	r2, [pc, #128]	; (80036b0 <HAL_DMA_IRQHandler+0x6b0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d022      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a1f      	ldr	r2, [pc, #124]	; (80036b4 <HAL_DMA_IRQHandler+0x6b4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d01d      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1d      	ldr	r2, [pc, #116]	; (80036b8 <HAL_DMA_IRQHandler+0x6b8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d018      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a1c      	ldr	r2, [pc, #112]	; (80036bc <HAL_DMA_IRQHandler+0x6bc>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d013      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a1a      	ldr	r2, [pc, #104]	; (80036c0 <HAL_DMA_IRQHandler+0x6c0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d00e      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a19      	ldr	r2, [pc, #100]	; (80036c4 <HAL_DMA_IRQHandler+0x6c4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d009      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a17      	ldr	r2, [pc, #92]	; (80036c8 <HAL_DMA_IRQHandler+0x6c8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d004      	beq.n	8003678 <HAL_DMA_IRQHandler+0x678>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a16      	ldr	r2, [pc, #88]	; (80036cc <HAL_DMA_IRQHandler+0x6cc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d12b      	bne.n	80036d0 <HAL_DMA_IRQHandler+0x6d0>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0310 	and.w	r3, r3, #16
 8003682:	2b00      	cmp	r3, #0
 8003684:	bf14      	ite	ne
 8003686:	2301      	movne	r3, #1
 8003688:	2300      	moveq	r3, #0
 800368a:	b2db      	uxtb	r3, r3
 800368c:	e02a      	b.n	80036e4 <HAL_DMA_IRQHandler+0x6e4>
 800368e:	bf00      	nop
 8003690:	40020010 	.word	0x40020010
 8003694:	40020028 	.word	0x40020028
 8003698:	40020040 	.word	0x40020040
 800369c:	40020058 	.word	0x40020058
 80036a0:	40020070 	.word	0x40020070
 80036a4:	40020088 	.word	0x40020088
 80036a8:	400200a0 	.word	0x400200a0
 80036ac:	400200b8 	.word	0x400200b8
 80036b0:	40020410 	.word	0x40020410
 80036b4:	40020428 	.word	0x40020428
 80036b8:	40020440 	.word	0x40020440
 80036bc:	40020458 	.word	0x40020458
 80036c0:	40020470 	.word	0x40020470
 80036c4:	40020488 	.word	0x40020488
 80036c8:	400204a0 	.word	0x400204a0
 80036cc:	400204b8 	.word	0x400204b8
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	bf14      	ite	ne
 80036de:	2301      	movne	r3, #1
 80036e0:	2300      	moveq	r3, #0
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 8087 	beq.w	80037f8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ee:	f003 031f 	and.w	r3, r3, #31
 80036f2:	2220      	movs	r2, #32
 80036f4:	409a      	lsls	r2, r3
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b04      	cmp	r3, #4
 8003704:	d139      	bne.n	800377a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0216 	bic.w	r2, r2, #22
 8003714:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695a      	ldr	r2, [r3, #20]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003724:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	2b00      	cmp	r3, #0
 800372c:	d103      	bne.n	8003736 <HAL_DMA_IRQHandler+0x736>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003732:	2b00      	cmp	r3, #0
 8003734:	d007      	beq.n	8003746 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0208 	bic.w	r2, r2, #8
 8003744:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374a:	f003 031f 	and.w	r3, r3, #31
 800374e:	223f      	movs	r2, #63	; 0x3f
 8003750:	409a      	lsls	r2, r3
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 834a 	beq.w	8003e04 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	4798      	blx	r3
          }
          return;
 8003778:	e344      	b.n	8003e04 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d018      	beq.n	80037ba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d108      	bne.n	80037a8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	2b00      	cmp	r3, #0
 800379c:	d02c      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	4798      	blx	r3
 80037a6:	e027      	b.n	80037f8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d023      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	4798      	blx	r3
 80037b8:	e01e      	b.n	80037f8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10f      	bne.n	80037e8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0210 	bic.w	r2, r2, #16
 80037d6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 8306 	beq.w	8003e0e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 8088 	beq.w	8003920 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2204      	movs	r2, #4
 8003814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a7a      	ldr	r2, [pc, #488]	; (8003a08 <HAL_DMA_IRQHandler+0xa08>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d04a      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a79      	ldr	r2, [pc, #484]	; (8003a0c <HAL_DMA_IRQHandler+0xa0c>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d045      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a77      	ldr	r2, [pc, #476]	; (8003a10 <HAL_DMA_IRQHandler+0xa10>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d040      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a76      	ldr	r2, [pc, #472]	; (8003a14 <HAL_DMA_IRQHandler+0xa14>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d03b      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a74      	ldr	r2, [pc, #464]	; (8003a18 <HAL_DMA_IRQHandler+0xa18>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d036      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a73      	ldr	r2, [pc, #460]	; (8003a1c <HAL_DMA_IRQHandler+0xa1c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d031      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a71      	ldr	r2, [pc, #452]	; (8003a20 <HAL_DMA_IRQHandler+0xa20>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d02c      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a70      	ldr	r2, [pc, #448]	; (8003a24 <HAL_DMA_IRQHandler+0xa24>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d027      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a6e      	ldr	r2, [pc, #440]	; (8003a28 <HAL_DMA_IRQHandler+0xa28>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d022      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a6d      	ldr	r2, [pc, #436]	; (8003a2c <HAL_DMA_IRQHandler+0xa2c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d01d      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a6b      	ldr	r2, [pc, #428]	; (8003a30 <HAL_DMA_IRQHandler+0xa30>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d018      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a6a      	ldr	r2, [pc, #424]	; (8003a34 <HAL_DMA_IRQHandler+0xa34>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d013      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a68      	ldr	r2, [pc, #416]	; (8003a38 <HAL_DMA_IRQHandler+0xa38>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00e      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a67      	ldr	r2, [pc, #412]	; (8003a3c <HAL_DMA_IRQHandler+0xa3c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d009      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a65      	ldr	r2, [pc, #404]	; (8003a40 <HAL_DMA_IRQHandler+0xa40>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d004      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x8b8>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a64      	ldr	r2, [pc, #400]	; (8003a44 <HAL_DMA_IRQHandler+0xa44>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d108      	bne.n	80038ca <HAL_DMA_IRQHandler+0x8ca>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	e007      	b.n	80038da <HAL_DMA_IRQHandler+0x8da>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0201 	bic.w	r2, r2, #1
 80038d8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	3301      	adds	r3, #1
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d307      	bcc.n	80038f6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1f2      	bne.n	80038da <HAL_DMA_IRQHandler+0x8da>
 80038f4:	e000      	b.n	80038f8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80038f6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d004      	beq.n	8003910 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2203      	movs	r2, #3
 800390a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800390e:	e003      	b.n	8003918 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 8272 	beq.w	8003e0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	4798      	blx	r3
 8003932:	e26c      	b.n	8003e0e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a43      	ldr	r2, [pc, #268]	; (8003a48 <HAL_DMA_IRQHandler+0xa48>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d022      	beq.n	8003984 <HAL_DMA_IRQHandler+0x984>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a42      	ldr	r2, [pc, #264]	; (8003a4c <HAL_DMA_IRQHandler+0xa4c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d01d      	beq.n	8003984 <HAL_DMA_IRQHandler+0x984>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a40      	ldr	r2, [pc, #256]	; (8003a50 <HAL_DMA_IRQHandler+0xa50>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d018      	beq.n	8003984 <HAL_DMA_IRQHandler+0x984>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a3f      	ldr	r2, [pc, #252]	; (8003a54 <HAL_DMA_IRQHandler+0xa54>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d013      	beq.n	8003984 <HAL_DMA_IRQHandler+0x984>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a3d      	ldr	r2, [pc, #244]	; (8003a58 <HAL_DMA_IRQHandler+0xa58>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00e      	beq.n	8003984 <HAL_DMA_IRQHandler+0x984>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a3c      	ldr	r2, [pc, #240]	; (8003a5c <HAL_DMA_IRQHandler+0xa5c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d009      	beq.n	8003984 <HAL_DMA_IRQHandler+0x984>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a3a      	ldr	r2, [pc, #232]	; (8003a60 <HAL_DMA_IRQHandler+0xa60>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d004      	beq.n	8003984 <HAL_DMA_IRQHandler+0x984>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a39      	ldr	r2, [pc, #228]	; (8003a64 <HAL_DMA_IRQHandler+0xa64>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d101      	bne.n	8003988 <HAL_DMA_IRQHandler+0x988>
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <HAL_DMA_IRQHandler+0x98a>
 8003988:	2300      	movs	r3, #0
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 823f 	beq.w	8003e0e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	2204      	movs	r2, #4
 80039a2:	409a      	lsls	r2, r3
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80cd 	beq.w	8003b48 <HAL_DMA_IRQHandler+0xb48>
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 80c7 	beq.w	8003b48 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	2204      	movs	r2, #4
 80039c4:	409a      	lsls	r2, r3
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d049      	beq.n	8003a68 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 8210 	beq.w	8003e08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039f0:	e20a      	b.n	8003e08 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 8206 	beq.w	8003e08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a04:	e200      	b.n	8003e08 <HAL_DMA_IRQHandler+0xe08>
 8003a06:	bf00      	nop
 8003a08:	40020010 	.word	0x40020010
 8003a0c:	40020028 	.word	0x40020028
 8003a10:	40020040 	.word	0x40020040
 8003a14:	40020058 	.word	0x40020058
 8003a18:	40020070 	.word	0x40020070
 8003a1c:	40020088 	.word	0x40020088
 8003a20:	400200a0 	.word	0x400200a0
 8003a24:	400200b8 	.word	0x400200b8
 8003a28:	40020410 	.word	0x40020410
 8003a2c:	40020428 	.word	0x40020428
 8003a30:	40020440 	.word	0x40020440
 8003a34:	40020458 	.word	0x40020458
 8003a38:	40020470 	.word	0x40020470
 8003a3c:	40020488 	.word	0x40020488
 8003a40:	400204a0 	.word	0x400204a0
 8003a44:	400204b8 	.word	0x400204b8
 8003a48:	58025408 	.word	0x58025408
 8003a4c:	5802541c 	.word	0x5802541c
 8003a50:	58025430 	.word	0x58025430
 8003a54:	58025444 	.word	0x58025444
 8003a58:	58025458 	.word	0x58025458
 8003a5c:	5802546c 	.word	0x5802546c
 8003a60:	58025480 	.word	0x58025480
 8003a64:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d160      	bne.n	8003b34 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a7f      	ldr	r2, [pc, #508]	; (8003c74 <HAL_DMA_IRQHandler+0xc74>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d04a      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a7d      	ldr	r2, [pc, #500]	; (8003c78 <HAL_DMA_IRQHandler+0xc78>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d045      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a7c      	ldr	r2, [pc, #496]	; (8003c7c <HAL_DMA_IRQHandler+0xc7c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d040      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a7a      	ldr	r2, [pc, #488]	; (8003c80 <HAL_DMA_IRQHandler+0xc80>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d03b      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a79      	ldr	r2, [pc, #484]	; (8003c84 <HAL_DMA_IRQHandler+0xc84>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d036      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a77      	ldr	r2, [pc, #476]	; (8003c88 <HAL_DMA_IRQHandler+0xc88>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d031      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a76      	ldr	r2, [pc, #472]	; (8003c8c <HAL_DMA_IRQHandler+0xc8c>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d02c      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a74      	ldr	r2, [pc, #464]	; (8003c90 <HAL_DMA_IRQHandler+0xc90>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d027      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a73      	ldr	r2, [pc, #460]	; (8003c94 <HAL_DMA_IRQHandler+0xc94>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d022      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a71      	ldr	r2, [pc, #452]	; (8003c98 <HAL_DMA_IRQHandler+0xc98>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d01d      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a70      	ldr	r2, [pc, #448]	; (8003c9c <HAL_DMA_IRQHandler+0xc9c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d018      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a6e      	ldr	r2, [pc, #440]	; (8003ca0 <HAL_DMA_IRQHandler+0xca0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d013      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a6d      	ldr	r2, [pc, #436]	; (8003ca4 <HAL_DMA_IRQHandler+0xca4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d00e      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a6b      	ldr	r2, [pc, #428]	; (8003ca8 <HAL_DMA_IRQHandler+0xca8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d009      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a6a      	ldr	r2, [pc, #424]	; (8003cac <HAL_DMA_IRQHandler+0xcac>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d004      	beq.n	8003b12 <HAL_DMA_IRQHandler+0xb12>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a68      	ldr	r2, [pc, #416]	; (8003cb0 <HAL_DMA_IRQHandler+0xcb0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d108      	bne.n	8003b24 <HAL_DMA_IRQHandler+0xb24>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0208 	bic.w	r2, r2, #8
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	e007      	b.n	8003b34 <HAL_DMA_IRQHandler+0xb34>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0204 	bic.w	r2, r2, #4
 8003b32:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 8165 	beq.w	8003e08 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b46:	e15f      	b.n	8003e08 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4c:	f003 031f 	and.w	r3, r3, #31
 8003b50:	2202      	movs	r2, #2
 8003b52:	409a      	lsls	r2, r3
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	4013      	ands	r3, r2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 80c5 	beq.w	8003ce8 <HAL_DMA_IRQHandler+0xce8>
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 80bf 	beq.w	8003ce8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6e:	f003 031f 	and.w	r3, r3, #31
 8003b72:	2202      	movs	r2, #2
 8003b74:	409a      	lsls	r2, r3
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d018      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 813a 	beq.w	8003e0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ba0:	e134      	b.n	8003e0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 8130 	beq.w	8003e0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bb4:	e12a      	b.n	8003e0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f003 0320 	and.w	r3, r3, #32
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f040 8089 	bne.w	8003cd4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a2b      	ldr	r2, [pc, #172]	; (8003c74 <HAL_DMA_IRQHandler+0xc74>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d04a      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a29      	ldr	r2, [pc, #164]	; (8003c78 <HAL_DMA_IRQHandler+0xc78>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d045      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a28      	ldr	r2, [pc, #160]	; (8003c7c <HAL_DMA_IRQHandler+0xc7c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d040      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a26      	ldr	r2, [pc, #152]	; (8003c80 <HAL_DMA_IRQHandler+0xc80>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d03b      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a25      	ldr	r2, [pc, #148]	; (8003c84 <HAL_DMA_IRQHandler+0xc84>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d036      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a23      	ldr	r2, [pc, #140]	; (8003c88 <HAL_DMA_IRQHandler+0xc88>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d031      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a22      	ldr	r2, [pc, #136]	; (8003c8c <HAL_DMA_IRQHandler+0xc8c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d02c      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a20      	ldr	r2, [pc, #128]	; (8003c90 <HAL_DMA_IRQHandler+0xc90>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d027      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1f      	ldr	r2, [pc, #124]	; (8003c94 <HAL_DMA_IRQHandler+0xc94>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d022      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a1d      	ldr	r2, [pc, #116]	; (8003c98 <HAL_DMA_IRQHandler+0xc98>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d01d      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a1c      	ldr	r2, [pc, #112]	; (8003c9c <HAL_DMA_IRQHandler+0xc9c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d018      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a1a      	ldr	r2, [pc, #104]	; (8003ca0 <HAL_DMA_IRQHandler+0xca0>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d013      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a19      	ldr	r2, [pc, #100]	; (8003ca4 <HAL_DMA_IRQHandler+0xca4>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d00e      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a17      	ldr	r2, [pc, #92]	; (8003ca8 <HAL_DMA_IRQHandler+0xca8>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d009      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a16      	ldr	r2, [pc, #88]	; (8003cac <HAL_DMA_IRQHandler+0xcac>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d004      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xc62>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a14      	ldr	r2, [pc, #80]	; (8003cb0 <HAL_DMA_IRQHandler+0xcb0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d128      	bne.n	8003cb4 <HAL_DMA_IRQHandler+0xcb4>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0214 	bic.w	r2, r2, #20
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	e027      	b.n	8003cc4 <HAL_DMA_IRQHandler+0xcc4>
 8003c74:	40020010 	.word	0x40020010
 8003c78:	40020028 	.word	0x40020028
 8003c7c:	40020040 	.word	0x40020040
 8003c80:	40020058 	.word	0x40020058
 8003c84:	40020070 	.word	0x40020070
 8003c88:	40020088 	.word	0x40020088
 8003c8c:	400200a0 	.word	0x400200a0
 8003c90:	400200b8 	.word	0x400200b8
 8003c94:	40020410 	.word	0x40020410
 8003c98:	40020428 	.word	0x40020428
 8003c9c:	40020440 	.word	0x40020440
 8003ca0:	40020458 	.word	0x40020458
 8003ca4:	40020470 	.word	0x40020470
 8003ca8:	40020488 	.word	0x40020488
 8003cac:	400204a0 	.word	0x400204a0
 8003cb0:	400204b8 	.word	0x400204b8
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 020a 	bic.w	r2, r2, #10
 8003cc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 8097 	beq.w	8003e0c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ce6:	e091      	b.n	8003e0c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cec:	f003 031f 	and.w	r3, r3, #31
 8003cf0:	2208      	movs	r2, #8
 8003cf2:	409a      	lsls	r2, r3
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8088 	beq.w	8003e0e <HAL_DMA_IRQHandler+0xe0e>
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 8082 	beq.w	8003e0e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a41      	ldr	r2, [pc, #260]	; (8003e14 <HAL_DMA_IRQHandler+0xe14>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d04a      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a3f      	ldr	r2, [pc, #252]	; (8003e18 <HAL_DMA_IRQHandler+0xe18>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d045      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a3e      	ldr	r2, [pc, #248]	; (8003e1c <HAL_DMA_IRQHandler+0xe1c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d040      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a3c      	ldr	r2, [pc, #240]	; (8003e20 <HAL_DMA_IRQHandler+0xe20>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d03b      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a3b      	ldr	r2, [pc, #236]	; (8003e24 <HAL_DMA_IRQHandler+0xe24>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d036      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a39      	ldr	r2, [pc, #228]	; (8003e28 <HAL_DMA_IRQHandler+0xe28>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d031      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a38      	ldr	r2, [pc, #224]	; (8003e2c <HAL_DMA_IRQHandler+0xe2c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d02c      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a36      	ldr	r2, [pc, #216]	; (8003e30 <HAL_DMA_IRQHandler+0xe30>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d027      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a35      	ldr	r2, [pc, #212]	; (8003e34 <HAL_DMA_IRQHandler+0xe34>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d022      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a33      	ldr	r2, [pc, #204]	; (8003e38 <HAL_DMA_IRQHandler+0xe38>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d01d      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a32      	ldr	r2, [pc, #200]	; (8003e3c <HAL_DMA_IRQHandler+0xe3c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d018      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a30      	ldr	r2, [pc, #192]	; (8003e40 <HAL_DMA_IRQHandler+0xe40>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d013      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a2f      	ldr	r2, [pc, #188]	; (8003e44 <HAL_DMA_IRQHandler+0xe44>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00e      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a2d      	ldr	r2, [pc, #180]	; (8003e48 <HAL_DMA_IRQHandler+0xe48>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d009      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a2c      	ldr	r2, [pc, #176]	; (8003e4c <HAL_DMA_IRQHandler+0xe4c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d004      	beq.n	8003daa <HAL_DMA_IRQHandler+0xdaa>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a2a      	ldr	r2, [pc, #168]	; (8003e50 <HAL_DMA_IRQHandler+0xe50>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d108      	bne.n	8003dbc <HAL_DMA_IRQHandler+0xdbc>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 021c 	bic.w	r2, r2, #28
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	e007      	b.n	8003dcc <HAL_DMA_IRQHandler+0xdcc>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 020e 	bic.w	r2, r2, #14
 8003dca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d009      	beq.n	8003e0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	4798      	blx	r3
 8003e02:	e004      	b.n	8003e0e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003e04:	bf00      	nop
 8003e06:	e002      	b.n	8003e0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e08:	bf00      	nop
 8003e0a:	e000      	b.n	8003e0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e0c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e0e:	3728      	adds	r7, #40	; 0x28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40020010 	.word	0x40020010
 8003e18:	40020028 	.word	0x40020028
 8003e1c:	40020040 	.word	0x40020040
 8003e20:	40020058 	.word	0x40020058
 8003e24:	40020070 	.word	0x40020070
 8003e28:	40020088 	.word	0x40020088
 8003e2c:	400200a0 	.word	0x400200a0
 8003e30:	400200b8 	.word	0x400200b8
 8003e34:	40020410 	.word	0x40020410
 8003e38:	40020428 	.word	0x40020428
 8003e3c:	40020440 	.word	0x40020440
 8003e40:	40020458 	.word	0x40020458
 8003e44:	40020470 	.word	0x40020470
 8003e48:	40020488 	.word	0x40020488
 8003e4c:	400204a0 	.word	0x400204a0
 8003e50:	400204b8 	.word	0x400204b8

08003e54 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e66:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a7f      	ldr	r2, [pc, #508]	; (8004070 <DMA_SetConfig+0x21c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d072      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a7d      	ldr	r2, [pc, #500]	; (8004074 <DMA_SetConfig+0x220>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d06d      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a7c      	ldr	r2, [pc, #496]	; (8004078 <DMA_SetConfig+0x224>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d068      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a7a      	ldr	r2, [pc, #488]	; (800407c <DMA_SetConfig+0x228>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d063      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a79      	ldr	r2, [pc, #484]	; (8004080 <DMA_SetConfig+0x22c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d05e      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a77      	ldr	r2, [pc, #476]	; (8004084 <DMA_SetConfig+0x230>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d059      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a76      	ldr	r2, [pc, #472]	; (8004088 <DMA_SetConfig+0x234>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d054      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a74      	ldr	r2, [pc, #464]	; (800408c <DMA_SetConfig+0x238>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d04f      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a73      	ldr	r2, [pc, #460]	; (8004090 <DMA_SetConfig+0x23c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d04a      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a71      	ldr	r2, [pc, #452]	; (8004094 <DMA_SetConfig+0x240>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d045      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a70      	ldr	r2, [pc, #448]	; (8004098 <DMA_SetConfig+0x244>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d040      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a6e      	ldr	r2, [pc, #440]	; (800409c <DMA_SetConfig+0x248>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d03b      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a6d      	ldr	r2, [pc, #436]	; (80040a0 <DMA_SetConfig+0x24c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d036      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a6b      	ldr	r2, [pc, #428]	; (80040a4 <DMA_SetConfig+0x250>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d031      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a6a      	ldr	r2, [pc, #424]	; (80040a8 <DMA_SetConfig+0x254>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d02c      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a68      	ldr	r2, [pc, #416]	; (80040ac <DMA_SetConfig+0x258>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d027      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a67      	ldr	r2, [pc, #412]	; (80040b0 <DMA_SetConfig+0x25c>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d022      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a65      	ldr	r2, [pc, #404]	; (80040b4 <DMA_SetConfig+0x260>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d01d      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a64      	ldr	r2, [pc, #400]	; (80040b8 <DMA_SetConfig+0x264>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d018      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a62      	ldr	r2, [pc, #392]	; (80040bc <DMA_SetConfig+0x268>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d013      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a61      	ldr	r2, [pc, #388]	; (80040c0 <DMA_SetConfig+0x26c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00e      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a5f      	ldr	r2, [pc, #380]	; (80040c4 <DMA_SetConfig+0x270>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d009      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a5e      	ldr	r2, [pc, #376]	; (80040c8 <DMA_SetConfig+0x274>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d004      	beq.n	8003f5e <DMA_SetConfig+0x10a>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a5c      	ldr	r2, [pc, #368]	; (80040cc <DMA_SetConfig+0x278>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d101      	bne.n	8003f62 <DMA_SetConfig+0x10e>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <DMA_SetConfig+0x110>
 8003f62:	2300      	movs	r3, #0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00d      	beq.n	8003f84 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f70:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d004      	beq.n	8003f84 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f82:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a39      	ldr	r2, [pc, #228]	; (8004070 <DMA_SetConfig+0x21c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d04a      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a38      	ldr	r2, [pc, #224]	; (8004074 <DMA_SetConfig+0x220>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d045      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a36      	ldr	r2, [pc, #216]	; (8004078 <DMA_SetConfig+0x224>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d040      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a35      	ldr	r2, [pc, #212]	; (800407c <DMA_SetConfig+0x228>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d03b      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a33      	ldr	r2, [pc, #204]	; (8004080 <DMA_SetConfig+0x22c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d036      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a32      	ldr	r2, [pc, #200]	; (8004084 <DMA_SetConfig+0x230>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d031      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a30      	ldr	r2, [pc, #192]	; (8004088 <DMA_SetConfig+0x234>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d02c      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a2f      	ldr	r2, [pc, #188]	; (800408c <DMA_SetConfig+0x238>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d027      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a2d      	ldr	r2, [pc, #180]	; (8004090 <DMA_SetConfig+0x23c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d022      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a2c      	ldr	r2, [pc, #176]	; (8004094 <DMA_SetConfig+0x240>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d01d      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a2a      	ldr	r2, [pc, #168]	; (8004098 <DMA_SetConfig+0x244>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d018      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a29      	ldr	r2, [pc, #164]	; (800409c <DMA_SetConfig+0x248>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d013      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a27      	ldr	r2, [pc, #156]	; (80040a0 <DMA_SetConfig+0x24c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00e      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a26      	ldr	r2, [pc, #152]	; (80040a4 <DMA_SetConfig+0x250>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d009      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a24      	ldr	r2, [pc, #144]	; (80040a8 <DMA_SetConfig+0x254>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d004      	beq.n	8004024 <DMA_SetConfig+0x1d0>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a23      	ldr	r2, [pc, #140]	; (80040ac <DMA_SetConfig+0x258>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d101      	bne.n	8004028 <DMA_SetConfig+0x1d4>
 8004024:	2301      	movs	r3, #1
 8004026:	e000      	b.n	800402a <DMA_SetConfig+0x1d6>
 8004028:	2300      	movs	r3, #0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d059      	beq.n	80040e2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004032:	f003 031f 	and.w	r3, r3, #31
 8004036:	223f      	movs	r2, #63	; 0x3f
 8004038:	409a      	lsls	r2, r3
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800404c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b40      	cmp	r3, #64	; 0x40
 800405c:	d138      	bne.n	80040d0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800406e:	e086      	b.n	800417e <DMA_SetConfig+0x32a>
 8004070:	40020010 	.word	0x40020010
 8004074:	40020028 	.word	0x40020028
 8004078:	40020040 	.word	0x40020040
 800407c:	40020058 	.word	0x40020058
 8004080:	40020070 	.word	0x40020070
 8004084:	40020088 	.word	0x40020088
 8004088:	400200a0 	.word	0x400200a0
 800408c:	400200b8 	.word	0x400200b8
 8004090:	40020410 	.word	0x40020410
 8004094:	40020428 	.word	0x40020428
 8004098:	40020440 	.word	0x40020440
 800409c:	40020458 	.word	0x40020458
 80040a0:	40020470 	.word	0x40020470
 80040a4:	40020488 	.word	0x40020488
 80040a8:	400204a0 	.word	0x400204a0
 80040ac:	400204b8 	.word	0x400204b8
 80040b0:	58025408 	.word	0x58025408
 80040b4:	5802541c 	.word	0x5802541c
 80040b8:	58025430 	.word	0x58025430
 80040bc:	58025444 	.word	0x58025444
 80040c0:	58025458 	.word	0x58025458
 80040c4:	5802546c 	.word	0x5802546c
 80040c8:	58025480 	.word	0x58025480
 80040cc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	60da      	str	r2, [r3, #12]
}
 80040e0:	e04d      	b.n	800417e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a29      	ldr	r2, [pc, #164]	; (800418c <DMA_SetConfig+0x338>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d022      	beq.n	8004132 <DMA_SetConfig+0x2de>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a27      	ldr	r2, [pc, #156]	; (8004190 <DMA_SetConfig+0x33c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d01d      	beq.n	8004132 <DMA_SetConfig+0x2de>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a26      	ldr	r2, [pc, #152]	; (8004194 <DMA_SetConfig+0x340>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d018      	beq.n	8004132 <DMA_SetConfig+0x2de>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a24      	ldr	r2, [pc, #144]	; (8004198 <DMA_SetConfig+0x344>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d013      	beq.n	8004132 <DMA_SetConfig+0x2de>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a23      	ldr	r2, [pc, #140]	; (800419c <DMA_SetConfig+0x348>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d00e      	beq.n	8004132 <DMA_SetConfig+0x2de>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a21      	ldr	r2, [pc, #132]	; (80041a0 <DMA_SetConfig+0x34c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d009      	beq.n	8004132 <DMA_SetConfig+0x2de>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a20      	ldr	r2, [pc, #128]	; (80041a4 <DMA_SetConfig+0x350>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d004      	beq.n	8004132 <DMA_SetConfig+0x2de>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1e      	ldr	r2, [pc, #120]	; (80041a8 <DMA_SetConfig+0x354>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d101      	bne.n	8004136 <DMA_SetConfig+0x2e2>
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <DMA_SetConfig+0x2e4>
 8004136:	2300      	movs	r3, #0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d020      	beq.n	800417e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004140:	f003 031f 	and.w	r3, r3, #31
 8004144:	2201      	movs	r2, #1
 8004146:	409a      	lsls	r2, r3
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b40      	cmp	r3, #64	; 0x40
 800415a:	d108      	bne.n	800416e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	60da      	str	r2, [r3, #12]
}
 800416c:	e007      	b.n	800417e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	60da      	str	r2, [r3, #12]
}
 800417e:	bf00      	nop
 8004180:	371c      	adds	r7, #28
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	58025408 	.word	0x58025408
 8004190:	5802541c 	.word	0x5802541c
 8004194:	58025430 	.word	0x58025430
 8004198:	58025444 	.word	0x58025444
 800419c:	58025458 	.word	0x58025458
 80041a0:	5802546c 	.word	0x5802546c
 80041a4:	58025480 	.word	0x58025480
 80041a8:	58025494 	.word	0x58025494

080041ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a42      	ldr	r2, [pc, #264]	; (80042c4 <DMA_CalcBaseAndBitshift+0x118>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d04a      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a41      	ldr	r2, [pc, #260]	; (80042c8 <DMA_CalcBaseAndBitshift+0x11c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d045      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a3f      	ldr	r2, [pc, #252]	; (80042cc <DMA_CalcBaseAndBitshift+0x120>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d040      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a3e      	ldr	r2, [pc, #248]	; (80042d0 <DMA_CalcBaseAndBitshift+0x124>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d03b      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a3c      	ldr	r2, [pc, #240]	; (80042d4 <DMA_CalcBaseAndBitshift+0x128>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d036      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a3b      	ldr	r2, [pc, #236]	; (80042d8 <DMA_CalcBaseAndBitshift+0x12c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d031      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a39      	ldr	r2, [pc, #228]	; (80042dc <DMA_CalcBaseAndBitshift+0x130>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d02c      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a38      	ldr	r2, [pc, #224]	; (80042e0 <DMA_CalcBaseAndBitshift+0x134>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d027      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a36      	ldr	r2, [pc, #216]	; (80042e4 <DMA_CalcBaseAndBitshift+0x138>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d022      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a35      	ldr	r2, [pc, #212]	; (80042e8 <DMA_CalcBaseAndBitshift+0x13c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d01d      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a33      	ldr	r2, [pc, #204]	; (80042ec <DMA_CalcBaseAndBitshift+0x140>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d018      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a32      	ldr	r2, [pc, #200]	; (80042f0 <DMA_CalcBaseAndBitshift+0x144>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d013      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a30      	ldr	r2, [pc, #192]	; (80042f4 <DMA_CalcBaseAndBitshift+0x148>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00e      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a2f      	ldr	r2, [pc, #188]	; (80042f8 <DMA_CalcBaseAndBitshift+0x14c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d009      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a2d      	ldr	r2, [pc, #180]	; (80042fc <DMA_CalcBaseAndBitshift+0x150>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d004      	beq.n	8004254 <DMA_CalcBaseAndBitshift+0xa8>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a2c      	ldr	r2, [pc, #176]	; (8004300 <DMA_CalcBaseAndBitshift+0x154>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d101      	bne.n	8004258 <DMA_CalcBaseAndBitshift+0xac>
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <DMA_CalcBaseAndBitshift+0xae>
 8004258:	2300      	movs	r3, #0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d024      	beq.n	80042a8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	3b10      	subs	r3, #16
 8004266:	4a27      	ldr	r2, [pc, #156]	; (8004304 <DMA_CalcBaseAndBitshift+0x158>)
 8004268:	fba2 2303 	umull	r2, r3, r2, r3
 800426c:	091b      	lsrs	r3, r3, #4
 800426e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	4a24      	ldr	r2, [pc, #144]	; (8004308 <DMA_CalcBaseAndBitshift+0x15c>)
 8004278:	5cd3      	ldrb	r3, [r2, r3]
 800427a:	461a      	mov	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2b03      	cmp	r3, #3
 8004284:	d908      	bls.n	8004298 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	4b1f      	ldr	r3, [pc, #124]	; (800430c <DMA_CalcBaseAndBitshift+0x160>)
 800428e:	4013      	ands	r3, r2
 8004290:	1d1a      	adds	r2, r3, #4
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	659a      	str	r2, [r3, #88]	; 0x58
 8004296:	e00d      	b.n	80042b4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	4b1b      	ldr	r3, [pc, #108]	; (800430c <DMA_CalcBaseAndBitshift+0x160>)
 80042a0:	4013      	ands	r3, r2
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6593      	str	r3, [r2, #88]	; 0x58
 80042a6:	e005      	b.n	80042b4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	40020010 	.word	0x40020010
 80042c8:	40020028 	.word	0x40020028
 80042cc:	40020040 	.word	0x40020040
 80042d0:	40020058 	.word	0x40020058
 80042d4:	40020070 	.word	0x40020070
 80042d8:	40020088 	.word	0x40020088
 80042dc:	400200a0 	.word	0x400200a0
 80042e0:	400200b8 	.word	0x400200b8
 80042e4:	40020410 	.word	0x40020410
 80042e8:	40020428 	.word	0x40020428
 80042ec:	40020440 	.word	0x40020440
 80042f0:	40020458 	.word	0x40020458
 80042f4:	40020470 	.word	0x40020470
 80042f8:	40020488 	.word	0x40020488
 80042fc:	400204a0 	.word	0x400204a0
 8004300:	400204b8 	.word	0x400204b8
 8004304:	aaaaaaab 	.word	0xaaaaaaab
 8004308:	080133bc 	.word	0x080133bc
 800430c:	fffffc00 	.word	0xfffffc00

08004310 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004318:	2300      	movs	r3, #0
 800431a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d120      	bne.n	8004366 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004328:	2b03      	cmp	r3, #3
 800432a:	d858      	bhi.n	80043de <DMA_CheckFifoParam+0xce>
 800432c:	a201      	add	r2, pc, #4	; (adr r2, 8004334 <DMA_CheckFifoParam+0x24>)
 800432e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004332:	bf00      	nop
 8004334:	08004345 	.word	0x08004345
 8004338:	08004357 	.word	0x08004357
 800433c:	08004345 	.word	0x08004345
 8004340:	080043df 	.word	0x080043df
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d048      	beq.n	80043e2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004354:	e045      	b.n	80043e2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800435e:	d142      	bne.n	80043e6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004364:	e03f      	b.n	80043e6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800436e:	d123      	bne.n	80043b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	2b03      	cmp	r3, #3
 8004376:	d838      	bhi.n	80043ea <DMA_CheckFifoParam+0xda>
 8004378:	a201      	add	r2, pc, #4	; (adr r2, 8004380 <DMA_CheckFifoParam+0x70>)
 800437a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437e:	bf00      	nop
 8004380:	08004391 	.word	0x08004391
 8004384:	08004397 	.word	0x08004397
 8004388:	08004391 	.word	0x08004391
 800438c:	080043a9 	.word	0x080043a9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	73fb      	strb	r3, [r7, #15]
        break;
 8004394:	e030      	b.n	80043f8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d025      	beq.n	80043ee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043a6:	e022      	b.n	80043ee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043b0:	d11f      	bne.n	80043f2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043b6:	e01c      	b.n	80043f2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d902      	bls.n	80043c6 <DMA_CheckFifoParam+0xb6>
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d003      	beq.n	80043cc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80043c4:	e018      	b.n	80043f8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	73fb      	strb	r3, [r7, #15]
        break;
 80043ca:	e015      	b.n	80043f8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00e      	beq.n	80043f6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	73fb      	strb	r3, [r7, #15]
    break;
 80043dc:	e00b      	b.n	80043f6 <DMA_CheckFifoParam+0xe6>
        break;
 80043de:	bf00      	nop
 80043e0:	e00a      	b.n	80043f8 <DMA_CheckFifoParam+0xe8>
        break;
 80043e2:	bf00      	nop
 80043e4:	e008      	b.n	80043f8 <DMA_CheckFifoParam+0xe8>
        break;
 80043e6:	bf00      	nop
 80043e8:	e006      	b.n	80043f8 <DMA_CheckFifoParam+0xe8>
        break;
 80043ea:	bf00      	nop
 80043ec:	e004      	b.n	80043f8 <DMA_CheckFifoParam+0xe8>
        break;
 80043ee:	bf00      	nop
 80043f0:	e002      	b.n	80043f8 <DMA_CheckFifoParam+0xe8>
        break;
 80043f2:	bf00      	nop
 80043f4:	e000      	b.n	80043f8 <DMA_CheckFifoParam+0xe8>
    break;
 80043f6:	bf00      	nop
    }
  }

  return status;
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop

08004408 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a38      	ldr	r2, [pc, #224]	; (80044fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d022      	beq.n	8004466 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a36      	ldr	r2, [pc, #216]	; (8004500 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d01d      	beq.n	8004466 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a35      	ldr	r2, [pc, #212]	; (8004504 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d018      	beq.n	8004466 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a33      	ldr	r2, [pc, #204]	; (8004508 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d013      	beq.n	8004466 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a32      	ldr	r2, [pc, #200]	; (800450c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d00e      	beq.n	8004466 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a30      	ldr	r2, [pc, #192]	; (8004510 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d009      	beq.n	8004466 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a2f      	ldr	r2, [pc, #188]	; (8004514 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d004      	beq.n	8004466 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a2d      	ldr	r2, [pc, #180]	; (8004518 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d101      	bne.n	800446a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800446a:	2300      	movs	r3, #0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d01a      	beq.n	80044a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	b2db      	uxtb	r3, r3
 8004476:	3b08      	subs	r3, #8
 8004478:	4a28      	ldr	r2, [pc, #160]	; (800451c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800447a:	fba2 2303 	umull	r2, r3, r2, r3
 800447e:	091b      	lsrs	r3, r3, #4
 8004480:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	4b26      	ldr	r3, [pc, #152]	; (8004520 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	461a      	mov	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a24      	ldr	r2, [pc, #144]	; (8004524 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004494:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f003 031f 	and.w	r3, r3, #31
 800449c:	2201      	movs	r2, #1
 800449e:	409a      	lsls	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80044a4:	e024      	b.n	80044f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	3b10      	subs	r3, #16
 80044ae:	4a1e      	ldr	r2, [pc, #120]	; (8004528 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80044b0:	fba2 2303 	umull	r2, r3, r2, r3
 80044b4:	091b      	lsrs	r3, r3, #4
 80044b6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4a1c      	ldr	r2, [pc, #112]	; (800452c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d806      	bhi.n	80044ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	4a1b      	ldr	r2, [pc, #108]	; (8004530 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d902      	bls.n	80044ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	3308      	adds	r3, #8
 80044cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	4b18      	ldr	r3, [pc, #96]	; (8004534 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	461a      	mov	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a16      	ldr	r2, [pc, #88]	; (8004538 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80044e0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f003 031f 	and.w	r3, r3, #31
 80044e8:	2201      	movs	r2, #1
 80044ea:	409a      	lsls	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	669a      	str	r2, [r3, #104]	; 0x68
}
 80044f0:	bf00      	nop
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	58025408 	.word	0x58025408
 8004500:	5802541c 	.word	0x5802541c
 8004504:	58025430 	.word	0x58025430
 8004508:	58025444 	.word	0x58025444
 800450c:	58025458 	.word	0x58025458
 8004510:	5802546c 	.word	0x5802546c
 8004514:	58025480 	.word	0x58025480
 8004518:	58025494 	.word	0x58025494
 800451c:	cccccccd 	.word	0xcccccccd
 8004520:	16009600 	.word	0x16009600
 8004524:	58025880 	.word	0x58025880
 8004528:	aaaaaaab 	.word	0xaaaaaaab
 800452c:	400204b8 	.word	0x400204b8
 8004530:	4002040f 	.word	0x4002040f
 8004534:	10008200 	.word	0x10008200
 8004538:	40020880 	.word	0x40020880

0800453c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	b2db      	uxtb	r3, r3
 800454a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d04a      	beq.n	80045e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b08      	cmp	r3, #8
 8004556:	d847      	bhi.n	80045e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a25      	ldr	r2, [pc, #148]	; (80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d022      	beq.n	80045a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a24      	ldr	r2, [pc, #144]	; (80045f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d01d      	beq.n	80045a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a22      	ldr	r2, [pc, #136]	; (80045fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d018      	beq.n	80045a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a21      	ldr	r2, [pc, #132]	; (8004600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d013      	beq.n	80045a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a1f      	ldr	r2, [pc, #124]	; (8004604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00e      	beq.n	80045a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a1e      	ldr	r2, [pc, #120]	; (8004608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d009      	beq.n	80045a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a1c      	ldr	r2, [pc, #112]	; (800460c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d004      	beq.n	80045a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a1b      	ldr	r2, [pc, #108]	; (8004610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d101      	bne.n	80045ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80045a8:	2301      	movs	r3, #1
 80045aa:	e000      	b.n	80045ae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80045ac:	2300      	movs	r3, #0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	4b17      	ldr	r3, [pc, #92]	; (8004614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80045b6:	4413      	add	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	461a      	mov	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a15      	ldr	r2, [pc, #84]	; (8004618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80045c4:	671a      	str	r2, [r3, #112]	; 0x70
 80045c6:	e009      	b.n	80045dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4b14      	ldr	r3, [pc, #80]	; (800461c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	461a      	mov	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a11      	ldr	r2, [pc, #68]	; (8004620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80045da:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	3b01      	subs	r3, #1
 80045e0:	2201      	movs	r2, #1
 80045e2:	409a      	lsls	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80045e8:	bf00      	nop
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	58025408 	.word	0x58025408
 80045f8:	5802541c 	.word	0x5802541c
 80045fc:	58025430 	.word	0x58025430
 8004600:	58025444 	.word	0x58025444
 8004604:	58025458 	.word	0x58025458
 8004608:	5802546c 	.word	0x5802546c
 800460c:	58025480 	.word	0x58025480
 8004610:	58025494 	.word	0x58025494
 8004614:	1600963f 	.word	0x1600963f
 8004618:	58025940 	.word	0x58025940
 800461c:	1000823f 	.word	0x1000823f
 8004620:	40020940 	.word	0x40020940

08004624 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004624:	b480      	push	{r7}
 8004626:	b089      	sub	sp, #36	; 0x24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800462e:	2300      	movs	r3, #0
 8004630:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004632:	4b89      	ldr	r3, [pc, #548]	; (8004858 <HAL_GPIO_Init+0x234>)
 8004634:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004636:	e194      	b.n	8004962 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	2101      	movs	r1, #1
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	fa01 f303 	lsl.w	r3, r1, r3
 8004644:	4013      	ands	r3, r2
 8004646:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 8186 	beq.w	800495c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f003 0303 	and.w	r3, r3, #3
 8004658:	2b01      	cmp	r3, #1
 800465a:	d005      	beq.n	8004668 <HAL_GPIO_Init+0x44>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f003 0303 	and.w	r3, r3, #3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d130      	bne.n	80046ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	2203      	movs	r2, #3
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	43db      	mvns	r3, r3
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	4013      	ands	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	4313      	orrs	r3, r2
 8004690:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800469e:	2201      	movs	r2, #1
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	43db      	mvns	r3, r3
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	4013      	ands	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	091b      	lsrs	r3, r3, #4
 80046b4:	f003 0201 	and.w	r2, r3, #1
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	d017      	beq.n	8004706 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	2203      	movs	r2, #3
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	43db      	mvns	r3, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4013      	ands	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d123      	bne.n	800475a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	08da      	lsrs	r2, r3, #3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3208      	adds	r2, #8
 800471a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800471e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f003 0307 	and.w	r3, r3, #7
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	220f      	movs	r2, #15
 800472a:	fa02 f303 	lsl.w	r3, r2, r3
 800472e:	43db      	mvns	r3, r3
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	4013      	ands	r3, r2
 8004734:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	691a      	ldr	r2, [r3, #16]
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	4313      	orrs	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	08da      	lsrs	r2, r3, #3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3208      	adds	r2, #8
 8004754:	69b9      	ldr	r1, [r7, #24]
 8004756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	2203      	movs	r2, #3
 8004766:	fa02 f303 	lsl.w	r3, r2, r3
 800476a:	43db      	mvns	r3, r3
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	4013      	ands	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f003 0203 	and.w	r2, r3, #3
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	4313      	orrs	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 80e0 	beq.w	800495c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800479c:	4b2f      	ldr	r3, [pc, #188]	; (800485c <HAL_GPIO_Init+0x238>)
 800479e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047a2:	4a2e      	ldr	r2, [pc, #184]	; (800485c <HAL_GPIO_Init+0x238>)
 80047a4:	f043 0302 	orr.w	r3, r3, #2
 80047a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80047ac:	4b2b      	ldr	r3, [pc, #172]	; (800485c <HAL_GPIO_Init+0x238>)
 80047ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047ba:	4a29      	ldr	r2, [pc, #164]	; (8004860 <HAL_GPIO_Init+0x23c>)
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	089b      	lsrs	r3, r3, #2
 80047c0:	3302      	adds	r3, #2
 80047c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	220f      	movs	r2, #15
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	43db      	mvns	r3, r3
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	4013      	ands	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a20      	ldr	r2, [pc, #128]	; (8004864 <HAL_GPIO_Init+0x240>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d052      	beq.n	800488c <HAL_GPIO_Init+0x268>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a1f      	ldr	r2, [pc, #124]	; (8004868 <HAL_GPIO_Init+0x244>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d031      	beq.n	8004852 <HAL_GPIO_Init+0x22e>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a1e      	ldr	r2, [pc, #120]	; (800486c <HAL_GPIO_Init+0x248>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d02b      	beq.n	800484e <HAL_GPIO_Init+0x22a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a1d      	ldr	r2, [pc, #116]	; (8004870 <HAL_GPIO_Init+0x24c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d025      	beq.n	800484a <HAL_GPIO_Init+0x226>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a1c      	ldr	r2, [pc, #112]	; (8004874 <HAL_GPIO_Init+0x250>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d01f      	beq.n	8004846 <HAL_GPIO_Init+0x222>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a1b      	ldr	r2, [pc, #108]	; (8004878 <HAL_GPIO_Init+0x254>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d019      	beq.n	8004842 <HAL_GPIO_Init+0x21e>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a1a      	ldr	r2, [pc, #104]	; (800487c <HAL_GPIO_Init+0x258>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d013      	beq.n	800483e <HAL_GPIO_Init+0x21a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a19      	ldr	r2, [pc, #100]	; (8004880 <HAL_GPIO_Init+0x25c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00d      	beq.n	800483a <HAL_GPIO_Init+0x216>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a18      	ldr	r2, [pc, #96]	; (8004884 <HAL_GPIO_Init+0x260>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d007      	beq.n	8004836 <HAL_GPIO_Init+0x212>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a17      	ldr	r2, [pc, #92]	; (8004888 <HAL_GPIO_Init+0x264>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d101      	bne.n	8004832 <HAL_GPIO_Init+0x20e>
 800482e:	2309      	movs	r3, #9
 8004830:	e02d      	b.n	800488e <HAL_GPIO_Init+0x26a>
 8004832:	230a      	movs	r3, #10
 8004834:	e02b      	b.n	800488e <HAL_GPIO_Init+0x26a>
 8004836:	2308      	movs	r3, #8
 8004838:	e029      	b.n	800488e <HAL_GPIO_Init+0x26a>
 800483a:	2307      	movs	r3, #7
 800483c:	e027      	b.n	800488e <HAL_GPIO_Init+0x26a>
 800483e:	2306      	movs	r3, #6
 8004840:	e025      	b.n	800488e <HAL_GPIO_Init+0x26a>
 8004842:	2305      	movs	r3, #5
 8004844:	e023      	b.n	800488e <HAL_GPIO_Init+0x26a>
 8004846:	2304      	movs	r3, #4
 8004848:	e021      	b.n	800488e <HAL_GPIO_Init+0x26a>
 800484a:	2303      	movs	r3, #3
 800484c:	e01f      	b.n	800488e <HAL_GPIO_Init+0x26a>
 800484e:	2302      	movs	r3, #2
 8004850:	e01d      	b.n	800488e <HAL_GPIO_Init+0x26a>
 8004852:	2301      	movs	r3, #1
 8004854:	e01b      	b.n	800488e <HAL_GPIO_Init+0x26a>
 8004856:	bf00      	nop
 8004858:	58000080 	.word	0x58000080
 800485c:	58024400 	.word	0x58024400
 8004860:	58000400 	.word	0x58000400
 8004864:	58020000 	.word	0x58020000
 8004868:	58020400 	.word	0x58020400
 800486c:	58020800 	.word	0x58020800
 8004870:	58020c00 	.word	0x58020c00
 8004874:	58021000 	.word	0x58021000
 8004878:	58021400 	.word	0x58021400
 800487c:	58021800 	.word	0x58021800
 8004880:	58021c00 	.word	0x58021c00
 8004884:	58022000 	.word	0x58022000
 8004888:	58022400 	.word	0x58022400
 800488c:	2300      	movs	r3, #0
 800488e:	69fa      	ldr	r2, [r7, #28]
 8004890:	f002 0203 	and.w	r2, r2, #3
 8004894:	0092      	lsls	r2, r2, #2
 8004896:	4093      	lsls	r3, r2
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4313      	orrs	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800489e:	4938      	ldr	r1, [pc, #224]	; (8004980 <HAL_GPIO_Init+0x35c>)
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	089b      	lsrs	r3, r3, #2
 80048a4:	3302      	adds	r3, #2
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	43db      	mvns	r3, r3
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	4013      	ands	r3, r2
 80048bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80048d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80048da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	43db      	mvns	r3, r3
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	4013      	ands	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004900:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	43db      	mvns	r3, r3
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4013      	ands	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	43db      	mvns	r3, r3
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	4013      	ands	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	4313      	orrs	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	3301      	adds	r3, #1
 8004960:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	fa22 f303 	lsr.w	r3, r2, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	f47f ae63 	bne.w	8004638 <HAL_GPIO_Init+0x14>
  }
}
 8004972:	bf00      	nop
 8004974:	bf00      	nop
 8004976:	3724      	adds	r7, #36	; 0x24
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	58000400 	.word	0x58000400

08004984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	807b      	strh	r3, [r7, #2]
 8004990:	4613      	mov	r3, r2
 8004992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004994:	787b      	ldrb	r3, [r7, #1]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800499a:	887a      	ldrh	r2, [r7, #2]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80049a0:	e003      	b.n	80049aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80049a2:	887b      	ldrh	r3, [r7, #2]
 80049a4:	041a      	lsls	r2, r3, #16
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	619a      	str	r2, [r3, #24]
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b085      	sub	sp, #20
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	460b      	mov	r3, r1
 80049c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049c8:	887a      	ldrh	r2, [r7, #2]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	4013      	ands	r3, r2
 80049ce:	041a      	lsls	r2, r3, #16
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	43d9      	mvns	r1, r3
 80049d4:	887b      	ldrh	r3, [r7, #2]
 80049d6:	400b      	ands	r3, r1
 80049d8:	431a      	orrs	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	619a      	str	r2, [r3, #24]
}
 80049de:	bf00      	nop
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
	...

080049ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80049f4:	4b19      	ldr	r3, [pc, #100]	; (8004a5c <HAL_PWREx_ConfigSupply+0x70>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d00a      	beq.n	8004a16 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004a00:	4b16      	ldr	r3, [pc, #88]	; (8004a5c <HAL_PWREx_ConfigSupply+0x70>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d001      	beq.n	8004a12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e01f      	b.n	8004a52 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	e01d      	b.n	8004a52 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004a16:	4b11      	ldr	r3, [pc, #68]	; (8004a5c <HAL_PWREx_ConfigSupply+0x70>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f023 0207 	bic.w	r2, r3, #7
 8004a1e:	490f      	ldr	r1, [pc, #60]	; (8004a5c <HAL_PWREx_ConfigSupply+0x70>)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004a26:	f7fc fea5 	bl	8001774 <HAL_GetTick>
 8004a2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a2c:	e009      	b.n	8004a42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a2e:	f7fc fea1 	bl	8001774 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a3c:	d901      	bls.n	8004a42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e007      	b.n	8004a52 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a42:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <HAL_PWREx_ConfigSupply+0x70>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a4e:	d1ee      	bne.n	8004a2e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	58024800 	.word	0x58024800

08004a60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08c      	sub	sp, #48	; 0x30
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d102      	bne.n	8004a74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	f000 bc48 	b.w	8005304 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 8088 	beq.w	8004b92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a82:	4b99      	ldr	r3, [pc, #612]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a8c:	4b96      	ldr	r3, [pc, #600]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a90:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a94:	2b10      	cmp	r3, #16
 8004a96:	d007      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x48>
 8004a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9a:	2b18      	cmp	r3, #24
 8004a9c:	d111      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x62>
 8004a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa0:	f003 0303 	and.w	r3, r3, #3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d10c      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa8:	4b8f      	ldr	r3, [pc, #572]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d06d      	beq.n	8004b90 <HAL_RCC_OscConfig+0x130>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d169      	bne.n	8004b90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	f000 bc21 	b.w	8005304 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aca:	d106      	bne.n	8004ada <HAL_RCC_OscConfig+0x7a>
 8004acc:	4b86      	ldr	r3, [pc, #536]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a85      	ldr	r2, [pc, #532]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	e02e      	b.n	8004b38 <HAL_RCC_OscConfig+0xd8>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10c      	bne.n	8004afc <HAL_RCC_OscConfig+0x9c>
 8004ae2:	4b81      	ldr	r3, [pc, #516]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a80      	ldr	r2, [pc, #512]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	4b7e      	ldr	r3, [pc, #504]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a7d      	ldr	r2, [pc, #500]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004af4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	e01d      	b.n	8004b38 <HAL_RCC_OscConfig+0xd8>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b04:	d10c      	bne.n	8004b20 <HAL_RCC_OscConfig+0xc0>
 8004b06:	4b78      	ldr	r3, [pc, #480]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a77      	ldr	r2, [pc, #476]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	4b75      	ldr	r3, [pc, #468]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a74      	ldr	r2, [pc, #464]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	e00b      	b.n	8004b38 <HAL_RCC_OscConfig+0xd8>
 8004b20:	4b71      	ldr	r3, [pc, #452]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a70      	ldr	r2, [pc, #448]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b2a:	6013      	str	r3, [r2, #0]
 8004b2c:	4b6e      	ldr	r3, [pc, #440]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a6d      	ldr	r2, [pc, #436]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d013      	beq.n	8004b68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b40:	f7fc fe18 	bl	8001774 <HAL_GetTick>
 8004b44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b48:	f7fc fe14 	bl	8001774 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b64      	cmp	r3, #100	; 0x64
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e3d4      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b5a:	4b63      	ldr	r3, [pc, #396]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0f0      	beq.n	8004b48 <HAL_RCC_OscConfig+0xe8>
 8004b66:	e014      	b.n	8004b92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b68:	f7fc fe04 	bl	8001774 <HAL_GetTick>
 8004b6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b70:	f7fc fe00 	bl	8001774 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b64      	cmp	r3, #100	; 0x64
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e3c0      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b82:	4b59      	ldr	r3, [pc, #356]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0x110>
 8004b8e:	e000      	b.n	8004b92 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 80ca 	beq.w	8004d34 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ba0:	4b51      	ldr	r3, [pc, #324]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ba8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004baa:	4b4f      	ldr	r3, [pc, #316]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d007      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x166>
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	2b18      	cmp	r3, #24
 8004bba:	d156      	bne.n	8004c6a <HAL_RCC_OscConfig+0x20a>
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d151      	bne.n	8004c6a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bc6:	4b48      	ldr	r3, [pc, #288]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d005      	beq.n	8004bde <HAL_RCC_OscConfig+0x17e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e392      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bde:	4b42      	ldr	r3, [pc, #264]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f023 0219 	bic.w	r2, r3, #25
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	493f      	ldr	r1, [pc, #252]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf0:	f7fc fdc0 	bl	8001774 <HAL_GetTick>
 8004bf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf8:	f7fc fdbc 	bl	8001774 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e37c      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c0a:	4b37      	ldr	r3, [pc, #220]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0304 	and.w	r3, r3, #4
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c16:	f7fc fddd 	bl	80017d4 <HAL_GetREVID>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d817      	bhi.n	8004c54 <HAL_RCC_OscConfig+0x1f4>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	2b40      	cmp	r3, #64	; 0x40
 8004c2a:	d108      	bne.n	8004c3e <HAL_RCC_OscConfig+0x1de>
 8004c2c:	4b2e      	ldr	r3, [pc, #184]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004c34:	4a2c      	ldr	r2, [pc, #176]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c3a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c3c:	e07a      	b.n	8004d34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c3e:	4b2a      	ldr	r3, [pc, #168]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	031b      	lsls	r3, r3, #12
 8004c4c:	4926      	ldr	r1, [pc, #152]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c52:	e06f      	b.n	8004d34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c54:	4b24      	ldr	r3, [pc, #144]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	061b      	lsls	r3, r3, #24
 8004c62:	4921      	ldr	r1, [pc, #132]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c68:	e064      	b.n	8004d34 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d047      	beq.n	8004d02 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c72:	4b1d      	ldr	r3, [pc, #116]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f023 0219 	bic.w	r2, r3, #25
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	491a      	ldr	r1, [pc, #104]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c84:	f7fc fd76 	bl	8001774 <HAL_GetTick>
 8004c88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c8c:	f7fc fd72 	bl	8001774 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e332      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c9e:	4b12      	ldr	r3, [pc, #72]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0304 	and.w	r3, r3, #4
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0f0      	beq.n	8004c8c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004caa:	f7fc fd93 	bl	80017d4 <HAL_GetREVID>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	f241 0203 	movw	r2, #4099	; 0x1003
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d819      	bhi.n	8004cec <HAL_RCC_OscConfig+0x28c>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	2b40      	cmp	r3, #64	; 0x40
 8004cbe:	d108      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x272>
 8004cc0:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004cc8:	4a07      	ldr	r2, [pc, #28]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cce:	6053      	str	r3, [r2, #4]
 8004cd0:	e030      	b.n	8004d34 <HAL_RCC_OscConfig+0x2d4>
 8004cd2:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	031b      	lsls	r3, r3, #12
 8004ce0:	4901      	ldr	r1, [pc, #4]	; (8004ce8 <HAL_RCC_OscConfig+0x288>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	604b      	str	r3, [r1, #4]
 8004ce6:	e025      	b.n	8004d34 <HAL_RCC_OscConfig+0x2d4>
 8004ce8:	58024400 	.word	0x58024400
 8004cec:	4b9a      	ldr	r3, [pc, #616]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	061b      	lsls	r3, r3, #24
 8004cfa:	4997      	ldr	r1, [pc, #604]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	604b      	str	r3, [r1, #4]
 8004d00:	e018      	b.n	8004d34 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d02:	4b95      	ldr	r3, [pc, #596]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a94      	ldr	r2, [pc, #592]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004d08:	f023 0301 	bic.w	r3, r3, #1
 8004d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0e:	f7fc fd31 	bl	8001774 <HAL_GetTick>
 8004d12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d14:	e008      	b.n	8004d28 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d16:	f7fc fd2d 	bl	8001774 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e2ed      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d28:	4b8b      	ldr	r3, [pc, #556]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1f0      	bne.n	8004d16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0310 	and.w	r3, r3, #16
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 80a9 	beq.w	8004e94 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d42:	4b85      	ldr	r3, [pc, #532]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d4a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d4c:	4b82      	ldr	r3, [pc, #520]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d50:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d007      	beq.n	8004d68 <HAL_RCC_OscConfig+0x308>
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	2b18      	cmp	r3, #24
 8004d5c:	d13a      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x374>
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d135      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d68:	4b7b      	ldr	r3, [pc, #492]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <HAL_RCC_OscConfig+0x320>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	2b80      	cmp	r3, #128	; 0x80
 8004d7a:	d001      	beq.n	8004d80 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e2c1      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d80:	f7fc fd28 	bl	80017d4 <HAL_GetREVID>
 8004d84:	4603      	mov	r3, r0
 8004d86:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d817      	bhi.n	8004dbe <HAL_RCC_OscConfig+0x35e>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	2b20      	cmp	r3, #32
 8004d94:	d108      	bne.n	8004da8 <HAL_RCC_OscConfig+0x348>
 8004d96:	4b70      	ldr	r3, [pc, #448]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004d9e:	4a6e      	ldr	r2, [pc, #440]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004da0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004da4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004da6:	e075      	b.n	8004e94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004da8:	4b6b      	ldr	r3, [pc, #428]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	069b      	lsls	r3, r3, #26
 8004db6:	4968      	ldr	r1, [pc, #416]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004dbc:	e06a      	b.n	8004e94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dbe:	4b66      	ldr	r3, [pc, #408]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	061b      	lsls	r3, r3, #24
 8004dcc:	4962      	ldr	r1, [pc, #392]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004dd2:	e05f      	b.n	8004e94 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d042      	beq.n	8004e62 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004ddc:	4b5e      	ldr	r3, [pc, #376]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a5d      	ldr	r2, [pc, #372]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de8:	f7fc fcc4 	bl	8001774 <HAL_GetTick>
 8004dec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004df0:	f7fc fcc0 	bl	8001774 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e280      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e02:	4b55      	ldr	r3, [pc, #340]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0f0      	beq.n	8004df0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e0e:	f7fc fce1 	bl	80017d4 <HAL_GetREVID>
 8004e12:	4603      	mov	r3, r0
 8004e14:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d817      	bhi.n	8004e4c <HAL_RCC_OscConfig+0x3ec>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	d108      	bne.n	8004e36 <HAL_RCC_OscConfig+0x3d6>
 8004e24:	4b4c      	ldr	r3, [pc, #304]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004e2c:	4a4a      	ldr	r2, [pc, #296]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004e2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e32:	6053      	str	r3, [r2, #4]
 8004e34:	e02e      	b.n	8004e94 <HAL_RCC_OscConfig+0x434>
 8004e36:	4b48      	ldr	r3, [pc, #288]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	069b      	lsls	r3, r3, #26
 8004e44:	4944      	ldr	r1, [pc, #272]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	604b      	str	r3, [r1, #4]
 8004e4a:	e023      	b.n	8004e94 <HAL_RCC_OscConfig+0x434>
 8004e4c:	4b42      	ldr	r3, [pc, #264]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	061b      	lsls	r3, r3, #24
 8004e5a:	493f      	ldr	r1, [pc, #252]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60cb      	str	r3, [r1, #12]
 8004e60:	e018      	b.n	8004e94 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004e62:	4b3d      	ldr	r3, [pc, #244]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a3c      	ldr	r2, [pc, #240]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004e68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e6e:	f7fc fc81 	bl	8001774 <HAL_GetTick>
 8004e72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e74:	e008      	b.n	8004e88 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e76:	f7fc fc7d 	bl	8001774 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e23d      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e88:	4b33      	ldr	r3, [pc, #204]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1f0      	bne.n	8004e76 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0308 	and.w	r3, r3, #8
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d036      	beq.n	8004f0e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d019      	beq.n	8004edc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ea8:	4b2b      	ldr	r3, [pc, #172]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eac:	4a2a      	ldr	r2, [pc, #168]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004eae:	f043 0301 	orr.w	r3, r3, #1
 8004eb2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb4:	f7fc fc5e 	bl	8001774 <HAL_GetTick>
 8004eb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ebc:	f7fc fc5a 	bl	8001774 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e21a      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ece:	4b22      	ldr	r3, [pc, #136]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0f0      	beq.n	8004ebc <HAL_RCC_OscConfig+0x45c>
 8004eda:	e018      	b.n	8004f0e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004edc:	4b1e      	ldr	r3, [pc, #120]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee0:	4a1d      	ldr	r2, [pc, #116]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004ee2:	f023 0301 	bic.w	r3, r3, #1
 8004ee6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee8:	f7fc fc44 	bl	8001774 <HAL_GetTick>
 8004eec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ef0:	f7fc fc40 	bl	8001774 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e200      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f02:	4b15      	ldr	r3, [pc, #84]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f0      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0320 	and.w	r3, r3, #32
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d039      	beq.n	8004f8e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d01c      	beq.n	8004f5c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f22:	4b0d      	ldr	r3, [pc, #52]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a0c      	ldr	r2, [pc, #48]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004f28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f2e:	f7fc fc21 	bl	8001774 <HAL_GetTick>
 8004f32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f34:	e008      	b.n	8004f48 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f36:	f7fc fc1d 	bl	8001774 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e1dd      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f48:	4b03      	ldr	r3, [pc, #12]	; (8004f58 <HAL_RCC_OscConfig+0x4f8>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d0f0      	beq.n	8004f36 <HAL_RCC_OscConfig+0x4d6>
 8004f54:	e01b      	b.n	8004f8e <HAL_RCC_OscConfig+0x52e>
 8004f56:	bf00      	nop
 8004f58:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f5c:	4b9b      	ldr	r3, [pc, #620]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a9a      	ldr	r2, [pc, #616]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 8004f62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f68:	f7fc fc04 	bl	8001774 <HAL_GetTick>
 8004f6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f70:	f7fc fc00 	bl	8001774 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e1c0      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f82:	4b92      	ldr	r3, [pc, #584]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1f0      	bne.n	8004f70 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0304 	and.w	r3, r3, #4
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 8081 	beq.w	800509e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f9c:	4b8c      	ldr	r3, [pc, #560]	; (80051d0 <HAL_RCC_OscConfig+0x770>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a8b      	ldr	r2, [pc, #556]	; (80051d0 <HAL_RCC_OscConfig+0x770>)
 8004fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fa6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fa8:	f7fc fbe4 	bl	8001774 <HAL_GetTick>
 8004fac:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fb0:	f7fc fbe0 	bl	8001774 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b64      	cmp	r3, #100	; 0x64
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e1a0      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fc2:	4b83      	ldr	r3, [pc, #524]	; (80051d0 <HAL_RCC_OscConfig+0x770>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0f0      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d106      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x584>
 8004fd6:	4b7d      	ldr	r3, [pc, #500]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fda:	4a7c      	ldr	r2, [pc, #496]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 8004fdc:	f043 0301 	orr.w	r3, r3, #1
 8004fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8004fe2:	e02d      	b.n	8005040 <HAL_RCC_OscConfig+0x5e0>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10c      	bne.n	8005006 <HAL_RCC_OscConfig+0x5a6>
 8004fec:	4b77      	ldr	r3, [pc, #476]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 8004fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff0:	4a76      	ldr	r2, [pc, #472]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 8004ff2:	f023 0301 	bic.w	r3, r3, #1
 8004ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ff8:	4b74      	ldr	r3, [pc, #464]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 8004ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffc:	4a73      	ldr	r2, [pc, #460]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 8004ffe:	f023 0304 	bic.w	r3, r3, #4
 8005002:	6713      	str	r3, [r2, #112]	; 0x70
 8005004:	e01c      	b.n	8005040 <HAL_RCC_OscConfig+0x5e0>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	2b05      	cmp	r3, #5
 800500c:	d10c      	bne.n	8005028 <HAL_RCC_OscConfig+0x5c8>
 800500e:	4b6f      	ldr	r3, [pc, #444]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005012:	4a6e      	ldr	r2, [pc, #440]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005014:	f043 0304 	orr.w	r3, r3, #4
 8005018:	6713      	str	r3, [r2, #112]	; 0x70
 800501a:	4b6c      	ldr	r3, [pc, #432]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 800501c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501e:	4a6b      	ldr	r2, [pc, #428]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005020:	f043 0301 	orr.w	r3, r3, #1
 8005024:	6713      	str	r3, [r2, #112]	; 0x70
 8005026:	e00b      	b.n	8005040 <HAL_RCC_OscConfig+0x5e0>
 8005028:	4b68      	ldr	r3, [pc, #416]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 800502a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502c:	4a67      	ldr	r2, [pc, #412]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 800502e:	f023 0301 	bic.w	r3, r3, #1
 8005032:	6713      	str	r3, [r2, #112]	; 0x70
 8005034:	4b65      	ldr	r3, [pc, #404]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005038:	4a64      	ldr	r2, [pc, #400]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 800503a:	f023 0304 	bic.w	r3, r3, #4
 800503e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d015      	beq.n	8005074 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005048:	f7fc fb94 	bl	8001774 <HAL_GetTick>
 800504c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800504e:	e00a      	b.n	8005066 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005050:	f7fc fb90 	bl	8001774 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	f241 3288 	movw	r2, #5000	; 0x1388
 800505e:	4293      	cmp	r3, r2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e14e      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005066:	4b59      	ldr	r3, [pc, #356]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0ee      	beq.n	8005050 <HAL_RCC_OscConfig+0x5f0>
 8005072:	e014      	b.n	800509e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005074:	f7fc fb7e 	bl	8001774 <HAL_GetTick>
 8005078:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800507a:	e00a      	b.n	8005092 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800507c:	f7fc fb7a 	bl	8001774 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	f241 3288 	movw	r2, #5000	; 0x1388
 800508a:	4293      	cmp	r3, r2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e138      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005092:	4b4e      	ldr	r3, [pc, #312]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1ee      	bne.n	800507c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 812d 	beq.w	8005302 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80050a8:	4b48      	ldr	r3, [pc, #288]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050b0:	2b18      	cmp	r3, #24
 80050b2:	f000 80bd 	beq.w	8005230 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	f040 809e 	bne.w	80051fc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c0:	4b42      	ldr	r3, [pc, #264]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a41      	ldr	r2, [pc, #260]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 80050c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050cc:	f7fc fb52 	bl	8001774 <HAL_GetTick>
 80050d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050d4:	f7fc fb4e 	bl	8001774 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e10e      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050e6:	4b39      	ldr	r3, [pc, #228]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f0      	bne.n	80050d4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050f2:	4b36      	ldr	r3, [pc, #216]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 80050f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050f6:	4b37      	ldr	r3, [pc, #220]	; (80051d4 <HAL_RCC_OscConfig+0x774>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005102:	0112      	lsls	r2, r2, #4
 8005104:	430a      	orrs	r2, r1
 8005106:	4931      	ldr	r1, [pc, #196]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005108:	4313      	orrs	r3, r2
 800510a:	628b      	str	r3, [r1, #40]	; 0x28
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005110:	3b01      	subs	r3, #1
 8005112:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511a:	3b01      	subs	r3, #1
 800511c:	025b      	lsls	r3, r3, #9
 800511e:	b29b      	uxth	r3, r3
 8005120:	431a      	orrs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005126:	3b01      	subs	r3, #1
 8005128:	041b      	lsls	r3, r3, #16
 800512a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800512e:	431a      	orrs	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005134:	3b01      	subs	r3, #1
 8005136:	061b      	lsls	r3, r3, #24
 8005138:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800513c:	4923      	ldr	r1, [pc, #140]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 800513e:	4313      	orrs	r3, r2
 8005140:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005142:	4b22      	ldr	r3, [pc, #136]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005146:	4a21      	ldr	r2, [pc, #132]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005148:	f023 0301 	bic.w	r3, r3, #1
 800514c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800514e:	4b1f      	ldr	r3, [pc, #124]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005152:	4b21      	ldr	r3, [pc, #132]	; (80051d8 <HAL_RCC_OscConfig+0x778>)
 8005154:	4013      	ands	r3, r2
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800515a:	00d2      	lsls	r2, r2, #3
 800515c:	491b      	ldr	r1, [pc, #108]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 800515e:	4313      	orrs	r3, r2
 8005160:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005162:	4b1a      	ldr	r3, [pc, #104]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005166:	f023 020c 	bic.w	r2, r3, #12
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	4917      	ldr	r1, [pc, #92]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005170:	4313      	orrs	r3, r2
 8005172:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005174:	4b15      	ldr	r3, [pc, #84]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005178:	f023 0202 	bic.w	r2, r3, #2
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005180:	4912      	ldr	r1, [pc, #72]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005182:	4313      	orrs	r3, r2
 8005184:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005186:	4b11      	ldr	r3, [pc, #68]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518a:	4a10      	ldr	r2, [pc, #64]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 800518c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005190:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005192:	4b0e      	ldr	r3, [pc, #56]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005196:	4a0d      	ldr	r2, [pc, #52]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 8005198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800519c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800519e:	4b0b      	ldr	r3, [pc, #44]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 80051a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a2:	4a0a      	ldr	r2, [pc, #40]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 80051a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80051aa:	4b08      	ldr	r3, [pc, #32]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	4a07      	ldr	r2, [pc, #28]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 80051b0:	f043 0301 	orr.w	r3, r3, #1
 80051b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051b6:	4b05      	ldr	r3, [pc, #20]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a04      	ldr	r2, [pc, #16]	; (80051cc <HAL_RCC_OscConfig+0x76c>)
 80051bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c2:	f7fc fad7 	bl	8001774 <HAL_GetTick>
 80051c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051c8:	e011      	b.n	80051ee <HAL_RCC_OscConfig+0x78e>
 80051ca:	bf00      	nop
 80051cc:	58024400 	.word	0x58024400
 80051d0:	58024800 	.word	0x58024800
 80051d4:	fffffc0c 	.word	0xfffffc0c
 80051d8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051dc:	f7fc faca 	bl	8001774 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e08a      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051ee:	4b47      	ldr	r3, [pc, #284]	; (800530c <HAL_RCC_OscConfig+0x8ac>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d0f0      	beq.n	80051dc <HAL_RCC_OscConfig+0x77c>
 80051fa:	e082      	b.n	8005302 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051fc:	4b43      	ldr	r3, [pc, #268]	; (800530c <HAL_RCC_OscConfig+0x8ac>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a42      	ldr	r2, [pc, #264]	; (800530c <HAL_RCC_OscConfig+0x8ac>)
 8005202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005208:	f7fc fab4 	bl	8001774 <HAL_GetTick>
 800520c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005210:	f7fc fab0 	bl	8001774 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e070      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005222:	4b3a      	ldr	r3, [pc, #232]	; (800530c <HAL_RCC_OscConfig+0x8ac>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1f0      	bne.n	8005210 <HAL_RCC_OscConfig+0x7b0>
 800522e:	e068      	b.n	8005302 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005230:	4b36      	ldr	r3, [pc, #216]	; (800530c <HAL_RCC_OscConfig+0x8ac>)
 8005232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005234:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005236:	4b35      	ldr	r3, [pc, #212]	; (800530c <HAL_RCC_OscConfig+0x8ac>)
 8005238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	2b01      	cmp	r3, #1
 8005242:	d031      	beq.n	80052a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	f003 0203 	and.w	r2, r3, #3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800524e:	429a      	cmp	r2, r3
 8005250:	d12a      	bne.n	80052a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	091b      	lsrs	r3, r3, #4
 8005256:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800525e:	429a      	cmp	r2, r3
 8005260:	d122      	bne.n	80052a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800526e:	429a      	cmp	r2, r3
 8005270:	d11a      	bne.n	80052a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	0a5b      	lsrs	r3, r3, #9
 8005276:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005280:	429a      	cmp	r2, r3
 8005282:	d111      	bne.n	80052a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	0c1b      	lsrs	r3, r3, #16
 8005288:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005290:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005292:	429a      	cmp	r2, r3
 8005294:	d108      	bne.n	80052a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	0e1b      	lsrs	r3, r3, #24
 800529a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d001      	beq.n	80052ac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e02b      	b.n	8005304 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80052ac:	4b17      	ldr	r3, [pc, #92]	; (800530c <HAL_RCC_OscConfig+0x8ac>)
 80052ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b0:	08db      	lsrs	r3, r3, #3
 80052b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052b6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d01f      	beq.n	8005302 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80052c2:	4b12      	ldr	r3, [pc, #72]	; (800530c <HAL_RCC_OscConfig+0x8ac>)
 80052c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c6:	4a11      	ldr	r2, [pc, #68]	; (800530c <HAL_RCC_OscConfig+0x8ac>)
 80052c8:	f023 0301 	bic.w	r3, r3, #1
 80052cc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052ce:	f7fc fa51 	bl	8001774 <HAL_GetTick>
 80052d2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80052d4:	bf00      	nop
 80052d6:	f7fc fa4d 	bl	8001774 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	4293      	cmp	r3, r2
 80052e0:	d0f9      	beq.n	80052d6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80052e2:	4b0a      	ldr	r3, [pc, #40]	; (800530c <HAL_RCC_OscConfig+0x8ac>)
 80052e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052e6:	4b0a      	ldr	r3, [pc, #40]	; (8005310 <HAL_RCC_OscConfig+0x8b0>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80052ee:	00d2      	lsls	r2, r2, #3
 80052f0:	4906      	ldr	r1, [pc, #24]	; (800530c <HAL_RCC_OscConfig+0x8ac>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80052f6:	4b05      	ldr	r3, [pc, #20]	; (800530c <HAL_RCC_OscConfig+0x8ac>)
 80052f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fa:	4a04      	ldr	r2, [pc, #16]	; (800530c <HAL_RCC_OscConfig+0x8ac>)
 80052fc:	f043 0301 	orr.w	r3, r3, #1
 8005300:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3730      	adds	r7, #48	; 0x30
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	58024400 	.word	0x58024400
 8005310:	ffff0007 	.word	0xffff0007

08005314 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e19c      	b.n	8005662 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005328:	4b8a      	ldr	r3, [pc, #552]	; (8005554 <HAL_RCC_ClockConfig+0x240>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 030f 	and.w	r3, r3, #15
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d910      	bls.n	8005358 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005336:	4b87      	ldr	r3, [pc, #540]	; (8005554 <HAL_RCC_ClockConfig+0x240>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f023 020f 	bic.w	r2, r3, #15
 800533e:	4985      	ldr	r1, [pc, #532]	; (8005554 <HAL_RCC_ClockConfig+0x240>)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	4313      	orrs	r3, r2
 8005344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005346:	4b83      	ldr	r3, [pc, #524]	; (8005554 <HAL_RCC_ClockConfig+0x240>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 030f 	and.w	r3, r3, #15
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d001      	beq.n	8005358 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e184      	b.n	8005662 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b00      	cmp	r3, #0
 8005362:	d010      	beq.n	8005386 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691a      	ldr	r2, [r3, #16]
 8005368:	4b7b      	ldr	r3, [pc, #492]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005370:	429a      	cmp	r2, r3
 8005372:	d908      	bls.n	8005386 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005374:	4b78      	ldr	r3, [pc, #480]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	4975      	ldr	r1, [pc, #468]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005382:	4313      	orrs	r3, r2
 8005384:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0308 	and.w	r3, r3, #8
 800538e:	2b00      	cmp	r3, #0
 8005390:	d010      	beq.n	80053b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	695a      	ldr	r2, [r3, #20]
 8005396:	4b70      	ldr	r3, [pc, #448]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800539e:	429a      	cmp	r2, r3
 80053a0:	d908      	bls.n	80053b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053a2:	4b6d      	ldr	r3, [pc, #436]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	496a      	ldr	r1, [pc, #424]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0310 	and.w	r3, r3, #16
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d010      	beq.n	80053e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699a      	ldr	r2, [r3, #24]
 80053c4:	4b64      	ldr	r3, [pc, #400]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d908      	bls.n	80053e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053d0:	4b61      	ldr	r3, [pc, #388]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	495e      	ldr	r1, [pc, #376]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0320 	and.w	r3, r3, #32
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d010      	beq.n	8005410 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	69da      	ldr	r2, [r3, #28]
 80053f2:	4b59      	ldr	r3, [pc, #356]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d908      	bls.n	8005410 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80053fe:	4b56      	ldr	r3, [pc, #344]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	4953      	ldr	r1, [pc, #332]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 800540c:	4313      	orrs	r3, r2
 800540e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d010      	beq.n	800543e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	4b4d      	ldr	r3, [pc, #308]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	f003 030f 	and.w	r3, r3, #15
 8005428:	429a      	cmp	r2, r3
 800542a:	d908      	bls.n	800543e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800542c:	4b4a      	ldr	r3, [pc, #296]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	f023 020f 	bic.w	r2, r3, #15
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	4947      	ldr	r1, [pc, #284]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 800543a:	4313      	orrs	r3, r2
 800543c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d055      	beq.n	80054f6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800544a:	4b43      	ldr	r3, [pc, #268]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	4940      	ldr	r1, [pc, #256]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005458:	4313      	orrs	r3, r2
 800545a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	2b02      	cmp	r3, #2
 8005462:	d107      	bne.n	8005474 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005464:	4b3c      	ldr	r3, [pc, #240]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d121      	bne.n	80054b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e0f6      	b.n	8005662 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2b03      	cmp	r3, #3
 800547a:	d107      	bne.n	800548c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800547c:	4b36      	ldr	r3, [pc, #216]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d115      	bne.n	80054b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e0ea      	b.n	8005662 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d107      	bne.n	80054a4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005494:	4b30      	ldr	r3, [pc, #192]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549c:	2b00      	cmp	r3, #0
 800549e:	d109      	bne.n	80054b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e0de      	b.n	8005662 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054a4:	4b2c      	ldr	r3, [pc, #176]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e0d6      	b.n	8005662 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054b4:	4b28      	ldr	r3, [pc, #160]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	f023 0207 	bic.w	r2, r3, #7
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4925      	ldr	r1, [pc, #148]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054c6:	f7fc f955 	bl	8001774 <HAL_GetTick>
 80054ca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054cc:	e00a      	b.n	80054e4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054ce:	f7fc f951 	bl	8001774 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054dc:	4293      	cmp	r3, r2
 80054de:	d901      	bls.n	80054e4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e0be      	b.n	8005662 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054e4:	4b1c      	ldr	r3, [pc, #112]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d1eb      	bne.n	80054ce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d010      	beq.n	8005524 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	4b14      	ldr	r3, [pc, #80]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	f003 030f 	and.w	r3, r3, #15
 800550e:	429a      	cmp	r2, r3
 8005510:	d208      	bcs.n	8005524 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005512:	4b11      	ldr	r3, [pc, #68]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	f023 020f 	bic.w	r2, r3, #15
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	490e      	ldr	r1, [pc, #56]	; (8005558 <HAL_RCC_ClockConfig+0x244>)
 8005520:	4313      	orrs	r3, r2
 8005522:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005524:	4b0b      	ldr	r3, [pc, #44]	; (8005554 <HAL_RCC_ClockConfig+0x240>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 030f 	and.w	r3, r3, #15
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	429a      	cmp	r2, r3
 8005530:	d214      	bcs.n	800555c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005532:	4b08      	ldr	r3, [pc, #32]	; (8005554 <HAL_RCC_ClockConfig+0x240>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f023 020f 	bic.w	r2, r3, #15
 800553a:	4906      	ldr	r1, [pc, #24]	; (8005554 <HAL_RCC_ClockConfig+0x240>)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	4313      	orrs	r3, r2
 8005540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005542:	4b04      	ldr	r3, [pc, #16]	; (8005554 <HAL_RCC_ClockConfig+0x240>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	429a      	cmp	r2, r3
 800554e:	d005      	beq.n	800555c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e086      	b.n	8005662 <HAL_RCC_ClockConfig+0x34e>
 8005554:	52002000 	.word	0x52002000
 8005558:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	2b00      	cmp	r3, #0
 8005566:	d010      	beq.n	800558a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	4b3f      	ldr	r3, [pc, #252]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005574:	429a      	cmp	r2, r3
 8005576:	d208      	bcs.n	800558a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005578:	4b3c      	ldr	r3, [pc, #240]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	4939      	ldr	r1, [pc, #228]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 8005586:	4313      	orrs	r3, r2
 8005588:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	2b00      	cmp	r3, #0
 8005594:	d010      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	695a      	ldr	r2, [r3, #20]
 800559a:	4b34      	ldr	r3, [pc, #208]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d208      	bcs.n	80055b8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055a6:	4b31      	ldr	r3, [pc, #196]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	492e      	ldr	r1, [pc, #184]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0310 	and.w	r3, r3, #16
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d010      	beq.n	80055e6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	699a      	ldr	r2, [r3, #24]
 80055c8:	4b28      	ldr	r3, [pc, #160]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d208      	bcs.n	80055e6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055d4:	4b25      	ldr	r3, [pc, #148]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	4922      	ldr	r1, [pc, #136]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d010      	beq.n	8005614 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69da      	ldr	r2, [r3, #28]
 80055f6:	4b1d      	ldr	r3, [pc, #116]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055fe:	429a      	cmp	r2, r3
 8005600:	d208      	bcs.n	8005614 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005602:	4b1a      	ldr	r3, [pc, #104]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	4917      	ldr	r1, [pc, #92]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 8005610:	4313      	orrs	r3, r2
 8005612:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005614:	f000 f834 	bl	8005680 <HAL_RCC_GetSysClockFreq>
 8005618:	4602      	mov	r2, r0
 800561a:	4b14      	ldr	r3, [pc, #80]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	0a1b      	lsrs	r3, r3, #8
 8005620:	f003 030f 	and.w	r3, r3, #15
 8005624:	4912      	ldr	r1, [pc, #72]	; (8005670 <HAL_RCC_ClockConfig+0x35c>)
 8005626:	5ccb      	ldrb	r3, [r1, r3]
 8005628:	f003 031f 	and.w	r3, r3, #31
 800562c:	fa22 f303 	lsr.w	r3, r2, r3
 8005630:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005632:	4b0e      	ldr	r3, [pc, #56]	; (800566c <HAL_RCC_ClockConfig+0x358>)
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	f003 030f 	and.w	r3, r3, #15
 800563a:	4a0d      	ldr	r2, [pc, #52]	; (8005670 <HAL_RCC_ClockConfig+0x35c>)
 800563c:	5cd3      	ldrb	r3, [r2, r3]
 800563e:	f003 031f 	and.w	r3, r3, #31
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	fa22 f303 	lsr.w	r3, r2, r3
 8005648:	4a0a      	ldr	r2, [pc, #40]	; (8005674 <HAL_RCC_ClockConfig+0x360>)
 800564a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800564c:	4a0a      	ldr	r2, [pc, #40]	; (8005678 <HAL_RCC_ClockConfig+0x364>)
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005652:	4b0a      	ldr	r3, [pc, #40]	; (800567c <HAL_RCC_ClockConfig+0x368>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	f7fb fdde 	bl	8001218 <HAL_InitTick>
 800565c:	4603      	mov	r3, r0
 800565e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005660:	7bfb      	ldrb	r3, [r7, #15]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	58024400 	.word	0x58024400
 8005670:	080133ac 	.word	0x080133ac
 8005674:	24000004 	.word	0x24000004
 8005678:	24000000 	.word	0x24000000
 800567c:	24000008 	.word	0x24000008

08005680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005680:	b480      	push	{r7}
 8005682:	b089      	sub	sp, #36	; 0x24
 8005684:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005686:	4bb3      	ldr	r3, [pc, #716]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800568e:	2b18      	cmp	r3, #24
 8005690:	f200 8155 	bhi.w	800593e <HAL_RCC_GetSysClockFreq+0x2be>
 8005694:	a201      	add	r2, pc, #4	; (adr r2, 800569c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569a:	bf00      	nop
 800569c:	08005701 	.word	0x08005701
 80056a0:	0800593f 	.word	0x0800593f
 80056a4:	0800593f 	.word	0x0800593f
 80056a8:	0800593f 	.word	0x0800593f
 80056ac:	0800593f 	.word	0x0800593f
 80056b0:	0800593f 	.word	0x0800593f
 80056b4:	0800593f 	.word	0x0800593f
 80056b8:	0800593f 	.word	0x0800593f
 80056bc:	08005727 	.word	0x08005727
 80056c0:	0800593f 	.word	0x0800593f
 80056c4:	0800593f 	.word	0x0800593f
 80056c8:	0800593f 	.word	0x0800593f
 80056cc:	0800593f 	.word	0x0800593f
 80056d0:	0800593f 	.word	0x0800593f
 80056d4:	0800593f 	.word	0x0800593f
 80056d8:	0800593f 	.word	0x0800593f
 80056dc:	0800572d 	.word	0x0800572d
 80056e0:	0800593f 	.word	0x0800593f
 80056e4:	0800593f 	.word	0x0800593f
 80056e8:	0800593f 	.word	0x0800593f
 80056ec:	0800593f 	.word	0x0800593f
 80056f0:	0800593f 	.word	0x0800593f
 80056f4:	0800593f 	.word	0x0800593f
 80056f8:	0800593f 	.word	0x0800593f
 80056fc:	08005733 	.word	0x08005733
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005700:	4b94      	ldr	r3, [pc, #592]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0320 	and.w	r3, r3, #32
 8005708:	2b00      	cmp	r3, #0
 800570a:	d009      	beq.n	8005720 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800570c:	4b91      	ldr	r3, [pc, #580]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	08db      	lsrs	r3, r3, #3
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	4a90      	ldr	r2, [pc, #576]	; (8005958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005718:	fa22 f303 	lsr.w	r3, r2, r3
 800571c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800571e:	e111      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005720:	4b8d      	ldr	r3, [pc, #564]	; (8005958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005722:	61bb      	str	r3, [r7, #24]
      break;
 8005724:	e10e      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005726:	4b8d      	ldr	r3, [pc, #564]	; (800595c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005728:	61bb      	str	r3, [r7, #24]
      break;
 800572a:	e10b      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800572c:	4b8c      	ldr	r3, [pc, #560]	; (8005960 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800572e:	61bb      	str	r3, [r7, #24]
      break;
 8005730:	e108      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005732:	4b88      	ldr	r3, [pc, #544]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800573c:	4b85      	ldr	r3, [pc, #532]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800573e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005740:	091b      	lsrs	r3, r3, #4
 8005742:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005746:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005748:	4b82      	ldr	r3, [pc, #520]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800574a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005752:	4b80      	ldr	r3, [pc, #512]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005756:	08db      	lsrs	r3, r3, #3
 8005758:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	fb02 f303 	mul.w	r3, r2, r3
 8005762:	ee07 3a90 	vmov	s15, r3
 8005766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800576a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 80e1 	beq.w	8005938 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2b02      	cmp	r3, #2
 800577a:	f000 8083 	beq.w	8005884 <HAL_RCC_GetSysClockFreq+0x204>
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2b02      	cmp	r3, #2
 8005782:	f200 80a1 	bhi.w	80058c8 <HAL_RCC_GetSysClockFreq+0x248>
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <HAL_RCC_GetSysClockFreq+0x114>
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d056      	beq.n	8005840 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005792:	e099      	b.n	80058c8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005794:	4b6f      	ldr	r3, [pc, #444]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0320 	and.w	r3, r3, #32
 800579c:	2b00      	cmp	r3, #0
 800579e:	d02d      	beq.n	80057fc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057a0:	4b6c      	ldr	r3, [pc, #432]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	08db      	lsrs	r3, r3, #3
 80057a6:	f003 0303 	and.w	r3, r3, #3
 80057aa:	4a6b      	ldr	r2, [pc, #428]	; (8005958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057ac:	fa22 f303 	lsr.w	r3, r2, r3
 80057b0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	ee07 3a90 	vmov	s15, r3
 80057b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	ee07 3a90 	vmov	s15, r3
 80057c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ca:	4b62      	ldr	r3, [pc, #392]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d2:	ee07 3a90 	vmov	s15, r3
 80057d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057da:	ed97 6a02 	vldr	s12, [r7, #8]
 80057de:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005964 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057f6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80057fa:	e087      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	ee07 3a90 	vmov	s15, r3
 8005802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005806:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005968 <HAL_RCC_GetSysClockFreq+0x2e8>
 800580a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800580e:	4b51      	ldr	r3, [pc, #324]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005816:	ee07 3a90 	vmov	s15, r3
 800581a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800581e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005822:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005964 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800582a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800582e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800583e:	e065      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	ee07 3a90 	vmov	s15, r3
 8005846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800596c <HAL_RCC_GetSysClockFreq+0x2ec>
 800584e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005852:	4b40      	ldr	r3, [pc, #256]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800585a:	ee07 3a90 	vmov	s15, r3
 800585e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005862:	ed97 6a02 	vldr	s12, [r7, #8]
 8005866:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005964 <HAL_RCC_GetSysClockFreq+0x2e4>
 800586a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800586e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800587a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800587e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005882:	e043      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	ee07 3a90 	vmov	s15, r3
 800588a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800588e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005970 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005896:	4b2f      	ldr	r3, [pc, #188]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80058aa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005964 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058c6:	e021      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	ee07 3a90 	vmov	s15, r3
 80058ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800596c <HAL_RCC_GetSysClockFreq+0x2ec>
 80058d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058da:	4b1e      	ldr	r3, [pc, #120]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058e2:	ee07 3a90 	vmov	s15, r3
 80058e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80058ee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005964 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005906:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800590a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800590c:	4b11      	ldr	r3, [pc, #68]	; (8005954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800590e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005910:	0a5b      	lsrs	r3, r3, #9
 8005912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005916:	3301      	adds	r3, #1
 8005918:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	ee07 3a90 	vmov	s15, r3
 8005920:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005924:	edd7 6a07 	vldr	s13, [r7, #28]
 8005928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800592c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005930:	ee17 3a90 	vmov	r3, s15
 8005934:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005936:	e005      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	61bb      	str	r3, [r7, #24]
      break;
 800593c:	e002      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800593e:	4b07      	ldr	r3, [pc, #28]	; (800595c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005940:	61bb      	str	r3, [r7, #24]
      break;
 8005942:	bf00      	nop
  }

  return sysclockfreq;
 8005944:	69bb      	ldr	r3, [r7, #24]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3724      	adds	r7, #36	; 0x24
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	58024400 	.word	0x58024400
 8005958:	03d09000 	.word	0x03d09000
 800595c:	003d0900 	.word	0x003d0900
 8005960:	017d7840 	.word	0x017d7840
 8005964:	46000000 	.word	0x46000000
 8005968:	4c742400 	.word	0x4c742400
 800596c:	4a742400 	.word	0x4a742400
 8005970:	4bbebc20 	.word	0x4bbebc20

08005974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800597a:	f7ff fe81 	bl	8005680 <HAL_RCC_GetSysClockFreq>
 800597e:	4602      	mov	r2, r0
 8005980:	4b10      	ldr	r3, [pc, #64]	; (80059c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	0a1b      	lsrs	r3, r3, #8
 8005986:	f003 030f 	and.w	r3, r3, #15
 800598a:	490f      	ldr	r1, [pc, #60]	; (80059c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800598c:	5ccb      	ldrb	r3, [r1, r3]
 800598e:	f003 031f 	and.w	r3, r3, #31
 8005992:	fa22 f303 	lsr.w	r3, r2, r3
 8005996:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005998:	4b0a      	ldr	r3, [pc, #40]	; (80059c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	f003 030f 	and.w	r3, r3, #15
 80059a0:	4a09      	ldr	r2, [pc, #36]	; (80059c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80059a2:	5cd3      	ldrb	r3, [r2, r3]
 80059a4:	f003 031f 	and.w	r3, r3, #31
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	fa22 f303 	lsr.w	r3, r2, r3
 80059ae:	4a07      	ldr	r2, [pc, #28]	; (80059cc <HAL_RCC_GetHCLKFreq+0x58>)
 80059b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059b2:	4a07      	ldr	r2, [pc, #28]	; (80059d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80059b8:	4b04      	ldr	r3, [pc, #16]	; (80059cc <HAL_RCC_GetHCLKFreq+0x58>)
 80059ba:	681b      	ldr	r3, [r3, #0]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	58024400 	.word	0x58024400
 80059c8:	080133ac 	.word	0x080133ac
 80059cc:	24000004 	.word	0x24000004
 80059d0:	24000000 	.word	0x24000000

080059d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80059d8:	f7ff ffcc 	bl	8005974 <HAL_RCC_GetHCLKFreq>
 80059dc:	4602      	mov	r2, r0
 80059de:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	091b      	lsrs	r3, r3, #4
 80059e4:	f003 0307 	and.w	r3, r3, #7
 80059e8:	4904      	ldr	r1, [pc, #16]	; (80059fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80059ea:	5ccb      	ldrb	r3, [r1, r3]
 80059ec:	f003 031f 	and.w	r3, r3, #31
 80059f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	58024400 	.word	0x58024400
 80059fc:	080133ac 	.word	0x080133ac

08005a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005a04:	f7ff ffb6 	bl	8005974 <HAL_RCC_GetHCLKFreq>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	0a1b      	lsrs	r3, r3, #8
 8005a10:	f003 0307 	and.w	r3, r3, #7
 8005a14:	4904      	ldr	r1, [pc, #16]	; (8005a28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a16:	5ccb      	ldrb	r3, [r1, r3]
 8005a18:	f003 031f 	and.w	r3, r3, #31
 8005a1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	58024400 	.word	0x58024400
 8005a28:	080133ac 	.word	0x080133ac

08005a2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	223f      	movs	r2, #63	; 0x3f
 8005a3a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005a3c:	4b1a      	ldr	r3, [pc, #104]	; (8005aa8 <HAL_RCC_GetClockConfig+0x7c>)
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	f003 0207 	and.w	r2, r3, #7
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005a48:	4b17      	ldr	r3, [pc, #92]	; (8005aa8 <HAL_RCC_GetClockConfig+0x7c>)
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005a54:	4b14      	ldr	r3, [pc, #80]	; (8005aa8 <HAL_RCC_GetClockConfig+0x7c>)
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	f003 020f 	and.w	r2, r3, #15
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005a60:	4b11      	ldr	r3, [pc, #68]	; (8005aa8 <HAL_RCC_GetClockConfig+0x7c>)
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005a6c:	4b0e      	ldr	r3, [pc, #56]	; (8005aa8 <HAL_RCC_GetClockConfig+0x7c>)
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005a78:	4b0b      	ldr	r3, [pc, #44]	; (8005aa8 <HAL_RCC_GetClockConfig+0x7c>)
 8005a7a:	69db      	ldr	r3, [r3, #28]
 8005a7c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005a84:	4b08      	ldr	r3, [pc, #32]	; (8005aa8 <HAL_RCC_GetClockConfig+0x7c>)
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005a90:	4b06      	ldr	r3, [pc, #24]	; (8005aac <HAL_RCC_GetClockConfig+0x80>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 020f 	and.w	r2, r3, #15
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	601a      	str	r2, [r3, #0]
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	58024400 	.word	0x58024400
 8005aac:	52002000 	.word	0x52002000

08005ab0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ab4:	b0ca      	sub	sp, #296	; 0x128
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005abc:	2300      	movs	r3, #0
 8005abe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005ad4:	2500      	movs	r5, #0
 8005ad6:	ea54 0305 	orrs.w	r3, r4, r5
 8005ada:	d049      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ae0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ae2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ae6:	d02f      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005ae8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005aec:	d828      	bhi.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005aee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005af2:	d01a      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005af4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005af8:	d822      	bhi.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005afe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b02:	d007      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b04:	e01c      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b06:	4bb8      	ldr	r3, [pc, #736]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0a:	4ab7      	ldr	r2, [pc, #732]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b12:	e01a      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b18:	3308      	adds	r3, #8
 8005b1a:	2102      	movs	r1, #2
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f001 fc8f 	bl	8007440 <RCCEx_PLL2_Config>
 8005b22:	4603      	mov	r3, r0
 8005b24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b28:	e00f      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b2e:	3328      	adds	r3, #40	; 0x28
 8005b30:	2102      	movs	r1, #2
 8005b32:	4618      	mov	r0, r3
 8005b34:	f001 fd36 	bl	80075a4 <RCCEx_PLL3_Config>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b3e:	e004      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b46:	e000      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10a      	bne.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b52:	4ba5      	ldr	r3, [pc, #660]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b56:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b60:	4aa1      	ldr	r2, [pc, #644]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b62:	430b      	orrs	r3, r1
 8005b64:	6513      	str	r3, [r2, #80]	; 0x50
 8005b66:	e003      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b78:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005b7c:	f04f 0900 	mov.w	r9, #0
 8005b80:	ea58 0309 	orrs.w	r3, r8, r9
 8005b84:	d047      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b8c:	2b04      	cmp	r3, #4
 8005b8e:	d82a      	bhi.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005b90:	a201      	add	r2, pc, #4	; (adr r2, 8005b98 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b96:	bf00      	nop
 8005b98:	08005bad 	.word	0x08005bad
 8005b9c:	08005bbb 	.word	0x08005bbb
 8005ba0:	08005bd1 	.word	0x08005bd1
 8005ba4:	08005bef 	.word	0x08005bef
 8005ba8:	08005bef 	.word	0x08005bef
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bac:	4b8e      	ldr	r3, [pc, #568]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb0:	4a8d      	ldr	r2, [pc, #564]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bb8:	e01a      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bbe:	3308      	adds	r3, #8
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f001 fc3c 	bl	8007440 <RCCEx_PLL2_Config>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bce:	e00f      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bd4:	3328      	adds	r3, #40	; 0x28
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f001 fce3 	bl	80075a4 <RCCEx_PLL3_Config>
 8005bde:	4603      	mov	r3, r0
 8005be0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005be4:	e004      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005bec:	e000      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005bee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10a      	bne.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bf8:	4b7b      	ldr	r3, [pc, #492]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bfc:	f023 0107 	bic.w	r1, r3, #7
 8005c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c06:	4a78      	ldr	r2, [pc, #480]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c08:	430b      	orrs	r3, r1
 8005c0a:	6513      	str	r3, [r2, #80]	; 0x50
 8005c0c:	e003      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005c22:	f04f 0b00 	mov.w	fp, #0
 8005c26:	ea5a 030b 	orrs.w	r3, sl, fp
 8005c2a:	d04c      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c36:	d030      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c3c:	d829      	bhi.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005c3e:	2bc0      	cmp	r3, #192	; 0xc0
 8005c40:	d02d      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005c42:	2bc0      	cmp	r3, #192	; 0xc0
 8005c44:	d825      	bhi.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005c46:	2b80      	cmp	r3, #128	; 0x80
 8005c48:	d018      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005c4a:	2b80      	cmp	r3, #128	; 0x80
 8005c4c:	d821      	bhi.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005c52:	2b40      	cmp	r3, #64	; 0x40
 8005c54:	d007      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005c56:	e01c      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c58:	4b63      	ldr	r3, [pc, #396]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5c:	4a62      	ldr	r2, [pc, #392]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005c64:	e01c      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c6a:	3308      	adds	r3, #8
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f001 fbe6 	bl	8007440 <RCCEx_PLL2_Config>
 8005c74:	4603      	mov	r3, r0
 8005c76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005c7a:	e011      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c80:	3328      	adds	r3, #40	; 0x28
 8005c82:	2100      	movs	r1, #0
 8005c84:	4618      	mov	r0, r3
 8005c86:	f001 fc8d 	bl	80075a4 <RCCEx_PLL3_Config>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005c90:	e006      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c98:	e002      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005c9a:	bf00      	nop
 8005c9c:	e000      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005c9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10a      	bne.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005ca8:	4b4f      	ldr	r3, [pc, #316]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cac:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb6:	4a4c      	ldr	r2, [pc, #304]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	6513      	str	r3, [r2, #80]	; 0x50
 8005cbc:	e003      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cce:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005cd2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005cdc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	d053      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005cee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cf2:	d035      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005cf4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cf8:	d82e      	bhi.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005cfa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005cfe:	d031      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005d00:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005d04:	d828      	bhi.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005d06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d0a:	d01a      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005d0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d10:	d822      	bhi.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005d16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d1a:	d007      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005d1c:	e01c      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d1e:	4b32      	ldr	r3, [pc, #200]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d22:	4a31      	ldr	r2, [pc, #196]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d2a:	e01c      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d30:	3308      	adds	r3, #8
 8005d32:	2100      	movs	r1, #0
 8005d34:	4618      	mov	r0, r3
 8005d36:	f001 fb83 	bl	8007440 <RCCEx_PLL2_Config>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d40:	e011      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d46:	3328      	adds	r3, #40	; 0x28
 8005d48:	2100      	movs	r1, #0
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f001 fc2a 	bl	80075a4 <RCCEx_PLL3_Config>
 8005d50:	4603      	mov	r3, r0
 8005d52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d56:	e006      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d5e:	e002      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005d60:	bf00      	nop
 8005d62:	e000      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10b      	bne.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005d6e:	4b1e      	ldr	r3, [pc, #120]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d72:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d7e:	4a1a      	ldr	r2, [pc, #104]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d80:	430b      	orrs	r3, r1
 8005d82:	6593      	str	r3, [r2, #88]	; 0x58
 8005d84:	e003      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d96:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005d9a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d9e:	2300      	movs	r3, #0
 8005da0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005da4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005da8:	460b      	mov	r3, r1
 8005daa:	4313      	orrs	r3, r2
 8005dac:	d056      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005db2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005db6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005dba:	d038      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005dbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005dc0:	d831      	bhi.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005dc2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005dc6:	d034      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005dc8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005dcc:	d82b      	bhi.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005dce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dd2:	d01d      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005dd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dd8:	d825      	bhi.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d006      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005dde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005de2:	d00a      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005de4:	e01f      	b.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005de6:	bf00      	nop
 8005de8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dec:	4ba2      	ldr	r3, [pc, #648]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df0:	4aa1      	ldr	r2, [pc, #644]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005df6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005df8:	e01c      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dfe:	3308      	adds	r3, #8
 8005e00:	2100      	movs	r1, #0
 8005e02:	4618      	mov	r0, r3
 8005e04:	f001 fb1c 	bl	8007440 <RCCEx_PLL2_Config>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005e0e:	e011      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e14:	3328      	adds	r3, #40	; 0x28
 8005e16:	2100      	movs	r1, #0
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f001 fbc3 	bl	80075a4 <RCCEx_PLL3_Config>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e24:	e006      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e2c:	e002      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005e2e:	bf00      	nop
 8005e30:	e000      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005e32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10b      	bne.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005e3c:	4b8e      	ldr	r3, [pc, #568]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e40:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e48:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005e4c:	4a8a      	ldr	r2, [pc, #552]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e4e:	430b      	orrs	r3, r1
 8005e50:	6593      	str	r3, [r2, #88]	; 0x58
 8005e52:	e003      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e64:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005e68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e72:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005e76:	460b      	mov	r3, r1
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	d03a      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e82:	2b30      	cmp	r3, #48	; 0x30
 8005e84:	d01f      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005e86:	2b30      	cmp	r3, #48	; 0x30
 8005e88:	d819      	bhi.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005e8a:	2b20      	cmp	r3, #32
 8005e8c:	d00c      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005e8e:	2b20      	cmp	r3, #32
 8005e90:	d815      	bhi.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d019      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005e96:	2b10      	cmp	r3, #16
 8005e98:	d111      	bne.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e9a:	4b77      	ldr	r3, [pc, #476]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9e:	4a76      	ldr	r2, [pc, #472]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ea4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005ea6:	e011      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eac:	3308      	adds	r3, #8
 8005eae:	2102      	movs	r1, #2
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f001 fac5 	bl	8007440 <RCCEx_PLL2_Config>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005ebc:	e006      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ec4:	e002      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005ec6:	bf00      	nop
 8005ec8:	e000      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10a      	bne.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ed4:	4b68      	ldr	r3, [pc, #416]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ed8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ee2:	4a65      	ldr	r2, [pc, #404]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ee4:	430b      	orrs	r3, r1
 8005ee6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ee8:	e003      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005eee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005efe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005f02:	2300      	movs	r3, #0
 8005f04:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f08:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	d051      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f1c:	d035      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005f1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f22:	d82e      	bhi.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005f24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f28:	d031      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005f2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f2e:	d828      	bhi.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f34:	d01a      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f3a:	d822      	bhi.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f44:	d007      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005f46:	e01c      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f48:	4b4b      	ldr	r3, [pc, #300]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	4a4a      	ldr	r2, [pc, #296]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f54:	e01c      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f5a:	3308      	adds	r3, #8
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f001 fa6e 	bl	8007440 <RCCEx_PLL2_Config>
 8005f64:	4603      	mov	r3, r0
 8005f66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f6a:	e011      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f70:	3328      	adds	r3, #40	; 0x28
 8005f72:	2100      	movs	r1, #0
 8005f74:	4618      	mov	r0, r3
 8005f76:	f001 fb15 	bl	80075a4 <RCCEx_PLL3_Config>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f80:	e006      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f88:	e002      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005f8a:	bf00      	nop
 8005f8c:	e000      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005f8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10a      	bne.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f98:	4b37      	ldr	r3, [pc, #220]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f9c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa6:	4a34      	ldr	r2, [pc, #208]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fa8:	430b      	orrs	r3, r1
 8005faa:	6513      	str	r3, [r2, #80]	; 0x50
 8005fac:	e003      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbe:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005fc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005fcc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	d056      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fe0:	d033      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005fe2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fe6:	d82c      	bhi.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005fe8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fec:	d02f      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005fee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ff2:	d826      	bhi.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ff4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ff8:	d02b      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005ffa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ffe:	d820      	bhi.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006000:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006004:	d012      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006006:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800600a:	d81a      	bhi.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800600c:	2b00      	cmp	r3, #0
 800600e:	d022      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006014:	d115      	bne.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800601a:	3308      	adds	r3, #8
 800601c:	2101      	movs	r1, #1
 800601e:	4618      	mov	r0, r3
 8006020:	f001 fa0e 	bl	8007440 <RCCEx_PLL2_Config>
 8006024:	4603      	mov	r3, r0
 8006026:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800602a:	e015      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800602c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006030:	3328      	adds	r3, #40	; 0x28
 8006032:	2101      	movs	r1, #1
 8006034:	4618      	mov	r0, r3
 8006036:	f001 fab5 	bl	80075a4 <RCCEx_PLL3_Config>
 800603a:	4603      	mov	r3, r0
 800603c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006040:	e00a      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006048:	e006      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800604a:	bf00      	nop
 800604c:	e004      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800604e:	bf00      	nop
 8006050:	e002      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006052:	bf00      	nop
 8006054:	e000      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006056:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006058:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10d      	bne.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006060:	4b05      	ldr	r3, [pc, #20]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006064:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800606c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800606e:	4a02      	ldr	r2, [pc, #8]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006070:	430b      	orrs	r3, r1
 8006072:	6513      	str	r3, [r2, #80]	; 0x50
 8006074:	e006      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006076:	bf00      	nop
 8006078:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800607c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006080:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006090:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006094:	2300      	movs	r3, #0
 8006096:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800609a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800609e:	460b      	mov	r3, r1
 80060a0:	4313      	orrs	r3, r2
 80060a2:	d055      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80060a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060b0:	d033      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80060b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060b6:	d82c      	bhi.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80060b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060bc:	d02f      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80060be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c2:	d826      	bhi.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80060c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80060c8:	d02b      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80060ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80060ce:	d820      	bhi.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80060d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060d4:	d012      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80060d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060da:	d81a      	bhi.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d022      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80060e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060e4:	d115      	bne.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060ea:	3308      	adds	r3, #8
 80060ec:	2101      	movs	r1, #1
 80060ee:	4618      	mov	r0, r3
 80060f0:	f001 f9a6 	bl	8007440 <RCCEx_PLL2_Config>
 80060f4:	4603      	mov	r3, r0
 80060f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80060fa:	e015      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006100:	3328      	adds	r3, #40	; 0x28
 8006102:	2101      	movs	r1, #1
 8006104:	4618      	mov	r0, r3
 8006106:	f001 fa4d 	bl	80075a4 <RCCEx_PLL3_Config>
 800610a:	4603      	mov	r3, r0
 800610c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006110:	e00a      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006118:	e006      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800611a:	bf00      	nop
 800611c:	e004      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800611e:	bf00      	nop
 8006120:	e002      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006122:	bf00      	nop
 8006124:	e000      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006128:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10b      	bne.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006130:	4ba3      	ldr	r3, [pc, #652]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006134:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800613c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006140:	4a9f      	ldr	r2, [pc, #636]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006142:	430b      	orrs	r3, r1
 8006144:	6593      	str	r3, [r2, #88]	; 0x58
 8006146:	e003      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006148:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800614c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006158:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800615c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006160:	2300      	movs	r3, #0
 8006162:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006166:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800616a:	460b      	mov	r3, r1
 800616c:	4313      	orrs	r3, r2
 800616e:	d037      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006176:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800617a:	d00e      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800617c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006180:	d816      	bhi.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006182:	2b00      	cmp	r3, #0
 8006184:	d018      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006186:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800618a:	d111      	bne.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800618c:	4b8c      	ldr	r3, [pc, #560]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	4a8b      	ldr	r2, [pc, #556]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006196:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006198:	e00f      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800619a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800619e:	3308      	adds	r3, #8
 80061a0:	2101      	movs	r1, #1
 80061a2:	4618      	mov	r0, r3
 80061a4:	f001 f94c 	bl	8007440 <RCCEx_PLL2_Config>
 80061a8:	4603      	mov	r3, r0
 80061aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80061ae:	e004      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061b6:	e000      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80061b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10a      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80061c2:	4b7f      	ldr	r3, [pc, #508]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80061ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d0:	4a7b      	ldr	r2, [pc, #492]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061d2:	430b      	orrs	r3, r1
 80061d4:	6513      	str	r3, [r2, #80]	; 0x50
 80061d6:	e003      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80061e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80061ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061f0:	2300      	movs	r3, #0
 80061f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80061f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80061fa:	460b      	mov	r3, r1
 80061fc:	4313      	orrs	r3, r2
 80061fe:	d039      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006206:	2b03      	cmp	r3, #3
 8006208:	d81c      	bhi.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800620a:	a201      	add	r2, pc, #4	; (adr r2, 8006210 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800620c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006210:	0800624d 	.word	0x0800624d
 8006214:	08006221 	.word	0x08006221
 8006218:	0800622f 	.word	0x0800622f
 800621c:	0800624d 	.word	0x0800624d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006220:	4b67      	ldr	r3, [pc, #412]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006224:	4a66      	ldr	r2, [pc, #408]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800622a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800622c:	e00f      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800622e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006232:	3308      	adds	r3, #8
 8006234:	2102      	movs	r1, #2
 8006236:	4618      	mov	r0, r3
 8006238:	f001 f902 	bl	8007440 <RCCEx_PLL2_Config>
 800623c:	4603      	mov	r3, r0
 800623e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006242:	e004      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800624a:	e000      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800624c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800624e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10a      	bne.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006256:	4b5a      	ldr	r3, [pc, #360]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800625a:	f023 0103 	bic.w	r1, r3, #3
 800625e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006264:	4a56      	ldr	r2, [pc, #344]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006266:	430b      	orrs	r3, r1
 8006268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800626a:	e003      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006270:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006280:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006284:	2300      	movs	r3, #0
 8006286:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800628a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800628e:	460b      	mov	r3, r1
 8006290:	4313      	orrs	r3, r2
 8006292:	f000 809f 	beq.w	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006296:	4b4b      	ldr	r3, [pc, #300]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a4a      	ldr	r2, [pc, #296]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800629c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062a2:	f7fb fa67 	bl	8001774 <HAL_GetTick>
 80062a6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062aa:	e00b      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062ac:	f7fb fa62 	bl	8001774 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	2b64      	cmp	r3, #100	; 0x64
 80062ba:	d903      	bls.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80062c2:	e005      	b.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062c4:	4b3f      	ldr	r3, [pc, #252]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d0ed      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80062d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d179      	bne.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80062d8:	4b39      	ldr	r3, [pc, #228]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80062e4:	4053      	eors	r3, r2
 80062e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d015      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062ee:	4b34      	ldr	r3, [pc, #208]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062fa:	4b31      	ldr	r3, [pc, #196]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062fe:	4a30      	ldr	r2, [pc, #192]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006304:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006306:	4b2e      	ldr	r3, [pc, #184]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630a:	4a2d      	ldr	r2, [pc, #180]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800630c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006310:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006312:	4a2b      	ldr	r2, [pc, #172]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006314:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006318:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800631a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800631e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006326:	d118      	bne.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006328:	f7fb fa24 	bl	8001774 <HAL_GetTick>
 800632c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006330:	e00d      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006332:	f7fb fa1f 	bl	8001774 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800633c:	1ad2      	subs	r2, r2, r3
 800633e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006342:	429a      	cmp	r2, r3
 8006344:	d903      	bls.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800634c:	e005      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800634e:	4b1c      	ldr	r3, [pc, #112]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006352:	f003 0302 	and.w	r3, r3, #2
 8006356:	2b00      	cmp	r3, #0
 8006358:	d0eb      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800635a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800635e:	2b00      	cmp	r3, #0
 8006360:	d129      	bne.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006366:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800636a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800636e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006372:	d10e      	bne.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006374:	4b12      	ldr	r3, [pc, #72]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800637c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006380:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006384:	091a      	lsrs	r2, r3, #4
 8006386:	4b10      	ldr	r3, [pc, #64]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006388:	4013      	ands	r3, r2
 800638a:	4a0d      	ldr	r2, [pc, #52]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800638c:	430b      	orrs	r3, r1
 800638e:	6113      	str	r3, [r2, #16]
 8006390:	e005      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006392:	4b0b      	ldr	r3, [pc, #44]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	4a0a      	ldr	r2, [pc, #40]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006398:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800639c:	6113      	str	r3, [r2, #16]
 800639e:	4b08      	ldr	r3, [pc, #32]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063a0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80063a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80063aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063ae:	4a04      	ldr	r2, [pc, #16]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063b0:	430b      	orrs	r3, r1
 80063b2:	6713      	str	r3, [r2, #112]	; 0x70
 80063b4:	e00e      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80063be:	e009      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80063c0:	58024400 	.word	0x58024400
 80063c4:	58024800 	.word	0x58024800
 80063c8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80063d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063dc:	f002 0301 	and.w	r3, r2, #1
 80063e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063e4:	2300      	movs	r3, #0
 80063e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063ee:	460b      	mov	r3, r1
 80063f0:	4313      	orrs	r3, r2
 80063f2:	f000 8089 	beq.w	8006508 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80063f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063fc:	2b28      	cmp	r3, #40	; 0x28
 80063fe:	d86b      	bhi.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006400:	a201      	add	r2, pc, #4	; (adr r2, 8006408 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006406:	bf00      	nop
 8006408:	080064e1 	.word	0x080064e1
 800640c:	080064d9 	.word	0x080064d9
 8006410:	080064d9 	.word	0x080064d9
 8006414:	080064d9 	.word	0x080064d9
 8006418:	080064d9 	.word	0x080064d9
 800641c:	080064d9 	.word	0x080064d9
 8006420:	080064d9 	.word	0x080064d9
 8006424:	080064d9 	.word	0x080064d9
 8006428:	080064ad 	.word	0x080064ad
 800642c:	080064d9 	.word	0x080064d9
 8006430:	080064d9 	.word	0x080064d9
 8006434:	080064d9 	.word	0x080064d9
 8006438:	080064d9 	.word	0x080064d9
 800643c:	080064d9 	.word	0x080064d9
 8006440:	080064d9 	.word	0x080064d9
 8006444:	080064d9 	.word	0x080064d9
 8006448:	080064c3 	.word	0x080064c3
 800644c:	080064d9 	.word	0x080064d9
 8006450:	080064d9 	.word	0x080064d9
 8006454:	080064d9 	.word	0x080064d9
 8006458:	080064d9 	.word	0x080064d9
 800645c:	080064d9 	.word	0x080064d9
 8006460:	080064d9 	.word	0x080064d9
 8006464:	080064d9 	.word	0x080064d9
 8006468:	080064e1 	.word	0x080064e1
 800646c:	080064d9 	.word	0x080064d9
 8006470:	080064d9 	.word	0x080064d9
 8006474:	080064d9 	.word	0x080064d9
 8006478:	080064d9 	.word	0x080064d9
 800647c:	080064d9 	.word	0x080064d9
 8006480:	080064d9 	.word	0x080064d9
 8006484:	080064d9 	.word	0x080064d9
 8006488:	080064e1 	.word	0x080064e1
 800648c:	080064d9 	.word	0x080064d9
 8006490:	080064d9 	.word	0x080064d9
 8006494:	080064d9 	.word	0x080064d9
 8006498:	080064d9 	.word	0x080064d9
 800649c:	080064d9 	.word	0x080064d9
 80064a0:	080064d9 	.word	0x080064d9
 80064a4:	080064d9 	.word	0x080064d9
 80064a8:	080064e1 	.word	0x080064e1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064b0:	3308      	adds	r3, #8
 80064b2:	2101      	movs	r1, #1
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 ffc3 	bl	8007440 <RCCEx_PLL2_Config>
 80064ba:	4603      	mov	r3, r0
 80064bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80064c0:	e00f      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064c6:	3328      	adds	r3, #40	; 0x28
 80064c8:	2101      	movs	r1, #1
 80064ca:	4618      	mov	r0, r3
 80064cc:	f001 f86a 	bl	80075a4 <RCCEx_PLL3_Config>
 80064d0:	4603      	mov	r3, r0
 80064d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80064d6:	e004      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80064de:	e000      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80064e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10a      	bne.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80064ea:	4bbf      	ldr	r3, [pc, #764]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ee:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80064f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064f8:	4abb      	ldr	r2, [pc, #748]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064fa:	430b      	orrs	r3, r1
 80064fc:	6553      	str	r3, [r2, #84]	; 0x54
 80064fe:	e003      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006500:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006504:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800650c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006510:	f002 0302 	and.w	r3, r2, #2
 8006514:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006518:	2300      	movs	r3, #0
 800651a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800651e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006522:	460b      	mov	r3, r1
 8006524:	4313      	orrs	r3, r2
 8006526:	d041      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800652c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800652e:	2b05      	cmp	r3, #5
 8006530:	d824      	bhi.n	800657c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006532:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006538:	08006585 	.word	0x08006585
 800653c:	08006551 	.word	0x08006551
 8006540:	08006567 	.word	0x08006567
 8006544:	08006585 	.word	0x08006585
 8006548:	08006585 	.word	0x08006585
 800654c:	08006585 	.word	0x08006585
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006554:	3308      	adds	r3, #8
 8006556:	2101      	movs	r1, #1
 8006558:	4618      	mov	r0, r3
 800655a:	f000 ff71 	bl	8007440 <RCCEx_PLL2_Config>
 800655e:	4603      	mov	r3, r0
 8006560:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006564:	e00f      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800656a:	3328      	adds	r3, #40	; 0x28
 800656c:	2101      	movs	r1, #1
 800656e:	4618      	mov	r0, r3
 8006570:	f001 f818 	bl	80075a4 <RCCEx_PLL3_Config>
 8006574:	4603      	mov	r3, r0
 8006576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800657a:	e004      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006582:	e000      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006586:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10a      	bne.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800658e:	4b96      	ldr	r3, [pc, #600]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006592:	f023 0107 	bic.w	r1, r3, #7
 8006596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800659a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800659c:	4a92      	ldr	r2, [pc, #584]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800659e:	430b      	orrs	r3, r1
 80065a0:	6553      	str	r3, [r2, #84]	; 0x54
 80065a2:	e003      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b4:	f002 0304 	and.w	r3, r2, #4
 80065b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065bc:	2300      	movs	r3, #0
 80065be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065c2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80065c6:	460b      	mov	r3, r1
 80065c8:	4313      	orrs	r3, r2
 80065ca:	d044      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80065cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065d4:	2b05      	cmp	r3, #5
 80065d6:	d825      	bhi.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80065d8:	a201      	add	r2, pc, #4	; (adr r2, 80065e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80065da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065de:	bf00      	nop
 80065e0:	0800662d 	.word	0x0800662d
 80065e4:	080065f9 	.word	0x080065f9
 80065e8:	0800660f 	.word	0x0800660f
 80065ec:	0800662d 	.word	0x0800662d
 80065f0:	0800662d 	.word	0x0800662d
 80065f4:	0800662d 	.word	0x0800662d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065fc:	3308      	adds	r3, #8
 80065fe:	2101      	movs	r1, #1
 8006600:	4618      	mov	r0, r3
 8006602:	f000 ff1d 	bl	8007440 <RCCEx_PLL2_Config>
 8006606:	4603      	mov	r3, r0
 8006608:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800660c:	e00f      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800660e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006612:	3328      	adds	r3, #40	; 0x28
 8006614:	2101      	movs	r1, #1
 8006616:	4618      	mov	r0, r3
 8006618:	f000 ffc4 	bl	80075a4 <RCCEx_PLL3_Config>
 800661c:	4603      	mov	r3, r0
 800661e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006622:	e004      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800662a:	e000      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800662c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800662e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10b      	bne.n	800664e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006636:	4b6c      	ldr	r3, [pc, #432]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800663a:	f023 0107 	bic.w	r1, r3, #7
 800663e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006646:	4a68      	ldr	r2, [pc, #416]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006648:	430b      	orrs	r3, r1
 800664a:	6593      	str	r3, [r2, #88]	; 0x58
 800664c:	e003      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800664e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006652:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800665a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665e:	f002 0320 	and.w	r3, r2, #32
 8006662:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006666:	2300      	movs	r3, #0
 8006668:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800666c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006670:	460b      	mov	r3, r1
 8006672:	4313      	orrs	r3, r2
 8006674:	d055      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800667a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800667e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006682:	d033      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006684:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006688:	d82c      	bhi.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800668a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800668e:	d02f      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006694:	d826      	bhi.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006696:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800669a:	d02b      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800669c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066a0:	d820      	bhi.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80066a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066a6:	d012      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80066a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066ac:	d81a      	bhi.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d022      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80066b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066b6:	d115      	bne.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066bc:	3308      	adds	r3, #8
 80066be:	2100      	movs	r1, #0
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 febd 	bl	8007440 <RCCEx_PLL2_Config>
 80066c6:	4603      	mov	r3, r0
 80066c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80066cc:	e015      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066d2:	3328      	adds	r3, #40	; 0x28
 80066d4:	2102      	movs	r1, #2
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 ff64 	bl	80075a4 <RCCEx_PLL3_Config>
 80066dc:	4603      	mov	r3, r0
 80066de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80066e2:	e00a      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80066ea:	e006      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80066ec:	bf00      	nop
 80066ee:	e004      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80066f0:	bf00      	nop
 80066f2:	e002      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80066f4:	bf00      	nop
 80066f6:	e000      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80066f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10b      	bne.n	800671a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006702:	4b39      	ldr	r3, [pc, #228]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006706:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800670a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800670e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006712:	4a35      	ldr	r2, [pc, #212]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006714:	430b      	orrs	r3, r1
 8006716:	6553      	str	r3, [r2, #84]	; 0x54
 8006718:	e003      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800671a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800671e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800672e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006732:	2300      	movs	r3, #0
 8006734:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006738:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800673c:	460b      	mov	r3, r1
 800673e:	4313      	orrs	r3, r2
 8006740:	d058      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006746:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800674a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800674e:	d033      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006750:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006754:	d82c      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800675a:	d02f      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800675c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006760:	d826      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006762:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006766:	d02b      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006768:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800676c:	d820      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800676e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006772:	d012      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006778:	d81a      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800677a:	2b00      	cmp	r3, #0
 800677c:	d022      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800677e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006782:	d115      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006788:	3308      	adds	r3, #8
 800678a:	2100      	movs	r1, #0
 800678c:	4618      	mov	r0, r3
 800678e:	f000 fe57 	bl	8007440 <RCCEx_PLL2_Config>
 8006792:	4603      	mov	r3, r0
 8006794:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006798:	e015      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800679a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800679e:	3328      	adds	r3, #40	; 0x28
 80067a0:	2102      	movs	r1, #2
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 fefe 	bl	80075a4 <RCCEx_PLL3_Config>
 80067a8:	4603      	mov	r3, r0
 80067aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80067ae:	e00a      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067b6:	e006      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80067b8:	bf00      	nop
 80067ba:	e004      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80067bc:	bf00      	nop
 80067be:	e002      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80067c0:	bf00      	nop
 80067c2:	e000      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80067c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10e      	bne.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067ce:	4b06      	ldr	r3, [pc, #24]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80067d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067de:	4a02      	ldr	r2, [pc, #8]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067e0:	430b      	orrs	r3, r1
 80067e2:	6593      	str	r3, [r2, #88]	; 0x58
 80067e4:	e006      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80067e6:	bf00      	nop
 80067e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80067f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006800:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006804:	2300      	movs	r3, #0
 8006806:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800680a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800680e:	460b      	mov	r3, r1
 8006810:	4313      	orrs	r3, r2
 8006812:	d055      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006818:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800681c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006820:	d033      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006822:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006826:	d82c      	bhi.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800682c:	d02f      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800682e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006832:	d826      	bhi.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006834:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006838:	d02b      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800683a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800683e:	d820      	bhi.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006840:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006844:	d012      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006846:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800684a:	d81a      	bhi.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800684c:	2b00      	cmp	r3, #0
 800684e:	d022      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006854:	d115      	bne.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800685a:	3308      	adds	r3, #8
 800685c:	2100      	movs	r1, #0
 800685e:	4618      	mov	r0, r3
 8006860:	f000 fdee 	bl	8007440 <RCCEx_PLL2_Config>
 8006864:	4603      	mov	r3, r0
 8006866:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800686a:	e015      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800686c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006870:	3328      	adds	r3, #40	; 0x28
 8006872:	2102      	movs	r1, #2
 8006874:	4618      	mov	r0, r3
 8006876:	f000 fe95 	bl	80075a4 <RCCEx_PLL3_Config>
 800687a:	4603      	mov	r3, r0
 800687c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006880:	e00a      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006888:	e006      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800688a:	bf00      	nop
 800688c:	e004      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800688e:	bf00      	nop
 8006890:	e002      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006892:	bf00      	nop
 8006894:	e000      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006898:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10b      	bne.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80068a0:	4ba1      	ldr	r3, [pc, #644]	; (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80068a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80068b0:	4a9d      	ldr	r2, [pc, #628]	; (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068b2:	430b      	orrs	r3, r1
 80068b4:	6593      	str	r3, [r2, #88]	; 0x58
 80068b6:	e003      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80068c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c8:	f002 0308 	and.w	r3, r2, #8
 80068cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80068d0:	2300      	movs	r3, #0
 80068d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80068d6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80068da:	460b      	mov	r3, r1
 80068dc:	4313      	orrs	r3, r2
 80068de:	d01e      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80068e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ec:	d10c      	bne.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068f2:	3328      	adds	r3, #40	; 0x28
 80068f4:	2102      	movs	r1, #2
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 fe54 	bl	80075a4 <RCCEx_PLL3_Config>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d002      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006908:	4b87      	ldr	r3, [pc, #540]	; (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800690a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800690c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006918:	4a83      	ldr	r2, [pc, #524]	; (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800691a:	430b      	orrs	r3, r1
 800691c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800691e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006926:	f002 0310 	and.w	r3, r2, #16
 800692a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800692e:	2300      	movs	r3, #0
 8006930:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006934:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006938:	460b      	mov	r3, r1
 800693a:	4313      	orrs	r3, r2
 800693c:	d01e      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800693e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006942:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800694a:	d10c      	bne.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800694c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006950:	3328      	adds	r3, #40	; 0x28
 8006952:	2102      	movs	r1, #2
 8006954:	4618      	mov	r0, r3
 8006956:	f000 fe25 	bl	80075a4 <RCCEx_PLL3_Config>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006966:	4b70      	ldr	r3, [pc, #448]	; (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800696a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800696e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006972:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006976:	4a6c      	ldr	r2, [pc, #432]	; (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006978:	430b      	orrs	r3, r1
 800697a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800697c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006984:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006988:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800698c:	2300      	movs	r3, #0
 800698e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006992:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006996:	460b      	mov	r3, r1
 8006998:	4313      	orrs	r3, r2
 800699a:	d03e      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800699c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80069a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069a8:	d022      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80069aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069ae:	d81b      	bhi.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d003      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80069b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b8:	d00b      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80069ba:	e015      	b.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069c0:	3308      	adds	r3, #8
 80069c2:	2100      	movs	r1, #0
 80069c4:	4618      	mov	r0, r3
 80069c6:	f000 fd3b 	bl	8007440 <RCCEx_PLL2_Config>
 80069ca:	4603      	mov	r3, r0
 80069cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80069d0:	e00f      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069d6:	3328      	adds	r3, #40	; 0x28
 80069d8:	2102      	movs	r1, #2
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 fde2 	bl	80075a4 <RCCEx_PLL3_Config>
 80069e0:	4603      	mov	r3, r0
 80069e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80069e6:	e004      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80069ee:	e000      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80069f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10b      	bne.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80069fa:	4b4b      	ldr	r3, [pc, #300]	; (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069fe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006a0a:	4a47      	ldr	r2, [pc, #284]	; (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a0c:	430b      	orrs	r3, r1
 8006a0e:	6593      	str	r3, [r2, #88]	; 0x58
 8006a10:	e003      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a22:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006a26:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a28:	2300      	movs	r3, #0
 8006a2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a2c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006a30:	460b      	mov	r3, r1
 8006a32:	4313      	orrs	r3, r2
 8006a34:	d03b      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a42:	d01f      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006a44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a48:	d818      	bhi.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006a4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a4e:	d003      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006a50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a54:	d007      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006a56:	e011      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a58:	4b33      	ldr	r3, [pc, #204]	; (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5c:	4a32      	ldr	r2, [pc, #200]	; (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a64:	e00f      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a6a:	3328      	adds	r3, #40	; 0x28
 8006a6c:	2101      	movs	r1, #1
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 fd98 	bl	80075a4 <RCCEx_PLL3_Config>
 8006a74:	4603      	mov	r3, r0
 8006a76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a7a:	e004      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a82:	e000      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10b      	bne.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a8e:	4b26      	ldr	r3, [pc, #152]	; (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a92:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a9e:	4a22      	ldr	r2, [pc, #136]	; (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006aa0:	430b      	orrs	r3, r1
 8006aa2:	6553      	str	r3, [r2, #84]	; 0x54
 8006aa4:	e003      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006aaa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006aba:	673b      	str	r3, [r7, #112]	; 0x70
 8006abc:	2300      	movs	r3, #0
 8006abe:	677b      	str	r3, [r7, #116]	; 0x74
 8006ac0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	d034      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d003      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ad8:	d007      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006ada:	e011      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006adc:	4b12      	ldr	r3, [pc, #72]	; (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae0:	4a11      	ldr	r2, [pc, #68]	; (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006ae8:	e00e      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aee:	3308      	adds	r3, #8
 8006af0:	2102      	movs	r1, #2
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 fca4 	bl	8007440 <RCCEx_PLL2_Config>
 8006af8:	4603      	mov	r3, r0
 8006afa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006afe:	e003      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10d      	bne.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006b10:	4b05      	ldr	r3, [pc, #20]	; (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b1e:	4a02      	ldr	r2, [pc, #8]	; (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b20:	430b      	orrs	r3, r1
 8006b22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b24:	e006      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006b26:	bf00      	nop
 8006b28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006b40:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b42:	2300      	movs	r3, #0
 8006b44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b46:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	d00c      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b54:	3328      	adds	r3, #40	; 0x28
 8006b56:	2102      	movs	r1, #2
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 fd23 	bl	80075a4 <RCCEx_PLL3_Config>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d002      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b72:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006b76:	663b      	str	r3, [r7, #96]	; 0x60
 8006b78:	2300      	movs	r3, #0
 8006b7a:	667b      	str	r3, [r7, #100]	; 0x64
 8006b7c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006b80:	460b      	mov	r3, r1
 8006b82:	4313      	orrs	r3, r2
 8006b84:	d038      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b92:	d018      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006b94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b98:	d811      	bhi.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b9e:	d014      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ba4:	d80b      	bhi.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d011      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bae:	d106      	bne.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bb0:	4bc3      	ldr	r3, [pc, #780]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb4:	4ac2      	ldr	r2, [pc, #776]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006bbc:	e008      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006bc4:	e004      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006bc6:	bf00      	nop
 8006bc8:	e002      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006bca:	bf00      	nop
 8006bcc:	e000      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006bce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10b      	bne.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006bd8:	4bb9      	ldr	r3, [pc, #740]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bdc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006be8:	4ab5      	ldr	r2, [pc, #724]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bea:	430b      	orrs	r3, r1
 8006bec:	6553      	str	r3, [r2, #84]	; 0x54
 8006bee:	e003      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bf4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c00:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006c04:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c06:	2300      	movs	r3, #0
 8006c08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c0a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4313      	orrs	r3, r2
 8006c12:	d009      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006c14:	4baa      	ldr	r3, [pc, #680]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c22:	4aa7      	ldr	r2, [pc, #668]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c24:	430b      	orrs	r3, r1
 8006c26:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c30:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006c34:	653b      	str	r3, [r7, #80]	; 0x50
 8006c36:	2300      	movs	r3, #0
 8006c38:	657b      	str	r3, [r7, #84]	; 0x54
 8006c3a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006c3e:	460b      	mov	r3, r1
 8006c40:	4313      	orrs	r3, r2
 8006c42:	d00a      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006c44:	4b9e      	ldr	r3, [pc, #632]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c50:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006c54:	4a9a      	ldr	r2, [pc, #616]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c56:	430b      	orrs	r3, r1
 8006c58:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c62:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006c66:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c68:	2300      	movs	r3, #0
 8006c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c6c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006c70:	460b      	mov	r3, r1
 8006c72:	4313      	orrs	r3, r2
 8006c74:	d009      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c76:	4b92      	ldr	r3, [pc, #584]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c7a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c84:	4a8e      	ldr	r2, [pc, #568]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c86:	430b      	orrs	r3, r1
 8006c88:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c92:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006c96:	643b      	str	r3, [r7, #64]	; 0x40
 8006c98:	2300      	movs	r3, #0
 8006c9a:	647b      	str	r3, [r7, #68]	; 0x44
 8006c9c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	d00e      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ca6:	4b86      	ldr	r3, [pc, #536]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	4a85      	ldr	r2, [pc, #532]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cb0:	6113      	str	r3, [r2, #16]
 8006cb2:	4b83      	ldr	r3, [pc, #524]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cb4:	6919      	ldr	r1, [r3, #16]
 8006cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006cbe:	4a80      	ldr	r2, [pc, #512]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cc0:	430b      	orrs	r3, r1
 8006cc2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ccc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006cd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cd6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006cda:	460b      	mov	r3, r1
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	d009      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006ce0:	4b77      	ldr	r3, [pc, #476]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ce4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cee:	4a74      	ldr	r2, [pc, #464]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cf0:	430b      	orrs	r3, r1
 8006cf2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006d00:	633b      	str	r3, [r7, #48]	; 0x30
 8006d02:	2300      	movs	r3, #0
 8006d04:	637b      	str	r3, [r7, #52]	; 0x34
 8006d06:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	d00a      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d10:	4b6b      	ldr	r3, [pc, #428]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d14:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d20:	4a67      	ldr	r2, [pc, #412]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d22:	430b      	orrs	r3, r1
 8006d24:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	2100      	movs	r1, #0
 8006d30:	62b9      	str	r1, [r7, #40]	; 0x28
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d38:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	d011      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d46:	3308      	adds	r3, #8
 8006d48:	2100      	movs	r1, #0
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 fb78 	bl	8007440 <RCCEx_PLL2_Config>
 8006d50:	4603      	mov	r3, r0
 8006d52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006d56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6e:	2100      	movs	r1, #0
 8006d70:	6239      	str	r1, [r7, #32]
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	627b      	str	r3, [r7, #36]	; 0x24
 8006d78:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	d011      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d86:	3308      	adds	r3, #8
 8006d88:	2101      	movs	r1, #1
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 fb58 	bl	8007440 <RCCEx_PLL2_Config>
 8006d90:	4603      	mov	r3, r0
 8006d92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006d96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006da2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dae:	2100      	movs	r1, #0
 8006db0:	61b9      	str	r1, [r7, #24]
 8006db2:	f003 0304 	and.w	r3, r3, #4
 8006db6:	61fb      	str	r3, [r7, #28]
 8006db8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	d011      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dc6:	3308      	adds	r3, #8
 8006dc8:	2102      	movs	r1, #2
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 fb38 	bl	8007440 <RCCEx_PLL2_Config>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006de2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dee:	2100      	movs	r1, #0
 8006df0:	6139      	str	r1, [r7, #16]
 8006df2:	f003 0308 	and.w	r3, r3, #8
 8006df6:	617b      	str	r3, [r7, #20]
 8006df8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	d011      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e06:	3328      	adds	r3, #40	; 0x28
 8006e08:	2100      	movs	r1, #0
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f000 fbca 	bl	80075a4 <RCCEx_PLL3_Config>
 8006e10:	4603      	mov	r3, r0
 8006e12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8006e16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d003      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2e:	2100      	movs	r1, #0
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	f003 0310 	and.w	r3, r3, #16
 8006e36:	60fb      	str	r3, [r7, #12]
 8006e38:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	d011      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e46:	3328      	adds	r3, #40	; 0x28
 8006e48:	2101      	movs	r1, #1
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 fbaa 	bl	80075a4 <RCCEx_PLL3_Config>
 8006e50:	4603      	mov	r3, r0
 8006e52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006e56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6e:	2100      	movs	r1, #0
 8006e70:	6039      	str	r1, [r7, #0]
 8006e72:	f003 0320 	and.w	r3, r3, #32
 8006e76:	607b      	str	r3, [r7, #4]
 8006e78:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	d011      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e86:	3328      	adds	r3, #40	; 0x28
 8006e88:	2102      	movs	r1, #2
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fb8a 	bl	80075a4 <RCCEx_PLL3_Config>
 8006e90:	4603      	mov	r3, r0
 8006e92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006e96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ea2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006ea6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d101      	bne.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	e000      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ec0:	58024400 	.word	0x58024400

08006ec4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006ec8:	f7fe fd54 	bl	8005974 <HAL_RCC_GetHCLKFreq>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	4b06      	ldr	r3, [pc, #24]	; (8006ee8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	091b      	lsrs	r3, r3, #4
 8006ed4:	f003 0307 	and.w	r3, r3, #7
 8006ed8:	4904      	ldr	r1, [pc, #16]	; (8006eec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006eda:	5ccb      	ldrb	r3, [r1, r3]
 8006edc:	f003 031f 	and.w	r3, r3, #31
 8006ee0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	58024400 	.word	0x58024400
 8006eec:	080133ac 	.word	0x080133ac

08006ef0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b089      	sub	sp, #36	; 0x24
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ef8:	4ba1      	ldr	r3, [pc, #644]	; (8007180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efc:	f003 0303 	and.w	r3, r3, #3
 8006f00:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006f02:	4b9f      	ldr	r3, [pc, #636]	; (8007180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f06:	0b1b      	lsrs	r3, r3, #12
 8006f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f0c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006f0e:	4b9c      	ldr	r3, [pc, #624]	; (8007180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f12:	091b      	lsrs	r3, r3, #4
 8006f14:	f003 0301 	and.w	r3, r3, #1
 8006f18:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006f1a:	4b99      	ldr	r3, [pc, #612]	; (8007180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f1e:	08db      	lsrs	r3, r3, #3
 8006f20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	fb02 f303 	mul.w	r3, r2, r3
 8006f2a:	ee07 3a90 	vmov	s15, r3
 8006f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f000 8111 	beq.w	8007160 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	f000 8083 	beq.w	800704c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	f200 80a1 	bhi.w	8007090 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d003      	beq.n	8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d056      	beq.n	8007008 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006f5a:	e099      	b.n	8007090 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f5c:	4b88      	ldr	r3, [pc, #544]	; (8007180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0320 	and.w	r3, r3, #32
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d02d      	beq.n	8006fc4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f68:	4b85      	ldr	r3, [pc, #532]	; (8007180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	08db      	lsrs	r3, r3, #3
 8006f6e:	f003 0303 	and.w	r3, r3, #3
 8006f72:	4a84      	ldr	r2, [pc, #528]	; (8007184 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006f74:	fa22 f303 	lsr.w	r3, r2, r3
 8006f78:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	ee07 3a90 	vmov	s15, r3
 8006f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	ee07 3a90 	vmov	s15, r3
 8006f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f92:	4b7b      	ldr	r3, [pc, #492]	; (8007180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f9a:	ee07 3a90 	vmov	s15, r3
 8006f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fa6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007188 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006fc2:	e087      	b.n	80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	ee07 3a90 	vmov	s15, r3
 8006fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800718c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fd6:	4b6a      	ldr	r3, [pc, #424]	; (8007180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fde:	ee07 3a90 	vmov	s15, r3
 8006fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fe6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007188 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007006:	e065      	b.n	80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	ee07 3a90 	vmov	s15, r3
 800700e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007012:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007190 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800701a:	4b59      	ldr	r3, [pc, #356]	; (8007180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800701c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007022:	ee07 3a90 	vmov	s15, r3
 8007026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800702a:	ed97 6a03 	vldr	s12, [r7, #12]
 800702e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007188 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800703a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800703e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800704a:	e043      	b.n	80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	ee07 3a90 	vmov	s15, r3
 8007052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007056:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007194 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800705a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800705e:	4b48      	ldr	r3, [pc, #288]	; (8007180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007066:	ee07 3a90 	vmov	s15, r3
 800706a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800706e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007072:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007188 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800707a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800707e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800708a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800708e:	e021      	b.n	80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	ee07 3a90 	vmov	s15, r3
 8007096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007190 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800709e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070a2:	4b37      	ldr	r3, [pc, #220]	; (8007180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070aa:	ee07 3a90 	vmov	s15, r3
 80070ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007188 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80070d4:	4b2a      	ldr	r3, [pc, #168]	; (8007180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d8:	0a5b      	lsrs	r3, r3, #9
 80070da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070de:	ee07 3a90 	vmov	s15, r3
 80070e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80070f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070fa:	ee17 2a90 	vmov	r2, s15
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007102:	4b1f      	ldr	r3, [pc, #124]	; (8007180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007106:	0c1b      	lsrs	r3, r3, #16
 8007108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800710c:	ee07 3a90 	vmov	s15, r3
 8007110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007114:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007118:	ee37 7a87 	vadd.f32	s14, s15, s14
 800711c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007128:	ee17 2a90 	vmov	r2, s15
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007130:	4b13      	ldr	r3, [pc, #76]	; (8007180 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007134:	0e1b      	lsrs	r3, r3, #24
 8007136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800713a:	ee07 3a90 	vmov	s15, r3
 800713e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007142:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007146:	ee37 7a87 	vadd.f32	s14, s15, s14
 800714a:	edd7 6a07 	vldr	s13, [r7, #28]
 800714e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007156:	ee17 2a90 	vmov	r2, s15
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800715e:	e008      	b.n	8007172 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	609a      	str	r2, [r3, #8]
}
 8007172:	bf00      	nop
 8007174:	3724      	adds	r7, #36	; 0x24
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	58024400 	.word	0x58024400
 8007184:	03d09000 	.word	0x03d09000
 8007188:	46000000 	.word	0x46000000
 800718c:	4c742400 	.word	0x4c742400
 8007190:	4a742400 	.word	0x4a742400
 8007194:	4bbebc20 	.word	0x4bbebc20

08007198 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007198:	b480      	push	{r7}
 800719a:	b089      	sub	sp, #36	; 0x24
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071a0:	4ba1      	ldr	r3, [pc, #644]	; (8007428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a4:	f003 0303 	and.w	r3, r3, #3
 80071a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80071aa:	4b9f      	ldr	r3, [pc, #636]	; (8007428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ae:	0d1b      	lsrs	r3, r3, #20
 80071b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80071b6:	4b9c      	ldr	r3, [pc, #624]	; (8007428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ba:	0a1b      	lsrs	r3, r3, #8
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80071c2:	4b99      	ldr	r3, [pc, #612]	; (8007428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c6:	08db      	lsrs	r3, r3, #3
 80071c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	fb02 f303 	mul.w	r3, r2, r3
 80071d2:	ee07 3a90 	vmov	s15, r3
 80071d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 8111 	beq.w	8007408 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	f000 8083 	beq.w	80072f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	f200 80a1 	bhi.w	8007338 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d003      	beq.n	8007204 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d056      	beq.n	80072b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007202:	e099      	b.n	8007338 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007204:	4b88      	ldr	r3, [pc, #544]	; (8007428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0320 	and.w	r3, r3, #32
 800720c:	2b00      	cmp	r3, #0
 800720e:	d02d      	beq.n	800726c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007210:	4b85      	ldr	r3, [pc, #532]	; (8007428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	08db      	lsrs	r3, r3, #3
 8007216:	f003 0303 	and.w	r3, r3, #3
 800721a:	4a84      	ldr	r2, [pc, #528]	; (800742c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800721c:	fa22 f303 	lsr.w	r3, r2, r3
 8007220:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	ee07 3a90 	vmov	s15, r3
 8007228:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	ee07 3a90 	vmov	s15, r3
 8007232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800723a:	4b7b      	ldr	r3, [pc, #492]	; (8007428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800723c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007242:	ee07 3a90 	vmov	s15, r3
 8007246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800724a:	ed97 6a03 	vldr	s12, [r7, #12]
 800724e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007430 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800725a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800725e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007266:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800726a:	e087      	b.n	800737c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	ee07 3a90 	vmov	s15, r3
 8007272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007276:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007434 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800727a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800727e:	4b6a      	ldr	r3, [pc, #424]	; (8007428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007286:	ee07 3a90 	vmov	s15, r3
 800728a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800728e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007292:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007430 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800729a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800729e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072ae:	e065      	b.n	800737c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	ee07 3a90 	vmov	s15, r3
 80072b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007438 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80072be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072c2:	4b59      	ldr	r3, [pc, #356]	; (8007428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007430 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072f2:	e043      	b.n	800737c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	ee07 3a90 	vmov	s15, r3
 80072fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800743c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007306:	4b48      	ldr	r3, [pc, #288]	; (8007428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800730e:	ee07 3a90 	vmov	s15, r3
 8007312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007316:	ed97 6a03 	vldr	s12, [r7, #12]
 800731a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007430 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800731e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800732a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800732e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007332:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007336:	e021      	b.n	800737c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	ee07 3a90 	vmov	s15, r3
 800733e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007342:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007438 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800734a:	4b37      	ldr	r3, [pc, #220]	; (8007428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800734c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007352:	ee07 3a90 	vmov	s15, r3
 8007356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800735a:	ed97 6a03 	vldr	s12, [r7, #12]
 800735e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007430 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800736a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800736e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007376:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800737a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800737c:	4b2a      	ldr	r3, [pc, #168]	; (8007428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800737e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007380:	0a5b      	lsrs	r3, r3, #9
 8007382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007386:	ee07 3a90 	vmov	s15, r3
 800738a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800738e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007392:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007396:	edd7 6a07 	vldr	s13, [r7, #28]
 800739a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800739e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073a2:	ee17 2a90 	vmov	r2, s15
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80073aa:	4b1f      	ldr	r3, [pc, #124]	; (8007428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ae:	0c1b      	lsrs	r3, r3, #16
 80073b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073b4:	ee07 3a90 	vmov	s15, r3
 80073b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80073c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073d0:	ee17 2a90 	vmov	r2, s15
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80073d8:	4b13      	ldr	r3, [pc, #76]	; (8007428 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073dc:	0e1b      	lsrs	r3, r3, #24
 80073de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073e2:	ee07 3a90 	vmov	s15, r3
 80073e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80073f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073fe:	ee17 2a90 	vmov	r2, s15
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007406:	e008      	b.n	800741a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	609a      	str	r2, [r3, #8]
}
 800741a:	bf00      	nop
 800741c:	3724      	adds	r7, #36	; 0x24
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	58024400 	.word	0x58024400
 800742c:	03d09000 	.word	0x03d09000
 8007430:	46000000 	.word	0x46000000
 8007434:	4c742400 	.word	0x4c742400
 8007438:	4a742400 	.word	0x4a742400
 800743c:	4bbebc20 	.word	0x4bbebc20

08007440 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800744e:	4b53      	ldr	r3, [pc, #332]	; (800759c <RCCEx_PLL2_Config+0x15c>)
 8007450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007452:	f003 0303 	and.w	r3, r3, #3
 8007456:	2b03      	cmp	r3, #3
 8007458:	d101      	bne.n	800745e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e099      	b.n	8007592 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800745e:	4b4f      	ldr	r3, [pc, #316]	; (800759c <RCCEx_PLL2_Config+0x15c>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a4e      	ldr	r2, [pc, #312]	; (800759c <RCCEx_PLL2_Config+0x15c>)
 8007464:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800746a:	f7fa f983 	bl	8001774 <HAL_GetTick>
 800746e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007470:	e008      	b.n	8007484 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007472:	f7fa f97f 	bl	8001774 <HAL_GetTick>
 8007476:	4602      	mov	r2, r0
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	2b02      	cmp	r3, #2
 800747e:	d901      	bls.n	8007484 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e086      	b.n	8007592 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007484:	4b45      	ldr	r3, [pc, #276]	; (800759c <RCCEx_PLL2_Config+0x15c>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1f0      	bne.n	8007472 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007490:	4b42      	ldr	r3, [pc, #264]	; (800759c <RCCEx_PLL2_Config+0x15c>)
 8007492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007494:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	031b      	lsls	r3, r3, #12
 800749e:	493f      	ldr	r1, [pc, #252]	; (800759c <RCCEx_PLL2_Config+0x15c>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	628b      	str	r3, [r1, #40]	; 0x28
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	3b01      	subs	r3, #1
 80074aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	3b01      	subs	r3, #1
 80074b4:	025b      	lsls	r3, r3, #9
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	431a      	orrs	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	3b01      	subs	r3, #1
 80074c0:	041b      	lsls	r3, r3, #16
 80074c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80074c6:	431a      	orrs	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	3b01      	subs	r3, #1
 80074ce:	061b      	lsls	r3, r3, #24
 80074d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80074d4:	4931      	ldr	r1, [pc, #196]	; (800759c <RCCEx_PLL2_Config+0x15c>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80074da:	4b30      	ldr	r3, [pc, #192]	; (800759c <RCCEx_PLL2_Config+0x15c>)
 80074dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	492d      	ldr	r1, [pc, #180]	; (800759c <RCCEx_PLL2_Config+0x15c>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80074ec:	4b2b      	ldr	r3, [pc, #172]	; (800759c <RCCEx_PLL2_Config+0x15c>)
 80074ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f0:	f023 0220 	bic.w	r2, r3, #32
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	4928      	ldr	r1, [pc, #160]	; (800759c <RCCEx_PLL2_Config+0x15c>)
 80074fa:	4313      	orrs	r3, r2
 80074fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80074fe:	4b27      	ldr	r3, [pc, #156]	; (800759c <RCCEx_PLL2_Config+0x15c>)
 8007500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007502:	4a26      	ldr	r2, [pc, #152]	; (800759c <RCCEx_PLL2_Config+0x15c>)
 8007504:	f023 0310 	bic.w	r3, r3, #16
 8007508:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800750a:	4b24      	ldr	r3, [pc, #144]	; (800759c <RCCEx_PLL2_Config+0x15c>)
 800750c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800750e:	4b24      	ldr	r3, [pc, #144]	; (80075a0 <RCCEx_PLL2_Config+0x160>)
 8007510:	4013      	ands	r3, r2
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	69d2      	ldr	r2, [r2, #28]
 8007516:	00d2      	lsls	r2, r2, #3
 8007518:	4920      	ldr	r1, [pc, #128]	; (800759c <RCCEx_PLL2_Config+0x15c>)
 800751a:	4313      	orrs	r3, r2
 800751c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800751e:	4b1f      	ldr	r3, [pc, #124]	; (800759c <RCCEx_PLL2_Config+0x15c>)
 8007520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007522:	4a1e      	ldr	r2, [pc, #120]	; (800759c <RCCEx_PLL2_Config+0x15c>)
 8007524:	f043 0310 	orr.w	r3, r3, #16
 8007528:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d106      	bne.n	800753e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007530:	4b1a      	ldr	r3, [pc, #104]	; (800759c <RCCEx_PLL2_Config+0x15c>)
 8007532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007534:	4a19      	ldr	r2, [pc, #100]	; (800759c <RCCEx_PLL2_Config+0x15c>)
 8007536:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800753a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800753c:	e00f      	b.n	800755e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d106      	bne.n	8007552 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007544:	4b15      	ldr	r3, [pc, #84]	; (800759c <RCCEx_PLL2_Config+0x15c>)
 8007546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007548:	4a14      	ldr	r2, [pc, #80]	; (800759c <RCCEx_PLL2_Config+0x15c>)
 800754a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800754e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007550:	e005      	b.n	800755e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007552:	4b12      	ldr	r3, [pc, #72]	; (800759c <RCCEx_PLL2_Config+0x15c>)
 8007554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007556:	4a11      	ldr	r2, [pc, #68]	; (800759c <RCCEx_PLL2_Config+0x15c>)
 8007558:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800755c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800755e:	4b0f      	ldr	r3, [pc, #60]	; (800759c <RCCEx_PLL2_Config+0x15c>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a0e      	ldr	r2, [pc, #56]	; (800759c <RCCEx_PLL2_Config+0x15c>)
 8007564:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007568:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800756a:	f7fa f903 	bl	8001774 <HAL_GetTick>
 800756e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007570:	e008      	b.n	8007584 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007572:	f7fa f8ff 	bl	8001774 <HAL_GetTick>
 8007576:	4602      	mov	r2, r0
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	2b02      	cmp	r3, #2
 800757e:	d901      	bls.n	8007584 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	e006      	b.n	8007592 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007584:	4b05      	ldr	r3, [pc, #20]	; (800759c <RCCEx_PLL2_Config+0x15c>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d0f0      	beq.n	8007572 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007590:	7bfb      	ldrb	r3, [r7, #15]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	58024400 	.word	0x58024400
 80075a0:	ffff0007 	.word	0xffff0007

080075a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075b2:	4b53      	ldr	r3, [pc, #332]	; (8007700 <RCCEx_PLL3_Config+0x15c>)
 80075b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b6:	f003 0303 	and.w	r3, r3, #3
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d101      	bne.n	80075c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e099      	b.n	80076f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80075c2:	4b4f      	ldr	r3, [pc, #316]	; (8007700 <RCCEx_PLL3_Config+0x15c>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a4e      	ldr	r2, [pc, #312]	; (8007700 <RCCEx_PLL3_Config+0x15c>)
 80075c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075ce:	f7fa f8d1 	bl	8001774 <HAL_GetTick>
 80075d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075d4:	e008      	b.n	80075e8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075d6:	f7fa f8cd 	bl	8001774 <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d901      	bls.n	80075e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e086      	b.n	80076f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075e8:	4b45      	ldr	r3, [pc, #276]	; (8007700 <RCCEx_PLL3_Config+0x15c>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1f0      	bne.n	80075d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80075f4:	4b42      	ldr	r3, [pc, #264]	; (8007700 <RCCEx_PLL3_Config+0x15c>)
 80075f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	051b      	lsls	r3, r3, #20
 8007602:	493f      	ldr	r1, [pc, #252]	; (8007700 <RCCEx_PLL3_Config+0x15c>)
 8007604:	4313      	orrs	r3, r2
 8007606:	628b      	str	r3, [r1, #40]	; 0x28
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	3b01      	subs	r3, #1
 800760e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	3b01      	subs	r3, #1
 8007618:	025b      	lsls	r3, r3, #9
 800761a:	b29b      	uxth	r3, r3
 800761c:	431a      	orrs	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	3b01      	subs	r3, #1
 8007624:	041b      	lsls	r3, r3, #16
 8007626:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800762a:	431a      	orrs	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	3b01      	subs	r3, #1
 8007632:	061b      	lsls	r3, r3, #24
 8007634:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007638:	4931      	ldr	r1, [pc, #196]	; (8007700 <RCCEx_PLL3_Config+0x15c>)
 800763a:	4313      	orrs	r3, r2
 800763c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800763e:	4b30      	ldr	r3, [pc, #192]	; (8007700 <RCCEx_PLL3_Config+0x15c>)
 8007640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007642:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	492d      	ldr	r1, [pc, #180]	; (8007700 <RCCEx_PLL3_Config+0x15c>)
 800764c:	4313      	orrs	r3, r2
 800764e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007650:	4b2b      	ldr	r3, [pc, #172]	; (8007700 <RCCEx_PLL3_Config+0x15c>)
 8007652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007654:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	4928      	ldr	r1, [pc, #160]	; (8007700 <RCCEx_PLL3_Config+0x15c>)
 800765e:	4313      	orrs	r3, r2
 8007660:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007662:	4b27      	ldr	r3, [pc, #156]	; (8007700 <RCCEx_PLL3_Config+0x15c>)
 8007664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007666:	4a26      	ldr	r2, [pc, #152]	; (8007700 <RCCEx_PLL3_Config+0x15c>)
 8007668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800766c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800766e:	4b24      	ldr	r3, [pc, #144]	; (8007700 <RCCEx_PLL3_Config+0x15c>)
 8007670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007672:	4b24      	ldr	r3, [pc, #144]	; (8007704 <RCCEx_PLL3_Config+0x160>)
 8007674:	4013      	ands	r3, r2
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	69d2      	ldr	r2, [r2, #28]
 800767a:	00d2      	lsls	r2, r2, #3
 800767c:	4920      	ldr	r1, [pc, #128]	; (8007700 <RCCEx_PLL3_Config+0x15c>)
 800767e:	4313      	orrs	r3, r2
 8007680:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007682:	4b1f      	ldr	r3, [pc, #124]	; (8007700 <RCCEx_PLL3_Config+0x15c>)
 8007684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007686:	4a1e      	ldr	r2, [pc, #120]	; (8007700 <RCCEx_PLL3_Config+0x15c>)
 8007688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800768c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d106      	bne.n	80076a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007694:	4b1a      	ldr	r3, [pc, #104]	; (8007700 <RCCEx_PLL3_Config+0x15c>)
 8007696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007698:	4a19      	ldr	r2, [pc, #100]	; (8007700 <RCCEx_PLL3_Config+0x15c>)
 800769a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800769e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076a0:	e00f      	b.n	80076c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d106      	bne.n	80076b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80076a8:	4b15      	ldr	r3, [pc, #84]	; (8007700 <RCCEx_PLL3_Config+0x15c>)
 80076aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ac:	4a14      	ldr	r2, [pc, #80]	; (8007700 <RCCEx_PLL3_Config+0x15c>)
 80076ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80076b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076b4:	e005      	b.n	80076c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80076b6:	4b12      	ldr	r3, [pc, #72]	; (8007700 <RCCEx_PLL3_Config+0x15c>)
 80076b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ba:	4a11      	ldr	r2, [pc, #68]	; (8007700 <RCCEx_PLL3_Config+0x15c>)
 80076bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80076c2:	4b0f      	ldr	r3, [pc, #60]	; (8007700 <RCCEx_PLL3_Config+0x15c>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a0e      	ldr	r2, [pc, #56]	; (8007700 <RCCEx_PLL3_Config+0x15c>)
 80076c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076ce:	f7fa f851 	bl	8001774 <HAL_GetTick>
 80076d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80076d4:	e008      	b.n	80076e8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80076d6:	f7fa f84d 	bl	8001774 <HAL_GetTick>
 80076da:	4602      	mov	r2, r0
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d901      	bls.n	80076e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e006      	b.n	80076f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80076e8:	4b05      	ldr	r3, [pc, #20]	; (8007700 <RCCEx_PLL3_Config+0x15c>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d0f0      	beq.n	80076d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	58024400 	.word	0x58024400
 8007704:	ffff0007 	.word	0xffff0007

08007708 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d101      	bne.n	800771a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e10f      	b.n	800793a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a87      	ldr	r2, [pc, #540]	; (8007944 <HAL_SPI_Init+0x23c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d00f      	beq.n	800774a <HAL_SPI_Init+0x42>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a86      	ldr	r2, [pc, #536]	; (8007948 <HAL_SPI_Init+0x240>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d00a      	beq.n	800774a <HAL_SPI_Init+0x42>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a84      	ldr	r2, [pc, #528]	; (800794c <HAL_SPI_Init+0x244>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d005      	beq.n	800774a <HAL_SPI_Init+0x42>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	2b0f      	cmp	r3, #15
 8007744:	d901      	bls.n	800774a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e0f7      	b.n	800793a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fd5a 	bl	8008204 <SPI_GetPacketSize>
 8007750:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a7b      	ldr	r2, [pc, #492]	; (8007944 <HAL_SPI_Init+0x23c>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d00c      	beq.n	8007776 <HAL_SPI_Init+0x6e>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a79      	ldr	r2, [pc, #484]	; (8007948 <HAL_SPI_Init+0x240>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d007      	beq.n	8007776 <HAL_SPI_Init+0x6e>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a78      	ldr	r2, [pc, #480]	; (800794c <HAL_SPI_Init+0x244>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d002      	beq.n	8007776 <HAL_SPI_Init+0x6e>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2b08      	cmp	r3, #8
 8007774:	d811      	bhi.n	800779a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800777a:	4a72      	ldr	r2, [pc, #456]	; (8007944 <HAL_SPI_Init+0x23c>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d009      	beq.n	8007794 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a70      	ldr	r2, [pc, #448]	; (8007948 <HAL_SPI_Init+0x240>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d004      	beq.n	8007794 <HAL_SPI_Init+0x8c>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a6f      	ldr	r2, [pc, #444]	; (800794c <HAL_SPI_Init+0x244>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d104      	bne.n	800779e <HAL_SPI_Init+0x96>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2b10      	cmp	r3, #16
 8007798:	d901      	bls.n	800779e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e0cd      	b.n	800793a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d106      	bne.n	80077b8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7f9 fa78 	bl	8000ca8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2202      	movs	r2, #2
 80077bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f022 0201 	bic.w	r2, r2, #1
 80077ce:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80077da:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077e4:	d119      	bne.n	800781a <HAL_SPI_Init+0x112>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077ee:	d103      	bne.n	80077f8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d008      	beq.n	800780a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10c      	bne.n	800781a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007804:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007808:	d107      	bne.n	800781a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007818:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00f      	beq.n	8007846 <HAL_SPI_Init+0x13e>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	2b06      	cmp	r3, #6
 800782c:	d90b      	bls.n	8007846 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	430a      	orrs	r2, r1
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	e007      	b.n	8007856 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007854:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	69da      	ldr	r2, [r3, #28]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785e:	431a      	orrs	r2, r3
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	431a      	orrs	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007868:	ea42 0103 	orr.w	r1, r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	68da      	ldr	r2, [r3, #12]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007880:	431a      	orrs	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007886:	431a      	orrs	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	699b      	ldr	r3, [r3, #24]
 800788c:	431a      	orrs	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	431a      	orrs	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	695b      	ldr	r3, [r3, #20]
 8007898:	431a      	orrs	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	431a      	orrs	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	431a      	orrs	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078aa:	431a      	orrs	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	431a      	orrs	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078b6:	ea42 0103 	orr.w	r1, r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	430a      	orrs	r2, r1
 80078c4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d113      	bne.n	80078f6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078e0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078f4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f022 0201 	bic.w	r2, r2, #1
 8007904:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00a      	beq.n	8007928 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	430a      	orrs	r2, r1
 8007926:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	40013000 	.word	0x40013000
 8007948:	40003800 	.word	0x40003800
 800794c:	40003c00 	.word	0x40003c00

08007950 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b08a      	sub	sp, #40	; 0x28
 8007954:	af02      	add	r7, sp, #8
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	603b      	str	r3, [r7, #0]
 800795c:	4613      	mov	r3, r2
 800795e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	3320      	adds	r3, #32
 8007966:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007972:	2b01      	cmp	r3, #1
 8007974:	d101      	bne.n	800797a <HAL_SPI_Transmit+0x2a>
 8007976:	2302      	movs	r3, #2
 8007978:	e1e1      	b.n	8007d3e <HAL_SPI_Transmit+0x3ee>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007982:	f7f9 fef7 	bl	8001774 <HAL_GetTick>
 8007986:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b01      	cmp	r3, #1
 8007992:	d007      	beq.n	80079a4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8007994:	2302      	movs	r3, #2
 8007996:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80079a0:	7efb      	ldrb	r3, [r7, #27]
 80079a2:	e1cc      	b.n	8007d3e <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <HAL_SPI_Transmit+0x60>
 80079aa:	88fb      	ldrh	r3, [r7, #6]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d107      	bne.n	80079c0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80079bc:	7efb      	ldrb	r3, [r7, #27]
 80079be:	e1be      	b.n	8007d3e <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2203      	movs	r2, #3
 80079c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	88fa      	ldrh	r2, [r7, #6]
 80079da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	88fa      	ldrh	r2, [r7, #6]
 80079e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007a10:	d108      	bne.n	8007a24 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a20:	601a      	str	r2, [r3, #0]
 8007a22:	e009      	b.n	8007a38 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007a36:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	685a      	ldr	r2, [r3, #4]
 8007a3e:	4b96      	ldr	r3, [pc, #600]	; (8007c98 <HAL_SPI_Transmit+0x348>)
 8007a40:	4013      	ands	r3, r2
 8007a42:	88f9      	ldrh	r1, [r7, #6]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	6812      	ldr	r2, [r2, #0]
 8007a48:	430b      	orrs	r3, r1
 8007a4a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f042 0201 	orr.w	r2, r2, #1
 8007a5a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a64:	d107      	bne.n	8007a76 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	2b0f      	cmp	r3, #15
 8007a7c:	d947      	bls.n	8007b0e <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007a7e:	e03f      	b.n	8007b00 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	f003 0302 	and.w	r3, r3, #2
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d114      	bne.n	8007ab8 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6812      	ldr	r2, [r2, #0]
 8007a98:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a9e:	1d1a      	adds	r2, r3, #4
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	3b01      	subs	r3, #1
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007ab6:	e023      	b.n	8007b00 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ab8:	f7f9 fe5c 	bl	8001774 <HAL_GetTick>
 8007abc:	4602      	mov	r2, r0
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d803      	bhi.n	8007ad0 <HAL_SPI_Transmit+0x180>
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ace:	d102      	bne.n	8007ad6 <HAL_SPI_Transmit+0x186>
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d114      	bne.n	8007b00 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 fac6 	bl	8008068 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e11e      	b.n	8007d3e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1b9      	bne.n	8007a80 <HAL_SPI_Transmit+0x130>
 8007b0c:	e0f1      	b.n	8007cf2 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	2b07      	cmp	r3, #7
 8007b14:	f240 80e6 	bls.w	8007ce4 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007b18:	e05d      	b.n	8007bd6 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	695b      	ldr	r3, [r3, #20]
 8007b20:	f003 0302 	and.w	r3, r3, #2
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d132      	bne.n	8007b8e <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d918      	bls.n	8007b66 <HAL_SPI_Transmit+0x216>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d014      	beq.n	8007b66 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6812      	ldr	r2, [r2, #0]
 8007b46:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b4c:	1d1a      	adds	r2, r3, #4
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	3b02      	subs	r3, #2
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007b64:	e037      	b.n	8007bd6 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b6a:	881a      	ldrh	r2, [r3, #0]
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b74:	1c9a      	adds	r2, r3, #2
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	3b01      	subs	r3, #1
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007b8c:	e023      	b.n	8007bd6 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b8e:	f7f9 fdf1 	bl	8001774 <HAL_GetTick>
 8007b92:	4602      	mov	r2, r0
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	683a      	ldr	r2, [r7, #0]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d803      	bhi.n	8007ba6 <HAL_SPI_Transmit+0x256>
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba4:	d102      	bne.n	8007bac <HAL_SPI_Transmit+0x25c>
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d114      	bne.n	8007bd6 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f000 fa5b 	bl	8008068 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e0b3      	b.n	8007d3e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d19b      	bne.n	8007b1a <HAL_SPI_Transmit+0x1ca>
 8007be2:	e086      	b.n	8007cf2 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	f003 0302 	and.w	r3, r3, #2
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d154      	bne.n	8007c9c <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	2b03      	cmp	r3, #3
 8007bfc:	d918      	bls.n	8007c30 <HAL_SPI_Transmit+0x2e0>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c02:	2b40      	cmp	r3, #64	; 0x40
 8007c04:	d914      	bls.n	8007c30 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6812      	ldr	r2, [r2, #0]
 8007c10:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c16:	1d1a      	adds	r2, r3, #4
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	3b04      	subs	r3, #4
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007c2e:	e059      	b.n	8007ce4 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d917      	bls.n	8007c6c <HAL_SPI_Transmit+0x31c>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d013      	beq.n	8007c6c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c48:	881a      	ldrh	r2, [r3, #0]
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c52:	1c9a      	adds	r2, r3, #2
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	3b02      	subs	r3, #2
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007c6a:	e03b      	b.n	8007ce4 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3320      	adds	r3, #32
 8007c76:	7812      	ldrb	r2, [r2, #0]
 8007c78:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c7e:	1c5a      	adds	r2, r3, #1
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007c96:	e025      	b.n	8007ce4 <HAL_SPI_Transmit+0x394>
 8007c98:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c9c:	f7f9 fd6a 	bl	8001774 <HAL_GetTick>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	683a      	ldr	r2, [r7, #0]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d803      	bhi.n	8007cb4 <HAL_SPI_Transmit+0x364>
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb2:	d102      	bne.n	8007cba <HAL_SPI_Transmit+0x36a>
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d114      	bne.n	8007ce4 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f000 f9d4 	bl	8008068 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e02c      	b.n	8007d3e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f47f af79 	bne.w	8007be4 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	2108      	movs	r1, #8
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 fa53 	bl	80081a8 <SPI_WaitOnFlagUntilTimeout>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d007      	beq.n	8007d18 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d0e:	f043 0220 	orr.w	r2, r3, #32
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f000 f9a5 	bl	8008068 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d001      	beq.n	8007d3c <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e000      	b.n	8007d3e <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8007d3c:	7efb      	ldrb	r3, [r7, #27]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3720      	adds	r7, #32
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop

08007d48 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b088      	sub	sp, #32
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	603b      	str	r3, [r7, #0]
 8007d54:	4613      	mov	r3, r2
 8007d56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	3330      	adds	r3, #48	; 0x30
 8007d62:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d101      	bne.n	8007d72 <HAL_SPI_Receive+0x2a>
 8007d6e:	2302      	movs	r3, #2
 8007d70:	e173      	b.n	800805a <HAL_SPI_Receive+0x312>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d7a:	f7f9 fcfb 	bl	8001774 <HAL_GetTick>
 8007d7e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d007      	beq.n	8007d9c <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 8007d8c:	2302      	movs	r3, #2
 8007d8e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007d98:	7ffb      	ldrb	r3, [r7, #31]
 8007d9a:	e15e      	b.n	800805a <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d002      	beq.n	8007da8 <HAL_SPI_Receive+0x60>
 8007da2:	88fb      	ldrh	r3, [r7, #6]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d107      	bne.n	8007db8 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007db4:	7ffb      	ldrb	r3, [r7, #31]
 8007db6:	e150      	b.n	800805a <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2204      	movs	r2, #4
 8007dbc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	88fa      	ldrh	r2, [r7, #6]
 8007dd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	88fa      	ldrh	r2, [r7, #6]
 8007dda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007e08:	d108      	bne.n	8007e1c <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e18:	601a      	str	r2, [r3, #0]
 8007e1a:	e009      	b.n	8007e30 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007e2e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	4b8b      	ldr	r3, [pc, #556]	; (8008064 <HAL_SPI_Receive+0x31c>)
 8007e38:	4013      	ands	r3, r2
 8007e3a:	88f9      	ldrh	r1, [r7, #6]
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	6812      	ldr	r2, [r2, #0]
 8007e40:	430b      	orrs	r3, r1
 8007e42:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f042 0201 	orr.w	r2, r2, #1
 8007e52:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e5c:	d107      	bne.n	8007e6e <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e6c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	2b0f      	cmp	r3, #15
 8007e74:	d948      	bls.n	8007f08 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007e76:	e040      	b.n	8007efa <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	695a      	ldr	r2, [r3, #20]
 8007e7e:	f248 0308 	movw	r3, #32776	; 0x8008
 8007e82:	4013      	ands	r3, r2
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d014      	beq.n	8007eb2 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e90:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007e92:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e98:	1d1a      	adds	r2, r3, #4
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007eb0:	e023      	b.n	8007efa <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007eb2:	f7f9 fc5f 	bl	8001774 <HAL_GetTick>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	683a      	ldr	r2, [r7, #0]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d803      	bhi.n	8007eca <HAL_SPI_Receive+0x182>
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec8:	d102      	bne.n	8007ed0 <HAL_SPI_Receive+0x188>
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d114      	bne.n	8007efa <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f000 f8c9 	bl	8008068 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ee4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e0af      	b.n	800805a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1b8      	bne.n	8007e78 <HAL_SPI_Receive+0x130>
 8007f06:	e095      	b.n	8008034 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	2b07      	cmp	r3, #7
 8007f0e:	f240 808b 	bls.w	8008028 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007f12:	e03f      	b.n	8007f94 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	695b      	ldr	r3, [r3, #20]
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d114      	bne.n	8007f4c <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f26:	69ba      	ldr	r2, [r7, #24]
 8007f28:	8812      	ldrh	r2, [r2, #0]
 8007f2a:	b292      	uxth	r2, r2
 8007f2c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f32:	1c9a      	adds	r2, r3, #2
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	3b01      	subs	r3, #1
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007f4a:	e023      	b.n	8007f94 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f4c:	f7f9 fc12 	bl	8001774 <HAL_GetTick>
 8007f50:	4602      	mov	r2, r0
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	1ad3      	subs	r3, r2, r3
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d803      	bhi.n	8007f64 <HAL_SPI_Receive+0x21c>
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f62:	d102      	bne.n	8007f6a <HAL_SPI_Receive+0x222>
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d114      	bne.n	8007f94 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f000 f87c 	bl	8008068 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e062      	b.n	800805a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1b9      	bne.n	8007f14 <HAL_SPI_Receive+0x1cc>
 8007fa0:	e048      	b.n	8008034 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	695b      	ldr	r3, [r3, #20]
 8007fa8:	f003 0301 	and.w	r3, r3, #1
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d117      	bne.n	8007fe0 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fbc:	7812      	ldrb	r2, [r2, #0]
 8007fbe:	b2d2      	uxtb	r2, r2
 8007fc0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fc6:	1c5a      	adds	r2, r3, #1
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007fde:	e023      	b.n	8008028 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fe0:	f7f9 fbc8 	bl	8001774 <HAL_GetTick>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	683a      	ldr	r2, [r7, #0]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d803      	bhi.n	8007ff8 <HAL_SPI_Receive+0x2b0>
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff6:	d102      	bne.n	8007ffe <HAL_SPI_Receive+0x2b6>
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d114      	bne.n	8008028 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f000 f832 	bl	8008068 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008012:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008024:	2303      	movs	r3, #3
 8008026:	e018      	b.n	800805a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800802e:	b29b      	uxth	r3, r3
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1b6      	bne.n	8007fa2 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 f817 	bl	8008068 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008050:	2b00      	cmp	r3, #0
 8008052:	d001      	beq.n	8008058 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	e000      	b.n	800805a <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 8008058:	7ffb      	ldrb	r3, [r7, #31]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3720      	adds	r7, #32
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	ffff0000 	.word	0xffff0000

08008068 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	695b      	ldr	r3, [r3, #20]
 8008076:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	699a      	ldr	r2, [r3, #24]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f042 0208 	orr.w	r2, r2, #8
 8008086:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	699a      	ldr	r2, [r3, #24]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f042 0210 	orr.w	r2, r2, #16
 8008096:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f022 0201 	bic.w	r2, r2, #1
 80080a6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6919      	ldr	r1, [r3, #16]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	4b3c      	ldr	r3, [pc, #240]	; (80081a4 <SPI_CloseTransfer+0x13c>)
 80080b4:	400b      	ands	r3, r1
 80080b6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	689a      	ldr	r2, [r3, #8]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80080c6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	2b04      	cmp	r3, #4
 80080d2:	d014      	beq.n	80080fe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f003 0320 	and.w	r3, r3, #32
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00f      	beq.n	80080fe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	699a      	ldr	r2, [r3, #24]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f042 0220 	orr.w	r2, r2, #32
 80080fc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b03      	cmp	r3, #3
 8008108:	d014      	beq.n	8008134 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00f      	beq.n	8008134 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800811a:	f043 0204 	orr.w	r2, r3, #4
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	699a      	ldr	r2, [r3, #24]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008132:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00f      	beq.n	800815e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008144:	f043 0201 	orr.w	r2, r3, #1
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	699a      	ldr	r2, [r3, #24]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800815c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00f      	beq.n	8008188 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800816e:	f043 0208 	orr.w	r2, r3, #8
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	699a      	ldr	r2, [r3, #24]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008186:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008198:	bf00      	nop
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	fffffc90 	.word	0xfffffc90

080081a8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	603b      	str	r3, [r7, #0]
 80081b4:	4613      	mov	r3, r2
 80081b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80081b8:	e010      	b.n	80081dc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081ba:	f7f9 fadb 	bl	8001774 <HAL_GetTick>
 80081be:	4602      	mov	r2, r0
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	683a      	ldr	r2, [r7, #0]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d803      	bhi.n	80081d2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d0:	d102      	bne.n	80081d8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d101      	bne.n	80081dc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80081d8:	2303      	movs	r3, #3
 80081da:	e00f      	b.n	80081fc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	695a      	ldr	r2, [r3, #20]
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	4013      	ands	r3, r2
 80081e6:	68ba      	ldr	r2, [r7, #8]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	bf0c      	ite	eq
 80081ec:	2301      	moveq	r3, #1
 80081ee:	2300      	movne	r3, #0
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	461a      	mov	r2, r3
 80081f4:	79fb      	ldrb	r3, [r7, #7]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d0df      	beq.n	80081ba <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008210:	095b      	lsrs	r3, r3, #5
 8008212:	3301      	adds	r3, #1
 8008214:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	3301      	adds	r3, #1
 800821c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	3307      	adds	r3, #7
 8008222:	08db      	lsrs	r3, r3, #3
 8008224:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	fb02 f303 	mul.w	r3, r2, r3
}
 800822e:	4618      	mov	r0, r3
 8008230:	3714      	adds	r7, #20
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr

0800823a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b082      	sub	sp, #8
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d101      	bne.n	800824c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	e049      	b.n	80082e0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008252:	b2db      	uxtb	r3, r3
 8008254:	2b00      	cmp	r3, #0
 8008256:	d106      	bne.n	8008266 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 f841 	bl	80082e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2202      	movs	r2, #2
 800826a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	3304      	adds	r3, #4
 8008276:	4619      	mov	r1, r3
 8008278:	4610      	mov	r0, r2
 800827a:	f000 f9ff 	bl	800867c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2201      	movs	r2, #1
 80082a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2201      	movs	r2, #1
 80082aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2201      	movs	r2, #1
 80082ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b01      	cmp	r3, #1
 800830e:	d001      	beq.n	8008314 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e054      	b.n	80083be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2202      	movs	r2, #2
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68da      	ldr	r2, [r3, #12]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f042 0201 	orr.w	r2, r2, #1
 800832a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a26      	ldr	r2, [pc, #152]	; (80083cc <HAL_TIM_Base_Start_IT+0xd0>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d022      	beq.n	800837c <HAL_TIM_Base_Start_IT+0x80>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800833e:	d01d      	beq.n	800837c <HAL_TIM_Base_Start_IT+0x80>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a22      	ldr	r2, [pc, #136]	; (80083d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d018      	beq.n	800837c <HAL_TIM_Base_Start_IT+0x80>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a21      	ldr	r2, [pc, #132]	; (80083d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d013      	beq.n	800837c <HAL_TIM_Base_Start_IT+0x80>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a1f      	ldr	r2, [pc, #124]	; (80083d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d00e      	beq.n	800837c <HAL_TIM_Base_Start_IT+0x80>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a1e      	ldr	r2, [pc, #120]	; (80083dc <HAL_TIM_Base_Start_IT+0xe0>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d009      	beq.n	800837c <HAL_TIM_Base_Start_IT+0x80>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a1c      	ldr	r2, [pc, #112]	; (80083e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d004      	beq.n	800837c <HAL_TIM_Base_Start_IT+0x80>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a1b      	ldr	r2, [pc, #108]	; (80083e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d115      	bne.n	80083a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	689a      	ldr	r2, [r3, #8]
 8008382:	4b19      	ldr	r3, [pc, #100]	; (80083e8 <HAL_TIM_Base_Start_IT+0xec>)
 8008384:	4013      	ands	r3, r2
 8008386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2b06      	cmp	r3, #6
 800838c:	d015      	beq.n	80083ba <HAL_TIM_Base_Start_IT+0xbe>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008394:	d011      	beq.n	80083ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f042 0201 	orr.w	r2, r2, #1
 80083a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083a6:	e008      	b.n	80083ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f042 0201 	orr.w	r2, r2, #1
 80083b6:	601a      	str	r2, [r3, #0]
 80083b8:	e000      	b.n	80083bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3714      	adds	r7, #20
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	40010000 	.word	0x40010000
 80083d0:	40000400 	.word	0x40000400
 80083d4:	40000800 	.word	0x40000800
 80083d8:	40000c00 	.word	0x40000c00
 80083dc:	40010400 	.word	0x40010400
 80083e0:	40001800 	.word	0x40001800
 80083e4:	40014000 	.word	0x40014000
 80083e8:	00010007 	.word	0x00010007

080083ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	f003 0302 	and.w	r3, r3, #2
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d122      	bne.n	8008448 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	f003 0302 	and.w	r3, r3, #2
 800840c:	2b02      	cmp	r3, #2
 800840e:	d11b      	bne.n	8008448 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f06f 0202 	mvn.w	r2, #2
 8008418:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2201      	movs	r2, #1
 800841e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	f003 0303 	and.w	r3, r3, #3
 800842a:	2b00      	cmp	r3, #0
 800842c:	d003      	beq.n	8008436 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 f905 	bl	800863e <HAL_TIM_IC_CaptureCallback>
 8008434:	e005      	b.n	8008442 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f8f7 	bl	800862a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f908 	bl	8008652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	f003 0304 	and.w	r3, r3, #4
 8008452:	2b04      	cmp	r3, #4
 8008454:	d122      	bne.n	800849c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	f003 0304 	and.w	r3, r3, #4
 8008460:	2b04      	cmp	r3, #4
 8008462:	d11b      	bne.n	800849c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f06f 0204 	mvn.w	r2, #4
 800846c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2202      	movs	r2, #2
 8008472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	699b      	ldr	r3, [r3, #24]
 800847a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800847e:	2b00      	cmp	r3, #0
 8008480:	d003      	beq.n	800848a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f8db 	bl	800863e <HAL_TIM_IC_CaptureCallback>
 8008488:	e005      	b.n	8008496 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 f8cd 	bl	800862a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f8de 	bl	8008652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	f003 0308 	and.w	r3, r3, #8
 80084a6:	2b08      	cmp	r3, #8
 80084a8:	d122      	bne.n	80084f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	f003 0308 	and.w	r3, r3, #8
 80084b4:	2b08      	cmp	r3, #8
 80084b6:	d11b      	bne.n	80084f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f06f 0208 	mvn.w	r2, #8
 80084c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2204      	movs	r2, #4
 80084c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	69db      	ldr	r3, [r3, #28]
 80084ce:	f003 0303 	and.w	r3, r3, #3
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d003      	beq.n	80084de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f8b1 	bl	800863e <HAL_TIM_IC_CaptureCallback>
 80084dc:	e005      	b.n	80084ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f8a3 	bl	800862a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f8b4 	bl	8008652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	f003 0310 	and.w	r3, r3, #16
 80084fa:	2b10      	cmp	r3, #16
 80084fc:	d122      	bne.n	8008544 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	f003 0310 	and.w	r3, r3, #16
 8008508:	2b10      	cmp	r3, #16
 800850a:	d11b      	bne.n	8008544 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f06f 0210 	mvn.w	r2, #16
 8008514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2208      	movs	r2, #8
 800851a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	69db      	ldr	r3, [r3, #28]
 8008522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008526:	2b00      	cmp	r3, #0
 8008528:	d003      	beq.n	8008532 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f887 	bl	800863e <HAL_TIM_IC_CaptureCallback>
 8008530:	e005      	b.n	800853e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f879 	bl	800862a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f88a 	bl	8008652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	f003 0301 	and.w	r3, r3, #1
 800854e:	2b01      	cmp	r3, #1
 8008550:	d10e      	bne.n	8008570 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	f003 0301 	and.w	r3, r3, #1
 800855c:	2b01      	cmp	r3, #1
 800855e:	d107      	bne.n	8008570 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f06f 0201 	mvn.w	r2, #1
 8008568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7f8 fb66 	bl	8000c3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800857a:	2b80      	cmp	r3, #128	; 0x80
 800857c:	d10e      	bne.n	800859c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008588:	2b80      	cmp	r3, #128	; 0x80
 800858a:	d107      	bne.n	800859c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f914 	bl	80087c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085aa:	d10e      	bne.n	80085ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085b6:	2b80      	cmp	r3, #128	; 0x80
 80085b8:	d107      	bne.n	80085ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80085c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f907 	bl	80087d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085d4:	2b40      	cmp	r3, #64	; 0x40
 80085d6:	d10e      	bne.n	80085f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085e2:	2b40      	cmp	r3, #64	; 0x40
 80085e4:	d107      	bne.n	80085f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80085ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f838 	bl	8008666 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	f003 0320 	and.w	r3, r3, #32
 8008600:	2b20      	cmp	r3, #32
 8008602:	d10e      	bne.n	8008622 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	f003 0320 	and.w	r3, r3, #32
 800860e:	2b20      	cmp	r3, #32
 8008610:	d107      	bne.n	8008622 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f06f 0220 	mvn.w	r2, #32
 800861a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f8c7 	bl	80087b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008622:	bf00      	nop
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800862a:	b480      	push	{r7}
 800862c:	b083      	sub	sp, #12
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008632:	bf00      	nop
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr

0800863e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800863e:	b480      	push	{r7}
 8008640:	b083      	sub	sp, #12
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008646:	bf00      	nop
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008652:	b480      	push	{r7}
 8008654:	b083      	sub	sp, #12
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800865a:	bf00      	nop
 800865c:	370c      	adds	r7, #12
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr

08008666 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008666:	b480      	push	{r7}
 8008668:	b083      	sub	sp, #12
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800866e:	bf00      	nop
 8008670:	370c      	adds	r7, #12
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
	...

0800867c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a40      	ldr	r2, [pc, #256]	; (8008790 <TIM_Base_SetConfig+0x114>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d013      	beq.n	80086bc <TIM_Base_SetConfig+0x40>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800869a:	d00f      	beq.n	80086bc <TIM_Base_SetConfig+0x40>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a3d      	ldr	r2, [pc, #244]	; (8008794 <TIM_Base_SetConfig+0x118>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d00b      	beq.n	80086bc <TIM_Base_SetConfig+0x40>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a3c      	ldr	r2, [pc, #240]	; (8008798 <TIM_Base_SetConfig+0x11c>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d007      	beq.n	80086bc <TIM_Base_SetConfig+0x40>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a3b      	ldr	r2, [pc, #236]	; (800879c <TIM_Base_SetConfig+0x120>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d003      	beq.n	80086bc <TIM_Base_SetConfig+0x40>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a3a      	ldr	r2, [pc, #232]	; (80087a0 <TIM_Base_SetConfig+0x124>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d108      	bne.n	80086ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a2f      	ldr	r2, [pc, #188]	; (8008790 <TIM_Base_SetConfig+0x114>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d01f      	beq.n	8008716 <TIM_Base_SetConfig+0x9a>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086dc:	d01b      	beq.n	8008716 <TIM_Base_SetConfig+0x9a>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4a2c      	ldr	r2, [pc, #176]	; (8008794 <TIM_Base_SetConfig+0x118>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d017      	beq.n	8008716 <TIM_Base_SetConfig+0x9a>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a2b      	ldr	r2, [pc, #172]	; (8008798 <TIM_Base_SetConfig+0x11c>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d013      	beq.n	8008716 <TIM_Base_SetConfig+0x9a>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4a2a      	ldr	r2, [pc, #168]	; (800879c <TIM_Base_SetConfig+0x120>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d00f      	beq.n	8008716 <TIM_Base_SetConfig+0x9a>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4a29      	ldr	r2, [pc, #164]	; (80087a0 <TIM_Base_SetConfig+0x124>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d00b      	beq.n	8008716 <TIM_Base_SetConfig+0x9a>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a28      	ldr	r2, [pc, #160]	; (80087a4 <TIM_Base_SetConfig+0x128>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d007      	beq.n	8008716 <TIM_Base_SetConfig+0x9a>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a27      	ldr	r2, [pc, #156]	; (80087a8 <TIM_Base_SetConfig+0x12c>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d003      	beq.n	8008716 <TIM_Base_SetConfig+0x9a>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a26      	ldr	r2, [pc, #152]	; (80087ac <TIM_Base_SetConfig+0x130>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d108      	bne.n	8008728 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800871c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	4313      	orrs	r3, r2
 8008726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	695b      	ldr	r3, [r3, #20]
 8008732:	4313      	orrs	r3, r2
 8008734:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	689a      	ldr	r2, [r3, #8]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4a10      	ldr	r2, [pc, #64]	; (8008790 <TIM_Base_SetConfig+0x114>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d00f      	beq.n	8008774 <TIM_Base_SetConfig+0xf8>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a12      	ldr	r2, [pc, #72]	; (80087a0 <TIM_Base_SetConfig+0x124>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d00b      	beq.n	8008774 <TIM_Base_SetConfig+0xf8>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a11      	ldr	r2, [pc, #68]	; (80087a4 <TIM_Base_SetConfig+0x128>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d007      	beq.n	8008774 <TIM_Base_SetConfig+0xf8>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a10      	ldr	r2, [pc, #64]	; (80087a8 <TIM_Base_SetConfig+0x12c>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d003      	beq.n	8008774 <TIM_Base_SetConfig+0xf8>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a0f      	ldr	r2, [pc, #60]	; (80087ac <TIM_Base_SetConfig+0x130>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d103      	bne.n	800877c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	691a      	ldr	r2, [r3, #16]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	615a      	str	r2, [r3, #20]
}
 8008782:	bf00      	nop
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	40010000 	.word	0x40010000
 8008794:	40000400 	.word	0x40000400
 8008798:	40000800 	.word	0x40000800
 800879c:	40000c00 	.word	0x40000c00
 80087a0:	40010400 	.word	0x40010400
 80087a4:	40014000 	.word	0x40014000
 80087a8:	40014400 	.word	0x40014400
 80087ac:	40014800 	.word	0x40014800

080087b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d101      	bne.n	80087fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	e050      	b.n	80088a0 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008804:	2b00      	cmp	r3, #0
 8008806:	d114      	bne.n	8008832 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fd2f 	bl	8009274 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800881c:	2b00      	cmp	r3, #0
 800881e:	d103      	bne.n	8008828 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a21      	ldr	r2, [pc, #132]	; (80088a8 <HAL_UART_Init+0xbc>)
 8008824:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2224      	movs	r2, #36	; 0x24
 8008836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f022 0201 	bic.w	r2, r2, #1
 8008848:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fd64 	bl	8009318 <UART_SetConfig>
 8008850:	4603      	mov	r3, r0
 8008852:	2b01      	cmp	r3, #1
 8008854:	d101      	bne.n	800885a <HAL_UART_Init+0x6e>
  {
    return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e022      	b.n	80088a0 <HAL_UART_Init+0xb4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800885e:	2b00      	cmp	r3, #0
 8008860:	d002      	beq.n	8008868 <HAL_UART_Init+0x7c>
  {
    UART_AdvFeatureConfig(huart);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f001 fac0 	bl	8009de8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	685a      	ldr	r2, [r3, #4]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008876:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	689a      	ldr	r2, [r3, #8]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008886:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f042 0201 	orr.w	r2, r2, #1
 8008896:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f001 fb47 	bl	8009f2c <UART_CheckIdleState>
 800889e:	4603      	mov	r3, r0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	08000d79 	.word	0x08000d79

080088ac <HAL_UART_RegisterRxEventCallback>:
  * @param  huart     Uart handle
  * @param  pCallback Pointer to the Rx Event Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterRxEventCallback(UART_HandleTypeDef *huart, pUART_RxEventCallbackTypeDef pCallback)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	73fb      	strb	r3, [r7, #15]

  if (pCallback == NULL)
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d109      	bne.n	80088d4 <HAL_UART_RegisterRxEventCallback+0x28>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    return HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e023      	b.n	800891c <HAL_UART_RegisterRxEventCallback+0x70>
  }

  /* Process locked */
  __HAL_LOCK(huart);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d101      	bne.n	80088e2 <HAL_UART_RegisterRxEventCallback+0x36>
 80088de:	2302      	movs	r3, #2
 80088e0:	e01c      	b.n	800891c <HAL_UART_RegisterRxEventCallback+0x70>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  if (huart->gState == HAL_UART_STATE_READY)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088f0:	2b20      	cmp	r3, #32
 80088f2:	d104      	bne.n	80088fe <HAL_UART_RegisterRxEventCallback+0x52>
  {
    huart->RxEventCallback = pCallback;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	683a      	ldr	r2, [r7, #0]
 80088f8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80088fc:	e009      	b.n	8008912 <HAL_UART_RegisterRxEventCallback+0x66>
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008904:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    status =  HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 800891a:	7bfb      	ldrb	r3, [r7, #15]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3714      	adds	r7, #20
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b08a      	sub	sp, #40	; 0x28
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	4613      	mov	r3, r2
 8008934:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800893c:	2b20      	cmp	r3, #32
 800893e:	d167      	bne.n	8008a10 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d002      	beq.n	800894c <HAL_UART_Transmit_DMA+0x24>
 8008946:	88fb      	ldrh	r3, [r7, #6]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d101      	bne.n	8008950 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	e060      	b.n	8008a12 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	88fa      	ldrh	r2, [r7, #6]
 800895a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	88fa      	ldrh	r2, [r7, #6]
 8008962:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2221      	movs	r2, #33	; 0x21
 8008972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800897a:	2b00      	cmp	r3, #0
 800897c:	d028      	beq.n	80089d0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008982:	4a26      	ldr	r2, [pc, #152]	; (8008a1c <HAL_UART_Transmit_DMA+0xf4>)
 8008984:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800898a:	4a25      	ldr	r2, [pc, #148]	; (8008a20 <HAL_UART_Transmit_DMA+0xf8>)
 800898c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008992:	4a24      	ldr	r2, [pc, #144]	; (8008a24 <HAL_UART_Transmit_DMA+0xfc>)
 8008994:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800899a:	2200      	movs	r2, #0
 800899c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089a6:	4619      	mov	r1, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3328      	adds	r3, #40	; 0x28
 80089ae:	461a      	mov	r2, r3
 80089b0:	88fb      	ldrh	r3, [r7, #6]
 80089b2:	f7f9 fb57 	bl	8002064 <HAL_DMA_Start_IT>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d009      	beq.n	80089d0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2210      	movs	r2, #16
 80089c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2220      	movs	r2, #32
 80089c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e020      	b.n	8008a12 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2240      	movs	r2, #64	; 0x40
 80089d6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	3308      	adds	r3, #8
 80089de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	e853 3f00 	ldrex	r3, [r3]
 80089e6:	613b      	str	r3, [r7, #16]
   return(result);
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089ee:	627b      	str	r3, [r7, #36]	; 0x24
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	3308      	adds	r3, #8
 80089f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089f8:	623a      	str	r2, [r7, #32]
 80089fa:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fc:	69f9      	ldr	r1, [r7, #28]
 80089fe:	6a3a      	ldr	r2, [r7, #32]
 8008a00:	e841 2300 	strex	r3, r2, [r1]
 8008a04:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1e5      	bne.n	80089d8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	e000      	b.n	8008a12 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008a10:	2302      	movs	r3, #2
  }
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3728      	adds	r7, #40	; 0x28
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	0800a3ed 	.word	0x0800a3ed
 8008a20:	0800a487 	.word	0x0800a487
 8008a24:	0800a61d 	.word	0x0800a61d

08008a28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b0ba      	sub	sp, #232	; 0xe8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	69db      	ldr	r3, [r3, #28]
 8008a36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008a52:	f640 030f 	movw	r3, #2063	; 0x80f
 8008a56:	4013      	ands	r3, r2
 8008a58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008a5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d11b      	bne.n	8008a9c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a68:	f003 0320 	and.w	r3, r3, #32
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d015      	beq.n	8008a9c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a74:	f003 0320 	and.w	r3, r3, #32
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d105      	bne.n	8008a88 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d009      	beq.n	8008a9c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f000 8387 	beq.w	80091a0 <HAL_UART_IRQHandler+0x778>
      {
        huart->RxISR(huart);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	4798      	blx	r3
      }
      return;
 8008a9a:	e381      	b.n	80091a0 <HAL_UART_IRQHandler+0x778>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008a9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f000 8129 	beq.w	8008cf8 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008aa6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008aaa:	4b90      	ldr	r3, [pc, #576]	; (8008cec <HAL_UART_IRQHandler+0x2c4>)
 8008aac:	4013      	ands	r3, r2
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d106      	bne.n	8008ac0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008ab2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008ab6:	4b8e      	ldr	r3, [pc, #568]	; (8008cf0 <HAL_UART_IRQHandler+0x2c8>)
 8008ab8:	4013      	ands	r3, r2
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	f000 811c 	beq.w	8008cf8 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ac4:	f003 0301 	and.w	r3, r3, #1
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d011      	beq.n	8008af0 <HAL_UART_IRQHandler+0xc8>
 8008acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00b      	beq.n	8008af0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2201      	movs	r2, #1
 8008ade:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ae6:	f043 0201 	orr.w	r2, r3, #1
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008af4:	f003 0302 	and.w	r3, r3, #2
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d011      	beq.n	8008b20 <HAL_UART_IRQHandler+0xf8>
 8008afc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b00:	f003 0301 	and.w	r3, r3, #1
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00b      	beq.n	8008b20 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2202      	movs	r2, #2
 8008b0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b16:	f043 0204 	orr.w	r2, r3, #4
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b24:	f003 0304 	and.w	r3, r3, #4
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d011      	beq.n	8008b50 <HAL_UART_IRQHandler+0x128>
 8008b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b30:	f003 0301 	and.w	r3, r3, #1
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00b      	beq.n	8008b50 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2204      	movs	r2, #4
 8008b3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b46:	f043 0202 	orr.w	r2, r3, #2
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b54:	f003 0308 	and.w	r3, r3, #8
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d017      	beq.n	8008b8c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b60:	f003 0320 	and.w	r3, r3, #32
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d105      	bne.n	8008b74 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008b68:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008b6c:	4b5f      	ldr	r3, [pc, #380]	; (8008cec <HAL_UART_IRQHandler+0x2c4>)
 8008b6e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00b      	beq.n	8008b8c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2208      	movs	r2, #8
 8008b7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b82:	f043 0208 	orr.w	r2, r3, #8
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d012      	beq.n	8008bbe <HAL_UART_IRQHandler+0x196>
 8008b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00c      	beq.n	8008bbe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bb4:	f043 0220 	orr.w	r2, r3, #32
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f000 82ed 	beq.w	80091a4 <HAL_UART_IRQHandler+0x77c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bce:	f003 0320 	and.w	r3, r3, #32
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d013      	beq.n	8008bfe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bda:	f003 0320 	and.w	r3, r3, #32
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d105      	bne.n	8008bee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008be2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d007      	beq.n	8008bfe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d003      	beq.n	8008bfe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c12:	2b40      	cmp	r3, #64	; 0x40
 8008c14:	d005      	beq.n	8008c22 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008c16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d058      	beq.n	8008cd4 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f001 fb7c 	bl	800a320 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c32:	2b40      	cmp	r3, #64	; 0x40
 8008c34:	d148      	bne.n	8008cc8 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	3308      	adds	r3, #8
 8008c3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c44:	e853 3f00 	ldrex	r3, [r3]
 8008c48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008c4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	3308      	adds	r3, #8
 8008c5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008c62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008c66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008c6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008c72:	e841 2300 	strex	r3, r2, [r1]
 8008c76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008c7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d1d9      	bne.n	8008c36 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d017      	beq.n	8008cbc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c92:	4a18      	ldr	r2, [pc, #96]	; (8008cf4 <HAL_UART_IRQHandler+0x2cc>)
 8008c94:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7f9 ff69 	bl	8002b74 <HAL_DMA_Abort_IT>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d01f      	beq.n	8008ce8 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8008cb6:	4610      	mov	r0, r2
 8008cb8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cba:	e015      	b.n	8008ce8 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cc6:	e00f      	b.n	8008ce8 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cd2:	e009      	b.n	8008ce8 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8008ce6:	e25d      	b.n	80091a4 <HAL_UART_IRQHandler+0x77c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ce8:	bf00      	nop
    return;
 8008cea:	e25b      	b.n	80091a4 <HAL_UART_IRQHandler+0x77c>
 8008cec:	10000001 	.word	0x10000001
 8008cf0:	04000120 	.word	0x04000120
 8008cf4:	0800a6a1 	.word	0x0800a6a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	f040 81eb 	bne.w	80090d8 <HAL_UART_IRQHandler+0x6b0>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d06:	f003 0310 	and.w	r3, r3, #16
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f000 81e4 	beq.w	80090d8 <HAL_UART_IRQHandler+0x6b0>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d14:	f003 0310 	and.w	r3, r3, #16
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f000 81dd 	beq.w	80090d8 <HAL_UART_IRQHandler+0x6b0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2210      	movs	r2, #16
 8008d24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d30:	2b40      	cmp	r3, #64	; 0x40
 8008d32:	f040 8153 	bne.w	8008fdc <HAL_UART_IRQHandler+0x5b4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a97      	ldr	r2, [pc, #604]	; (8008f9c <HAL_UART_IRQHandler+0x574>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d068      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3ee>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a94      	ldr	r2, [pc, #592]	; (8008fa0 <HAL_UART_IRQHandler+0x578>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d061      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3ee>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a92      	ldr	r2, [pc, #584]	; (8008fa4 <HAL_UART_IRQHandler+0x57c>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d05a      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3ee>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a8f      	ldr	r2, [pc, #572]	; (8008fa8 <HAL_UART_IRQHandler+0x580>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d053      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3ee>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a8d      	ldr	r2, [pc, #564]	; (8008fac <HAL_UART_IRQHandler+0x584>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d04c      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3ee>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a8a      	ldr	r2, [pc, #552]	; (8008fb0 <HAL_UART_IRQHandler+0x588>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d045      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3ee>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a88      	ldr	r2, [pc, #544]	; (8008fb4 <HAL_UART_IRQHandler+0x58c>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d03e      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3ee>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a85      	ldr	r2, [pc, #532]	; (8008fb8 <HAL_UART_IRQHandler+0x590>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d037      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3ee>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a83      	ldr	r2, [pc, #524]	; (8008fbc <HAL_UART_IRQHandler+0x594>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d030      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3ee>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a80      	ldr	r2, [pc, #512]	; (8008fc0 <HAL_UART_IRQHandler+0x598>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d029      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3ee>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a7e      	ldr	r2, [pc, #504]	; (8008fc4 <HAL_UART_IRQHandler+0x59c>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d022      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3ee>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a7b      	ldr	r2, [pc, #492]	; (8008fc8 <HAL_UART_IRQHandler+0x5a0>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d01b      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3ee>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a79      	ldr	r2, [pc, #484]	; (8008fcc <HAL_UART_IRQHandler+0x5a4>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d014      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3ee>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a76      	ldr	r2, [pc, #472]	; (8008fd0 <HAL_UART_IRQHandler+0x5a8>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d00d      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3ee>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a74      	ldr	r2, [pc, #464]	; (8008fd4 <HAL_UART_IRQHandler+0x5ac>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d006      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3ee>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a71      	ldr	r2, [pc, #452]	; (8008fd8 <HAL_UART_IRQHandler+0x5b0>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d106      	bne.n	8008e24 <HAL_UART_IRQHandler+0x3fc>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	e005      	b.n	8008e30 <HAL_UART_IRQHandler+0x408>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f000 81b5 	beq.w	80091a8 <HAL_UART_IRQHandler+0x780>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	f080 81ad 	bcs.w	80091a8 <HAL_UART_IRQHandler+0x780>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e5e:	69db      	ldr	r3, [r3, #28]
 8008e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e64:	f000 8087 	beq.w	8008f76 <HAL_UART_IRQHandler+0x54e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e74:	e853 3f00 	ldrex	r3, [r3]
 8008e78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008e7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008e96:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008e9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008ea2:	e841 2300 	strex	r3, r2, [r1]
 8008ea6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008eaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1da      	bne.n	8008e68 <HAL_UART_IRQHandler+0x440>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	3308      	adds	r3, #8
 8008eb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ebc:	e853 3f00 	ldrex	r3, [r3]
 8008ec0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ec4:	f023 0301 	bic.w	r3, r3, #1
 8008ec8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	3308      	adds	r3, #8
 8008ed2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008ed6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008eda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008edc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008ede:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ee2:	e841 2300 	strex	r3, r2, [r1]
 8008ee6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d1e1      	bne.n	8008eb2 <HAL_UART_IRQHandler+0x48a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	3308      	adds	r3, #8
 8008ef4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ef8:	e853 3f00 	ldrex	r3, [r3]
 8008efc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008efe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	3308      	adds	r3, #8
 8008f0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008f12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008f14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008f18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008f1a:	e841 2300 	strex	r3, r2, [r1]
 8008f1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008f20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1e3      	bne.n	8008eee <HAL_UART_IRQHandler+0x4c6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2220      	movs	r2, #32
 8008f2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f3c:	e853 3f00 	ldrex	r3, [r3]
 8008f40:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f44:	f023 0310 	bic.w	r3, r3, #16
 8008f48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	461a      	mov	r2, r3
 8008f52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f56:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f58:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008f5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f5e:	e841 2300 	strex	r3, r2, [r1]
 8008f62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1e4      	bne.n	8008f34 <HAL_UART_IRQHandler+0x50c>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7f9 fae1 	bl	8002538 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2202      	movs	r2, #2
 8008f7a:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 8008f8e:	b292      	uxth	r2, r2
 8008f90:	1a8a      	subs	r2, r1, r2
 8008f92:	b292      	uxth	r2, r2
 8008f94:	4611      	mov	r1, r2
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f9a:	e105      	b.n	80091a8 <HAL_UART_IRQHandler+0x780>
 8008f9c:	40020010 	.word	0x40020010
 8008fa0:	40020028 	.word	0x40020028
 8008fa4:	40020040 	.word	0x40020040
 8008fa8:	40020058 	.word	0x40020058
 8008fac:	40020070 	.word	0x40020070
 8008fb0:	40020088 	.word	0x40020088
 8008fb4:	400200a0 	.word	0x400200a0
 8008fb8:	400200b8 	.word	0x400200b8
 8008fbc:	40020410 	.word	0x40020410
 8008fc0:	40020428 	.word	0x40020428
 8008fc4:	40020440 	.word	0x40020440
 8008fc8:	40020458 	.word	0x40020458
 8008fcc:	40020470 	.word	0x40020470
 8008fd0:	40020488 	.word	0x40020488
 8008fd4:	400204a0 	.word	0x400204a0
 8008fd8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f000 80d7 	beq.w	80091ac <HAL_UART_IRQHandler+0x784>
          && (nb_rx_data > 0U))
 8008ffe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009002:	2b00      	cmp	r3, #0
 8009004:	f000 80d2 	beq.w	80091ac <HAL_UART_IRQHandler+0x784>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009010:	e853 3f00 	ldrex	r3, [r3]
 8009014:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009018:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800901c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	461a      	mov	r2, r3
 8009026:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800902a:	647b      	str	r3, [r7, #68]	; 0x44
 800902c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009030:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009032:	e841 2300 	strex	r3, r2, [r1]
 8009036:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800903a:	2b00      	cmp	r3, #0
 800903c:	d1e4      	bne.n	8009008 <HAL_UART_IRQHandler+0x5e0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	3308      	adds	r3, #8
 8009044:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009048:	e853 3f00 	ldrex	r3, [r3]
 800904c:	623b      	str	r3, [r7, #32]
   return(result);
 800904e:	6a3a      	ldr	r2, [r7, #32]
 8009050:	4b59      	ldr	r3, [pc, #356]	; (80091b8 <HAL_UART_IRQHandler+0x790>)
 8009052:	4013      	ands	r3, r2
 8009054:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	3308      	adds	r3, #8
 800905e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009062:	633a      	str	r2, [r7, #48]	; 0x30
 8009064:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009066:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800906a:	e841 2300 	strex	r3, r2, [r1]
 800906e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1e3      	bne.n	800903e <HAL_UART_IRQHandler+0x616>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2220      	movs	r2, #32
 800907a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	e853 3f00 	ldrex	r3, [r3]
 8009096:	60fb      	str	r3, [r7, #12]
   return(result);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f023 0310 	bic.w	r3, r3, #16
 800909e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	461a      	mov	r2, r3
 80090a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80090ac:	61fb      	str	r3, [r7, #28]
 80090ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b0:	69b9      	ldr	r1, [r7, #24]
 80090b2:	69fa      	ldr	r2, [r7, #28]
 80090b4:	e841 2300 	strex	r3, r2, [r1]
 80090b8:	617b      	str	r3, [r7, #20]
   return(result);
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1e4      	bne.n	800908a <HAL_UART_IRQHandler+0x662>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2202      	movs	r2, #2
 80090c4:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80090cc:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 80090d0:	4611      	mov	r1, r2
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090d6:	e069      	b.n	80091ac <HAL_UART_IRQHandler+0x784>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80090d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d010      	beq.n	8009106 <HAL_UART_IRQHandler+0x6de>
 80090e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00a      	beq.n	8009106 <HAL_UART_IRQHandler+0x6de>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80090f8:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009104:	e055      	b.n	80091b2 <HAL_UART_IRQHandler+0x78a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800910a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800910e:	2b00      	cmp	r3, #0
 8009110:	d014      	beq.n	800913c <HAL_UART_IRQHandler+0x714>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800911a:	2b00      	cmp	r3, #0
 800911c:	d105      	bne.n	800912a <HAL_UART_IRQHandler+0x702>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800911e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009122:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009126:	2b00      	cmp	r3, #0
 8009128:	d008      	beq.n	800913c <HAL_UART_IRQHandler+0x714>
  {
    if (huart->TxISR != NULL)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800912e:	2b00      	cmp	r3, #0
 8009130:	d03e      	beq.n	80091b0 <HAL_UART_IRQHandler+0x788>
    {
      huart->TxISR(huart);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	4798      	blx	r3
    }
    return;
 800913a:	e039      	b.n	80091b0 <HAL_UART_IRQHandler+0x788>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800913c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009144:	2b00      	cmp	r3, #0
 8009146:	d009      	beq.n	800915c <HAL_UART_IRQHandler+0x734>
 8009148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800914c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009150:	2b00      	cmp	r3, #0
 8009152:	d003      	beq.n	800915c <HAL_UART_IRQHandler+0x734>
  {
    UART_EndTransmit_IT(huart);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f001 fabb 	bl	800a6d0 <UART_EndTransmit_IT>
    return;
 800915a:	e02a      	b.n	80091b2 <HAL_UART_IRQHandler+0x78a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800915c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009160:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00b      	beq.n	8009180 <HAL_UART_IRQHandler+0x758>
 8009168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800916c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009170:	2b00      	cmp	r3, #0
 8009172:	d005      	beq.n	8009180 <HAL_UART_IRQHandler+0x758>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800917e:	e018      	b.n	80091b2 <HAL_UART_IRQHandler+0x78a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009184:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009188:	2b00      	cmp	r3, #0
 800918a:	d012      	beq.n	80091b2 <HAL_UART_IRQHandler+0x78a>
 800918c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009190:	2b00      	cmp	r3, #0
 8009192:	da0e      	bge.n	80091b2 <HAL_UART_IRQHandler+0x78a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800919e:	e008      	b.n	80091b2 <HAL_UART_IRQHandler+0x78a>
      return;
 80091a0:	bf00      	nop
 80091a2:	e006      	b.n	80091b2 <HAL_UART_IRQHandler+0x78a>
    return;
 80091a4:	bf00      	nop
 80091a6:	e004      	b.n	80091b2 <HAL_UART_IRQHandler+0x78a>
      return;
 80091a8:	bf00      	nop
 80091aa:	e002      	b.n	80091b2 <HAL_UART_IRQHandler+0x78a>
      return;
 80091ac:	bf00      	nop
 80091ae:	e000      	b.n	80091b2 <HAL_UART_IRQHandler+0x78a>
    return;
 80091b0:	bf00      	nop
  }
}
 80091b2:	37e8      	adds	r7, #232	; 0xe8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	effffffe 	.word	0xeffffffe

080091bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80091ec:	bf00      	nop
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009200:	bf00      	nop
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009214:	bf00      	nop
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009228:	bf00      	nop
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800923c:	bf00      	nop
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009250:	bf00      	nop
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	460b      	mov	r3, r1
 8009266:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009268:	bf00      	nop
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a1a      	ldr	r2, [pc, #104]	; (80092e8 <UART_InitCallbacksToDefault+0x74>)
 8009280:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a19      	ldr	r2, [pc, #100]	; (80092ec <UART_InitCallbacksToDefault+0x78>)
 8009288:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a18      	ldr	r2, [pc, #96]	; (80092f0 <UART_InitCallbacksToDefault+0x7c>)
 8009290:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4a17      	ldr	r2, [pc, #92]	; (80092f4 <UART_InitCallbacksToDefault+0x80>)
 8009298:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a16      	ldr	r2, [pc, #88]	; (80092f8 <UART_InitCallbacksToDefault+0x84>)
 80092a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a15      	ldr	r2, [pc, #84]	; (80092fc <UART_InitCallbacksToDefault+0x88>)
 80092a8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a14      	ldr	r2, [pc, #80]	; (8009300 <UART_InitCallbacksToDefault+0x8c>)
 80092b0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a13      	ldr	r2, [pc, #76]	; (8009304 <UART_InitCallbacksToDefault+0x90>)
 80092b8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a12      	ldr	r2, [pc, #72]	; (8009308 <UART_InitCallbacksToDefault+0x94>)
 80092c0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a11      	ldr	r2, [pc, #68]	; (800930c <UART_InitCallbacksToDefault+0x98>)
 80092c8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a10      	ldr	r2, [pc, #64]	; (8009310 <UART_InitCallbacksToDefault+0x9c>)
 80092d0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a0f      	ldr	r2, [pc, #60]	; (8009314 <UART_InitCallbacksToDefault+0xa0>)
 80092d8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

}
 80092dc:	bf00      	nop
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	080091d1 	.word	0x080091d1
 80092ec:	080091bd 	.word	0x080091bd
 80092f0:	080091f9 	.word	0x080091f9
 80092f4:	080091e5 	.word	0x080091e5
 80092f8:	0800920d 	.word	0x0800920d
 80092fc:	08009221 	.word	0x08009221
 8009300:	08009235 	.word	0x08009235
 8009304:	08009249 	.word	0x08009249
 8009308:	0800a72b 	.word	0x0800a72b
 800930c:	0800a73f 	.word	0x0800a73f
 8009310:	0800a753 	.word	0x0800a753
 8009314:	0800925d 	.word	0x0800925d

08009318 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800931c:	b092      	sub	sp, #72	; 0x48
 800931e:	af00      	add	r7, sp, #0
 8009320:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009322:	2300      	movs	r3, #0
 8009324:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	689a      	ldr	r2, [r3, #8]
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	431a      	orrs	r2, r3
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	695b      	ldr	r3, [r3, #20]
 8009336:	431a      	orrs	r2, r3
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	69db      	ldr	r3, [r3, #28]
 800933c:	4313      	orrs	r3, r2
 800933e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	4bbe      	ldr	r3, [pc, #760]	; (8009640 <UART_SetConfig+0x328>)
 8009348:	4013      	ands	r3, r2
 800934a:	697a      	ldr	r2, [r7, #20]
 800934c:	6812      	ldr	r2, [r2, #0]
 800934e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009350:	430b      	orrs	r3, r1
 8009352:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	68da      	ldr	r2, [r3, #12]
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	430a      	orrs	r2, r1
 8009368:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4ab3      	ldr	r2, [pc, #716]	; (8009644 <UART_SetConfig+0x32c>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d004      	beq.n	8009384 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	6a1b      	ldr	r3, [r3, #32]
 800937e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009380:	4313      	orrs	r3, r2
 8009382:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	689a      	ldr	r2, [r3, #8]
 800938a:	4baf      	ldr	r3, [pc, #700]	; (8009648 <UART_SetConfig+0x330>)
 800938c:	4013      	ands	r3, r2
 800938e:	697a      	ldr	r2, [r7, #20]
 8009390:	6812      	ldr	r2, [r2, #0]
 8009392:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009394:	430b      	orrs	r3, r1
 8009396:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939e:	f023 010f 	bic.w	r1, r3, #15
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	430a      	orrs	r2, r1
 80093ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4aa6      	ldr	r2, [pc, #664]	; (800964c <UART_SetConfig+0x334>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d177      	bne.n	80094a8 <UART_SetConfig+0x190>
 80093b8:	4ba5      	ldr	r3, [pc, #660]	; (8009650 <UART_SetConfig+0x338>)
 80093ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093c0:	2b28      	cmp	r3, #40	; 0x28
 80093c2:	d86d      	bhi.n	80094a0 <UART_SetConfig+0x188>
 80093c4:	a201      	add	r2, pc, #4	; (adr r2, 80093cc <UART_SetConfig+0xb4>)
 80093c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ca:	bf00      	nop
 80093cc:	08009471 	.word	0x08009471
 80093d0:	080094a1 	.word	0x080094a1
 80093d4:	080094a1 	.word	0x080094a1
 80093d8:	080094a1 	.word	0x080094a1
 80093dc:	080094a1 	.word	0x080094a1
 80093e0:	080094a1 	.word	0x080094a1
 80093e4:	080094a1 	.word	0x080094a1
 80093e8:	080094a1 	.word	0x080094a1
 80093ec:	08009479 	.word	0x08009479
 80093f0:	080094a1 	.word	0x080094a1
 80093f4:	080094a1 	.word	0x080094a1
 80093f8:	080094a1 	.word	0x080094a1
 80093fc:	080094a1 	.word	0x080094a1
 8009400:	080094a1 	.word	0x080094a1
 8009404:	080094a1 	.word	0x080094a1
 8009408:	080094a1 	.word	0x080094a1
 800940c:	08009481 	.word	0x08009481
 8009410:	080094a1 	.word	0x080094a1
 8009414:	080094a1 	.word	0x080094a1
 8009418:	080094a1 	.word	0x080094a1
 800941c:	080094a1 	.word	0x080094a1
 8009420:	080094a1 	.word	0x080094a1
 8009424:	080094a1 	.word	0x080094a1
 8009428:	080094a1 	.word	0x080094a1
 800942c:	08009489 	.word	0x08009489
 8009430:	080094a1 	.word	0x080094a1
 8009434:	080094a1 	.word	0x080094a1
 8009438:	080094a1 	.word	0x080094a1
 800943c:	080094a1 	.word	0x080094a1
 8009440:	080094a1 	.word	0x080094a1
 8009444:	080094a1 	.word	0x080094a1
 8009448:	080094a1 	.word	0x080094a1
 800944c:	08009491 	.word	0x08009491
 8009450:	080094a1 	.word	0x080094a1
 8009454:	080094a1 	.word	0x080094a1
 8009458:	080094a1 	.word	0x080094a1
 800945c:	080094a1 	.word	0x080094a1
 8009460:	080094a1 	.word	0x080094a1
 8009464:	080094a1 	.word	0x080094a1
 8009468:	080094a1 	.word	0x080094a1
 800946c:	08009499 	.word	0x08009499
 8009470:	2301      	movs	r3, #1
 8009472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009476:	e222      	b.n	80098be <UART_SetConfig+0x5a6>
 8009478:	2304      	movs	r3, #4
 800947a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800947e:	e21e      	b.n	80098be <UART_SetConfig+0x5a6>
 8009480:	2308      	movs	r3, #8
 8009482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009486:	e21a      	b.n	80098be <UART_SetConfig+0x5a6>
 8009488:	2310      	movs	r3, #16
 800948a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800948e:	e216      	b.n	80098be <UART_SetConfig+0x5a6>
 8009490:	2320      	movs	r3, #32
 8009492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009496:	e212      	b.n	80098be <UART_SetConfig+0x5a6>
 8009498:	2340      	movs	r3, #64	; 0x40
 800949a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800949e:	e20e      	b.n	80098be <UART_SetConfig+0x5a6>
 80094a0:	2380      	movs	r3, #128	; 0x80
 80094a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094a6:	e20a      	b.n	80098be <UART_SetConfig+0x5a6>
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a69      	ldr	r2, [pc, #420]	; (8009654 <UART_SetConfig+0x33c>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d130      	bne.n	8009514 <UART_SetConfig+0x1fc>
 80094b2:	4b67      	ldr	r3, [pc, #412]	; (8009650 <UART_SetConfig+0x338>)
 80094b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094b6:	f003 0307 	and.w	r3, r3, #7
 80094ba:	2b05      	cmp	r3, #5
 80094bc:	d826      	bhi.n	800950c <UART_SetConfig+0x1f4>
 80094be:	a201      	add	r2, pc, #4	; (adr r2, 80094c4 <UART_SetConfig+0x1ac>)
 80094c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c4:	080094dd 	.word	0x080094dd
 80094c8:	080094e5 	.word	0x080094e5
 80094cc:	080094ed 	.word	0x080094ed
 80094d0:	080094f5 	.word	0x080094f5
 80094d4:	080094fd 	.word	0x080094fd
 80094d8:	08009505 	.word	0x08009505
 80094dc:	2300      	movs	r3, #0
 80094de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094e2:	e1ec      	b.n	80098be <UART_SetConfig+0x5a6>
 80094e4:	2304      	movs	r3, #4
 80094e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ea:	e1e8      	b.n	80098be <UART_SetConfig+0x5a6>
 80094ec:	2308      	movs	r3, #8
 80094ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094f2:	e1e4      	b.n	80098be <UART_SetConfig+0x5a6>
 80094f4:	2310      	movs	r3, #16
 80094f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094fa:	e1e0      	b.n	80098be <UART_SetConfig+0x5a6>
 80094fc:	2320      	movs	r3, #32
 80094fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009502:	e1dc      	b.n	80098be <UART_SetConfig+0x5a6>
 8009504:	2340      	movs	r3, #64	; 0x40
 8009506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800950a:	e1d8      	b.n	80098be <UART_SetConfig+0x5a6>
 800950c:	2380      	movs	r3, #128	; 0x80
 800950e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009512:	e1d4      	b.n	80098be <UART_SetConfig+0x5a6>
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a4f      	ldr	r2, [pc, #316]	; (8009658 <UART_SetConfig+0x340>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d130      	bne.n	8009580 <UART_SetConfig+0x268>
 800951e:	4b4c      	ldr	r3, [pc, #304]	; (8009650 <UART_SetConfig+0x338>)
 8009520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009522:	f003 0307 	and.w	r3, r3, #7
 8009526:	2b05      	cmp	r3, #5
 8009528:	d826      	bhi.n	8009578 <UART_SetConfig+0x260>
 800952a:	a201      	add	r2, pc, #4	; (adr r2, 8009530 <UART_SetConfig+0x218>)
 800952c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009530:	08009549 	.word	0x08009549
 8009534:	08009551 	.word	0x08009551
 8009538:	08009559 	.word	0x08009559
 800953c:	08009561 	.word	0x08009561
 8009540:	08009569 	.word	0x08009569
 8009544:	08009571 	.word	0x08009571
 8009548:	2300      	movs	r3, #0
 800954a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800954e:	e1b6      	b.n	80098be <UART_SetConfig+0x5a6>
 8009550:	2304      	movs	r3, #4
 8009552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009556:	e1b2      	b.n	80098be <UART_SetConfig+0x5a6>
 8009558:	2308      	movs	r3, #8
 800955a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800955e:	e1ae      	b.n	80098be <UART_SetConfig+0x5a6>
 8009560:	2310      	movs	r3, #16
 8009562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009566:	e1aa      	b.n	80098be <UART_SetConfig+0x5a6>
 8009568:	2320      	movs	r3, #32
 800956a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800956e:	e1a6      	b.n	80098be <UART_SetConfig+0x5a6>
 8009570:	2340      	movs	r3, #64	; 0x40
 8009572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009576:	e1a2      	b.n	80098be <UART_SetConfig+0x5a6>
 8009578:	2380      	movs	r3, #128	; 0x80
 800957a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800957e:	e19e      	b.n	80098be <UART_SetConfig+0x5a6>
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a35      	ldr	r2, [pc, #212]	; (800965c <UART_SetConfig+0x344>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d130      	bne.n	80095ec <UART_SetConfig+0x2d4>
 800958a:	4b31      	ldr	r3, [pc, #196]	; (8009650 <UART_SetConfig+0x338>)
 800958c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800958e:	f003 0307 	and.w	r3, r3, #7
 8009592:	2b05      	cmp	r3, #5
 8009594:	d826      	bhi.n	80095e4 <UART_SetConfig+0x2cc>
 8009596:	a201      	add	r2, pc, #4	; (adr r2, 800959c <UART_SetConfig+0x284>)
 8009598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800959c:	080095b5 	.word	0x080095b5
 80095a0:	080095bd 	.word	0x080095bd
 80095a4:	080095c5 	.word	0x080095c5
 80095a8:	080095cd 	.word	0x080095cd
 80095ac:	080095d5 	.word	0x080095d5
 80095b0:	080095dd 	.word	0x080095dd
 80095b4:	2300      	movs	r3, #0
 80095b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ba:	e180      	b.n	80098be <UART_SetConfig+0x5a6>
 80095bc:	2304      	movs	r3, #4
 80095be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095c2:	e17c      	b.n	80098be <UART_SetConfig+0x5a6>
 80095c4:	2308      	movs	r3, #8
 80095c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ca:	e178      	b.n	80098be <UART_SetConfig+0x5a6>
 80095cc:	2310      	movs	r3, #16
 80095ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095d2:	e174      	b.n	80098be <UART_SetConfig+0x5a6>
 80095d4:	2320      	movs	r3, #32
 80095d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095da:	e170      	b.n	80098be <UART_SetConfig+0x5a6>
 80095dc:	2340      	movs	r3, #64	; 0x40
 80095de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095e2:	e16c      	b.n	80098be <UART_SetConfig+0x5a6>
 80095e4:	2380      	movs	r3, #128	; 0x80
 80095e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ea:	e168      	b.n	80098be <UART_SetConfig+0x5a6>
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a1b      	ldr	r2, [pc, #108]	; (8009660 <UART_SetConfig+0x348>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d142      	bne.n	800967c <UART_SetConfig+0x364>
 80095f6:	4b16      	ldr	r3, [pc, #88]	; (8009650 <UART_SetConfig+0x338>)
 80095f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095fa:	f003 0307 	and.w	r3, r3, #7
 80095fe:	2b05      	cmp	r3, #5
 8009600:	d838      	bhi.n	8009674 <UART_SetConfig+0x35c>
 8009602:	a201      	add	r2, pc, #4	; (adr r2, 8009608 <UART_SetConfig+0x2f0>)
 8009604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009608:	08009621 	.word	0x08009621
 800960c:	08009629 	.word	0x08009629
 8009610:	08009631 	.word	0x08009631
 8009614:	08009639 	.word	0x08009639
 8009618:	08009665 	.word	0x08009665
 800961c:	0800966d 	.word	0x0800966d
 8009620:	2300      	movs	r3, #0
 8009622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009626:	e14a      	b.n	80098be <UART_SetConfig+0x5a6>
 8009628:	2304      	movs	r3, #4
 800962a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800962e:	e146      	b.n	80098be <UART_SetConfig+0x5a6>
 8009630:	2308      	movs	r3, #8
 8009632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009636:	e142      	b.n	80098be <UART_SetConfig+0x5a6>
 8009638:	2310      	movs	r3, #16
 800963a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800963e:	e13e      	b.n	80098be <UART_SetConfig+0x5a6>
 8009640:	cfff69f3 	.word	0xcfff69f3
 8009644:	58000c00 	.word	0x58000c00
 8009648:	11fff4ff 	.word	0x11fff4ff
 800964c:	40011000 	.word	0x40011000
 8009650:	58024400 	.word	0x58024400
 8009654:	40004400 	.word	0x40004400
 8009658:	40004800 	.word	0x40004800
 800965c:	40004c00 	.word	0x40004c00
 8009660:	40005000 	.word	0x40005000
 8009664:	2320      	movs	r3, #32
 8009666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800966a:	e128      	b.n	80098be <UART_SetConfig+0x5a6>
 800966c:	2340      	movs	r3, #64	; 0x40
 800966e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009672:	e124      	b.n	80098be <UART_SetConfig+0x5a6>
 8009674:	2380      	movs	r3, #128	; 0x80
 8009676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800967a:	e120      	b.n	80098be <UART_SetConfig+0x5a6>
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4acb      	ldr	r2, [pc, #812]	; (80099b0 <UART_SetConfig+0x698>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d176      	bne.n	8009774 <UART_SetConfig+0x45c>
 8009686:	4bcb      	ldr	r3, [pc, #812]	; (80099b4 <UART_SetConfig+0x69c>)
 8009688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800968a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800968e:	2b28      	cmp	r3, #40	; 0x28
 8009690:	d86c      	bhi.n	800976c <UART_SetConfig+0x454>
 8009692:	a201      	add	r2, pc, #4	; (adr r2, 8009698 <UART_SetConfig+0x380>)
 8009694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009698:	0800973d 	.word	0x0800973d
 800969c:	0800976d 	.word	0x0800976d
 80096a0:	0800976d 	.word	0x0800976d
 80096a4:	0800976d 	.word	0x0800976d
 80096a8:	0800976d 	.word	0x0800976d
 80096ac:	0800976d 	.word	0x0800976d
 80096b0:	0800976d 	.word	0x0800976d
 80096b4:	0800976d 	.word	0x0800976d
 80096b8:	08009745 	.word	0x08009745
 80096bc:	0800976d 	.word	0x0800976d
 80096c0:	0800976d 	.word	0x0800976d
 80096c4:	0800976d 	.word	0x0800976d
 80096c8:	0800976d 	.word	0x0800976d
 80096cc:	0800976d 	.word	0x0800976d
 80096d0:	0800976d 	.word	0x0800976d
 80096d4:	0800976d 	.word	0x0800976d
 80096d8:	0800974d 	.word	0x0800974d
 80096dc:	0800976d 	.word	0x0800976d
 80096e0:	0800976d 	.word	0x0800976d
 80096e4:	0800976d 	.word	0x0800976d
 80096e8:	0800976d 	.word	0x0800976d
 80096ec:	0800976d 	.word	0x0800976d
 80096f0:	0800976d 	.word	0x0800976d
 80096f4:	0800976d 	.word	0x0800976d
 80096f8:	08009755 	.word	0x08009755
 80096fc:	0800976d 	.word	0x0800976d
 8009700:	0800976d 	.word	0x0800976d
 8009704:	0800976d 	.word	0x0800976d
 8009708:	0800976d 	.word	0x0800976d
 800970c:	0800976d 	.word	0x0800976d
 8009710:	0800976d 	.word	0x0800976d
 8009714:	0800976d 	.word	0x0800976d
 8009718:	0800975d 	.word	0x0800975d
 800971c:	0800976d 	.word	0x0800976d
 8009720:	0800976d 	.word	0x0800976d
 8009724:	0800976d 	.word	0x0800976d
 8009728:	0800976d 	.word	0x0800976d
 800972c:	0800976d 	.word	0x0800976d
 8009730:	0800976d 	.word	0x0800976d
 8009734:	0800976d 	.word	0x0800976d
 8009738:	08009765 	.word	0x08009765
 800973c:	2301      	movs	r3, #1
 800973e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009742:	e0bc      	b.n	80098be <UART_SetConfig+0x5a6>
 8009744:	2304      	movs	r3, #4
 8009746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800974a:	e0b8      	b.n	80098be <UART_SetConfig+0x5a6>
 800974c:	2308      	movs	r3, #8
 800974e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009752:	e0b4      	b.n	80098be <UART_SetConfig+0x5a6>
 8009754:	2310      	movs	r3, #16
 8009756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800975a:	e0b0      	b.n	80098be <UART_SetConfig+0x5a6>
 800975c:	2320      	movs	r3, #32
 800975e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009762:	e0ac      	b.n	80098be <UART_SetConfig+0x5a6>
 8009764:	2340      	movs	r3, #64	; 0x40
 8009766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800976a:	e0a8      	b.n	80098be <UART_SetConfig+0x5a6>
 800976c:	2380      	movs	r3, #128	; 0x80
 800976e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009772:	e0a4      	b.n	80098be <UART_SetConfig+0x5a6>
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a8f      	ldr	r2, [pc, #572]	; (80099b8 <UART_SetConfig+0x6a0>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d130      	bne.n	80097e0 <UART_SetConfig+0x4c8>
 800977e:	4b8d      	ldr	r3, [pc, #564]	; (80099b4 <UART_SetConfig+0x69c>)
 8009780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009782:	f003 0307 	and.w	r3, r3, #7
 8009786:	2b05      	cmp	r3, #5
 8009788:	d826      	bhi.n	80097d8 <UART_SetConfig+0x4c0>
 800978a:	a201      	add	r2, pc, #4	; (adr r2, 8009790 <UART_SetConfig+0x478>)
 800978c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009790:	080097a9 	.word	0x080097a9
 8009794:	080097b1 	.word	0x080097b1
 8009798:	080097b9 	.word	0x080097b9
 800979c:	080097c1 	.word	0x080097c1
 80097a0:	080097c9 	.word	0x080097c9
 80097a4:	080097d1 	.word	0x080097d1
 80097a8:	2300      	movs	r3, #0
 80097aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ae:	e086      	b.n	80098be <UART_SetConfig+0x5a6>
 80097b0:	2304      	movs	r3, #4
 80097b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097b6:	e082      	b.n	80098be <UART_SetConfig+0x5a6>
 80097b8:	2308      	movs	r3, #8
 80097ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097be:	e07e      	b.n	80098be <UART_SetConfig+0x5a6>
 80097c0:	2310      	movs	r3, #16
 80097c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097c6:	e07a      	b.n	80098be <UART_SetConfig+0x5a6>
 80097c8:	2320      	movs	r3, #32
 80097ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ce:	e076      	b.n	80098be <UART_SetConfig+0x5a6>
 80097d0:	2340      	movs	r3, #64	; 0x40
 80097d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097d6:	e072      	b.n	80098be <UART_SetConfig+0x5a6>
 80097d8:	2380      	movs	r3, #128	; 0x80
 80097da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097de:	e06e      	b.n	80098be <UART_SetConfig+0x5a6>
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a75      	ldr	r2, [pc, #468]	; (80099bc <UART_SetConfig+0x6a4>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d130      	bne.n	800984c <UART_SetConfig+0x534>
 80097ea:	4b72      	ldr	r3, [pc, #456]	; (80099b4 <UART_SetConfig+0x69c>)
 80097ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ee:	f003 0307 	and.w	r3, r3, #7
 80097f2:	2b05      	cmp	r3, #5
 80097f4:	d826      	bhi.n	8009844 <UART_SetConfig+0x52c>
 80097f6:	a201      	add	r2, pc, #4	; (adr r2, 80097fc <UART_SetConfig+0x4e4>)
 80097f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097fc:	08009815 	.word	0x08009815
 8009800:	0800981d 	.word	0x0800981d
 8009804:	08009825 	.word	0x08009825
 8009808:	0800982d 	.word	0x0800982d
 800980c:	08009835 	.word	0x08009835
 8009810:	0800983d 	.word	0x0800983d
 8009814:	2300      	movs	r3, #0
 8009816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800981a:	e050      	b.n	80098be <UART_SetConfig+0x5a6>
 800981c:	2304      	movs	r3, #4
 800981e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009822:	e04c      	b.n	80098be <UART_SetConfig+0x5a6>
 8009824:	2308      	movs	r3, #8
 8009826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800982a:	e048      	b.n	80098be <UART_SetConfig+0x5a6>
 800982c:	2310      	movs	r3, #16
 800982e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009832:	e044      	b.n	80098be <UART_SetConfig+0x5a6>
 8009834:	2320      	movs	r3, #32
 8009836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800983a:	e040      	b.n	80098be <UART_SetConfig+0x5a6>
 800983c:	2340      	movs	r3, #64	; 0x40
 800983e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009842:	e03c      	b.n	80098be <UART_SetConfig+0x5a6>
 8009844:	2380      	movs	r3, #128	; 0x80
 8009846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800984a:	e038      	b.n	80098be <UART_SetConfig+0x5a6>
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a5b      	ldr	r2, [pc, #364]	; (80099c0 <UART_SetConfig+0x6a8>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d130      	bne.n	80098b8 <UART_SetConfig+0x5a0>
 8009856:	4b57      	ldr	r3, [pc, #348]	; (80099b4 <UART_SetConfig+0x69c>)
 8009858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800985a:	f003 0307 	and.w	r3, r3, #7
 800985e:	2b05      	cmp	r3, #5
 8009860:	d826      	bhi.n	80098b0 <UART_SetConfig+0x598>
 8009862:	a201      	add	r2, pc, #4	; (adr r2, 8009868 <UART_SetConfig+0x550>)
 8009864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009868:	08009881 	.word	0x08009881
 800986c:	08009889 	.word	0x08009889
 8009870:	08009891 	.word	0x08009891
 8009874:	08009899 	.word	0x08009899
 8009878:	080098a1 	.word	0x080098a1
 800987c:	080098a9 	.word	0x080098a9
 8009880:	2302      	movs	r3, #2
 8009882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009886:	e01a      	b.n	80098be <UART_SetConfig+0x5a6>
 8009888:	2304      	movs	r3, #4
 800988a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800988e:	e016      	b.n	80098be <UART_SetConfig+0x5a6>
 8009890:	2308      	movs	r3, #8
 8009892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009896:	e012      	b.n	80098be <UART_SetConfig+0x5a6>
 8009898:	2310      	movs	r3, #16
 800989a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800989e:	e00e      	b.n	80098be <UART_SetConfig+0x5a6>
 80098a0:	2320      	movs	r3, #32
 80098a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098a6:	e00a      	b.n	80098be <UART_SetConfig+0x5a6>
 80098a8:	2340      	movs	r3, #64	; 0x40
 80098aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098ae:	e006      	b.n	80098be <UART_SetConfig+0x5a6>
 80098b0:	2380      	movs	r3, #128	; 0x80
 80098b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098b6:	e002      	b.n	80098be <UART_SetConfig+0x5a6>
 80098b8:	2380      	movs	r3, #128	; 0x80
 80098ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a3f      	ldr	r2, [pc, #252]	; (80099c0 <UART_SetConfig+0x6a8>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	f040 80f8 	bne.w	8009aba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80098ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80098ce:	2b20      	cmp	r3, #32
 80098d0:	dc46      	bgt.n	8009960 <UART_SetConfig+0x648>
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	f2c0 8082 	blt.w	80099dc <UART_SetConfig+0x6c4>
 80098d8:	3b02      	subs	r3, #2
 80098da:	2b1e      	cmp	r3, #30
 80098dc:	d87e      	bhi.n	80099dc <UART_SetConfig+0x6c4>
 80098de:	a201      	add	r2, pc, #4	; (adr r2, 80098e4 <UART_SetConfig+0x5cc>)
 80098e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e4:	08009967 	.word	0x08009967
 80098e8:	080099dd 	.word	0x080099dd
 80098ec:	0800996f 	.word	0x0800996f
 80098f0:	080099dd 	.word	0x080099dd
 80098f4:	080099dd 	.word	0x080099dd
 80098f8:	080099dd 	.word	0x080099dd
 80098fc:	0800997f 	.word	0x0800997f
 8009900:	080099dd 	.word	0x080099dd
 8009904:	080099dd 	.word	0x080099dd
 8009908:	080099dd 	.word	0x080099dd
 800990c:	080099dd 	.word	0x080099dd
 8009910:	080099dd 	.word	0x080099dd
 8009914:	080099dd 	.word	0x080099dd
 8009918:	080099dd 	.word	0x080099dd
 800991c:	0800998f 	.word	0x0800998f
 8009920:	080099dd 	.word	0x080099dd
 8009924:	080099dd 	.word	0x080099dd
 8009928:	080099dd 	.word	0x080099dd
 800992c:	080099dd 	.word	0x080099dd
 8009930:	080099dd 	.word	0x080099dd
 8009934:	080099dd 	.word	0x080099dd
 8009938:	080099dd 	.word	0x080099dd
 800993c:	080099dd 	.word	0x080099dd
 8009940:	080099dd 	.word	0x080099dd
 8009944:	080099dd 	.word	0x080099dd
 8009948:	080099dd 	.word	0x080099dd
 800994c:	080099dd 	.word	0x080099dd
 8009950:	080099dd 	.word	0x080099dd
 8009954:	080099dd 	.word	0x080099dd
 8009958:	080099dd 	.word	0x080099dd
 800995c:	080099cf 	.word	0x080099cf
 8009960:	2b40      	cmp	r3, #64	; 0x40
 8009962:	d037      	beq.n	80099d4 <UART_SetConfig+0x6bc>
 8009964:	e03a      	b.n	80099dc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009966:	f7fd faad 	bl	8006ec4 <HAL_RCCEx_GetD3PCLK1Freq>
 800996a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800996c:	e03c      	b.n	80099e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800996e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009972:	4618      	mov	r0, r3
 8009974:	f7fd fabc 	bl	8006ef0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800997c:	e034      	b.n	80099e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800997e:	f107 0318 	add.w	r3, r7, #24
 8009982:	4618      	mov	r0, r3
 8009984:	f7fd fc08 	bl	8007198 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800998c:	e02c      	b.n	80099e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800998e:	4b09      	ldr	r3, [pc, #36]	; (80099b4 <UART_SetConfig+0x69c>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f003 0320 	and.w	r3, r3, #32
 8009996:	2b00      	cmp	r3, #0
 8009998:	d016      	beq.n	80099c8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800999a:	4b06      	ldr	r3, [pc, #24]	; (80099b4 <UART_SetConfig+0x69c>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	08db      	lsrs	r3, r3, #3
 80099a0:	f003 0303 	and.w	r3, r3, #3
 80099a4:	4a07      	ldr	r2, [pc, #28]	; (80099c4 <UART_SetConfig+0x6ac>)
 80099a6:	fa22 f303 	lsr.w	r3, r2, r3
 80099aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80099ac:	e01c      	b.n	80099e8 <UART_SetConfig+0x6d0>
 80099ae:	bf00      	nop
 80099b0:	40011400 	.word	0x40011400
 80099b4:	58024400 	.word	0x58024400
 80099b8:	40007800 	.word	0x40007800
 80099bc:	40007c00 	.word	0x40007c00
 80099c0:	58000c00 	.word	0x58000c00
 80099c4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80099c8:	4b9d      	ldr	r3, [pc, #628]	; (8009c40 <UART_SetConfig+0x928>)
 80099ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099cc:	e00c      	b.n	80099e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80099ce:	4b9d      	ldr	r3, [pc, #628]	; (8009c44 <UART_SetConfig+0x92c>)
 80099d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099d2:	e009      	b.n	80099e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099da:	e005      	b.n	80099e8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80099dc:	2300      	movs	r3, #0
 80099de:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80099e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80099e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	f000 81de 	beq.w	8009dac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f4:	4a94      	ldr	r2, [pc, #592]	; (8009c48 <UART_SetConfig+0x930>)
 80099f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099fa:	461a      	mov	r2, r3
 80099fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a02:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	685a      	ldr	r2, [r3, #4]
 8009a08:	4613      	mov	r3, r2
 8009a0a:	005b      	lsls	r3, r3, #1
 8009a0c:	4413      	add	r3, r2
 8009a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d305      	bcc.n	8009a20 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d903      	bls.n	8009a28 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009a26:	e1c1      	b.n	8009dac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	60bb      	str	r3, [r7, #8]
 8009a2e:	60fa      	str	r2, [r7, #12]
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a34:	4a84      	ldr	r2, [pc, #528]	; (8009c48 <UART_SetConfig+0x930>)
 8009a36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	603b      	str	r3, [r7, #0]
 8009a40:	607a      	str	r2, [r7, #4]
 8009a42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009a4a:	f7f6 fca1 	bl	8000390 <__aeabi_uldivmod>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	460b      	mov	r3, r1
 8009a52:	4610      	mov	r0, r2
 8009a54:	4619      	mov	r1, r3
 8009a56:	f04f 0200 	mov.w	r2, #0
 8009a5a:	f04f 0300 	mov.w	r3, #0
 8009a5e:	020b      	lsls	r3, r1, #8
 8009a60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009a64:	0202      	lsls	r2, r0, #8
 8009a66:	6979      	ldr	r1, [r7, #20]
 8009a68:	6849      	ldr	r1, [r1, #4]
 8009a6a:	0849      	lsrs	r1, r1, #1
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	460c      	mov	r4, r1
 8009a70:	4605      	mov	r5, r0
 8009a72:	eb12 0804 	adds.w	r8, r2, r4
 8009a76:	eb43 0905 	adc.w	r9, r3, r5
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	469a      	mov	sl, r3
 8009a82:	4693      	mov	fp, r2
 8009a84:	4652      	mov	r2, sl
 8009a86:	465b      	mov	r3, fp
 8009a88:	4640      	mov	r0, r8
 8009a8a:	4649      	mov	r1, r9
 8009a8c:	f7f6 fc80 	bl	8000390 <__aeabi_uldivmod>
 8009a90:	4602      	mov	r2, r0
 8009a92:	460b      	mov	r3, r1
 8009a94:	4613      	mov	r3, r2
 8009a96:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a9e:	d308      	bcc.n	8009ab2 <UART_SetConfig+0x79a>
 8009aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009aa6:	d204      	bcs.n	8009ab2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009aae:	60da      	str	r2, [r3, #12]
 8009ab0:	e17c      	b.n	8009dac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009ab8:	e178      	b.n	8009dac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	69db      	ldr	r3, [r3, #28]
 8009abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ac2:	f040 80c5 	bne.w	8009c50 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009ac6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009aca:	2b20      	cmp	r3, #32
 8009acc:	dc48      	bgt.n	8009b60 <UART_SetConfig+0x848>
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	db7b      	blt.n	8009bca <UART_SetConfig+0x8b2>
 8009ad2:	2b20      	cmp	r3, #32
 8009ad4:	d879      	bhi.n	8009bca <UART_SetConfig+0x8b2>
 8009ad6:	a201      	add	r2, pc, #4	; (adr r2, 8009adc <UART_SetConfig+0x7c4>)
 8009ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009adc:	08009b67 	.word	0x08009b67
 8009ae0:	08009b6f 	.word	0x08009b6f
 8009ae4:	08009bcb 	.word	0x08009bcb
 8009ae8:	08009bcb 	.word	0x08009bcb
 8009aec:	08009b77 	.word	0x08009b77
 8009af0:	08009bcb 	.word	0x08009bcb
 8009af4:	08009bcb 	.word	0x08009bcb
 8009af8:	08009bcb 	.word	0x08009bcb
 8009afc:	08009b87 	.word	0x08009b87
 8009b00:	08009bcb 	.word	0x08009bcb
 8009b04:	08009bcb 	.word	0x08009bcb
 8009b08:	08009bcb 	.word	0x08009bcb
 8009b0c:	08009bcb 	.word	0x08009bcb
 8009b10:	08009bcb 	.word	0x08009bcb
 8009b14:	08009bcb 	.word	0x08009bcb
 8009b18:	08009bcb 	.word	0x08009bcb
 8009b1c:	08009b97 	.word	0x08009b97
 8009b20:	08009bcb 	.word	0x08009bcb
 8009b24:	08009bcb 	.word	0x08009bcb
 8009b28:	08009bcb 	.word	0x08009bcb
 8009b2c:	08009bcb 	.word	0x08009bcb
 8009b30:	08009bcb 	.word	0x08009bcb
 8009b34:	08009bcb 	.word	0x08009bcb
 8009b38:	08009bcb 	.word	0x08009bcb
 8009b3c:	08009bcb 	.word	0x08009bcb
 8009b40:	08009bcb 	.word	0x08009bcb
 8009b44:	08009bcb 	.word	0x08009bcb
 8009b48:	08009bcb 	.word	0x08009bcb
 8009b4c:	08009bcb 	.word	0x08009bcb
 8009b50:	08009bcb 	.word	0x08009bcb
 8009b54:	08009bcb 	.word	0x08009bcb
 8009b58:	08009bcb 	.word	0x08009bcb
 8009b5c:	08009bbd 	.word	0x08009bbd
 8009b60:	2b40      	cmp	r3, #64	; 0x40
 8009b62:	d02e      	beq.n	8009bc2 <UART_SetConfig+0x8aa>
 8009b64:	e031      	b.n	8009bca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b66:	f7fb ff35 	bl	80059d4 <HAL_RCC_GetPCLK1Freq>
 8009b6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009b6c:	e033      	b.n	8009bd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b6e:	f7fb ff47 	bl	8005a00 <HAL_RCC_GetPCLK2Freq>
 8009b72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009b74:	e02f      	b.n	8009bd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7fd f9b8 	bl	8006ef0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b84:	e027      	b.n	8009bd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b86:	f107 0318 	add.w	r3, r7, #24
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7fd fb04 	bl	8007198 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b94:	e01f      	b.n	8009bd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b96:	4b2d      	ldr	r3, [pc, #180]	; (8009c4c <UART_SetConfig+0x934>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f003 0320 	and.w	r3, r3, #32
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d009      	beq.n	8009bb6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ba2:	4b2a      	ldr	r3, [pc, #168]	; (8009c4c <UART_SetConfig+0x934>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	08db      	lsrs	r3, r3, #3
 8009ba8:	f003 0303 	and.w	r3, r3, #3
 8009bac:	4a24      	ldr	r2, [pc, #144]	; (8009c40 <UART_SetConfig+0x928>)
 8009bae:	fa22 f303 	lsr.w	r3, r2, r3
 8009bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009bb4:	e00f      	b.n	8009bd6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009bb6:	4b22      	ldr	r3, [pc, #136]	; (8009c40 <UART_SetConfig+0x928>)
 8009bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bba:	e00c      	b.n	8009bd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009bbc:	4b21      	ldr	r3, [pc, #132]	; (8009c44 <UART_SetConfig+0x92c>)
 8009bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bc0:	e009      	b.n	8009bd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bc8:	e005      	b.n	8009bd6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009bd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	f000 80e7 	beq.w	8009dac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be2:	4a19      	ldr	r2, [pc, #100]	; (8009c48 <UART_SetConfig+0x930>)
 8009be4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009be8:	461a      	mov	r2, r3
 8009bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bec:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bf0:	005a      	lsls	r2, r3, #1
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	085b      	lsrs	r3, r3, #1
 8009bf8:	441a      	add	r2, r3
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c02:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c06:	2b0f      	cmp	r3, #15
 8009c08:	d916      	bls.n	8009c38 <UART_SetConfig+0x920>
 8009c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c10:	d212      	bcs.n	8009c38 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	f023 030f 	bic.w	r3, r3, #15
 8009c1a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c1e:	085b      	lsrs	r3, r3, #1
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	f003 0307 	and.w	r3, r3, #7
 8009c26:	b29a      	uxth	r2, r3
 8009c28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009c34:	60da      	str	r2, [r3, #12]
 8009c36:	e0b9      	b.n	8009dac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009c3e:	e0b5      	b.n	8009dac <UART_SetConfig+0xa94>
 8009c40:	03d09000 	.word	0x03d09000
 8009c44:	003d0900 	.word	0x003d0900
 8009c48:	080133c4 	.word	0x080133c4
 8009c4c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c50:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009c54:	2b20      	cmp	r3, #32
 8009c56:	dc49      	bgt.n	8009cec <UART_SetConfig+0x9d4>
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	db7c      	blt.n	8009d56 <UART_SetConfig+0xa3e>
 8009c5c:	2b20      	cmp	r3, #32
 8009c5e:	d87a      	bhi.n	8009d56 <UART_SetConfig+0xa3e>
 8009c60:	a201      	add	r2, pc, #4	; (adr r2, 8009c68 <UART_SetConfig+0x950>)
 8009c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c66:	bf00      	nop
 8009c68:	08009cf3 	.word	0x08009cf3
 8009c6c:	08009cfb 	.word	0x08009cfb
 8009c70:	08009d57 	.word	0x08009d57
 8009c74:	08009d57 	.word	0x08009d57
 8009c78:	08009d03 	.word	0x08009d03
 8009c7c:	08009d57 	.word	0x08009d57
 8009c80:	08009d57 	.word	0x08009d57
 8009c84:	08009d57 	.word	0x08009d57
 8009c88:	08009d13 	.word	0x08009d13
 8009c8c:	08009d57 	.word	0x08009d57
 8009c90:	08009d57 	.word	0x08009d57
 8009c94:	08009d57 	.word	0x08009d57
 8009c98:	08009d57 	.word	0x08009d57
 8009c9c:	08009d57 	.word	0x08009d57
 8009ca0:	08009d57 	.word	0x08009d57
 8009ca4:	08009d57 	.word	0x08009d57
 8009ca8:	08009d23 	.word	0x08009d23
 8009cac:	08009d57 	.word	0x08009d57
 8009cb0:	08009d57 	.word	0x08009d57
 8009cb4:	08009d57 	.word	0x08009d57
 8009cb8:	08009d57 	.word	0x08009d57
 8009cbc:	08009d57 	.word	0x08009d57
 8009cc0:	08009d57 	.word	0x08009d57
 8009cc4:	08009d57 	.word	0x08009d57
 8009cc8:	08009d57 	.word	0x08009d57
 8009ccc:	08009d57 	.word	0x08009d57
 8009cd0:	08009d57 	.word	0x08009d57
 8009cd4:	08009d57 	.word	0x08009d57
 8009cd8:	08009d57 	.word	0x08009d57
 8009cdc:	08009d57 	.word	0x08009d57
 8009ce0:	08009d57 	.word	0x08009d57
 8009ce4:	08009d57 	.word	0x08009d57
 8009ce8:	08009d49 	.word	0x08009d49
 8009cec:	2b40      	cmp	r3, #64	; 0x40
 8009cee:	d02e      	beq.n	8009d4e <UART_SetConfig+0xa36>
 8009cf0:	e031      	b.n	8009d56 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cf2:	f7fb fe6f 	bl	80059d4 <HAL_RCC_GetPCLK1Freq>
 8009cf6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009cf8:	e033      	b.n	8009d62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cfa:	f7fb fe81 	bl	8005a00 <HAL_RCC_GetPCLK2Freq>
 8009cfe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009d00:	e02f      	b.n	8009d62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7fd f8f2 	bl	8006ef0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d10:	e027      	b.n	8009d62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d12:	f107 0318 	add.w	r3, r7, #24
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7fd fa3e 	bl	8007198 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d20:	e01f      	b.n	8009d62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d22:	4b2d      	ldr	r3, [pc, #180]	; (8009dd8 <UART_SetConfig+0xac0>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f003 0320 	and.w	r3, r3, #32
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d009      	beq.n	8009d42 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d2e:	4b2a      	ldr	r3, [pc, #168]	; (8009dd8 <UART_SetConfig+0xac0>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	08db      	lsrs	r3, r3, #3
 8009d34:	f003 0303 	and.w	r3, r3, #3
 8009d38:	4a28      	ldr	r2, [pc, #160]	; (8009ddc <UART_SetConfig+0xac4>)
 8009d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d40:	e00f      	b.n	8009d62 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009d42:	4b26      	ldr	r3, [pc, #152]	; (8009ddc <UART_SetConfig+0xac4>)
 8009d44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d46:	e00c      	b.n	8009d62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d48:	4b25      	ldr	r3, [pc, #148]	; (8009de0 <UART_SetConfig+0xac8>)
 8009d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d4c:	e009      	b.n	8009d62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d54:	e005      	b.n	8009d62 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009d56:	2300      	movs	r3, #0
 8009d58:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009d60:	bf00      	nop
    }

    if (pclk != 0U)
 8009d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d021      	beq.n	8009dac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6c:	4a1d      	ldr	r2, [pc, #116]	; (8009de4 <UART_SetConfig+0xacc>)
 8009d6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d72:	461a      	mov	r2, r3
 8009d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d76:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	085b      	lsrs	r3, r3, #1
 8009d80:	441a      	add	r2, r3
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d8a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8e:	2b0f      	cmp	r3, #15
 8009d90:	d909      	bls.n	8009da6 <UART_SetConfig+0xa8e>
 8009d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d98:	d205      	bcs.n	8009da6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d9c:	b29a      	uxth	r2, r3
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	60da      	str	r2, [r3, #12]
 8009da4:	e002      	b.n	8009dac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	2201      	movs	r2, #1
 8009db0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	2201      	movs	r2, #1
 8009db8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009dc8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3748      	adds	r7, #72	; 0x48
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009dd6:	bf00      	nop
 8009dd8:	58024400 	.word	0x58024400
 8009ddc:	03d09000 	.word	0x03d09000
 8009de0:	003d0900 	.word	0x003d0900
 8009de4:	080133c4 	.word	0x080133c4

08009de8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009df4:	f003 0301 	and.w	r3, r3, #1
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00a      	beq.n	8009e12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	430a      	orrs	r2, r1
 8009e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e16:	f003 0302 	and.w	r3, r3, #2
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00a      	beq.n	8009e34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	430a      	orrs	r2, r1
 8009e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e38:	f003 0304 	and.w	r3, r3, #4
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d00a      	beq.n	8009e56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	430a      	orrs	r2, r1
 8009e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e5a:	f003 0308 	and.w	r3, r3, #8
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00a      	beq.n	8009e78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	430a      	orrs	r2, r1
 8009e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e7c:	f003 0310 	and.w	r3, r3, #16
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00a      	beq.n	8009e9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	430a      	orrs	r2, r1
 8009e98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e9e:	f003 0320 	and.w	r3, r3, #32
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00a      	beq.n	8009ebc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	430a      	orrs	r2, r1
 8009eba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d01a      	beq.n	8009efe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	430a      	orrs	r2, r1
 8009edc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ee2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ee6:	d10a      	bne.n	8009efe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	430a      	orrs	r2, r1
 8009efc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00a      	beq.n	8009f20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	430a      	orrs	r2, r1
 8009f1e:	605a      	str	r2, [r3, #4]
  }
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b098      	sub	sp, #96	; 0x60
 8009f30:	af02      	add	r7, sp, #8
 8009f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f3c:	f7f7 fc1a 	bl	8001774 <HAL_GetTick>
 8009f40:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f003 0308 	and.w	r3, r3, #8
 8009f4c:	2b08      	cmp	r3, #8
 8009f4e:	d12f      	bne.n	8009fb0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f54:	9300      	str	r3, [sp, #0]
 8009f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 f88e 	bl	800a080 <UART_WaitOnFlagUntilTimeout>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d022      	beq.n	8009fb0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f72:	e853 3f00 	ldrex	r3, [r3]
 8009f76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f7e:	653b      	str	r3, [r7, #80]	; 0x50
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	461a      	mov	r2, r3
 8009f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f88:	647b      	str	r3, [r7, #68]	; 0x44
 8009f8a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f90:	e841 2300 	strex	r3, r2, [r1]
 8009f94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1e6      	bne.n	8009f6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2220      	movs	r2, #32
 8009fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fac:	2303      	movs	r3, #3
 8009fae:	e063      	b.n	800a078 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f003 0304 	and.w	r3, r3, #4
 8009fba:	2b04      	cmp	r3, #4
 8009fbc:	d149      	bne.n	800a052 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fbe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009fc2:	9300      	str	r3, [sp, #0]
 8009fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 f857 	bl	800a080 <UART_WaitOnFlagUntilTimeout>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d03c      	beq.n	800a052 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe0:	e853 3f00 	ldrex	r3, [r3]
 8009fe4:	623b      	str	r3, [r7, #32]
   return(result);
 8009fe6:	6a3b      	ldr	r3, [r7, #32]
 8009fe8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ff6:	633b      	str	r3, [r7, #48]	; 0x30
 8009ff8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ffe:	e841 2300 	strex	r3, r2, [r1]
 800a002:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a006:	2b00      	cmp	r3, #0
 800a008:	d1e6      	bne.n	8009fd8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	3308      	adds	r3, #8
 800a010:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	e853 3f00 	ldrex	r3, [r3]
 800a018:	60fb      	str	r3, [r7, #12]
   return(result);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f023 0301 	bic.w	r3, r3, #1
 800a020:	64bb      	str	r3, [r7, #72]	; 0x48
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3308      	adds	r3, #8
 800a028:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a02a:	61fa      	str	r2, [r7, #28]
 800a02c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02e:	69b9      	ldr	r1, [r7, #24]
 800a030:	69fa      	ldr	r2, [r7, #28]
 800a032:	e841 2300 	strex	r3, r2, [r1]
 800a036:	617b      	str	r3, [r7, #20]
   return(result);
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d1e5      	bne.n	800a00a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2220      	movs	r2, #32
 800a042:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a04e:	2303      	movs	r3, #3
 800a050:	e012      	b.n	800a078 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2220      	movs	r2, #32
 800a056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2220      	movs	r2, #32
 800a05e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2200      	movs	r2, #0
 800a072:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3758      	adds	r7, #88	; 0x58
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	603b      	str	r3, [r7, #0]
 800a08c:	4613      	mov	r3, r2
 800a08e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a090:	e049      	b.n	800a126 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a098:	d045      	beq.n	800a126 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a09a:	f7f7 fb6b 	bl	8001774 <HAL_GetTick>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	1ad3      	subs	r3, r2, r3
 800a0a4:	69ba      	ldr	r2, [r7, #24]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d302      	bcc.n	800a0b0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d101      	bne.n	800a0b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	e048      	b.n	800a146 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f003 0304 	and.w	r3, r3, #4
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d031      	beq.n	800a126 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	69db      	ldr	r3, [r3, #28]
 800a0c8:	f003 0308 	and.w	r3, r3, #8
 800a0cc:	2b08      	cmp	r3, #8
 800a0ce:	d110      	bne.n	800a0f2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2208      	movs	r2, #8
 800a0d6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f000 f921 	bl	800a320 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2208      	movs	r2, #8
 800a0e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e029      	b.n	800a146 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	69db      	ldr	r3, [r3, #28]
 800a0f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a0fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a100:	d111      	bne.n	800a126 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a10a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f000 f907 	bl	800a320 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2220      	movs	r2, #32
 800a116:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a122:	2303      	movs	r3, #3
 800a124:	e00f      	b.n	800a146 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	69da      	ldr	r2, [r3, #28]
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	4013      	ands	r3, r2
 800a130:	68ba      	ldr	r2, [r7, #8]
 800a132:	429a      	cmp	r2, r3
 800a134:	bf0c      	ite	eq
 800a136:	2301      	moveq	r3, #1
 800a138:	2300      	movne	r3, #0
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	461a      	mov	r2, r3
 800a13e:	79fb      	ldrb	r3, [r7, #7]
 800a140:	429a      	cmp	r2, r3
 800a142:	d0a6      	beq.n	800a092 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
	...

0800a150 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b096      	sub	sp, #88	; 0x58
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	4613      	mov	r3, r2
 800a15c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	68ba      	ldr	r2, [r7, #8]
 800a162:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	88fa      	ldrh	r2, [r7, #6]
 800a168:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2200      	movs	r2, #0
 800a170:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2222      	movs	r2, #34	; 0x22
 800a178:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a182:	2b00      	cmp	r3, #0
 800a184:	d02d      	beq.n	800a1e2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a18c:	4a40      	ldr	r2, [pc, #256]	; (800a290 <UART_Start_Receive_DMA+0x140>)
 800a18e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a196:	4a3f      	ldr	r2, [pc, #252]	; (800a294 <UART_Start_Receive_DMA+0x144>)
 800a198:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1a0:	4a3d      	ldr	r2, [pc, #244]	; (800a298 <UART_Start_Receive_DMA+0x148>)
 800a1a2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	3324      	adds	r3, #36	; 0x24
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	88fb      	ldrh	r3, [r7, #6]
 800a1c4:	f7f7 ff4e 	bl	8002064 <HAL_DMA_Start_IT>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d009      	beq.n	800a1e2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2210      	movs	r2, #16
 800a1d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2220      	movs	r2, #32
 800a1da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e051      	b.n	800a286 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	691b      	ldr	r3, [r3, #16]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d018      	beq.n	800a21c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1f2:	e853 3f00 	ldrex	r3, [r3]
 800a1f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1fe:	657b      	str	r3, [r7, #84]	; 0x54
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	461a      	mov	r2, r3
 800a206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a208:	64bb      	str	r3, [r7, #72]	; 0x48
 800a20a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a20e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a210:	e841 2300 	strex	r3, r2, [r1]
 800a214:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1e6      	bne.n	800a1ea <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	3308      	adds	r3, #8
 800a222:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a226:	e853 3f00 	ldrex	r3, [r3]
 800a22a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22e:	f043 0301 	orr.w	r3, r3, #1
 800a232:	653b      	str	r3, [r7, #80]	; 0x50
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	3308      	adds	r3, #8
 800a23a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a23c:	637a      	str	r2, [r7, #52]	; 0x34
 800a23e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a240:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a242:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a244:	e841 2300 	strex	r3, r2, [r1]
 800a248:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d1e5      	bne.n	800a21c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	3308      	adds	r3, #8
 800a256:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	e853 3f00 	ldrex	r3, [r3]
 800a25e:	613b      	str	r3, [r7, #16]
   return(result);
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a266:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	3308      	adds	r3, #8
 800a26e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a270:	623a      	str	r2, [r7, #32]
 800a272:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a274:	69f9      	ldr	r1, [r7, #28]
 800a276:	6a3a      	ldr	r2, [r7, #32]
 800a278:	e841 2300 	strex	r3, r2, [r1]
 800a27c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d1e5      	bne.n	800a250 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a284:	2300      	movs	r3, #0
}
 800a286:	4618      	mov	r0, r3
 800a288:	3758      	adds	r7, #88	; 0x58
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	0800a4a7 	.word	0x0800a4a7
 800a294:	0800a5d7 	.word	0x0800a5d7
 800a298:	0800a61d 	.word	0x0800a61d

0800a29c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b08f      	sub	sp, #60	; 0x3c
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2aa:	6a3b      	ldr	r3, [r7, #32]
 800a2ac:	e853 3f00 	ldrex	r3, [r3]
 800a2b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a2b8:	637b      	str	r3, [r7, #52]	; 0x34
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2c4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2ca:	e841 2300 	strex	r3, r2, [r1]
 800a2ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d1e6      	bne.n	800a2a4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	3308      	adds	r3, #8
 800a2dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	e853 3f00 	ldrex	r3, [r3]
 800a2e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a2ec:	633b      	str	r3, [r7, #48]	; 0x30
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	3308      	adds	r3, #8
 800a2f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2f6:	61ba      	str	r2, [r7, #24]
 800a2f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fa:	6979      	ldr	r1, [r7, #20]
 800a2fc:	69ba      	ldr	r2, [r7, #24]
 800a2fe:	e841 2300 	strex	r3, r2, [r1]
 800a302:	613b      	str	r3, [r7, #16]
   return(result);
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1e5      	bne.n	800a2d6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2220      	movs	r2, #32
 800a30e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800a312:	bf00      	nop
 800a314:	373c      	adds	r7, #60	; 0x3c
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
	...

0800a320 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a320:	b480      	push	{r7}
 800a322:	b095      	sub	sp, #84	; 0x54
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a330:	e853 3f00 	ldrex	r3, [r3]
 800a334:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a338:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a33c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	461a      	mov	r2, r3
 800a344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a346:	643b      	str	r3, [r7, #64]	; 0x40
 800a348:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a34c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a34e:	e841 2300 	strex	r3, r2, [r1]
 800a352:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a356:	2b00      	cmp	r3, #0
 800a358:	d1e6      	bne.n	800a328 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	3308      	adds	r3, #8
 800a360:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a362:	6a3b      	ldr	r3, [r7, #32]
 800a364:	e853 3f00 	ldrex	r3, [r3]
 800a368:	61fb      	str	r3, [r7, #28]
   return(result);
 800a36a:	69fa      	ldr	r2, [r7, #28]
 800a36c:	4b1e      	ldr	r3, [pc, #120]	; (800a3e8 <UART_EndRxTransfer+0xc8>)
 800a36e:	4013      	ands	r3, r2
 800a370:	64bb      	str	r3, [r7, #72]	; 0x48
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	3308      	adds	r3, #8
 800a378:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a37a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a37c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a382:	e841 2300 	strex	r3, r2, [r1]
 800a386:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d1e5      	bne.n	800a35a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a392:	2b01      	cmp	r3, #1
 800a394:	d118      	bne.n	800a3c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	e853 3f00 	ldrex	r3, [r3]
 800a3a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	f023 0310 	bic.w	r3, r3, #16
 800a3aa:	647b      	str	r3, [r7, #68]	; 0x44
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3b4:	61bb      	str	r3, [r7, #24]
 800a3b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b8:	6979      	ldr	r1, [r7, #20]
 800a3ba:	69ba      	ldr	r2, [r7, #24]
 800a3bc:	e841 2300 	strex	r3, r2, [r1]
 800a3c0:	613b      	str	r3, [r7, #16]
   return(result);
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d1e6      	bne.n	800a396 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2220      	movs	r2, #32
 800a3cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a3dc:	bf00      	nop
 800a3de:	3754      	adds	r7, #84	; 0x54
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr
 800a3e8:	effffffe 	.word	0xeffffffe

0800a3ec <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b090      	sub	sp, #64	; 0x40
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	69db      	ldr	r3, [r3, #28]
 800a3fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a402:	d037      	beq.n	800a474 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800a404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a406:	2200      	movs	r2, #0
 800a408:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	3308      	adds	r3, #8
 800a412:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a416:	e853 3f00 	ldrex	r3, [r3]
 800a41a:	623b      	str	r3, [r7, #32]
   return(result);
 800a41c:	6a3b      	ldr	r3, [r7, #32]
 800a41e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a422:	63bb      	str	r3, [r7, #56]	; 0x38
 800a424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	3308      	adds	r3, #8
 800a42a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a42c:	633a      	str	r2, [r7, #48]	; 0x30
 800a42e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a430:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a434:	e841 2300 	strex	r3, r2, [r1]
 800a438:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d1e5      	bne.n	800a40c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	e853 3f00 	ldrex	r3, [r3]
 800a44c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a454:	637b      	str	r3, [r7, #52]	; 0x34
 800a456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	461a      	mov	r2, r3
 800a45c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a45e:	61fb      	str	r3, [r7, #28]
 800a460:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a462:	69b9      	ldr	r1, [r7, #24]
 800a464:	69fa      	ldr	r2, [r7, #28]
 800a466:	e841 2300 	strex	r3, r2, [r1]
 800a46a:	617b      	str	r3, [r7, #20]
   return(result);
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d1e6      	bne.n	800a440 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a472:	e004      	b.n	800a47e <UART_DMATransmitCplt+0x92>
    huart->TxCpltCallback(huart);
 800a474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a476:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a47a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a47c:	4798      	blx	r3
}
 800a47e:	bf00      	nop
 800a480:	3740      	adds	r7, #64	; 0x40
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b084      	sub	sp, #16
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a492:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a49a:	68f8      	ldr	r0, [r7, #12]
 800a49c:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a49e:	bf00      	nop
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b09c      	sub	sp, #112	; 0x70
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	69db      	ldr	r3, [r3, #28]
 800a4b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4bc:	d071      	beq.n	800a5a2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a4be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4ce:	e853 3f00 	ldrex	r3, [r3]
 800a4d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a4d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4da:	66bb      	str	r3, [r7, #104]	; 0x68
 800a4dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a4e4:	65bb      	str	r3, [r7, #88]	; 0x58
 800a4e6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a4ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a4ec:	e841 2300 	strex	r3, r2, [r1]
 800a4f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a4f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d1e6      	bne.n	800a4c6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	3308      	adds	r3, #8
 800a4fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a502:	e853 3f00 	ldrex	r3, [r3]
 800a506:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a50a:	f023 0301 	bic.w	r3, r3, #1
 800a50e:	667b      	str	r3, [r7, #100]	; 0x64
 800a510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	3308      	adds	r3, #8
 800a516:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a518:	647a      	str	r2, [r7, #68]	; 0x44
 800a51a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a51e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a520:	e841 2300 	strex	r3, r2, [r1]
 800a524:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1e5      	bne.n	800a4f8 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a52c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	3308      	adds	r3, #8
 800a532:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a536:	e853 3f00 	ldrex	r3, [r3]
 800a53a:	623b      	str	r3, [r7, #32]
   return(result);
 800a53c:	6a3b      	ldr	r3, [r7, #32]
 800a53e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a542:	663b      	str	r3, [r7, #96]	; 0x60
 800a544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	3308      	adds	r3, #8
 800a54a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a54c:	633a      	str	r2, [r7, #48]	; 0x30
 800a54e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a550:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a554:	e841 2300 	strex	r3, r2, [r1]
 800a558:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d1e5      	bne.n	800a52c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a562:	2220      	movs	r2, #32
 800a564:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a56a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d118      	bne.n	800a5a2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	e853 3f00 	ldrex	r3, [r3]
 800a57c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f023 0310 	bic.w	r3, r3, #16
 800a584:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	461a      	mov	r2, r3
 800a58c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a58e:	61fb      	str	r3, [r7, #28]
 800a590:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a592:	69b9      	ldr	r1, [r7, #24]
 800a594:	69fa      	ldr	r2, [r7, #28]
 800a596:	e841 2300 	strex	r3, r2, [r1]
 800a59a:	617b      	str	r3, [r7, #20]
   return(result);
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1e6      	bne.n	800a570 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d109      	bne.n	800a5c4 <UART_DMAReceiveCplt+0x11e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800a5b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a5b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a5b8:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800a5bc:	4611      	mov	r1, r2
 800a5be:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a5c0:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a5c2:	e004      	b.n	800a5ce <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800a5c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a5ca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a5cc:	4798      	blx	r3
}
 800a5ce:	bf00      	nop
 800a5d0:	3770      	adds	r7, #112	; 0x70
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}

0800a5d6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a5d6:	b580      	push	{r7, lr}
 800a5d8:	b084      	sub	sp, #16
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d10b      	bne.n	800a60a <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800a5fe:	0852      	lsrs	r2, r2, #1
 800a600:	b292      	uxth	r2, r2
 800a602:	4611      	mov	r1, r2
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a608:	e004      	b.n	800a614 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a610:	68f8      	ldr	r0, [r7, #12]
 800a612:	4798      	blx	r3
}
 800a614:	bf00      	nop
 800a616:	3710      	adds	r7, #16
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b086      	sub	sp, #24
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a628:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a630:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a638:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a644:	2b80      	cmp	r3, #128	; 0x80
 800a646:	d109      	bne.n	800a65c <UART_DMAError+0x40>
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	2b21      	cmp	r3, #33	; 0x21
 800a64c:	d106      	bne.n	800a65c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	2200      	movs	r2, #0
 800a652:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a656:	6978      	ldr	r0, [r7, #20]
 800a658:	f7ff fe20 	bl	800a29c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a666:	2b40      	cmp	r3, #64	; 0x40
 800a668:	d109      	bne.n	800a67e <UART_DMAError+0x62>
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2b22      	cmp	r3, #34	; 0x22
 800a66e:	d106      	bne.n	800a67e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	2200      	movs	r2, #0
 800a674:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a678:	6978      	ldr	r0, [r7, #20]
 800a67a:	f7ff fe51 	bl	800a320 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a684:	f043 0210 	orr.w	r2, r3, #16
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a694:	6978      	ldr	r0, [r7, #20]
 800a696:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a698:	bf00      	nop
 800a69a:	3718      	adds	r7, #24
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a6c4:	68f8      	ldr	r0, [r7, #12]
 800a6c6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6c8:	bf00      	nop
 800a6ca:	3710      	adds	r7, #16
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b088      	sub	sp, #32
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	e853 3f00 	ldrex	r3, [r3]
 800a6e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6ec:	61fb      	str	r3, [r7, #28]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	61bb      	str	r3, [r7, #24]
 800a6f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6fa:	6979      	ldr	r1, [r7, #20]
 800a6fc:	69ba      	ldr	r2, [r7, #24]
 800a6fe:	e841 2300 	strex	r3, r2, [r1]
 800a702:	613b      	str	r3, [r7, #16]
   return(result);
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d1e6      	bne.n	800a6d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2220      	movs	r2, #32
 800a70e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	679a      	str	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a722:	bf00      	nop
 800a724:	3720      	adds	r7, #32
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a72a:	b480      	push	{r7}
 800a72c:	b083      	sub	sp, #12
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a732:	bf00      	nop
 800a734:	370c      	adds	r7, #12
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr

0800a73e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a73e:	b480      	push	{r7}
 800a740:	b083      	sub	sp, #12
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a746:	bf00      	nop
 800a748:	370c      	adds	r7, #12
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr

0800a752 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a752:	b480      	push	{r7}
 800a754:	b083      	sub	sp, #12
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a75a:	bf00      	nop
 800a75c:	370c      	adds	r7, #12
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr

0800a766 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a766:	b480      	push	{r7}
 800a768:	b085      	sub	sp, #20
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a774:	2b01      	cmp	r3, #1
 800a776:	d101      	bne.n	800a77c <HAL_UARTEx_DisableFifoMode+0x16>
 800a778:	2302      	movs	r3, #2
 800a77a:	e027      	b.n	800a7cc <HAL_UARTEx_DisableFifoMode+0x66>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2201      	movs	r2, #1
 800a780:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2224      	movs	r2, #36	; 0x24
 800a788:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f022 0201 	bic.w	r2, r2, #1
 800a7a2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a7aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2220      	movs	r2, #32
 800a7be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a7ca:	2300      	movs	r3, #0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3714      	adds	r7, #20
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d101      	bne.n	800a7f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a7ec:	2302      	movs	r3, #2
 800a7ee:	e02d      	b.n	800a84c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2224      	movs	r2, #36	; 0x24
 800a7fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f022 0201 	bic.w	r2, r2, #1
 800a816:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	689b      	ldr	r3, [r3, #8]
 800a81e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	683a      	ldr	r2, [r7, #0]
 800a828:	430a      	orrs	r2, r1
 800a82a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 f8a3 	bl	800a978 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2220      	movs	r2, #32
 800a83e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a84a:	2300      	movs	r3, #0
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a864:	2b01      	cmp	r3, #1
 800a866:	d101      	bne.n	800a86c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a868:	2302      	movs	r3, #2
 800a86a:	e02d      	b.n	800a8c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2224      	movs	r2, #36	; 0x24
 800a878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f022 0201 	bic.w	r2, r2, #1
 800a892:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	689b      	ldr	r3, [r3, #8]
 800a89a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	683a      	ldr	r2, [r7, #0]
 800a8a4:	430a      	orrs	r2, r1
 800a8a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 f865 	bl	800a978 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2220      	movs	r2, #32
 800a8ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a8c6:	2300      	movs	r3, #0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3710      	adds	r7, #16
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b08c      	sub	sp, #48	; 0x30
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	60b9      	str	r1, [r7, #8]
 800a8da:	4613      	mov	r3, r2
 800a8dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8e4:	2b20      	cmp	r3, #32
 800a8e6:	d142      	bne.n	800a96e <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d002      	beq.n	800a8f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800a8ee:	88fb      	ldrh	r3, [r7, #6]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d101      	bne.n	800a8f8 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e03b      	b.n	800a970 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2200      	movs	r2, #0
 800a902:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a904:	88fb      	ldrh	r3, [r7, #6]
 800a906:	461a      	mov	r2, r3
 800a908:	68b9      	ldr	r1, [r7, #8]
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f7ff fc20 	bl	800a150 <UART_Start_Receive_DMA>
 800a910:	4603      	mov	r3, r0
 800a912:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a916:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d124      	bne.n	800a968 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a922:	2b01      	cmp	r3, #1
 800a924:	d11d      	bne.n	800a962 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2210      	movs	r2, #16
 800a92c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	e853 3f00 	ldrex	r3, [r3]
 800a93a:	617b      	str	r3, [r7, #20]
   return(result);
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	f043 0310 	orr.w	r3, r3, #16
 800a942:	62bb      	str	r3, [r7, #40]	; 0x28
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	461a      	mov	r2, r3
 800a94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94c:	627b      	str	r3, [r7, #36]	; 0x24
 800a94e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a950:	6a39      	ldr	r1, [r7, #32]
 800a952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a954:	e841 2300 	strex	r3, r2, [r1]
 800a958:	61fb      	str	r3, [r7, #28]
   return(result);
 800a95a:	69fb      	ldr	r3, [r7, #28]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d1e6      	bne.n	800a92e <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800a960:	e002      	b.n	800a968 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a962:	2301      	movs	r3, #1
 800a964:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800a968:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a96c:	e000      	b.n	800a970 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a96e:	2302      	movs	r3, #2
  }
}
 800a970:	4618      	mov	r0, r3
 800a972:	3730      	adds	r7, #48	; 0x30
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a978:	b480      	push	{r7}
 800a97a:	b085      	sub	sp, #20
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a984:	2b00      	cmp	r3, #0
 800a986:	d108      	bne.n	800a99a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2201      	movs	r2, #1
 800a98c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2201      	movs	r2, #1
 800a994:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a998:	e031      	b.n	800a9fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a99a:	2310      	movs	r3, #16
 800a99c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a99e:	2310      	movs	r3, #16
 800a9a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	0e5b      	lsrs	r3, r3, #25
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	f003 0307 	and.w	r3, r3, #7
 800a9b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	0f5b      	lsrs	r3, r3, #29
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	f003 0307 	and.w	r3, r3, #7
 800a9c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9c2:	7bbb      	ldrb	r3, [r7, #14]
 800a9c4:	7b3a      	ldrb	r2, [r7, #12]
 800a9c6:	4911      	ldr	r1, [pc, #68]	; (800aa0c <UARTEx_SetNbDataToProcess+0x94>)
 800a9c8:	5c8a      	ldrb	r2, [r1, r2]
 800a9ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a9ce:	7b3a      	ldrb	r2, [r7, #12]
 800a9d0:	490f      	ldr	r1, [pc, #60]	; (800aa10 <UARTEx_SetNbDataToProcess+0x98>)
 800a9d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9d8:	b29a      	uxth	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9e0:	7bfb      	ldrb	r3, [r7, #15]
 800a9e2:	7b7a      	ldrb	r2, [r7, #13]
 800a9e4:	4909      	ldr	r1, [pc, #36]	; (800aa0c <UARTEx_SetNbDataToProcess+0x94>)
 800a9e6:	5c8a      	ldrb	r2, [r1, r2]
 800a9e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a9ec:	7b7a      	ldrb	r2, [r7, #13]
 800a9ee:	4908      	ldr	r1, [pc, #32]	; (800aa10 <UARTEx_SetNbDataToProcess+0x98>)
 800a9f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9f6:	b29a      	uxth	r2, r3
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a9fe:	bf00      	nop
 800aa00:	3714      	adds	r7, #20
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop
 800aa0c:	080133dc 	.word	0x080133dc
 800aa10:	080133e4 	.word	0x080133e4

0800aa14 <__NVIC_SetPriority>:
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	6039      	str	r1, [r7, #0]
 800aa1e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800aa20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	db0a      	blt.n	800aa3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	490c      	ldr	r1, [pc, #48]	; (800aa60 <__NVIC_SetPriority+0x4c>)
 800aa2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa32:	0112      	lsls	r2, r2, #4
 800aa34:	b2d2      	uxtb	r2, r2
 800aa36:	440b      	add	r3, r1
 800aa38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800aa3c:	e00a      	b.n	800aa54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	b2da      	uxtb	r2, r3
 800aa42:	4908      	ldr	r1, [pc, #32]	; (800aa64 <__NVIC_SetPriority+0x50>)
 800aa44:	88fb      	ldrh	r3, [r7, #6]
 800aa46:	f003 030f 	and.w	r3, r3, #15
 800aa4a:	3b04      	subs	r3, #4
 800aa4c:	0112      	lsls	r2, r2, #4
 800aa4e:	b2d2      	uxtb	r2, r2
 800aa50:	440b      	add	r3, r1
 800aa52:	761a      	strb	r2, [r3, #24]
}
 800aa54:	bf00      	nop
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr
 800aa60:	e000e100 	.word	0xe000e100
 800aa64:	e000ed00 	.word	0xe000ed00

0800aa68 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800aa6c:	4b05      	ldr	r3, [pc, #20]	; (800aa84 <SysTick_Handler+0x1c>)
 800aa6e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800aa70:	f001 fe9e 	bl	800c7b0 <xTaskGetSchedulerState>
 800aa74:	4603      	mov	r3, r0
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d001      	beq.n	800aa7e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800aa7a:	f002 fe25 	bl	800d6c8 <xPortSysTickHandler>
  }
}
 800aa7e:	bf00      	nop
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	e000e010 	.word	0xe000e010

0800aa88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	f06f 0004 	mvn.w	r0, #4
 800aa92:	f7ff ffbf 	bl	800aa14 <__NVIC_SetPriority>
#endif
}
 800aa96:	bf00      	nop
 800aa98:	bd80      	pop	{r7, pc}
	...

0800aa9c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aaa2:	f3ef 8305 	mrs	r3, IPSR
 800aaa6:	603b      	str	r3, [r7, #0]
  return(result);
 800aaa8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d003      	beq.n	800aab6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800aaae:	f06f 0305 	mvn.w	r3, #5
 800aab2:	607b      	str	r3, [r7, #4]
 800aab4:	e00c      	b.n	800aad0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800aab6:	4b0a      	ldr	r3, [pc, #40]	; (800aae0 <osKernelInitialize+0x44>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d105      	bne.n	800aaca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800aabe:	4b08      	ldr	r3, [pc, #32]	; (800aae0 <osKernelInitialize+0x44>)
 800aac0:	2201      	movs	r2, #1
 800aac2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800aac4:	2300      	movs	r3, #0
 800aac6:	607b      	str	r3, [r7, #4]
 800aac8:	e002      	b.n	800aad0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800aaca:	f04f 33ff 	mov.w	r3, #4294967295
 800aace:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aad0:	687b      	ldr	r3, [r7, #4]
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	370c      	adds	r7, #12
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr
 800aade:	bf00      	nop
 800aae0:	2400082c 	.word	0x2400082c

0800aae4 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800aaea:	f001 fe61 	bl	800c7b0 <xTaskGetSchedulerState>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d004      	beq.n	800aafe <osKernelGetState+0x1a>
 800aaf4:	2b02      	cmp	r3, #2
 800aaf6:	d105      	bne.n	800ab04 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800aaf8:	2302      	movs	r3, #2
 800aafa:	607b      	str	r3, [r7, #4]
      break;
 800aafc:	e00c      	b.n	800ab18 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800aafe:	2303      	movs	r3, #3
 800ab00:	607b      	str	r3, [r7, #4]
      break;
 800ab02:	e009      	b.n	800ab18 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800ab04:	4b07      	ldr	r3, [pc, #28]	; (800ab24 <osKernelGetState+0x40>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d102      	bne.n	800ab12 <osKernelGetState+0x2e>
        state = osKernelReady;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800ab10:	e001      	b.n	800ab16 <osKernelGetState+0x32>
        state = osKernelInactive;
 800ab12:	2300      	movs	r3, #0
 800ab14:	607b      	str	r3, [r7, #4]
      break;
 800ab16:	bf00      	nop
  }

  return (state);
 800ab18:	687b      	ldr	r3, [r7, #4]
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3708      	adds	r7, #8
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	bf00      	nop
 800ab24:	2400082c 	.word	0x2400082c

0800ab28 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab2e:	f3ef 8305 	mrs	r3, IPSR
 800ab32:	603b      	str	r3, [r7, #0]
  return(result);
 800ab34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d003      	beq.n	800ab42 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ab3a:	f06f 0305 	mvn.w	r3, #5
 800ab3e:	607b      	str	r3, [r7, #4]
 800ab40:	e010      	b.n	800ab64 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ab42:	4b0b      	ldr	r3, [pc, #44]	; (800ab70 <osKernelStart+0x48>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	d109      	bne.n	800ab5e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ab4a:	f7ff ff9d 	bl	800aa88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ab4e:	4b08      	ldr	r3, [pc, #32]	; (800ab70 <osKernelStart+0x48>)
 800ab50:	2202      	movs	r2, #2
 800ab52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ab54:	f001 f9ae 	bl	800beb4 <vTaskStartScheduler>
      stat = osOK;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	607b      	str	r3, [r7, #4]
 800ab5c:	e002      	b.n	800ab64 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ab5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ab64:	687b      	ldr	r3, [r7, #4]
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3708      	adds	r7, #8
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	2400082c 	.word	0x2400082c

0800ab74 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b082      	sub	sp, #8
 800ab78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab7a:	f3ef 8305 	mrs	r3, IPSR
 800ab7e:	603b      	str	r3, [r7, #0]
  return(result);
 800ab80:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d003      	beq.n	800ab8e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800ab86:	f001 fac1 	bl	800c10c <xTaskGetTickCountFromISR>
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	e002      	b.n	800ab94 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800ab8e:	f001 faad 	bl	800c0ec <xTaskGetTickCount>
 800ab92:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800ab94:	687b      	ldr	r3, [r7, #4]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3708      	adds	r7, #8
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}

0800ab9e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b08e      	sub	sp, #56	; 0x38
 800aba2:	af04      	add	r7, sp, #16
 800aba4:	60f8      	str	r0, [r7, #12]
 800aba6:	60b9      	str	r1, [r7, #8]
 800aba8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800abaa:	2300      	movs	r3, #0
 800abac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abae:	f3ef 8305 	mrs	r3, IPSR
 800abb2:	617b      	str	r3, [r7, #20]
  return(result);
 800abb4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d17e      	bne.n	800acb8 <osThreadNew+0x11a>
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d07b      	beq.n	800acb8 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800abc0:	2380      	movs	r3, #128	; 0x80
 800abc2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800abc4:	2318      	movs	r3, #24
 800abc6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800abc8:	2300      	movs	r3, #0
 800abca:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800abcc:	f04f 33ff 	mov.w	r3, #4294967295
 800abd0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d045      	beq.n	800ac64 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d002      	beq.n	800abe6 <osThreadNew+0x48>
        name = attr->name;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	699b      	ldr	r3, [r3, #24]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d002      	beq.n	800abf4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	699b      	ldr	r3, [r3, #24]
 800abf2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d008      	beq.n	800ac0c <osThreadNew+0x6e>
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	2b38      	cmp	r3, #56	; 0x38
 800abfe:	d805      	bhi.n	800ac0c <osThreadNew+0x6e>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	f003 0301 	and.w	r3, r3, #1
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d001      	beq.n	800ac10 <osThreadNew+0x72>
        return (NULL);
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	e054      	b.n	800acba <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	695b      	ldr	r3, [r3, #20]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d003      	beq.n	800ac20 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	695b      	ldr	r3, [r3, #20]
 800ac1c:	089b      	lsrs	r3, r3, #2
 800ac1e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d00e      	beq.n	800ac46 <osThreadNew+0xa8>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	2bbb      	cmp	r3, #187	; 0xbb
 800ac2e:	d90a      	bls.n	800ac46 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d006      	beq.n	800ac46 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	695b      	ldr	r3, [r3, #20]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d002      	beq.n	800ac46 <osThreadNew+0xa8>
        mem = 1;
 800ac40:	2301      	movs	r3, #1
 800ac42:	61bb      	str	r3, [r7, #24]
 800ac44:	e010      	b.n	800ac68 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d10c      	bne.n	800ac68 <osThreadNew+0xca>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	68db      	ldr	r3, [r3, #12]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d108      	bne.n	800ac68 <osThreadNew+0xca>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	691b      	ldr	r3, [r3, #16]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d104      	bne.n	800ac68 <osThreadNew+0xca>
          mem = 0;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	61bb      	str	r3, [r7, #24]
 800ac62:	e001      	b.n	800ac68 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ac64:	2300      	movs	r3, #0
 800ac66:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d110      	bne.n	800ac90 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ac76:	9202      	str	r2, [sp, #8]
 800ac78:	9301      	str	r3, [sp, #4]
 800ac7a:	69fb      	ldr	r3, [r7, #28]
 800ac7c:	9300      	str	r3, [sp, #0]
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	6a3a      	ldr	r2, [r7, #32]
 800ac82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ac84:	68f8      	ldr	r0, [r7, #12]
 800ac86:	f000 fe39 	bl	800b8fc <xTaskCreateStatic>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	613b      	str	r3, [r7, #16]
 800ac8e:	e013      	b.n	800acb8 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d110      	bne.n	800acb8 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ac96:	6a3b      	ldr	r3, [r7, #32]
 800ac98:	b29a      	uxth	r2, r3
 800ac9a:	f107 0310 	add.w	r3, r7, #16
 800ac9e:	9301      	str	r3, [sp, #4]
 800aca0:	69fb      	ldr	r3, [r7, #28]
 800aca2:	9300      	str	r3, [sp, #0]
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	f000 fe84 	bl	800b9b6 <xTaskCreate>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d001      	beq.n	800acb8 <osThreadNew+0x11a>
            hTask = NULL;
 800acb4:	2300      	movs	r3, #0
 800acb6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800acb8:	693b      	ldr	r3, [r7, #16]
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3728      	adds	r7, #40	; 0x28
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}

0800acc2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b084      	sub	sp, #16
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acca:	f3ef 8305 	mrs	r3, IPSR
 800acce:	60bb      	str	r3, [r7, #8]
  return(result);
 800acd0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d003      	beq.n	800acde <osDelay+0x1c>
    stat = osErrorISR;
 800acd6:	f06f 0305 	mvn.w	r3, #5
 800acda:	60fb      	str	r3, [r7, #12]
 800acdc:	e007      	b.n	800acee <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800acde:	2300      	movs	r3, #0
 800ace0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d002      	beq.n	800acee <osDelay+0x2c>
      vTaskDelay(ticks);
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f001 f8af 	bl	800be4c <vTaskDelay>
    }
  }

  return (stat);
 800acee:	68fb      	ldr	r3, [r7, #12]
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3710      	adds	r7, #16
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b086      	sub	sp, #24
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad00:	f3ef 8305 	mrs	r3, IPSR
 800ad04:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad06:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d003      	beq.n	800ad14 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800ad0c:	f06f 0305 	mvn.w	r3, #5
 800ad10:	617b      	str	r3, [r7, #20]
 800ad12:	e019      	b.n	800ad48 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800ad14:	2300      	movs	r3, #0
 800ad16:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800ad18:	f001 f9e8 	bl	800c0ec <xTaskGetTickCount>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	1ad3      	subs	r3, r2, r3
 800ad26:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d009      	beq.n	800ad42 <osDelayUntil+0x4a>
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	db06      	blt.n	800ad42 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800ad34:	f107 0308 	add.w	r3, r7, #8
 800ad38:	6939      	ldr	r1, [r7, #16]
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f001 f808 	bl	800bd50 <vTaskDelayUntil>
 800ad40:	e002      	b.n	800ad48 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800ad42:	f06f 0303 	mvn.w	r3, #3
 800ad46:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ad48:	697b      	ldr	r3, [r7, #20]
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3718      	adds	r7, #24
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
	...

0800ad54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ad54:	b480      	push	{r7}
 800ad56:	b085      	sub	sp, #20
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	4a07      	ldr	r2, [pc, #28]	; (800ad80 <vApplicationGetIdleTaskMemory+0x2c>)
 800ad64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	4a06      	ldr	r2, [pc, #24]	; (800ad84 <vApplicationGetIdleTaskMemory+0x30>)
 800ad6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2280      	movs	r2, #128	; 0x80
 800ad70:	601a      	str	r2, [r3, #0]
}
 800ad72:	bf00      	nop
 800ad74:	3714      	adds	r7, #20
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr
 800ad7e:	bf00      	nop
 800ad80:	24000830 	.word	0x24000830
 800ad84:	240008ec 	.word	0x240008ec

0800ad88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ad88:	b480      	push	{r7}
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	60b9      	str	r1, [r7, #8]
 800ad92:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	4a07      	ldr	r2, [pc, #28]	; (800adb4 <vApplicationGetTimerTaskMemory+0x2c>)
 800ad98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	4a06      	ldr	r2, [pc, #24]	; (800adb8 <vApplicationGetTimerTaskMemory+0x30>)
 800ad9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ada6:	601a      	str	r2, [r3, #0]
}
 800ada8:	bf00      	nop
 800adaa:	3714      	adds	r7, #20
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr
 800adb4:	24000aec 	.word	0x24000aec
 800adb8:	24000ba8 	.word	0x24000ba8

0800adbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800adbc:	b480      	push	{r7}
 800adbe:	b083      	sub	sp, #12
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f103 0208 	add.w	r2, r3, #8
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f04f 32ff 	mov.w	r2, #4294967295
 800add4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f103 0208 	add.w	r2, r3, #8
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f103 0208 	add.w	r2, r3, #8
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800adf0:	bf00      	nop
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800adfc:	b480      	push	{r7}
 800adfe:	b083      	sub	sp, #12
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ae0a:	bf00      	nop
 800ae0c:	370c      	adds	r7, #12
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr

0800ae16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ae16:	b480      	push	{r7}
 800ae18:	b085      	sub	sp, #20
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
 800ae1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	689a      	ldr	r2, [r3, #8]
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	683a      	ldr	r2, [r7, #0]
 800ae3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	683a      	ldr	r2, [r7, #0]
 800ae40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	1c5a      	adds	r2, r3, #1
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	601a      	str	r2, [r3, #0]
}
 800ae52:	bf00      	nop
 800ae54:	3714      	adds	r7, #20
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr

0800ae5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ae5e:	b480      	push	{r7}
 800ae60:	b085      	sub	sp, #20
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
 800ae66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae74:	d103      	bne.n	800ae7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	691b      	ldr	r3, [r3, #16]
 800ae7a:	60fb      	str	r3, [r7, #12]
 800ae7c:	e00c      	b.n	800ae98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	3308      	adds	r3, #8
 800ae82:	60fb      	str	r3, [r7, #12]
 800ae84:	e002      	b.n	800ae8c <vListInsert+0x2e>
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	60fb      	str	r3, [r7, #12]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	68ba      	ldr	r2, [r7, #8]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d2f6      	bcs.n	800ae86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	685a      	ldr	r2, [r3, #4]
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	683a      	ldr	r2, [r7, #0]
 800aea6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	68fa      	ldr	r2, [r7, #12]
 800aeac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	683a      	ldr	r2, [r7, #0]
 800aeb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	1c5a      	adds	r2, r3, #1
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	601a      	str	r2, [r3, #0]
}
 800aec4:	bf00      	nop
 800aec6:	3714      	adds	r7, #20
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aed0:	b480      	push	{r7}
 800aed2:	b085      	sub	sp, #20
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	691b      	ldr	r3, [r3, #16]
 800aedc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	6892      	ldr	r2, [r2, #8]
 800aee6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	6852      	ldr	r2, [r2, #4]
 800aef0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d103      	bne.n	800af04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	689a      	ldr	r2, [r3, #8]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	1e5a      	subs	r2, r3, #1
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3714      	adds	r7, #20
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr

0800af24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d10a      	bne.n	800af4e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800af38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af3c:	f383 8811 	msr	BASEPRI, r3
 800af40:	f3bf 8f6f 	isb	sy
 800af44:	f3bf 8f4f 	dsb	sy
 800af48:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800af4a:	bf00      	nop
 800af4c:	e7fe      	b.n	800af4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800af4e:	f002 fb29 	bl	800d5a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af5a:	68f9      	ldr	r1, [r7, #12]
 800af5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800af5e:	fb01 f303 	mul.w	r3, r1, r3
 800af62:	441a      	add	r2, r3
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2200      	movs	r2, #0
 800af6c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af7e:	3b01      	subs	r3, #1
 800af80:	68f9      	ldr	r1, [r7, #12]
 800af82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800af84:	fb01 f303 	mul.w	r3, r1, r3
 800af88:	441a      	add	r2, r3
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	22ff      	movs	r2, #255	; 0xff
 800af92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	22ff      	movs	r2, #255	; 0xff
 800af9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d114      	bne.n	800afce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	691b      	ldr	r3, [r3, #16]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d01a      	beq.n	800afe2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	3310      	adds	r3, #16
 800afb0:	4618      	mov	r0, r3
 800afb2:	f001 fa2b 	bl	800c40c <xTaskRemoveFromEventList>
 800afb6:	4603      	mov	r3, r0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d012      	beq.n	800afe2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800afbc:	4b0c      	ldr	r3, [pc, #48]	; (800aff0 <xQueueGenericReset+0xcc>)
 800afbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afc2:	601a      	str	r2, [r3, #0]
 800afc4:	f3bf 8f4f 	dsb	sy
 800afc8:	f3bf 8f6f 	isb	sy
 800afcc:	e009      	b.n	800afe2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	3310      	adds	r3, #16
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7ff fef2 	bl	800adbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	3324      	adds	r3, #36	; 0x24
 800afdc:	4618      	mov	r0, r3
 800afde:	f7ff feed 	bl	800adbc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800afe2:	f002 fb0f 	bl	800d604 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800afe6:	2301      	movs	r3, #1
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3710      	adds	r7, #16
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	e000ed04 	.word	0xe000ed04

0800aff4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b08e      	sub	sp, #56	; 0x38
 800aff8:	af02      	add	r7, sp, #8
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	607a      	str	r2, [r7, #4]
 800b000:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d10a      	bne.n	800b01e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b00c:	f383 8811 	msr	BASEPRI, r3
 800b010:	f3bf 8f6f 	isb	sy
 800b014:	f3bf 8f4f 	dsb	sy
 800b018:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b01a:	bf00      	nop
 800b01c:	e7fe      	b.n	800b01c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d10a      	bne.n	800b03a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b028:	f383 8811 	msr	BASEPRI, r3
 800b02c:	f3bf 8f6f 	isb	sy
 800b030:	f3bf 8f4f 	dsb	sy
 800b034:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b036:	bf00      	nop
 800b038:	e7fe      	b.n	800b038 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d002      	beq.n	800b046 <xQueueGenericCreateStatic+0x52>
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d001      	beq.n	800b04a <xQueueGenericCreateStatic+0x56>
 800b046:	2301      	movs	r3, #1
 800b048:	e000      	b.n	800b04c <xQueueGenericCreateStatic+0x58>
 800b04a:	2300      	movs	r3, #0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d10a      	bne.n	800b066 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b054:	f383 8811 	msr	BASEPRI, r3
 800b058:	f3bf 8f6f 	isb	sy
 800b05c:	f3bf 8f4f 	dsb	sy
 800b060:	623b      	str	r3, [r7, #32]
}
 800b062:	bf00      	nop
 800b064:	e7fe      	b.n	800b064 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d102      	bne.n	800b072 <xQueueGenericCreateStatic+0x7e>
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d101      	bne.n	800b076 <xQueueGenericCreateStatic+0x82>
 800b072:	2301      	movs	r3, #1
 800b074:	e000      	b.n	800b078 <xQueueGenericCreateStatic+0x84>
 800b076:	2300      	movs	r3, #0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d10a      	bne.n	800b092 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b080:	f383 8811 	msr	BASEPRI, r3
 800b084:	f3bf 8f6f 	isb	sy
 800b088:	f3bf 8f4f 	dsb	sy
 800b08c:	61fb      	str	r3, [r7, #28]
}
 800b08e:	bf00      	nop
 800b090:	e7fe      	b.n	800b090 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b092:	2350      	movs	r3, #80	; 0x50
 800b094:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	2b50      	cmp	r3, #80	; 0x50
 800b09a:	d00a      	beq.n	800b0b2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a0:	f383 8811 	msr	BASEPRI, r3
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	f3bf 8f4f 	dsb	sy
 800b0ac:	61bb      	str	r3, [r7, #24]
}
 800b0ae:	bf00      	nop
 800b0b0:	e7fe      	b.n	800b0b0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b0b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d00d      	beq.n	800b0da <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b0c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0cc:	9300      	str	r3, [sp, #0]
 800b0ce:	4613      	mov	r3, r2
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	68b9      	ldr	r1, [r7, #8]
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f000 f805 	bl	800b0e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3730      	adds	r7, #48	; 0x30
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	607a      	str	r2, [r7, #4]
 800b0f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d103      	bne.n	800b100 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	69ba      	ldr	r2, [r7, #24]
 800b0fc:	601a      	str	r2, [r3, #0]
 800b0fe:	e002      	b.n	800b106 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b100:	69bb      	ldr	r3, [r7, #24]
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b106:	69bb      	ldr	r3, [r7, #24]
 800b108:	68fa      	ldr	r2, [r7, #12]
 800b10a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	68ba      	ldr	r2, [r7, #8]
 800b110:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b112:	2101      	movs	r1, #1
 800b114:	69b8      	ldr	r0, [r7, #24]
 800b116:	f7ff ff05 	bl	800af24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b11a:	69bb      	ldr	r3, [r7, #24]
 800b11c:	78fa      	ldrb	r2, [r7, #3]
 800b11e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b122:	bf00      	nop
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
	...

0800b12c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b08e      	sub	sp, #56	; 0x38
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	607a      	str	r2, [r7, #4]
 800b138:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b13a:	2300      	movs	r3, #0
 800b13c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b144:	2b00      	cmp	r3, #0
 800b146:	d10a      	bne.n	800b15e <xQueueGenericSend+0x32>
	__asm volatile
 800b148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b14c:	f383 8811 	msr	BASEPRI, r3
 800b150:	f3bf 8f6f 	isb	sy
 800b154:	f3bf 8f4f 	dsb	sy
 800b158:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b15a:	bf00      	nop
 800b15c:	e7fe      	b.n	800b15c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d103      	bne.n	800b16c <xQueueGenericSend+0x40>
 800b164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d101      	bne.n	800b170 <xQueueGenericSend+0x44>
 800b16c:	2301      	movs	r3, #1
 800b16e:	e000      	b.n	800b172 <xQueueGenericSend+0x46>
 800b170:	2300      	movs	r3, #0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d10a      	bne.n	800b18c <xQueueGenericSend+0x60>
	__asm volatile
 800b176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17a:	f383 8811 	msr	BASEPRI, r3
 800b17e:	f3bf 8f6f 	isb	sy
 800b182:	f3bf 8f4f 	dsb	sy
 800b186:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b188:	bf00      	nop
 800b18a:	e7fe      	b.n	800b18a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	2b02      	cmp	r3, #2
 800b190:	d103      	bne.n	800b19a <xQueueGenericSend+0x6e>
 800b192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b196:	2b01      	cmp	r3, #1
 800b198:	d101      	bne.n	800b19e <xQueueGenericSend+0x72>
 800b19a:	2301      	movs	r3, #1
 800b19c:	e000      	b.n	800b1a0 <xQueueGenericSend+0x74>
 800b19e:	2300      	movs	r3, #0
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d10a      	bne.n	800b1ba <xQueueGenericSend+0x8e>
	__asm volatile
 800b1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a8:	f383 8811 	msr	BASEPRI, r3
 800b1ac:	f3bf 8f6f 	isb	sy
 800b1b0:	f3bf 8f4f 	dsb	sy
 800b1b4:	623b      	str	r3, [r7, #32]
}
 800b1b6:	bf00      	nop
 800b1b8:	e7fe      	b.n	800b1b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b1ba:	f001 faf9 	bl	800c7b0 <xTaskGetSchedulerState>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d102      	bne.n	800b1ca <xQueueGenericSend+0x9e>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d101      	bne.n	800b1ce <xQueueGenericSend+0xa2>
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	e000      	b.n	800b1d0 <xQueueGenericSend+0xa4>
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d10a      	bne.n	800b1ea <xQueueGenericSend+0xbe>
	__asm volatile
 800b1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d8:	f383 8811 	msr	BASEPRI, r3
 800b1dc:	f3bf 8f6f 	isb	sy
 800b1e0:	f3bf 8f4f 	dsb	sy
 800b1e4:	61fb      	str	r3, [r7, #28]
}
 800b1e6:	bf00      	nop
 800b1e8:	e7fe      	b.n	800b1e8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b1ea:	f002 f9db 	bl	800d5a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d302      	bcc.n	800b200 <xQueueGenericSend+0xd4>
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	2b02      	cmp	r3, #2
 800b1fe:	d129      	bne.n	800b254 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b200:	683a      	ldr	r2, [r7, #0]
 800b202:	68b9      	ldr	r1, [r7, #8]
 800b204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b206:	f000 fa0b 	bl	800b620 <prvCopyDataToQueue>
 800b20a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b210:	2b00      	cmp	r3, #0
 800b212:	d010      	beq.n	800b236 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b216:	3324      	adds	r3, #36	; 0x24
 800b218:	4618      	mov	r0, r3
 800b21a:	f001 f8f7 	bl	800c40c <xTaskRemoveFromEventList>
 800b21e:	4603      	mov	r3, r0
 800b220:	2b00      	cmp	r3, #0
 800b222:	d013      	beq.n	800b24c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b224:	4b3f      	ldr	r3, [pc, #252]	; (800b324 <xQueueGenericSend+0x1f8>)
 800b226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b22a:	601a      	str	r2, [r3, #0]
 800b22c:	f3bf 8f4f 	dsb	sy
 800b230:	f3bf 8f6f 	isb	sy
 800b234:	e00a      	b.n	800b24c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d007      	beq.n	800b24c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b23c:	4b39      	ldr	r3, [pc, #228]	; (800b324 <xQueueGenericSend+0x1f8>)
 800b23e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b242:	601a      	str	r2, [r3, #0]
 800b244:	f3bf 8f4f 	dsb	sy
 800b248:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b24c:	f002 f9da 	bl	800d604 <vPortExitCritical>
				return pdPASS;
 800b250:	2301      	movs	r3, #1
 800b252:	e063      	b.n	800b31c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d103      	bne.n	800b262 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b25a:	f002 f9d3 	bl	800d604 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b25e:	2300      	movs	r3, #0
 800b260:	e05c      	b.n	800b31c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b264:	2b00      	cmp	r3, #0
 800b266:	d106      	bne.n	800b276 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b268:	f107 0314 	add.w	r3, r7, #20
 800b26c:	4618      	mov	r0, r3
 800b26e:	f001 f931 	bl	800c4d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b272:	2301      	movs	r3, #1
 800b274:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b276:	f002 f9c5 	bl	800d604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b27a:	f000 fe8b 	bl	800bf94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b27e:	f002 f991 	bl	800d5a4 <vPortEnterCritical>
 800b282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b284:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b288:	b25b      	sxtb	r3, r3
 800b28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b28e:	d103      	bne.n	800b298 <xQueueGenericSend+0x16c>
 800b290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b292:	2200      	movs	r2, #0
 800b294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b29a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b29e:	b25b      	sxtb	r3, r3
 800b2a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2a4:	d103      	bne.n	800b2ae <xQueueGenericSend+0x182>
 800b2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2ae:	f002 f9a9 	bl	800d604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b2b2:	1d3a      	adds	r2, r7, #4
 800b2b4:	f107 0314 	add.w	r3, r7, #20
 800b2b8:	4611      	mov	r1, r2
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f001 f920 	bl	800c500 <xTaskCheckForTimeOut>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d124      	bne.n	800b310 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b2c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2c8:	f000 faa2 	bl	800b810 <prvIsQueueFull>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d018      	beq.n	800b304 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d4:	3310      	adds	r3, #16
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	4611      	mov	r1, r2
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f001 f846 	bl	800c36c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b2e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2e2:	f000 fa2d 	bl	800b740 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b2e6:	f000 fe63 	bl	800bfb0 <xTaskResumeAll>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f47f af7c 	bne.w	800b1ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b2f2:	4b0c      	ldr	r3, [pc, #48]	; (800b324 <xQueueGenericSend+0x1f8>)
 800b2f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2f8:	601a      	str	r2, [r3, #0]
 800b2fa:	f3bf 8f4f 	dsb	sy
 800b2fe:	f3bf 8f6f 	isb	sy
 800b302:	e772      	b.n	800b1ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b306:	f000 fa1b 	bl	800b740 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b30a:	f000 fe51 	bl	800bfb0 <xTaskResumeAll>
 800b30e:	e76c      	b.n	800b1ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b312:	f000 fa15 	bl	800b740 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b316:	f000 fe4b 	bl	800bfb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b31a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3738      	adds	r7, #56	; 0x38
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}
 800b324:	e000ed04 	.word	0xe000ed04

0800b328 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b090      	sub	sp, #64	; 0x40
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	60b9      	str	r1, [r7, #8]
 800b332:	607a      	str	r2, [r7, #4]
 800b334:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d10a      	bne.n	800b356 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b344:	f383 8811 	msr	BASEPRI, r3
 800b348:	f3bf 8f6f 	isb	sy
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b352:	bf00      	nop
 800b354:	e7fe      	b.n	800b354 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d103      	bne.n	800b364 <xQueueGenericSendFromISR+0x3c>
 800b35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b35e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b360:	2b00      	cmp	r3, #0
 800b362:	d101      	bne.n	800b368 <xQueueGenericSendFromISR+0x40>
 800b364:	2301      	movs	r3, #1
 800b366:	e000      	b.n	800b36a <xQueueGenericSendFromISR+0x42>
 800b368:	2300      	movs	r3, #0
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d10a      	bne.n	800b384 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b372:	f383 8811 	msr	BASEPRI, r3
 800b376:	f3bf 8f6f 	isb	sy
 800b37a:	f3bf 8f4f 	dsb	sy
 800b37e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b380:	bf00      	nop
 800b382:	e7fe      	b.n	800b382 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	2b02      	cmp	r3, #2
 800b388:	d103      	bne.n	800b392 <xQueueGenericSendFromISR+0x6a>
 800b38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d101      	bne.n	800b396 <xQueueGenericSendFromISR+0x6e>
 800b392:	2301      	movs	r3, #1
 800b394:	e000      	b.n	800b398 <xQueueGenericSendFromISR+0x70>
 800b396:	2300      	movs	r3, #0
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d10a      	bne.n	800b3b2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a0:	f383 8811 	msr	BASEPRI, r3
 800b3a4:	f3bf 8f6f 	isb	sy
 800b3a8:	f3bf 8f4f 	dsb	sy
 800b3ac:	623b      	str	r3, [r7, #32]
}
 800b3ae:	bf00      	nop
 800b3b0:	e7fe      	b.n	800b3b0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b3b2:	f002 f9d9 	bl	800d768 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b3b6:	f3ef 8211 	mrs	r2, BASEPRI
 800b3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3be:	f383 8811 	msr	BASEPRI, r3
 800b3c2:	f3bf 8f6f 	isb	sy
 800b3c6:	f3bf 8f4f 	dsb	sy
 800b3ca:	61fa      	str	r2, [r7, #28]
 800b3cc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b3ce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b3d0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d302      	bcc.n	800b3e4 <xQueueGenericSendFromISR+0xbc>
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	2b02      	cmp	r3, #2
 800b3e2:	d12f      	bne.n	800b444 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b3f4:	683a      	ldr	r2, [r7, #0]
 800b3f6:	68b9      	ldr	r1, [r7, #8]
 800b3f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b3fa:	f000 f911 	bl	800b620 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b3fe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b402:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b406:	d112      	bne.n	800b42e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d016      	beq.n	800b43e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b412:	3324      	adds	r3, #36	; 0x24
 800b414:	4618      	mov	r0, r3
 800b416:	f000 fff9 	bl	800c40c <xTaskRemoveFromEventList>
 800b41a:	4603      	mov	r3, r0
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d00e      	beq.n	800b43e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d00b      	beq.n	800b43e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2201      	movs	r2, #1
 800b42a:	601a      	str	r2, [r3, #0]
 800b42c:	e007      	b.n	800b43e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b42e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b432:	3301      	adds	r3, #1
 800b434:	b2db      	uxtb	r3, r3
 800b436:	b25a      	sxtb	r2, r3
 800b438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b43e:	2301      	movs	r3, #1
 800b440:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b442:	e001      	b.n	800b448 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b444:	2300      	movs	r3, #0
 800b446:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b44a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b452:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b456:	4618      	mov	r0, r3
 800b458:	3740      	adds	r7, #64	; 0x40
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
	...

0800b460 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b08c      	sub	sp, #48	; 0x30
 800b464:	af00      	add	r7, sp, #0
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b46c:	2300      	movs	r3, #0
 800b46e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b476:	2b00      	cmp	r3, #0
 800b478:	d10a      	bne.n	800b490 <xQueueReceive+0x30>
	__asm volatile
 800b47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47e:	f383 8811 	msr	BASEPRI, r3
 800b482:	f3bf 8f6f 	isb	sy
 800b486:	f3bf 8f4f 	dsb	sy
 800b48a:	623b      	str	r3, [r7, #32]
}
 800b48c:	bf00      	nop
 800b48e:	e7fe      	b.n	800b48e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d103      	bne.n	800b49e <xQueueReceive+0x3e>
 800b496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d101      	bne.n	800b4a2 <xQueueReceive+0x42>
 800b49e:	2301      	movs	r3, #1
 800b4a0:	e000      	b.n	800b4a4 <xQueueReceive+0x44>
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d10a      	bne.n	800b4be <xQueueReceive+0x5e>
	__asm volatile
 800b4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ac:	f383 8811 	msr	BASEPRI, r3
 800b4b0:	f3bf 8f6f 	isb	sy
 800b4b4:	f3bf 8f4f 	dsb	sy
 800b4b8:	61fb      	str	r3, [r7, #28]
}
 800b4ba:	bf00      	nop
 800b4bc:	e7fe      	b.n	800b4bc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b4be:	f001 f977 	bl	800c7b0 <xTaskGetSchedulerState>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d102      	bne.n	800b4ce <xQueueReceive+0x6e>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d101      	bne.n	800b4d2 <xQueueReceive+0x72>
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	e000      	b.n	800b4d4 <xQueueReceive+0x74>
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10a      	bne.n	800b4ee <xQueueReceive+0x8e>
	__asm volatile
 800b4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4dc:	f383 8811 	msr	BASEPRI, r3
 800b4e0:	f3bf 8f6f 	isb	sy
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	61bb      	str	r3, [r7, #24]
}
 800b4ea:	bf00      	nop
 800b4ec:	e7fe      	b.n	800b4ec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b4ee:	f002 f859 	bl	800d5a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d01f      	beq.n	800b53e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b4fe:	68b9      	ldr	r1, [r7, #8]
 800b500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b502:	f000 f8f7 	bl	800b6f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b508:	1e5a      	subs	r2, r3, #1
 800b50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b50c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d00f      	beq.n	800b536 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b518:	3310      	adds	r3, #16
 800b51a:	4618      	mov	r0, r3
 800b51c:	f000 ff76 	bl	800c40c <xTaskRemoveFromEventList>
 800b520:	4603      	mov	r3, r0
 800b522:	2b00      	cmp	r3, #0
 800b524:	d007      	beq.n	800b536 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b526:	4b3d      	ldr	r3, [pc, #244]	; (800b61c <xQueueReceive+0x1bc>)
 800b528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b52c:	601a      	str	r2, [r3, #0]
 800b52e:	f3bf 8f4f 	dsb	sy
 800b532:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b536:	f002 f865 	bl	800d604 <vPortExitCritical>
				return pdPASS;
 800b53a:	2301      	movs	r3, #1
 800b53c:	e069      	b.n	800b612 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d103      	bne.n	800b54c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b544:	f002 f85e 	bl	800d604 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b548:	2300      	movs	r3, #0
 800b54a:	e062      	b.n	800b612 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d106      	bne.n	800b560 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b552:	f107 0310 	add.w	r3, r7, #16
 800b556:	4618      	mov	r0, r3
 800b558:	f000 ffbc 	bl	800c4d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b55c:	2301      	movs	r3, #1
 800b55e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b560:	f002 f850 	bl	800d604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b564:	f000 fd16 	bl	800bf94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b568:	f002 f81c 	bl	800d5a4 <vPortEnterCritical>
 800b56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b572:	b25b      	sxtb	r3, r3
 800b574:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b578:	d103      	bne.n	800b582 <xQueueReceive+0x122>
 800b57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b57c:	2200      	movs	r2, #0
 800b57e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b584:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b588:	b25b      	sxtb	r3, r3
 800b58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b58e:	d103      	bne.n	800b598 <xQueueReceive+0x138>
 800b590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b592:	2200      	movs	r2, #0
 800b594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b598:	f002 f834 	bl	800d604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b59c:	1d3a      	adds	r2, r7, #4
 800b59e:	f107 0310 	add.w	r3, r7, #16
 800b5a2:	4611      	mov	r1, r2
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f000 ffab 	bl	800c500 <xTaskCheckForTimeOut>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d123      	bne.n	800b5f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5b2:	f000 f917 	bl	800b7e4 <prvIsQueueEmpty>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d017      	beq.n	800b5ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5be:	3324      	adds	r3, #36	; 0x24
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	4611      	mov	r1, r2
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f000 fed1 	bl	800c36c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b5ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5cc:	f000 f8b8 	bl	800b740 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b5d0:	f000 fcee 	bl	800bfb0 <xTaskResumeAll>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d189      	bne.n	800b4ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b5da:	4b10      	ldr	r3, [pc, #64]	; (800b61c <xQueueReceive+0x1bc>)
 800b5dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5e0:	601a      	str	r2, [r3, #0]
 800b5e2:	f3bf 8f4f 	dsb	sy
 800b5e6:	f3bf 8f6f 	isb	sy
 800b5ea:	e780      	b.n	800b4ee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b5ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5ee:	f000 f8a7 	bl	800b740 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b5f2:	f000 fcdd 	bl	800bfb0 <xTaskResumeAll>
 800b5f6:	e77a      	b.n	800b4ee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b5f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5fa:	f000 f8a1 	bl	800b740 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b5fe:	f000 fcd7 	bl	800bfb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b604:	f000 f8ee 	bl	800b7e4 <prvIsQueueEmpty>
 800b608:	4603      	mov	r3, r0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	f43f af6f 	beq.w	800b4ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b610:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b612:	4618      	mov	r0, r3
 800b614:	3730      	adds	r7, #48	; 0x30
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	e000ed04 	.word	0xe000ed04

0800b620 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b086      	sub	sp, #24
 800b624:	af00      	add	r7, sp, #0
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	60b9      	str	r1, [r7, #8]
 800b62a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b62c:	2300      	movs	r3, #0
 800b62e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b634:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d10d      	bne.n	800b65a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d14d      	bne.n	800b6e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	689b      	ldr	r3, [r3, #8]
 800b64a:	4618      	mov	r0, r3
 800b64c:	f001 f8ce 	bl	800c7ec <xTaskPriorityDisinherit>
 800b650:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2200      	movs	r2, #0
 800b656:	609a      	str	r2, [r3, #8]
 800b658:	e043      	b.n	800b6e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d119      	bne.n	800b694 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	6858      	ldr	r0, [r3, #4]
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b668:	461a      	mov	r2, r3
 800b66a:	68b9      	ldr	r1, [r7, #8]
 800b66c:	f005 fa65 	bl	8010b3a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	685a      	ldr	r2, [r3, #4]
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b678:	441a      	add	r2, r3
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	685a      	ldr	r2, [r3, #4]
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	689b      	ldr	r3, [r3, #8]
 800b686:	429a      	cmp	r2, r3
 800b688:	d32b      	bcc.n	800b6e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	605a      	str	r2, [r3, #4]
 800b692:	e026      	b.n	800b6e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	68d8      	ldr	r0, [r3, #12]
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b69c:	461a      	mov	r2, r3
 800b69e:	68b9      	ldr	r1, [r7, #8]
 800b6a0:	f005 fa4b 	bl	8010b3a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	68da      	ldr	r2, [r3, #12]
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ac:	425b      	negs	r3, r3
 800b6ae:	441a      	add	r2, r3
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	68da      	ldr	r2, [r3, #12]
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d207      	bcs.n	800b6d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	689a      	ldr	r2, [r3, #8]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6c8:	425b      	negs	r3, r3
 800b6ca:	441a      	add	r2, r3
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2b02      	cmp	r3, #2
 800b6d4:	d105      	bne.n	800b6e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d002      	beq.n	800b6e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	3b01      	subs	r3, #1
 800b6e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	1c5a      	adds	r2, r3, #1
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b6ea:	697b      	ldr	r3, [r7, #20]
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3718      	adds	r7, #24
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b702:	2b00      	cmp	r3, #0
 800b704:	d018      	beq.n	800b738 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	68da      	ldr	r2, [r3, #12]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b70e:	441a      	add	r2, r3
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	68da      	ldr	r2, [r3, #12]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d303      	bcc.n	800b728 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	68d9      	ldr	r1, [r3, #12]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b730:	461a      	mov	r2, r3
 800b732:	6838      	ldr	r0, [r7, #0]
 800b734:	f005 fa01 	bl	8010b3a <memcpy>
	}
}
 800b738:	bf00      	nop
 800b73a:	3708      	adds	r7, #8
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b748:	f001 ff2c 	bl	800d5a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b752:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b754:	e011      	b.n	800b77a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d012      	beq.n	800b784 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	3324      	adds	r3, #36	; 0x24
 800b762:	4618      	mov	r0, r3
 800b764:	f000 fe52 	bl	800c40c <xTaskRemoveFromEventList>
 800b768:	4603      	mov	r3, r0
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d001      	beq.n	800b772 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b76e:	f000 ff29 	bl	800c5c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b772:	7bfb      	ldrb	r3, [r7, #15]
 800b774:	3b01      	subs	r3, #1
 800b776:	b2db      	uxtb	r3, r3
 800b778:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b77a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	dce9      	bgt.n	800b756 <prvUnlockQueue+0x16>
 800b782:	e000      	b.n	800b786 <prvUnlockQueue+0x46>
					break;
 800b784:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	22ff      	movs	r2, #255	; 0xff
 800b78a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b78e:	f001 ff39 	bl	800d604 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b792:	f001 ff07 	bl	800d5a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b79c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b79e:	e011      	b.n	800b7c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	691b      	ldr	r3, [r3, #16]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d012      	beq.n	800b7ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	3310      	adds	r3, #16
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f000 fe2d 	bl	800c40c <xTaskRemoveFromEventList>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d001      	beq.n	800b7bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b7b8:	f000 ff04 	bl	800c5c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b7bc:	7bbb      	ldrb	r3, [r7, #14]
 800b7be:	3b01      	subs	r3, #1
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b7c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	dce9      	bgt.n	800b7a0 <prvUnlockQueue+0x60>
 800b7cc:	e000      	b.n	800b7d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b7ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	22ff      	movs	r2, #255	; 0xff
 800b7d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b7d8:	f001 ff14 	bl	800d604 <vPortExitCritical>
}
 800b7dc:	bf00      	nop
 800b7de:	3710      	adds	r7, #16
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b7ec:	f001 feda 	bl	800d5a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d102      	bne.n	800b7fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	60fb      	str	r3, [r7, #12]
 800b7fc:	e001      	b.n	800b802 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b7fe:	2300      	movs	r3, #0
 800b800:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b802:	f001 feff 	bl	800d604 <vPortExitCritical>

	return xReturn;
 800b806:	68fb      	ldr	r3, [r7, #12]
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b818:	f001 fec4 	bl	800d5a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b824:	429a      	cmp	r2, r3
 800b826:	d102      	bne.n	800b82e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b828:	2301      	movs	r3, #1
 800b82a:	60fb      	str	r3, [r7, #12]
 800b82c:	e001      	b.n	800b832 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b82e:	2300      	movs	r3, #0
 800b830:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b832:	f001 fee7 	bl	800d604 <vPortExitCritical>

	return xReturn;
 800b836:	68fb      	ldr	r3, [r7, #12]
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3710      	adds	r7, #16
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b840:	b480      	push	{r7}
 800b842:	b085      	sub	sp, #20
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b84a:	2300      	movs	r3, #0
 800b84c:	60fb      	str	r3, [r7, #12]
 800b84e:	e014      	b.n	800b87a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b850:	4a0f      	ldr	r2, [pc, #60]	; (800b890 <vQueueAddToRegistry+0x50>)
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d10b      	bne.n	800b874 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b85c:	490c      	ldr	r1, [pc, #48]	; (800b890 <vQueueAddToRegistry+0x50>)
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	683a      	ldr	r2, [r7, #0]
 800b862:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b866:	4a0a      	ldr	r2, [pc, #40]	; (800b890 <vQueueAddToRegistry+0x50>)
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	00db      	lsls	r3, r3, #3
 800b86c:	4413      	add	r3, r2
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b872:	e006      	b.n	800b882 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	3301      	adds	r3, #1
 800b878:	60fb      	str	r3, [r7, #12]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2b07      	cmp	r3, #7
 800b87e:	d9e7      	bls.n	800b850 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b880:	bf00      	nop
 800b882:	bf00      	nop
 800b884:	3714      	adds	r7, #20
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop
 800b890:	24000fa8 	.word	0x24000fa8

0800b894 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b894:	b580      	push	{r7, lr}
 800b896:	b086      	sub	sp, #24
 800b898:	af00      	add	r7, sp, #0
 800b89a:	60f8      	str	r0, [r7, #12]
 800b89c:	60b9      	str	r1, [r7, #8]
 800b89e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b8a4:	f001 fe7e 	bl	800d5a4 <vPortEnterCritical>
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b8ae:	b25b      	sxtb	r3, r3
 800b8b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b4:	d103      	bne.n	800b8be <vQueueWaitForMessageRestricted+0x2a>
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8c4:	b25b      	sxtb	r3, r3
 800b8c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ca:	d103      	bne.n	800b8d4 <vQueueWaitForMessageRestricted+0x40>
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8d4:	f001 fe96 	bl	800d604 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d106      	bne.n	800b8ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	3324      	adds	r3, #36	; 0x24
 800b8e4:	687a      	ldr	r2, [r7, #4]
 800b8e6:	68b9      	ldr	r1, [r7, #8]
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f000 fd63 	bl	800c3b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b8ee:	6978      	ldr	r0, [r7, #20]
 800b8f0:	f7ff ff26 	bl	800b740 <prvUnlockQueue>
	}
 800b8f4:	bf00      	nop
 800b8f6:	3718      	adds	r7, #24
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b08e      	sub	sp, #56	; 0x38
 800b900:	af04      	add	r7, sp, #16
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	60b9      	str	r1, [r7, #8]
 800b906:	607a      	str	r2, [r7, #4]
 800b908:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b90a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d10a      	bne.n	800b926 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b914:	f383 8811 	msr	BASEPRI, r3
 800b918:	f3bf 8f6f 	isb	sy
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	623b      	str	r3, [r7, #32]
}
 800b922:	bf00      	nop
 800b924:	e7fe      	b.n	800b924 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d10a      	bne.n	800b942 <xTaskCreateStatic+0x46>
	__asm volatile
 800b92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b930:	f383 8811 	msr	BASEPRI, r3
 800b934:	f3bf 8f6f 	isb	sy
 800b938:	f3bf 8f4f 	dsb	sy
 800b93c:	61fb      	str	r3, [r7, #28]
}
 800b93e:	bf00      	nop
 800b940:	e7fe      	b.n	800b940 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b942:	23bc      	movs	r3, #188	; 0xbc
 800b944:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	2bbc      	cmp	r3, #188	; 0xbc
 800b94a:	d00a      	beq.n	800b962 <xTaskCreateStatic+0x66>
	__asm volatile
 800b94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b950:	f383 8811 	msr	BASEPRI, r3
 800b954:	f3bf 8f6f 	isb	sy
 800b958:	f3bf 8f4f 	dsb	sy
 800b95c:	61bb      	str	r3, [r7, #24]
}
 800b95e:	bf00      	nop
 800b960:	e7fe      	b.n	800b960 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b962:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b966:	2b00      	cmp	r3, #0
 800b968:	d01e      	beq.n	800b9a8 <xTaskCreateStatic+0xac>
 800b96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d01b      	beq.n	800b9a8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b972:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b978:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97c:	2202      	movs	r2, #2
 800b97e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b982:	2300      	movs	r3, #0
 800b984:	9303      	str	r3, [sp, #12]
 800b986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b988:	9302      	str	r3, [sp, #8]
 800b98a:	f107 0314 	add.w	r3, r7, #20
 800b98e:	9301      	str	r3, [sp, #4]
 800b990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b992:	9300      	str	r3, [sp, #0]
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	68b9      	ldr	r1, [r7, #8]
 800b99a:	68f8      	ldr	r0, [r7, #12]
 800b99c:	f000 f850 	bl	800ba40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b9a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9a2:	f000 f8f3 	bl	800bb8c <prvAddNewTaskToReadyList>
 800b9a6:	e001      	b.n	800b9ac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b9ac:	697b      	ldr	r3, [r7, #20]
	}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3728      	adds	r7, #40	; 0x28
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b08c      	sub	sp, #48	; 0x30
 800b9ba:	af04      	add	r7, sp, #16
 800b9bc:	60f8      	str	r0, [r7, #12]
 800b9be:	60b9      	str	r1, [r7, #8]
 800b9c0:	603b      	str	r3, [r7, #0]
 800b9c2:	4613      	mov	r3, r2
 800b9c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b9c6:	88fb      	ldrh	r3, [r7, #6]
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f001 ff0c 	bl	800d7e8 <pvPortMalloc>
 800b9d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d00e      	beq.n	800b9f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b9d8:	20bc      	movs	r0, #188	; 0xbc
 800b9da:	f001 ff05 	bl	800d7e8 <pvPortMalloc>
 800b9de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d003      	beq.n	800b9ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b9e6:	69fb      	ldr	r3, [r7, #28]
 800b9e8:	697a      	ldr	r2, [r7, #20]
 800b9ea:	631a      	str	r2, [r3, #48]	; 0x30
 800b9ec:	e005      	b.n	800b9fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b9ee:	6978      	ldr	r0, [r7, #20]
 800b9f0:	f001 ffc6 	bl	800d980 <vPortFree>
 800b9f4:	e001      	b.n	800b9fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b9fa:	69fb      	ldr	r3, [r7, #28]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d017      	beq.n	800ba30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	2200      	movs	r2, #0
 800ba04:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ba08:	88fa      	ldrh	r2, [r7, #6]
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	9303      	str	r3, [sp, #12]
 800ba0e:	69fb      	ldr	r3, [r7, #28]
 800ba10:	9302      	str	r3, [sp, #8]
 800ba12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba14:	9301      	str	r3, [sp, #4]
 800ba16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba18:	9300      	str	r3, [sp, #0]
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	68b9      	ldr	r1, [r7, #8]
 800ba1e:	68f8      	ldr	r0, [r7, #12]
 800ba20:	f000 f80e 	bl	800ba40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ba24:	69f8      	ldr	r0, [r7, #28]
 800ba26:	f000 f8b1 	bl	800bb8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	61bb      	str	r3, [r7, #24]
 800ba2e:	e002      	b.n	800ba36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ba30:	f04f 33ff 	mov.w	r3, #4294967295
 800ba34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ba36:	69bb      	ldr	r3, [r7, #24]
	}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3720      	adds	r7, #32
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b088      	sub	sp, #32
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	607a      	str	r2, [r7, #4]
 800ba4c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ba4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	461a      	mov	r2, r3
 800ba58:	21a5      	movs	r1, #165	; 0xa5
 800ba5a:	f005 f87c 	bl	8010b56 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ba5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba62:	6879      	ldr	r1, [r7, #4]
 800ba64:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ba68:	440b      	add	r3, r1
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	4413      	add	r3, r2
 800ba6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ba70:	69bb      	ldr	r3, [r7, #24]
 800ba72:	f023 0307 	bic.w	r3, r3, #7
 800ba76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ba78:	69bb      	ldr	r3, [r7, #24]
 800ba7a:	f003 0307 	and.w	r3, r3, #7
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d00a      	beq.n	800ba98 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ba82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba86:	f383 8811 	msr	BASEPRI, r3
 800ba8a:	f3bf 8f6f 	isb	sy
 800ba8e:	f3bf 8f4f 	dsb	sy
 800ba92:	617b      	str	r3, [r7, #20]
}
 800ba94:	bf00      	nop
 800ba96:	e7fe      	b.n	800ba96 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d01f      	beq.n	800bade <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba9e:	2300      	movs	r3, #0
 800baa0:	61fb      	str	r3, [r7, #28]
 800baa2:	e012      	b.n	800baca <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800baa4:	68ba      	ldr	r2, [r7, #8]
 800baa6:	69fb      	ldr	r3, [r7, #28]
 800baa8:	4413      	add	r3, r2
 800baaa:	7819      	ldrb	r1, [r3, #0]
 800baac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baae:	69fb      	ldr	r3, [r7, #28]
 800bab0:	4413      	add	r3, r2
 800bab2:	3334      	adds	r3, #52	; 0x34
 800bab4:	460a      	mov	r2, r1
 800bab6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bab8:	68ba      	ldr	r2, [r7, #8]
 800baba:	69fb      	ldr	r3, [r7, #28]
 800babc:	4413      	add	r3, r2
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d006      	beq.n	800bad2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bac4:	69fb      	ldr	r3, [r7, #28]
 800bac6:	3301      	adds	r3, #1
 800bac8:	61fb      	str	r3, [r7, #28]
 800baca:	69fb      	ldr	r3, [r7, #28]
 800bacc:	2b0f      	cmp	r3, #15
 800bace:	d9e9      	bls.n	800baa4 <prvInitialiseNewTask+0x64>
 800bad0:	e000      	b.n	800bad4 <prvInitialiseNewTask+0x94>
			{
				break;
 800bad2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad6:	2200      	movs	r2, #0
 800bad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800badc:	e003      	b.n	800bae6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae0:	2200      	movs	r2, #0
 800bae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae8:	2b37      	cmp	r3, #55	; 0x37
 800baea:	d901      	bls.n	800baf0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800baec:	2337      	movs	r3, #55	; 0x37
 800baee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800baf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800baf4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800baf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bafa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bafe:	2200      	movs	r2, #0
 800bb00:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb04:	3304      	adds	r3, #4
 800bb06:	4618      	mov	r0, r3
 800bb08:	f7ff f978 	bl	800adfc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bb0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0e:	3318      	adds	r3, #24
 800bb10:	4618      	mov	r0, r3
 800bb12:	f7ff f973 	bl	800adfc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb2a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bb2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb36:	2200      	movs	r2, #0
 800bb38:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bb3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3e:	3354      	adds	r3, #84	; 0x54
 800bb40:	2260      	movs	r2, #96	; 0x60
 800bb42:	2100      	movs	r1, #0
 800bb44:	4618      	mov	r0, r3
 800bb46:	f005 f806 	bl	8010b56 <memset>
 800bb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4c:	4a0c      	ldr	r2, [pc, #48]	; (800bb80 <prvInitialiseNewTask+0x140>)
 800bb4e:	659a      	str	r2, [r3, #88]	; 0x58
 800bb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb52:	4a0c      	ldr	r2, [pc, #48]	; (800bb84 <prvInitialiseNewTask+0x144>)
 800bb54:	65da      	str	r2, [r3, #92]	; 0x5c
 800bb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb58:	4a0b      	ldr	r2, [pc, #44]	; (800bb88 <prvInitialiseNewTask+0x148>)
 800bb5a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bb5c:	683a      	ldr	r2, [r7, #0]
 800bb5e:	68f9      	ldr	r1, [r7, #12]
 800bb60:	69b8      	ldr	r0, [r7, #24]
 800bb62:	f001 fbf1 	bl	800d348 <pxPortInitialiseStack>
 800bb66:	4602      	mov	r2, r0
 800bb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb6a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d002      	beq.n	800bb78 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb76:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb78:	bf00      	nop
 800bb7a:	3720      	adds	r7, #32
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	0801349c 	.word	0x0801349c
 800bb84:	080134bc 	.word	0x080134bc
 800bb88:	0801347c 	.word	0x0801347c

0800bb8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bb94:	f001 fd06 	bl	800d5a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bb98:	4b2d      	ldr	r3, [pc, #180]	; (800bc50 <prvAddNewTaskToReadyList+0xc4>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	4a2c      	ldr	r2, [pc, #176]	; (800bc50 <prvAddNewTaskToReadyList+0xc4>)
 800bba0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bba2:	4b2c      	ldr	r3, [pc, #176]	; (800bc54 <prvAddNewTaskToReadyList+0xc8>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d109      	bne.n	800bbbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bbaa:	4a2a      	ldr	r2, [pc, #168]	; (800bc54 <prvAddNewTaskToReadyList+0xc8>)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bbb0:	4b27      	ldr	r3, [pc, #156]	; (800bc50 <prvAddNewTaskToReadyList+0xc4>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	d110      	bne.n	800bbda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bbb8:	f000 fd28 	bl	800c60c <prvInitialiseTaskLists>
 800bbbc:	e00d      	b.n	800bbda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bbbe:	4b26      	ldr	r3, [pc, #152]	; (800bc58 <prvAddNewTaskToReadyList+0xcc>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d109      	bne.n	800bbda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bbc6:	4b23      	ldr	r3, [pc, #140]	; (800bc54 <prvAddNewTaskToReadyList+0xc8>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d802      	bhi.n	800bbda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bbd4:	4a1f      	ldr	r2, [pc, #124]	; (800bc54 <prvAddNewTaskToReadyList+0xc8>)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bbda:	4b20      	ldr	r3, [pc, #128]	; (800bc5c <prvAddNewTaskToReadyList+0xd0>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	3301      	adds	r3, #1
 800bbe0:	4a1e      	ldr	r2, [pc, #120]	; (800bc5c <prvAddNewTaskToReadyList+0xd0>)
 800bbe2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bbe4:	4b1d      	ldr	r3, [pc, #116]	; (800bc5c <prvAddNewTaskToReadyList+0xd0>)
 800bbe6:	681a      	ldr	r2, [r3, #0]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbf0:	4b1b      	ldr	r3, [pc, #108]	; (800bc60 <prvAddNewTaskToReadyList+0xd4>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d903      	bls.n	800bc00 <prvAddNewTaskToReadyList+0x74>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbfc:	4a18      	ldr	r2, [pc, #96]	; (800bc60 <prvAddNewTaskToReadyList+0xd4>)
 800bbfe:	6013      	str	r3, [r2, #0]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc04:	4613      	mov	r3, r2
 800bc06:	009b      	lsls	r3, r3, #2
 800bc08:	4413      	add	r3, r2
 800bc0a:	009b      	lsls	r3, r3, #2
 800bc0c:	4a15      	ldr	r2, [pc, #84]	; (800bc64 <prvAddNewTaskToReadyList+0xd8>)
 800bc0e:	441a      	add	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	3304      	adds	r3, #4
 800bc14:	4619      	mov	r1, r3
 800bc16:	4610      	mov	r0, r2
 800bc18:	f7ff f8fd 	bl	800ae16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bc1c:	f001 fcf2 	bl	800d604 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bc20:	4b0d      	ldr	r3, [pc, #52]	; (800bc58 <prvAddNewTaskToReadyList+0xcc>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d00e      	beq.n	800bc46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bc28:	4b0a      	ldr	r3, [pc, #40]	; (800bc54 <prvAddNewTaskToReadyList+0xc8>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d207      	bcs.n	800bc46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bc36:	4b0c      	ldr	r3, [pc, #48]	; (800bc68 <prvAddNewTaskToReadyList+0xdc>)
 800bc38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc3c:	601a      	str	r2, [r3, #0]
 800bc3e:	f3bf 8f4f 	dsb	sy
 800bc42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc46:	bf00      	nop
 800bc48:	3708      	adds	r7, #8
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	240014bc 	.word	0x240014bc
 800bc54:	24000fe8 	.word	0x24000fe8
 800bc58:	240014c8 	.word	0x240014c8
 800bc5c:	240014d8 	.word	0x240014d8
 800bc60:	240014c4 	.word	0x240014c4
 800bc64:	24000fec 	.word	0x24000fec
 800bc68:	e000ed04 	.word	0xe000ed04

0800bc6c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800bc74:	f001 fc96 	bl	800d5a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d102      	bne.n	800bc84 <vTaskDelete+0x18>
 800bc7e:	4b2c      	ldr	r3, [pc, #176]	; (800bd30 <vTaskDelete+0xc4>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	e000      	b.n	800bc86 <vTaskDelete+0x1a>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	3304      	adds	r3, #4
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f7ff f91f 	bl	800aed0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d004      	beq.n	800bca4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	3318      	adds	r3, #24
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7ff f916 	bl	800aed0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800bca4:	4b23      	ldr	r3, [pc, #140]	; (800bd34 <vTaskDelete+0xc8>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	3301      	adds	r3, #1
 800bcaa:	4a22      	ldr	r2, [pc, #136]	; (800bd34 <vTaskDelete+0xc8>)
 800bcac:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800bcae:	4b20      	ldr	r3, [pc, #128]	; (800bd30 <vTaskDelete+0xc4>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	68fa      	ldr	r2, [r7, #12]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d10b      	bne.n	800bcd0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	3304      	adds	r3, #4
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	481e      	ldr	r0, [pc, #120]	; (800bd38 <vTaskDelete+0xcc>)
 800bcc0:	f7ff f8a9 	bl	800ae16 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800bcc4:	4b1d      	ldr	r3, [pc, #116]	; (800bd3c <vTaskDelete+0xd0>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	3301      	adds	r3, #1
 800bcca:	4a1c      	ldr	r2, [pc, #112]	; (800bd3c <vTaskDelete+0xd0>)
 800bccc:	6013      	str	r3, [r2, #0]
 800bcce:	e009      	b.n	800bce4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800bcd0:	4b1b      	ldr	r3, [pc, #108]	; (800bd40 <vTaskDelete+0xd4>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	3b01      	subs	r3, #1
 800bcd6:	4a1a      	ldr	r2, [pc, #104]	; (800bd40 <vTaskDelete+0xd4>)
 800bcd8:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800bcda:	68f8      	ldr	r0, [r7, #12]
 800bcdc:	f000 fd04 	bl	800c6e8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800bce0:	f000 fd36 	bl	800c750 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800bce4:	f001 fc8e 	bl	800d604 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800bce8:	4b16      	ldr	r3, [pc, #88]	; (800bd44 <vTaskDelete+0xd8>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d01b      	beq.n	800bd28 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800bcf0:	4b0f      	ldr	r3, [pc, #60]	; (800bd30 <vTaskDelete+0xc4>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	68fa      	ldr	r2, [r7, #12]
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d116      	bne.n	800bd28 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800bcfa:	4b13      	ldr	r3, [pc, #76]	; (800bd48 <vTaskDelete+0xdc>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d00a      	beq.n	800bd18 <vTaskDelete+0xac>
	__asm volatile
 800bd02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd06:	f383 8811 	msr	BASEPRI, r3
 800bd0a:	f3bf 8f6f 	isb	sy
 800bd0e:	f3bf 8f4f 	dsb	sy
 800bd12:	60bb      	str	r3, [r7, #8]
}
 800bd14:	bf00      	nop
 800bd16:	e7fe      	b.n	800bd16 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800bd18:	4b0c      	ldr	r3, [pc, #48]	; (800bd4c <vTaskDelete+0xe0>)
 800bd1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd1e:	601a      	str	r2, [r3, #0]
 800bd20:	f3bf 8f4f 	dsb	sy
 800bd24:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bd28:	bf00      	nop
 800bd2a:	3710      	adds	r7, #16
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	24000fe8 	.word	0x24000fe8
 800bd34:	240014d8 	.word	0x240014d8
 800bd38:	24001490 	.word	0x24001490
 800bd3c:	240014a4 	.word	0x240014a4
 800bd40:	240014bc 	.word	0x240014bc
 800bd44:	240014c8 	.word	0x240014c8
 800bd48:	240014e4 	.word	0x240014e4
 800bd4c:	e000ed04 	.word	0xe000ed04

0800bd50 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b08a      	sub	sp, #40	; 0x28
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d10a      	bne.n	800bd7a <vTaskDelayUntil+0x2a>
	__asm volatile
 800bd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd68:	f383 8811 	msr	BASEPRI, r3
 800bd6c:	f3bf 8f6f 	isb	sy
 800bd70:	f3bf 8f4f 	dsb	sy
 800bd74:	617b      	str	r3, [r7, #20]
}
 800bd76:	bf00      	nop
 800bd78:	e7fe      	b.n	800bd78 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d10a      	bne.n	800bd96 <vTaskDelayUntil+0x46>
	__asm volatile
 800bd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd84:	f383 8811 	msr	BASEPRI, r3
 800bd88:	f3bf 8f6f 	isb	sy
 800bd8c:	f3bf 8f4f 	dsb	sy
 800bd90:	613b      	str	r3, [r7, #16]
}
 800bd92:	bf00      	nop
 800bd94:	e7fe      	b.n	800bd94 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800bd96:	4b2a      	ldr	r3, [pc, #168]	; (800be40 <vTaskDelayUntil+0xf0>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d00a      	beq.n	800bdb4 <vTaskDelayUntil+0x64>
	__asm volatile
 800bd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda2:	f383 8811 	msr	BASEPRI, r3
 800bda6:	f3bf 8f6f 	isb	sy
 800bdaa:	f3bf 8f4f 	dsb	sy
 800bdae:	60fb      	str	r3, [r7, #12]
}
 800bdb0:	bf00      	nop
 800bdb2:	e7fe      	b.n	800bdb2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800bdb4:	f000 f8ee 	bl	800bf94 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800bdb8:	4b22      	ldr	r3, [pc, #136]	; (800be44 <vTaskDelayUntil+0xf4>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	683a      	ldr	r2, [r7, #0]
 800bdc4:	4413      	add	r3, r2
 800bdc6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	6a3a      	ldr	r2, [r7, #32]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d20b      	bcs.n	800bdea <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	69fa      	ldr	r2, [r7, #28]
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d211      	bcs.n	800be00 <vTaskDelayUntil+0xb0>
 800bddc:	69fa      	ldr	r2, [r7, #28]
 800bdde:	6a3b      	ldr	r3, [r7, #32]
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d90d      	bls.n	800be00 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800bde4:	2301      	movs	r3, #1
 800bde6:	627b      	str	r3, [r7, #36]	; 0x24
 800bde8:	e00a      	b.n	800be00 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	69fa      	ldr	r2, [r7, #28]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d303      	bcc.n	800bdfc <vTaskDelayUntil+0xac>
 800bdf4:	69fa      	ldr	r2, [r7, #28]
 800bdf6:	6a3b      	ldr	r3, [r7, #32]
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d901      	bls.n	800be00 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	69fa      	ldr	r2, [r7, #28]
 800be04:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800be06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d006      	beq.n	800be1a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800be0c:	69fa      	ldr	r2, [r7, #28]
 800be0e:	6a3b      	ldr	r3, [r7, #32]
 800be10:	1ad3      	subs	r3, r2, r3
 800be12:	2100      	movs	r1, #0
 800be14:	4618      	mov	r0, r3
 800be16:	f000 fef5 	bl	800cc04 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800be1a:	f000 f8c9 	bl	800bfb0 <xTaskResumeAll>
 800be1e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800be20:	69bb      	ldr	r3, [r7, #24]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d107      	bne.n	800be36 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800be26:	4b08      	ldr	r3, [pc, #32]	; (800be48 <vTaskDelayUntil+0xf8>)
 800be28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be2c:	601a      	str	r2, [r3, #0]
 800be2e:	f3bf 8f4f 	dsb	sy
 800be32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800be36:	bf00      	nop
 800be38:	3728      	adds	r7, #40	; 0x28
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	240014e4 	.word	0x240014e4
 800be44:	240014c0 	.word	0x240014c0
 800be48:	e000ed04 	.word	0xe000ed04

0800be4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800be54:	2300      	movs	r3, #0
 800be56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d017      	beq.n	800be8e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800be5e:	4b13      	ldr	r3, [pc, #76]	; (800beac <vTaskDelay+0x60>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d00a      	beq.n	800be7c <vTaskDelay+0x30>
	__asm volatile
 800be66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6a:	f383 8811 	msr	BASEPRI, r3
 800be6e:	f3bf 8f6f 	isb	sy
 800be72:	f3bf 8f4f 	dsb	sy
 800be76:	60bb      	str	r3, [r7, #8]
}
 800be78:	bf00      	nop
 800be7a:	e7fe      	b.n	800be7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800be7c:	f000 f88a 	bl	800bf94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800be80:	2100      	movs	r1, #0
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 febe 	bl	800cc04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800be88:	f000 f892 	bl	800bfb0 <xTaskResumeAll>
 800be8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d107      	bne.n	800bea4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800be94:	4b06      	ldr	r3, [pc, #24]	; (800beb0 <vTaskDelay+0x64>)
 800be96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be9a:	601a      	str	r2, [r3, #0]
 800be9c:	f3bf 8f4f 	dsb	sy
 800bea0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bea4:	bf00      	nop
 800bea6:	3710      	adds	r7, #16
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	240014e4 	.word	0x240014e4
 800beb0:	e000ed04 	.word	0xe000ed04

0800beb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b08a      	sub	sp, #40	; 0x28
 800beb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800beba:	2300      	movs	r3, #0
 800bebc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bebe:	2300      	movs	r3, #0
 800bec0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bec2:	463a      	mov	r2, r7
 800bec4:	1d39      	adds	r1, r7, #4
 800bec6:	f107 0308 	add.w	r3, r7, #8
 800beca:	4618      	mov	r0, r3
 800becc:	f7fe ff42 	bl	800ad54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bed0:	6839      	ldr	r1, [r7, #0]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	68ba      	ldr	r2, [r7, #8]
 800bed6:	9202      	str	r2, [sp, #8]
 800bed8:	9301      	str	r3, [sp, #4]
 800beda:	2300      	movs	r3, #0
 800bedc:	9300      	str	r3, [sp, #0]
 800bede:	2300      	movs	r3, #0
 800bee0:	460a      	mov	r2, r1
 800bee2:	4924      	ldr	r1, [pc, #144]	; (800bf74 <vTaskStartScheduler+0xc0>)
 800bee4:	4824      	ldr	r0, [pc, #144]	; (800bf78 <vTaskStartScheduler+0xc4>)
 800bee6:	f7ff fd09 	bl	800b8fc <xTaskCreateStatic>
 800beea:	4603      	mov	r3, r0
 800beec:	4a23      	ldr	r2, [pc, #140]	; (800bf7c <vTaskStartScheduler+0xc8>)
 800beee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bef0:	4b22      	ldr	r3, [pc, #136]	; (800bf7c <vTaskStartScheduler+0xc8>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d002      	beq.n	800befe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bef8:	2301      	movs	r3, #1
 800befa:	617b      	str	r3, [r7, #20]
 800befc:	e001      	b.n	800bf02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800befe:	2300      	movs	r3, #0
 800bf00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	2b01      	cmp	r3, #1
 800bf06:	d102      	bne.n	800bf0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bf08:	f000 fed0 	bl	800ccac <xTimerCreateTimerTask>
 800bf0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d11b      	bne.n	800bf4c <vTaskStartScheduler+0x98>
	__asm volatile
 800bf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf18:	f383 8811 	msr	BASEPRI, r3
 800bf1c:	f3bf 8f6f 	isb	sy
 800bf20:	f3bf 8f4f 	dsb	sy
 800bf24:	613b      	str	r3, [r7, #16]
}
 800bf26:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bf28:	4b15      	ldr	r3, [pc, #84]	; (800bf80 <vTaskStartScheduler+0xcc>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	3354      	adds	r3, #84	; 0x54
 800bf2e:	4a15      	ldr	r2, [pc, #84]	; (800bf84 <vTaskStartScheduler+0xd0>)
 800bf30:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bf32:	4b15      	ldr	r3, [pc, #84]	; (800bf88 <vTaskStartScheduler+0xd4>)
 800bf34:	f04f 32ff 	mov.w	r2, #4294967295
 800bf38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bf3a:	4b14      	ldr	r3, [pc, #80]	; (800bf8c <vTaskStartScheduler+0xd8>)
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bf40:	4b13      	ldr	r3, [pc, #76]	; (800bf90 <vTaskStartScheduler+0xdc>)
 800bf42:	2200      	movs	r2, #0
 800bf44:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bf46:	f001 fa8b 	bl	800d460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bf4a:	e00e      	b.n	800bf6a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf52:	d10a      	bne.n	800bf6a <vTaskStartScheduler+0xb6>
	__asm volatile
 800bf54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf58:	f383 8811 	msr	BASEPRI, r3
 800bf5c:	f3bf 8f6f 	isb	sy
 800bf60:	f3bf 8f4f 	dsb	sy
 800bf64:	60fb      	str	r3, [r7, #12]
}
 800bf66:	bf00      	nop
 800bf68:	e7fe      	b.n	800bf68 <vTaskStartScheduler+0xb4>
}
 800bf6a:	bf00      	nop
 800bf6c:	3718      	adds	r7, #24
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop
 800bf74:	08013334 	.word	0x08013334
 800bf78:	0800c5dd 	.word	0x0800c5dd
 800bf7c:	240014e0 	.word	0x240014e0
 800bf80:	24000fe8 	.word	0x24000fe8
 800bf84:	2400002c 	.word	0x2400002c
 800bf88:	240014dc 	.word	0x240014dc
 800bf8c:	240014c8 	.word	0x240014c8
 800bf90:	240014c0 	.word	0x240014c0

0800bf94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bf94:	b480      	push	{r7}
 800bf96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bf98:	4b04      	ldr	r3, [pc, #16]	; (800bfac <vTaskSuspendAll+0x18>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	4a03      	ldr	r2, [pc, #12]	; (800bfac <vTaskSuspendAll+0x18>)
 800bfa0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bfa2:	bf00      	nop
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr
 800bfac:	240014e4 	.word	0x240014e4

0800bfb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bfbe:	4b42      	ldr	r3, [pc, #264]	; (800c0c8 <xTaskResumeAll+0x118>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d10a      	bne.n	800bfdc <xTaskResumeAll+0x2c>
	__asm volatile
 800bfc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfca:	f383 8811 	msr	BASEPRI, r3
 800bfce:	f3bf 8f6f 	isb	sy
 800bfd2:	f3bf 8f4f 	dsb	sy
 800bfd6:	603b      	str	r3, [r7, #0]
}
 800bfd8:	bf00      	nop
 800bfda:	e7fe      	b.n	800bfda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bfdc:	f001 fae2 	bl	800d5a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bfe0:	4b39      	ldr	r3, [pc, #228]	; (800c0c8 <xTaskResumeAll+0x118>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	3b01      	subs	r3, #1
 800bfe6:	4a38      	ldr	r2, [pc, #224]	; (800c0c8 <xTaskResumeAll+0x118>)
 800bfe8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfea:	4b37      	ldr	r3, [pc, #220]	; (800c0c8 <xTaskResumeAll+0x118>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d162      	bne.n	800c0b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bff2:	4b36      	ldr	r3, [pc, #216]	; (800c0cc <xTaskResumeAll+0x11c>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d05e      	beq.n	800c0b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bffa:	e02f      	b.n	800c05c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bffc:	4b34      	ldr	r3, [pc, #208]	; (800c0d0 <xTaskResumeAll+0x120>)
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	68db      	ldr	r3, [r3, #12]
 800c002:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	3318      	adds	r3, #24
 800c008:	4618      	mov	r0, r3
 800c00a:	f7fe ff61 	bl	800aed0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	3304      	adds	r3, #4
 800c012:	4618      	mov	r0, r3
 800c014:	f7fe ff5c 	bl	800aed0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c01c:	4b2d      	ldr	r3, [pc, #180]	; (800c0d4 <xTaskResumeAll+0x124>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	429a      	cmp	r2, r3
 800c022:	d903      	bls.n	800c02c <xTaskResumeAll+0x7c>
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c028:	4a2a      	ldr	r2, [pc, #168]	; (800c0d4 <xTaskResumeAll+0x124>)
 800c02a:	6013      	str	r3, [r2, #0]
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c030:	4613      	mov	r3, r2
 800c032:	009b      	lsls	r3, r3, #2
 800c034:	4413      	add	r3, r2
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	4a27      	ldr	r2, [pc, #156]	; (800c0d8 <xTaskResumeAll+0x128>)
 800c03a:	441a      	add	r2, r3
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	3304      	adds	r3, #4
 800c040:	4619      	mov	r1, r3
 800c042:	4610      	mov	r0, r2
 800c044:	f7fe fee7 	bl	800ae16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c04c:	4b23      	ldr	r3, [pc, #140]	; (800c0dc <xTaskResumeAll+0x12c>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c052:	429a      	cmp	r2, r3
 800c054:	d302      	bcc.n	800c05c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c056:	4b22      	ldr	r3, [pc, #136]	; (800c0e0 <xTaskResumeAll+0x130>)
 800c058:	2201      	movs	r2, #1
 800c05a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c05c:	4b1c      	ldr	r3, [pc, #112]	; (800c0d0 <xTaskResumeAll+0x120>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d1cb      	bne.n	800bffc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d001      	beq.n	800c06e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c06a:	f000 fb71 	bl	800c750 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c06e:	4b1d      	ldr	r3, [pc, #116]	; (800c0e4 <xTaskResumeAll+0x134>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d010      	beq.n	800c09c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c07a:	f000 f859 	bl	800c130 <xTaskIncrementTick>
 800c07e:	4603      	mov	r3, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	d002      	beq.n	800c08a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c084:	4b16      	ldr	r3, [pc, #88]	; (800c0e0 <xTaskResumeAll+0x130>)
 800c086:	2201      	movs	r2, #1
 800c088:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	3b01      	subs	r3, #1
 800c08e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d1f1      	bne.n	800c07a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c096:	4b13      	ldr	r3, [pc, #76]	; (800c0e4 <xTaskResumeAll+0x134>)
 800c098:	2200      	movs	r2, #0
 800c09a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c09c:	4b10      	ldr	r3, [pc, #64]	; (800c0e0 <xTaskResumeAll+0x130>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d009      	beq.n	800c0b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c0a8:	4b0f      	ldr	r3, [pc, #60]	; (800c0e8 <xTaskResumeAll+0x138>)
 800c0aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0ae:	601a      	str	r2, [r3, #0]
 800c0b0:	f3bf 8f4f 	dsb	sy
 800c0b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c0b8:	f001 faa4 	bl	800d604 <vPortExitCritical>

	return xAlreadyYielded;
 800c0bc:	68bb      	ldr	r3, [r7, #8]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3710      	adds	r7, #16
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	bf00      	nop
 800c0c8:	240014e4 	.word	0x240014e4
 800c0cc:	240014bc 	.word	0x240014bc
 800c0d0:	2400147c 	.word	0x2400147c
 800c0d4:	240014c4 	.word	0x240014c4
 800c0d8:	24000fec 	.word	0x24000fec
 800c0dc:	24000fe8 	.word	0x24000fe8
 800c0e0:	240014d0 	.word	0x240014d0
 800c0e4:	240014cc 	.word	0x240014cc
 800c0e8:	e000ed04 	.word	0xe000ed04

0800c0ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b083      	sub	sp, #12
 800c0f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c0f2:	4b05      	ldr	r3, [pc, #20]	; (800c108 <xTaskGetTickCount+0x1c>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c0f8:	687b      	ldr	r3, [r7, #4]
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	370c      	adds	r7, #12
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr
 800c106:	bf00      	nop
 800c108:	240014c0 	.word	0x240014c0

0800c10c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c112:	f001 fb29 	bl	800d768 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c116:	2300      	movs	r3, #0
 800c118:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c11a:	4b04      	ldr	r3, [pc, #16]	; (800c12c <xTaskGetTickCountFromISR+0x20>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c120:	683b      	ldr	r3, [r7, #0]
}
 800c122:	4618      	mov	r0, r3
 800c124:	3708      	adds	r7, #8
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	240014c0 	.word	0x240014c0

0800c130 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b086      	sub	sp, #24
 800c134:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c136:	2300      	movs	r3, #0
 800c138:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c13a:	4b4f      	ldr	r3, [pc, #316]	; (800c278 <xTaskIncrementTick+0x148>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	f040 808f 	bne.w	800c262 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c144:	4b4d      	ldr	r3, [pc, #308]	; (800c27c <xTaskIncrementTick+0x14c>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	3301      	adds	r3, #1
 800c14a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c14c:	4a4b      	ldr	r2, [pc, #300]	; (800c27c <xTaskIncrementTick+0x14c>)
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d120      	bne.n	800c19a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c158:	4b49      	ldr	r3, [pc, #292]	; (800c280 <xTaskIncrementTick+0x150>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d00a      	beq.n	800c178 <xTaskIncrementTick+0x48>
	__asm volatile
 800c162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c166:	f383 8811 	msr	BASEPRI, r3
 800c16a:	f3bf 8f6f 	isb	sy
 800c16e:	f3bf 8f4f 	dsb	sy
 800c172:	603b      	str	r3, [r7, #0]
}
 800c174:	bf00      	nop
 800c176:	e7fe      	b.n	800c176 <xTaskIncrementTick+0x46>
 800c178:	4b41      	ldr	r3, [pc, #260]	; (800c280 <xTaskIncrementTick+0x150>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	60fb      	str	r3, [r7, #12]
 800c17e:	4b41      	ldr	r3, [pc, #260]	; (800c284 <xTaskIncrementTick+0x154>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4a3f      	ldr	r2, [pc, #252]	; (800c280 <xTaskIncrementTick+0x150>)
 800c184:	6013      	str	r3, [r2, #0]
 800c186:	4a3f      	ldr	r2, [pc, #252]	; (800c284 <xTaskIncrementTick+0x154>)
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	6013      	str	r3, [r2, #0]
 800c18c:	4b3e      	ldr	r3, [pc, #248]	; (800c288 <xTaskIncrementTick+0x158>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	3301      	adds	r3, #1
 800c192:	4a3d      	ldr	r2, [pc, #244]	; (800c288 <xTaskIncrementTick+0x158>)
 800c194:	6013      	str	r3, [r2, #0]
 800c196:	f000 fadb 	bl	800c750 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c19a:	4b3c      	ldr	r3, [pc, #240]	; (800c28c <xTaskIncrementTick+0x15c>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	693a      	ldr	r2, [r7, #16]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d349      	bcc.n	800c238 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1a4:	4b36      	ldr	r3, [pc, #216]	; (800c280 <xTaskIncrementTick+0x150>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d104      	bne.n	800c1b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1ae:	4b37      	ldr	r3, [pc, #220]	; (800c28c <xTaskIncrementTick+0x15c>)
 800c1b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c1b4:	601a      	str	r2, [r3, #0]
					break;
 800c1b6:	e03f      	b.n	800c238 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1b8:	4b31      	ldr	r3, [pc, #196]	; (800c280 <xTaskIncrementTick+0x150>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	68db      	ldr	r3, [r3, #12]
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c1c8:	693a      	ldr	r2, [r7, #16]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d203      	bcs.n	800c1d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c1d0:	4a2e      	ldr	r2, [pc, #184]	; (800c28c <xTaskIncrementTick+0x15c>)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c1d6:	e02f      	b.n	800c238 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	3304      	adds	r3, #4
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7fe fe77 	bl	800aed0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d004      	beq.n	800c1f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	3318      	adds	r3, #24
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7fe fe6e 	bl	800aed0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1f8:	4b25      	ldr	r3, [pc, #148]	; (800c290 <xTaskIncrementTick+0x160>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d903      	bls.n	800c208 <xTaskIncrementTick+0xd8>
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c204:	4a22      	ldr	r2, [pc, #136]	; (800c290 <xTaskIncrementTick+0x160>)
 800c206:	6013      	str	r3, [r2, #0]
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c20c:	4613      	mov	r3, r2
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	4413      	add	r3, r2
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	4a1f      	ldr	r2, [pc, #124]	; (800c294 <xTaskIncrementTick+0x164>)
 800c216:	441a      	add	r2, r3
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	3304      	adds	r3, #4
 800c21c:	4619      	mov	r1, r3
 800c21e:	4610      	mov	r0, r2
 800c220:	f7fe fdf9 	bl	800ae16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c228:	4b1b      	ldr	r3, [pc, #108]	; (800c298 <xTaskIncrementTick+0x168>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c22e:	429a      	cmp	r2, r3
 800c230:	d3b8      	bcc.n	800c1a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c232:	2301      	movs	r3, #1
 800c234:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c236:	e7b5      	b.n	800c1a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c238:	4b17      	ldr	r3, [pc, #92]	; (800c298 <xTaskIncrementTick+0x168>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c23e:	4915      	ldr	r1, [pc, #84]	; (800c294 <xTaskIncrementTick+0x164>)
 800c240:	4613      	mov	r3, r2
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	4413      	add	r3, r2
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	440b      	add	r3, r1
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	d901      	bls.n	800c254 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c250:	2301      	movs	r3, #1
 800c252:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c254:	4b11      	ldr	r3, [pc, #68]	; (800c29c <xTaskIncrementTick+0x16c>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d007      	beq.n	800c26c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c25c:	2301      	movs	r3, #1
 800c25e:	617b      	str	r3, [r7, #20]
 800c260:	e004      	b.n	800c26c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c262:	4b0f      	ldr	r3, [pc, #60]	; (800c2a0 <xTaskIncrementTick+0x170>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	3301      	adds	r3, #1
 800c268:	4a0d      	ldr	r2, [pc, #52]	; (800c2a0 <xTaskIncrementTick+0x170>)
 800c26a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c26c:	697b      	ldr	r3, [r7, #20]
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3718      	adds	r7, #24
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	240014e4 	.word	0x240014e4
 800c27c:	240014c0 	.word	0x240014c0
 800c280:	24001474 	.word	0x24001474
 800c284:	24001478 	.word	0x24001478
 800c288:	240014d4 	.word	0x240014d4
 800c28c:	240014dc 	.word	0x240014dc
 800c290:	240014c4 	.word	0x240014c4
 800c294:	24000fec 	.word	0x24000fec
 800c298:	24000fe8 	.word	0x24000fe8
 800c29c:	240014d0 	.word	0x240014d0
 800c2a0:	240014cc 	.word	0x240014cc

0800c2a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b085      	sub	sp, #20
 800c2a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c2aa:	4b2a      	ldr	r3, [pc, #168]	; (800c354 <vTaskSwitchContext+0xb0>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d003      	beq.n	800c2ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c2b2:	4b29      	ldr	r3, [pc, #164]	; (800c358 <vTaskSwitchContext+0xb4>)
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c2b8:	e046      	b.n	800c348 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c2ba:	4b27      	ldr	r3, [pc, #156]	; (800c358 <vTaskSwitchContext+0xb4>)
 800c2bc:	2200      	movs	r2, #0
 800c2be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2c0:	4b26      	ldr	r3, [pc, #152]	; (800c35c <vTaskSwitchContext+0xb8>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	60fb      	str	r3, [r7, #12]
 800c2c6:	e010      	b.n	800c2ea <vTaskSwitchContext+0x46>
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d10a      	bne.n	800c2e4 <vTaskSwitchContext+0x40>
	__asm volatile
 800c2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d2:	f383 8811 	msr	BASEPRI, r3
 800c2d6:	f3bf 8f6f 	isb	sy
 800c2da:	f3bf 8f4f 	dsb	sy
 800c2de:	607b      	str	r3, [r7, #4]
}
 800c2e0:	bf00      	nop
 800c2e2:	e7fe      	b.n	800c2e2 <vTaskSwitchContext+0x3e>
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	3b01      	subs	r3, #1
 800c2e8:	60fb      	str	r3, [r7, #12]
 800c2ea:	491d      	ldr	r1, [pc, #116]	; (800c360 <vTaskSwitchContext+0xbc>)
 800c2ec:	68fa      	ldr	r2, [r7, #12]
 800c2ee:	4613      	mov	r3, r2
 800c2f0:	009b      	lsls	r3, r3, #2
 800c2f2:	4413      	add	r3, r2
 800c2f4:	009b      	lsls	r3, r3, #2
 800c2f6:	440b      	add	r3, r1
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d0e4      	beq.n	800c2c8 <vTaskSwitchContext+0x24>
 800c2fe:	68fa      	ldr	r2, [r7, #12]
 800c300:	4613      	mov	r3, r2
 800c302:	009b      	lsls	r3, r3, #2
 800c304:	4413      	add	r3, r2
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	4a15      	ldr	r2, [pc, #84]	; (800c360 <vTaskSwitchContext+0xbc>)
 800c30a:	4413      	add	r3, r2
 800c30c:	60bb      	str	r3, [r7, #8]
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	685a      	ldr	r2, [r3, #4]
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	605a      	str	r2, [r3, #4]
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	685a      	ldr	r2, [r3, #4]
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	3308      	adds	r3, #8
 800c320:	429a      	cmp	r2, r3
 800c322:	d104      	bne.n	800c32e <vTaskSwitchContext+0x8a>
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	685a      	ldr	r2, [r3, #4]
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	605a      	str	r2, [r3, #4]
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	4a0b      	ldr	r2, [pc, #44]	; (800c364 <vTaskSwitchContext+0xc0>)
 800c336:	6013      	str	r3, [r2, #0]
 800c338:	4a08      	ldr	r2, [pc, #32]	; (800c35c <vTaskSwitchContext+0xb8>)
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c33e:	4b09      	ldr	r3, [pc, #36]	; (800c364 <vTaskSwitchContext+0xc0>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	3354      	adds	r3, #84	; 0x54
 800c344:	4a08      	ldr	r2, [pc, #32]	; (800c368 <vTaskSwitchContext+0xc4>)
 800c346:	6013      	str	r3, [r2, #0]
}
 800c348:	bf00      	nop
 800c34a:	3714      	adds	r7, #20
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr
 800c354:	240014e4 	.word	0x240014e4
 800c358:	240014d0 	.word	0x240014d0
 800c35c:	240014c4 	.word	0x240014c4
 800c360:	24000fec 	.word	0x24000fec
 800c364:	24000fe8 	.word	0x24000fe8
 800c368:	2400002c 	.word	0x2400002c

0800c36c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d10a      	bne.n	800c392 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c380:	f383 8811 	msr	BASEPRI, r3
 800c384:	f3bf 8f6f 	isb	sy
 800c388:	f3bf 8f4f 	dsb	sy
 800c38c:	60fb      	str	r3, [r7, #12]
}
 800c38e:	bf00      	nop
 800c390:	e7fe      	b.n	800c390 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c392:	4b07      	ldr	r3, [pc, #28]	; (800c3b0 <vTaskPlaceOnEventList+0x44>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	3318      	adds	r3, #24
 800c398:	4619      	mov	r1, r3
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f7fe fd5f 	bl	800ae5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c3a0:	2101      	movs	r1, #1
 800c3a2:	6838      	ldr	r0, [r7, #0]
 800c3a4:	f000 fc2e 	bl	800cc04 <prvAddCurrentTaskToDelayedList>
}
 800c3a8:	bf00      	nop
 800c3aa:	3710      	adds	r7, #16
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}
 800c3b0:	24000fe8 	.word	0x24000fe8

0800c3b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b086      	sub	sp, #24
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	60b9      	str	r1, [r7, #8]
 800c3be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d10a      	bne.n	800c3dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ca:	f383 8811 	msr	BASEPRI, r3
 800c3ce:	f3bf 8f6f 	isb	sy
 800c3d2:	f3bf 8f4f 	dsb	sy
 800c3d6:	617b      	str	r3, [r7, #20]
}
 800c3d8:	bf00      	nop
 800c3da:	e7fe      	b.n	800c3da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c3dc:	4b0a      	ldr	r3, [pc, #40]	; (800c408 <vTaskPlaceOnEventListRestricted+0x54>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	3318      	adds	r3, #24
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f7fe fd16 	bl	800ae16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d002      	beq.n	800c3f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c3f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c3f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c3f6:	6879      	ldr	r1, [r7, #4]
 800c3f8:	68b8      	ldr	r0, [r7, #8]
 800c3fa:	f000 fc03 	bl	800cc04 <prvAddCurrentTaskToDelayedList>
	}
 800c3fe:	bf00      	nop
 800c400:	3718      	adds	r7, #24
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop
 800c408:	24000fe8 	.word	0x24000fe8

0800c40c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b086      	sub	sp, #24
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	68db      	ldr	r3, [r3, #12]
 800c41a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d10a      	bne.n	800c438 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c426:	f383 8811 	msr	BASEPRI, r3
 800c42a:	f3bf 8f6f 	isb	sy
 800c42e:	f3bf 8f4f 	dsb	sy
 800c432:	60fb      	str	r3, [r7, #12]
}
 800c434:	bf00      	nop
 800c436:	e7fe      	b.n	800c436 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	3318      	adds	r3, #24
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7fe fd47 	bl	800aed0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c442:	4b1e      	ldr	r3, [pc, #120]	; (800c4bc <xTaskRemoveFromEventList+0xb0>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d11d      	bne.n	800c486 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	3304      	adds	r3, #4
 800c44e:	4618      	mov	r0, r3
 800c450:	f7fe fd3e 	bl	800aed0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c458:	4b19      	ldr	r3, [pc, #100]	; (800c4c0 <xTaskRemoveFromEventList+0xb4>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d903      	bls.n	800c468 <xTaskRemoveFromEventList+0x5c>
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c464:	4a16      	ldr	r2, [pc, #88]	; (800c4c0 <xTaskRemoveFromEventList+0xb4>)
 800c466:	6013      	str	r3, [r2, #0]
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c46c:	4613      	mov	r3, r2
 800c46e:	009b      	lsls	r3, r3, #2
 800c470:	4413      	add	r3, r2
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	4a13      	ldr	r2, [pc, #76]	; (800c4c4 <xTaskRemoveFromEventList+0xb8>)
 800c476:	441a      	add	r2, r3
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	3304      	adds	r3, #4
 800c47c:	4619      	mov	r1, r3
 800c47e:	4610      	mov	r0, r2
 800c480:	f7fe fcc9 	bl	800ae16 <vListInsertEnd>
 800c484:	e005      	b.n	800c492 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	3318      	adds	r3, #24
 800c48a:	4619      	mov	r1, r3
 800c48c:	480e      	ldr	r0, [pc, #56]	; (800c4c8 <xTaskRemoveFromEventList+0xbc>)
 800c48e:	f7fe fcc2 	bl	800ae16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c496:	4b0d      	ldr	r3, [pc, #52]	; (800c4cc <xTaskRemoveFromEventList+0xc0>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d905      	bls.n	800c4ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c4a4:	4b0a      	ldr	r3, [pc, #40]	; (800c4d0 <xTaskRemoveFromEventList+0xc4>)
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	601a      	str	r2, [r3, #0]
 800c4aa:	e001      	b.n	800c4b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c4b0:	697b      	ldr	r3, [r7, #20]
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3718      	adds	r7, #24
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	240014e4 	.word	0x240014e4
 800c4c0:	240014c4 	.word	0x240014c4
 800c4c4:	24000fec 	.word	0x24000fec
 800c4c8:	2400147c 	.word	0x2400147c
 800c4cc:	24000fe8 	.word	0x24000fe8
 800c4d0:	240014d0 	.word	0x240014d0

0800c4d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b083      	sub	sp, #12
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c4dc:	4b06      	ldr	r3, [pc, #24]	; (800c4f8 <vTaskInternalSetTimeOutState+0x24>)
 800c4de:	681a      	ldr	r2, [r3, #0]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c4e4:	4b05      	ldr	r3, [pc, #20]	; (800c4fc <vTaskInternalSetTimeOutState+0x28>)
 800c4e6:	681a      	ldr	r2, [r3, #0]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	605a      	str	r2, [r3, #4]
}
 800c4ec:	bf00      	nop
 800c4ee:	370c      	adds	r7, #12
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr
 800c4f8:	240014d4 	.word	0x240014d4
 800c4fc:	240014c0 	.word	0x240014c0

0800c500 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b088      	sub	sp, #32
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d10a      	bne.n	800c526 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c514:	f383 8811 	msr	BASEPRI, r3
 800c518:	f3bf 8f6f 	isb	sy
 800c51c:	f3bf 8f4f 	dsb	sy
 800c520:	613b      	str	r3, [r7, #16]
}
 800c522:	bf00      	nop
 800c524:	e7fe      	b.n	800c524 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d10a      	bne.n	800c542 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c530:	f383 8811 	msr	BASEPRI, r3
 800c534:	f3bf 8f6f 	isb	sy
 800c538:	f3bf 8f4f 	dsb	sy
 800c53c:	60fb      	str	r3, [r7, #12]
}
 800c53e:	bf00      	nop
 800c540:	e7fe      	b.n	800c540 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c542:	f001 f82f 	bl	800d5a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c546:	4b1d      	ldr	r3, [pc, #116]	; (800c5bc <xTaskCheckForTimeOut+0xbc>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	69ba      	ldr	r2, [r7, #24]
 800c552:	1ad3      	subs	r3, r2, r3
 800c554:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c55e:	d102      	bne.n	800c566 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c560:	2300      	movs	r3, #0
 800c562:	61fb      	str	r3, [r7, #28]
 800c564:	e023      	b.n	800c5ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	4b15      	ldr	r3, [pc, #84]	; (800c5c0 <xTaskCheckForTimeOut+0xc0>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	429a      	cmp	r2, r3
 800c570:	d007      	beq.n	800c582 <xTaskCheckForTimeOut+0x82>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	69ba      	ldr	r2, [r7, #24]
 800c578:	429a      	cmp	r2, r3
 800c57a:	d302      	bcc.n	800c582 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c57c:	2301      	movs	r3, #1
 800c57e:	61fb      	str	r3, [r7, #28]
 800c580:	e015      	b.n	800c5ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	697a      	ldr	r2, [r7, #20]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d20b      	bcs.n	800c5a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	681a      	ldr	r2, [r3, #0]
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	1ad2      	subs	r2, r2, r3
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f7ff ff9b 	bl	800c4d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	61fb      	str	r3, [r7, #28]
 800c5a2:	e004      	b.n	800c5ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c5ae:	f001 f829 	bl	800d604 <vPortExitCritical>

	return xReturn;
 800c5b2:	69fb      	ldr	r3, [r7, #28]
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3720      	adds	r7, #32
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	240014c0 	.word	0x240014c0
 800c5c0:	240014d4 	.word	0x240014d4

0800c5c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c5c8:	4b03      	ldr	r3, [pc, #12]	; (800c5d8 <vTaskMissedYield+0x14>)
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	601a      	str	r2, [r3, #0]
}
 800c5ce:	bf00      	nop
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr
 800c5d8:	240014d0 	.word	0x240014d0

0800c5dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c5e4:	f000 f852 	bl	800c68c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c5e8:	4b06      	ldr	r3, [pc, #24]	; (800c604 <prvIdleTask+0x28>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d9f9      	bls.n	800c5e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c5f0:	4b05      	ldr	r3, [pc, #20]	; (800c608 <prvIdleTask+0x2c>)
 800c5f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5f6:	601a      	str	r2, [r3, #0]
 800c5f8:	f3bf 8f4f 	dsb	sy
 800c5fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c600:	e7f0      	b.n	800c5e4 <prvIdleTask+0x8>
 800c602:	bf00      	nop
 800c604:	24000fec 	.word	0x24000fec
 800c608:	e000ed04 	.word	0xe000ed04

0800c60c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b082      	sub	sp, #8
 800c610:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c612:	2300      	movs	r3, #0
 800c614:	607b      	str	r3, [r7, #4]
 800c616:	e00c      	b.n	800c632 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	4613      	mov	r3, r2
 800c61c:	009b      	lsls	r3, r3, #2
 800c61e:	4413      	add	r3, r2
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	4a12      	ldr	r2, [pc, #72]	; (800c66c <prvInitialiseTaskLists+0x60>)
 800c624:	4413      	add	r3, r2
 800c626:	4618      	mov	r0, r3
 800c628:	f7fe fbc8 	bl	800adbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	3301      	adds	r3, #1
 800c630:	607b      	str	r3, [r7, #4]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2b37      	cmp	r3, #55	; 0x37
 800c636:	d9ef      	bls.n	800c618 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c638:	480d      	ldr	r0, [pc, #52]	; (800c670 <prvInitialiseTaskLists+0x64>)
 800c63a:	f7fe fbbf 	bl	800adbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c63e:	480d      	ldr	r0, [pc, #52]	; (800c674 <prvInitialiseTaskLists+0x68>)
 800c640:	f7fe fbbc 	bl	800adbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c644:	480c      	ldr	r0, [pc, #48]	; (800c678 <prvInitialiseTaskLists+0x6c>)
 800c646:	f7fe fbb9 	bl	800adbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c64a:	480c      	ldr	r0, [pc, #48]	; (800c67c <prvInitialiseTaskLists+0x70>)
 800c64c:	f7fe fbb6 	bl	800adbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c650:	480b      	ldr	r0, [pc, #44]	; (800c680 <prvInitialiseTaskLists+0x74>)
 800c652:	f7fe fbb3 	bl	800adbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c656:	4b0b      	ldr	r3, [pc, #44]	; (800c684 <prvInitialiseTaskLists+0x78>)
 800c658:	4a05      	ldr	r2, [pc, #20]	; (800c670 <prvInitialiseTaskLists+0x64>)
 800c65a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c65c:	4b0a      	ldr	r3, [pc, #40]	; (800c688 <prvInitialiseTaskLists+0x7c>)
 800c65e:	4a05      	ldr	r2, [pc, #20]	; (800c674 <prvInitialiseTaskLists+0x68>)
 800c660:	601a      	str	r2, [r3, #0]
}
 800c662:	bf00      	nop
 800c664:	3708      	adds	r7, #8
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}
 800c66a:	bf00      	nop
 800c66c:	24000fec 	.word	0x24000fec
 800c670:	2400144c 	.word	0x2400144c
 800c674:	24001460 	.word	0x24001460
 800c678:	2400147c 	.word	0x2400147c
 800c67c:	24001490 	.word	0x24001490
 800c680:	240014a8 	.word	0x240014a8
 800c684:	24001474 	.word	0x24001474
 800c688:	24001478 	.word	0x24001478

0800c68c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c692:	e019      	b.n	800c6c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c694:	f000 ff86 	bl	800d5a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c698:	4b10      	ldr	r3, [pc, #64]	; (800c6dc <prvCheckTasksWaitingTermination+0x50>)
 800c69a:	68db      	ldr	r3, [r3, #12]
 800c69c:	68db      	ldr	r3, [r3, #12]
 800c69e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	3304      	adds	r3, #4
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7fe fc13 	bl	800aed0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c6aa:	4b0d      	ldr	r3, [pc, #52]	; (800c6e0 <prvCheckTasksWaitingTermination+0x54>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	3b01      	subs	r3, #1
 800c6b0:	4a0b      	ldr	r2, [pc, #44]	; (800c6e0 <prvCheckTasksWaitingTermination+0x54>)
 800c6b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c6b4:	4b0b      	ldr	r3, [pc, #44]	; (800c6e4 <prvCheckTasksWaitingTermination+0x58>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	3b01      	subs	r3, #1
 800c6ba:	4a0a      	ldr	r2, [pc, #40]	; (800c6e4 <prvCheckTasksWaitingTermination+0x58>)
 800c6bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c6be:	f000 ffa1 	bl	800d604 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 f810 	bl	800c6e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c6c8:	4b06      	ldr	r3, [pc, #24]	; (800c6e4 <prvCheckTasksWaitingTermination+0x58>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d1e1      	bne.n	800c694 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c6d0:	bf00      	nop
 800c6d2:	bf00      	nop
 800c6d4:	3708      	adds	r7, #8
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	24001490 	.word	0x24001490
 800c6e0:	240014bc 	.word	0x240014bc
 800c6e4:	240014a4 	.word	0x240014a4

0800c6e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b084      	sub	sp, #16
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	3354      	adds	r3, #84	; 0x54
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f004 ff1b 	bl	8011530 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c700:	2b00      	cmp	r3, #0
 800c702:	d108      	bne.n	800c716 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c708:	4618      	mov	r0, r3
 800c70a:	f001 f939 	bl	800d980 <vPortFree>
				vPortFree( pxTCB );
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f001 f936 	bl	800d980 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c714:	e018      	b.n	800c748 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	d103      	bne.n	800c728 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f001 f92d 	bl	800d980 <vPortFree>
	}
 800c726:	e00f      	b.n	800c748 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c72e:	2b02      	cmp	r3, #2
 800c730:	d00a      	beq.n	800c748 <prvDeleteTCB+0x60>
	__asm volatile
 800c732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c736:	f383 8811 	msr	BASEPRI, r3
 800c73a:	f3bf 8f6f 	isb	sy
 800c73e:	f3bf 8f4f 	dsb	sy
 800c742:	60fb      	str	r3, [r7, #12]
}
 800c744:	bf00      	nop
 800c746:	e7fe      	b.n	800c746 <prvDeleteTCB+0x5e>
	}
 800c748:	bf00      	nop
 800c74a:	3710      	adds	r7, #16
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c750:	b480      	push	{r7}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c756:	4b0c      	ldr	r3, [pc, #48]	; (800c788 <prvResetNextTaskUnblockTime+0x38>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d104      	bne.n	800c76a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c760:	4b0a      	ldr	r3, [pc, #40]	; (800c78c <prvResetNextTaskUnblockTime+0x3c>)
 800c762:	f04f 32ff 	mov.w	r2, #4294967295
 800c766:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c768:	e008      	b.n	800c77c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c76a:	4b07      	ldr	r3, [pc, #28]	; (800c788 <prvResetNextTaskUnblockTime+0x38>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	68db      	ldr	r3, [r3, #12]
 800c770:	68db      	ldr	r3, [r3, #12]
 800c772:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	4a04      	ldr	r2, [pc, #16]	; (800c78c <prvResetNextTaskUnblockTime+0x3c>)
 800c77a:	6013      	str	r3, [r2, #0]
}
 800c77c:	bf00      	nop
 800c77e:	370c      	adds	r7, #12
 800c780:	46bd      	mov	sp, r7
 800c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c786:	4770      	bx	lr
 800c788:	24001474 	.word	0x24001474
 800c78c:	240014dc 	.word	0x240014dc

0800c790 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c790:	b480      	push	{r7}
 800c792:	b083      	sub	sp, #12
 800c794:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c796:	4b05      	ldr	r3, [pc, #20]	; (800c7ac <xTaskGetCurrentTaskHandle+0x1c>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c79c:	687b      	ldr	r3, [r7, #4]
	}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	370c      	adds	r7, #12
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr
 800c7aa:	bf00      	nop
 800c7ac:	24000fe8 	.word	0x24000fe8

0800c7b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b083      	sub	sp, #12
 800c7b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c7b6:	4b0b      	ldr	r3, [pc, #44]	; (800c7e4 <xTaskGetSchedulerState+0x34>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d102      	bne.n	800c7c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c7be:	2301      	movs	r3, #1
 800c7c0:	607b      	str	r3, [r7, #4]
 800c7c2:	e008      	b.n	800c7d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7c4:	4b08      	ldr	r3, [pc, #32]	; (800c7e8 <xTaskGetSchedulerState+0x38>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d102      	bne.n	800c7d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c7cc:	2302      	movs	r3, #2
 800c7ce:	607b      	str	r3, [r7, #4]
 800c7d0:	e001      	b.n	800c7d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c7d6:	687b      	ldr	r3, [r7, #4]
	}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	370c      	adds	r7, #12
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr
 800c7e4:	240014c8 	.word	0x240014c8
 800c7e8:	240014e4 	.word	0x240014e4

0800c7ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b086      	sub	sp, #24
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d056      	beq.n	800c8b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c802:	4b2e      	ldr	r3, [pc, #184]	; (800c8bc <xTaskPriorityDisinherit+0xd0>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	693a      	ldr	r2, [r7, #16]
 800c808:	429a      	cmp	r2, r3
 800c80a:	d00a      	beq.n	800c822 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c810:	f383 8811 	msr	BASEPRI, r3
 800c814:	f3bf 8f6f 	isb	sy
 800c818:	f3bf 8f4f 	dsb	sy
 800c81c:	60fb      	str	r3, [r7, #12]
}
 800c81e:	bf00      	nop
 800c820:	e7fe      	b.n	800c820 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c826:	2b00      	cmp	r3, #0
 800c828:	d10a      	bne.n	800c840 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c82e:	f383 8811 	msr	BASEPRI, r3
 800c832:	f3bf 8f6f 	isb	sy
 800c836:	f3bf 8f4f 	dsb	sy
 800c83a:	60bb      	str	r3, [r7, #8]
}
 800c83c:	bf00      	nop
 800c83e:	e7fe      	b.n	800c83e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c844:	1e5a      	subs	r2, r3, #1
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c852:	429a      	cmp	r2, r3
 800c854:	d02c      	beq.n	800c8b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d128      	bne.n	800c8b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	3304      	adds	r3, #4
 800c862:	4618      	mov	r0, r3
 800c864:	f7fe fb34 	bl	800aed0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c874:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c880:	4b0f      	ldr	r3, [pc, #60]	; (800c8c0 <xTaskPriorityDisinherit+0xd4>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	429a      	cmp	r2, r3
 800c886:	d903      	bls.n	800c890 <xTaskPriorityDisinherit+0xa4>
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c88c:	4a0c      	ldr	r2, [pc, #48]	; (800c8c0 <xTaskPriorityDisinherit+0xd4>)
 800c88e:	6013      	str	r3, [r2, #0]
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c894:	4613      	mov	r3, r2
 800c896:	009b      	lsls	r3, r3, #2
 800c898:	4413      	add	r3, r2
 800c89a:	009b      	lsls	r3, r3, #2
 800c89c:	4a09      	ldr	r2, [pc, #36]	; (800c8c4 <xTaskPriorityDisinherit+0xd8>)
 800c89e:	441a      	add	r2, r3
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	3304      	adds	r3, #4
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	4610      	mov	r0, r2
 800c8a8:	f7fe fab5 	bl	800ae16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c8b0:	697b      	ldr	r3, [r7, #20]
	}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3718      	adds	r7, #24
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	24000fe8 	.word	0x24000fe8
 800c8c0:	240014c4 	.word	0x240014c4
 800c8c4:	24000fec 	.word	0x24000fec

0800c8c8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b084      	sub	sp, #16
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c8d2:	f000 fe67 	bl	800d5a4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c8d6:	4b20      	ldr	r3, [pc, #128]	; (800c958 <ulTaskNotifyTake+0x90>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d113      	bne.n	800c90a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c8e2:	4b1d      	ldr	r3, [pc, #116]	; (800c958 <ulTaskNotifyTake+0x90>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d00b      	beq.n	800c90a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c8f2:	2101      	movs	r1, #1
 800c8f4:	6838      	ldr	r0, [r7, #0]
 800c8f6:	f000 f985 	bl	800cc04 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c8fa:	4b18      	ldr	r3, [pc, #96]	; (800c95c <ulTaskNotifyTake+0x94>)
 800c8fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c900:	601a      	str	r2, [r3, #0]
 800c902:	f3bf 8f4f 	dsb	sy
 800c906:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c90a:	f000 fe7b 	bl	800d604 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c90e:	f000 fe49 	bl	800d5a4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c912:	4b11      	ldr	r3, [pc, #68]	; (800c958 <ulTaskNotifyTake+0x90>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c91a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d00e      	beq.n	800c940 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d005      	beq.n	800c934 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c928:	4b0b      	ldr	r3, [pc, #44]	; (800c958 <ulTaskNotifyTake+0x90>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	2200      	movs	r2, #0
 800c92e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800c932:	e005      	b.n	800c940 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c934:	4b08      	ldr	r3, [pc, #32]	; (800c958 <ulTaskNotifyTake+0x90>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	68fa      	ldr	r2, [r7, #12]
 800c93a:	3a01      	subs	r2, #1
 800c93c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c940:	4b05      	ldr	r3, [pc, #20]	; (800c958 <ulTaskNotifyTake+0x90>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	2200      	movs	r2, #0
 800c946:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800c94a:	f000 fe5b 	bl	800d604 <vPortExitCritical>

		return ulReturn;
 800c94e:	68fb      	ldr	r3, [r7, #12]
	}
 800c950:	4618      	mov	r0, r3
 800c952:	3710      	adds	r7, #16
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}
 800c958:	24000fe8 	.word	0x24000fe8
 800c95c:	e000ed04 	.word	0xe000ed04

0800c960 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800c960:	b580      	push	{r7, lr}
 800c962:	b08a      	sub	sp, #40	; 0x28
 800c964:	af00      	add	r7, sp, #0
 800c966:	60f8      	str	r0, [r7, #12]
 800c968:	60b9      	str	r1, [r7, #8]
 800c96a:	603b      	str	r3, [r7, #0]
 800c96c:	4613      	mov	r3, r2
 800c96e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800c970:	2301      	movs	r3, #1
 800c972:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d10a      	bne.n	800c990 <xTaskGenericNotify+0x30>
	__asm volatile
 800c97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c97e:	f383 8811 	msr	BASEPRI, r3
 800c982:	f3bf 8f6f 	isb	sy
 800c986:	f3bf 8f4f 	dsb	sy
 800c98a:	61bb      	str	r3, [r7, #24]
}
 800c98c:	bf00      	nop
 800c98e:	e7fe      	b.n	800c98e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800c994:	f000 fe06 	bl	800d5a4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d004      	beq.n	800c9a8 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c99e:	6a3b      	ldr	r3, [r7, #32]
 800c9a0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c9a8:	6a3b      	ldr	r3, [r7, #32]
 800c9aa:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800c9ae:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c9b0:	6a3b      	ldr	r3, [r7, #32]
 800c9b2:	2202      	movs	r2, #2
 800c9b4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800c9b8:	79fb      	ldrb	r3, [r7, #7]
 800c9ba:	2b04      	cmp	r3, #4
 800c9bc:	d82d      	bhi.n	800ca1a <xTaskGenericNotify+0xba>
 800c9be:	a201      	add	r2, pc, #4	; (adr r2, 800c9c4 <xTaskGenericNotify+0x64>)
 800c9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9c4:	0800ca3d 	.word	0x0800ca3d
 800c9c8:	0800c9d9 	.word	0x0800c9d9
 800c9cc:	0800c9eb 	.word	0x0800c9eb
 800c9d0:	0800c9fb 	.word	0x0800c9fb
 800c9d4:	0800ca05 	.word	0x0800ca05
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c9d8:	6a3b      	ldr	r3, [r7, #32]
 800c9da:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	431a      	orrs	r2, r3
 800c9e2:	6a3b      	ldr	r3, [r7, #32]
 800c9e4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800c9e8:	e02b      	b.n	800ca42 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c9ea:	6a3b      	ldr	r3, [r7, #32]
 800c9ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c9f0:	1c5a      	adds	r2, r3, #1
 800c9f2:	6a3b      	ldr	r3, [r7, #32]
 800c9f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800c9f8:	e023      	b.n	800ca42 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c9fa:	6a3b      	ldr	r3, [r7, #32]
 800c9fc:	68ba      	ldr	r2, [r7, #8]
 800c9fe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800ca02:	e01e      	b.n	800ca42 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ca04:	7ffb      	ldrb	r3, [r7, #31]
 800ca06:	2b02      	cmp	r3, #2
 800ca08:	d004      	beq.n	800ca14 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ca0a:	6a3b      	ldr	r3, [r7, #32]
 800ca0c:	68ba      	ldr	r2, [r7, #8]
 800ca0e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ca12:	e016      	b.n	800ca42 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800ca14:	2300      	movs	r3, #0
 800ca16:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800ca18:	e013      	b.n	800ca42 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ca1a:	6a3b      	ldr	r3, [r7, #32]
 800ca1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ca20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca24:	d00c      	beq.n	800ca40 <xTaskGenericNotify+0xe0>
	__asm volatile
 800ca26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2a:	f383 8811 	msr	BASEPRI, r3
 800ca2e:	f3bf 8f6f 	isb	sy
 800ca32:	f3bf 8f4f 	dsb	sy
 800ca36:	617b      	str	r3, [r7, #20]
}
 800ca38:	bf00      	nop
 800ca3a:	e7fe      	b.n	800ca3a <xTaskGenericNotify+0xda>
					break;
 800ca3c:	bf00      	nop
 800ca3e:	e000      	b.n	800ca42 <xTaskGenericNotify+0xe2>

					break;
 800ca40:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ca42:	7ffb      	ldrb	r3, [r7, #31]
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d13a      	bne.n	800cabe <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca48:	6a3b      	ldr	r3, [r7, #32]
 800ca4a:	3304      	adds	r3, #4
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f7fe fa3f 	bl	800aed0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800ca52:	6a3b      	ldr	r3, [r7, #32]
 800ca54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca56:	4b1d      	ldr	r3, [pc, #116]	; (800cacc <xTaskGenericNotify+0x16c>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d903      	bls.n	800ca66 <xTaskGenericNotify+0x106>
 800ca5e:	6a3b      	ldr	r3, [r7, #32]
 800ca60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca62:	4a1a      	ldr	r2, [pc, #104]	; (800cacc <xTaskGenericNotify+0x16c>)
 800ca64:	6013      	str	r3, [r2, #0]
 800ca66:	6a3b      	ldr	r3, [r7, #32]
 800ca68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca6a:	4613      	mov	r3, r2
 800ca6c:	009b      	lsls	r3, r3, #2
 800ca6e:	4413      	add	r3, r2
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	4a17      	ldr	r2, [pc, #92]	; (800cad0 <xTaskGenericNotify+0x170>)
 800ca74:	441a      	add	r2, r3
 800ca76:	6a3b      	ldr	r3, [r7, #32]
 800ca78:	3304      	adds	r3, #4
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	4610      	mov	r0, r2
 800ca7e:	f7fe f9ca 	bl	800ae16 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ca82:	6a3b      	ldr	r3, [r7, #32]
 800ca84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d00a      	beq.n	800caa0 <xTaskGenericNotify+0x140>
	__asm volatile
 800ca8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca8e:	f383 8811 	msr	BASEPRI, r3
 800ca92:	f3bf 8f6f 	isb	sy
 800ca96:	f3bf 8f4f 	dsb	sy
 800ca9a:	613b      	str	r3, [r7, #16]
}
 800ca9c:	bf00      	nop
 800ca9e:	e7fe      	b.n	800ca9e <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800caa0:	6a3b      	ldr	r3, [r7, #32]
 800caa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caa4:	4b0b      	ldr	r3, [pc, #44]	; (800cad4 <xTaskGenericNotify+0x174>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caaa:	429a      	cmp	r2, r3
 800caac:	d907      	bls.n	800cabe <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800caae:	4b0a      	ldr	r3, [pc, #40]	; (800cad8 <xTaskGenericNotify+0x178>)
 800cab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cab4:	601a      	str	r2, [r3, #0]
 800cab6:	f3bf 8f4f 	dsb	sy
 800caba:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800cabe:	f000 fda1 	bl	800d604 <vPortExitCritical>

		return xReturn;
 800cac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3728      	adds	r7, #40	; 0x28
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}
 800cacc:	240014c4 	.word	0x240014c4
 800cad0:	24000fec 	.word	0x24000fec
 800cad4:	24000fe8 	.word	0x24000fe8
 800cad8:	e000ed04 	.word	0xe000ed04

0800cadc <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b08a      	sub	sp, #40	; 0x28
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d10a      	bne.n	800cb02 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 800caec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf0:	f383 8811 	msr	BASEPRI, r3
 800caf4:	f3bf 8f6f 	isb	sy
 800caf8:	f3bf 8f4f 	dsb	sy
 800cafc:	61bb      	str	r3, [r7, #24]
}
 800cafe:	bf00      	nop
 800cb00:	e7fe      	b.n	800cb00 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb02:	f000 fe31 	bl	800d768 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800cb0a:	f3ef 8211 	mrs	r2, BASEPRI
 800cb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb12:	f383 8811 	msr	BASEPRI, r3
 800cb16:	f3bf 8f6f 	isb	sy
 800cb1a:	f3bf 8f4f 	dsb	sy
 800cb1e:	617a      	str	r2, [r7, #20]
 800cb20:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cb22:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cb24:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800cb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb28:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800cb2c:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800cb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb30:	2202      	movs	r2, #2
 800cb32:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800cb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cb3c:	1c5a      	adds	r2, r3, #1
 800cb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb40:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800cb44:	7ffb      	ldrb	r3, [r7, #31]
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	d146      	bne.n	800cbd8 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800cb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d00a      	beq.n	800cb68 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 800cb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb56:	f383 8811 	msr	BASEPRI, r3
 800cb5a:	f3bf 8f6f 	isb	sy
 800cb5e:	f3bf 8f4f 	dsb	sy
 800cb62:	60fb      	str	r3, [r7, #12]
}
 800cb64:	bf00      	nop
 800cb66:	e7fe      	b.n	800cb66 <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb68:	4b20      	ldr	r3, [pc, #128]	; (800cbec <vTaskNotifyGiveFromISR+0x110>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d11d      	bne.n	800cbac <vTaskNotifyGiveFromISR+0xd0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb72:	3304      	adds	r3, #4
 800cb74:	4618      	mov	r0, r3
 800cb76:	f7fe f9ab 	bl	800aed0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb7e:	4b1c      	ldr	r3, [pc, #112]	; (800cbf0 <vTaskNotifyGiveFromISR+0x114>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d903      	bls.n	800cb8e <vTaskNotifyGiveFromISR+0xb2>
 800cb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb8a:	4a19      	ldr	r2, [pc, #100]	; (800cbf0 <vTaskNotifyGiveFromISR+0x114>)
 800cb8c:	6013      	str	r3, [r2, #0]
 800cb8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb92:	4613      	mov	r3, r2
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	4413      	add	r3, r2
 800cb98:	009b      	lsls	r3, r3, #2
 800cb9a:	4a16      	ldr	r2, [pc, #88]	; (800cbf4 <vTaskNotifyGiveFromISR+0x118>)
 800cb9c:	441a      	add	r2, r3
 800cb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba0:	3304      	adds	r3, #4
 800cba2:	4619      	mov	r1, r3
 800cba4:	4610      	mov	r0, r2
 800cba6:	f7fe f936 	bl	800ae16 <vListInsertEnd>
 800cbaa:	e005      	b.n	800cbb8 <vTaskNotifyGiveFromISR+0xdc>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800cbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbae:	3318      	adds	r3, #24
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	4811      	ldr	r0, [pc, #68]	; (800cbf8 <vTaskNotifyGiveFromISR+0x11c>)
 800cbb4:	f7fe f92f 	bl	800ae16 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbbc:	4b0f      	ldr	r3, [pc, #60]	; (800cbfc <vTaskNotifyGiveFromISR+0x120>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d908      	bls.n	800cbd8 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d002      	beq.n	800cbd2 <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	2201      	movs	r2, #1
 800cbd0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800cbd2:	4b0b      	ldr	r3, [pc, #44]	; (800cc00 <vTaskNotifyGiveFromISR+0x124>)
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	601a      	str	r2, [r3, #0]
 800cbd8:	6a3b      	ldr	r3, [r7, #32]
 800cbda:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	f383 8811 	msr	BASEPRI, r3
}
 800cbe2:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800cbe4:	bf00      	nop
 800cbe6:	3728      	adds	r7, #40	; 0x28
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	240014e4 	.word	0x240014e4
 800cbf0:	240014c4 	.word	0x240014c4
 800cbf4:	24000fec 	.word	0x24000fec
 800cbf8:	2400147c 	.word	0x2400147c
 800cbfc:	24000fe8 	.word	0x24000fe8
 800cc00:	240014d0 	.word	0x240014d0

0800cc04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b084      	sub	sp, #16
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cc0e:	4b21      	ldr	r3, [pc, #132]	; (800cc94 <prvAddCurrentTaskToDelayedList+0x90>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc14:	4b20      	ldr	r3, [pc, #128]	; (800cc98 <prvAddCurrentTaskToDelayedList+0x94>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	3304      	adds	r3, #4
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7fe f958 	bl	800aed0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc26:	d10a      	bne.n	800cc3e <prvAddCurrentTaskToDelayedList+0x3a>
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d007      	beq.n	800cc3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc2e:	4b1a      	ldr	r3, [pc, #104]	; (800cc98 <prvAddCurrentTaskToDelayedList+0x94>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	3304      	adds	r3, #4
 800cc34:	4619      	mov	r1, r3
 800cc36:	4819      	ldr	r0, [pc, #100]	; (800cc9c <prvAddCurrentTaskToDelayedList+0x98>)
 800cc38:	f7fe f8ed 	bl	800ae16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cc3c:	e026      	b.n	800cc8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cc3e:	68fa      	ldr	r2, [r7, #12]
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	4413      	add	r3, r2
 800cc44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cc46:	4b14      	ldr	r3, [pc, #80]	; (800cc98 <prvAddCurrentTaskToDelayedList+0x94>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	68ba      	ldr	r2, [r7, #8]
 800cc4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cc4e:	68ba      	ldr	r2, [r7, #8]
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	429a      	cmp	r2, r3
 800cc54:	d209      	bcs.n	800cc6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc56:	4b12      	ldr	r3, [pc, #72]	; (800cca0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	4b0f      	ldr	r3, [pc, #60]	; (800cc98 <prvAddCurrentTaskToDelayedList+0x94>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	3304      	adds	r3, #4
 800cc60:	4619      	mov	r1, r3
 800cc62:	4610      	mov	r0, r2
 800cc64:	f7fe f8fb 	bl	800ae5e <vListInsert>
}
 800cc68:	e010      	b.n	800cc8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc6a:	4b0e      	ldr	r3, [pc, #56]	; (800cca4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cc6c:	681a      	ldr	r2, [r3, #0]
 800cc6e:	4b0a      	ldr	r3, [pc, #40]	; (800cc98 <prvAddCurrentTaskToDelayedList+0x94>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	3304      	adds	r3, #4
 800cc74:	4619      	mov	r1, r3
 800cc76:	4610      	mov	r0, r2
 800cc78:	f7fe f8f1 	bl	800ae5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cc7c:	4b0a      	ldr	r3, [pc, #40]	; (800cca8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	68ba      	ldr	r2, [r7, #8]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d202      	bcs.n	800cc8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cc86:	4a08      	ldr	r2, [pc, #32]	; (800cca8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	6013      	str	r3, [r2, #0]
}
 800cc8c:	bf00      	nop
 800cc8e:	3710      	adds	r7, #16
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}
 800cc94:	240014c0 	.word	0x240014c0
 800cc98:	24000fe8 	.word	0x24000fe8
 800cc9c:	240014a8 	.word	0x240014a8
 800cca0:	24001478 	.word	0x24001478
 800cca4:	24001474 	.word	0x24001474
 800cca8:	240014dc 	.word	0x240014dc

0800ccac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b08a      	sub	sp, #40	; 0x28
 800ccb0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ccb6:	f000 fb07 	bl	800d2c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ccba:	4b1c      	ldr	r3, [pc, #112]	; (800cd2c <xTimerCreateTimerTask+0x80>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d021      	beq.n	800cd06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ccca:	1d3a      	adds	r2, r7, #4
 800cccc:	f107 0108 	add.w	r1, r7, #8
 800ccd0:	f107 030c 	add.w	r3, r7, #12
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f7fe f857 	bl	800ad88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ccda:	6879      	ldr	r1, [r7, #4]
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	68fa      	ldr	r2, [r7, #12]
 800cce0:	9202      	str	r2, [sp, #8]
 800cce2:	9301      	str	r3, [sp, #4]
 800cce4:	2302      	movs	r3, #2
 800cce6:	9300      	str	r3, [sp, #0]
 800cce8:	2300      	movs	r3, #0
 800ccea:	460a      	mov	r2, r1
 800ccec:	4910      	ldr	r1, [pc, #64]	; (800cd30 <xTimerCreateTimerTask+0x84>)
 800ccee:	4811      	ldr	r0, [pc, #68]	; (800cd34 <xTimerCreateTimerTask+0x88>)
 800ccf0:	f7fe fe04 	bl	800b8fc <xTaskCreateStatic>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	4a10      	ldr	r2, [pc, #64]	; (800cd38 <xTimerCreateTimerTask+0x8c>)
 800ccf8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ccfa:	4b0f      	ldr	r3, [pc, #60]	; (800cd38 <xTimerCreateTimerTask+0x8c>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d001      	beq.n	800cd06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cd02:	2301      	movs	r3, #1
 800cd04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d10a      	bne.n	800cd22 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd10:	f383 8811 	msr	BASEPRI, r3
 800cd14:	f3bf 8f6f 	isb	sy
 800cd18:	f3bf 8f4f 	dsb	sy
 800cd1c:	613b      	str	r3, [r7, #16]
}
 800cd1e:	bf00      	nop
 800cd20:	e7fe      	b.n	800cd20 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cd22:	697b      	ldr	r3, [r7, #20]
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3718      	adds	r7, #24
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	24001518 	.word	0x24001518
 800cd30:	0801333c 	.word	0x0801333c
 800cd34:	0800ce71 	.word	0x0800ce71
 800cd38:	2400151c 	.word	0x2400151c

0800cd3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b08a      	sub	sp, #40	; 0x28
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
 800cd48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d10a      	bne.n	800cd6a <xTimerGenericCommand+0x2e>
	__asm volatile
 800cd54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd58:	f383 8811 	msr	BASEPRI, r3
 800cd5c:	f3bf 8f6f 	isb	sy
 800cd60:	f3bf 8f4f 	dsb	sy
 800cd64:	623b      	str	r3, [r7, #32]
}
 800cd66:	bf00      	nop
 800cd68:	e7fe      	b.n	800cd68 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cd6a:	4b1a      	ldr	r3, [pc, #104]	; (800cdd4 <xTimerGenericCommand+0x98>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d02a      	beq.n	800cdc8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	2b05      	cmp	r3, #5
 800cd82:	dc18      	bgt.n	800cdb6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cd84:	f7ff fd14 	bl	800c7b0 <xTaskGetSchedulerState>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	2b02      	cmp	r3, #2
 800cd8c:	d109      	bne.n	800cda2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cd8e:	4b11      	ldr	r3, [pc, #68]	; (800cdd4 <xTimerGenericCommand+0x98>)
 800cd90:	6818      	ldr	r0, [r3, #0]
 800cd92:	f107 0110 	add.w	r1, r7, #16
 800cd96:	2300      	movs	r3, #0
 800cd98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd9a:	f7fe f9c7 	bl	800b12c <xQueueGenericSend>
 800cd9e:	6278      	str	r0, [r7, #36]	; 0x24
 800cda0:	e012      	b.n	800cdc8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cda2:	4b0c      	ldr	r3, [pc, #48]	; (800cdd4 <xTimerGenericCommand+0x98>)
 800cda4:	6818      	ldr	r0, [r3, #0]
 800cda6:	f107 0110 	add.w	r1, r7, #16
 800cdaa:	2300      	movs	r3, #0
 800cdac:	2200      	movs	r2, #0
 800cdae:	f7fe f9bd 	bl	800b12c <xQueueGenericSend>
 800cdb2:	6278      	str	r0, [r7, #36]	; 0x24
 800cdb4:	e008      	b.n	800cdc8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cdb6:	4b07      	ldr	r3, [pc, #28]	; (800cdd4 <xTimerGenericCommand+0x98>)
 800cdb8:	6818      	ldr	r0, [r3, #0]
 800cdba:	f107 0110 	add.w	r1, r7, #16
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	683a      	ldr	r2, [r7, #0]
 800cdc2:	f7fe fab1 	bl	800b328 <xQueueGenericSendFromISR>
 800cdc6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3728      	adds	r7, #40	; 0x28
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
 800cdd2:	bf00      	nop
 800cdd4:	24001518 	.word	0x24001518

0800cdd8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b088      	sub	sp, #32
 800cddc:	af02      	add	r7, sp, #8
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cde2:	4b22      	ldr	r3, [pc, #136]	; (800ce6c <prvProcessExpiredTimer+0x94>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	68db      	ldr	r3, [r3, #12]
 800cde8:	68db      	ldr	r3, [r3, #12]
 800cdea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	3304      	adds	r3, #4
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7fe f86d 	bl	800aed0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cdfc:	f003 0304 	and.w	r3, r3, #4
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d022      	beq.n	800ce4a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	699a      	ldr	r2, [r3, #24]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	18d1      	adds	r1, r2, r3
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	683a      	ldr	r2, [r7, #0]
 800ce10:	6978      	ldr	r0, [r7, #20]
 800ce12:	f000 f8d1 	bl	800cfb8 <prvInsertTimerInActiveList>
 800ce16:	4603      	mov	r3, r0
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d01f      	beq.n	800ce5c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	9300      	str	r3, [sp, #0]
 800ce20:	2300      	movs	r3, #0
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	2100      	movs	r1, #0
 800ce26:	6978      	ldr	r0, [r7, #20]
 800ce28:	f7ff ff88 	bl	800cd3c <xTimerGenericCommand>
 800ce2c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d113      	bne.n	800ce5c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ce34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce38:	f383 8811 	msr	BASEPRI, r3
 800ce3c:	f3bf 8f6f 	isb	sy
 800ce40:	f3bf 8f4f 	dsb	sy
 800ce44:	60fb      	str	r3, [r7, #12]
}
 800ce46:	bf00      	nop
 800ce48:	e7fe      	b.n	800ce48 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce50:	f023 0301 	bic.w	r3, r3, #1
 800ce54:	b2da      	uxtb	r2, r3
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	6a1b      	ldr	r3, [r3, #32]
 800ce60:	6978      	ldr	r0, [r7, #20]
 800ce62:	4798      	blx	r3
}
 800ce64:	bf00      	nop
 800ce66:	3718      	adds	r7, #24
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	24001510 	.word	0x24001510

0800ce70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b084      	sub	sp, #16
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ce78:	f107 0308 	add.w	r3, r7, #8
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f000 f857 	bl	800cf30 <prvGetNextExpireTime>
 800ce82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	4619      	mov	r1, r3
 800ce88:	68f8      	ldr	r0, [r7, #12]
 800ce8a:	f000 f803 	bl	800ce94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ce8e:	f000 f8d5 	bl	800d03c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ce92:	e7f1      	b.n	800ce78 <prvTimerTask+0x8>

0800ce94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b084      	sub	sp, #16
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ce9e:	f7ff f879 	bl	800bf94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cea2:	f107 0308 	add.w	r3, r7, #8
 800cea6:	4618      	mov	r0, r3
 800cea8:	f000 f866 	bl	800cf78 <prvSampleTimeNow>
 800ceac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d130      	bne.n	800cf16 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d10a      	bne.n	800ced0 <prvProcessTimerOrBlockTask+0x3c>
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d806      	bhi.n	800ced0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cec2:	f7ff f875 	bl	800bfb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cec6:	68f9      	ldr	r1, [r7, #12]
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f7ff ff85 	bl	800cdd8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cece:	e024      	b.n	800cf1a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d008      	beq.n	800cee8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ced6:	4b13      	ldr	r3, [pc, #76]	; (800cf24 <prvProcessTimerOrBlockTask+0x90>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d101      	bne.n	800cee4 <prvProcessTimerOrBlockTask+0x50>
 800cee0:	2301      	movs	r3, #1
 800cee2:	e000      	b.n	800cee6 <prvProcessTimerOrBlockTask+0x52>
 800cee4:	2300      	movs	r3, #0
 800cee6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cee8:	4b0f      	ldr	r3, [pc, #60]	; (800cf28 <prvProcessTimerOrBlockTask+0x94>)
 800ceea:	6818      	ldr	r0, [r3, #0]
 800ceec:	687a      	ldr	r2, [r7, #4]
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	1ad3      	subs	r3, r2, r3
 800cef2:	683a      	ldr	r2, [r7, #0]
 800cef4:	4619      	mov	r1, r3
 800cef6:	f7fe fccd 	bl	800b894 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cefa:	f7ff f859 	bl	800bfb0 <xTaskResumeAll>
 800cefe:	4603      	mov	r3, r0
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d10a      	bne.n	800cf1a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cf04:	4b09      	ldr	r3, [pc, #36]	; (800cf2c <prvProcessTimerOrBlockTask+0x98>)
 800cf06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf0a:	601a      	str	r2, [r3, #0]
 800cf0c:	f3bf 8f4f 	dsb	sy
 800cf10:	f3bf 8f6f 	isb	sy
}
 800cf14:	e001      	b.n	800cf1a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cf16:	f7ff f84b 	bl	800bfb0 <xTaskResumeAll>
}
 800cf1a:	bf00      	nop
 800cf1c:	3710      	adds	r7, #16
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	bf00      	nop
 800cf24:	24001514 	.word	0x24001514
 800cf28:	24001518 	.word	0x24001518
 800cf2c:	e000ed04 	.word	0xe000ed04

0800cf30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cf30:	b480      	push	{r7}
 800cf32:	b085      	sub	sp, #20
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cf38:	4b0e      	ldr	r3, [pc, #56]	; (800cf74 <prvGetNextExpireTime+0x44>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d101      	bne.n	800cf46 <prvGetNextExpireTime+0x16>
 800cf42:	2201      	movs	r2, #1
 800cf44:	e000      	b.n	800cf48 <prvGetNextExpireTime+0x18>
 800cf46:	2200      	movs	r2, #0
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d105      	bne.n	800cf60 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf54:	4b07      	ldr	r3, [pc, #28]	; (800cf74 <prvGetNextExpireTime+0x44>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	68db      	ldr	r3, [r3, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	60fb      	str	r3, [r7, #12]
 800cf5e:	e001      	b.n	800cf64 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cf60:	2300      	movs	r3, #0
 800cf62:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cf64:	68fb      	ldr	r3, [r7, #12]
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3714      	adds	r7, #20
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr
 800cf72:	bf00      	nop
 800cf74:	24001510 	.word	0x24001510

0800cf78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b084      	sub	sp, #16
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cf80:	f7ff f8b4 	bl	800c0ec <xTaskGetTickCount>
 800cf84:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cf86:	4b0b      	ldr	r3, [pc, #44]	; (800cfb4 <prvSampleTimeNow+0x3c>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	68fa      	ldr	r2, [r7, #12]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d205      	bcs.n	800cf9c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cf90:	f000 f936 	bl	800d200 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2201      	movs	r2, #1
 800cf98:	601a      	str	r2, [r3, #0]
 800cf9a:	e002      	b.n	800cfa2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cfa2:	4a04      	ldr	r2, [pc, #16]	; (800cfb4 <prvSampleTimeNow+0x3c>)
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3710      	adds	r7, #16
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}
 800cfb2:	bf00      	nop
 800cfb4:	24001520 	.word	0x24001520

0800cfb8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b086      	sub	sp, #24
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	60f8      	str	r0, [r7, #12]
 800cfc0:	60b9      	str	r1, [r7, #8]
 800cfc2:	607a      	str	r2, [r7, #4]
 800cfc4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	68ba      	ldr	r2, [r7, #8]
 800cfce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	68fa      	ldr	r2, [r7, #12]
 800cfd4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cfd6:	68ba      	ldr	r2, [r7, #8]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d812      	bhi.n	800d004 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfde:	687a      	ldr	r2, [r7, #4]
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	1ad2      	subs	r2, r2, r3
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	699b      	ldr	r3, [r3, #24]
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d302      	bcc.n	800cff2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cfec:	2301      	movs	r3, #1
 800cfee:	617b      	str	r3, [r7, #20]
 800cff0:	e01b      	b.n	800d02a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cff2:	4b10      	ldr	r3, [pc, #64]	; (800d034 <prvInsertTimerInActiveList+0x7c>)
 800cff4:	681a      	ldr	r2, [r3, #0]
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	3304      	adds	r3, #4
 800cffa:	4619      	mov	r1, r3
 800cffc:	4610      	mov	r0, r2
 800cffe:	f7fd ff2e 	bl	800ae5e <vListInsert>
 800d002:	e012      	b.n	800d02a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d004:	687a      	ldr	r2, [r7, #4]
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	429a      	cmp	r2, r3
 800d00a:	d206      	bcs.n	800d01a <prvInsertTimerInActiveList+0x62>
 800d00c:	68ba      	ldr	r2, [r7, #8]
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	429a      	cmp	r2, r3
 800d012:	d302      	bcc.n	800d01a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d014:	2301      	movs	r3, #1
 800d016:	617b      	str	r3, [r7, #20]
 800d018:	e007      	b.n	800d02a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d01a:	4b07      	ldr	r3, [pc, #28]	; (800d038 <prvInsertTimerInActiveList+0x80>)
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	3304      	adds	r3, #4
 800d022:	4619      	mov	r1, r3
 800d024:	4610      	mov	r0, r2
 800d026:	f7fd ff1a 	bl	800ae5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d02a:	697b      	ldr	r3, [r7, #20]
}
 800d02c:	4618      	mov	r0, r3
 800d02e:	3718      	adds	r7, #24
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}
 800d034:	24001514 	.word	0x24001514
 800d038:	24001510 	.word	0x24001510

0800d03c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b08e      	sub	sp, #56	; 0x38
 800d040:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d042:	e0ca      	b.n	800d1da <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2b00      	cmp	r3, #0
 800d048:	da18      	bge.n	800d07c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d04a:	1d3b      	adds	r3, r7, #4
 800d04c:	3304      	adds	r3, #4
 800d04e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d052:	2b00      	cmp	r3, #0
 800d054:	d10a      	bne.n	800d06c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d05a:	f383 8811 	msr	BASEPRI, r3
 800d05e:	f3bf 8f6f 	isb	sy
 800d062:	f3bf 8f4f 	dsb	sy
 800d066:	61fb      	str	r3, [r7, #28]
}
 800d068:	bf00      	nop
 800d06a:	e7fe      	b.n	800d06a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d072:	6850      	ldr	r0, [r2, #4]
 800d074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d076:	6892      	ldr	r2, [r2, #8]
 800d078:	4611      	mov	r1, r2
 800d07a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	f2c0 80aa 	blt.w	800d1d8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d08a:	695b      	ldr	r3, [r3, #20]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d004      	beq.n	800d09a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d092:	3304      	adds	r3, #4
 800d094:	4618      	mov	r0, r3
 800d096:	f7fd ff1b 	bl	800aed0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d09a:	463b      	mov	r3, r7
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7ff ff6b 	bl	800cf78 <prvSampleTimeNow>
 800d0a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2b09      	cmp	r3, #9
 800d0a8:	f200 8097 	bhi.w	800d1da <prvProcessReceivedCommands+0x19e>
 800d0ac:	a201      	add	r2, pc, #4	; (adr r2, 800d0b4 <prvProcessReceivedCommands+0x78>)
 800d0ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0b2:	bf00      	nop
 800d0b4:	0800d0dd 	.word	0x0800d0dd
 800d0b8:	0800d0dd 	.word	0x0800d0dd
 800d0bc:	0800d0dd 	.word	0x0800d0dd
 800d0c0:	0800d151 	.word	0x0800d151
 800d0c4:	0800d165 	.word	0x0800d165
 800d0c8:	0800d1af 	.word	0x0800d1af
 800d0cc:	0800d0dd 	.word	0x0800d0dd
 800d0d0:	0800d0dd 	.word	0x0800d0dd
 800d0d4:	0800d151 	.word	0x0800d151
 800d0d8:	0800d165 	.word	0x0800d165
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0e2:	f043 0301 	orr.w	r3, r3, #1
 800d0e6:	b2da      	uxtb	r2, r3
 800d0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d0ee:	68ba      	ldr	r2, [r7, #8]
 800d0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f2:	699b      	ldr	r3, [r3, #24]
 800d0f4:	18d1      	adds	r1, r2, r3
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0fc:	f7ff ff5c 	bl	800cfb8 <prvInsertTimerInActiveList>
 800d100:	4603      	mov	r3, r0
 800d102:	2b00      	cmp	r3, #0
 800d104:	d069      	beq.n	800d1da <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d108:	6a1b      	ldr	r3, [r3, #32]
 800d10a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d10c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d110:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d114:	f003 0304 	and.w	r3, r3, #4
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d05e      	beq.n	800d1da <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d11c:	68ba      	ldr	r2, [r7, #8]
 800d11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d120:	699b      	ldr	r3, [r3, #24]
 800d122:	441a      	add	r2, r3
 800d124:	2300      	movs	r3, #0
 800d126:	9300      	str	r3, [sp, #0]
 800d128:	2300      	movs	r3, #0
 800d12a:	2100      	movs	r1, #0
 800d12c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d12e:	f7ff fe05 	bl	800cd3c <xTimerGenericCommand>
 800d132:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d134:	6a3b      	ldr	r3, [r7, #32]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d14f      	bne.n	800d1da <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d13e:	f383 8811 	msr	BASEPRI, r3
 800d142:	f3bf 8f6f 	isb	sy
 800d146:	f3bf 8f4f 	dsb	sy
 800d14a:	61bb      	str	r3, [r7, #24]
}
 800d14c:	bf00      	nop
 800d14e:	e7fe      	b.n	800d14e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d152:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d156:	f023 0301 	bic.w	r3, r3, #1
 800d15a:	b2da      	uxtb	r2, r3
 800d15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d15e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d162:	e03a      	b.n	800d1da <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d166:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d16a:	f043 0301 	orr.w	r3, r3, #1
 800d16e:	b2da      	uxtb	r2, r3
 800d170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d172:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d176:	68ba      	ldr	r2, [r7, #8]
 800d178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d17a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d17e:	699b      	ldr	r3, [r3, #24]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d10a      	bne.n	800d19a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d188:	f383 8811 	msr	BASEPRI, r3
 800d18c:	f3bf 8f6f 	isb	sy
 800d190:	f3bf 8f4f 	dsb	sy
 800d194:	617b      	str	r3, [r7, #20]
}
 800d196:	bf00      	nop
 800d198:	e7fe      	b.n	800d198 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19c:	699a      	ldr	r2, [r3, #24]
 800d19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a0:	18d1      	adds	r1, r2, r3
 800d1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1a8:	f7ff ff06 	bl	800cfb8 <prvInsertTimerInActiveList>
					break;
 800d1ac:	e015      	b.n	800d1da <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1b4:	f003 0302 	and.w	r3, r3, #2
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d103      	bne.n	800d1c4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d1bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1be:	f000 fbdf 	bl	800d980 <vPortFree>
 800d1c2:	e00a      	b.n	800d1da <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1ca:	f023 0301 	bic.w	r3, r3, #1
 800d1ce:	b2da      	uxtb	r2, r3
 800d1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d1d6:	e000      	b.n	800d1da <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d1d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d1da:	4b08      	ldr	r3, [pc, #32]	; (800d1fc <prvProcessReceivedCommands+0x1c0>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	1d39      	adds	r1, r7, #4
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7fe f93c 	bl	800b460 <xQueueReceive>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	f47f af2a 	bne.w	800d044 <prvProcessReceivedCommands+0x8>
	}
}
 800d1f0:	bf00      	nop
 800d1f2:	bf00      	nop
 800d1f4:	3730      	adds	r7, #48	; 0x30
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}
 800d1fa:	bf00      	nop
 800d1fc:	24001518 	.word	0x24001518

0800d200 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b088      	sub	sp, #32
 800d204:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d206:	e048      	b.n	800d29a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d208:	4b2d      	ldr	r3, [pc, #180]	; (800d2c0 <prvSwitchTimerLists+0xc0>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	68db      	ldr	r3, [r3, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d212:	4b2b      	ldr	r3, [pc, #172]	; (800d2c0 <prvSwitchTimerLists+0xc0>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	68db      	ldr	r3, [r3, #12]
 800d218:	68db      	ldr	r3, [r3, #12]
 800d21a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	3304      	adds	r3, #4
 800d220:	4618      	mov	r0, r3
 800d222:	f7fd fe55 	bl	800aed0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	6a1b      	ldr	r3, [r3, #32]
 800d22a:	68f8      	ldr	r0, [r7, #12]
 800d22c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d234:	f003 0304 	and.w	r3, r3, #4
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d02e      	beq.n	800d29a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	699b      	ldr	r3, [r3, #24]
 800d240:	693a      	ldr	r2, [r7, #16]
 800d242:	4413      	add	r3, r2
 800d244:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d246:	68ba      	ldr	r2, [r7, #8]
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d90e      	bls.n	800d26c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	68ba      	ldr	r2, [r7, #8]
 800d252:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	68fa      	ldr	r2, [r7, #12]
 800d258:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d25a:	4b19      	ldr	r3, [pc, #100]	; (800d2c0 <prvSwitchTimerLists+0xc0>)
 800d25c:	681a      	ldr	r2, [r3, #0]
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	3304      	adds	r3, #4
 800d262:	4619      	mov	r1, r3
 800d264:	4610      	mov	r0, r2
 800d266:	f7fd fdfa 	bl	800ae5e <vListInsert>
 800d26a:	e016      	b.n	800d29a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d26c:	2300      	movs	r3, #0
 800d26e:	9300      	str	r3, [sp, #0]
 800d270:	2300      	movs	r3, #0
 800d272:	693a      	ldr	r2, [r7, #16]
 800d274:	2100      	movs	r1, #0
 800d276:	68f8      	ldr	r0, [r7, #12]
 800d278:	f7ff fd60 	bl	800cd3c <xTimerGenericCommand>
 800d27c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d10a      	bne.n	800d29a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d288:	f383 8811 	msr	BASEPRI, r3
 800d28c:	f3bf 8f6f 	isb	sy
 800d290:	f3bf 8f4f 	dsb	sy
 800d294:	603b      	str	r3, [r7, #0]
}
 800d296:	bf00      	nop
 800d298:	e7fe      	b.n	800d298 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d29a:	4b09      	ldr	r3, [pc, #36]	; (800d2c0 <prvSwitchTimerLists+0xc0>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d1b1      	bne.n	800d208 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d2a4:	4b06      	ldr	r3, [pc, #24]	; (800d2c0 <prvSwitchTimerLists+0xc0>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d2aa:	4b06      	ldr	r3, [pc, #24]	; (800d2c4 <prvSwitchTimerLists+0xc4>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4a04      	ldr	r2, [pc, #16]	; (800d2c0 <prvSwitchTimerLists+0xc0>)
 800d2b0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d2b2:	4a04      	ldr	r2, [pc, #16]	; (800d2c4 <prvSwitchTimerLists+0xc4>)
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	6013      	str	r3, [r2, #0]
}
 800d2b8:	bf00      	nop
 800d2ba:	3718      	adds	r7, #24
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}
 800d2c0:	24001510 	.word	0x24001510
 800d2c4:	24001514 	.word	0x24001514

0800d2c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b082      	sub	sp, #8
 800d2cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d2ce:	f000 f969 	bl	800d5a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d2d2:	4b15      	ldr	r3, [pc, #84]	; (800d328 <prvCheckForValidListAndQueue+0x60>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d120      	bne.n	800d31c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d2da:	4814      	ldr	r0, [pc, #80]	; (800d32c <prvCheckForValidListAndQueue+0x64>)
 800d2dc:	f7fd fd6e 	bl	800adbc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d2e0:	4813      	ldr	r0, [pc, #76]	; (800d330 <prvCheckForValidListAndQueue+0x68>)
 800d2e2:	f7fd fd6b 	bl	800adbc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d2e6:	4b13      	ldr	r3, [pc, #76]	; (800d334 <prvCheckForValidListAndQueue+0x6c>)
 800d2e8:	4a10      	ldr	r2, [pc, #64]	; (800d32c <prvCheckForValidListAndQueue+0x64>)
 800d2ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d2ec:	4b12      	ldr	r3, [pc, #72]	; (800d338 <prvCheckForValidListAndQueue+0x70>)
 800d2ee:	4a10      	ldr	r2, [pc, #64]	; (800d330 <prvCheckForValidListAndQueue+0x68>)
 800d2f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	9300      	str	r3, [sp, #0]
 800d2f6:	4b11      	ldr	r3, [pc, #68]	; (800d33c <prvCheckForValidListAndQueue+0x74>)
 800d2f8:	4a11      	ldr	r2, [pc, #68]	; (800d340 <prvCheckForValidListAndQueue+0x78>)
 800d2fa:	2110      	movs	r1, #16
 800d2fc:	200a      	movs	r0, #10
 800d2fe:	f7fd fe79 	bl	800aff4 <xQueueGenericCreateStatic>
 800d302:	4603      	mov	r3, r0
 800d304:	4a08      	ldr	r2, [pc, #32]	; (800d328 <prvCheckForValidListAndQueue+0x60>)
 800d306:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d308:	4b07      	ldr	r3, [pc, #28]	; (800d328 <prvCheckForValidListAndQueue+0x60>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d005      	beq.n	800d31c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d310:	4b05      	ldr	r3, [pc, #20]	; (800d328 <prvCheckForValidListAndQueue+0x60>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	490b      	ldr	r1, [pc, #44]	; (800d344 <prvCheckForValidListAndQueue+0x7c>)
 800d316:	4618      	mov	r0, r3
 800d318:	f7fe fa92 	bl	800b840 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d31c:	f000 f972 	bl	800d604 <vPortExitCritical>
}
 800d320:	bf00      	nop
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop
 800d328:	24001518 	.word	0x24001518
 800d32c:	240014e8 	.word	0x240014e8
 800d330:	240014fc 	.word	0x240014fc
 800d334:	24001510 	.word	0x24001510
 800d338:	24001514 	.word	0x24001514
 800d33c:	240015c4 	.word	0x240015c4
 800d340:	24001524 	.word	0x24001524
 800d344:	08013344 	.word	0x08013344

0800d348 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d348:	b480      	push	{r7}
 800d34a:	b085      	sub	sp, #20
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	60f8      	str	r0, [r7, #12]
 800d350:	60b9      	str	r1, [r7, #8]
 800d352:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	3b04      	subs	r3, #4
 800d358:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	3b04      	subs	r3, #4
 800d366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	f023 0201 	bic.w	r2, r3, #1
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	3b04      	subs	r3, #4
 800d376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d378:	4a0c      	ldr	r2, [pc, #48]	; (800d3ac <pxPortInitialiseStack+0x64>)
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	3b14      	subs	r3, #20
 800d382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d384:	687a      	ldr	r2, [r7, #4]
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	3b04      	subs	r3, #4
 800d38e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	f06f 0202 	mvn.w	r2, #2
 800d396:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	3b20      	subs	r3, #32
 800d39c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d39e:	68fb      	ldr	r3, [r7, #12]
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3714      	adds	r7, #20
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3aa:	4770      	bx	lr
 800d3ac:	0800d3b1 	.word	0x0800d3b1

0800d3b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b085      	sub	sp, #20
 800d3b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d3ba:	4b12      	ldr	r3, [pc, #72]	; (800d404 <prvTaskExitError+0x54>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3c2:	d00a      	beq.n	800d3da <prvTaskExitError+0x2a>
	__asm volatile
 800d3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c8:	f383 8811 	msr	BASEPRI, r3
 800d3cc:	f3bf 8f6f 	isb	sy
 800d3d0:	f3bf 8f4f 	dsb	sy
 800d3d4:	60fb      	str	r3, [r7, #12]
}
 800d3d6:	bf00      	nop
 800d3d8:	e7fe      	b.n	800d3d8 <prvTaskExitError+0x28>
	__asm volatile
 800d3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3de:	f383 8811 	msr	BASEPRI, r3
 800d3e2:	f3bf 8f6f 	isb	sy
 800d3e6:	f3bf 8f4f 	dsb	sy
 800d3ea:	60bb      	str	r3, [r7, #8]
}
 800d3ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d3ee:	bf00      	nop
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d0fc      	beq.n	800d3f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d3f6:	bf00      	nop
 800d3f8:	bf00      	nop
 800d3fa:	3714      	adds	r7, #20
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr
 800d404:	24000010 	.word	0x24000010
	...

0800d410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d410:	4b07      	ldr	r3, [pc, #28]	; (800d430 <pxCurrentTCBConst2>)
 800d412:	6819      	ldr	r1, [r3, #0]
 800d414:	6808      	ldr	r0, [r1, #0]
 800d416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d41a:	f380 8809 	msr	PSP, r0
 800d41e:	f3bf 8f6f 	isb	sy
 800d422:	f04f 0000 	mov.w	r0, #0
 800d426:	f380 8811 	msr	BASEPRI, r0
 800d42a:	4770      	bx	lr
 800d42c:	f3af 8000 	nop.w

0800d430 <pxCurrentTCBConst2>:
 800d430:	24000fe8 	.word	0x24000fe8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d434:	bf00      	nop
 800d436:	bf00      	nop

0800d438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d438:	4808      	ldr	r0, [pc, #32]	; (800d45c <prvPortStartFirstTask+0x24>)
 800d43a:	6800      	ldr	r0, [r0, #0]
 800d43c:	6800      	ldr	r0, [r0, #0]
 800d43e:	f380 8808 	msr	MSP, r0
 800d442:	f04f 0000 	mov.w	r0, #0
 800d446:	f380 8814 	msr	CONTROL, r0
 800d44a:	b662      	cpsie	i
 800d44c:	b661      	cpsie	f
 800d44e:	f3bf 8f4f 	dsb	sy
 800d452:	f3bf 8f6f 	isb	sy
 800d456:	df00      	svc	0
 800d458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d45a:	bf00      	nop
 800d45c:	e000ed08 	.word	0xe000ed08

0800d460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b086      	sub	sp, #24
 800d464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d466:	4b46      	ldr	r3, [pc, #280]	; (800d580 <xPortStartScheduler+0x120>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	4a46      	ldr	r2, [pc, #280]	; (800d584 <xPortStartScheduler+0x124>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d10a      	bne.n	800d486 <xPortStartScheduler+0x26>
	__asm volatile
 800d470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d474:	f383 8811 	msr	BASEPRI, r3
 800d478:	f3bf 8f6f 	isb	sy
 800d47c:	f3bf 8f4f 	dsb	sy
 800d480:	613b      	str	r3, [r7, #16]
}
 800d482:	bf00      	nop
 800d484:	e7fe      	b.n	800d484 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d486:	4b3e      	ldr	r3, [pc, #248]	; (800d580 <xPortStartScheduler+0x120>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	4a3f      	ldr	r2, [pc, #252]	; (800d588 <xPortStartScheduler+0x128>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d10a      	bne.n	800d4a6 <xPortStartScheduler+0x46>
	__asm volatile
 800d490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d494:	f383 8811 	msr	BASEPRI, r3
 800d498:	f3bf 8f6f 	isb	sy
 800d49c:	f3bf 8f4f 	dsb	sy
 800d4a0:	60fb      	str	r3, [r7, #12]
}
 800d4a2:	bf00      	nop
 800d4a4:	e7fe      	b.n	800d4a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d4a6:	4b39      	ldr	r3, [pc, #228]	; (800d58c <xPortStartScheduler+0x12c>)
 800d4a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	b2db      	uxtb	r3, r3
 800d4b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	22ff      	movs	r2, #255	; 0xff
 800d4b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	781b      	ldrb	r3, [r3, #0]
 800d4bc:	b2db      	uxtb	r3, r3
 800d4be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d4c0:	78fb      	ldrb	r3, [r7, #3]
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d4c8:	b2da      	uxtb	r2, r3
 800d4ca:	4b31      	ldr	r3, [pc, #196]	; (800d590 <xPortStartScheduler+0x130>)
 800d4cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d4ce:	4b31      	ldr	r3, [pc, #196]	; (800d594 <xPortStartScheduler+0x134>)
 800d4d0:	2207      	movs	r2, #7
 800d4d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d4d4:	e009      	b.n	800d4ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d4d6:	4b2f      	ldr	r3, [pc, #188]	; (800d594 <xPortStartScheduler+0x134>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	3b01      	subs	r3, #1
 800d4dc:	4a2d      	ldr	r2, [pc, #180]	; (800d594 <xPortStartScheduler+0x134>)
 800d4de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d4e0:	78fb      	ldrb	r3, [r7, #3]
 800d4e2:	b2db      	uxtb	r3, r3
 800d4e4:	005b      	lsls	r3, r3, #1
 800d4e6:	b2db      	uxtb	r3, r3
 800d4e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d4ea:	78fb      	ldrb	r3, [r7, #3]
 800d4ec:	b2db      	uxtb	r3, r3
 800d4ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4f2:	2b80      	cmp	r3, #128	; 0x80
 800d4f4:	d0ef      	beq.n	800d4d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d4f6:	4b27      	ldr	r3, [pc, #156]	; (800d594 <xPortStartScheduler+0x134>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f1c3 0307 	rsb	r3, r3, #7
 800d4fe:	2b04      	cmp	r3, #4
 800d500:	d00a      	beq.n	800d518 <xPortStartScheduler+0xb8>
	__asm volatile
 800d502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d506:	f383 8811 	msr	BASEPRI, r3
 800d50a:	f3bf 8f6f 	isb	sy
 800d50e:	f3bf 8f4f 	dsb	sy
 800d512:	60bb      	str	r3, [r7, #8]
}
 800d514:	bf00      	nop
 800d516:	e7fe      	b.n	800d516 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d518:	4b1e      	ldr	r3, [pc, #120]	; (800d594 <xPortStartScheduler+0x134>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	021b      	lsls	r3, r3, #8
 800d51e:	4a1d      	ldr	r2, [pc, #116]	; (800d594 <xPortStartScheduler+0x134>)
 800d520:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d522:	4b1c      	ldr	r3, [pc, #112]	; (800d594 <xPortStartScheduler+0x134>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d52a:	4a1a      	ldr	r2, [pc, #104]	; (800d594 <xPortStartScheduler+0x134>)
 800d52c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	b2da      	uxtb	r2, r3
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d536:	4b18      	ldr	r3, [pc, #96]	; (800d598 <xPortStartScheduler+0x138>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	4a17      	ldr	r2, [pc, #92]	; (800d598 <xPortStartScheduler+0x138>)
 800d53c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d540:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d542:	4b15      	ldr	r3, [pc, #84]	; (800d598 <xPortStartScheduler+0x138>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	4a14      	ldr	r2, [pc, #80]	; (800d598 <xPortStartScheduler+0x138>)
 800d548:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d54c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d54e:	f000 f8dd 	bl	800d70c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d552:	4b12      	ldr	r3, [pc, #72]	; (800d59c <xPortStartScheduler+0x13c>)
 800d554:	2200      	movs	r2, #0
 800d556:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d558:	f000 f8fc 	bl	800d754 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d55c:	4b10      	ldr	r3, [pc, #64]	; (800d5a0 <xPortStartScheduler+0x140>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4a0f      	ldr	r2, [pc, #60]	; (800d5a0 <xPortStartScheduler+0x140>)
 800d562:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d566:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d568:	f7ff ff66 	bl	800d438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d56c:	f7fe fe9a 	bl	800c2a4 <vTaskSwitchContext>
	prvTaskExitError();
 800d570:	f7ff ff1e 	bl	800d3b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d574:	2300      	movs	r3, #0
}
 800d576:	4618      	mov	r0, r3
 800d578:	3718      	adds	r7, #24
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
 800d57e:	bf00      	nop
 800d580:	e000ed00 	.word	0xe000ed00
 800d584:	410fc271 	.word	0x410fc271
 800d588:	410fc270 	.word	0x410fc270
 800d58c:	e000e400 	.word	0xe000e400
 800d590:	24001614 	.word	0x24001614
 800d594:	24001618 	.word	0x24001618
 800d598:	e000ed20 	.word	0xe000ed20
 800d59c:	24000010 	.word	0x24000010
 800d5a0:	e000ef34 	.word	0xe000ef34

0800d5a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b083      	sub	sp, #12
 800d5a8:	af00      	add	r7, sp, #0
	__asm volatile
 800d5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ae:	f383 8811 	msr	BASEPRI, r3
 800d5b2:	f3bf 8f6f 	isb	sy
 800d5b6:	f3bf 8f4f 	dsb	sy
 800d5ba:	607b      	str	r3, [r7, #4]
}
 800d5bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d5be:	4b0f      	ldr	r3, [pc, #60]	; (800d5fc <vPortEnterCritical+0x58>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	4a0d      	ldr	r2, [pc, #52]	; (800d5fc <vPortEnterCritical+0x58>)
 800d5c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d5c8:	4b0c      	ldr	r3, [pc, #48]	; (800d5fc <vPortEnterCritical+0x58>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d10f      	bne.n	800d5f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d5d0:	4b0b      	ldr	r3, [pc, #44]	; (800d600 <vPortEnterCritical+0x5c>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	b2db      	uxtb	r3, r3
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d00a      	beq.n	800d5f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5de:	f383 8811 	msr	BASEPRI, r3
 800d5e2:	f3bf 8f6f 	isb	sy
 800d5e6:	f3bf 8f4f 	dsb	sy
 800d5ea:	603b      	str	r3, [r7, #0]
}
 800d5ec:	bf00      	nop
 800d5ee:	e7fe      	b.n	800d5ee <vPortEnterCritical+0x4a>
	}
}
 800d5f0:	bf00      	nop
 800d5f2:	370c      	adds	r7, #12
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fa:	4770      	bx	lr
 800d5fc:	24000010 	.word	0x24000010
 800d600:	e000ed04 	.word	0xe000ed04

0800d604 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d604:	b480      	push	{r7}
 800d606:	b083      	sub	sp, #12
 800d608:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d60a:	4b12      	ldr	r3, [pc, #72]	; (800d654 <vPortExitCritical+0x50>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d10a      	bne.n	800d628 <vPortExitCritical+0x24>
	__asm volatile
 800d612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d616:	f383 8811 	msr	BASEPRI, r3
 800d61a:	f3bf 8f6f 	isb	sy
 800d61e:	f3bf 8f4f 	dsb	sy
 800d622:	607b      	str	r3, [r7, #4]
}
 800d624:	bf00      	nop
 800d626:	e7fe      	b.n	800d626 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d628:	4b0a      	ldr	r3, [pc, #40]	; (800d654 <vPortExitCritical+0x50>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	3b01      	subs	r3, #1
 800d62e:	4a09      	ldr	r2, [pc, #36]	; (800d654 <vPortExitCritical+0x50>)
 800d630:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d632:	4b08      	ldr	r3, [pc, #32]	; (800d654 <vPortExitCritical+0x50>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d105      	bne.n	800d646 <vPortExitCritical+0x42>
 800d63a:	2300      	movs	r3, #0
 800d63c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	f383 8811 	msr	BASEPRI, r3
}
 800d644:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d646:	bf00      	nop
 800d648:	370c      	adds	r7, #12
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr
 800d652:	bf00      	nop
 800d654:	24000010 	.word	0x24000010
	...

0800d660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d660:	f3ef 8009 	mrs	r0, PSP
 800d664:	f3bf 8f6f 	isb	sy
 800d668:	4b15      	ldr	r3, [pc, #84]	; (800d6c0 <pxCurrentTCBConst>)
 800d66a:	681a      	ldr	r2, [r3, #0]
 800d66c:	f01e 0f10 	tst.w	lr, #16
 800d670:	bf08      	it	eq
 800d672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d67a:	6010      	str	r0, [r2, #0]
 800d67c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d680:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d684:	f380 8811 	msr	BASEPRI, r0
 800d688:	f3bf 8f4f 	dsb	sy
 800d68c:	f3bf 8f6f 	isb	sy
 800d690:	f7fe fe08 	bl	800c2a4 <vTaskSwitchContext>
 800d694:	f04f 0000 	mov.w	r0, #0
 800d698:	f380 8811 	msr	BASEPRI, r0
 800d69c:	bc09      	pop	{r0, r3}
 800d69e:	6819      	ldr	r1, [r3, #0]
 800d6a0:	6808      	ldr	r0, [r1, #0]
 800d6a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6a6:	f01e 0f10 	tst.w	lr, #16
 800d6aa:	bf08      	it	eq
 800d6ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d6b0:	f380 8809 	msr	PSP, r0
 800d6b4:	f3bf 8f6f 	isb	sy
 800d6b8:	4770      	bx	lr
 800d6ba:	bf00      	nop
 800d6bc:	f3af 8000 	nop.w

0800d6c0 <pxCurrentTCBConst>:
 800d6c0:	24000fe8 	.word	0x24000fe8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d6c4:	bf00      	nop
 800d6c6:	bf00      	nop

0800d6c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
	__asm volatile
 800d6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d2:	f383 8811 	msr	BASEPRI, r3
 800d6d6:	f3bf 8f6f 	isb	sy
 800d6da:	f3bf 8f4f 	dsb	sy
 800d6de:	607b      	str	r3, [r7, #4]
}
 800d6e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d6e2:	f7fe fd25 	bl	800c130 <xTaskIncrementTick>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d003      	beq.n	800d6f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d6ec:	4b06      	ldr	r3, [pc, #24]	; (800d708 <xPortSysTickHandler+0x40>)
 800d6ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6f2:	601a      	str	r2, [r3, #0]
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	f383 8811 	msr	BASEPRI, r3
}
 800d6fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d700:	bf00      	nop
 800d702:	3708      	adds	r7, #8
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}
 800d708:	e000ed04 	.word	0xe000ed04

0800d70c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d70c:	b480      	push	{r7}
 800d70e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d710:	4b0b      	ldr	r3, [pc, #44]	; (800d740 <vPortSetupTimerInterrupt+0x34>)
 800d712:	2200      	movs	r2, #0
 800d714:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d716:	4b0b      	ldr	r3, [pc, #44]	; (800d744 <vPortSetupTimerInterrupt+0x38>)
 800d718:	2200      	movs	r2, #0
 800d71a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d71c:	4b0a      	ldr	r3, [pc, #40]	; (800d748 <vPortSetupTimerInterrupt+0x3c>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4a0a      	ldr	r2, [pc, #40]	; (800d74c <vPortSetupTimerInterrupt+0x40>)
 800d722:	fba2 2303 	umull	r2, r3, r2, r3
 800d726:	099b      	lsrs	r3, r3, #6
 800d728:	4a09      	ldr	r2, [pc, #36]	; (800d750 <vPortSetupTimerInterrupt+0x44>)
 800d72a:	3b01      	subs	r3, #1
 800d72c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d72e:	4b04      	ldr	r3, [pc, #16]	; (800d740 <vPortSetupTimerInterrupt+0x34>)
 800d730:	2207      	movs	r2, #7
 800d732:	601a      	str	r2, [r3, #0]
}
 800d734:	bf00      	nop
 800d736:	46bd      	mov	sp, r7
 800d738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73c:	4770      	bx	lr
 800d73e:	bf00      	nop
 800d740:	e000e010 	.word	0xe000e010
 800d744:	e000e018 	.word	0xe000e018
 800d748:	24000000 	.word	0x24000000
 800d74c:	10624dd3 	.word	0x10624dd3
 800d750:	e000e014 	.word	0xe000e014

0800d754 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d754:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d764 <vPortEnableVFP+0x10>
 800d758:	6801      	ldr	r1, [r0, #0]
 800d75a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d75e:	6001      	str	r1, [r0, #0]
 800d760:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d762:	bf00      	nop
 800d764:	e000ed88 	.word	0xe000ed88

0800d768 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d768:	b480      	push	{r7}
 800d76a:	b085      	sub	sp, #20
 800d76c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d76e:	f3ef 8305 	mrs	r3, IPSR
 800d772:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	2b0f      	cmp	r3, #15
 800d778:	d914      	bls.n	800d7a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d77a:	4a17      	ldr	r2, [pc, #92]	; (800d7d8 <vPortValidateInterruptPriority+0x70>)
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	4413      	add	r3, r2
 800d780:	781b      	ldrb	r3, [r3, #0]
 800d782:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d784:	4b15      	ldr	r3, [pc, #84]	; (800d7dc <vPortValidateInterruptPriority+0x74>)
 800d786:	781b      	ldrb	r3, [r3, #0]
 800d788:	7afa      	ldrb	r2, [r7, #11]
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d20a      	bcs.n	800d7a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d792:	f383 8811 	msr	BASEPRI, r3
 800d796:	f3bf 8f6f 	isb	sy
 800d79a:	f3bf 8f4f 	dsb	sy
 800d79e:	607b      	str	r3, [r7, #4]
}
 800d7a0:	bf00      	nop
 800d7a2:	e7fe      	b.n	800d7a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d7a4:	4b0e      	ldr	r3, [pc, #56]	; (800d7e0 <vPortValidateInterruptPriority+0x78>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d7ac:	4b0d      	ldr	r3, [pc, #52]	; (800d7e4 <vPortValidateInterruptPriority+0x7c>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d90a      	bls.n	800d7ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b8:	f383 8811 	msr	BASEPRI, r3
 800d7bc:	f3bf 8f6f 	isb	sy
 800d7c0:	f3bf 8f4f 	dsb	sy
 800d7c4:	603b      	str	r3, [r7, #0]
}
 800d7c6:	bf00      	nop
 800d7c8:	e7fe      	b.n	800d7c8 <vPortValidateInterruptPriority+0x60>
	}
 800d7ca:	bf00      	nop
 800d7cc:	3714      	adds	r7, #20
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d4:	4770      	bx	lr
 800d7d6:	bf00      	nop
 800d7d8:	e000e3f0 	.word	0xe000e3f0
 800d7dc:	24001614 	.word	0x24001614
 800d7e0:	e000ed0c 	.word	0xe000ed0c
 800d7e4:	24001618 	.word	0x24001618

0800d7e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b08a      	sub	sp, #40	; 0x28
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d7f4:	f7fe fbce 	bl	800bf94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d7f8:	4b5b      	ldr	r3, [pc, #364]	; (800d968 <pvPortMalloc+0x180>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d101      	bne.n	800d804 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d800:	f000 f920 	bl	800da44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d804:	4b59      	ldr	r3, [pc, #356]	; (800d96c <pvPortMalloc+0x184>)
 800d806:	681a      	ldr	r2, [r3, #0]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	4013      	ands	r3, r2
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	f040 8093 	bne.w	800d938 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d01d      	beq.n	800d854 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d818:	2208      	movs	r2, #8
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	4413      	add	r3, r2
 800d81e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f003 0307 	and.w	r3, r3, #7
 800d826:	2b00      	cmp	r3, #0
 800d828:	d014      	beq.n	800d854 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f023 0307 	bic.w	r3, r3, #7
 800d830:	3308      	adds	r3, #8
 800d832:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f003 0307 	and.w	r3, r3, #7
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d00a      	beq.n	800d854 <pvPortMalloc+0x6c>
	__asm volatile
 800d83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d842:	f383 8811 	msr	BASEPRI, r3
 800d846:	f3bf 8f6f 	isb	sy
 800d84a:	f3bf 8f4f 	dsb	sy
 800d84e:	617b      	str	r3, [r7, #20]
}
 800d850:	bf00      	nop
 800d852:	e7fe      	b.n	800d852 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d06e      	beq.n	800d938 <pvPortMalloc+0x150>
 800d85a:	4b45      	ldr	r3, [pc, #276]	; (800d970 <pvPortMalloc+0x188>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	687a      	ldr	r2, [r7, #4]
 800d860:	429a      	cmp	r2, r3
 800d862:	d869      	bhi.n	800d938 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d864:	4b43      	ldr	r3, [pc, #268]	; (800d974 <pvPortMalloc+0x18c>)
 800d866:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d868:	4b42      	ldr	r3, [pc, #264]	; (800d974 <pvPortMalloc+0x18c>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d86e:	e004      	b.n	800d87a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d872:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87c:	685b      	ldr	r3, [r3, #4]
 800d87e:	687a      	ldr	r2, [r7, #4]
 800d880:	429a      	cmp	r2, r3
 800d882:	d903      	bls.n	800d88c <pvPortMalloc+0xa4>
 800d884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d1f1      	bne.n	800d870 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d88c:	4b36      	ldr	r3, [pc, #216]	; (800d968 <pvPortMalloc+0x180>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d892:	429a      	cmp	r2, r3
 800d894:	d050      	beq.n	800d938 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d896:	6a3b      	ldr	r3, [r7, #32]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	2208      	movs	r2, #8
 800d89c:	4413      	add	r3, r2
 800d89e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a2:	681a      	ldr	r2, [r3, #0]
 800d8a4:	6a3b      	ldr	r3, [r7, #32]
 800d8a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8aa:	685a      	ldr	r2, [r3, #4]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	1ad2      	subs	r2, r2, r3
 800d8b0:	2308      	movs	r3, #8
 800d8b2:	005b      	lsls	r3, r3, #1
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d91f      	bls.n	800d8f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d8b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	4413      	add	r3, r2
 800d8be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d8c0:	69bb      	ldr	r3, [r7, #24]
 800d8c2:	f003 0307 	and.w	r3, r3, #7
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d00a      	beq.n	800d8e0 <pvPortMalloc+0xf8>
	__asm volatile
 800d8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ce:	f383 8811 	msr	BASEPRI, r3
 800d8d2:	f3bf 8f6f 	isb	sy
 800d8d6:	f3bf 8f4f 	dsb	sy
 800d8da:	613b      	str	r3, [r7, #16]
}
 800d8dc:	bf00      	nop
 800d8de:	e7fe      	b.n	800d8de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e2:	685a      	ldr	r2, [r3, #4]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	1ad2      	subs	r2, r2, r3
 800d8e8:	69bb      	ldr	r3, [r7, #24]
 800d8ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ee:	687a      	ldr	r2, [r7, #4]
 800d8f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d8f2:	69b8      	ldr	r0, [r7, #24]
 800d8f4:	f000 f908 	bl	800db08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d8f8:	4b1d      	ldr	r3, [pc, #116]	; (800d970 <pvPortMalloc+0x188>)
 800d8fa:	681a      	ldr	r2, [r3, #0]
 800d8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fe:	685b      	ldr	r3, [r3, #4]
 800d900:	1ad3      	subs	r3, r2, r3
 800d902:	4a1b      	ldr	r2, [pc, #108]	; (800d970 <pvPortMalloc+0x188>)
 800d904:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d906:	4b1a      	ldr	r3, [pc, #104]	; (800d970 <pvPortMalloc+0x188>)
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	4b1b      	ldr	r3, [pc, #108]	; (800d978 <pvPortMalloc+0x190>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	429a      	cmp	r2, r3
 800d910:	d203      	bcs.n	800d91a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d912:	4b17      	ldr	r3, [pc, #92]	; (800d970 <pvPortMalloc+0x188>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	4a18      	ldr	r2, [pc, #96]	; (800d978 <pvPortMalloc+0x190>)
 800d918:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d91c:	685a      	ldr	r2, [r3, #4]
 800d91e:	4b13      	ldr	r3, [pc, #76]	; (800d96c <pvPortMalloc+0x184>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	431a      	orrs	r2, r3
 800d924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d926:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92a:	2200      	movs	r2, #0
 800d92c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d92e:	4b13      	ldr	r3, [pc, #76]	; (800d97c <pvPortMalloc+0x194>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	3301      	adds	r3, #1
 800d934:	4a11      	ldr	r2, [pc, #68]	; (800d97c <pvPortMalloc+0x194>)
 800d936:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d938:	f7fe fb3a 	bl	800bfb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d93c:	69fb      	ldr	r3, [r7, #28]
 800d93e:	f003 0307 	and.w	r3, r3, #7
 800d942:	2b00      	cmp	r3, #0
 800d944:	d00a      	beq.n	800d95c <pvPortMalloc+0x174>
	__asm volatile
 800d946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d94a:	f383 8811 	msr	BASEPRI, r3
 800d94e:	f3bf 8f6f 	isb	sy
 800d952:	f3bf 8f4f 	dsb	sy
 800d956:	60fb      	str	r3, [r7, #12]
}
 800d958:	bf00      	nop
 800d95a:	e7fe      	b.n	800d95a <pvPortMalloc+0x172>
	return pvReturn;
 800d95c:	69fb      	ldr	r3, [r7, #28]
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3728      	adds	r7, #40	; 0x28
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
 800d966:	bf00      	nop
 800d968:	2400b264 	.word	0x2400b264
 800d96c:	2400b278 	.word	0x2400b278
 800d970:	2400b268 	.word	0x2400b268
 800d974:	2400b25c 	.word	0x2400b25c
 800d978:	2400b26c 	.word	0x2400b26c
 800d97c:	2400b270 	.word	0x2400b270

0800d980 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b086      	sub	sp, #24
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d04d      	beq.n	800da2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d992:	2308      	movs	r3, #8
 800d994:	425b      	negs	r3, r3
 800d996:	697a      	ldr	r2, [r7, #20]
 800d998:	4413      	add	r3, r2
 800d99a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	685a      	ldr	r2, [r3, #4]
 800d9a4:	4b24      	ldr	r3, [pc, #144]	; (800da38 <vPortFree+0xb8>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4013      	ands	r3, r2
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d10a      	bne.n	800d9c4 <vPortFree+0x44>
	__asm volatile
 800d9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b2:	f383 8811 	msr	BASEPRI, r3
 800d9b6:	f3bf 8f6f 	isb	sy
 800d9ba:	f3bf 8f4f 	dsb	sy
 800d9be:	60fb      	str	r3, [r7, #12]
}
 800d9c0:	bf00      	nop
 800d9c2:	e7fe      	b.n	800d9c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d00a      	beq.n	800d9e2 <vPortFree+0x62>
	__asm volatile
 800d9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d0:	f383 8811 	msr	BASEPRI, r3
 800d9d4:	f3bf 8f6f 	isb	sy
 800d9d8:	f3bf 8f4f 	dsb	sy
 800d9dc:	60bb      	str	r3, [r7, #8]
}
 800d9de:	bf00      	nop
 800d9e0:	e7fe      	b.n	800d9e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	685a      	ldr	r2, [r3, #4]
 800d9e6:	4b14      	ldr	r3, [pc, #80]	; (800da38 <vPortFree+0xb8>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	4013      	ands	r3, r2
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d01e      	beq.n	800da2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d11a      	bne.n	800da2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	685a      	ldr	r2, [r3, #4]
 800d9fc:	4b0e      	ldr	r3, [pc, #56]	; (800da38 <vPortFree+0xb8>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	43db      	mvns	r3, r3
 800da02:	401a      	ands	r2, r3
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800da08:	f7fe fac4 	bl	800bf94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	685a      	ldr	r2, [r3, #4]
 800da10:	4b0a      	ldr	r3, [pc, #40]	; (800da3c <vPortFree+0xbc>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4413      	add	r3, r2
 800da16:	4a09      	ldr	r2, [pc, #36]	; (800da3c <vPortFree+0xbc>)
 800da18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800da1a:	6938      	ldr	r0, [r7, #16]
 800da1c:	f000 f874 	bl	800db08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800da20:	4b07      	ldr	r3, [pc, #28]	; (800da40 <vPortFree+0xc0>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	3301      	adds	r3, #1
 800da26:	4a06      	ldr	r2, [pc, #24]	; (800da40 <vPortFree+0xc0>)
 800da28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800da2a:	f7fe fac1 	bl	800bfb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800da2e:	bf00      	nop
 800da30:	3718      	adds	r7, #24
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}
 800da36:	bf00      	nop
 800da38:	2400b278 	.word	0x2400b278
 800da3c:	2400b268 	.word	0x2400b268
 800da40:	2400b274 	.word	0x2400b274

0800da44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800da44:	b480      	push	{r7}
 800da46:	b085      	sub	sp, #20
 800da48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800da4a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800da4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800da50:	4b27      	ldr	r3, [pc, #156]	; (800daf0 <prvHeapInit+0xac>)
 800da52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	f003 0307 	and.w	r3, r3, #7
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d00c      	beq.n	800da78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	3307      	adds	r3, #7
 800da62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f023 0307 	bic.w	r3, r3, #7
 800da6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800da6c:	68ba      	ldr	r2, [r7, #8]
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	1ad3      	subs	r3, r2, r3
 800da72:	4a1f      	ldr	r2, [pc, #124]	; (800daf0 <prvHeapInit+0xac>)
 800da74:	4413      	add	r3, r2
 800da76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800da7c:	4a1d      	ldr	r2, [pc, #116]	; (800daf4 <prvHeapInit+0xb0>)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800da82:	4b1c      	ldr	r3, [pc, #112]	; (800daf4 <prvHeapInit+0xb0>)
 800da84:	2200      	movs	r2, #0
 800da86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	68ba      	ldr	r2, [r7, #8]
 800da8c:	4413      	add	r3, r2
 800da8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800da90:	2208      	movs	r2, #8
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	1a9b      	subs	r3, r3, r2
 800da96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	f023 0307 	bic.w	r3, r3, #7
 800da9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	4a15      	ldr	r2, [pc, #84]	; (800daf8 <prvHeapInit+0xb4>)
 800daa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800daa6:	4b14      	ldr	r3, [pc, #80]	; (800daf8 <prvHeapInit+0xb4>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	2200      	movs	r2, #0
 800daac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800daae:	4b12      	ldr	r3, [pc, #72]	; (800daf8 <prvHeapInit+0xb4>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	2200      	movs	r2, #0
 800dab4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	68fa      	ldr	r2, [r7, #12]
 800dabe:	1ad2      	subs	r2, r2, r3
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dac4:	4b0c      	ldr	r3, [pc, #48]	; (800daf8 <prvHeapInit+0xb4>)
 800dac6:	681a      	ldr	r2, [r3, #0]
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	4a0a      	ldr	r2, [pc, #40]	; (800dafc <prvHeapInit+0xb8>)
 800dad2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	685b      	ldr	r3, [r3, #4]
 800dad8:	4a09      	ldr	r2, [pc, #36]	; (800db00 <prvHeapInit+0xbc>)
 800dada:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dadc:	4b09      	ldr	r3, [pc, #36]	; (800db04 <prvHeapInit+0xc0>)
 800dade:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dae2:	601a      	str	r2, [r3, #0]
}
 800dae4:	bf00      	nop
 800dae6:	3714      	adds	r7, #20
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr
 800daf0:	2400161c 	.word	0x2400161c
 800daf4:	2400b25c 	.word	0x2400b25c
 800daf8:	2400b264 	.word	0x2400b264
 800dafc:	2400b26c 	.word	0x2400b26c
 800db00:	2400b268 	.word	0x2400b268
 800db04:	2400b278 	.word	0x2400b278

0800db08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800db08:	b480      	push	{r7}
 800db0a:	b085      	sub	sp, #20
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800db10:	4b28      	ldr	r3, [pc, #160]	; (800dbb4 <prvInsertBlockIntoFreeList+0xac>)
 800db12:	60fb      	str	r3, [r7, #12]
 800db14:	e002      	b.n	800db1c <prvInsertBlockIntoFreeList+0x14>
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	60fb      	str	r3, [r7, #12]
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	687a      	ldr	r2, [r7, #4]
 800db22:	429a      	cmp	r2, r3
 800db24:	d8f7      	bhi.n	800db16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	68ba      	ldr	r2, [r7, #8]
 800db30:	4413      	add	r3, r2
 800db32:	687a      	ldr	r2, [r7, #4]
 800db34:	429a      	cmp	r2, r3
 800db36:	d108      	bne.n	800db4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	685a      	ldr	r2, [r3, #4]
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	685b      	ldr	r3, [r3, #4]
 800db40:	441a      	add	r2, r3
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	68ba      	ldr	r2, [r7, #8]
 800db54:	441a      	add	r2, r3
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d118      	bne.n	800db90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	681a      	ldr	r2, [r3, #0]
 800db62:	4b15      	ldr	r3, [pc, #84]	; (800dbb8 <prvInsertBlockIntoFreeList+0xb0>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	429a      	cmp	r2, r3
 800db68:	d00d      	beq.n	800db86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	685a      	ldr	r2, [r3, #4]
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	685b      	ldr	r3, [r3, #4]
 800db74:	441a      	add	r2, r3
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	681a      	ldr	r2, [r3, #0]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	601a      	str	r2, [r3, #0]
 800db84:	e008      	b.n	800db98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800db86:	4b0c      	ldr	r3, [pc, #48]	; (800dbb8 <prvInsertBlockIntoFreeList+0xb0>)
 800db88:	681a      	ldr	r2, [r3, #0]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	601a      	str	r2, [r3, #0]
 800db8e:	e003      	b.n	800db98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	681a      	ldr	r2, [r3, #0]
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800db98:	68fa      	ldr	r2, [r7, #12]
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	429a      	cmp	r2, r3
 800db9e:	d002      	beq.n	800dba6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	687a      	ldr	r2, [r7, #4]
 800dba4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dba6:	bf00      	nop
 800dba8:	3714      	adds	r7, #20
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb0:	4770      	bx	lr
 800dbb2:	bf00      	nop
 800dbb4:	2400b25c 	.word	0x2400b25c
 800dbb8:	2400b264 	.word	0x2400b264

0800dbbc <_Z3nopv>:
#include "core_utils_Callback.h"
#include "core_utils_RingBuffer.h"
#include "core_utils_functionpointer.h"
#include "core_utils_registermap.h"

inline void nop(){
 800dbbc:	b480      	push	{r7}
 800dbbe:	af00      	add	r7, sp, #0

}
 800dbc0:	bf00      	nop
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc8:	4770      	bx	lr

0800dbca <_ZN19TWIPR_CommunicationC1Ev>:
	uint8_t a;
	float b;
} test_struct;

/* =======================================================*/
TWIPR_Communication::TWIPR_Communication() {
 800dbca:	b580      	push	{r7, lr}
 800dbcc:	b082      	sub	sp, #8
 800dbce:	af00      	add	r7, sp, #0
 800dbd0:	6078      	str	r0, [r7, #4]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	3308      	adds	r3, #8
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f000 fc9a 	bl	800e510 <_ZN23core_comm_UartInterfaceC1Ev>

}
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3708      	adds	r7, #8
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}
	...

0800dbe8 <_ZN19TWIPR_Communication4initE19twipr_comm_config_t>:

/* =======================================================*/
void TWIPR_Communication::init(twipr_comm_config_t config) {
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6039      	str	r1, [r7, #0]

	// Initialize the UART interface to the Raspberry Pi
	this->uart_cm4.init(config.huart,
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f103 0008 	add.w	r0, r3, #8
 800dbf8:	6839      	ldr	r1, [r7, #0]
 800dbfa:	4b08      	ldr	r3, [pc, #32]	; (800dc1c <_ZN19TWIPR_Communication4initE19twipr_comm_config_t+0x34>)
 800dbfc:	cb0c      	ldmia	r3, {r2, r3}
 800dbfe:	f000 fcb5 	bl	800e56c <_ZN23core_comm_UartInterface4initEP20__UART_HandleTypeDef30core_comm_UartInterface_config>
			twipr_communication_uart_cm4_interface_config);
	this->uart_cm4.registerCallback(CORE_COMM_SERIAL_SOCKET_CB_RX,
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f103 0008 	add.w	r0, r3, #8
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	4a05      	ldr	r2, [pc, #20]	; (800dc20 <_ZN19TWIPR_Communication4initE19twipr_comm_config_t+0x38>)
 800dc0c:	2100      	movs	r1, #0
 800dc0e:	f000 fd4e 	bl	800e6ae <_ZN23core_comm_UartInterface16registerCallbackE28core_comm_SerialSocket_CB_IDPFvPvS1_ES1_>
			uart_cm4_rx_callback, this);
}
 800dc12:	bf00      	nop
 800dc14:	3708      	adds	r7, #8
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}
 800dc1a:	bf00      	nop
 800dc1c:	24000014 	.word	0x24000014
 800dc20:	0800ddc9 	.word	0x0800ddc9

0800dc24 <_ZN19TWIPR_Communication5startEv>:

/* =======================================================*/
void TWIPR_Communication::start() {
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b082      	sub	sp, #8
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]

	// Start the UART interfaces
	this->uart_cm4.start();
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	3308      	adds	r3, #8
 800dc30:	4618      	mov	r0, r3
 800dc32:	f000 fcc5 	bl	800e5c0 <_ZN23core_comm_UartInterface5startEv>

	// Start the board UART interface
//	this->uart_ext.start();

// Start the task
	this->thread = osThreadNew(twipr_comm_task, this, &task_attributes);
 800dc36:	4a06      	ldr	r2, [pc, #24]	; (800dc50 <_ZN19TWIPR_Communication5startEv+0x2c>)
 800dc38:	6879      	ldr	r1, [r7, #4]
 800dc3a:	4806      	ldr	r0, [pc, #24]	; (800dc54 <_ZN19TWIPR_Communication5startEv+0x30>)
 800dc3c:	f7fc ffaf 	bl	800ab9e <osThreadNew>
 800dc40:	4602      	mov	r2, r0
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	601a      	str	r2, [r3, #0]
}
 800dc46:	bf00      	nop
 800dc48:	3708      	adds	r7, #8
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}
 800dc4e:	bf00      	nop
 800dc50:	080133ec 	.word	0x080133ec
 800dc54:	0800dc77 	.word	0x0800dc77

0800dc58 <_ZN19TWIPR_Communication4sendEP23core_comm_SerialMessage>:
	outgoing_msg.len = len;
	this->send(&outgoing_msg);
}

/* =======================================================*/
void TWIPR_Communication::send(core_comm_SerialMessage *msg) {
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	6039      	str	r1, [r7, #0]

	// Check the message

	this->uart_cm4.send(msg);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	3308      	adds	r3, #8
 800dc66:	6839      	ldr	r1, [r7, #0]
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f000 fce9 	bl	800e640 <_ZN23core_comm_UartInterface4sendEP23core_comm_SerialMessage>
}
 800dc6e:	bf00      	nop
 800dc70:	3708      	adds	r7, #8
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}

0800dc76 <_Z15twipr_comm_taskPv>:

/* =======================================================*/
void twipr_comm_task(void *argument) {
 800dc76:	b580      	push	{r7, lr}
 800dc78:	b086      	sub	sp, #24
 800dc7a:	af00      	add	r7, sp, #0
 800dc7c:	6078      	str	r0, [r7, #4]

	TWIPR_Communication *comm = (TWIPR_Communication*) argument;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	617b      	str	r3, [r7, #20]
	comm->task = xTaskGetCurrentTaskHandle();
 800dc82:	f7fe fd85 	bl	800c790 <xTaskGetCurrentTaskHandle>
 800dc86:	4602      	mov	r2, r0
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	605a      	str	r2, [r3, #4]

	xTaskNotifyGive(comm->task);
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	6858      	ldr	r0, [r3, #4]
 800dc90:	2300      	movs	r3, #0
 800dc92:	2202      	movs	r2, #2
 800dc94:	2100      	movs	r1, #0
 800dc96:	f7fe fe63 	bl	800c960 <xTaskGenericNotify>
	nop();
 800dc9a:	f7ff ff8f 	bl	800dbbc <_Z3nopv>

	uint32_t kernel_ticks = 0;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	613b      	str	r3, [r7, #16]
	while (true) {
		kernel_ticks = osKernelGetTickCount();
 800dca2:	f7fc ff67 	bl	800ab74 <osKernelGetTickCount>
 800dca6:	6138      	str	r0, [r7, #16]

		uint32_t ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800dca8:	f04f 31ff 	mov.w	r1, #4294967295
 800dcac:	2001      	movs	r0, #1
 800dcae:	f7fe fe0b 	bl	800c8c8 <ulTaskNotifyTake>
 800dcb2:	60f8      	str	r0, [r7, #12]
		// Do stuff
		comm->task_loop();
 800dcb4:	6978      	ldr	r0, [r7, #20]
 800dcb6:	f000 f801 	bl	800dcbc <_ZN19TWIPR_Communication9task_loopEv>

//		osDelayUntil(kernel_ticks + (uint32_t) 1);
	}
 800dcba:	e7f2      	b.n	800dca2 <_Z15twipr_comm_taskPv+0x2c>

0800dcbc <_ZN19TWIPR_Communication9task_loopEv>:
}

/* =======================================================*/
void TWIPR_Communication::task_loop() {
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b082      	sub	sp, #8
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
	// Check if there is a new message in the CM4 UART
	if (this->uart_cm4.rx_queue.available()) {
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	3310      	adds	r3, #16
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f000 f895 	bl	800ddf8 <_ZN22core_comm_MessageQueueILi10EE9availableEv>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	bf14      	ite	ne
 800dcd4:	2301      	movne	r3, #1
 800dcd6:	2300      	moveq	r3, #0
 800dcd8:	b2db      	uxtb	r3, r3
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d002      	beq.n	800dce4 <_ZN19TWIPR_Communication9task_loopEv+0x28>
		this->_handleIncomingMessages();
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f000 f804 	bl	800dcec <_ZN19TWIPR_Communication23_handleIncomingMessagesEv>
	}
}
 800dce4:	bf00      	nop
 800dce6:	3708      	adds	r7, #8
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <_ZN19TWIPR_Communication23_handleIncomingMessagesEv>:

/* =======================================================*/
void TWIPR_Communication::_handleIncomingMessages() {
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b082      	sub	sp, #8
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
	// Loop through all the messages in the rx queue
	while (this->uart_cm4.rx_queue.available()) {
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	3310      	adds	r3, #16
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f000 f87d 	bl	800ddf8 <_ZN22core_comm_MessageQueueILi10EE9availableEv>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	bf14      	ite	ne
 800dd04:	2301      	movne	r3, #1
 800dd06:	2300      	moveq	r3, #0
 800dd08:	b2db      	uxtb	r3, r3
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d032      	beq.n	800dd74 <_ZN19TWIPR_Communication23_handleIncomingMessagesEv+0x88>
		this->uart_cm4.rx_queue.read(&incoming_msg);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	3310      	adds	r3, #16
 800dd12:	491a      	ldr	r1, [pc, #104]	; (800dd7c <_ZN19TWIPR_Communication23_handleIncomingMessagesEv+0x90>)
 800dd14:	4618      	mov	r0, r3
 800dd16:	f000 f88e 	bl	800de36 <_ZN22core_comm_MessageQueueILi10EE4readEP23core_comm_SerialMessage>
		// TODO

		// Handle the different addresses

		// Handle the different commands
		switch (incoming_msg.cmd) {
 800dd1a:	4b18      	ldr	r3, [pc, #96]	; (800dd7c <_ZN19TWIPR_Communication23_handleIncomingMessagesEv+0x90>)
 800dd1c:	781b      	ldrb	r3, [r3, #0]
 800dd1e:	3b01      	subs	r3, #1
 800dd20:	2b07      	cmp	r3, #7
 800dd22:	d8e7      	bhi.n	800dcf4 <_ZN19TWIPR_Communication23_handleIncomingMessagesEv+0x8>
 800dd24:	a201      	add	r2, pc, #4	; (adr r2, 800dd2c <_ZN19TWIPR_Communication23_handleIncomingMessagesEv+0x40>)
 800dd26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd2a:	bf00      	nop
 800dd2c:	0800dcf5 	.word	0x0800dcf5
 800dd30:	0800dd4d 	.word	0x0800dd4d
 800dd34:	0800dcf5 	.word	0x0800dcf5
 800dd38:	0800dcf5 	.word	0x0800dcf5
 800dd3c:	0800dd57 	.word	0x0800dd57
 800dd40:	0800dd5d 	.word	0x0800dd5d
 800dd44:	0800dd63 	.word	0x0800dd63
 800dd48:	0800dd69 	.word	0x0800dd69
		case MSG_COMMAND_WRITE: {
			break;
		}
		case MSG_COMMAND_READ: {
			this->_handleMessage_read(&incoming_msg);
 800dd4c:	490b      	ldr	r1, [pc, #44]	; (800dd7c <_ZN19TWIPR_Communication23_handleIncomingMessagesEv+0x90>)
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f000 f816 	bl	800dd80 <_ZN19TWIPR_Communication19_handleMessage_readEP23core_comm_SerialMessage>
			break;
 800dd54:	e00d      	b.n	800dd72 <_ZN19TWIPR_Communication23_handleIncomingMessagesEv+0x86>
		}
		case MSG_COMMAND_EVENT: {
			nop();
 800dd56:	f7ff ff31 	bl	800dbbc <_Z3nopv>
			break;
 800dd5a:	e00a      	b.n	800dd72 <_ZN19TWIPR_Communication23_handleIncomingMessagesEv+0x86>
		}
		case MSG_COMMAND_MSG: {
			nop();
 800dd5c:	f7ff ff2e 	bl	800dbbc <_Z3nopv>
			break;
 800dd60:	e007      	b.n	800dd72 <_ZN19TWIPR_Communication23_handleIncomingMessagesEv+0x86>
		}
		case MSG_COMMAND_FCT: {
			nop();
 800dd62:	f7ff ff2b 	bl	800dbbc <_Z3nopv>
			break;
 800dd66:	e004      	b.n	800dd72 <_ZN19TWIPR_Communication23_handleIncomingMessagesEv+0x86>
		}
		case MSG_COMMAND_ECHO: {
			this->send(&incoming_msg);
 800dd68:	4904      	ldr	r1, [pc, #16]	; (800dd7c <_ZN19TWIPR_Communication23_handleIncomingMessagesEv+0x90>)
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f7ff ff74 	bl	800dc58 <_ZN19TWIPR_Communication4sendEP23core_comm_SerialMessage>
			break;
 800dd70:	bf00      	nop
	while (this->uart_cm4.rx_queue.available()) {
 800dd72:	e7bf      	b.n	800dcf4 <_ZN19TWIPR_Communication23_handleIncomingMessagesEv+0x8>
		}
		}
	}
}
 800dd74:	bf00      	nop
 800dd76:	3708      	adds	r7, #8
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}
 800dd7c:	2400b27c 	.word	0x2400b27c

0800dd80 <_ZN19TWIPR_Communication19_handleMessage_readEP23core_comm_SerialMessage>:

/* =======================================================*/
void TWIPR_Communication::_handleMessage_read(core_comm_SerialMessage *msg) {
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	6039      	str	r1, [r7, #0]

	msg->copyTo(&outgoing_msg);
 800dd8a:	490e      	ldr	r1, [pc, #56]	; (800ddc4 <_ZN19TWIPR_Communication19_handleMessage_readEP23core_comm_SerialMessage+0x44>)
 800dd8c:	6838      	ldr	r0, [r7, #0]
 800dd8e:	f000 fa5d 	bl	800e24c <_ZN23core_comm_SerialMessage6copyToEPS_>
	outgoing_msg.cmd = MSG_COMMAND_ANSWER;
 800dd92:	4b0c      	ldr	r3, [pc, #48]	; (800ddc4 <_ZN19TWIPR_Communication19_handleMessage_readEP23core_comm_SerialMessage+0x44>)
 800dd94:	2203      	movs	r2, #3
 800dd96:	701a      	strb	r2, [r3, #0]
	outgoing_msg.data[0] = 1;
 800dd98:	4b0a      	ldr	r3, [pc, #40]	; (800ddc4 <_ZN19TWIPR_Communication19_handleMessage_readEP23core_comm_SerialMessage+0x44>)
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	715a      	strb	r2, [r3, #5]
	outgoing_msg.data[1] = 2;
 800dd9e:	4b09      	ldr	r3, [pc, #36]	; (800ddc4 <_ZN19TWIPR_Communication19_handleMessage_readEP23core_comm_SerialMessage+0x44>)
 800dda0:	2202      	movs	r2, #2
 800dda2:	719a      	strb	r2, [r3, #6]
	outgoing_msg.len = 2;
 800dda4:	4b07      	ldr	r3, [pc, #28]	; (800ddc4 <_ZN19TWIPR_Communication19_handleMessage_readEP23core_comm_SerialMessage+0x44>)
 800dda6:	2202      	movs	r2, #2
 800dda8:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	outgoing_msg.flag = 1;
 800ddac:	4b05      	ldr	r3, [pc, #20]	; (800ddc4 <_ZN19TWIPR_Communication19_handleMessage_readEP23core_comm_SerialMessage+0x44>)
 800ddae:	2201      	movs	r2, #1
 800ddb0:	711a      	strb	r2, [r3, #4]

	this->send(&outgoing_msg);
 800ddb2:	4904      	ldr	r1, [pc, #16]	; (800ddc4 <_ZN19TWIPR_Communication19_handleMessage_readEP23core_comm_SerialMessage+0x44>)
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f7ff ff4f 	bl	800dc58 <_ZN19TWIPR_Communication4sendEP23core_comm_SerialMessage>

}
 800ddba:	bf00      	nop
 800ddbc:	3708      	adds	r7, #8
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
 800ddc2:	bf00      	nop
 800ddc4:	2400b304 	.word	0x2400b304

0800ddc8 <_Z20uart_cm4_rx_callbackPvS_>:

/* =======================================================*/

void uart_cm4_rx_callback(void *argument, void *parameters) {
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b084      	sub	sp, #16
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	6039      	str	r1, [r7, #0]

	TWIPR_Communication *comm = (TWIPR_Communication*) parameters;
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	60fb      	str	r3, [r7, #12]
	if (comm->task != NULL) {
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d008      	beq.n	800ddf0 <_Z20uart_cm4_rx_callbackPvS_+0x28>
//		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
		nop();
 800ddde:	f7ff feed 	bl	800dbbc <_Z3nopv>

		xTaskNotifyGive(comm->task);
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	6858      	ldr	r0, [r3, #4]
 800dde6:	2300      	movs	r3, #0
 800dde8:	2202      	movs	r2, #2
 800ddea:	2100      	movs	r1, #0
 800ddec:	f7fe fdb8 	bl	800c960 <xTaskGenericNotify>

//		vTaskNotifyGiveFromISR(comm->task, &xHigherPriorityTaskWoken);
//		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}
}
 800ddf0:	bf00      	nop
 800ddf2:	3710      	adds	r7, #16
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}

0800ddf8 <_ZN22core_comm_MessageQueueILi10EE9availableEv>:
		core_comm_SerialMessage *msg = &this->messages[this->idx_read];
		this->inc_read();
		return msg;
	}

	uint8_t available() {
 800ddf8:	b480      	push	{r7}
 800ddfa:	b085      	sub	sp, #20
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
		int8_t available_msg = this->idx_write - this->idx_read;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f893 253d 	ldrb.w	r2, [r3, #1341]	; 0x53d
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f893 353c 	ldrb.w	r3, [r3, #1340]	; 0x53c
 800de0c:	1ad3      	subs	r3, r2, r3
 800de0e:	b2db      	uxtb	r3, r3
 800de10:	73fb      	strb	r3, [r7, #15]
		if (available_msg < 0) {
 800de12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de16:	2b00      	cmp	r3, #0
 800de18:	da06      	bge.n	800de28 <_ZN22core_comm_MessageQueueILi10EE9availableEv+0x30>
			available_msg += this->len;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f893 253f 	ldrb.w	r2, [r3, #1343]	; 0x53f
 800de20:	7bfb      	ldrb	r3, [r7, #15]
 800de22:	4413      	add	r3, r2
 800de24:	b2db      	uxtb	r3, r3
 800de26:	73fb      	strb	r3, [r7, #15]
		}
		return available_msg;
 800de28:	7bfb      	ldrb	r3, [r7, #15]
	}
 800de2a:	4618      	mov	r0, r3
 800de2c:	3714      	adds	r7, #20
 800de2e:	46bd      	mov	sp, r7
 800de30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de34:	4770      	bx	lr

0800de36 <_ZN22core_comm_MessageQueueILi10EE4readEP23core_comm_SerialMessage>:
	uint8_t read(core_comm_SerialMessage *message) {
 800de36:	b580      	push	{r7, lr}
 800de38:	b084      	sub	sp, #16
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	6078      	str	r0, [r7, #4]
 800de3e:	6039      	str	r1, [r7, #0]
		if (this->available() < 1) {
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f7ff ffd9 	bl	800ddf8 <_ZN22core_comm_MessageQueueILi10EE9availableEv>
 800de46:	4603      	mov	r3, r0
 800de48:	2b00      	cmp	r3, #0
 800de4a:	bf0c      	ite	eq
 800de4c:	2301      	moveq	r3, #1
 800de4e:	2300      	movne	r3, #0
 800de50:	b2db      	uxtb	r3, r3
 800de52:	2b00      	cmp	r3, #0
 800de54:	d001      	beq.n	800de5a <_ZN22core_comm_MessageQueueILi10EE4readEP23core_comm_SerialMessage+0x24>
			return 0;
 800de56:	2300      	movs	r3, #0
 800de58:	e071      	b.n	800df3e <_ZN22core_comm_MessageQueueILi10EE4readEP23core_comm_SerialMessage+0x108>
		message->address_1 = this->messages[this->idx_read].address_1;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f893 353c 	ldrb.w	r3, [r3, #1340]	; 0x53c
 800de60:	4619      	mov	r1, r3
 800de62:	687a      	ldr	r2, [r7, #4]
 800de64:	2386      	movs	r3, #134	; 0x86
 800de66:	fb01 f303 	mul.w	r3, r1, r3
 800de6a:	4413      	add	r3, r2
 800de6c:	3301      	adds	r3, #1
 800de6e:	781a      	ldrb	r2, [r3, #0]
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	705a      	strb	r2, [r3, #1]
		message->address_2 = this->messages[this->idx_read].address_2;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f893 353c 	ldrb.w	r3, [r3, #1340]	; 0x53c
 800de7a:	4619      	mov	r1, r3
 800de7c:	687a      	ldr	r2, [r7, #4]
 800de7e:	2386      	movs	r3, #134	; 0x86
 800de80:	fb01 f303 	mul.w	r3, r1, r3
 800de84:	4413      	add	r3, r2
 800de86:	3302      	adds	r3, #2
 800de88:	781a      	ldrb	r2, [r3, #0]
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	709a      	strb	r2, [r3, #2]
		message->address_3 = this->messages[this->idx_read].address_3;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f893 353c 	ldrb.w	r3, [r3, #1340]	; 0x53c
 800de94:	4619      	mov	r1, r3
 800de96:	687a      	ldr	r2, [r7, #4]
 800de98:	2386      	movs	r3, #134	; 0x86
 800de9a:	fb01 f303 	mul.w	r3, r1, r3
 800de9e:	4413      	add	r3, r2
 800dea0:	3303      	adds	r3, #3
 800dea2:	781a      	ldrb	r2, [r3, #0]
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	70da      	strb	r2, [r3, #3]
		message->flag = this->messages[this->idx_read].flag;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f893 353c 	ldrb.w	r3, [r3, #1340]	; 0x53c
 800deae:	4619      	mov	r1, r3
 800deb0:	687a      	ldr	r2, [r7, #4]
 800deb2:	2386      	movs	r3, #134	; 0x86
 800deb4:	fb01 f303 	mul.w	r3, r1, r3
 800deb8:	4413      	add	r3, r2
 800deba:	3304      	adds	r3, #4
 800debc:	781a      	ldrb	r2, [r3, #0]
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	711a      	strb	r2, [r3, #4]
		message->cmd = this->messages[this->idx_read].cmd;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f893 353c 	ldrb.w	r3, [r3, #1340]	; 0x53c
 800dec8:	4619      	mov	r1, r3
 800deca:	687a      	ldr	r2, [r7, #4]
 800decc:	2386      	movs	r3, #134	; 0x86
 800dece:	fb01 f303 	mul.w	r3, r1, r3
 800ded2:	4413      	add	r3, r2
 800ded4:	781a      	ldrb	r2, [r3, #0]
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	701a      	strb	r2, [r3, #0]
		message->len = this->messages[this->idx_read].len;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f893 353c 	ldrb.w	r3, [r3, #1340]	; 0x53c
 800dee0:	4619      	mov	r1, r3
 800dee2:	687a      	ldr	r2, [r7, #4]
 800dee4:	2386      	movs	r3, #134	; 0x86
 800dee6:	fb01 f303 	mul.w	r3, r1, r3
 800deea:	4413      	add	r3, r2
 800deec:	3385      	adds	r3, #133	; 0x85
 800deee:	781a      	ldrb	r2, [r3, #0]
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
		for (int i = 0; i<message->len; i++){
 800def6:	2300      	movs	r3, #0
 800def8:	60fb      	str	r3, [r7, #12]
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800df00:	461a      	mov	r2, r3
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	4293      	cmp	r3, r2
 800df06:	da16      	bge.n	800df36 <_ZN22core_comm_MessageQueueILi10EE4readEP23core_comm_SerialMessage+0x100>
			message->data[i] = this->messages[this->idx_read].data[i];
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f893 353c 	ldrb.w	r3, [r3, #1340]	; 0x53c
 800df0e:	4619      	mov	r1, r3
 800df10:	687a      	ldr	r2, [r7, #4]
 800df12:	2386      	movs	r3, #134	; 0x86
 800df14:	fb01 f303 	mul.w	r3, r1, r3
 800df18:	441a      	add	r2, r3
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	4413      	add	r3, r2
 800df1e:	3305      	adds	r3, #5
 800df20:	7819      	ldrb	r1, [r3, #0]
 800df22:	683a      	ldr	r2, [r7, #0]
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	4413      	add	r3, r2
 800df28:	3305      	adds	r3, #5
 800df2a:	460a      	mov	r2, r1
 800df2c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i<message->len; i++){
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	3301      	adds	r3, #1
 800df32:	60fb      	str	r3, [r7, #12]
 800df34:	e7e1      	b.n	800defa <_ZN22core_comm_MessageQueueILi10EE4readEP23core_comm_SerialMessage+0xc4>
		this->inc_read();
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f000 f805 	bl	800df46 <_ZN22core_comm_MessageQueueILi10EE8inc_readEv>
		return 1;
 800df3c:	2301      	movs	r3, #1
	}
 800df3e:	4618      	mov	r0, r3
 800df40:	3710      	adds	r7, #16
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}

0800df46 <_ZN22core_comm_MessageQueueILi10EE8inc_readEv>:
	uint8_t inc_read() {
 800df46:	b480      	push	{r7}
 800df48:	b083      	sub	sp, #12
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
		this->idx_read++;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	f893 353c 	ldrb.w	r3, [r3, #1340]	; 0x53c
 800df54:	3301      	adds	r3, #1
 800df56:	b2da      	uxtb	r2, r3
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f883 253c 	strb.w	r2, [r3, #1340]	; 0x53c
		if (this->idx_read == this->len) {
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f893 253c 	ldrb.w	r2, [r3, #1340]	; 0x53c
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f893 353f 	ldrb.w	r3, [r3, #1343]	; 0x53f
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d103      	bne.n	800df76 <_ZN22core_comm_MessageQueueILi10EE8inc_readEv+0x30>
			this->idx_read = 0;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2200      	movs	r2, #0
 800df72:	f883 253c 	strb.w	r2, [r3, #1340]	; 0x53c
		return this->idx_read;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	f893 353c 	ldrb.w	r3, [r3, #1340]	; 0x53c
	}
 800df7c:	4618      	mov	r0, r3
 800df7e:	370c      	adds	r7, #12
 800df80:	46bd      	mov	sp, r7
 800df82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df86:	4770      	bx	lr

0800df88 <firmware>:
TWIPR_Firmware twipr_firmware;

twipr_comm_config_t comm_config = { .huart = BOARD_CM4_UART};

/* =======================================================*/
void firmware() {
 800df88:	b580      	push	{r7, lr}
 800df8a:	af00      	add	r7, sp, #0
	osThreadNew(firmware_task, (void*) &twipr_firmware,
 800df8c:	4a03      	ldr	r2, [pc, #12]	; (800df9c <firmware+0x14>)
 800df8e:	4904      	ldr	r1, [pc, #16]	; (800dfa0 <firmware+0x18>)
 800df90:	4804      	ldr	r0, [pc, #16]	; (800dfa4 <firmware+0x1c>)
 800df92:	f7fc fe04 	bl	800ab9e <osThreadNew>
			&firmware_task_attributes);
}
 800df96:	bf00      	nop
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	bf00      	nop
 800df9c:	08013410 	.word	0x08013410
 800dfa0:	2400b38c 	.word	0x2400b38c
 800dfa4:	0800dfa9 	.word	0x0800dfa9

0800dfa8 <_Z13firmware_taskPv>:

/* =======================================================*/
void firmware_task(void *argument) {
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b084      	sub	sp, #16
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
	TWIPR_Firmware *firmware = (TWIPR_Firmware*) argument;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	60fb      	str	r3, [r7, #12]
	firmware->task = xTaskGetCurrentTaskHandle();
 800dfb4:	f7fe fbec 	bl	800c790 <xTaskGetCurrentTaskHandle>
 800dfb8:	4602      	mov	r2, r0
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	601a      	str	r2, [r3, #0]
	firmware->init();
 800dfbe:	68f8      	ldr	r0, [r7, #12]
 800dfc0:	f000 f81a 	bl	800dff8 <_ZN14TWIPR_Firmware4initEv>

	firmware->start();
 800dfc4:	68f8      	ldr	r0, [r7, #12]
 800dfc6:	f000 f82d 	bl	800e024 <_ZN14TWIPR_Firmware5startEv>
	while (true) {
		led1.toggle();
 800dfca:	4803      	ldr	r0, [pc, #12]	; (800dfd8 <_Z13firmware_taskPv+0x30>)
 800dfcc:	f001 f8d2 	bl	800f174 <_ZN17core_hardware_LED6toggleEv>
		osDelay(250);
 800dfd0:	20fa      	movs	r0, #250	; 0xfa
 800dfd2:	f7fc fe76 	bl	800acc2 <osDelay>
		led1.toggle();
 800dfd6:	e7f8      	b.n	800dfca <_Z13firmware_taskPv+0x22>
 800dfd8:	2400c634 	.word	0x2400c634

0800dfdc <_ZN14TWIPR_FirmwareC1Ev>:
}

/* =======================================================*/

/* =======================================================*/
TWIPR_Firmware::TWIPR_Firmware() {
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b082      	sub	sp, #8
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	3308      	adds	r3, #8
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f7ff fdee 	bl	800dbca <_ZN19TWIPR_CommunicationC1Ev>

}
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	4618      	mov	r0, r3
 800dff2:	3708      	adds	r7, #8
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <_ZN14TWIPR_Firmware4initEv>:

/* =======================================================*/
void TWIPR_Firmware::init() {
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
	robot_control_init();
 800e000:	f000 f852 	bl	800e0a8 <_Z18robot_control_initv>
	robot_control_start();
 800e004:	f000 f85e 	bl	800e0c4 <_Z19robot_control_startv>

	// Initialize the communication module
	this->comm.init(comm_config);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	3308      	adds	r3, #8
 800e00c:	4a04      	ldr	r2, [pc, #16]	; (800e020 <_ZN14TWIPR_Firmware4initEv+0x28>)
 800e00e:	6811      	ldr	r1, [r2, #0]
 800e010:	4618      	mov	r0, r3
 800e012:	f7ff fde9 	bl	800dbe8 <_ZN19TWIPR_Communication4initE19twipr_comm_config_t>
	// Initialize the control module

	// Initialize the drive module

	// Initialize the supervisor module
}
 800e016:	bf00      	nop
 800e018:	3708      	adds	r7, #8
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}
 800e01e:	bf00      	nop
 800e020:	2400001c 	.word	0x2400001c

0800e024 <_ZN14TWIPR_Firmware5startEv>:

/* =======================================================*/
void TWIPR_Firmware::start() {
 800e024:	b580      	push	{r7, lr}
 800e026:	b082      	sub	sp, #8
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]

	// Start the communication modules
	this->comm.start();
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	3308      	adds	r3, #8
 800e030:	4618      	mov	r0, r3
 800e032:	f7ff fdf7 	bl	800dc24 <_ZN19TWIPR_Communication5startEv>
}
 800e036:	bf00      	nop
 800e038:	3708      	adds	r7, #8
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}
	...

0800e040 <_Z41__static_initialization_and_destruction_0ii>:
 800e040:	b580      	push	{r7, lr}
 800e042:	b082      	sub	sp, #8
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	6039      	str	r1, [r7, #0]
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2b01      	cmp	r3, #1
 800e04e:	d107      	bne.n	800e060 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e056:	4293      	cmp	r3, r2
 800e058:	d102      	bne.n	800e060 <_Z41__static_initialization_and_destruction_0ii+0x20>
TWIPR_Firmware twipr_firmware;
 800e05a:	4803      	ldr	r0, [pc, #12]	; (800e068 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800e05c:	f7ff ffbe 	bl	800dfdc <_ZN14TWIPR_FirmwareC1Ev>
}
 800e060:	bf00      	nop
 800e062:	3708      	adds	r7, #8
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}
 800e068:	2400b38c 	.word	0x2400b38c

0800e06c <_GLOBAL__sub_I_twipr_firmware>:
 800e06c:	b580      	push	{r7, lr}
 800e06e:	af00      	add	r7, sp, #0
 800e070:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e074:	2001      	movs	r0, #1
 800e076:	f7ff ffe3 	bl	800e040 <_Z41__static_initialization_and_destruction_0ii>
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <_ZN8Madgwick5beginEf>:

//-------------------------------------------------------------------------------------------
// Function declarations
public:
    Madgwick(void);
    void begin(float sampleFrequency) { invSampleFreq = 1.0f / sampleFrequency; }
 800e07c:	b480      	push	{r7}
 800e07e:	b083      	sub	sp, #12
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
 800e084:	ed87 0a00 	vstr	s0, [r7]
 800e088:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e08c:	ed97 7a00 	vldr	s14, [r7]
 800e090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	edc3 7a04 	vstr	s15, [r3, #16]
 800e09a:	bf00      	nop
 800e09c:	370c      	adds	r7, #12
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a4:	4770      	bx	lr
	...

0800e0a8 <_Z18robot_control_initv>:
void robot_control_task(void *argument);



// ------------------------------------------------------------------------------------------------------------
void robot_control_init(){
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b082      	sub	sp, #8
 800e0ac:	af00      	add	r7, sp, #0
//	debug_uart.init();
//	debug_uart.registerCallback(CORE_COMM_SERIAL_SOCKET_CB_RX, uart_rx_fun, NULL);


	uint8_t imu_ok = imu.init();
 800e0ae:	4804      	ldr	r0, [pc, #16]	; (800e0c0 <_Z18robot_control_initv+0x18>)
 800e0b0:	f001 fdd8 	bl	800fc64 <_ZN6BMI1604initEv>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	71fb      	strb	r3, [r7, #7]

	if (!imu_ok){
		// I need some error handling here
	}
}
 800e0b8:	bf00      	nop
 800e0ba:	3708      	adds	r7, #8
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}
 800e0c0:	2400c64c 	.word	0x2400c64c

0800e0c4 <_Z19robot_control_startv>:
// ------------------------------------------------------------------------------------------------------------
void robot_control_start(){
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	af00      	add	r7, sp, #0
//	debug_uart.start();
	osThreadNew(robot_control_sensor_task, NULL, &sensor_task_attributes);
 800e0c8:	4a05      	ldr	r2, [pc, #20]	; (800e0e0 <_Z19robot_control_startv+0x1c>)
 800e0ca:	2100      	movs	r1, #0
 800e0cc:	4805      	ldr	r0, [pc, #20]	; (800e0e4 <_Z19robot_control_startv+0x20>)
 800e0ce:	f7fc fd66 	bl	800ab9e <osThreadNew>
	osThreadNew(robot_control_task, NULL, &rc_task_attributes);
 800e0d2:	4a05      	ldr	r2, [pc, #20]	; (800e0e8 <_Z19robot_control_startv+0x24>)
 800e0d4:	2100      	movs	r1, #0
 800e0d6:	4805      	ldr	r0, [pc, #20]	; (800e0ec <_Z19robot_control_startv+0x28>)
 800e0d8:	f7fc fd61 	bl	800ab9e <osThreadNew>
}
 800e0dc:	bf00      	nop
 800e0de:	bd80      	pop	{r7, pc}
 800e0e0:	08013458 	.word	0x08013458
 800e0e4:	0800e119 	.word	0x0800e119
 800e0e8:	08013434 	.word	0x08013434
 800e0ec:	0800e0f1 	.word	0x0800e0f1

0800e0f0 <_Z18robot_control_taskPv>:

// ------------------------------------------------------------------------------------------------------------
void robot_control_task(void *argument){
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b084      	sub	sp, #16
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
//	debug.start();

	uint32_t kernel_ticks = 0;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	60fb      	str	r3, [r7, #12]
	while (true){
			kernel_ticks = osKernelGetTickCount();
 800e0fc:	f7fc fd3a 	bl	800ab74 <osKernelGetTickCount>
 800e100:	60f8      	str	r0, [r7, #12]
			led_act.toggle();
 800e102:	4804      	ldr	r0, [pc, #16]	; (800e114 <_Z18robot_control_taskPv+0x24>)
 800e104:	f001 f836 	bl	800f174 <_ZN17core_hardware_LED6toggleEv>
			osDelayUntil(kernel_ticks + (uint32_t) 100);
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	3364      	adds	r3, #100	; 0x64
 800e10c:	4618      	mov	r0, r3
 800e10e:	f7fc fdf3 	bl	800acf8 <osDelayUntil>
			kernel_ticks = osKernelGetTickCount();
 800e112:	e7f3      	b.n	800e0fc <_Z18robot_control_taskPv+0xc>
 800e114:	2400c644 	.word	0x2400c644

0800e118 <_Z25robot_control_sensor_taskPv>:
	}
}

// ------------------------------------------------------------------------------------------------------------
void robot_control_sensor_task(void *argument){
 800e118:	b580      	push	{r7, lr}
 800e11a:	b084      	sub	sp, #16
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
	uint32_t kernel_ticks = 0;
 800e120:	2300      	movs	r3, #0
 800e122:	60bb      	str	r3, [r7, #8]
	uint32_t tick = 0;
 800e124:	2300      	movs	r3, #0
 800e126:	60fb      	str	r3, [r7, #12]
	sensor_fusion.begin(RC_SENSOR_LOOP_FREQ);
 800e128:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800e1ac <_Z25robot_control_sensor_taskPv+0x94>
 800e12c:	4820      	ldr	r0, [pc, #128]	; (800e1b0 <_Z25robot_control_sensor_taskPv+0x98>)
 800e12e:	f7ff ffa5 	bl	800e07c <_ZN8Madgwick5beginEf>

	while (true){
		tick++;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	3301      	adds	r3, #1
 800e136:	60fb      	str	r3, [r7, #12]
		kernel_ticks = osKernelGetTickCount();
 800e138:	f7fc fd1c 	bl	800ab74 <osKernelGetTickCount>
 800e13c:	60b8      	str	r0, [r7, #8]

		// Read the IMU
		imu.update();
 800e13e:	481d      	ldr	r0, [pc, #116]	; (800e1b4 <_Z25robot_control_sensor_taskPv+0x9c>)
 800e140:	f001 fea1 	bl	800fe86 <_ZN6BMI1606updateEv>

		// Update the sensor fusion algorithm for the IMU
		sensor_fusion.updateIMU(imu.gyr.x, imu.gyr.y, imu.gyr.z, imu.acc.x, imu.acc.y, imu.acc.z);
 800e144:	4b1b      	ldr	r3, [pc, #108]	; (800e1b4 <_Z25robot_control_sensor_taskPv+0x9c>)
 800e146:	edd3 7a04 	vldr	s15, [r3, #16]
 800e14a:	4b1a      	ldr	r3, [pc, #104]	; (800e1b4 <_Z25robot_control_sensor_taskPv+0x9c>)
 800e14c:	ed93 7a05 	vldr	s14, [r3, #20]
 800e150:	4b18      	ldr	r3, [pc, #96]	; (800e1b4 <_Z25robot_control_sensor_taskPv+0x9c>)
 800e152:	edd3 6a06 	vldr	s13, [r3, #24]
 800e156:	4b17      	ldr	r3, [pc, #92]	; (800e1b4 <_Z25robot_control_sensor_taskPv+0x9c>)
 800e158:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 800e15c:	4b15      	ldr	r3, [pc, #84]	; (800e1b4 <_Z25robot_control_sensor_taskPv+0x9c>)
 800e15e:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
 800e162:	4b14      	ldr	r3, [pc, #80]	; (800e1b4 <_Z25robot_control_sensor_taskPv+0x9c>)
 800e164:	ed93 5a0b 	vldr	s10, [r3, #44]	; 0x2c
 800e168:	eef0 2a45 	vmov.f32	s5, s10
 800e16c:	eeb0 2a65 	vmov.f32	s4, s11
 800e170:	eef0 1a46 	vmov.f32	s3, s12
 800e174:	eeb0 1a66 	vmov.f32	s2, s13
 800e178:	eef0 0a47 	vmov.f32	s1, s14
 800e17c:	eeb0 0a67 	vmov.f32	s0, s15
 800e180:	480b      	ldr	r0, [pc, #44]	; (800e1b0 <_Z25robot_control_sensor_taskPv+0x98>)
 800e182:	f000 fc7d 	bl	800ea80 <_ZN8Madgwick9updateIMUEffffff>


		if (tick % 5 == 0){
 800e186:	68f9      	ldr	r1, [r7, #12]
 800e188:	4b0b      	ldr	r3, [pc, #44]	; (800e1b8 <_Z25robot_control_sensor_taskPv+0xa0>)
 800e18a:	fba3 2301 	umull	r2, r3, r3, r1
 800e18e:	089a      	lsrs	r2, r3, #2
 800e190:	4613      	mov	r3, r2
 800e192:	009b      	lsls	r3, r3, #2
 800e194:	4413      	add	r3, r2
 800e196:	1aca      	subs	r2, r1, r3
 800e198:	2a00      	cmp	r2, #0
 800e19a:	d101      	bne.n	800e1a0 <_Z25robot_control_sensor_taskPv+0x88>
			tick = 0;
 800e19c:	2300      	movs	r3, #0
 800e19e:	60fb      	str	r3, [r7, #12]
//			led2.toggle();
		}

		osDelayUntil(kernel_ticks + (uint32_t) (1000.0/RC_SENSOR_LOOP_FREQ));
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	330a      	adds	r3, #10
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f7fc fda7 	bl	800acf8 <osDelayUntil>
		tick++;
 800e1aa:	e7c2      	b.n	800e132 <_Z25robot_control_sensor_taskPv+0x1a>
 800e1ac:	42c80000 	.word	0x42c80000
 800e1b0:	2400c698 	.word	0x2400c698
 800e1b4:	2400c64c 	.word	0x2400c64c
 800e1b8:	cccccccd 	.word	0xcccccccd

0800e1bc <_Z41__static_initialization_and_destruction_0ii>:
}

// ------------------------------------------------------------------------------------------------------------
void robot_control_loop(){

}
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b082      	sub	sp, #8
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	6039      	str	r1, [r7, #0]
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2b01      	cmp	r3, #1
 800e1ca:	d120      	bne.n	800e20e <_Z41__static_initialization_and_destruction_0ii+0x52>
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	d11b      	bne.n	800e20e <_Z41__static_initialization_and_destruction_0ii+0x52>
core_hardware_LED led1(BOARD_LED_1_PORT, BOARD_LED_1_PIN);
 800e1d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e1da:	490f      	ldr	r1, [pc, #60]	; (800e218 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800e1dc:	480f      	ldr	r0, [pc, #60]	; (800e21c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800e1de:	f000 ffb5 	bl	800f14c <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>
core_hardware_LED led2(BOARD_LED_2_PORT, BOARD_LED_2_PIN);
 800e1e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e1e6:	490c      	ldr	r1, [pc, #48]	; (800e218 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800e1e8:	480d      	ldr	r0, [pc, #52]	; (800e220 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800e1ea:	f000 ffaf 	bl	800f14c <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>
core_hardware_LED led_act(BOARD_LED_ACT_PORT, BOARD_LED_ACT_PIN);
 800e1ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e1f2:	490c      	ldr	r1, [pc, #48]	; (800e224 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800e1f4:	480c      	ldr	r0, [pc, #48]	; (800e228 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800e1f6:	f000 ffa9 	bl	800f14c <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>
BMI160 imu(BOARD_SPI_INTERN, BOARD_CS_IMU_PORT, BOARD_CS_IMU_PIN);
 800e1fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e1fe:	4a0b      	ldr	r2, [pc, #44]	; (800e22c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800e200:	490b      	ldr	r1, [pc, #44]	; (800e230 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800e202:	480c      	ldr	r0, [pc, #48]	; (800e234 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800e204:	f001 fce2 	bl	800fbcc <_ZN6BMI160C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
Madgwick sensor_fusion;
 800e208:	480b      	ldr	r0, [pc, #44]	; (800e238 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800e20a:	f000 fc11 	bl	800ea30 <_ZN8MadgwickC1Ev>
}
 800e20e:	bf00      	nop
 800e210:	3708      	adds	r7, #8
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}
 800e216:	bf00      	nop
 800e218:	58021000 	.word	0x58021000
 800e21c:	2400c634 	.word	0x2400c634
 800e220:	2400c63c 	.word	0x2400c63c
 800e224:	58020c00 	.word	0x58020c00
 800e228:	2400c644 	.word	0x2400c644
 800e22c:	58020400 	.word	0x58020400
 800e230:	24000218 	.word	0x24000218
 800e234:	2400c64c 	.word	0x2400c64c
 800e238:	2400c698 	.word	0x2400c698

0800e23c <_GLOBAL__sub_I_led1>:
 800e23c:	b580      	push	{r7, lr}
 800e23e:	af00      	add	r7, sp, #0
 800e240:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e244:	2001      	movs	r0, #1
 800e246:	f7ff ffb9 	bl	800e1bc <_Z41__static_initialization_and_destruction_0ii>
 800e24a:	bd80      	pop	{r7, pc}

0800e24c <_ZN23core_comm_SerialMessage6copyToEPS_>:
 *      Author: Dustin Lehmann
 */

#include "core_comm_SerialProtocol.h"

void core_comm_SerialMessage::copyTo(core_comm_SerialMessage *msg) {
 800e24c:	b480      	push	{r7}
 800e24e:	b085      	sub	sp, #20
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	6039      	str	r1, [r7, #0]
	msg->address_1 = this->address_1;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	785a      	ldrb	r2, [r3, #1]
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	705a      	strb	r2, [r3, #1]
	msg->address_2 = this->address_2;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	789a      	ldrb	r2, [r3, #2]
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	709a      	strb	r2, [r3, #2]
	msg->address_3 = this->address_3;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	78da      	ldrb	r2, [r3, #3]
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	70da      	strb	r2, [r3, #3]
	msg->cmd = this->cmd;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	781a      	ldrb	r2, [r3, #0]
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	701a      	strb	r2, [r3, #0]
	msg->len = this->len;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f893 2085 	ldrb.w	r2, [r3, #133]	; 0x85
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85

	for (int i = 0; i < len; i++) {
 800e282:	2300      	movs	r3, #0
 800e284:	60fb      	str	r3, [r7, #12]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800e28c:	461a      	mov	r2, r3
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	4293      	cmp	r3, r2
 800e292:	da0e      	bge.n	800e2b2 <_ZN23core_comm_SerialMessage6copyToEPS_+0x66>
		msg->data[i] = this->data[i];
 800e294:	687a      	ldr	r2, [r7, #4]
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	4413      	add	r3, r2
 800e29a:	3305      	adds	r3, #5
 800e29c:	7819      	ldrb	r1, [r3, #0]
 800e29e:	683a      	ldr	r2, [r7, #0]
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	4413      	add	r3, r2
 800e2a4:	3305      	adds	r3, #5
 800e2a6:	460a      	mov	r2, r1
 800e2a8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	3301      	adds	r3, #1
 800e2ae:	60fb      	str	r3, [r7, #12]
 800e2b0:	e7e9      	b.n	800e286 <_ZN23core_comm_SerialMessage6copyToEPS_+0x3a>
	}
}
 800e2b2:	bf00      	nop
 800e2b4:	3714      	adds	r7, #20
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2bc:	4770      	bx	lr

0800e2be <_ZN23core_comm_SerialMessage6encodeEPh>:

uint8_t core_comm_SerialMessage::encode(uint8_t *buffer) {
 800e2be:	b480      	push	{r7}
 800e2c0:	b085      	sub	sp, #20
 800e2c2:	af00      	add	r7, sp, #0
 800e2c4:	6078      	str	r0, [r7, #4]
 800e2c6:	6039      	str	r1, [r7, #0]
	buffer[0] = CORE_SERIAL_MESSAGE_HEADER;
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	2255      	movs	r2, #85	; 0x55
 800e2cc:	701a      	strb	r2, [r3, #0]
	buffer[1] = this->cmd;
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	3301      	adds	r3, #1
 800e2d2:	687a      	ldr	r2, [r7, #4]
 800e2d4:	7812      	ldrb	r2, [r2, #0]
 800e2d6:	701a      	strb	r2, [r3, #0]
	buffer[2] = this->address_1;
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	3302      	adds	r3, #2
 800e2dc:	687a      	ldr	r2, [r7, #4]
 800e2de:	7852      	ldrb	r2, [r2, #1]
 800e2e0:	701a      	strb	r2, [r3, #0]
	buffer[3] = this->address_2;
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	3303      	adds	r3, #3
 800e2e6:	687a      	ldr	r2, [r7, #4]
 800e2e8:	7892      	ldrb	r2, [r2, #2]
 800e2ea:	701a      	strb	r2, [r3, #0]
	buffer[4] = this->address_3;
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	3304      	adds	r3, #4
 800e2f0:	687a      	ldr	r2, [r7, #4]
 800e2f2:	78d2      	ldrb	r2, [r2, #3]
 800e2f4:	701a      	strb	r2, [r3, #0]
	buffer[5] = this->flag;
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	3305      	adds	r3, #5
 800e2fa:	687a      	ldr	r2, [r7, #4]
 800e2fc:	7912      	ldrb	r2, [r2, #4]
 800e2fe:	701a      	strb	r2, [r3, #0]
	buffer[6] = this->len;
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	3306      	adds	r3, #6
 800e304:	687a      	ldr	r2, [r7, #4]
 800e306:	f892 2085 	ldrb.w	r2, [r2, #133]	; 0x85
 800e30a:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < this->len; i++) {
 800e30c:	2300      	movs	r3, #0
 800e30e:	73fb      	strb	r3, [r7, #15]
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800e316:	7bfa      	ldrb	r2, [r7, #15]
 800e318:	429a      	cmp	r2, r3
 800e31a:	d20d      	bcs.n	800e338 <_ZN23core_comm_SerialMessage6encodeEPh+0x7a>
		buffer[7 + i] = this->data[i];
 800e31c:	7bfa      	ldrb	r2, [r7, #15]
 800e31e:	7bfb      	ldrb	r3, [r7, #15]
 800e320:	3307      	adds	r3, #7
 800e322:	4619      	mov	r1, r3
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	440b      	add	r3, r1
 800e328:	6879      	ldr	r1, [r7, #4]
 800e32a:	440a      	add	r2, r1
 800e32c:	7952      	ldrb	r2, [r2, #5]
 800e32e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < this->len; i++) {
 800e330:	7bfb      	ldrb	r3, [r7, #15]
 800e332:	3301      	adds	r3, #1
 800e334:	73fb      	strb	r3, [r7, #15]
 800e336:	e7eb      	b.n	800e310 <_ZN23core_comm_SerialMessage6encodeEPh+0x52>
	}
	buffer[7 + this->len] = 0; // CRC8
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800e33e:	3307      	adds	r3, #7
 800e340:	461a      	mov	r2, r3
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	4413      	add	r3, r2
 800e346:	2200      	movs	r2, #0
 800e348:	701a      	strb	r2, [r3, #0]
	return this->protocol_overhead + this->len;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800e350:	3308      	adds	r3, #8
 800e352:	b2db      	uxtb	r3, r3
}
 800e354:	4618      	mov	r0, r3
 800e356:	3714      	adds	r7, #20
 800e358:	46bd      	mov	sp, r7
 800e35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35e:	4770      	bx	lr

0800e360 <_ZN23core_comm_SerialMessage5checkEPhh>:
	}
	buffer->buffer[7 + this->len] = 0; // CRC8
	buffer->len = this->len;
}

uint8_t core_comm_SerialMessage::check(uint8_t *buffer, uint8_t len) {
 800e360:	b480      	push	{r7}
 800e362:	b087      	sub	sp, #28
 800e364:	af00      	add	r7, sp, #0
 800e366:	60f8      	str	r0, [r7, #12]
 800e368:	60b9      	str	r1, [r7, #8]
 800e36a:	4613      	mov	r3, r2
 800e36c:	71fb      	strb	r3, [r7, #7]

	if (len < this->protocol_overhead) {
 800e36e:	79fb      	ldrb	r3, [r7, #7]
 800e370:	2b07      	cmp	r3, #7
 800e372:	d801      	bhi.n	800e378 <_ZN23core_comm_SerialMessage5checkEPhh+0x18>
		return CORE_ERROR;
 800e374:	2300      	movs	r3, #0
 800e376:	e010      	b.n	800e39a <_ZN23core_comm_SerialMessage5checkEPhh+0x3a>
	}

	/* Check for the header */
	if (!(buffer[0] == CORE_SERIAL_MESSAGE_HEADER)) {
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	2b55      	cmp	r3, #85	; 0x55
 800e37e:	d001      	beq.n	800e384 <_ZN23core_comm_SerialMessage5checkEPhh+0x24>
		return CORE_ERROR;
 800e380:	2300      	movs	r3, #0
 800e382:	e00a      	b.n	800e39a <_ZN23core_comm_SerialMessage5checkEPhh+0x3a>
//		return CORE_ERROR;
//	}

	/* Extract the data length */
	// Check if the data length matches with the length of the message
	uint8_t data_len = buffer[6];
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	799b      	ldrb	r3, [r3, #6]
 800e388:	75fb      	strb	r3, [r7, #23]
	if ((len - data_len) == this->protocol_overhead) {
 800e38a:	79fa      	ldrb	r2, [r7, #7]
 800e38c:	7dfb      	ldrb	r3, [r7, #23]
 800e38e:	1ad3      	subs	r3, r2, r3
 800e390:	2b08      	cmp	r3, #8
 800e392:	d001      	beq.n	800e398 <_ZN23core_comm_SerialMessage5checkEPhh+0x38>
	} else {
		return CORE_ERROR;
 800e394:	2300      	movs	r3, #0
 800e396:	e000      	b.n	800e39a <_ZN23core_comm_SerialMessage5checkEPhh+0x3a>
	}

	return CORE_OK;
 800e398:	2301      	movs	r3, #1

}
 800e39a:	4618      	mov	r0, r3
 800e39c:	371c      	adds	r7, #28
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a4:	4770      	bx	lr

0800e3a6 <_ZN23core_comm_SerialMessage6decodeEPhh>:
uint8_t core_comm_SerialMessage::check(core_utils_Buffer *buffer) {
	return this->check(buffer->buffer, buffer->len);
}

uint8_t core_comm_SerialMessage::decode(uint8_t *buffer, uint8_t len) {
 800e3a6:	b580      	push	{r7, lr}
 800e3a8:	b086      	sub	sp, #24
 800e3aa:	af00      	add	r7, sp, #0
 800e3ac:	60f8      	str	r0, [r7, #12]
 800e3ae:	60b9      	str	r1, [r7, #8]
 800e3b0:	4613      	mov	r3, r2
 800e3b2:	71fb      	strb	r3, [r7, #7]
	if (this->check(buffer, len) == CORE_ERROR) {
 800e3b4:	79fb      	ldrb	r3, [r7, #7]
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	68b9      	ldr	r1, [r7, #8]
 800e3ba:	68f8      	ldr	r0, [r7, #12]
 800e3bc:	f7ff ffd0 	bl	800e360 <_ZN23core_comm_SerialMessage5checkEPhh>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	bf0c      	ite	eq
 800e3c6:	2301      	moveq	r3, #1
 800e3c8:	2300      	movne	r3, #0
 800e3ca:	b2db      	uxtb	r3, r3
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d001      	beq.n	800e3d4 <_ZN23core_comm_SerialMessage6decodeEPhh+0x2e>
		return CORE_ERROR;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	e02f      	b.n	800e434 <_ZN23core_comm_SerialMessage6decodeEPhh+0x8e>
	}

	/* Extract the command */
	this->cmd = buffer[1];
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	785a      	ldrb	r2, [r3, #1]
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	701a      	strb	r2, [r3, #0]

	/* Extract the address */
	this->address_1 = buffer[2];
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	789a      	ldrb	r2, [r3, #2]
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	705a      	strb	r2, [r3, #1]
	this->address_2 = buffer[3];
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	78da      	ldrb	r2, [r3, #3]
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	709a      	strb	r2, [r3, #2]
	this->address_3 = buffer[4];
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	791a      	ldrb	r2, [r3, #4]
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	70da      	strb	r2, [r3, #3]

	/* Flag */
	this->flag = buffer[5];
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	795a      	ldrb	r2, [r3, #5]
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	711a      	strb	r2, [r3, #4]

	/* Extract the data length */
	this->len = buffer[6];
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	799a      	ldrb	r2, [r3, #6]
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85

	/* Extract the data */
	for (uint8_t i = 0; i < this->len; i++) {
 800e406:	2300      	movs	r3, #0
 800e408:	75fb      	strb	r3, [r7, #23]
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800e410:	7dfa      	ldrb	r2, [r7, #23]
 800e412:	429a      	cmp	r2, r3
 800e414:	d20d      	bcs.n	800e432 <_ZN23core_comm_SerialMessage6decodeEPhh+0x8c>
		this->data[i] = buffer[i + 7];
 800e416:	7dfb      	ldrb	r3, [r7, #23]
 800e418:	3307      	adds	r3, #7
 800e41a:	68ba      	ldr	r2, [r7, #8]
 800e41c:	441a      	add	r2, r3
 800e41e:	7dfb      	ldrb	r3, [r7, #23]
 800e420:	7811      	ldrb	r1, [r2, #0]
 800e422:	68fa      	ldr	r2, [r7, #12]
 800e424:	4413      	add	r3, r2
 800e426:	460a      	mov	r2, r1
 800e428:	715a      	strb	r2, [r3, #5]
	for (uint8_t i = 0; i < this->len; i++) {
 800e42a:	7dfb      	ldrb	r3, [r7, #23]
 800e42c:	3301      	adds	r3, #1
 800e42e:	75fb      	strb	r3, [r7, #23]
 800e430:	e7eb      	b.n	800e40a <_ZN23core_comm_SerialMessage6decodeEPhh+0x64>
	}

	return CORE_OK;
 800e432:	2301      	movs	r3, #1
}
 800e434:	4618      	mov	r0, r3
 800e436:	3718      	adds	r7, #24
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <_ZN23core_comm_SerialMessage6decodeEP17core_utils_Buffer>:

uint8_t core_comm_SerialMessage::decode(core_utils_Buffer *buffer) {
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b082      	sub	sp, #8
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	6039      	str	r1, [r7, #0]
	return this->decode(buffer->buffer, buffer->len);
 800e446:	6839      	ldr	r1, [r7, #0]
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800e44e:	b2db      	uxtb	r3, r3
 800e450:	461a      	mov	r2, r3
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f7ff ffa7 	bl	800e3a6 <_ZN23core_comm_SerialMessage6decodeEPhh>
 800e458:	4603      	mov	r3, r0
}
 800e45a:	4618      	mov	r0, r3
 800e45c:	3708      	adds	r7, #8
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}

0800e462 <_ZN25core_hardware_UART_configC1Ev>:
	CORE_HARDWARE_UART_MODE_POLL,
	CORE_HARDWARE_UART_MODE_IT,
	CORE_HARDWARE_UART_MODE_DMA,
};

typedef struct core_hardware_UART_config {
 800e462:	b480      	push	{r7}
 800e464:	b083      	sub	sp, #12
 800e466:	af00      	add	r7, sp, #0
 800e468:	6078      	str	r0, [r7, #4]
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2202      	movs	r2, #2
 800e46e:	701a      	strb	r2, [r3, #0]
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2201      	movs	r2, #1
 800e474:	705a      	strb	r2, [r3, #1]
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2201      	movs	r2, #1
 800e47a:	709a      	strb	r2, [r3, #2]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2201      	movs	r2, #1
 800e480:	70da      	strb	r2, [r3, #3]
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	4618      	mov	r0, r3
 800e486:	370c      	adds	r7, #12
 800e488:	46bd      	mov	sp, r7
 800e48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48e:	4770      	bx	lr

0800e490 <_ZN30core_comm_UartInterface_configC1Ev>:
typedef struct core_comm_SerialSocket_callbacks {
	core_utils_Callback rx;
} core_comm_SerialSocket_callbacks;

/* ---------------------------------------------------------- */
struct core_comm_UartInterface_config {
 800e490:	b580      	push	{r7, lr}
 800e492:	b082      	sub	sp, #8
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	4618      	mov	r0, r3
 800e49c:	f7ff ffe1 	bl	800e462 <_ZN25core_hardware_UART_configC1Ev>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3708      	adds	r7, #8
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}

0800e4aa <_ZN22core_comm_MessageQueueILi10EEC1Ev>:
class core_comm_MessageQueue {
 800e4aa:	b580      	push	{r7, lr}
 800e4ac:	b082      	sub	sp, #8
 800e4ae:	af00      	add	r7, sp, #0
 800e4b0:	6078      	str	r0, [r7, #4]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f240 533c 	movw	r3, #1340	; 0x53c
 800e4ba:	461a      	mov	r2, r3
 800e4bc:	2100      	movs	r1, #0
 800e4be:	f002 fb4a 	bl	8010b56 <memset>
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	220a      	movs	r2, #10
 800e4c6:	f883 253f 	strb.w	r2, [r3, #1343]	; 0x53f
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3708      	adds	r7, #8
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}

0800e4d4 <_ZN27core_comm_SerialSocket_RTOSC1Ev>:
	uint8_t use_queue;
	core_comm_SerialSocket_rx_callback_value rx_callback_value;
};

/* ---------------------------------------------------------- */
typedef struct core_comm_SerialSocket_RTOS {
 800e4d4:	b480      	push	{r7}
 800e4d6:	b083      	sub	sp, #12
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	601a      	str	r2, [r3, #0]
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	605a      	str	r2, [r3, #4]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	370c      	adds	r7, #12
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f4:	4770      	bx	lr

0800e4f6 <_ZN32core_comm_SerialSocket_callbacksC1Ev>:
typedef struct core_comm_SerialSocket_callbacks {
 800e4f6:	b580      	push	{r7, lr}
 800e4f8:	b082      	sub	sp, #8
 800e4fa:	af00      	add	r7, sp, #0
 800e4fc:	6078      	str	r0, [r7, #4]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	4618      	mov	r0, r3
 800e502:	f002 f9d8 	bl	80108b6 <_ZN19core_utils_CallbackC1Ev>
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	4618      	mov	r0, r3
 800e50a:	3708      	adds	r7, #8
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}

0800e510 <_ZN23core_comm_UartInterfaceC1Ev>:

core_comm_UartInterface_config std_uart_config = { .uart =
		std_hardware_uart_config, .use_rtos = 1, .use_protocol = 1, .use_queue =
		1, .rx_callback_value = CORE_COMM_SERIAL_SOCKET_RX_CB_MSG, };

core_comm_UartInterface::core_comm_UartInterface(){
 800e510:	b580      	push	{r7, lr}
 800e512:	b082      	sub	sp, #8
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7ff ffb8 	bl	800e490 <_ZN30core_comm_UartInterface_configC1Ev>
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	3308      	adds	r3, #8
 800e524:	4618      	mov	r0, r3
 800e526:	f7ff ffc0 	bl	800e4aa <_ZN22core_comm_MessageQueueILi10EEC1Ev>
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800e530:	4618      	mov	r0, r3
 800e532:	f7ff ffcf 	bl	800e4d4 <_ZN27core_comm_SerialSocket_RTOSC1Ev>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2200      	movs	r2, #0
 800e53a:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 800e544:	4618      	mov	r0, r3
 800e546:	f000 fe35 	bl	800f1b4 <_ZN18core_hardware_UARTC1Ev>
 800e54a:	687a      	ldr	r2, [r7, #4]
 800e54c:	f241 2388 	movw	r3, #4744	; 0x1288
 800e550:	4413      	add	r3, r2
 800e552:	4618      	mov	r0, r3
 800e554:	f7ff ffcf 	bl	800e4f6 <_ZN32core_comm_SerialSocket_callbacksC1Ev>
	this->state = CORE_COMM_SERIAL_SOCKET_STATE_NONE;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2200      	movs	r2, #0
 800e55c:	f883 2548 	strb.w	r2, [r3, #1352]	; 0x548
}
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	4618      	mov	r0, r3
 800e564:	3708      	adds	r7, #8
 800e566:	46bd      	mov	sp, r7
 800e568:	bd80      	pop	{r7, pc}
	...

0800e56c <_ZN23core_comm_UartInterface4initEP20__UART_HandleTypeDef30core_comm_UartInterface_config>:
/* ============================================================================= */
void core_comm_UartInterface::init(UART_HandleTypeDef *huart) {
	this->init(huart, std_uart_config);
}
/* ============================================================================= */
void core_comm_UartInterface::init(UART_HandleTypeDef *huart, core_comm_UartInterface_config config) {
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b084      	sub	sp, #16
 800e570:	af00      	add	r7, sp, #0
 800e572:	60f8      	str	r0, [r7, #12]
 800e574:	60b9      	str	r1, [r7, #8]
 800e576:	4639      	mov	r1, r7
 800e578:	e881 000c 	stmia.w	r1, {r2, r3}

	this->config = config;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	461a      	mov	r2, r3
 800e580:	463b      	mov	r3, r7
 800e582:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e586:	e882 0003 	stmia.w	r2, {r0, r1}
	this->uart.init(huart, this->config.uart);
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	f203 50dc 	addw	r0, r3, #1500	; 0x5dc
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681a      	ldr	r2, [r3, #0]
 800e594:	68b9      	ldr	r1, [r7, #8]
 800e596:	f000 fe3b 	bl	800f210 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config>

	// Add the rx callback to the UART
	this->uart.registerCallback(CORE_HARDWARE_UART_CB_RX,
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	f203 50dc 	addw	r0, r3, #1500	; 0x5dc
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	4a06      	ldr	r2, [pc, #24]	; (800e5bc <_ZN23core_comm_UartInterface4initEP20__UART_HandleTypeDef30core_comm_UartInterface_config+0x50>)
 800e5a4:	2100      	movs	r1, #0
 800e5a6:	f001 f859 	bl	800f65c <_ZN18core_hardware_UART16registerCallbackE24core_hardware_UART_CB_IDPFvPvS1_ES1_>
			core_comm_SerialSocket_rx_notify, this);

	this->state = CORE_COMM_SERIAL_SOCKET_STATE_INIT;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	2201      	movs	r2, #1
 800e5ae:	f883 2548 	strb.w	r2, [r3, #1352]	; 0x548
}
 800e5b2:	bf00      	nop
 800e5b4:	3710      	adds	r7, #16
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	0800e84d 	.word	0x0800e84d

0800e5c0 <_ZN23core_comm_UartInterface5startEv>:

/* ============================================================================= */
void core_comm_UartInterface::start() {
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b082      	sub	sp, #8
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]

	this->uart.start();
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f000 ff36 	bl	800f440 <_ZN18core_hardware_UART5startEv>
	this->state = CORE_COMM_SERIAL_SOCKET_STATE_RUN;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2202      	movs	r2, #2
 800e5d8:	f883 2548 	strb.w	r2, [r3, #1352]	; 0x548

#ifdef CORE_CONFIG_USE_RTOS
	if (this->config.use_rtos) {
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	791b      	ldrb	r3, [r3, #4]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d002      	beq.n	800e5ea <_ZN23core_comm_UartInterface5startEv+0x2a>
		this->startRTOS();
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f000 f805 	bl	800e5f4 <_ZN23core_comm_UartInterface9startRTOSEv>
	}
#else
	core_ErrorHandler(1);
#endif
}
 800e5ea:	bf00      	nop
 800e5ec:	3708      	adds	r7, #8
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
	...

0800e5f4 <_ZN23core_comm_UartInterface9startRTOSEv>:

/* ============================================================================= */
void core_comm_UartInterface::startRTOS() {
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b08c      	sub	sp, #48	; 0x30
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
	const osThreadAttr_t task_attributes = { .name = "socket_task",
 800e5fc:	f107 030c 	add.w	r3, r7, #12
 800e600:	2224      	movs	r2, #36	; 0x24
 800e602:	2100      	movs	r1, #0
 800e604:	4618      	mov	r0, r3
 800e606:	f002 faa6 	bl	8010b56 <memset>
 800e60a:	4b0b      	ldr	r3, [pc, #44]	; (800e638 <_ZN23core_comm_UartInterface9startRTOSEv+0x44>)
 800e60c:	60fb      	str	r3, [r7, #12]
 800e60e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e612:	623b      	str	r3, [r7, #32]
 800e614:	2328      	movs	r3, #40	; 0x28
 800e616:	627b      	str	r3, [r7, #36]	; 0x24
			.stack_size = CORE_COMM_SERIAL_SOCKET_RTOS_RX_STACKSIZE, .priority =
					(osPriority_t) CORE_COMM_SERIAL_SOCKET_RTOS_RX_PRIORITY };

	this->rtos.threadId = osThreadNew(core_comm_SerialSocket_RTOS_Task, this,
 800e618:	f107 030c 	add.w	r3, r7, #12
 800e61c:	461a      	mov	r2, r3
 800e61e:	6879      	ldr	r1, [r7, #4]
 800e620:	4806      	ldr	r0, [pc, #24]	; (800e63c <_ZN23core_comm_UartInterface9startRTOSEv+0x48>)
 800e622:	f7fc fabc 	bl	800ab9e <osThreadNew>
 800e626:	4602      	mov	r2, r0
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
			&task_attributes);
}
 800e62e:	bf00      	nop
 800e630:	3730      	adds	r7, #48	; 0x30
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}
 800e636:	bf00      	nop
 800e638:	0801337c 	.word	0x0801337c
 800e63c:	0800e7fd 	.word	0x0800e7fd

0800e640 <_ZN23core_comm_UartInterface4sendEP23core_comm_SerialMessage>:

/* ============================================================================= */
void core_comm_UartInterface::send(core_comm_SerialMessage *message) {
 800e640:	b580      	push	{r7, lr}
 800e642:	b084      	sub	sp, #16
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	6039      	str	r1, [r7, #0]
	uint8_t len = message->encode(this->tx_buf);
 800e64a:	687a      	ldr	r2, [r7, #4]
 800e64c:	f241 2308 	movw	r3, #4616	; 0x1208
 800e650:	4413      	add	r3, r2
 800e652:	4619      	mov	r1, r3
 800e654:	6838      	ldr	r0, [r7, #0]
 800e656:	f7ff fe32 	bl	800e2be <_ZN23core_comm_SerialMessage6encodeEPh>
 800e65a:	4603      	mov	r3, r0
 800e65c:	73fb      	strb	r3, [r7, #15]
	this->send(this->tx_buf, len);
 800e65e:	687a      	ldr	r2, [r7, #4]
 800e660:	f241 2308 	movw	r3, #4616	; 0x1208
 800e664:	4413      	add	r3, r2
 800e666:	7bfa      	ldrb	r2, [r7, #15]
 800e668:	4619      	mov	r1, r3
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f000 f804 	bl	800e678 <_ZN23core_comm_UartInterface4sendEPhh>
}
 800e670:	bf00      	nop
 800e672:	3710      	adds	r7, #16
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}

0800e678 <_ZN23core_comm_UartInterface4sendEPhh>:

/* ============================================================================= */
void core_comm_UartInterface::send(uint8_t *buffer, uint8_t len) {
 800e678:	b580      	push	{r7, lr}
 800e67a:	b084      	sub	sp, #16
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	60f8      	str	r0, [r7, #12]
 800e680:	60b9      	str	r1, [r7, #8]
 800e682:	4613      	mov	r3, r2
 800e684:	71fb      	strb	r3, [r7, #7]
	if (this->state != CORE_COMM_SERIAL_SOCKET_STATE_RUN) {
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	f893 3548 	ldrb.w	r3, [r3, #1352]	; 0x548
 800e68c:	2b02      	cmp	r3, #2
 800e68e:	d002      	beq.n	800e696 <_ZN23core_comm_UartInterface4sendEPhh+0x1e>
		core_ErrorHandler(1);
 800e690:	2001      	movs	r0, #1
 800e692:	f002 f90b 	bl	80108ac <_Z17core_ErrorHandleri>
	}

	this->uart.send(buffer, len);
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 800e69c:	79fa      	ldrb	r2, [r7, #7]
 800e69e:	68b9      	ldr	r1, [r7, #8]
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f001 f86d 	bl	800f780 <_ZN18core_hardware_UART4sendEPhh>
}
 800e6a6:	bf00      	nop
 800e6a8:	3710      	adds	r7, #16
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}

0800e6ae <_ZN23core_comm_UartInterface16registerCallbackE28core_comm_SerialSocket_CB_IDPFvPvS1_ES1_>:
}

/* ============================================================================= */
void core_comm_UartInterface::registerCallback(
		core_comm_SerialSocket_CB_ID callback_id,
		void (*callback)(void *argument, void *params), void *params) {
 800e6ae:	b480      	push	{r7}
 800e6b0:	b085      	sub	sp, #20
 800e6b2:	af00      	add	r7, sp, #0
 800e6b4:	60f8      	str	r0, [r7, #12]
 800e6b6:	607a      	str	r2, [r7, #4]
 800e6b8:	603b      	str	r3, [r7, #0]
 800e6ba:	460b      	mov	r3, r1
 800e6bc:	72fb      	strb	r3, [r7, #11]

	switch (callback_id) {
 800e6be:	7afb      	ldrb	r3, [r7, #11]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d001      	beq.n	800e6c8 <_ZN23core_comm_UartInterface16registerCallbackE28core_comm_SerialSocket_CB_IDPFvPvS1_ES1_+0x1a>
 800e6c4:	2b01      	cmp	r3, #1
		this->callbacks.rx.params = params;
		this->callbacks.rx.registered = 1;
		break;
	}
	case CORE_COMM_SERIAL_SOCKET_CB_ERROR: {
		break;
 800e6c6:	e014      	b.n	800e6f2 <_ZN23core_comm_UartInterface16registerCallbackE28core_comm_SerialSocket_CB_IDPFvPvS1_ES1_+0x44>
		this->callbacks.rx.callback = callback;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
		this->callbacks.rx.params = params;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6dc:	461a      	mov	r2, r3
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c
		this->callbacks.rx.registered = 1;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6ea:	2201      	movs	r2, #1
 800e6ec:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
		break;
 800e6f0:	bf00      	nop
	}
	}
}
 800e6f2:	bf00      	nop
 800e6f4:	3714      	adds	r7, #20
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fc:	4770      	bx	lr

0800e6fe <_ZN23core_comm_UartInterface11rx_functionEv>:
core_comm_SerialMessage* core_comm_UartInterface::getMessagePointer() {
	return this->rx_queue.readPointer();
}

/* ============================================================================= */
uint8_t core_comm_UartInterface::rx_function() {
 800e6fe:	b580      	push	{r7, lr}
 800e700:	b086      	sub	sp, #24
 800e702:	af00      	add	r7, sp, #0
 800e704:	6078      	str	r0, [r7, #4]
	uint8_t num_messages = 0;
 800e706:	2300      	movs	r3, #0
 800e708:	75fb      	strb	r3, [r7, #23]

	while (this->uart.available() > 0) {
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 800e710:	4618      	mov	r0, r3
 800e712:	f000 fe87 	bl	800f424 <_ZN18core_hardware_UART9availableEv>
 800e716:	4603      	mov	r3, r0
 800e718:	2b00      	cmp	r3, #0
 800e71a:	bfcc      	ite	gt
 800e71c:	2301      	movgt	r3, #1
 800e71e:	2300      	movle	r3, #0
 800e720:	b2db      	uxtb	r3, r3
 800e722:	2b00      	cmp	r3, #0
 800e724:	d065      	beq.n	800e7f2 <_ZN23core_comm_UartInterface11rx_functionEv+0xf4>
		core_utils_Buffer *buffer = this->uart.rx_queue.read();
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f503 63bc 	add.w	r3, r3, #1504	; 0x5e0
 800e72c:	4618      	mov	r0, r3
 800e72e:	f000 f8b5 	bl	800e89c <_ZN22core_utils_BufferQueueILi10EE4readEv>
 800e732:	6138      	str	r0, [r7, #16]

		if (this->config.use_protocol) {
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	795b      	ldrb	r3, [r3, #5]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d03d      	beq.n	800e7b8 <_ZN23core_comm_UartInterface11rx_functionEv+0xba>
			// Decode the buffer into the rx message
			uint8_t correct_message = this->rx_message.decode(buffer);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f203 5355 	addw	r3, r3, #1365	; 0x555
 800e742:	6939      	ldr	r1, [r7, #16]
 800e744:	4618      	mov	r0, r3
 800e746:	f7ff fe79 	bl	800e43c <_ZN23core_comm_SerialMessage6decodeEP17core_utils_Buffer>
 800e74a:	4603      	mov	r3, r0
 800e74c:	73fb      	strb	r3, [r7, #15]

			// If the buffer did not contain a correct message do not proceed with the message handling
			if (!correct_message) {
 800e74e:	7bfb      	ldrb	r3, [r7, #15]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d04c      	beq.n	800e7ee <_ZN23core_comm_UartInterface11rx_functionEv+0xf0>
				continue;
			}

			if (this->config.use_queue) {
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	799b      	ldrb	r3, [r3, #6]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d009      	beq.n	800e770 <_ZN23core_comm_UartInterface11rx_functionEv+0x72>
				this->rx_queue.write(&rx_message);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f103 0208 	add.w	r2, r3, #8
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f203 5355 	addw	r3, r3, #1365	; 0x555
 800e768:	4619      	mov	r1, r3
 800e76a:	4610      	mov	r0, r2
 800e76c:	f000 f8bb 	bl	800e8e6 <_ZN22core_comm_MessageQueueILi10EE5writeEP23core_comm_SerialMessage>
			}

			if (this->callbacks.rx.registered) {
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e776:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d033      	beq.n	800e7e6 <_ZN23core_comm_UartInterface11rx_functionEv+0xe8>
				if (this->config.rx_callback_value == CORE_COMM_SERIAL_SOCKET_RX_CB_MSG){
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	79db      	ldrb	r3, [r3, #7]
 800e782:	2b01      	cmp	r3, #1
 800e784:	d10b      	bne.n	800e79e <_ZN23core_comm_UartInterface11rx_functionEv+0xa0>
					this->callbacks.rx.call(&rx_message);
 800e786:	687a      	ldr	r2, [r7, #4]
 800e788:	f241 2388 	movw	r3, #4744	; 0x1288
 800e78c:	4413      	add	r3, r2
 800e78e:	687a      	ldr	r2, [r7, #4]
 800e790:	f202 5255 	addw	r2, r2, #1365	; 0x555
 800e794:	4611      	mov	r1, r2
 800e796:	4618      	mov	r0, r3
 800e798:	f002 f89b 	bl	80108d2 <_ZN19core_utils_Callback4callEPv>
 800e79c:	e023      	b.n	800e7e6 <_ZN23core_comm_UartInterface11rx_functionEv+0xe8>
				} else if (this->config.rx_callback_value == CORE_COMM_SERIAL_SOCKET_RX_CB_IFC){
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	79db      	ldrb	r3, [r3, #7]
 800e7a2:	2b02      	cmp	r3, #2
 800e7a4:	d11f      	bne.n	800e7e6 <_ZN23core_comm_UartInterface11rx_functionEv+0xe8>
					this->callbacks.rx.call(this);
 800e7a6:	687a      	ldr	r2, [r7, #4]
 800e7a8:	f241 2388 	movw	r3, #4744	; 0x1288
 800e7ac:	4413      	add	r3, r2
 800e7ae:	6879      	ldr	r1, [r7, #4]
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f002 f88e 	bl	80108d2 <_ZN19core_utils_Callback4callEPv>
 800e7b6:	e016      	b.n	800e7e6 <_ZN23core_comm_UartInterface11rx_functionEv+0xe8>
				}
			}
		} else { // no protocol used
			if (this->callbacks.rx.registered) {
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e7be:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d00f      	beq.n	800e7e6 <_ZN23core_comm_UartInterface11rx_functionEv+0xe8>
				if (this->config.rx_callback_value == CORE_COMM_SERIAL_SOCKET_RX_CB_BUF){
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	79db      	ldrb	r3, [r3, #7]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d108      	bne.n	800e7e0 <_ZN23core_comm_UartInterface11rx_functionEv+0xe2>
					this->callbacks.rx.call(buffer);
 800e7ce:	687a      	ldr	r2, [r7, #4]
 800e7d0:	f241 2388 	movw	r3, #4744	; 0x1288
 800e7d4:	4413      	add	r3, r2
 800e7d6:	6939      	ldr	r1, [r7, #16]
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f002 f87a 	bl	80108d2 <_ZN19core_utils_Callback4callEPv>
 800e7de:	e002      	b.n	800e7e6 <_ZN23core_comm_UartInterface11rx_functionEv+0xe8>
				} else {
					while (1){
						nop();
 800e7e0:	f7ff f9ec 	bl	800dbbc <_Z3nopv>
 800e7e4:	e7fc      	b.n	800e7e0 <_ZN23core_comm_UartInterface11rx_functionEv+0xe2>
					}
				}
			}
		}

		num_messages++;
 800e7e6:	7dfb      	ldrb	r3, [r7, #23]
 800e7e8:	3301      	adds	r3, #1
 800e7ea:	75fb      	strb	r3, [r7, #23]
 800e7ec:	e78d      	b.n	800e70a <_ZN23core_comm_UartInterface11rx_functionEv+0xc>
				continue;
 800e7ee:	bf00      	nop
	while (this->uart.available() > 0) {
 800e7f0:	e78b      	b.n	800e70a <_ZN23core_comm_UartInterface11rx_functionEv+0xc>

	}
	return num_messages;
 800e7f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	3718      	adds	r7, #24
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}

0800e7fc <_Z32core_comm_SerialSocket_RTOS_TaskPv>:
/* ============================================================================= */
void core_comm_SerialSocket_RTOS_Task(void *SerialSocket) {
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b084      	sub	sp, #16
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
	core_comm_UartInterface *socket = (core_comm_UartInterface*) SerialSocket;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	60fb      	str	r3, [r7, #12]

	// Get the task handle and save it in the RTOS structure for later notifying this task
	socket->rtos.task = xTaskGetCurrentTaskHandle();
 800e808:	f7fd ffc2 	bl	800c790 <xTaskGetCurrentTaskHandle>
 800e80c:	4602      	mov	r2, r0
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550

	while (!socket->exit) {
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d10c      	bne.n	800e838 <_Z32core_comm_SerialSocket_RTOS_TaskPv+0x3c>

		// TODO: this is now waiting only for receiving a notification, but maybe we want to do other things
		uint32_t ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800e81e:	f04f 31ff 	mov.w	r1, #4294967295
 800e822:	2001      	movs	r0, #1
 800e824:	f7fe f850 	bl	800c8c8 <ulTaskNotifyTake>
 800e828:	60b8      	str	r0, [r7, #8]
		if (ulNotificationValue) {
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d0f1      	beq.n	800e814 <_Z32core_comm_SerialSocket_RTOS_TaskPv+0x18>
			socket->rx_function();
 800e830:	68f8      	ldr	r0, [r7, #12]
 800e832:	f7ff ff64 	bl	800e6fe <_ZN23core_comm_UartInterface11rx_functionEv>
	while (!socket->exit) {
 800e836:	e7ed      	b.n	800e814 <_Z32core_comm_SerialSocket_RTOS_TaskPv+0x18>
		}

	}
	vTaskDelete(socket->rtos.task);
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 800e83e:	4618      	mov	r0, r3
 800e840:	f7fd fa14 	bl	800bc6c <vTaskDelete>
}
 800e844:	bf00      	nop
 800e846:	3710      	adds	r7, #16
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}

0800e84c <_Z32core_comm_SerialSocket_rx_notifyPvS_>:

/* ============================================================================= */
void core_comm_SerialSocket_rx_notify(void *argument, void *SerialSocket) {
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b084      	sub	sp, #16
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	6039      	str	r1, [r7, #0]
	core_comm_UartInterface *socket = (core_comm_UartInterface*) SerialSocket;
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	60fb      	str	r3, [r7, #12]
	if (socket->rtos.task != NULL) {
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 800e860:	2b00      	cmp	r3, #0
 800e862:	d015      	beq.n	800e890 <_Z32core_comm_SerialSocket_rx_notifyPvS_+0x44>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800e864:	2300      	movs	r3, #0
 800e866:	60bb      	str	r3, [r7, #8]
		vTaskNotifyGiveFromISR(socket->rtos.task, &xHigherPriorityTaskWoken);
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 800e86e:	f107 0208 	add.w	r2, r7, #8
 800e872:	4611      	mov	r1, r2
 800e874:	4618      	mov	r0, r3
 800e876:	f7fe f931 	bl	800cadc <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d007      	beq.n	800e890 <_Z32core_comm_SerialSocket_rx_notifyPvS_+0x44>
 800e880:	4b05      	ldr	r3, [pc, #20]	; (800e898 <_Z32core_comm_SerialSocket_rx_notifyPvS_+0x4c>)
 800e882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e886:	601a      	str	r2, [r3, #0]
 800e888:	f3bf 8f4f 	dsb	sy
 800e88c:	f3bf 8f6f 	isb	sy
	}
}
 800e890:	bf00      	nop
 800e892:	3710      	adds	r7, #16
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}
 800e898:	e000ed04 	.word	0xe000ed04

0800e89c <_ZN22core_utils_BufferQueueILi10EE4readEv>:

		uint8_t len = this->buffers[this->idx_read].len;
		this->inc_read();
		return len;
	}
	core_utils_Buffer* read() {
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b084      	sub	sp, #16
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
		if (this->available() < 1) {
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	f000 f838 	bl	800e91a <_ZN22core_utils_BufferQueueILi10EE9availableEv>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	bfd4      	ite	le
 800e8b0:	2301      	movle	r3, #1
 800e8b2:	2300      	movgt	r3, #0
 800e8b4:	b2db      	uxtb	r3, r3
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d001      	beq.n	800e8be <_ZN22core_utils_BufferQueueILi10EE4readEv+0x22>
			return 0;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	e00f      	b.n	800e8de <_ZN22core_utils_BufferQueueILi10EE4readEv+0x42>
		}

		core_utils_Buffer *buffer = &this->buffers[this->idx_read];
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f893 3518 	ldrb.w	r3, [r3, #1304]	; 0x518
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	4613      	mov	r3, r2
 800e8c8:	019b      	lsls	r3, r3, #6
 800e8ca:	4413      	add	r3, r2
 800e8cc:	005b      	lsls	r3, r3, #1
 800e8ce:	687a      	ldr	r2, [r7, #4]
 800e8d0:	4413      	add	r3, r2
 800e8d2:	3302      	adds	r3, #2
 800e8d4:	60fb      	str	r3, [r7, #12]
		this->inc_read();
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f000 f846 	bl	800e968 <_ZN22core_utils_BufferQueueILi10EE8inc_readEv>
		return buffer;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
	}
 800e8de:	4618      	mov	r0, r3
 800e8e0:	3710      	adds	r7, #16
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}

0800e8e6 <_ZN22core_comm_MessageQueueILi10EE5writeEP23core_comm_SerialMessage>:
	uint8_t write(core_comm_SerialMessage *message) {
 800e8e6:	b580      	push	{r7, lr}
 800e8e8:	b082      	sub	sp, #8
 800e8ea:	af00      	add	r7, sp, #0
 800e8ec:	6078      	str	r0, [r7, #4]
 800e8ee:	6039      	str	r1, [r7, #0]
		message->copyTo(&this->messages[this->idx_write]);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f893 353d 	ldrb.w	r3, [r3, #1341]	; 0x53d
 800e8f6:	461a      	mov	r2, r3
 800e8f8:	2386      	movs	r3, #134	; 0x86
 800e8fa:	fb02 f303 	mul.w	r3, r2, r3
 800e8fe:	687a      	ldr	r2, [r7, #4]
 800e900:	4413      	add	r3, r2
 800e902:	4619      	mov	r1, r3
 800e904:	6838      	ldr	r0, [r7, #0]
 800e906:	f7ff fca1 	bl	800e24c <_ZN23core_comm_SerialMessage6copyToEPS_>
		return this->inc_write();
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f000 f84b 	bl	800e9a6 <_ZN22core_comm_MessageQueueILi10EE9inc_writeEv>
 800e910:	4603      	mov	r3, r0
	}
 800e912:	4618      	mov	r0, r3
 800e914:	3708      	adds	r7, #8
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}

0800e91a <_ZN22core_utils_BufferQueueILi10EE9availableEv>:

	int8_t available() {
 800e91a:	b480      	push	{r7}
 800e91c:	b085      	sub	sp, #20
 800e91e:	af00      	add	r7, sp, #0
 800e920:	6078      	str	r0, [r7, #4]
		if (this->overflow) {
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	781b      	ldrb	r3, [r3, #0]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d002      	beq.n	800e930 <_ZN22core_utils_BufferQueueILi10EE9availableEv+0x16>
			return -1;
 800e92a:	f04f 33ff 	mov.w	r3, #4294967295
 800e92e:	e015      	b.n	800e95c <_ZN22core_utils_BufferQueueILi10EE9availableEv+0x42>
		}
		int8_t available = this->idx_write - this->idx_read;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f893 2517 	ldrb.w	r2, [r3, #1303]	; 0x517
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	f893 3518 	ldrb.w	r3, [r3, #1304]	; 0x518
 800e93c:	1ad3      	subs	r3, r2, r3
 800e93e:	b2db      	uxtb	r3, r3
 800e940:	73fb      	strb	r3, [r7, #15]
		if (available < 0) {
 800e942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e946:	2b00      	cmp	r3, #0
 800e948:	da06      	bge.n	800e958 <_ZN22core_utils_BufferQueueILi10EE9availableEv+0x3e>
			available += this->num_buffers;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	f893 2516 	ldrb.w	r2, [r3, #1302]	; 0x516
 800e950:	7bfb      	ldrb	r3, [r7, #15]
 800e952:	4413      	add	r3, r2
 800e954:	b2db      	uxtb	r3, r3
 800e956:	73fb      	strb	r3, [r7, #15]
		}
		return available;
 800e958:	f997 300f 	ldrsb.w	r3, [r7, #15]

	}
 800e95c:	4618      	mov	r0, r3
 800e95e:	3714      	adds	r7, #20
 800e960:	46bd      	mov	sp, r7
 800e962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e966:	4770      	bx	lr

0800e968 <_ZN22core_utils_BufferQueueILi10EE8inc_readEv>:
			return 0;
		} else {
			return 1;
		}
	}
	uint8_t inc_read() {
 800e968:	b480      	push	{r7}
 800e96a:	b083      	sub	sp, #12
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
		this->idx_read++;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f893 3518 	ldrb.w	r3, [r3, #1304]	; 0x518
 800e976:	3301      	adds	r3, #1
 800e978:	b2da      	uxtb	r2, r3
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518

		if (this->idx_read == this->num_buffers) {
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f893 2518 	ldrb.w	r2, [r3, #1304]	; 0x518
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f893 3516 	ldrb.w	r3, [r3, #1302]	; 0x516
 800e98c:	429a      	cmp	r2, r3
 800e98e:	d103      	bne.n	800e998 <_ZN22core_utils_BufferQueueILi10EE8inc_readEv+0x30>
			this->idx_read = 0;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2200      	movs	r2, #0
 800e994:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
		}
		return 1;
 800e998:	2301      	movs	r3, #1
	}
 800e99a:	4618      	mov	r0, r3
 800e99c:	370c      	adds	r7, #12
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a4:	4770      	bx	lr

0800e9a6 <_ZN22core_comm_MessageQueueILi10EE9inc_writeEv>:
	uint8_t inc_write() {
 800e9a6:	b480      	push	{r7}
 800e9a8:	b083      	sub	sp, #12
 800e9aa:	af00      	add	r7, sp, #0
 800e9ac:	6078      	str	r0, [r7, #4]
		this->idx_write++;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f893 353d 	ldrb.w	r3, [r3, #1341]	; 0x53d
 800e9b4:	3301      	adds	r3, #1
 800e9b6:	b2da      	uxtb	r2, r3
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f883 253d 	strb.w	r2, [r3, #1341]	; 0x53d
		if (this->idx_write == this->len) {
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	f893 253d 	ldrb.w	r2, [r3, #1341]	; 0x53d
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f893 353f 	ldrb.w	r3, [r3, #1343]	; 0x53f
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d103      	bne.n	800e9d6 <_ZN22core_comm_MessageQueueILi10EE9inc_writeEv+0x30>
			this->idx_write = 0;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	f883 253d 	strb.w	r2, [r3, #1341]	; 0x53d
		return this->idx_write;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f893 353d 	ldrb.w	r3, [r3, #1341]	; 0x53d
	}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	370c      	adds	r7, #12
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr

0800e9e8 <_Z41__static_initialization_and_destruction_0ii>:
 800e9e8:	b480      	push	{r7}
 800e9ea:	b083      	sub	sp, #12
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	6039      	str	r1, [r7, #0]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2b01      	cmp	r3, #1
 800e9f6:	d108      	bne.n	800ea0a <_Z41__static_initialization_and_destruction_0ii+0x22>
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e9fe:	4293      	cmp	r3, r2
 800ea00:	d103      	bne.n	800ea0a <_Z41__static_initialization_and_destruction_0ii+0x22>
		1, .rx_callback_value = CORE_COMM_SERIAL_SOCKET_RX_CB_MSG, };
 800ea02:	4a05      	ldr	r2, [pc, #20]	; (800ea18 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800ea04:	4b05      	ldr	r3, [pc, #20]	; (800ea1c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	6013      	str	r3, [r2, #0]
}
 800ea0a:	bf00      	nop
 800ea0c:	370c      	adds	r7, #12
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea14:	4770      	bx	lr
 800ea16:	bf00      	nop
 800ea18:	24000024 	.word	0x24000024
 800ea1c:	24000020 	.word	0x24000020

0800ea20 <_GLOBAL__sub_I_std_hardware_uart_config>:
 800ea20:	b580      	push	{r7, lr}
 800ea22:	af00      	add	r7, sp, #0
 800ea24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ea28:	2001      	movs	r0, #1
 800ea2a:	f7ff ffdd 	bl	800e9e8 <_Z41__static_initialization_and_destruction_0ii>
 800ea2e:	bd80      	pop	{r7, pc}

0800ea30 <_ZN8MadgwickC1Ev>:
// Functions

//-------------------------------------------------------------------------------------------
// AHRS algorithm update

Madgwick::Madgwick() {
 800ea30:	b480      	push	{r7}
 800ea32:	b083      	sub	sp, #12
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
	beta = betaDef;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	4a0f      	ldr	r2, [pc, #60]	; (800ea78 <_ZN8MadgwickC1Ev+0x48>)
 800ea3c:	601a      	str	r2, [r3, #0]
	q0 = 1.0f;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ea44:	619a      	str	r2, [r3, #24]
	q1 = 0.0f;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f04f 0200 	mov.w	r2, #0
 800ea4c:	61da      	str	r2, [r3, #28]
	q2 = 0.0f;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f04f 0200 	mov.w	r2, #0
 800ea54:	621a      	str	r2, [r3, #32]
	q3 = 0.0f;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f04f 0200 	mov.w	r2, #0
 800ea5c:	625a      	str	r2, [r3, #36]	; 0x24
	invSampleFreq = 1.0f / sampleFreqDef;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	4a06      	ldr	r2, [pc, #24]	; (800ea7c <_ZN8MadgwickC1Ev+0x4c>)
 800ea62:	611a      	str	r2, [r3, #16]
	anglesComputed = 0;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2200      	movs	r2, #0
 800ea68:	751a      	strb	r2, [r3, #20]
}
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	370c      	adds	r7, #12
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr
 800ea78:	3dcccccd 	.word	0x3dcccccd
 800ea7c:	3c23d70a 	.word	0x3c23d70a

0800ea80 <_ZN8Madgwick9updateIMUEffffff>:
}

//-------------------------------------------------------------------------------------------
// IMU algorithm update

void Madgwick::updateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b09e      	sub	sp, #120	; 0x78
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	61f8      	str	r0, [r7, #28]
 800ea88:	ed87 0a06 	vstr	s0, [r7, #24]
 800ea8c:	edc7 0a05 	vstr	s1, [r7, #20]
 800ea90:	ed87 1a04 	vstr	s2, [r7, #16]
 800ea94:	edc7 1a03 	vstr	s3, [r7, #12]
 800ea98:	ed87 2a02 	vstr	s4, [r7, #8]
 800ea9c:	edc7 2a01 	vstr	s5, [r7, #4]
//	gx *= 0.0174533f;
//	gy *= 0.0174533f;
//	gz *= 0.0174533f;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800eaa0:	69fb      	ldr	r3, [r7, #28]
 800eaa2:	edd3 7a07 	vldr	s15, [r3, #28]
 800eaa6:	eeb1 7a67 	vneg.f32	s14, s15
 800eaaa:	edd7 7a06 	vldr	s15, [r7, #24]
 800eaae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eab2:	69fb      	ldr	r3, [r7, #28]
 800eab4:	edd3 6a08 	vldr	s13, [r3, #32]
 800eab8:	edd7 7a05 	vldr	s15, [r7, #20]
 800eabc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eac0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800eac4:	69fb      	ldr	r3, [r7, #28]
 800eac6:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800eaca:	edd7 7a04 	vldr	s15, [r7, #16]
 800eace:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ead2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ead6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800eada:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eade:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800eae2:	69fb      	ldr	r3, [r7, #28]
 800eae4:	ed93 7a06 	vldr	s14, [r3, #24]
 800eae8:	edd7 7a06 	vldr	s15, [r7, #24]
 800eaec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eaf0:	69fb      	ldr	r3, [r7, #28]
 800eaf2:	edd3 6a08 	vldr	s13, [r3, #32]
 800eaf6:	edd7 7a04 	vldr	s15, [r7, #16]
 800eafa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eafe:	ee37 7a27 	vadd.f32	s14, s14, s15
 800eb02:	69fb      	ldr	r3, [r7, #28]
 800eb04:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800eb08:	edd7 7a05 	vldr	s15, [r7, #20]
 800eb0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eb10:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eb14:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800eb18:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eb1c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800eb20:	69fb      	ldr	r3, [r7, #28]
 800eb22:	ed93 7a06 	vldr	s14, [r3, #24]
 800eb26:	edd7 7a05 	vldr	s15, [r7, #20]
 800eb2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eb2e:	69fb      	ldr	r3, [r7, #28]
 800eb30:	edd3 6a07 	vldr	s13, [r3, #28]
 800eb34:	edd7 7a04 	vldr	s15, [r7, #16]
 800eb38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eb3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800eb40:	69fb      	ldr	r3, [r7, #28]
 800eb42:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800eb46:	edd7 7a06 	vldr	s15, [r7, #24]
 800eb4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eb4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb52:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800eb56:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eb5a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800eb5e:	69fb      	ldr	r3, [r7, #28]
 800eb60:	ed93 7a06 	vldr	s14, [r3, #24]
 800eb64:	edd7 7a04 	vldr	s15, [r7, #16]
 800eb68:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eb6c:	69fb      	ldr	r3, [r7, #28]
 800eb6e:	edd3 6a07 	vldr	s13, [r3, #28]
 800eb72:	edd7 7a05 	vldr	s15, [r7, #20]
 800eb76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eb7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800eb7e:	69fb      	ldr	r3, [r7, #28]
 800eb80:	edd3 6a08 	vldr	s13, [r3, #32]
 800eb84:	edd7 7a06 	vldr	s15, [r7, #24]
 800eb88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eb8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eb90:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800eb94:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eb98:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800eb9c:	edd7 7a03 	vldr	s15, [r7, #12]
 800eba0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800eba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eba8:	d10e      	bne.n	800ebc8 <_ZN8Madgwick9updateIMUEffffff+0x148>
 800ebaa:	edd7 7a02 	vldr	s15, [r7, #8]
 800ebae:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ebb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebb6:	d107      	bne.n	800ebc8 <_ZN8Madgwick9updateIMUEffffff+0x148>
 800ebb8:	edd7 7a01 	vldr	s15, [r7, #4]
 800ebbc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ebc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebc4:	f000 81db 	beq.w	800ef7e <_ZN8Madgwick9updateIMUEffffff+0x4fe>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800ebc8:	edd7 7a03 	vldr	s15, [r7, #12]
 800ebcc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800ebd0:	edd7 7a02 	vldr	s15, [r7, #8]
 800ebd4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ebd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ebdc:	edd7 7a01 	vldr	s15, [r7, #4]
 800ebe0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ebe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ebe8:	eeb0 0a67 	vmov.f32	s0, s15
 800ebec:	f000 fa5e 	bl	800f0ac <_ZN8Madgwick7invSqrtEf>
 800ebf0:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		ax *= recipNorm;
 800ebf4:	ed97 7a03 	vldr	s14, [r7, #12]
 800ebf8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800ebfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec00:	edc7 7a03 	vstr	s15, [r7, #12]
		ay *= recipNorm;
 800ec04:	ed97 7a02 	vldr	s14, [r7, #8]
 800ec08:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800ec0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec10:	edc7 7a02 	vstr	s15, [r7, #8]
		az *= recipNorm;
 800ec14:	ed97 7a01 	vldr	s14, [r7, #4]
 800ec18:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800ec1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec20:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 800ec24:	69fb      	ldr	r3, [r7, #28]
 800ec26:	edd3 7a06 	vldr	s15, [r3, #24]
 800ec2a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ec2e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_2q1 = 2.0f * q1;
 800ec32:	69fb      	ldr	r3, [r7, #28]
 800ec34:	edd3 7a07 	vldr	s15, [r3, #28]
 800ec38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ec3c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_2q2 = 2.0f * q2;
 800ec40:	69fb      	ldr	r3, [r7, #28]
 800ec42:	edd3 7a08 	vldr	s15, [r3, #32]
 800ec46:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ec4a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q3 = 2.0f * q3;
 800ec4e:	69fb      	ldr	r3, [r7, #28]
 800ec50:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800ec54:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ec58:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_4q0 = 4.0f * q0;
 800ec5c:	69fb      	ldr	r3, [r7, #28]
 800ec5e:	edd3 7a06 	vldr	s15, [r3, #24]
 800ec62:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800ec66:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ec6a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_4q1 = 4.0f * q1;
 800ec6e:	69fb      	ldr	r3, [r7, #28]
 800ec70:	edd3 7a07 	vldr	s15, [r3, #28]
 800ec74:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800ec78:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ec7c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q2 = 4.0f * q2;
 800ec80:	69fb      	ldr	r3, [r7, #28]
 800ec82:	edd3 7a08 	vldr	s15, [r3, #32]
 800ec86:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800ec8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ec8e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_8q1 = 8.0f * q1;
 800ec92:	69fb      	ldr	r3, [r7, #28]
 800ec94:	edd3 7a07 	vldr	s15, [r3, #28]
 800ec98:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800ec9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eca0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_8q2 = 8.0f * q2;
 800eca4:	69fb      	ldr	r3, [r7, #28]
 800eca6:	edd3 7a08 	vldr	s15, [r3, #32]
 800ecaa:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800ecae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ecb2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		q0q0 = q0 * q0;
 800ecb6:	69fb      	ldr	r3, [r7, #28]
 800ecb8:	ed93 7a06 	vldr	s14, [r3, #24]
 800ecbc:	69fb      	ldr	r3, [r7, #28]
 800ecbe:	edd3 7a06 	vldr	s15, [r3, #24]
 800ecc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecc6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		q1q1 = q1 * q1;
 800ecca:	69fb      	ldr	r3, [r7, #28]
 800eccc:	ed93 7a07 	vldr	s14, [r3, #28]
 800ecd0:	69fb      	ldr	r3, [r7, #28]
 800ecd2:	edd3 7a07 	vldr	s15, [r3, #28]
 800ecd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecda:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q2q2 = q2 * q2;
 800ecde:	69fb      	ldr	r3, [r7, #28]
 800ece0:	ed93 7a08 	vldr	s14, [r3, #32]
 800ece4:	69fb      	ldr	r3, [r7, #28]
 800ece6:	edd3 7a08 	vldr	s15, [r3, #32]
 800ecea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecee:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q3q3 = q3 * q3;
 800ecf2:	69fb      	ldr	r3, [r7, #28]
 800ecf4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800ecf8:	69fb      	ldr	r3, [r7, #28]
 800ecfa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800ecfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed02:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800ed06:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800ed0a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ed0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ed12:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800ed16:	edd7 7a03 	vldr	s15, [r7, #12]
 800ed1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ed1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ed22:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800ed26:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800ed2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ed2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ed32:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800ed36:	edd7 7a02 	vldr	s15, [r7, #8]
 800ed3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ed3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed42:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800ed46:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ed4a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ed4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ed52:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800ed56:	edd7 7a03 	vldr	s15, [r7, #12]
 800ed5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ed5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ed62:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800ed66:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800ed6a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ed6e:	69fb      	ldr	r3, [r7, #28]
 800ed70:	edd3 7a07 	vldr	s15, [r3, #28]
 800ed74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ed78:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ed7c:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800ed80:	edd7 7a02 	vldr	s15, [r7, #8]
 800ed84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ed88:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ed8c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800ed90:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ed94:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800ed98:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800ed9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eda0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800eda4:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800eda8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800edac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800edb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800edb4:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800edb8:	edd7 7a01 	vldr	s15, [r7, #4]
 800edbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800edc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800edc4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800edc8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800edcc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800edd0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800edd4:	69fb      	ldr	r3, [r7, #28]
 800edd6:	edd3 7a08 	vldr	s15, [r3, #32]
 800edda:	ee27 7a27 	vmul.f32	s14, s14, s15
 800edde:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800ede2:	edd7 7a03 	vldr	s15, [r7, #12]
 800ede6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800edea:	ee37 7a27 	vadd.f32	s14, s14, s15
 800edee:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800edf2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800edf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800edfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800edfe:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800ee02:	edd7 7a02 	vldr	s15, [r7, #8]
 800ee06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ee0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ee0e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800ee12:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ee16:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800ee1a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800ee1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ee22:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ee26:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800ee2a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ee2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ee32:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ee36:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800ee3a:	edd7 7a01 	vldr	s15, [r7, #4]
 800ee3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ee42:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ee46:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800ee4a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800ee4e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800ee52:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ee56:	69fb      	ldr	r3, [r7, #28]
 800ee58:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800ee5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ee60:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800ee64:	edd7 7a03 	vldr	s15, [r7, #12]
 800ee68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ee6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ee70:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ee74:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800ee78:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ee7c:	69fb      	ldr	r3, [r7, #28]
 800ee7e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800ee82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ee86:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ee8a:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800ee8e:	edd7 7a02 	vldr	s15, [r7, #8]
 800ee92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ee96:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee9a:	edc7 7a08 	vstr	s15, [r7, #32]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800ee9e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800eea2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800eea6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800eeaa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800eeae:	ee37 7a27 	vadd.f32	s14, s14, s15
 800eeb2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800eeb6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800eeba:	ee37 7a27 	vadd.f32	s14, s14, s15
 800eebe:	edd7 7a08 	vldr	s15, [r7, #32]
 800eec2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800eec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eeca:	eeb0 0a67 	vmov.f32	s0, s15
 800eece:	f000 f8ed 	bl	800f0ac <_ZN8Madgwick7invSqrtEf>
 800eed2:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		s0 *= recipNorm;
 800eed6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800eeda:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800eede:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eee2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 *= recipNorm;
 800eee6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800eeea:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800eeee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eef2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 *= recipNorm;
 800eef6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800eefa:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800eefe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef02:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 *= recipNorm;
 800ef06:	ed97 7a08 	vldr	s14, [r7, #32]
 800ef0a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800ef0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef12:	edc7 7a08 	vstr	s15, [r7, #32]

		// Apply feedback step
		qDot1 -= beta * s0;
 800ef16:	69fb      	ldr	r3, [r7, #28]
 800ef18:	ed93 7a00 	vldr	s14, [r3]
 800ef1c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ef20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef24:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800ef28:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef2c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		qDot2 -= beta * s1;
 800ef30:	69fb      	ldr	r3, [r7, #28]
 800ef32:	ed93 7a00 	vldr	s14, [r3]
 800ef36:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ef3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef3e:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800ef42:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef46:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		qDot3 -= beta * s2;
 800ef4a:	69fb      	ldr	r3, [r7, #28]
 800ef4c:	ed93 7a00 	vldr	s14, [r3]
 800ef50:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ef54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef58:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800ef5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef60:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot4 -= beta * s3;
 800ef64:	69fb      	ldr	r3, [r7, #28]
 800ef66:	ed93 7a00 	vldr	s14, [r3]
 800ef6a:	edd7 7a08 	vldr	s15, [r7, #32]
 800ef6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef72:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800ef76:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef7a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * invSampleFreq;
 800ef7e:	69fb      	ldr	r3, [r7, #28]
 800ef80:	ed93 7a06 	vldr	s14, [r3, #24]
 800ef84:	69fb      	ldr	r3, [r7, #28]
 800ef86:	edd3 6a04 	vldr	s13, [r3, #16]
 800ef8a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800ef8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ef92:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ef96:	69fb      	ldr	r3, [r7, #28]
 800ef98:	edc3 7a06 	vstr	s15, [r3, #24]
	q1 += qDot2 * invSampleFreq;
 800ef9c:	69fb      	ldr	r3, [r7, #28]
 800ef9e:	ed93 7a07 	vldr	s14, [r3, #28]
 800efa2:	69fb      	ldr	r3, [r7, #28]
 800efa4:	edd3 6a04 	vldr	s13, [r3, #16]
 800efa8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800efac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800efb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800efb4:	69fb      	ldr	r3, [r7, #28]
 800efb6:	edc3 7a07 	vstr	s15, [r3, #28]
	q2 += qDot3 * invSampleFreq;
 800efba:	69fb      	ldr	r3, [r7, #28]
 800efbc:	ed93 7a08 	vldr	s14, [r3, #32]
 800efc0:	69fb      	ldr	r3, [r7, #28]
 800efc2:	edd3 6a04 	vldr	s13, [r3, #16]
 800efc6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800efca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800efce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800efd2:	69fb      	ldr	r3, [r7, #28]
 800efd4:	edc3 7a08 	vstr	s15, [r3, #32]
	q3 += qDot4 * invSampleFreq;
 800efd8:	69fb      	ldr	r3, [r7, #28]
 800efda:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800efde:	69fb      	ldr	r3, [r7, #28]
 800efe0:	edd3 6a04 	vldr	s13, [r3, #16]
 800efe4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800efe8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800efec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eff0:	69fb      	ldr	r3, [r7, #28]
 800eff2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800eff6:	69fb      	ldr	r3, [r7, #28]
 800eff8:	ed93 7a06 	vldr	s14, [r3, #24]
 800effc:	69fb      	ldr	r3, [r7, #28]
 800effe:	edd3 7a06 	vldr	s15, [r3, #24]
 800f002:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f006:	69fb      	ldr	r3, [r7, #28]
 800f008:	edd3 6a07 	vldr	s13, [r3, #28]
 800f00c:	69fb      	ldr	r3, [r7, #28]
 800f00e:	edd3 7a07 	vldr	s15, [r3, #28]
 800f012:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f016:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f01a:	69fb      	ldr	r3, [r7, #28]
 800f01c:	edd3 6a08 	vldr	s13, [r3, #32]
 800f020:	69fb      	ldr	r3, [r7, #28]
 800f022:	edd3 7a08 	vldr	s15, [r3, #32]
 800f026:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f02a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f02e:	69fb      	ldr	r3, [r7, #28]
 800f030:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800f034:	69fb      	ldr	r3, [r7, #28]
 800f036:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800f03a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f03e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f042:	eeb0 0a67 	vmov.f32	s0, s15
 800f046:	f000 f831 	bl	800f0ac <_ZN8Madgwick7invSqrtEf>
 800f04a:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
	q0 *= recipNorm;
 800f04e:	69fb      	ldr	r3, [r7, #28]
 800f050:	ed93 7a06 	vldr	s14, [r3, #24]
 800f054:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800f058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f05c:	69fb      	ldr	r3, [r7, #28]
 800f05e:	edc3 7a06 	vstr	s15, [r3, #24]
	q1 *= recipNorm;
 800f062:	69fb      	ldr	r3, [r7, #28]
 800f064:	ed93 7a07 	vldr	s14, [r3, #28]
 800f068:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800f06c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f070:	69fb      	ldr	r3, [r7, #28]
 800f072:	edc3 7a07 	vstr	s15, [r3, #28]
	q2 *= recipNorm;
 800f076:	69fb      	ldr	r3, [r7, #28]
 800f078:	ed93 7a08 	vldr	s14, [r3, #32]
 800f07c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800f080:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f084:	69fb      	ldr	r3, [r7, #28]
 800f086:	edc3 7a08 	vstr	s15, [r3, #32]
	q3 *= recipNorm;
 800f08a:	69fb      	ldr	r3, [r7, #28]
 800f08c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800f090:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800f094:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f098:	69fb      	ldr	r3, [r7, #28]
 800f09a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	anglesComputed = 0;
 800f09e:	69fb      	ldr	r3, [r7, #28]
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	751a      	strb	r2, [r3, #20]
}
 800f0a4:	bf00      	nop
 800f0a6:	3778      	adds	r7, #120	; 0x78
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <_ZN8Madgwick7invSqrtEf>:

//-------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float Madgwick::invSqrt(float x) {
 800f0ac:	b480      	push	{r7}
 800f0ae:	b087      	sub	sp, #28
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 800f0b6:	edd7 7a01 	vldr	s15, [r7, #4]
 800f0ba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f0be:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f0c2:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800f0ca:	f107 0310 	add.w	r3, r7, #16
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	105a      	asrs	r2, r3, #1
 800f0d6:	4b1c      	ldr	r3, [pc, #112]	; (800f148 <_ZN8Madgwick7invSqrtEf+0x9c>)
 800f0d8:	1a9b      	subs	r3, r3, r2
 800f0da:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 800f0dc:	f107 030c 	add.w	r3, r7, #12
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800f0e4:	ed97 7a04 	vldr	s14, [r7, #16]
 800f0e8:	edd7 7a05 	vldr	s15, [r7, #20]
 800f0ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f0f0:	edd7 7a04 	vldr	s15, [r7, #16]
 800f0f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0f8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800f0fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f100:	edd7 7a04 	vldr	s15, [r7, #16]
 800f104:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f108:	edc7 7a04 	vstr	s15, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800f10c:	ed97 7a04 	vldr	s14, [r7, #16]
 800f110:	edd7 7a05 	vldr	s15, [r7, #20]
 800f114:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f118:	edd7 7a04 	vldr	s15, [r7, #16]
 800f11c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f120:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800f124:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f128:	edd7 7a04 	vldr	s15, [r7, #16]
 800f12c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f130:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 800f134:	693b      	ldr	r3, [r7, #16]
 800f136:	ee07 3a90 	vmov	s15, r3
}
 800f13a:	eeb0 0a67 	vmov.f32	s0, s15
 800f13e:	371c      	adds	r7, #28
 800f140:	46bd      	mov	sp, r7
 800f142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f146:	4770      	bx	lr
 800f148:	5f3759df 	.word	0x5f3759df

0800f14c <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>:
 */


#include "core_hardware_led.h"

core_hardware_LED::core_hardware_LED(GPIO_TypeDef* GPIOx, uint16_t PINx) {
 800f14c:	b480      	push	{r7}
 800f14e:	b085      	sub	sp, #20
 800f150:	af00      	add	r7, sp, #0
 800f152:	60f8      	str	r0, [r7, #12]
 800f154:	60b9      	str	r1, [r7, #8]
 800f156:	4613      	mov	r3, r2
 800f158:	80fb      	strh	r3, [r7, #6]
	this->GPIOx = GPIOx;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	68ba      	ldr	r2, [r7, #8]
 800f15e:	601a      	str	r2, [r3, #0]
	this->PINx = PINx;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	88fa      	ldrh	r2, [r7, #6]
 800f164:	809a      	strh	r2, [r3, #4]
}
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	4618      	mov	r0, r3
 800f16a:	3714      	adds	r7, #20
 800f16c:	46bd      	mov	sp, r7
 800f16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f172:	4770      	bx	lr

0800f174 <_ZN17core_hardware_LED6toggleEv>:

void core_hardware_LED::off() {
	HAL_GPIO_WritePin(this->GPIOx, this->PINx, GPIO_PIN_RESET);
}

void core_hardware_LED::toggle() {
 800f174:	b580      	push	{r7, lr}
 800f176:	b082      	sub	sp, #8
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(this->GPIOx, this->PINx);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681a      	ldr	r2, [r3, #0]
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	889b      	ldrh	r3, [r3, #4]
 800f184:	4619      	mov	r1, r3
 800f186:	4610      	mov	r0, r2
 800f188:	f7f5 fc15 	bl	80049b6 <HAL_GPIO_TogglePin>
}
 800f18c:	bf00      	nop
 800f18e:	3708      	adds	r7, #8
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <_ZN17core_utils_BufferC1Ev>:
class core_utils_Buffer {
 800f194:	b580      	push	{r7, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	4618      	mov	r0, r3
 800f1a0:	2380      	movs	r3, #128	; 0x80
 800f1a2:	461a      	mov	r2, r3
 800f1a4:	2100      	movs	r1, #0
 800f1a6:	f001 fcd6 	bl	8010b56 <memset>
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3708      	adds	r7, #8
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}

0800f1b4 <_ZN18core_hardware_UARTC1Ev>:
		.queues = 1, };

void uartRxCmpltDMA_callback(UART_HandleTypeDef *huart, uint16_t size);

/* ============================================================================= */
core_hardware_UART::core_hardware_UART() {
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b082      	sub	sp, #8
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7ff f94f 	bl	800e462 <_ZN25core_hardware_UART_configC1Ev>
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	3304      	adds	r3, #4
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f000 fb7c 	bl	800f8c6 <_ZN22core_utils_BufferQueueILi10EEC1Ev>
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f203 531e 	addw	r3, r3, #1310	; 0x51e
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f000 fb76 	bl	800f8c6 <_ZN22core_utils_BufferQueueILi10EEC1Ev>
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2200      	movs	r2, #0
 800f1de:	f883 2a3c 	strb.w	r2, [r3, #2620]	; 0xa3c
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f603 233e 	addw	r3, r3, #2622	; 0xa3e
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f7ff ffd3 	bl	800f194 <_ZN17core_utils_BufferC1Ev>
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f7ff ffcd 	bl	800f194 <_ZN17core_utils_BufferC1Ev>
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 800f200:	4618      	mov	r0, r3
 800f202:	f001 fb58 	bl	80108b6 <_ZN19core_utils_CallbackC1Ev>

}
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	4618      	mov	r0, r3
 800f20a:	3708      	adds	r7, #8
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}

0800f210 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config>:
void core_hardware_UART::init(UART_HandleTypeDef *huart) {
	this->init(huart, core_hardware_uart_std_config);
}
/* ============================================================================= */
void core_hardware_UART::init(UART_HandleTypeDef *huart,
		core_hardware_UART_config config) {
 800f210:	b580      	push	{r7, lr}
 800f212:	b084      	sub	sp, #16
 800f214:	af00      	add	r7, sp, #0
 800f216:	60f8      	str	r0, [r7, #12]
 800f218:	60b9      	str	r1, [r7, #8]
 800f21a:	607a      	str	r2, [r7, #4]

	uarts[num_uarts] = this;
 800f21c:	4b6e      	ldr	r3, [pc, #440]	; (800f3d8 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1c8>)
 800f21e:	781b      	ldrb	r3, [r3, #0]
 800f220:	4619      	mov	r1, r3
 800f222:	4a6e      	ldr	r2, [pc, #440]	; (800f3dc <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1cc>)
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	num_uarts++;
 800f22a:	4b6b      	ldr	r3, [pc, #428]	; (800f3d8 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1c8>)
 800f22c:	781b      	ldrb	r3, [r3, #0]
 800f22e:	3301      	adds	r3, #1
 800f230:	b2da      	uxtb	r2, r3
 800f232:	4b69      	ldr	r3, [pc, #420]	; (800f3d8 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1c8>)
 800f234:	701a      	strb	r2, [r3, #0]
	this->huart = huart;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	68ba      	ldr	r2, [r7, #8]
 800f23a:	f8c3 2a38 	str.w	r2, [r3, #2616]	; 0xa38

	this->config = config;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	687a      	ldr	r2, [r7, #4]
 800f242:	601a      	str	r2, [r3, #0]
	if (this->huart == NULL) {
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d102      	bne.n	800f254 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x44>
		core_ErrorHandler(1);
 800f24e:	2001      	movs	r0, #1
 800f250:	f001 fb2c 	bl	80108ac <_Z17core_ErrorHandleri>
	}

//	HAL_UART_RegisterCallback(this->huart, HAL_UART_RX_COMPLETE_CB_ID, uartRxCmpltDMA_callback);
	HAL_UART_RegisterRxEventCallback(this->huart, uartRxCmpltDMA_callback);
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f25a:	4961      	ldr	r1, [pc, #388]	; (800f3e0 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1d0>)
 800f25c:	4618      	mov	r0, r3
 800f25e:	f7f9 fb25 	bl	80088ac <HAL_UART_RegisterRxEventCallback>
	__HAL_DMA_DISABLE_IT(this->huart->hdmarx, DMA_IT_HT);
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	4a5d      	ldr	r2, [pc, #372]	; (800f3e4 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1d4>)
 800f270:	4293      	cmp	r3, r2
 800f272:	f000 8087 	beq.w	800f384 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x174>
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f27c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	4a59      	ldr	r2, [pc, #356]	; (800f3e8 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1d8>)
 800f284:	4293      	cmp	r3, r2
 800f286:	d07d      	beq.n	800f384 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x174>
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f28e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	4a55      	ldr	r2, [pc, #340]	; (800f3ec <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1dc>)
 800f296:	4293      	cmp	r3, r2
 800f298:	d074      	beq.n	800f384 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x174>
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f2a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	4a52      	ldr	r2, [pc, #328]	; (800f3f0 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1e0>)
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	d06b      	beq.n	800f384 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x174>
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f2b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	4a4e      	ldr	r2, [pc, #312]	; (800f3f4 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1e4>)
 800f2ba:	4293      	cmp	r3, r2
 800f2bc:	d062      	beq.n	800f384 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x174>
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f2c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	4a4b      	ldr	r2, [pc, #300]	; (800f3f8 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1e8>)
 800f2cc:	4293      	cmp	r3, r2
 800f2ce:	d059      	beq.n	800f384 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x174>
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f2d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	4a47      	ldr	r2, [pc, #284]	; (800f3fc <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1ec>)
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	d050      	beq.n	800f384 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x174>
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f2e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	4a44      	ldr	r2, [pc, #272]	; (800f400 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1f0>)
 800f2f0:	4293      	cmp	r3, r2
 800f2f2:	d047      	beq.n	800f384 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x174>
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f2fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	4a40      	ldr	r2, [pc, #256]	; (800f404 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1f4>)
 800f302:	4293      	cmp	r3, r2
 800f304:	d03e      	beq.n	800f384 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x174>
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f30c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	4a3d      	ldr	r2, [pc, #244]	; (800f408 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1f8>)
 800f314:	4293      	cmp	r3, r2
 800f316:	d035      	beq.n	800f384 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x174>
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f31e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	4a39      	ldr	r2, [pc, #228]	; (800f40c <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1fc>)
 800f326:	4293      	cmp	r3, r2
 800f328:	d02c      	beq.n	800f384 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x174>
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	4a36      	ldr	r2, [pc, #216]	; (800f410 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x200>)
 800f338:	4293      	cmp	r3, r2
 800f33a:	d023      	beq.n	800f384 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x174>
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	4a32      	ldr	r2, [pc, #200]	; (800f414 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x204>)
 800f34a:	4293      	cmp	r3, r2
 800f34c:	d01a      	beq.n	800f384 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x174>
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	4a2f      	ldr	r2, [pc, #188]	; (800f418 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x208>)
 800f35c:	4293      	cmp	r3, r2
 800f35e:	d011      	beq.n	800f384 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x174>
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	4a2b      	ldr	r2, [pc, #172]	; (800f41c <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x20c>)
 800f36e:	4293      	cmp	r3, r2
 800f370:	d008      	beq.n	800f384 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x174>
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	4a28      	ldr	r2, [pc, #160]	; (800f420 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x210>)
 800f380:	4293      	cmp	r3, r2
 800f382:	d110      	bne.n	800f3a6 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x196>
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f38a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	681a      	ldr	r2, [r3, #0]
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f398:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	f022 0208 	bic.w	r2, r2, #8
 800f3a2:	601a      	str	r2, [r3, #0]
 800f3a4:	e00f      	b.n	800f3c6 <_ZN18core_hardware_UART4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1b6>
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f3ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	681a      	ldr	r2, [r3, #0]
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f3ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	f022 0204 	bic.w	r2, r2, #4
 800f3c4:	601a      	str	r2, [r3, #0]

	this->state = CORE_HARDWARE_UART_STATE_INIT;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	2201      	movs	r2, #1
 800f3ca:	f883 2a3c 	strb.w	r2, [r3, #2620]	; 0xa3c
}
 800f3ce:	bf00      	nop
 800f3d0:	3710      	adds	r7, #16
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}
 800f3d6:	bf00      	nop
 800f3d8:	2400c6d4 	.word	0x2400c6d4
 800f3dc:	2400c6c0 	.word	0x2400c6c0
 800f3e0:	0800f699 	.word	0x0800f699
 800f3e4:	40020010 	.word	0x40020010
 800f3e8:	40020028 	.word	0x40020028
 800f3ec:	40020040 	.word	0x40020040
 800f3f0:	40020058 	.word	0x40020058
 800f3f4:	40020070 	.word	0x40020070
 800f3f8:	40020088 	.word	0x40020088
 800f3fc:	400200a0 	.word	0x400200a0
 800f400:	400200b8 	.word	0x400200b8
 800f404:	40020410 	.word	0x40020410
 800f408:	40020428 	.word	0x40020428
 800f40c:	40020440 	.word	0x40020440
 800f410:	40020458 	.word	0x40020458
 800f414:	40020470 	.word	0x40020470
 800f418:	40020488 	.word	0x40020488
 800f41c:	400204a0 	.word	0x400204a0
 800f420:	400204b8 	.word	0x400204b8

0800f424 <_ZN18core_hardware_UART9availableEv>:

/* ============================================================================= */
int8_t core_hardware_UART::available() {
 800f424:	b580      	push	{r7, lr}
 800f426:	b082      	sub	sp, #8
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
	return this->rx_queue.available();
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	3304      	adds	r3, #4
 800f430:	4618      	mov	r0, r3
 800f432:	f7ff fa72 	bl	800e91a <_ZN22core_utils_BufferQueueILi10EE9availableEv>
 800f436:	4603      	mov	r3, r0
}
 800f438:	4618      	mov	r0, r3
 800f43a:	3708      	adds	r7, #8
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}

0800f440 <_ZN18core_hardware_UART5startEv>:
/* ============================================================================= */
void core_hardware_UART::start() {
 800f440:	b580      	push	{r7, lr}
 800f442:	b082      	sub	sp, #8
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
	if (this->state != CORE_HARDWARE_UART_STATE_INIT) {
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f893 3a3c 	ldrb.w	r3, [r3, #2620]	; 0xa3c
 800f44e:	2b01      	cmp	r3, #1
 800f450:	d002      	beq.n	800f458 <_ZN18core_hardware_UART5startEv+0x18>
		core_ErrorHandler(2);
 800f452:	2002      	movs	r0, #2
 800f454:	f001 fa2a 	bl	80108ac <_Z17core_ErrorHandleri>
	}

	if (this->config.mode == CORE_HARDWARE_UART_MODE_DMA) {
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	2b02      	cmp	r3, #2
 800f45e:	d103      	bne.n	800f468 <_ZN18core_hardware_UART5startEv+0x28>
		this->startReceiveDMA();
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f000 f80d 	bl	800f480 <_ZN18core_hardware_UART15startReceiveDMAEv>
 800f466:	e002      	b.n	800f46e <_ZN18core_hardware_UART5startEv+0x2e>
	} else {
		core_ErrorHandler(3);
 800f468:	2003      	movs	r0, #3
 800f46a:	f001 fa1f 	bl	80108ac <_Z17core_ErrorHandleri>
	}
	this->state = CORE_HARDWARE_UART_STATE_RUN;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2202      	movs	r2, #2
 800f472:	f883 2a3c 	strb.w	r2, [r3, #2620]	; 0xa3c
}
 800f476:	bf00      	nop
 800f478:	3708      	adds	r7, #8
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}
	...

0800f480 <_ZN18core_hardware_UART15startReceiveDMAEv>:

/* ============================================================================= */
void core_hardware_UART::startReceiveDMA() {
 800f480:	b580      	push	{r7, lr}
 800f482:	b082      	sub	sp, #8
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
	if (this->config.queues) {
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	78db      	ldrb	r3, [r3, #3]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	f000 80be 	beq.w	800f60e <_ZN18core_hardware_UART15startReceiveDMAEv+0x18e>
//		this->writeBuffer = this->rx_queue.getWritePointer();
		HAL_UARTEx_ReceiveToIdle_DMA(this->huart, &this->rx_buffer.buffer[0],
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f8d3 0a38 	ldr.w	r0, [r3, #2616]	; 0xa38
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f603 233e 	addw	r3, r3, #2622	; 0xa3e
 800f49e:	2264      	movs	r2, #100	; 0x64
 800f4a0:	4619      	mov	r1, r3
 800f4a2:	f7fb fa15 	bl	800a8d0 <HAL_UARTEx_ReceiveToIdle_DMA>
		CORE_CONFIG_UART_RX_BUF_SIZE);
		__HAL_DMA_DISABLE_IT(this->huart->hdmarx, DMA_IT_HT);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f4ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	4a5a      	ldr	r2, [pc, #360]	; (800f61c <_ZN18core_hardware_UART15startReceiveDMAEv+0x19c>)
 800f4b4:	4293      	cmp	r3, r2
 800f4b6:	f000 8087 	beq.w	800f5c8 <_ZN18core_hardware_UART15startReceiveDMAEv+0x148>
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f4c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	4a56      	ldr	r2, [pc, #344]	; (800f620 <_ZN18core_hardware_UART15startReceiveDMAEv+0x1a0>)
 800f4c8:	4293      	cmp	r3, r2
 800f4ca:	d07d      	beq.n	800f5c8 <_ZN18core_hardware_UART15startReceiveDMAEv+0x148>
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f4d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	4a52      	ldr	r2, [pc, #328]	; (800f624 <_ZN18core_hardware_UART15startReceiveDMAEv+0x1a4>)
 800f4da:	4293      	cmp	r3, r2
 800f4dc:	d074      	beq.n	800f5c8 <_ZN18core_hardware_UART15startReceiveDMAEv+0x148>
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f4e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	4a4f      	ldr	r2, [pc, #316]	; (800f628 <_ZN18core_hardware_UART15startReceiveDMAEv+0x1a8>)
 800f4ec:	4293      	cmp	r3, r2
 800f4ee:	d06b      	beq.n	800f5c8 <_ZN18core_hardware_UART15startReceiveDMAEv+0x148>
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f4f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	4a4b      	ldr	r2, [pc, #300]	; (800f62c <_ZN18core_hardware_UART15startReceiveDMAEv+0x1ac>)
 800f4fe:	4293      	cmp	r3, r2
 800f500:	d062      	beq.n	800f5c8 <_ZN18core_hardware_UART15startReceiveDMAEv+0x148>
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	4a48      	ldr	r2, [pc, #288]	; (800f630 <_ZN18core_hardware_UART15startReceiveDMAEv+0x1b0>)
 800f510:	4293      	cmp	r3, r2
 800f512:	d059      	beq.n	800f5c8 <_ZN18core_hardware_UART15startReceiveDMAEv+0x148>
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f51a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	4a44      	ldr	r2, [pc, #272]	; (800f634 <_ZN18core_hardware_UART15startReceiveDMAEv+0x1b4>)
 800f522:	4293      	cmp	r3, r2
 800f524:	d050      	beq.n	800f5c8 <_ZN18core_hardware_UART15startReceiveDMAEv+0x148>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f52c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	4a41      	ldr	r2, [pc, #260]	; (800f638 <_ZN18core_hardware_UART15startReceiveDMAEv+0x1b8>)
 800f534:	4293      	cmp	r3, r2
 800f536:	d047      	beq.n	800f5c8 <_ZN18core_hardware_UART15startReceiveDMAEv+0x148>
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f53e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	4a3d      	ldr	r2, [pc, #244]	; (800f63c <_ZN18core_hardware_UART15startReceiveDMAEv+0x1bc>)
 800f546:	4293      	cmp	r3, r2
 800f548:	d03e      	beq.n	800f5c8 <_ZN18core_hardware_UART15startReceiveDMAEv+0x148>
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f550:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	4a3a      	ldr	r2, [pc, #232]	; (800f640 <_ZN18core_hardware_UART15startReceiveDMAEv+0x1c0>)
 800f558:	4293      	cmp	r3, r2
 800f55a:	d035      	beq.n	800f5c8 <_ZN18core_hardware_UART15startReceiveDMAEv+0x148>
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	4a36      	ldr	r2, [pc, #216]	; (800f644 <_ZN18core_hardware_UART15startReceiveDMAEv+0x1c4>)
 800f56a:	4293      	cmp	r3, r2
 800f56c:	d02c      	beq.n	800f5c8 <_ZN18core_hardware_UART15startReceiveDMAEv+0x148>
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	4a33      	ldr	r2, [pc, #204]	; (800f648 <_ZN18core_hardware_UART15startReceiveDMAEv+0x1c8>)
 800f57c:	4293      	cmp	r3, r2
 800f57e:	d023      	beq.n	800f5c8 <_ZN18core_hardware_UART15startReceiveDMAEv+0x148>
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	4a2f      	ldr	r2, [pc, #188]	; (800f64c <_ZN18core_hardware_UART15startReceiveDMAEv+0x1cc>)
 800f58e:	4293      	cmp	r3, r2
 800f590:	d01a      	beq.n	800f5c8 <_ZN18core_hardware_UART15startReceiveDMAEv+0x148>
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f598:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	4a2c      	ldr	r2, [pc, #176]	; (800f650 <_ZN18core_hardware_UART15startReceiveDMAEv+0x1d0>)
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	d011      	beq.n	800f5c8 <_ZN18core_hardware_UART15startReceiveDMAEv+0x148>
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f5aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	4a28      	ldr	r2, [pc, #160]	; (800f654 <_ZN18core_hardware_UART15startReceiveDMAEv+0x1d4>)
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	d008      	beq.n	800f5c8 <_ZN18core_hardware_UART15startReceiveDMAEv+0x148>
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f5bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	4a25      	ldr	r2, [pc, #148]	; (800f658 <_ZN18core_hardware_UART15startReceiveDMAEv+0x1d8>)
 800f5c4:	4293      	cmp	r3, r2
 800f5c6:	d111      	bne.n	800f5ec <_ZN18core_hardware_UART15startReceiveDMAEv+0x16c>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f5ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	681a      	ldr	r2, [r3, #0]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f5dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	f022 0208 	bic.w	r2, r2, #8
 800f5e6:	601a      	str	r2, [r3, #0]
 800f5e8:	bf00      	nop
	} else {
		core_ErrorHandler(CORE_ERROR_NOT_IMPLEMENTED);
	}

}
 800f5ea:	e013      	b.n	800f614 <_ZN18core_hardware_UART15startReceiveDMAEv+0x194>
		__HAL_DMA_DISABLE_IT(this->huart->hdmarx, DMA_IT_HT);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f5f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	681a      	ldr	r2, [r3, #0]
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	f022 0204 	bic.w	r2, r2, #4
 800f60a:	601a      	str	r2, [r3, #0]
}
 800f60c:	e002      	b.n	800f614 <_ZN18core_hardware_UART15startReceiveDMAEv+0x194>
		core_ErrorHandler(CORE_ERROR_NOT_IMPLEMENTED);
 800f60e:	2005      	movs	r0, #5
 800f610:	f001 f94c 	bl	80108ac <_Z17core_ErrorHandleri>
}
 800f614:	bf00      	nop
 800f616:	3708      	adds	r7, #8
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}
 800f61c:	40020010 	.word	0x40020010
 800f620:	40020028 	.word	0x40020028
 800f624:	40020040 	.word	0x40020040
 800f628:	40020058 	.word	0x40020058
 800f62c:	40020070 	.word	0x40020070
 800f630:	40020088 	.word	0x40020088
 800f634:	400200a0 	.word	0x400200a0
 800f638:	400200b8 	.word	0x400200b8
 800f63c:	40020410 	.word	0x40020410
 800f640:	40020428 	.word	0x40020428
 800f644:	40020440 	.word	0x40020440
 800f648:	40020458 	.word	0x40020458
 800f64c:	40020470 	.word	0x40020470
 800f650:	40020488 	.word	0x40020488
 800f654:	400204a0 	.word	0x400204a0
 800f658:	400204b8 	.word	0x400204b8

0800f65c <_ZN18core_hardware_UART16registerCallbackE24core_hardware_UART_CB_IDPFvPvS1_ES1_>:

/* ============================================================================= */
void core_hardware_UART::registerCallback(core_hardware_UART_CB_ID callback_id,
		void (*callback)(void *argument, void *params), void *params) {
 800f65c:	b480      	push	{r7}
 800f65e:	b085      	sub	sp, #20
 800f660:	af00      	add	r7, sp, #0
 800f662:	60f8      	str	r0, [r7, #12]
 800f664:	607a      	str	r2, [r7, #4]
 800f666:	603b      	str	r3, [r7, #0]
 800f668:	460b      	mov	r3, r1
 800f66a:	72fb      	strb	r3, [r7, #11]

	if (callback_id == CORE_HARDWARE_UART_CB_RX) {
 800f66c:	7afb      	ldrb	r3, [r7, #11]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d10b      	bne.n	800f68a <_ZN18core_hardware_UART16registerCallbackE24core_hardware_UART_CB_IDPFvPvS1_ES1_+0x2e>
		this->rx_callback.callback = callback;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	687a      	ldr	r2, [r7, #4]
 800f676:	f8c3 2c20 	str.w	r2, [r3, #3104]	; 0xc20
		this->rx_callback.params = params;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	683a      	ldr	r2, [r7, #0]
 800f67e:	f8c3 2c24 	str.w	r2, [r3, #3108]	; 0xc24
		this->rx_callback.registered = 1;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	2201      	movs	r2, #1
 800f686:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28
	}
}
 800f68a:	bf00      	nop
 800f68c:	3714      	adds	r7, #20
 800f68e:	46bd      	mov	sp, r7
 800f690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f694:	4770      	bx	lr
	...

0800f698 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft>:
/* ============================================================================= */
void uartRxCmpltDMA_callback(UART_HandleTypeDef *huart, uint16_t size) {
 800f698:	b580      	push	{r7, lr}
 800f69a:	b084      	sub	sp, #16
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	460b      	mov	r3, r1
 800f6a2:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < num_uarts; i++) {
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	60fb      	str	r3, [r7, #12]
 800f6a8:	4b12      	ldr	r3, [pc, #72]	; (800f6f4 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x5c>)
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	461a      	mov	r2, r3
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	da1b      	bge.n	800f6ec <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x54>
		if (!(uarts[i] == NULL) && (uarts[i]->huart == huart)) {
 800f6b4:	4a10      	ldr	r2, [pc, #64]	; (800f6f8 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x60>)
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d011      	beq.n	800f6e4 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x4c>
 800f6c0:	4a0d      	ldr	r2, [pc, #52]	; (800f6f8 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x60>)
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6c8:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f6cc:	687a      	ldr	r2, [r7, #4]
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d108      	bne.n	800f6e4 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x4c>
			uarts[i]->rxFunction(size);
 800f6d2:	4a09      	ldr	r2, [pc, #36]	; (800f6f8 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x60>)
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6da:	887a      	ldrh	r2, [r7, #2]
 800f6dc:	4611      	mov	r1, r2
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f000 f80c 	bl	800f6fc <_ZN18core_hardware_UART10rxFunctionEt>
	for (int i = 0; i < num_uarts; i++) {
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	3301      	adds	r3, #1
 800f6e8:	60fb      	str	r3, [r7, #12]
 800f6ea:	e7dd      	b.n	800f6a8 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x10>
		}
	}
}
 800f6ec:	bf00      	nop
 800f6ee:	3710      	adds	r7, #16
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}
 800f6f4:	2400c6d4 	.word	0x2400c6d4
 800f6f8:	2400c6c0 	.word	0x2400c6c0

0800f6fc <_ZN18core_hardware_UART10rxFunctionEt>:

/* ============================================================================= */
void core_hardware_UART::rxFunction(uint16_t len) {
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b082      	sub	sp, #8
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	460b      	mov	r3, r1
 800f706:	807b      	strh	r3, [r7, #2]
	if (len == 0) {
 800f708:	887b      	ldrh	r3, [r7, #2]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d034      	beq.n	800f778 <_ZN18core_hardware_UART10rxFunctionEt+0x7c>
		return;
	}

	if (this->config.cobs_encode_rx) {
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	785b      	ldrb	r3, [r3, #1]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d00c      	beq.n	800f730 <_ZN18core_hardware_UART10rxFunctionEt+0x34>
		len = cobsDecodeInPlace(this->rx_buffer.buffer, len - 1);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f603 223e 	addw	r2, r3, #2622	; 0xa3e
 800f71c:	887b      	ldrh	r3, [r7, #2]
 800f71e:	b2db      	uxtb	r3, r3
 800f720:	3b01      	subs	r3, #1
 800f722:	b2db      	uxtb	r3, r3
 800f724:	4619      	mov	r1, r3
 800f726:	4610      	mov	r0, r2
 800f728:	f001 f882 	bl	8010830 <_Z17cobsDecodeInPlacePhh>
 800f72c:	4603      	mov	r3, r0
 800f72e:	807b      	strh	r3, [r7, #2]
	}

	this->rx_buffer.len = len;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	887a      	ldrh	r2, [r7, #2]
 800f734:	f8a3 2abe 	strh.w	r2, [r3, #2750]	; 0xabe
	if (this->config.queues) {
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	78db      	ldrb	r3, [r3, #3]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d008      	beq.n	800f752 <_ZN18core_hardware_UART10rxFunctionEt+0x56>
		this->rx_queue.write(&this->rx_buffer);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	1d1a      	adds	r2, r3, #4
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f603 233e 	addw	r3, r3, #2622	; 0xa3e
 800f74a:	4619      	mov	r1, r3
 800f74c:	4610      	mov	r0, r2
 800f74e:	f000 f8de 	bl	800f90e <_ZN22core_utils_BufferQueueILi10EE5writeEP17core_utils_Buffer>
	}

	if (this->rx_callback.registered) {
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f893 3c28 	ldrb.w	r3, [r3, #3112]	; 0xc28
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d009      	beq.n	800f770 <_ZN18core_hardware_UART10rxFunctionEt+0x74>
		this->rx_callback.call((void*) &this->rx_buffer);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f503 6242 	add.w	r2, r3, #3104	; 0xc20
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f603 233e 	addw	r3, r3, #2622	; 0xa3e
 800f768:	4619      	mov	r1, r3
 800f76a:	4610      	mov	r0, r2
 800f76c:	f001 f8b1 	bl	80108d2 <_ZN19core_utils_Callback4callEPv>
	}

	this->startReceiveDMA();
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	f7ff fe85 	bl	800f480 <_ZN18core_hardware_UART15startReceiveDMAEv>
 800f776:	e000      	b.n	800f77a <_ZN18core_hardware_UART10rxFunctionEt+0x7e>
		return;
 800f778:	bf00      	nop
}
 800f77a:	3708      	adds	r7, #8
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}

0800f780 <_ZN18core_hardware_UART4sendEPhh>:
/* ============================================================================= */
void core_hardware_UART::send(uint8_t *data, uint8_t len) {
 800f780:	b580      	push	{r7, lr}
 800f782:	b086      	sub	sp, #24
 800f784:	af00      	add	r7, sp, #0
 800f786:	60f8      	str	r0, [r7, #12]
 800f788:	60b9      	str	r1, [r7, #8]
 800f78a:	4613      	mov	r3, r2
 800f78c:	71fb      	strb	r3, [r7, #7]

	if (this->state != CORE_HARDWARE_UART_STATE_RUN) {
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	f893 3a3c 	ldrb.w	r3, [r3, #2620]	; 0xa3c
 800f794:	2b02      	cmp	r3, #2
 800f796:	d002      	beq.n	800f79e <_ZN18core_hardware_UART4sendEPhh+0x1e>
		core_ErrorHandler(4);
 800f798:	2004      	movs	r0, #4
 800f79a:	f001 f887 	bl	80108ac <_Z17core_ErrorHandleri>
	}

	if (this->config.mode != CORE_HARDWARE_UART_MODE_DMA
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	781b      	ldrb	r3, [r3, #0]
 800f7a2:	2b02      	cmp	r3, #2
 800f7a4:	d006      	beq.n	800f7b4 <_ZN18core_hardware_UART4sendEPhh+0x34>
			&& this->config.queues != 1) {
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	78db      	ldrb	r3, [r3, #3]
 800f7aa:	2b01      	cmp	r3, #1
 800f7ac:	d002      	beq.n	800f7b4 <_ZN18core_hardware_UART4sendEPhh+0x34>
		// TODO Not implemented yet
		core_ErrorHandler(5);
 800f7ae:	2005      	movs	r0, #5
 800f7b0:	f001 f87c 	bl	80108ac <_Z17core_ErrorHandleri>
	}

	if (this->config.cobs_encode_tx) {
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	789b      	ldrb	r3, [r3, #2]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d021      	beq.n	800f800 <_ZN18core_hardware_UART4sendEPhh+0x80>
		uint8_t len_encode = cobsEncode(data, len, this->tx_buffer.buffer);
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	f503 622c 	add.w	r2, r3, #2752	; 0xac0
 800f7c2:	79fb      	ldrb	r3, [r7, #7]
 800f7c4:	4619      	mov	r1, r3
 800f7c6:	68b8      	ldr	r0, [r7, #8]
 800f7c8:	f000 ff9f 	bl	801070a <_Z10cobsEncodePhhS_>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	75fb      	strb	r3, [r7, #23]
		this->tx_buffer.buffer[len_encode] = 0x00;
 800f7d0:	7dfb      	ldrb	r3, [r7, #23]
 800f7d2:	68fa      	ldr	r2, [r7, #12]
 800f7d4:	4413      	add	r3, r2
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	f883 2ac0 	strb.w	r2, [r3, #2752]	; 0xac0
		this->tx_buffer.len = len_encode + 1;
 800f7dc:	7dfb      	ldrb	r3, [r7, #23]
 800f7de:	b29b      	uxth	r3, r3
 800f7e0:	3301      	adds	r3, #1
 800f7e2:	b29a      	uxth	r2, r3
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	f8a3 2b40 	strh.w	r2, [r3, #2880]	; 0xb40
		this->tx_queue.write(&this->tx_buffer);
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	f203 521e 	addw	r2, r3, #1310	; 0x51e
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 800f7f6:	4619      	mov	r1, r3
 800f7f8:	4610      	mov	r0, r2
 800f7fa:	f000 f888 	bl	800f90e <_ZN22core_utils_BufferQueueILi10EE5writeEP17core_utils_Buffer>
 800f7fe:	e008      	b.n	800f812 <_ZN18core_hardware_UART4sendEPhh+0x92>
	} else {
		this->tx_queue.write(data, (uint8_t) len);
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	f203 531e 	addw	r3, r3, #1310	; 0x51e
 800f806:	79fa      	ldrb	r2, [r7, #7]
 800f808:	b292      	uxth	r2, r2
 800f80a:	68b9      	ldr	r1, [r7, #8]
 800f80c:	4618      	mov	r0, r3
 800f80e:	f000 f8bb 	bl	800f988 <_ZN22core_utils_BufferQueueILi10EE5writeEPht>
	}
	this->flushTx();
 800f812:	68f8      	ldr	r0, [r7, #12]
 800f814:	f000 f804 	bl	800f820 <_ZN18core_hardware_UART7flushTxEv>
}
 800f818:	bf00      	nop
 800f81a:	3718      	adds	r7, #24
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}

0800f820 <_ZN18core_hardware_UART7flushTxEv>:
	this->flushTx();

}

/* ============================================================================= */
void core_hardware_UART::flushTx() {
 800f820:	b580      	push	{r7, lr}
 800f822:	b082      	sub	sp, #8
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
	while (!(this->huart->gState == HAL_UART_STATE_READY)) {
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f82e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f832:	2b20      	cmp	r3, #32
 800f834:	bf14      	ite	ne
 800f836:	2301      	movne	r3, #1
 800f838:	2300      	moveq	r3, #0
 800f83a:	b2db      	uxtb	r3, r3
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d000      	beq.n	800f842 <_ZN18core_hardware_UART7flushTxEv+0x22>
 800f840:	e7f2      	b.n	800f828 <_ZN18core_hardware_UART7flushTxEv+0x8>

	}
	this->sendNextBuffer();
 800f842:	6878      	ldr	r0, [r7, #4]
 800f844:	f000 f804 	bl	800f850 <_ZN18core_hardware_UART14sendNextBufferEv>
}
 800f848:	bf00      	nop
 800f84a:	3708      	adds	r7, #8
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}

0800f850 <_ZN18core_hardware_UART14sendNextBufferEv>:

/* ============================================================================= */
void core_hardware_UART::sendNextBuffer() {
 800f850:	b580      	push	{r7, lr}
 800f852:	b084      	sub	sp, #16
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
	// Check if there is a message pending in the tx buffer
	if (!this->tx_queue.available()) {
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	f203 531e 	addw	r3, r3, #1310	; 0x51e
 800f85e:	4618      	mov	r0, r3
 800f860:	f7ff f85b 	bl	800e91a <_ZN22core_utils_BufferQueueILi10EE9availableEv>
 800f864:	4603      	mov	r3, r0
 800f866:	2b00      	cmp	r3, #0
 800f868:	bf0c      	ite	eq
 800f86a:	2301      	moveq	r3, #1
 800f86c:	2300      	movne	r3, #0
 800f86e:	b2db      	uxtb	r3, r3
 800f870:	2b00      	cmp	r3, #0
 800f872:	d122      	bne.n	800f8ba <_ZN18core_hardware_UART14sendNextBufferEv+0x6a>
		return;
	}

	if (this->huart->gState != HAL_UART_STATE_READY) {
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f87a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f87e:	2b20      	cmp	r3, #32
 800f880:	bf14      	ite	ne
 800f882:	2301      	movne	r3, #1
 800f884:	2300      	moveq	r3, #0
 800f886:	b2db      	uxtb	r3, r3
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d118      	bne.n	800f8be <_ZN18core_hardware_UART14sendNextBufferEv+0x6e>
		return;
	}

	uint8_t *buffer = NULL;
 800f88c:	2300      	movs	r3, #0
 800f88e:	60bb      	str	r3, [r7, #8]
	uint8_t len = this->tx_queue.read(&buffer);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	f203 531e 	addw	r3, r3, #1310	; 0x51e
 800f896:	f107 0208 	add.w	r2, r7, #8
 800f89a:	4611      	mov	r1, r2
 800f89c:	4618      	mov	r0, r3
 800f89e:	f000 f8ac 	bl	800f9fa <_ZN22core_utils_BufferQueueILi10EE4readEPPh>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit_DMA(this->huart, buffer, len);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f8d3 3a38 	ldr.w	r3, [r3, #2616]	; 0xa38
 800f8ac:	68b9      	ldr	r1, [r7, #8]
 800f8ae:	7bfa      	ldrb	r2, [r7, #15]
 800f8b0:	b292      	uxth	r2, r2
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	f7f9 f838 	bl	8008928 <HAL_UART_Transmit_DMA>
 800f8b8:	e002      	b.n	800f8c0 <_ZN18core_hardware_UART14sendNextBufferEv+0x70>
		return;
 800f8ba:	bf00      	nop
 800f8bc:	e000      	b.n	800f8c0 <_ZN18core_hardware_UART14sendNextBufferEv+0x70>
		return;
 800f8be:	bf00      	nop
}
 800f8c0:	3710      	adds	r7, #16
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}

0800f8c6 <_ZN22core_utils_BufferQueueILi10EEC1Ev>:
	core_utils_BufferQueue() {
 800f8c6:	b5b0      	push	{r4, r5, r7, lr}
 800f8c8:	b082      	sub	sp, #8
 800f8ca:	af00      	add	r7, sp, #0
 800f8cc:	6078      	str	r0, [r7, #4]
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	3302      	adds	r3, #2
 800f8d2:	2409      	movs	r4, #9
 800f8d4:	461d      	mov	r5, r3
 800f8d6:	2c00      	cmp	r4, #0
 800f8d8:	db05      	blt.n	800f8e6 <_ZN22core_utils_BufferQueueILi10EEC1Ev+0x20>
 800f8da:	4628      	mov	r0, r5
 800f8dc:	f7ff fc5a 	bl	800f194 <_ZN17core_utils_BufferC1Ev>
 800f8e0:	3582      	adds	r5, #130	; 0x82
 800f8e2:	3c01      	subs	r4, #1
 800f8e4:	e7f7      	b.n	800f8d6 <_ZN22core_utils_BufferQueueILi10EEC1Ev+0x10>
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	220a      	movs	r2, #10
 800f8ea:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
		this->idx_read = 0;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
		this->idx_write = 0;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	f883 2517 	strb.w	r2, [r3, #1303]	; 0x517
		this->overflow = 0;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2200      	movs	r2, #0
 800f902:	701a      	strb	r2, [r3, #0]
	}
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	4618      	mov	r0, r3
 800f908:	3708      	adds	r7, #8
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bdb0      	pop	{r4, r5, r7, pc}

0800f90e <_ZN22core_utils_BufferQueueILi10EE5writeEP17core_utils_Buffer>:
	uint8_t write(core_utils_Buffer *buffer) {
 800f90e:	b580      	push	{r7, lr}
 800f910:	b084      	sub	sp, #16
 800f912:	af00      	add	r7, sp, #0
 800f914:	6078      	str	r0, [r7, #4]
 800f916:	6039      	str	r1, [r7, #0]
		for (int i = 0; i < buffer->len; i++) {
 800f918:	2300      	movs	r3, #0
 800f91a:	60fb      	str	r3, [r7, #12]
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800f922:	461a      	mov	r2, r3
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	4293      	cmp	r3, r2
 800f928:	da16      	bge.n	800f958 <_ZN22core_utils_BufferQueueILi10EE5writeEP17core_utils_Buffer+0x4a>
			this->buffers[this->idx_write].buffer[i] = buffer->buffer[i];
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f893 3517 	ldrb.w	r3, [r3, #1303]	; 0x517
 800f930:	4619      	mov	r1, r3
 800f932:	683a      	ldr	r2, [r7, #0]
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	4413      	add	r3, r2
 800f938:	7818      	ldrb	r0, [r3, #0]
 800f93a:	687a      	ldr	r2, [r7, #4]
 800f93c:	460b      	mov	r3, r1
 800f93e:	019b      	lsls	r3, r3, #6
 800f940:	440b      	add	r3, r1
 800f942:	005b      	lsls	r3, r3, #1
 800f944:	441a      	add	r2, r3
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	4413      	add	r3, r2
 800f94a:	3302      	adds	r3, #2
 800f94c:	4602      	mov	r2, r0
 800f94e:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < buffer->len; i++) {
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	3301      	adds	r3, #1
 800f954:	60fb      	str	r3, [r7, #12]
 800f956:	e7e1      	b.n	800f91c <_ZN22core_utils_BufferQueueILi10EE5writeEP17core_utils_Buffer+0xe>
		this->buffers[this->idx_write].len = buffer->len;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f893 3517 	ldrb.w	r3, [r3, #1303]	; 0x517
 800f95e:	4619      	mov	r1, r3
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	f8b3 0080 	ldrh.w	r0, [r3, #128]	; 0x80
 800f966:	687a      	ldr	r2, [r7, #4]
 800f968:	460b      	mov	r3, r1
 800f96a:	019b      	lsls	r3, r3, #6
 800f96c:	440b      	add	r3, r1
 800f96e:	005b      	lsls	r3, r3, #1
 800f970:	4413      	add	r3, r2
 800f972:	3382      	adds	r3, #130	; 0x82
 800f974:	4602      	mov	r2, r0
 800f976:	801a      	strh	r2, [r3, #0]
		return this->inc_write();
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	f000 f872 	bl	800fa62 <_ZN22core_utils_BufferQueueILi10EE9inc_writeEv>
 800f97e:	4603      	mov	r3, r0
	}
 800f980:	4618      	mov	r0, r3
 800f982:	3710      	adds	r7, #16
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}

0800f988 <_ZN22core_utils_BufferQueueILi10EE5writeEPht>:
	uint8_t write(uint8_t *buffer, uint16_t len) {
 800f988:	b580      	push	{r7, lr}
 800f98a:	b086      	sub	sp, #24
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	60f8      	str	r0, [r7, #12]
 800f990:	60b9      	str	r1, [r7, #8]
 800f992:	4613      	mov	r3, r2
 800f994:	80fb      	strh	r3, [r7, #6]
		for (int i = 0; i < len; i++) {
 800f996:	2300      	movs	r3, #0
 800f998:	617b      	str	r3, [r7, #20]
 800f99a:	88fb      	ldrh	r3, [r7, #6]
 800f99c:	697a      	ldr	r2, [r7, #20]
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	da16      	bge.n	800f9d0 <_ZN22core_utils_BufferQueueILi10EE5writeEPht+0x48>
			this->buffers[this->idx_write].buffer[i] = buffer[i];
 800f9a2:	697b      	ldr	r3, [r7, #20]
 800f9a4:	68ba      	ldr	r2, [r7, #8]
 800f9a6:	4413      	add	r3, r2
 800f9a8:	68fa      	ldr	r2, [r7, #12]
 800f9aa:	f892 2517 	ldrb.w	r2, [r2, #1303]	; 0x517
 800f9ae:	4611      	mov	r1, r2
 800f9b0:	7818      	ldrb	r0, [r3, #0]
 800f9b2:	68fa      	ldr	r2, [r7, #12]
 800f9b4:	460b      	mov	r3, r1
 800f9b6:	019b      	lsls	r3, r3, #6
 800f9b8:	440b      	add	r3, r1
 800f9ba:	005b      	lsls	r3, r3, #1
 800f9bc:	441a      	add	r2, r3
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	4413      	add	r3, r2
 800f9c2:	3302      	adds	r3, #2
 800f9c4:	4602      	mov	r2, r0
 800f9c6:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < len; i++) {
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	3301      	adds	r3, #1
 800f9cc:	617b      	str	r3, [r7, #20]
 800f9ce:	e7e4      	b.n	800f99a <_ZN22core_utils_BufferQueueILi10EE5writeEPht+0x12>
		this->buffers[this->idx_write].len = len;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	f893 3517 	ldrb.w	r3, [r3, #1303]	; 0x517
 800f9d6:	4619      	mov	r1, r3
 800f9d8:	68fa      	ldr	r2, [r7, #12]
 800f9da:	460b      	mov	r3, r1
 800f9dc:	019b      	lsls	r3, r3, #6
 800f9de:	440b      	add	r3, r1
 800f9e0:	005b      	lsls	r3, r3, #1
 800f9e2:	4413      	add	r3, r2
 800f9e4:	3382      	adds	r3, #130	; 0x82
 800f9e6:	88fa      	ldrh	r2, [r7, #6]
 800f9e8:	801a      	strh	r2, [r3, #0]
		return this->inc_write();
 800f9ea:	68f8      	ldr	r0, [r7, #12]
 800f9ec:	f000 f839 	bl	800fa62 <_ZN22core_utils_BufferQueueILi10EE9inc_writeEv>
 800f9f0:	4603      	mov	r3, r0
	}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3718      	adds	r7, #24
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}

0800f9fa <_ZN22core_utils_BufferQueueILi10EE4readEPPh>:
	uint8_t read(uint8_t **buffer) {
 800f9fa:	b580      	push	{r7, lr}
 800f9fc:	b084      	sub	sp, #16
 800f9fe:	af00      	add	r7, sp, #0
 800fa00:	6078      	str	r0, [r7, #4]
 800fa02:	6039      	str	r1, [r7, #0]
		if (this->available() < 1) {
 800fa04:	6878      	ldr	r0, [r7, #4]
 800fa06:	f7fe ff88 	bl	800e91a <_ZN22core_utils_BufferQueueILi10EE9availableEv>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	bfd4      	ite	le
 800fa10:	2301      	movle	r3, #1
 800fa12:	2300      	movgt	r3, #0
 800fa14:	b2db      	uxtb	r3, r3
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d001      	beq.n	800fa1e <_ZN22core_utils_BufferQueueILi10EE4readEPPh+0x24>
			return 0;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	e01d      	b.n	800fa5a <_ZN22core_utils_BufferQueueILi10EE4readEPPh+0x60>
		*buffer = &this->buffers[this->idx_read].buffer[0];
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f893 3518 	ldrb.w	r3, [r3, #1304]	; 0x518
 800fa24:	461a      	mov	r2, r3
 800fa26:	4613      	mov	r3, r2
 800fa28:	019b      	lsls	r3, r3, #6
 800fa2a:	4413      	add	r3, r2
 800fa2c:	005b      	lsls	r3, r3, #1
 800fa2e:	687a      	ldr	r2, [r7, #4]
 800fa30:	4413      	add	r3, r2
 800fa32:	1c9a      	adds	r2, r3, #2
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	601a      	str	r2, [r3, #0]
		uint8_t len = this->buffers[this->idx_read].len;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	f893 3518 	ldrb.w	r3, [r3, #1304]	; 0x518
 800fa3e:	4619      	mov	r1, r3
 800fa40:	687a      	ldr	r2, [r7, #4]
 800fa42:	460b      	mov	r3, r1
 800fa44:	019b      	lsls	r3, r3, #6
 800fa46:	440b      	add	r3, r1
 800fa48:	005b      	lsls	r3, r3, #1
 800fa4a:	4413      	add	r3, r2
 800fa4c:	3382      	adds	r3, #130	; 0x82
 800fa4e:	881b      	ldrh	r3, [r3, #0]
 800fa50:	73fb      	strb	r3, [r7, #15]
		this->inc_read();
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f7fe ff88 	bl	800e968 <_ZN22core_utils_BufferQueueILi10EE8inc_readEv>
		return len;
 800fa58:	7bfb      	ldrb	r3, [r7, #15]
	}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	3710      	adds	r7, #16
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	bd80      	pop	{r7, pc}

0800fa62 <_ZN22core_utils_BufferQueueILi10EE9inc_writeEv>:
	uint8_t inc_write() {
 800fa62:	b480      	push	{r7}
 800fa64:	b083      	sub	sp, #12
 800fa66:	af00      	add	r7, sp, #0
 800fa68:	6078      	str	r0, [r7, #4]
		this->idx_write++;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f893 3517 	ldrb.w	r3, [r3, #1303]	; 0x517
 800fa70:	3301      	adds	r3, #1
 800fa72:	b2da      	uxtb	r2, r3
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f883 2517 	strb.w	r2, [r3, #1303]	; 0x517
		if (this->idx_write == this->num_buffers) {
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f893 2517 	ldrb.w	r2, [r3, #1303]	; 0x517
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f893 3516 	ldrb.w	r3, [r3, #1302]	; 0x516
 800fa86:	429a      	cmp	r2, r3
 800fa88:	d103      	bne.n	800fa92 <_ZN22core_utils_BufferQueueILi10EE9inc_writeEv+0x30>
			this->idx_write = 0;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	f883 2517 	strb.w	r2, [r3, #1303]	; 0x517
		if (this->idx_write == this->idx_read) {
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f893 2517 	ldrb.w	r2, [r3, #1303]	; 0x517
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f893 3518 	ldrb.w	r3, [r3, #1304]	; 0x518
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	d104      	bne.n	800faac <_ZN22core_utils_BufferQueueILi10EE9inc_writeEv+0x4a>
			this->overflow = 1;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	2201      	movs	r2, #1
 800faa6:	701a      	strb	r2, [r3, #0]
			return 0;
 800faa8:	2300      	movs	r3, #0
 800faaa:	e000      	b.n	800faae <_ZN22core_utils_BufferQueueILi10EE9inc_writeEv+0x4c>
			return 1;
 800faac:	2301      	movs	r3, #1
	}
 800faae:	4618      	mov	r0, r3
 800fab0:	370c      	adds	r7, #12
 800fab2:	46bd      	mov	sp, r7
 800fab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab8:	4770      	bx	lr
	...

0800fabc <_Z7deg2radf>:

#include "stdint.h"

const float pi = 3.14159265;

inline float deg2rad(float angle) {
 800fabc:	b480      	push	{r7}
 800fabe:	b083      	sub	sp, #12
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	ed87 0a01 	vstr	s0, [r7, #4]
	return angle * pi / 180.0;
 800fac6:	edd7 7a01 	vldr	s15, [r7, #4]
 800faca:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800faec <_Z7deg2radf+0x30>
 800face:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fad2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800faf0 <_Z7deg2radf+0x34>
 800fad6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800fada:	eef0 7a66 	vmov.f32	s15, s13
}
 800fade:	eeb0 0a67 	vmov.f32	s0, s15
 800fae2:	370c      	adds	r7, #12
 800fae4:	46bd      	mov	sp, r7
 800fae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faea:	4770      	bx	lr
 800faec:	40490fdb 	.word	0x40490fdb
 800faf0:	43340000 	.word	0x43340000

0800faf4 <_Z5delaym>:

inline void delay(uint32_t msec){
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b084      	sub	sp, #16
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
#if CORE_CONFIG_USE_RTOS

	osKernelState_t state = osKernelGetState();
 800fafc:	f7fa fff2 	bl	800aae4 <osKernelGetState>
 800fb00:	60f8      	str	r0, [r7, #12]
	if (state == osKernelRunning){
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	2b02      	cmp	r3, #2
 800fb06:	d103      	bne.n	800fb10 <_Z5delaym+0x1c>
		osDelay(msec);
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f7fb f8da 	bl	800acc2 <osDelay>
	}

#else
	HAL_Delay(msec);
#endif
}
 800fb0e:	e002      	b.n	800fb16 <_Z5delaym+0x22>
		HAL_Delay(msec);
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f7f1 fe3b 	bl	800178c <HAL_Delay>
}
 800fb16:	bf00      	nop
 800fb18:	3710      	adds	r7, #16
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}

0800fb1e <_ZN17bmi160_gyr_configC1Ev>:
	uint8_t bw = BMI160_ACCEL_BW_NORMAL_AVG4;
	uint8_t range = BMI160_ACCEL_RANGE_8G;
	uint8_t foc_enable = 0;
} bmi160_acc_config;

typedef struct bmi160_gyr_config {
 800fb1e:	b480      	push	{r7}
 800fb20:	b083      	sub	sp, #12
 800fb22:	af00      	add	r7, sp, #0
 800fb24:	6078      	str	r0, [r7, #4]
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	220a      	movs	r2, #10
 800fb2a:	701a      	strb	r2, [r3, #0]
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2220      	movs	r2, #32
 800fb30:	705a      	strb	r2, [r3, #1]
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2201      	movs	r2, #1
 800fb36:	709a      	strb	r2, [r3, #2]
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2201      	movs	r2, #1
 800fb3c:	70da      	strb	r2, [r3, #3]
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	4618      	mov	r0, r3
 800fb42:	370c      	adds	r7, #12
 800fb44:	46bd      	mov	sp, r7
 800fb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4a:	4770      	bx	lr

0800fb4c <_ZN17bmi160_acc_configC1Ev>:
typedef struct bmi160_acc_config {
 800fb4c:	b480      	push	{r7}
 800fb4e:	b083      	sub	sp, #12
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	220a      	movs	r2, #10
 800fb58:	701a      	strb	r2, [r3, #0]
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	2220      	movs	r2, #32
 800fb5e:	705a      	strb	r2, [r3, #1]
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2208      	movs	r2, #8
 800fb64:	709a      	strb	r2, [r3, #2]
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2200      	movs	r2, #0
 800fb6a:	70da      	strb	r2, [r3, #3]
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	4618      	mov	r0, r3
 800fb70:	370c      	adds	r7, #12
 800fb72:	46bd      	mov	sp, r7
 800fb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb78:	4770      	bx	lr

0800fb7a <_ZN13bmi160_configC1Ev>:
	uint8_t bw = BMI160_GYRO_BW_NORMAL_MODE;
	uint8_t range = BMI160_GYRO_RANGE_1000_DPS;
	uint8_t foc_enable = 1;
} bmi160_gyr_config;

typedef struct bmi160_config {
 800fb7a:	b580      	push	{r7, lr}
 800fb7c:	b082      	sub	sp, #8
 800fb7e:	af00      	add	r7, sp, #0
 800fb80:	6078      	str	r0, [r7, #4]
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	4618      	mov	r0, r3
 800fb86:	f7ff ffca 	bl	800fb1e <_ZN17bmi160_gyr_configC1Ev>
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	3304      	adds	r3, #4
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7ff ffdc 	bl	800fb4c <_ZN17bmi160_acc_configC1Ev>
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	4618      	mov	r0, r3
 800fb98:	3708      	adds	r7, #8
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	bd80      	pop	{r7, pc}

0800fb9e <_ZN16bmi160_gyr_calibC1Ev>:
typedef struct bmi160_gyr_calib {
 800fb9e:	b480      	push	{r7}
 800fba0:	b083      	sub	sp, #12
 800fba2:	af00      	add	r7, sp, #0
 800fba4:	6078      	str	r0, [r7, #4]
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	f04f 0200 	mov.w	r2, #0
 800fbac:	601a      	str	r2, [r3, #0]
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f04f 0200 	mov.w	r2, #0
 800fbb4:	605a      	str	r2, [r3, #4]
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f04f 0200 	mov.w	r2, #0
 800fbbc:	609a      	str	r2, [r3, #8]
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	370c      	adds	r7, #12
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbca:	4770      	bx	lr

0800fbcc <_ZN6BMI160C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:

#include "bmi160.h"

#if CORE_CONFIG_USE_SPI

BMI160::BMI160(SPI_HandleTypeDef *hspi, GPIO_TypeDef *GPIOx,
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b084      	sub	sp, #16
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	60f8      	str	r0, [r7, #12]
 800fbd4:	60b9      	str	r1, [r7, #8]
 800fbd6:	607a      	str	r2, [r7, #4]
 800fbd8:	807b      	strh	r3, [r7, #2]
		uint16_t GPIO_Pin) {
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	4618      	mov	r0, r3
 800fbde:	f7ff ffcc 	bl	800fb7a <_ZN13bmi160_configC1Ev>
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	3334      	adds	r3, #52	; 0x34
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7ff ffd9 	bl	800fb9e <_ZN16bmi160_gyr_calibC1Ev>
	this->hspi = hspi;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	68ba      	ldr	r2, [r7, #8]
 800fbf0:	641a      	str	r2, [r3, #64]	; 0x40
	this->CS_GPIOx = GPIOx;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	687a      	ldr	r2, [r7, #4]
 800fbf6:	645a      	str	r2, [r3, #68]	; 0x44
	this->CS_Pin = GPIO_Pin;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	887a      	ldrh	r2, [r7, #2]
 800fbfc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	4618      	mov	r0, r3
 800fc04:	3710      	adds	r7, #16
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}

0800fc0a <_ZN6BMI16013writeRegisterEhh>:
	this->CS_GPIOx = GPIOx;
	this->CS_Pin = GPIO_Pin;
}

/* ============================================================================= */
uint8_t BMI160::writeRegister(uint8_t reg, uint8_t data) {
 800fc0a:	b580      	push	{r7, lr}
 800fc0c:	b082      	sub	sp, #8
 800fc0e:	af00      	add	r7, sp, #0
 800fc10:	6078      	str	r0, [r7, #4]
 800fc12:	460b      	mov	r3, r1
 800fc14:	70fb      	strb	r3, [r7, #3]
 800fc16:	4613      	mov	r3, r2
 800fc18:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(this->CS_GPIOx, this->CS_Pin, GPIO_PIN_RESET);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc24:	2200      	movs	r2, #0
 800fc26:	4619      	mov	r1, r3
 800fc28:	f7f4 feac 	bl	8004984 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->hspi, &reg, 1, 1);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800fc30:	1cf9      	adds	r1, r7, #3
 800fc32:	2301      	movs	r3, #1
 800fc34:	2201      	movs	r2, #1
 800fc36:	f7f7 fe8b 	bl	8007950 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(this->hspi, &data, 1, 1);
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800fc3e:	1cb9      	adds	r1, r7, #2
 800fc40:	2301      	movs	r3, #1
 800fc42:	2201      	movs	r2, #1
 800fc44:	f7f7 fe84 	bl	8007950 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(this->CS_GPIOx, this->CS_Pin, GPIO_PIN_SET);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc52:	2201      	movs	r2, #1
 800fc54:	4619      	mov	r1, r3
 800fc56:	f7f4 fe95 	bl	8004984 <HAL_GPIO_WritePin>

	return CORE_OK;
 800fc5a:	2301      	movs	r3, #1
}
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	3708      	adds	r7, #8
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}

0800fc64 <_ZN6BMI1604initEv>:

/* ============================================================================= */
uint8_t BMI160::init() {
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b084      	sub	sp, #16
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]

	// Make a dummy read to turn on SPI mode
//	this->readRegister(0x7F);
	HAL_GPIO_WritePin(this->CS_GPIOx, this->CS_Pin, GPIO_PIN_SET);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc76:	2201      	movs	r2, #1
 800fc78:	4619      	mov	r1, r3
 800fc7a:	f7f4 fe83 	bl	8004984 <HAL_GPIO_WritePin>
	delay(250);
 800fc7e:	20fa      	movs	r0, #250	; 0xfa
 800fc80:	f7ff ff38 	bl	800faf4 <_Z5delaym>

	// Check if the IMU can be addressed
	if (not (this->check())) {
 800fc84:	6878      	ldr	r0, [r7, #4]
 800fc86:	f000 f8de 	bl	800fe46 <_ZN6BMI1605checkEv>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	bf0c      	ite	eq
 800fc90:	2301      	moveq	r3, #1
 800fc92:	2300      	movne	r3, #0
 800fc94:	b2db      	uxtb	r3, r3
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d001      	beq.n	800fc9e <_ZN6BMI1604initEv+0x3a>
		return 0;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	e066      	b.n	800fd6c <_ZN6BMI1604initEv+0x108>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
	}

	// Reset the IMU to delete all previously loaded registers
	this->reset();
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	f000 fd23 	bl	80106ea <_ZN6BMI1605resetEv>

	// Wait until the reset is finished
	delay(250);
 800fca4:	20fa      	movs	r0, #250	; 0xfa
 800fca6:	f7ff ff25 	bl	800faf4 <_Z5delaym>

	// Make a dummy read again to turn on SPI
	this->readRegister(0x7F);
 800fcaa:	217f      	movs	r1, #127	; 0x7f
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f000 f861 	bl	800fd74 <_ZN6BMI16012readRegisterEh>

	// Set the power mode to normal in order for all registers to be writable
	this->setPowerMode(BMI160_Power_Normal);
 800fcb2:	2100      	movs	r1, #0
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f000 fce3 	bl	8010680 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode>

	// Set the accelerometer setting
	this->setAccConfig(this->config.acc.odr | this->config.acc.bw,
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	791a      	ldrb	r2, [r3, #4]
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	795b      	ldrb	r3, [r3, #5]
 800fcc2:	4313      	orrs	r3, r2
 800fcc4:	b2d9      	uxtb	r1, r3
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	799b      	ldrb	r3, [r3, #6]
 800fcca:	461a      	mov	r2, r3
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f000 fcbe 	bl	801064e <_ZN6BMI16012setAccConfigEhh>
			this->config.acc.range);

	// Set the gyroscope setting
	this->setGyroConfig(this->config.gyr.odr | this->config.gyr.bw,
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	781a      	ldrb	r2, [r3, #0]
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	785b      	ldrb	r3, [r3, #1]
 800fcda:	4313      	orrs	r3, r2
 800fcdc:	b2d9      	uxtb	r1, r3
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	789b      	ldrb	r3, [r3, #2]
 800fce2:	461a      	mov	r2, r3
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f000 fc99 	bl	801061c <_ZN6BMI16013setGyroConfigEhh>
			this->config.gyr.range);

	// Check if the settings have been set correctly

	uint8_t acc_config_reg = this->readRegister(BMI160_REG_ACCEL_CONFIG);
 800fcea:	2140      	movs	r1, #64	; 0x40
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	f000 f841 	bl	800fd74 <_ZN6BMI16012readRegisterEh>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	73fb      	strb	r3, [r7, #15]
	uint8_t acc_range_reg = this->readRegister(BMI160_REG_ACCEL_RANGE);
 800fcf6:	2141      	movs	r1, #65	; 0x41
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f000 f83b 	bl	800fd74 <_ZN6BMI16012readRegisterEh>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	73bb      	strb	r3, [r7, #14]
	uint8_t gyr_config_reg = this->readRegister(BMI160_REG_GYRO_CONFIG);
 800fd02:	2142      	movs	r1, #66	; 0x42
 800fd04:	6878      	ldr	r0, [r7, #4]
 800fd06:	f000 f835 	bl	800fd74 <_ZN6BMI16012readRegisterEh>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	737b      	strb	r3, [r7, #13]
	uint8_t gyr_range_reg = this->readRegister(BMI160_REG_GYRO_RANGE);
 800fd0e:	2143      	movs	r1, #67	; 0x43
 800fd10:	6878      	ldr	r0, [r7, #4]
 800fd12:	f000 f82f 	bl	800fd74 <_ZN6BMI16012readRegisterEh>
 800fd16:	4603      	mov	r3, r0
 800fd18:	733b      	strb	r3, [r7, #12]

	if (acc_config_reg != (this->config.acc.odr | this->config.acc.bw)) {
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	791a      	ldrb	r2, [r3, #4]
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	795b      	ldrb	r3, [r3, #5]
 800fd22:	4313      	orrs	r3, r2
 800fd24:	b2db      	uxtb	r3, r3
 800fd26:	7bfa      	ldrb	r2, [r7, #15]
 800fd28:	429a      	cmp	r2, r3
 800fd2a:	d002      	beq.n	800fd32 <_ZN6BMI1604initEv+0xce>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 800fd2c:	2008      	movs	r0, #8
 800fd2e:	f000 fdbd 	bl	80108ac <_Z17core_ErrorHandleri>
	}
	if (acc_range_reg != this->config.acc.range) {
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	799b      	ldrb	r3, [r3, #6]
 800fd36:	7bba      	ldrb	r2, [r7, #14]
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	d002      	beq.n	800fd42 <_ZN6BMI1604initEv+0xde>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 800fd3c:	2008      	movs	r0, #8
 800fd3e:	f000 fdb5 	bl	80108ac <_Z17core_ErrorHandleri>
	}
	if (gyr_config_reg != (this->config.gyr.odr | this->config.gyr.bw)) {
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	781a      	ldrb	r2, [r3, #0]
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	785b      	ldrb	r3, [r3, #1]
 800fd4a:	4313      	orrs	r3, r2
 800fd4c:	b2db      	uxtb	r3, r3
 800fd4e:	7b7a      	ldrb	r2, [r7, #13]
 800fd50:	429a      	cmp	r2, r3
 800fd52:	d002      	beq.n	800fd5a <_ZN6BMI1604initEv+0xf6>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 800fd54:	2008      	movs	r0, #8
 800fd56:	f000 fda9 	bl	80108ac <_Z17core_ErrorHandleri>
	}
	if (gyr_range_reg != this->config.gyr.range) {
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	789b      	ldrb	r3, [r3, #2]
 800fd5e:	7b3a      	ldrb	r2, [r7, #12]
 800fd60:	429a      	cmp	r2, r3
 800fd62:	d002      	beq.n	800fd6a <_ZN6BMI1604initEv+0x106>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 800fd64:	2008      	movs	r0, #8
 800fd66:	f000 fda1 	bl	80108ac <_Z17core_ErrorHandleri>
	}

	return CORE_OK;
 800fd6a:	2301      	movs	r3, #1
}
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	3710      	adds	r7, #16
 800fd70:	46bd      	mov	sp, r7
 800fd72:	bd80      	pop	{r7, pc}

0800fd74 <_ZN6BMI16012readRegisterEh>:

/* ============================================================================= */
uint8_t BMI160::readRegister(uint8_t reg) {
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b084      	sub	sp, #16
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
 800fd7c:	460b      	mov	r3, r1
 800fd7e:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0;
 800fd80:	2300      	movs	r3, #0
 800fd82:	73fb      	strb	r3, [r7, #15]
	reg |= 0x80;
 800fd84:	78fb      	ldrb	r3, [r7, #3]
 800fd86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fd8a:	b2db      	uxtb	r3, r3
 800fd8c:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(this->CS_GPIOx, this->CS_Pin, GPIO_PIN_RESET);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fd98:	2200      	movs	r2, #0
 800fd9a:	4619      	mov	r1, r3
 800fd9c:	f7f4 fdf2 	bl	8004984 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->hspi, &reg, 1, 10);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800fda4:	1cf9      	adds	r1, r7, #3
 800fda6:	230a      	movs	r3, #10
 800fda8:	2201      	movs	r2, #1
 800fdaa:	f7f7 fdd1 	bl	8007950 <HAL_SPI_Transmit>
	HAL_SPI_Receive(this->hspi, &ret, 1, 10);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800fdb2:	f107 010f 	add.w	r1, r7, #15
 800fdb6:	230a      	movs	r3, #10
 800fdb8:	2201      	movs	r2, #1
 800fdba:	f7f7 ffc5 	bl	8007d48 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(this->CS_GPIOx, this->CS_Pin, GPIO_PIN_SET);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fdc8:	2201      	movs	r2, #1
 800fdca:	4619      	mov	r1, r3
 800fdcc:	f7f4 fdda 	bl	8004984 <HAL_GPIO_WritePin>

	return ret;
 800fdd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	3710      	adds	r7, #16
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	bd80      	pop	{r7, pc}

0800fdda <_ZN6BMI16020readMultipleRegisterEhPhh>:

/* ============================================================================= */
uint8_t BMI160::readMultipleRegister(uint8_t reg, uint8_t *data, uint8_t len) {
 800fdda:	b580      	push	{r7, lr}
 800fddc:	b084      	sub	sp, #16
 800fdde:	af00      	add	r7, sp, #0
 800fde0:	60f8      	str	r0, [r7, #12]
 800fde2:	607a      	str	r2, [r7, #4]
 800fde4:	461a      	mov	r2, r3
 800fde6:	460b      	mov	r3, r1
 800fde8:	72fb      	strb	r3, [r7, #11]
 800fdea:	4613      	mov	r3, r2
 800fdec:	72bb      	strb	r3, [r7, #10]
//	reg += 0x80;
	reg |= 0x80;
 800fdee:	7afb      	ldrb	r3, [r7, #11]
 800fdf0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fdf4:	b2db      	uxtb	r3, r3
 800fdf6:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(this->CS_GPIOx, this->CS_Pin, GPIO_PIN_RESET);
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fe02:	2200      	movs	r2, #0
 800fe04:	4619      	mov	r1, r3
 800fe06:	f7f4 fdbd 	bl	8004984 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->hspi, &reg, 1, 1);
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800fe0e:	f107 010b 	add.w	r1, r7, #11
 800fe12:	2301      	movs	r3, #1
 800fe14:	2201      	movs	r2, #1
 800fe16:	f7f7 fd9b 	bl	8007950 <HAL_SPI_Transmit>
	HAL_SPI_Receive(this->hspi, data, len, 10);
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800fe1e:	7abb      	ldrb	r3, [r7, #10]
 800fe20:	b29a      	uxth	r2, r3
 800fe22:	230a      	movs	r3, #10
 800fe24:	6879      	ldr	r1, [r7, #4]
 800fe26:	f7f7 ff8f 	bl	8007d48 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(this->CS_GPIOx, this->CS_Pin, GPIO_PIN_SET);
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fe34:	2201      	movs	r2, #1
 800fe36:	4619      	mov	r1, r3
 800fe38:	f7f4 fda4 	bl	8004984 <HAL_GPIO_WritePin>

	return CORE_OK;
 800fe3c:	2301      	movs	r3, #1
}
 800fe3e:	4618      	mov	r0, r3
 800fe40:	3710      	adds	r7, #16
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bd80      	pop	{r7, pc}

0800fe46 <_ZN6BMI1605checkEv>:

/* ============================================================================= */
uint8_t BMI160::check() {
 800fe46:	b580      	push	{r7, lr}
 800fe48:	b084      	sub	sp, #16
 800fe4a:	af00      	add	r7, sp, #0
 800fe4c:	6078      	str	r0, [r7, #4]
	uint8_t id = this->readID();
 800fe4e:	6878      	ldr	r0, [r7, #4]
 800fe50:	f000 f80c 	bl	800fe6c <_ZN6BMI1606readIDEv>
 800fe54:	4603      	mov	r3, r0
 800fe56:	73fb      	strb	r3, [r7, #15]
	if (id != 209) {
 800fe58:	7bfb      	ldrb	r3, [r7, #15]
 800fe5a:	2bd1      	cmp	r3, #209	; 0xd1
 800fe5c:	d001      	beq.n	800fe62 <_ZN6BMI1605checkEv+0x1c>
		return 0;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	e000      	b.n	800fe64 <_ZN6BMI1605checkEv+0x1e>
	}

	return CORE_OK;
 800fe62:	2301      	movs	r3, #1
}
 800fe64:	4618      	mov	r0, r3
 800fe66:	3710      	adds	r7, #16
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}

0800fe6c <_ZN6BMI1606readIDEv>:

/* ============================================================================= */
uint8_t BMI160::readID() {
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b082      	sub	sp, #8
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
	return this->readRegister(BMI160_REG_CHIP_ID);
 800fe74:	2100      	movs	r1, #0
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f7ff ff7c 	bl	800fd74 <_ZN6BMI16012readRegisterEh>
 800fe7c:	4603      	mov	r3, r0
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3708      	adds	r7, #8
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}

0800fe86 <_ZN6BMI1606updateEv>:

/* ============================================================================= */
void BMI160::update() {
 800fe86:	b580      	push	{r7, lr}
 800fe88:	b082      	sub	sp, #8
 800fe8a:	af00      	add	r7, sp, #0
 800fe8c:	6078      	str	r0, [r7, #4]
	this->fetchData();
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f000 f807 	bl	800fea2 <_ZN6BMI1609fetchDataEv>
	this->processData();
 800fe94:	6878      	ldr	r0, [r7, #4]
 800fe96:	f000 f813 	bl	800fec0 <_ZN6BMI16011processDataEv>
}
 800fe9a:	bf00      	nop
 800fe9c:	3708      	adds	r7, #8
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd80      	pop	{r7, pc}

0800fea2 <_ZN6BMI1609fetchDataEv>:

/* ============================================================================= */
uint8_t BMI160::fetchData() {
 800fea2:	b580      	push	{r7, lr}
 800fea4:	b082      	sub	sp, #8
 800fea6:	af00      	add	r7, sp, #0
 800fea8:	6078      	str	r0, [r7, #4]
//	this->readSensorTime();
	this->readGyr();
 800feaa:	6878      	ldr	r0, [r7, #4]
 800feac:	f000 fb54 	bl	8010558 <_ZN6BMI1607readGyrEv>
	this->readAcc();
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f000 fb82 	bl	80105ba <_ZN6BMI1607readAccEv>

	return 1;
 800feb6:	2301      	movs	r3, #1
}
 800feb8:	4618      	mov	r0, r3
 800feba:	3708      	adds	r7, #8
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}

0800fec0 <_ZN6BMI16011processDataEv>:

/* ============================================================================= */
uint8_t BMI160::processData() {
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b082      	sub	sp, #8
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]

	// Gyroscope
	switch (this->config.gyr.range) {
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	789b      	ldrb	r3, [r3, #2]
 800fecc:	2b04      	cmp	r3, #4
 800fece:	f200 8201 	bhi.w	80102d4 <_ZN6BMI16011processDataEv+0x414>
 800fed2:	a201      	add	r2, pc, #4	; (adr r2, 800fed8 <_ZN6BMI16011processDataEv+0x18>)
 800fed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fed8:	08010219 	.word	0x08010219
 800fedc:	08010121 	.word	0x08010121
 800fee0:	08010065 	.word	0x08010065
 800fee4:	0800ffa9 	.word	0x0800ffa9
 800fee8:	0800feed 	.word	0x0800feed
	case BMI160_GYRO_RANGE_125_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 125.0)
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fef2:	ee07 3a90 	vmov	s15, r3
 800fef6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800fefa:	ed9f 5bc3 	vldr	d5, [pc, #780]	; 8010208 <_ZN6BMI16011processDataEv+0x348>
 800fefe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ff02:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 80101e0 <_ZN6BMI16011processDataEv+0x320>
 800ff06:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ff0a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ff0e:	eeb0 0a67 	vmov.f32	s0, s15
 800ff12:	f7ff fdd3 	bl	800fabc <_Z7deg2radf>
 800ff16:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800ff20:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 125.0)
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	edc3 7a04 	vstr	s15, [r3, #16]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 125.0)
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800ff30:	ee07 3a90 	vmov	s15, r3
 800ff34:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800ff38:	ed9f 5bb3 	vldr	d5, [pc, #716]	; 8010208 <_ZN6BMI16011processDataEv+0x348>
 800ff3c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ff40:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 80101e0 <_ZN6BMI16011processDataEv+0x320>
 800ff44:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ff48:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ff4c:	eeb0 0a67 	vmov.f32	s0, s15
 800ff50:	f7ff fdb4 	bl	800fabc <_Z7deg2radf>
 800ff54:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800ff5e:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 125.0)
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	edc3 7a05 	vstr	s15, [r3, #20]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 125.0)
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800ff6e:	ee07 3a90 	vmov	s15, r3
 800ff72:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800ff76:	ed9f 5ba4 	vldr	d5, [pc, #656]	; 8010208 <_ZN6BMI16011processDataEv+0x348>
 800ff7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ff7e:	ed9f 6b98 	vldr	d6, [pc, #608]	; 80101e0 <_ZN6BMI16011processDataEv+0x320>
 800ff82:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ff86:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ff8a:	eeb0 0a67 	vmov.f32	s0, s15
 800ff8e:	f7ff fd95 	bl	800fabc <_Z7deg2radf>
 800ff92:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800ff9c:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 125.0)
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	edc3 7a06 	vstr	s15, [r3, #24]
		break;
 800ffa6:	e195      	b.n	80102d4 <_ZN6BMI16011processDataEv+0x414>
	}
	case BMI160_GYRO_RANGE_250_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 250.0)
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ffae:	ee07 3a90 	vmov	s15, r3
 800ffb2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800ffb6:	ed9f 5b94 	vldr	d5, [pc, #592]	; 8010208 <_ZN6BMI16011processDataEv+0x348>
 800ffba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ffbe:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 80101e8 <_ZN6BMI16011processDataEv+0x328>
 800ffc2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ffc6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ffca:	eeb0 0a67 	vmov.f32	s0, s15
 800ffce:	f7ff fd75 	bl	800fabc <_Z7deg2radf>
 800ffd2:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800ffdc:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 250.0)
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	edc3 7a04 	vstr	s15, [r3, #16]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 250.0)
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800ffec:	ee07 3a90 	vmov	s15, r3
 800fff0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800fff4:	ed9f 5b84 	vldr	d5, [pc, #528]	; 8010208 <_ZN6BMI16011processDataEv+0x348>
 800fff8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fffc:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80101e8 <_ZN6BMI16011processDataEv+0x328>
 8010000:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010004:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010008:	eeb0 0a67 	vmov.f32	s0, s15
 801000c:	f7ff fd56 	bl	800fabc <_Z7deg2radf>
 8010010:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 801001a:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 250.0)
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	edc3 7a05 	vstr	s15, [r3, #20]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 250.0)
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801002a:	ee07 3a90 	vmov	s15, r3
 801002e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8010032:	ed9f 5b75 	vldr	d5, [pc, #468]	; 8010208 <_ZN6BMI16011processDataEv+0x348>
 8010036:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801003a:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 80101e8 <_ZN6BMI16011processDataEv+0x328>
 801003e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010042:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010046:	eeb0 0a67 	vmov.f32	s0, s15
 801004a:	f7ff fd37 	bl	800fabc <_Z7deg2radf>
 801004e:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8010058:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 250.0)
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	edc3 7a06 	vstr	s15, [r3, #24]
		break;
 8010062:	e137      	b.n	80102d4 <_ZN6BMI16011processDataEv+0x414>
	}
	case BMI160_GYRO_RANGE_500_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 500.0)
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801006a:	ee07 3a90 	vmov	s15, r3
 801006e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8010072:	ed9f 5b65 	vldr	d5, [pc, #404]	; 8010208 <_ZN6BMI16011processDataEv+0x348>
 8010076:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801007a:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 80101f0 <_ZN6BMI16011processDataEv+0x330>
 801007e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010082:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010086:	eeb0 0a67 	vmov.f32	s0, s15
 801008a:	f7ff fd17 	bl	800fabc <_Z7deg2radf>
 801008e:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8010098:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 500.0)
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	edc3 7a04 	vstr	s15, [r3, #16]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 500.0)
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80100a8:	ee07 3a90 	vmov	s15, r3
 80100ac:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80100b0:	ed9f 5b55 	vldr	d5, [pc, #340]	; 8010208 <_ZN6BMI16011processDataEv+0x348>
 80100b4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80100b8:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 80101f0 <_ZN6BMI16011processDataEv+0x330>
 80100bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80100c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80100c4:	eeb0 0a67 	vmov.f32	s0, s15
 80100c8:	f7ff fcf8 	bl	800fabc <_Z7deg2radf>
 80100cc:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80100d6:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 500.0)
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	edc3 7a05 	vstr	s15, [r3, #20]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 500.0)
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80100e6:	ee07 3a90 	vmov	s15, r3
 80100ea:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80100ee:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8010208 <_ZN6BMI16011processDataEv+0x348>
 80100f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80100f6:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 80101f0 <_ZN6BMI16011processDataEv+0x330>
 80100fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80100fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010102:	eeb0 0a67 	vmov.f32	s0, s15
 8010106:	f7ff fcd9 	bl	800fabc <_Z7deg2radf>
 801010a:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8010114:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 500.0)
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	edc3 7a06 	vstr	s15, [r3, #24]
		break;
 801011e:	e0d9      	b.n	80102d4 <_ZN6BMI16011processDataEv+0x414>
	}
	case BMI160_GYRO_RANGE_1000_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 1000.0)
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010126:	ee07 3a90 	vmov	s15, r3
 801012a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801012e:	ed9f 5b36 	vldr	d5, [pc, #216]	; 8010208 <_ZN6BMI16011processDataEv+0x348>
 8010132:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010136:	ed9f 6b30 	vldr	d6, [pc, #192]	; 80101f8 <_ZN6BMI16011processDataEv+0x338>
 801013a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801013e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010142:	eeb0 0a67 	vmov.f32	s0, s15
 8010146:	f7ff fcb9 	bl	800fabc <_Z7deg2radf>
 801014a:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8010154:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 1000.0)
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	edc3 7a04 	vstr	s15, [r3, #16]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 1000.0)
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8010164:	ee07 3a90 	vmov	s15, r3
 8010168:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801016c:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8010208 <_ZN6BMI16011processDataEv+0x348>
 8010170:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010174:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80101f8 <_ZN6BMI16011processDataEv+0x338>
 8010178:	ee27 7b06 	vmul.f64	d7, d7, d6
 801017c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010180:	eeb0 0a67 	vmov.f32	s0, s15
 8010184:	f7ff fc9a 	bl	800fabc <_Z7deg2radf>
 8010188:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8010192:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 1000.0)
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	edc3 7a05 	vstr	s15, [r3, #20]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 1000.0)
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80101a2:	ee07 3a90 	vmov	s15, r3
 80101a6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80101aa:	ed9f 5b17 	vldr	d5, [pc, #92]	; 8010208 <_ZN6BMI16011processDataEv+0x348>
 80101ae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80101b2:	ed9f 6b11 	vldr	d6, [pc, #68]	; 80101f8 <_ZN6BMI16011processDataEv+0x338>
 80101b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80101ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80101be:	eeb0 0a67 	vmov.f32	s0, s15
 80101c2:	f7ff fc7b 	bl	800fabc <_Z7deg2radf>
 80101c6:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80101d0:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 1000.0)
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	edc3 7a06 	vstr	s15, [r3, #24]
		break;
 80101da:	e07b      	b.n	80102d4 <_ZN6BMI16011processDataEv+0x414>
 80101dc:	f3af 8000 	nop.w
 80101e0:	00000000 	.word	0x00000000
 80101e4:	405f4000 	.word	0x405f4000
 80101e8:	00000000 	.word	0x00000000
 80101ec:	406f4000 	.word	0x406f4000
 80101f0:	00000000 	.word	0x00000000
 80101f4:	407f4000 	.word	0x407f4000
 80101f8:	00000000 	.word	0x00000000
 80101fc:	408f4000 	.word	0x408f4000
 8010200:	00000000 	.word	0x00000000
 8010204:	409f4000 	.word	0x409f4000
 8010208:	00000000 	.word	0x00000000
 801020c:	40e00000 	.word	0x40e00000
 8010210:	51eb851f 	.word	0x51eb851f
 8010214:	40239eb8 	.word	0x40239eb8
	}
	case BMI160_GYRO_RANGE_2000_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 2000.0)
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801021e:	ee07 3a90 	vmov	s15, r3
 8010222:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8010226:	ed1f 5b08 	vldr	d5, [pc, #-32]	; 8010208 <_ZN6BMI16011processDataEv+0x348>
 801022a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801022e:	ed1f 6b0c 	vldr	d6, [pc, #-48]	; 8010200 <_ZN6BMI16011processDataEv+0x340>
 8010232:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010236:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801023a:	eeb0 0a67 	vmov.f32	s0, s15
 801023e:	f7ff fc3d 	bl	800fabc <_Z7deg2radf>
 8010242:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 801024c:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 2000.0)
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	edc3 7a04 	vstr	s15, [r3, #16]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 2000.0)
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801025c:	ee07 3a90 	vmov	s15, r3
 8010260:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8010264:	ed1f 5b18 	vldr	d5, [pc, #-96]	; 8010208 <_ZN6BMI16011processDataEv+0x348>
 8010268:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801026c:	ed1f 6b1c 	vldr	d6, [pc, #-112]	; 8010200 <_ZN6BMI16011processDataEv+0x340>
 8010270:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010274:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010278:	eeb0 0a67 	vmov.f32	s0, s15
 801027c:	f7ff fc1e 	bl	800fabc <_Z7deg2radf>
 8010280:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 801028a:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 2000.0)
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	edc3 7a05 	vstr	s15, [r3, #20]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 2000.0)
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801029a:	ee07 3a90 	vmov	s15, r3
 801029e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80102a2:	ed1f 5b27 	vldr	d5, [pc, #-156]	; 8010208 <_ZN6BMI16011processDataEv+0x348>
 80102a6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80102aa:	ed1f 6b2b 	vldr	d6, [pc, #-172]	; 8010200 <_ZN6BMI16011processDataEv+0x340>
 80102ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80102b2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80102b6:	eeb0 0a67 	vmov.f32	s0, s15
 80102ba:	f7ff fbff 	bl	800fabc <_Z7deg2radf>
 80102be:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80102c8:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 2000.0)
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	edc3 7a06 	vstr	s15, [r3, #24]
		break;
 80102d2:	bf00      	nop
	}
	}

	// Accelerometer
	switch (this->config.acc.range) {
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	799b      	ldrb	r3, [r3, #6]
 80102d8:	3b03      	subs	r3, #3
 80102da:	2b09      	cmp	r3, #9
 80102dc:	f200 8136 	bhi.w	801054c <_ZN6BMI16011processDataEv+0x68c>
 80102e0:	a201      	add	r2, pc, #4	; (adr r2, 80102e8 <_ZN6BMI16011processDataEv+0x428>)
 80102e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102e6:	bf00      	nop
 80102e8:	08010311 	.word	0x08010311
 80102ec:	0801054d 	.word	0x0801054d
 80102f0:	08010397 	.word	0x08010397
 80102f4:	0801054d 	.word	0x0801054d
 80102f8:	0801054d 	.word	0x0801054d
 80102fc:	08010429 	.word	0x08010429
 8010300:	0801054d 	.word	0x0801054d
 8010304:	0801054d 	.word	0x0801054d
 8010308:	0801054d 	.word	0x0801054d
 801030c:	080104bb 	.word	0x080104bb
	case BMI160_ACCEL_RANGE_2G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 2.0 * 9.81;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010316:	ee07 3a90 	vmov	s15, r3
 801031a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801031e:	ed1f 5b46 	vldr	d5, [pc, #-280]	; 8010208 <_ZN6BMI16011processDataEv+0x348>
 8010322:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010326:	ee37 7b07 	vadd.f64	d7, d7, d7
 801032a:	ed1f 6b47 	vldr	d6, [pc, #-284]	; 8010210 <_ZN6BMI16011processDataEv+0x350>
 801032e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010332:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		this->acc.y = this->acc_raw.y / 32768.0 * 2.0 * 9.81;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8010342:	ee07 3a90 	vmov	s15, r3
 8010346:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801034a:	ed1f 5b51 	vldr	d5, [pc, #-324]	; 8010208 <_ZN6BMI16011processDataEv+0x348>
 801034e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010352:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010356:	ed1f 6b52 	vldr	d6, [pc, #-328]	; 8010210 <_ZN6BMI16011processDataEv+0x350>
 801035a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801035e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		this->acc.z = this->acc_raw.z / 32768.0 * 2.0 * 9.81;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801036e:	ee07 3a90 	vmov	s15, r3
 8010372:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8010376:	ed1f 5b5c 	vldr	d5, [pc, #-368]	; 8010208 <_ZN6BMI16011processDataEv+0x348>
 801037a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801037e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010382:	ed1f 6b5d 	vldr	d6, [pc, #-372]	; 8010210 <_ZN6BMI16011processDataEv+0x350>
 8010386:	ee27 7b06 	vmul.f64	d7, d7, d6
 801038a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		break;
 8010394:	e0da      	b.n	801054c <_ZN6BMI16011processDataEv+0x68c>
	}
	case BMI160_ACCEL_RANGE_4G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 4.0 * 9.81;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801039c:	ee07 3a90 	vmov	s15, r3
 80103a0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80103a4:	ed1f 5b68 	vldr	d5, [pc, #-416]	; 8010208 <_ZN6BMI16011processDataEv+0x348>
 80103a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80103ac:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80103b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80103b4:	ed1f 6b6a 	vldr	d6, [pc, #-424]	; 8010210 <_ZN6BMI16011processDataEv+0x350>
 80103b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80103bc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		this->acc.y = this->acc_raw.y / 32768.0 * 4.0 * 9.81;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80103cc:	ee07 3a90 	vmov	s15, r3
 80103d0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80103d4:	ed1f 5b74 	vldr	d5, [pc, #-464]	; 8010208 <_ZN6BMI16011processDataEv+0x348>
 80103d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80103dc:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80103e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80103e4:	ed1f 6b76 	vldr	d6, [pc, #-472]	; 8010210 <_ZN6BMI16011processDataEv+0x350>
 80103e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80103ec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		this->acc.z = this->acc_raw.z / 32768.0 * 4.0 * 9.81;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80103fc:	ee07 3a90 	vmov	s15, r3
 8010400:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8010404:	ed1f 5b80 	vldr	d5, [pc, #-512]	; 8010208 <_ZN6BMI16011processDataEv+0x348>
 8010408:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801040c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8010410:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010414:	ed1f 6b82 	vldr	d6, [pc, #-520]	; 8010210 <_ZN6BMI16011processDataEv+0x350>
 8010418:	ee27 7b06 	vmul.f64	d7, d7, d6
 801041c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		break;
 8010426:	e091      	b.n	801054c <_ZN6BMI16011processDataEv+0x68c>
	}
	case BMI160_ACCEL_RANGE_8G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 8.0 * 9.81;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801042e:	ee07 3a90 	vmov	s15, r3
 8010432:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8010436:	ed1f 5b8c 	vldr	d5, [pc, #-560]	; 8010208 <_ZN6BMI16011processDataEv+0x348>
 801043a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801043e:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 8010442:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010446:	ed1f 6b8e 	vldr	d6, [pc, #-568]	; 8010210 <_ZN6BMI16011processDataEv+0x350>
 801044a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801044e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		this->acc.y = this->acc_raw.y / 32768.0 * 8.0 * 9.81;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801045e:	ee07 3a90 	vmov	s15, r3
 8010462:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8010466:	ed1f 5b98 	vldr	d5, [pc, #-608]	; 8010208 <_ZN6BMI16011processDataEv+0x348>
 801046a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801046e:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 8010472:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010476:	ed1f 6b9a 	vldr	d6, [pc, #-616]	; 8010210 <_ZN6BMI16011processDataEv+0x350>
 801047a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801047e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		this->acc.z = this->acc_raw.z / 32768.0 * 8.0 * 9.81;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801048e:	ee07 3a90 	vmov	s15, r3
 8010492:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8010496:	ed1f 5ba4 	vldr	d5, [pc, #-656]	; 8010208 <_ZN6BMI16011processDataEv+0x348>
 801049a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801049e:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 80104a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80104a6:	ed1f 6ba6 	vldr	d6, [pc, #-664]	; 8010210 <_ZN6BMI16011processDataEv+0x350>
 80104aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80104ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		break;
 80104b8:	e048      	b.n	801054c <_ZN6BMI16011processDataEv+0x68c>
	}
	case BMI160_ACCEL_RANGE_16G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 16.0 * 9.81;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80104c0:	ee07 3a90 	vmov	s15, r3
 80104c4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80104c8:	ed1f 5bb1 	vldr	d5, [pc, #-708]	; 8010208 <_ZN6BMI16011processDataEv+0x348>
 80104cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80104d0:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 80104d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80104d8:	ed1f 6bb3 	vldr	d6, [pc, #-716]	; 8010210 <_ZN6BMI16011processDataEv+0x350>
 80104dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80104e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		this->acc.y = this->acc_raw.y / 32768.0 * 16.0 * 9.81;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80104f0:	ee07 3a90 	vmov	s15, r3
 80104f4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80104f8:	ed1f 5bbd 	vldr	d5, [pc, #-756]	; 8010208 <_ZN6BMI16011processDataEv+0x348>
 80104fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010500:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8010504:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010508:	ed1f 6bbf 	vldr	d6, [pc, #-764]	; 8010210 <_ZN6BMI16011processDataEv+0x350>
 801050c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010510:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		this->acc.z = this->acc_raw.z / 32768.0 * 16.0 * 9.81;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8010520:	ee07 3a90 	vmov	s15, r3
 8010524:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8010528:	ed1f 5bc9 	vldr	d5, [pc, #-804]	; 8010208 <_ZN6BMI16011processDataEv+0x348>
 801052c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010530:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8010534:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010538:	ed1f 6bcb 	vldr	d6, [pc, #-812]	; 8010210 <_ZN6BMI16011processDataEv+0x350>
 801053c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010540:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		break;
 801054a:	bf00      	nop
	}
	}

	return 1;
 801054c:	2301      	movs	r3, #1
}
 801054e:	4618      	mov	r0, r3
 8010550:	3708      	adds	r7, #8
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}
 8010556:	bf00      	nop

08010558 <_ZN6BMI1607readGyrEv>:
	this->gyr_calib.y = gyr_y;
	this->gyr_calib.z = gyr_z;
}

/* ============================================================================= */
uint8_t BMI160::readGyr() {
 8010558:	b580      	push	{r7, lr}
 801055a:	b084      	sub	sp, #16
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
	uint8_t gyr_data[6] = { 0 };
 8010560:	2300      	movs	r3, #0
 8010562:	60bb      	str	r3, [r7, #8]
 8010564:	2300      	movs	r3, #0
 8010566:	81bb      	strh	r3, [r7, #12]
	this->readMultipleRegister(BMI160_REG_GYR_X_LOW, gyr_data, 6);
 8010568:	f107 0208 	add.w	r2, r7, #8
 801056c:	2306      	movs	r3, #6
 801056e:	210c      	movs	r1, #12
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f7ff fc32 	bl	800fdda <_ZN6BMI16020readMultipleRegisterEhPhh>

	this->gyr_raw.x = bytearray_to_int16(&gyr_data[0]);
 8010576:	f107 0308 	add.w	r3, r7, #8
 801057a:	4618      	mov	r0, r3
 801057c:	f000 f980 	bl	8010880 <_Z18bytearray_to_int16Ph>
 8010580:	4603      	mov	r3, r0
 8010582:	461a      	mov	r2, r3
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	811a      	strh	r2, [r3, #8]
	this->gyr_raw.y = bytearray_to_int16(&gyr_data[2]);
 8010588:	f107 0308 	add.w	r3, r7, #8
 801058c:	3302      	adds	r3, #2
 801058e:	4618      	mov	r0, r3
 8010590:	f000 f976 	bl	8010880 <_Z18bytearray_to_int16Ph>
 8010594:	4603      	mov	r3, r0
 8010596:	461a      	mov	r2, r3
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	815a      	strh	r2, [r3, #10]
	this->gyr_raw.z = bytearray_to_int16(&gyr_data[4]);
 801059c:	f107 0308 	add.w	r3, r7, #8
 80105a0:	3304      	adds	r3, #4
 80105a2:	4618      	mov	r0, r3
 80105a4:	f000 f96c 	bl	8010880 <_Z18bytearray_to_int16Ph>
 80105a8:	4603      	mov	r3, r0
 80105aa:	461a      	mov	r2, r3
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	819a      	strh	r2, [r3, #12]

	return 1;
 80105b0:	2301      	movs	r3, #1
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	3710      	adds	r7, #16
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}

080105ba <_ZN6BMI1607readAccEv>:

/* ============================================================================= */
uint8_t BMI160::readAcc() {
 80105ba:	b580      	push	{r7, lr}
 80105bc:	b084      	sub	sp, #16
 80105be:	af00      	add	r7, sp, #0
 80105c0:	6078      	str	r0, [r7, #4]
	uint8_t acc_data[6] = { 0 };
 80105c2:	2300      	movs	r3, #0
 80105c4:	60bb      	str	r3, [r7, #8]
 80105c6:	2300      	movs	r3, #0
 80105c8:	81bb      	strh	r3, [r7, #12]
	this->readMultipleRegister(BMI160_REG_ACC_X_LOW, acc_data, 6);
 80105ca:	f107 0208 	add.w	r2, r7, #8
 80105ce:	2306      	movs	r3, #6
 80105d0:	2112      	movs	r1, #18
 80105d2:	6878      	ldr	r0, [r7, #4]
 80105d4:	f7ff fc01 	bl	800fdda <_ZN6BMI16020readMultipleRegisterEhPhh>

	this->acc_raw.x = bytearray_to_int16(&acc_data[0]);
 80105d8:	f107 0308 	add.w	r3, r7, #8
 80105dc:	4618      	mov	r0, r3
 80105de:	f000 f94f 	bl	8010880 <_Z18bytearray_to_int16Ph>
 80105e2:	4603      	mov	r3, r0
 80105e4:	461a      	mov	r2, r3
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	839a      	strh	r2, [r3, #28]
	this->acc_raw.y = bytearray_to_int16(&acc_data[2]);
 80105ea:	f107 0308 	add.w	r3, r7, #8
 80105ee:	3302      	adds	r3, #2
 80105f0:	4618      	mov	r0, r3
 80105f2:	f000 f945 	bl	8010880 <_Z18bytearray_to_int16Ph>
 80105f6:	4603      	mov	r3, r0
 80105f8:	461a      	mov	r2, r3
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	83da      	strh	r2, [r3, #30]
	this->acc_raw.z = bytearray_to_int16(&acc_data[4]);
 80105fe:	f107 0308 	add.w	r3, r7, #8
 8010602:	3304      	adds	r3, #4
 8010604:	4618      	mov	r0, r3
 8010606:	f000 f93b 	bl	8010880 <_Z18bytearray_to_int16Ph>
 801060a:	4603      	mov	r3, r0
 801060c:	461a      	mov	r2, r3
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	841a      	strh	r2, [r3, #32]

	return 1;
 8010612:	2301      	movs	r3, #1
}
 8010614:	4618      	mov	r0, r3
 8010616:	3710      	adds	r7, #16
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}

0801061c <_ZN6BMI16013setGyroConfigEhh>:
	this->sensortime = bytearray_to_uint32(sensortime_data);
	return CORE_OK;
}

/* ============================================================================= */
uint8_t BMI160::setGyroConfig(uint8_t config, uint8_t range) {
 801061c:	b580      	push	{r7, lr}
 801061e:	b082      	sub	sp, #8
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	460b      	mov	r3, r1
 8010626:	70fb      	strb	r3, [r7, #3]
 8010628:	4613      	mov	r3, r2
 801062a:	70bb      	strb	r3, [r7, #2]

	this->writeRegister(BMI160_REG_GYRO_RANGE, range);
 801062c:	78bb      	ldrb	r3, [r7, #2]
 801062e:	461a      	mov	r2, r3
 8010630:	2143      	movs	r1, #67	; 0x43
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f7ff fae9 	bl	800fc0a <_ZN6BMI16013writeRegisterEhh>
	this->writeRegister(BMI160_REG_GYRO_CONFIG, config);
 8010638:	78fb      	ldrb	r3, [r7, #3]
 801063a:	461a      	mov	r2, r3
 801063c:	2142      	movs	r1, #66	; 0x42
 801063e:	6878      	ldr	r0, [r7, #4]
 8010640:	f7ff fae3 	bl	800fc0a <_ZN6BMI16013writeRegisterEhh>

	return CORE_OK;
 8010644:	2301      	movs	r3, #1
}
 8010646:	4618      	mov	r0, r3
 8010648:	3708      	adds	r7, #8
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}

0801064e <_ZN6BMI16012setAccConfigEhh>:

/* ============================================================================= */
uint8_t BMI160::setAccConfig(uint8_t config, uint8_t range) {
 801064e:	b580      	push	{r7, lr}
 8010650:	b082      	sub	sp, #8
 8010652:	af00      	add	r7, sp, #0
 8010654:	6078      	str	r0, [r7, #4]
 8010656:	460b      	mov	r3, r1
 8010658:	70fb      	strb	r3, [r7, #3]
 801065a:	4613      	mov	r3, r2
 801065c:	70bb      	strb	r3, [r7, #2]
	this->writeRegister(BMI160_REG_ACCEL_CONFIG, config);
 801065e:	78fb      	ldrb	r3, [r7, #3]
 8010660:	461a      	mov	r2, r3
 8010662:	2140      	movs	r1, #64	; 0x40
 8010664:	6878      	ldr	r0, [r7, #4]
 8010666:	f7ff fad0 	bl	800fc0a <_ZN6BMI16013writeRegisterEhh>
	this->writeRegister(BMI160_REG_ACCEL_RANGE, range);
 801066a:	78bb      	ldrb	r3, [r7, #2]
 801066c:	461a      	mov	r2, r3
 801066e:	2141      	movs	r1, #65	; 0x41
 8010670:	6878      	ldr	r0, [r7, #4]
 8010672:	f7ff faca 	bl	800fc0a <_ZN6BMI16013writeRegisterEhh>

	return CORE_OK;
 8010676:	2301      	movs	r3, #1
}
 8010678:	4618      	mov	r0, r3
 801067a:	3708      	adds	r7, #8
 801067c:	46bd      	mov	sp, r7
 801067e:	bd80      	pop	{r7, pc}

08010680 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode>:

/* ============================================================================= */
uint8_t BMI160::setPowerMode(BMI160_PowerMode mode) {
 8010680:	b580      	push	{r7, lr}
 8010682:	b082      	sub	sp, #8
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	460b      	mov	r3, r1
 801068a:	70fb      	strb	r3, [r7, #3]
	if (mode == BMI160_Power_Normal) {
 801068c:	78fb      	ldrb	r3, [r7, #3]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d113      	bne.n	80106ba <_ZN6BMI16012setPowerModeE16BMI160_PowerMode+0x3a>
		delay(100);
 8010692:	2064      	movs	r0, #100	; 0x64
 8010694:	f7ff fa2e 	bl	800faf4 <_Z5delaym>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_GYRO_NORMAL_MODE);
 8010698:	2215      	movs	r2, #21
 801069a:	217e      	movs	r1, #126	; 0x7e
 801069c:	6878      	ldr	r0, [r7, #4]
 801069e:	f7ff fab4 	bl	800fc0a <_ZN6BMI16013writeRegisterEhh>
		delay(250);
 80106a2:	20fa      	movs	r0, #250	; 0xfa
 80106a4:	f7ff fa26 	bl	800faf4 <_Z5delaym>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_ACCEL_NORMAL_MODE);
 80106a8:	2211      	movs	r2, #17
 80106aa:	217e      	movs	r1, #126	; 0x7e
 80106ac:	6878      	ldr	r0, [r7, #4]
 80106ae:	f7ff faac 	bl	800fc0a <_ZN6BMI16013writeRegisterEhh>
		delay(250);
 80106b2:	20fa      	movs	r0, #250	; 0xfa
 80106b4:	f7ff fa1e 	bl	800faf4 <_Z5delaym>
 80106b8:	e012      	b.n	80106e0 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode+0x60>
	} else if (mode == BMI160_Power_Suspend) {
 80106ba:	78fb      	ldrb	r3, [r7, #3]
 80106bc:	2b01      	cmp	r3, #1
 80106be:	d10f      	bne.n	80106e0 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode+0x60>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_ACCEL_SUSPEND_MODE);
 80106c0:	2210      	movs	r2, #16
 80106c2:	217e      	movs	r1, #126	; 0x7e
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f7ff faa0 	bl	800fc0a <_ZN6BMI16013writeRegisterEhh>
		delay(100);
 80106ca:	2064      	movs	r0, #100	; 0x64
 80106cc:	f7ff fa12 	bl	800faf4 <_Z5delaym>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_GYRO_SUSPEND_MODE);
 80106d0:	2214      	movs	r2, #20
 80106d2:	217e      	movs	r1, #126	; 0x7e
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f7ff fa98 	bl	800fc0a <_ZN6BMI16013writeRegisterEhh>
		delay(100);
 80106da:	2064      	movs	r0, #100	; 0x64
 80106dc:	f7ff fa0a 	bl	800faf4 <_Z5delaym>
	}
	return CORE_OK;
 80106e0:	2301      	movs	r3, #1
}
 80106e2:	4618      	mov	r0, r3
 80106e4:	3708      	adds	r7, #8
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd80      	pop	{r7, pc}

080106ea <_ZN6BMI1605resetEv>:
	this->writeRegister(0x77, offset_register);

}

/* ============================================================================= */
void BMI160::reset() {
 80106ea:	b580      	push	{r7, lr}
 80106ec:	b082      	sub	sp, #8
 80106ee:	af00      	add	r7, sp, #0
 80106f0:	6078      	str	r0, [r7, #4]
	this->writeRegister(BMI160_REG_COMMAND, 0xB6);
 80106f2:	22b6      	movs	r2, #182	; 0xb6
 80106f4:	217e      	movs	r1, #126	; 0x7e
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f7ff fa87 	bl	800fc0a <_ZN6BMI16013writeRegisterEhh>
	delay(10);
 80106fc:	200a      	movs	r0, #10
 80106fe:	f7ff f9f9 	bl	800faf4 <_Z5delaym>
}
 8010702:	bf00      	nop
 8010704:	3708      	adds	r7, #8
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}

0801070a <_Z10cobsEncodePhhS_>:
	@param buffer Pointer to encoded output buffer
	@return Encoded buffer length in bytes
	@note Does not output delimiter byte
*/
uint8_t cobsEncode(uint8_t *data_in, uint8_t length, uint8_t *data_out)
{
 801070a:	b480      	push	{r7}
 801070c:	b089      	sub	sp, #36	; 0x24
 801070e:	af00      	add	r7, sp, #0
 8010710:	60f8      	str	r0, [r7, #12]
 8010712:	460b      	mov	r3, r1
 8010714:	607a      	str	r2, [r7, #4]
 8010716:	72fb      	strb	r3, [r7, #11]

	uint8_t *encode = data_out; // Encoded byte pointer
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	61fb      	str	r3, [r7, #28]
	uint8_t *codep = encode++; // Output code pointer
 801071c:	69fb      	ldr	r3, [r7, #28]
 801071e:	1c5a      	adds	r2, r3, #1
 8010720:	61fa      	str	r2, [r7, #28]
 8010722:	61bb      	str	r3, [r7, #24]
	uint8_t code = 1; // Code value
 8010724:	2301      	movs	r3, #1
 8010726:	75fb      	strb	r3, [r7, #23]

	for (const uint8_t *byte = (const uint8_t *)data_in; length--; ++byte)
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	613b      	str	r3, [r7, #16]
 801072c:	7afb      	ldrb	r3, [r7, #11]
 801072e:	1e5a      	subs	r2, r3, #1
 8010730:	72fa      	strb	r2, [r7, #11]
 8010732:	2b00      	cmp	r3, #0
 8010734:	bf14      	ite	ne
 8010736:	2301      	movne	r3, #1
 8010738:	2300      	moveq	r3, #0
 801073a:	b2db      	uxtb	r3, r3
 801073c:	2b00      	cmp	r3, #0
 801073e:	d028      	beq.n	8010792 <_Z10cobsEncodePhhS_+0x88>
	{
		if (*byte) // Byte not zero, write it
 8010740:	693b      	ldr	r3, [r7, #16]
 8010742:	781b      	ldrb	r3, [r3, #0]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d008      	beq.n	801075a <_Z10cobsEncodePhhS_+0x50>
			*encode++ = *byte, ++code;
 8010748:	69fb      	ldr	r3, [r7, #28]
 801074a:	1c5a      	adds	r2, r3, #1
 801074c:	61fa      	str	r2, [r7, #28]
 801074e:	693a      	ldr	r2, [r7, #16]
 8010750:	7812      	ldrb	r2, [r2, #0]
 8010752:	701a      	strb	r2, [r3, #0]
 8010754:	7dfb      	ldrb	r3, [r7, #23]
 8010756:	3301      	adds	r3, #1
 8010758:	75fb      	strb	r3, [r7, #23]

		if (!*byte || code == 0xff) // Input is zero or block completed, restart
 801075a:	693b      	ldr	r3, [r7, #16]
 801075c:	781b      	ldrb	r3, [r3, #0]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d002      	beq.n	8010768 <_Z10cobsEncodePhhS_+0x5e>
 8010762:	7dfb      	ldrb	r3, [r7, #23]
 8010764:	2bff      	cmp	r3, #255	; 0xff
 8010766:	d110      	bne.n	801078a <_Z10cobsEncodePhhS_+0x80>
		{
			*codep = code, code = 1, codep = encode;
 8010768:	69bb      	ldr	r3, [r7, #24]
 801076a:	7dfa      	ldrb	r2, [r7, #23]
 801076c:	701a      	strb	r2, [r3, #0]
 801076e:	2301      	movs	r3, #1
 8010770:	75fb      	strb	r3, [r7, #23]
 8010772:	69fb      	ldr	r3, [r7, #28]
 8010774:	61bb      	str	r3, [r7, #24]
			if (!*byte || length)
 8010776:	693b      	ldr	r3, [r7, #16]
 8010778:	781b      	ldrb	r3, [r3, #0]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d002      	beq.n	8010784 <_Z10cobsEncodePhhS_+0x7a>
 801077e:	7afb      	ldrb	r3, [r7, #11]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d002      	beq.n	801078a <_Z10cobsEncodePhhS_+0x80>
				++encode;
 8010784:	69fb      	ldr	r3, [r7, #28]
 8010786:	3301      	adds	r3, #1
 8010788:	61fb      	str	r3, [r7, #28]
	for (const uint8_t *byte = (const uint8_t *)data_in; length--; ++byte)
 801078a:	693b      	ldr	r3, [r7, #16]
 801078c:	3301      	adds	r3, #1
 801078e:	613b      	str	r3, [r7, #16]
 8010790:	e7cc      	b.n	801072c <_Z10cobsEncodePhhS_+0x22>
		}
	}
	*codep = code; // Write final code value
 8010792:	69bb      	ldr	r3, [r7, #24]
 8010794:	7dfa      	ldrb	r2, [r7, #23]
 8010796:	701a      	strb	r2, [r3, #0]

	return (uint8_t)(encode - data_out);
 8010798:	69fa      	ldr	r2, [r7, #28]
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	1ad3      	subs	r3, r2, r3
 801079e:	b2db      	uxtb	r3, r3
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	3724      	adds	r7, #36	; 0x24
 80107a4:	46bd      	mov	sp, r7
 80107a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107aa:	4770      	bx	lr

080107ac <_Z10cobsDecodePhhS_>:
	@param data Pointer to decoded output data
	@return Number of bytes successfully decoded
	@note Stops decoding if delimiter byte is found
*/
uint8_t cobsDecode(uint8_t *buffer, uint8_t length, uint8_t *data)
{
 80107ac:	b480      	push	{r7}
 80107ae:	b089      	sub	sp, #36	; 0x24
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	60f8      	str	r0, [r7, #12]
 80107b4:	460b      	mov	r3, r1
 80107b6:	607a      	str	r2, [r7, #4]
 80107b8:	72fb      	strb	r3, [r7, #11]

	const uint8_t *byte = buffer; // Encoded input byte pointer
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	61fb      	str	r3, [r7, #28]
	uint8_t *decode = (uint8_t *)data; // Decoded output byte pointer
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	61bb      	str	r3, [r7, #24]

	for (uint8_t code = 0xff, block = 0; byte < buffer + length; --block)
 80107c2:	23ff      	movs	r3, #255	; 0xff
 80107c4:	75fb      	strb	r3, [r7, #23]
 80107c6:	2300      	movs	r3, #0
 80107c8:	75bb      	strb	r3, [r7, #22]
 80107ca:	7afb      	ldrb	r3, [r7, #11]
 80107cc:	68fa      	ldr	r2, [r7, #12]
 80107ce:	4413      	add	r3, r2
 80107d0:	69fa      	ldr	r2, [r7, #28]
 80107d2:	429a      	cmp	r2, r3
 80107d4:	d222      	bcs.n	801081c <_Z10cobsDecodePhhS_+0x70>
	{
		if (block) // Decode block byte
 80107d6:	7dbb      	ldrb	r3, [r7, #22]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d008      	beq.n	80107ee <_Z10cobsDecodePhhS_+0x42>
			*decode++ = *byte++;
 80107dc:	69fa      	ldr	r2, [r7, #28]
 80107de:	1c53      	adds	r3, r2, #1
 80107e0:	61fb      	str	r3, [r7, #28]
 80107e2:	69bb      	ldr	r3, [r7, #24]
 80107e4:	1c59      	adds	r1, r3, #1
 80107e6:	61b9      	str	r1, [r7, #24]
 80107e8:	7812      	ldrb	r2, [r2, #0]
 80107ea:	701a      	strb	r2, [r3, #0]
 80107ec:	e011      	b.n	8010812 <_Z10cobsDecodePhhS_+0x66>
		else
		{
			if (code != 0xff) // Encoded zero, write it
 80107ee:	7dfb      	ldrb	r3, [r7, #23]
 80107f0:	2bff      	cmp	r3, #255	; 0xff
 80107f2:	d004      	beq.n	80107fe <_Z10cobsDecodePhhS_+0x52>
				*decode++ = 0;
 80107f4:	69bb      	ldr	r3, [r7, #24]
 80107f6:	1c5a      	adds	r2, r3, #1
 80107f8:	61ba      	str	r2, [r7, #24]
 80107fa:	2200      	movs	r2, #0
 80107fc:	701a      	strb	r2, [r3, #0]
			block = code = *byte++; // Next block length
 80107fe:	69fb      	ldr	r3, [r7, #28]
 8010800:	1c5a      	adds	r2, r3, #1
 8010802:	61fa      	str	r2, [r7, #28]
 8010804:	781b      	ldrb	r3, [r3, #0]
 8010806:	75fb      	strb	r3, [r7, #23]
 8010808:	7dfb      	ldrb	r3, [r7, #23]
 801080a:	75bb      	strb	r3, [r7, #22]
			if (!code) // Delimiter code found
 801080c:	7dfb      	ldrb	r3, [r7, #23]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d003      	beq.n	801081a <_Z10cobsDecodePhhS_+0x6e>
	for (uint8_t code = 0xff, block = 0; byte < buffer + length; --block)
 8010812:	7dbb      	ldrb	r3, [r7, #22]
 8010814:	3b01      	subs	r3, #1
 8010816:	75bb      	strb	r3, [r7, #22]
 8010818:	e7d7      	b.n	80107ca <_Z10cobsDecodePhhS_+0x1e>
				break;
 801081a:	bf00      	nop
		}
	}

	return (uint8_t)(decode - (uint8_t *)data);
 801081c:	69ba      	ldr	r2, [r7, #24]
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	1ad3      	subs	r3, r2, r3
 8010822:	b2db      	uxtb	r3, r3
}
 8010824:	4618      	mov	r0, r3
 8010826:	3724      	adds	r7, #36	; 0x24
 8010828:	46bd      	mov	sp, r7
 801082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082e:	4770      	bx	lr

08010830 <_Z17cobsDecodeInPlacePhh>:



uint8_t cobsDecodeInPlace(uint8_t *buffer, uint8_t length)
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b084      	sub	sp, #16
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
 8010838:	460b      	mov	r3, r1
 801083a:	70fb      	strb	r3, [r7, #3]
	uint8_t decode_len = cobsDecode(buffer, length, cobsDecodeBuffer);
 801083c:	78fb      	ldrb	r3, [r7, #3]
 801083e:	4a0f      	ldr	r2, [pc, #60]	; (801087c <_Z17cobsDecodeInPlacePhh+0x4c>)
 8010840:	4619      	mov	r1, r3
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f7ff ffb2 	bl	80107ac <_Z10cobsDecodePhhS_>
 8010848:	4603      	mov	r3, r0
 801084a:	72fb      	strb	r3, [r7, #11]

	for (int i = 0; i<decode_len; i++){
 801084c:	2300      	movs	r3, #0
 801084e:	60fb      	str	r3, [r7, #12]
 8010850:	7afb      	ldrb	r3, [r7, #11]
 8010852:	68fa      	ldr	r2, [r7, #12]
 8010854:	429a      	cmp	r2, r3
 8010856:	da0b      	bge.n	8010870 <_Z17cobsDecodeInPlacePhh+0x40>
		buffer[i] = cobsDecodeBuffer[i];
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	687a      	ldr	r2, [r7, #4]
 801085c:	4413      	add	r3, r2
 801085e:	4907      	ldr	r1, [pc, #28]	; (801087c <_Z17cobsDecodeInPlacePhh+0x4c>)
 8010860:	68fa      	ldr	r2, [r7, #12]
 8010862:	440a      	add	r2, r1
 8010864:	7812      	ldrb	r2, [r2, #0]
 8010866:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<decode_len; i++){
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	3301      	adds	r3, #1
 801086c:	60fb      	str	r3, [r7, #12]
 801086e:	e7ef      	b.n	8010850 <_Z17cobsDecodeInPlacePhh+0x20>
	}

	return decode_len;
 8010870:	7afb      	ldrb	r3, [r7, #11]
}
 8010872:	4618      	mov	r0, r3
 8010874:	3710      	adds	r7, #16
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}
 801087a:	bf00      	nop
 801087c:	2400c6d8 	.word	0x2400c6d8

08010880 <_Z18bytearray_to_int16Ph>:
uint16_t bytearray_to_uint16(uint8_t *bytearray) {
	uint16_t out = bytearray[1] << 8 | bytearray[0];
	return out;
}

int16_t bytearray_to_int16(uint8_t *bytearray) {
 8010880:	b480      	push	{r7}
 8010882:	b085      	sub	sp, #20
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
	int16_t out = bytearray[1] << 8 | bytearray[0];
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	3301      	adds	r3, #1
 801088c:	781b      	ldrb	r3, [r3, #0]
 801088e:	021b      	lsls	r3, r3, #8
 8010890:	b21a      	sxth	r2, r3
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	781b      	ldrb	r3, [r3, #0]
 8010896:	b21b      	sxth	r3, r3
 8010898:	4313      	orrs	r3, r2
 801089a:	81fb      	strh	r3, [r7, #14]
	return out;
 801089c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80108a0:	4618      	mov	r0, r3
 80108a2:	3714      	adds	r7, #20
 80108a4:	46bd      	mov	sp, r7
 80108a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108aa:	4770      	bx	lr

080108ac <_Z17core_ErrorHandleri>:
 */


#include "core_errors.h"

void core_ErrorHandler(int error_id) {
 80108ac:	b480      	push	{r7}
 80108ae:	b083      	sub	sp, #12
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
	while(1);
 80108b4:	e7fe      	b.n	80108b4 <_Z17core_ErrorHandleri+0x8>

080108b6 <_ZN19core_utils_CallbackC1Ev>:


#include "core_utils_Callback.h"


core_utils_Callback::core_utils_Callback() {
 80108b6:	b480      	push	{r7}
 80108b8:	b083      	sub	sp, #12
 80108ba:	af00      	add	r7, sp, #0
 80108bc:	6078      	str	r0, [r7, #4]
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	2200      	movs	r2, #0
 80108c2:	721a      	strb	r2, [r3, #8]

}
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	4618      	mov	r0, r3
 80108c8:	370c      	adds	r7, #12
 80108ca:	46bd      	mov	sp, r7
 80108cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d0:	4770      	bx	lr

080108d2 <_ZN19core_utils_Callback4callEPv>:

void core_utils_Callback::call() {
	this->callback(NULL, this->params);
}

void core_utils_Callback::call(void *argument) {
 80108d2:	b580      	push	{r7, lr}
 80108d4:	b082      	sub	sp, #8
 80108d6:	af00      	add	r7, sp, #0
 80108d8:	6078      	str	r0, [r7, #4]
 80108da:	6039      	str	r1, [r7, #0]
	this->callback(argument, this->params);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	687a      	ldr	r2, [r7, #4]
 80108e2:	6852      	ldr	r2, [r2, #4]
 80108e4:	4611      	mov	r1, r2
 80108e6:	6838      	ldr	r0, [r7, #0]
 80108e8:	4798      	blx	r3
}
 80108ea:	bf00      	nop
 80108ec:	3708      	adds	r7, #8
 80108ee:	46bd      	mov	sp, r7
 80108f0:	bd80      	pop	{r7, pc}
	...

080108f4 <__errno>:
 80108f4:	4b01      	ldr	r3, [pc, #4]	; (80108fc <__errno+0x8>)
 80108f6:	6818      	ldr	r0, [r3, #0]
 80108f8:	4770      	bx	lr
 80108fa:	bf00      	nop
 80108fc:	2400002c 	.word	0x2400002c

08010900 <std>:
 8010900:	2300      	movs	r3, #0
 8010902:	b510      	push	{r4, lr}
 8010904:	4604      	mov	r4, r0
 8010906:	e9c0 3300 	strd	r3, r3, [r0]
 801090a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801090e:	6083      	str	r3, [r0, #8]
 8010910:	8181      	strh	r1, [r0, #12]
 8010912:	6643      	str	r3, [r0, #100]	; 0x64
 8010914:	81c2      	strh	r2, [r0, #14]
 8010916:	6183      	str	r3, [r0, #24]
 8010918:	4619      	mov	r1, r3
 801091a:	2208      	movs	r2, #8
 801091c:	305c      	adds	r0, #92	; 0x5c
 801091e:	f000 f91a 	bl	8010b56 <memset>
 8010922:	4b05      	ldr	r3, [pc, #20]	; (8010938 <std+0x38>)
 8010924:	6263      	str	r3, [r4, #36]	; 0x24
 8010926:	4b05      	ldr	r3, [pc, #20]	; (801093c <std+0x3c>)
 8010928:	62a3      	str	r3, [r4, #40]	; 0x28
 801092a:	4b05      	ldr	r3, [pc, #20]	; (8010940 <std+0x40>)
 801092c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801092e:	4b05      	ldr	r3, [pc, #20]	; (8010944 <std+0x44>)
 8010930:	6224      	str	r4, [r4, #32]
 8010932:	6323      	str	r3, [r4, #48]	; 0x30
 8010934:	bd10      	pop	{r4, pc}
 8010936:	bf00      	nop
 8010938:	08011609 	.word	0x08011609
 801093c:	0801162b 	.word	0x0801162b
 8010940:	08011663 	.word	0x08011663
 8010944:	08011687 	.word	0x08011687

08010948 <_cleanup_r>:
 8010948:	4901      	ldr	r1, [pc, #4]	; (8010950 <_cleanup_r+0x8>)
 801094a:	f000 b8af 	b.w	8010aac <_fwalk_reent>
 801094e:	bf00      	nop
 8010950:	080123d9 	.word	0x080123d9

08010954 <__sfmoreglue>:
 8010954:	b570      	push	{r4, r5, r6, lr}
 8010956:	2268      	movs	r2, #104	; 0x68
 8010958:	1e4d      	subs	r5, r1, #1
 801095a:	4355      	muls	r5, r2
 801095c:	460e      	mov	r6, r1
 801095e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010962:	f000 f921 	bl	8010ba8 <_malloc_r>
 8010966:	4604      	mov	r4, r0
 8010968:	b140      	cbz	r0, 801097c <__sfmoreglue+0x28>
 801096a:	2100      	movs	r1, #0
 801096c:	e9c0 1600 	strd	r1, r6, [r0]
 8010970:	300c      	adds	r0, #12
 8010972:	60a0      	str	r0, [r4, #8]
 8010974:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010978:	f000 f8ed 	bl	8010b56 <memset>
 801097c:	4620      	mov	r0, r4
 801097e:	bd70      	pop	{r4, r5, r6, pc}

08010980 <__sfp_lock_acquire>:
 8010980:	4801      	ldr	r0, [pc, #4]	; (8010988 <__sfp_lock_acquire+0x8>)
 8010982:	f000 b8d8 	b.w	8010b36 <__retarget_lock_acquire_recursive>
 8010986:	bf00      	nop
 8010988:	2400c7d9 	.word	0x2400c7d9

0801098c <__sfp_lock_release>:
 801098c:	4801      	ldr	r0, [pc, #4]	; (8010994 <__sfp_lock_release+0x8>)
 801098e:	f000 b8d3 	b.w	8010b38 <__retarget_lock_release_recursive>
 8010992:	bf00      	nop
 8010994:	2400c7d9 	.word	0x2400c7d9

08010998 <__sinit_lock_acquire>:
 8010998:	4801      	ldr	r0, [pc, #4]	; (80109a0 <__sinit_lock_acquire+0x8>)
 801099a:	f000 b8cc 	b.w	8010b36 <__retarget_lock_acquire_recursive>
 801099e:	bf00      	nop
 80109a0:	2400c7da 	.word	0x2400c7da

080109a4 <__sinit_lock_release>:
 80109a4:	4801      	ldr	r0, [pc, #4]	; (80109ac <__sinit_lock_release+0x8>)
 80109a6:	f000 b8c7 	b.w	8010b38 <__retarget_lock_release_recursive>
 80109aa:	bf00      	nop
 80109ac:	2400c7da 	.word	0x2400c7da

080109b0 <__sinit>:
 80109b0:	b510      	push	{r4, lr}
 80109b2:	4604      	mov	r4, r0
 80109b4:	f7ff fff0 	bl	8010998 <__sinit_lock_acquire>
 80109b8:	69a3      	ldr	r3, [r4, #24]
 80109ba:	b11b      	cbz	r3, 80109c4 <__sinit+0x14>
 80109bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109c0:	f7ff bff0 	b.w	80109a4 <__sinit_lock_release>
 80109c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80109c8:	6523      	str	r3, [r4, #80]	; 0x50
 80109ca:	4b13      	ldr	r3, [pc, #76]	; (8010a18 <__sinit+0x68>)
 80109cc:	4a13      	ldr	r2, [pc, #76]	; (8010a1c <__sinit+0x6c>)
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80109d2:	42a3      	cmp	r3, r4
 80109d4:	bf04      	itt	eq
 80109d6:	2301      	moveq	r3, #1
 80109d8:	61a3      	streq	r3, [r4, #24]
 80109da:	4620      	mov	r0, r4
 80109dc:	f000 f820 	bl	8010a20 <__sfp>
 80109e0:	6060      	str	r0, [r4, #4]
 80109e2:	4620      	mov	r0, r4
 80109e4:	f000 f81c 	bl	8010a20 <__sfp>
 80109e8:	60a0      	str	r0, [r4, #8]
 80109ea:	4620      	mov	r0, r4
 80109ec:	f000 f818 	bl	8010a20 <__sfp>
 80109f0:	2200      	movs	r2, #0
 80109f2:	60e0      	str	r0, [r4, #12]
 80109f4:	2104      	movs	r1, #4
 80109f6:	6860      	ldr	r0, [r4, #4]
 80109f8:	f7ff ff82 	bl	8010900 <std>
 80109fc:	68a0      	ldr	r0, [r4, #8]
 80109fe:	2201      	movs	r2, #1
 8010a00:	2109      	movs	r1, #9
 8010a02:	f7ff ff7d 	bl	8010900 <std>
 8010a06:	68e0      	ldr	r0, [r4, #12]
 8010a08:	2202      	movs	r2, #2
 8010a0a:	2112      	movs	r1, #18
 8010a0c:	f7ff ff78 	bl	8010900 <std>
 8010a10:	2301      	movs	r3, #1
 8010a12:	61a3      	str	r3, [r4, #24]
 8010a14:	e7d2      	b.n	80109bc <__sinit+0xc>
 8010a16:	bf00      	nop
 8010a18:	080134dc 	.word	0x080134dc
 8010a1c:	08010949 	.word	0x08010949

08010a20 <__sfp>:
 8010a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a22:	4607      	mov	r7, r0
 8010a24:	f7ff ffac 	bl	8010980 <__sfp_lock_acquire>
 8010a28:	4b1e      	ldr	r3, [pc, #120]	; (8010aa4 <__sfp+0x84>)
 8010a2a:	681e      	ldr	r6, [r3, #0]
 8010a2c:	69b3      	ldr	r3, [r6, #24]
 8010a2e:	b913      	cbnz	r3, 8010a36 <__sfp+0x16>
 8010a30:	4630      	mov	r0, r6
 8010a32:	f7ff ffbd 	bl	80109b0 <__sinit>
 8010a36:	3648      	adds	r6, #72	; 0x48
 8010a38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010a3c:	3b01      	subs	r3, #1
 8010a3e:	d503      	bpl.n	8010a48 <__sfp+0x28>
 8010a40:	6833      	ldr	r3, [r6, #0]
 8010a42:	b30b      	cbz	r3, 8010a88 <__sfp+0x68>
 8010a44:	6836      	ldr	r6, [r6, #0]
 8010a46:	e7f7      	b.n	8010a38 <__sfp+0x18>
 8010a48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010a4c:	b9d5      	cbnz	r5, 8010a84 <__sfp+0x64>
 8010a4e:	4b16      	ldr	r3, [pc, #88]	; (8010aa8 <__sfp+0x88>)
 8010a50:	60e3      	str	r3, [r4, #12]
 8010a52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010a56:	6665      	str	r5, [r4, #100]	; 0x64
 8010a58:	f000 f86c 	bl	8010b34 <__retarget_lock_init_recursive>
 8010a5c:	f7ff ff96 	bl	801098c <__sfp_lock_release>
 8010a60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010a64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010a68:	6025      	str	r5, [r4, #0]
 8010a6a:	61a5      	str	r5, [r4, #24]
 8010a6c:	2208      	movs	r2, #8
 8010a6e:	4629      	mov	r1, r5
 8010a70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010a74:	f000 f86f 	bl	8010b56 <memset>
 8010a78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010a7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010a80:	4620      	mov	r0, r4
 8010a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a84:	3468      	adds	r4, #104	; 0x68
 8010a86:	e7d9      	b.n	8010a3c <__sfp+0x1c>
 8010a88:	2104      	movs	r1, #4
 8010a8a:	4638      	mov	r0, r7
 8010a8c:	f7ff ff62 	bl	8010954 <__sfmoreglue>
 8010a90:	4604      	mov	r4, r0
 8010a92:	6030      	str	r0, [r6, #0]
 8010a94:	2800      	cmp	r0, #0
 8010a96:	d1d5      	bne.n	8010a44 <__sfp+0x24>
 8010a98:	f7ff ff78 	bl	801098c <__sfp_lock_release>
 8010a9c:	230c      	movs	r3, #12
 8010a9e:	603b      	str	r3, [r7, #0]
 8010aa0:	e7ee      	b.n	8010a80 <__sfp+0x60>
 8010aa2:	bf00      	nop
 8010aa4:	080134dc 	.word	0x080134dc
 8010aa8:	ffff0001 	.word	0xffff0001

08010aac <_fwalk_reent>:
 8010aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ab0:	4606      	mov	r6, r0
 8010ab2:	4688      	mov	r8, r1
 8010ab4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010ab8:	2700      	movs	r7, #0
 8010aba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010abe:	f1b9 0901 	subs.w	r9, r9, #1
 8010ac2:	d505      	bpl.n	8010ad0 <_fwalk_reent+0x24>
 8010ac4:	6824      	ldr	r4, [r4, #0]
 8010ac6:	2c00      	cmp	r4, #0
 8010ac8:	d1f7      	bne.n	8010aba <_fwalk_reent+0xe>
 8010aca:	4638      	mov	r0, r7
 8010acc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ad0:	89ab      	ldrh	r3, [r5, #12]
 8010ad2:	2b01      	cmp	r3, #1
 8010ad4:	d907      	bls.n	8010ae6 <_fwalk_reent+0x3a>
 8010ad6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010ada:	3301      	adds	r3, #1
 8010adc:	d003      	beq.n	8010ae6 <_fwalk_reent+0x3a>
 8010ade:	4629      	mov	r1, r5
 8010ae0:	4630      	mov	r0, r6
 8010ae2:	47c0      	blx	r8
 8010ae4:	4307      	orrs	r7, r0
 8010ae6:	3568      	adds	r5, #104	; 0x68
 8010ae8:	e7e9      	b.n	8010abe <_fwalk_reent+0x12>
	...

08010aec <__libc_init_array>:
 8010aec:	b570      	push	{r4, r5, r6, lr}
 8010aee:	4d0d      	ldr	r5, [pc, #52]	; (8010b24 <__libc_init_array+0x38>)
 8010af0:	4c0d      	ldr	r4, [pc, #52]	; (8010b28 <__libc_init_array+0x3c>)
 8010af2:	1b64      	subs	r4, r4, r5
 8010af4:	10a4      	asrs	r4, r4, #2
 8010af6:	2600      	movs	r6, #0
 8010af8:	42a6      	cmp	r6, r4
 8010afa:	d109      	bne.n	8010b10 <__libc_init_array+0x24>
 8010afc:	4d0b      	ldr	r5, [pc, #44]	; (8010b2c <__libc_init_array+0x40>)
 8010afe:	4c0c      	ldr	r4, [pc, #48]	; (8010b30 <__libc_init_array+0x44>)
 8010b00:	f002 fc04 	bl	801330c <_init>
 8010b04:	1b64      	subs	r4, r4, r5
 8010b06:	10a4      	asrs	r4, r4, #2
 8010b08:	2600      	movs	r6, #0
 8010b0a:	42a6      	cmp	r6, r4
 8010b0c:	d105      	bne.n	8010b1a <__libc_init_array+0x2e>
 8010b0e:	bd70      	pop	{r4, r5, r6, pc}
 8010b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b14:	4798      	blx	r3
 8010b16:	3601      	adds	r6, #1
 8010b18:	e7ee      	b.n	8010af8 <__libc_init_array+0xc>
 8010b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b1e:	4798      	blx	r3
 8010b20:	3601      	adds	r6, #1
 8010b22:	e7f2      	b.n	8010b0a <__libc_init_array+0x1e>
 8010b24:	0801385c 	.word	0x0801385c
 8010b28:	0801385c 	.word	0x0801385c
 8010b2c:	0801385c 	.word	0x0801385c
 8010b30:	0801386c 	.word	0x0801386c

08010b34 <__retarget_lock_init_recursive>:
 8010b34:	4770      	bx	lr

08010b36 <__retarget_lock_acquire_recursive>:
 8010b36:	4770      	bx	lr

08010b38 <__retarget_lock_release_recursive>:
 8010b38:	4770      	bx	lr

08010b3a <memcpy>:
 8010b3a:	440a      	add	r2, r1
 8010b3c:	4291      	cmp	r1, r2
 8010b3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8010b42:	d100      	bne.n	8010b46 <memcpy+0xc>
 8010b44:	4770      	bx	lr
 8010b46:	b510      	push	{r4, lr}
 8010b48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b50:	4291      	cmp	r1, r2
 8010b52:	d1f9      	bne.n	8010b48 <memcpy+0xe>
 8010b54:	bd10      	pop	{r4, pc}

08010b56 <memset>:
 8010b56:	4402      	add	r2, r0
 8010b58:	4603      	mov	r3, r0
 8010b5a:	4293      	cmp	r3, r2
 8010b5c:	d100      	bne.n	8010b60 <memset+0xa>
 8010b5e:	4770      	bx	lr
 8010b60:	f803 1b01 	strb.w	r1, [r3], #1
 8010b64:	e7f9      	b.n	8010b5a <memset+0x4>
	...

08010b68 <sbrk_aligned>:
 8010b68:	b570      	push	{r4, r5, r6, lr}
 8010b6a:	4e0e      	ldr	r6, [pc, #56]	; (8010ba4 <sbrk_aligned+0x3c>)
 8010b6c:	460c      	mov	r4, r1
 8010b6e:	6831      	ldr	r1, [r6, #0]
 8010b70:	4605      	mov	r5, r0
 8010b72:	b911      	cbnz	r1, 8010b7a <sbrk_aligned+0x12>
 8010b74:	f000 fd38 	bl	80115e8 <_sbrk_r>
 8010b78:	6030      	str	r0, [r6, #0]
 8010b7a:	4621      	mov	r1, r4
 8010b7c:	4628      	mov	r0, r5
 8010b7e:	f000 fd33 	bl	80115e8 <_sbrk_r>
 8010b82:	1c43      	adds	r3, r0, #1
 8010b84:	d00a      	beq.n	8010b9c <sbrk_aligned+0x34>
 8010b86:	1cc4      	adds	r4, r0, #3
 8010b88:	f024 0403 	bic.w	r4, r4, #3
 8010b8c:	42a0      	cmp	r0, r4
 8010b8e:	d007      	beq.n	8010ba0 <sbrk_aligned+0x38>
 8010b90:	1a21      	subs	r1, r4, r0
 8010b92:	4628      	mov	r0, r5
 8010b94:	f000 fd28 	bl	80115e8 <_sbrk_r>
 8010b98:	3001      	adds	r0, #1
 8010b9a:	d101      	bne.n	8010ba0 <sbrk_aligned+0x38>
 8010b9c:	f04f 34ff 	mov.w	r4, #4294967295
 8010ba0:	4620      	mov	r0, r4
 8010ba2:	bd70      	pop	{r4, r5, r6, pc}
 8010ba4:	2400c7e0 	.word	0x2400c7e0

08010ba8 <_malloc_r>:
 8010ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bac:	1ccd      	adds	r5, r1, #3
 8010bae:	f025 0503 	bic.w	r5, r5, #3
 8010bb2:	3508      	adds	r5, #8
 8010bb4:	2d0c      	cmp	r5, #12
 8010bb6:	bf38      	it	cc
 8010bb8:	250c      	movcc	r5, #12
 8010bba:	2d00      	cmp	r5, #0
 8010bbc:	4607      	mov	r7, r0
 8010bbe:	db01      	blt.n	8010bc4 <_malloc_r+0x1c>
 8010bc0:	42a9      	cmp	r1, r5
 8010bc2:	d905      	bls.n	8010bd0 <_malloc_r+0x28>
 8010bc4:	230c      	movs	r3, #12
 8010bc6:	603b      	str	r3, [r7, #0]
 8010bc8:	2600      	movs	r6, #0
 8010bca:	4630      	mov	r0, r6
 8010bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bd0:	4e2e      	ldr	r6, [pc, #184]	; (8010c8c <_malloc_r+0xe4>)
 8010bd2:	f001 fc5b 	bl	801248c <__malloc_lock>
 8010bd6:	6833      	ldr	r3, [r6, #0]
 8010bd8:	461c      	mov	r4, r3
 8010bda:	bb34      	cbnz	r4, 8010c2a <_malloc_r+0x82>
 8010bdc:	4629      	mov	r1, r5
 8010bde:	4638      	mov	r0, r7
 8010be0:	f7ff ffc2 	bl	8010b68 <sbrk_aligned>
 8010be4:	1c43      	adds	r3, r0, #1
 8010be6:	4604      	mov	r4, r0
 8010be8:	d14d      	bne.n	8010c86 <_malloc_r+0xde>
 8010bea:	6834      	ldr	r4, [r6, #0]
 8010bec:	4626      	mov	r6, r4
 8010bee:	2e00      	cmp	r6, #0
 8010bf0:	d140      	bne.n	8010c74 <_malloc_r+0xcc>
 8010bf2:	6823      	ldr	r3, [r4, #0]
 8010bf4:	4631      	mov	r1, r6
 8010bf6:	4638      	mov	r0, r7
 8010bf8:	eb04 0803 	add.w	r8, r4, r3
 8010bfc:	f000 fcf4 	bl	80115e8 <_sbrk_r>
 8010c00:	4580      	cmp	r8, r0
 8010c02:	d13a      	bne.n	8010c7a <_malloc_r+0xd2>
 8010c04:	6821      	ldr	r1, [r4, #0]
 8010c06:	3503      	adds	r5, #3
 8010c08:	1a6d      	subs	r5, r5, r1
 8010c0a:	f025 0503 	bic.w	r5, r5, #3
 8010c0e:	3508      	adds	r5, #8
 8010c10:	2d0c      	cmp	r5, #12
 8010c12:	bf38      	it	cc
 8010c14:	250c      	movcc	r5, #12
 8010c16:	4629      	mov	r1, r5
 8010c18:	4638      	mov	r0, r7
 8010c1a:	f7ff ffa5 	bl	8010b68 <sbrk_aligned>
 8010c1e:	3001      	adds	r0, #1
 8010c20:	d02b      	beq.n	8010c7a <_malloc_r+0xd2>
 8010c22:	6823      	ldr	r3, [r4, #0]
 8010c24:	442b      	add	r3, r5
 8010c26:	6023      	str	r3, [r4, #0]
 8010c28:	e00e      	b.n	8010c48 <_malloc_r+0xa0>
 8010c2a:	6822      	ldr	r2, [r4, #0]
 8010c2c:	1b52      	subs	r2, r2, r5
 8010c2e:	d41e      	bmi.n	8010c6e <_malloc_r+0xc6>
 8010c30:	2a0b      	cmp	r2, #11
 8010c32:	d916      	bls.n	8010c62 <_malloc_r+0xba>
 8010c34:	1961      	adds	r1, r4, r5
 8010c36:	42a3      	cmp	r3, r4
 8010c38:	6025      	str	r5, [r4, #0]
 8010c3a:	bf18      	it	ne
 8010c3c:	6059      	strne	r1, [r3, #4]
 8010c3e:	6863      	ldr	r3, [r4, #4]
 8010c40:	bf08      	it	eq
 8010c42:	6031      	streq	r1, [r6, #0]
 8010c44:	5162      	str	r2, [r4, r5]
 8010c46:	604b      	str	r3, [r1, #4]
 8010c48:	4638      	mov	r0, r7
 8010c4a:	f104 060b 	add.w	r6, r4, #11
 8010c4e:	f001 fc23 	bl	8012498 <__malloc_unlock>
 8010c52:	f026 0607 	bic.w	r6, r6, #7
 8010c56:	1d23      	adds	r3, r4, #4
 8010c58:	1af2      	subs	r2, r6, r3
 8010c5a:	d0b6      	beq.n	8010bca <_malloc_r+0x22>
 8010c5c:	1b9b      	subs	r3, r3, r6
 8010c5e:	50a3      	str	r3, [r4, r2]
 8010c60:	e7b3      	b.n	8010bca <_malloc_r+0x22>
 8010c62:	6862      	ldr	r2, [r4, #4]
 8010c64:	42a3      	cmp	r3, r4
 8010c66:	bf0c      	ite	eq
 8010c68:	6032      	streq	r2, [r6, #0]
 8010c6a:	605a      	strne	r2, [r3, #4]
 8010c6c:	e7ec      	b.n	8010c48 <_malloc_r+0xa0>
 8010c6e:	4623      	mov	r3, r4
 8010c70:	6864      	ldr	r4, [r4, #4]
 8010c72:	e7b2      	b.n	8010bda <_malloc_r+0x32>
 8010c74:	4634      	mov	r4, r6
 8010c76:	6876      	ldr	r6, [r6, #4]
 8010c78:	e7b9      	b.n	8010bee <_malloc_r+0x46>
 8010c7a:	230c      	movs	r3, #12
 8010c7c:	603b      	str	r3, [r7, #0]
 8010c7e:	4638      	mov	r0, r7
 8010c80:	f001 fc0a 	bl	8012498 <__malloc_unlock>
 8010c84:	e7a1      	b.n	8010bca <_malloc_r+0x22>
 8010c86:	6025      	str	r5, [r4, #0]
 8010c88:	e7de      	b.n	8010c48 <_malloc_r+0xa0>
 8010c8a:	bf00      	nop
 8010c8c:	2400c7dc 	.word	0x2400c7dc

08010c90 <__cvt>:
 8010c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c92:	ed2d 8b02 	vpush	{d8}
 8010c96:	eeb0 8b40 	vmov.f64	d8, d0
 8010c9a:	b085      	sub	sp, #20
 8010c9c:	4617      	mov	r7, r2
 8010c9e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010ca0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010ca2:	ee18 2a90 	vmov	r2, s17
 8010ca6:	f025 0520 	bic.w	r5, r5, #32
 8010caa:	2a00      	cmp	r2, #0
 8010cac:	bfb6      	itet	lt
 8010cae:	222d      	movlt	r2, #45	; 0x2d
 8010cb0:	2200      	movge	r2, #0
 8010cb2:	eeb1 8b40 	vneglt.f64	d8, d0
 8010cb6:	2d46      	cmp	r5, #70	; 0x46
 8010cb8:	460c      	mov	r4, r1
 8010cba:	701a      	strb	r2, [r3, #0]
 8010cbc:	d004      	beq.n	8010cc8 <__cvt+0x38>
 8010cbe:	2d45      	cmp	r5, #69	; 0x45
 8010cc0:	d100      	bne.n	8010cc4 <__cvt+0x34>
 8010cc2:	3401      	adds	r4, #1
 8010cc4:	2102      	movs	r1, #2
 8010cc6:	e000      	b.n	8010cca <__cvt+0x3a>
 8010cc8:	2103      	movs	r1, #3
 8010cca:	ab03      	add	r3, sp, #12
 8010ccc:	9301      	str	r3, [sp, #4]
 8010cce:	ab02      	add	r3, sp, #8
 8010cd0:	9300      	str	r3, [sp, #0]
 8010cd2:	4622      	mov	r2, r4
 8010cd4:	4633      	mov	r3, r6
 8010cd6:	eeb0 0b48 	vmov.f64	d0, d8
 8010cda:	f000 fd89 	bl	80117f0 <_dtoa_r>
 8010cde:	2d47      	cmp	r5, #71	; 0x47
 8010ce0:	d101      	bne.n	8010ce6 <__cvt+0x56>
 8010ce2:	07fb      	lsls	r3, r7, #31
 8010ce4:	d51a      	bpl.n	8010d1c <__cvt+0x8c>
 8010ce6:	2d46      	cmp	r5, #70	; 0x46
 8010ce8:	eb00 0204 	add.w	r2, r0, r4
 8010cec:	d10c      	bne.n	8010d08 <__cvt+0x78>
 8010cee:	7803      	ldrb	r3, [r0, #0]
 8010cf0:	2b30      	cmp	r3, #48	; 0x30
 8010cf2:	d107      	bne.n	8010d04 <__cvt+0x74>
 8010cf4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cfc:	bf1c      	itt	ne
 8010cfe:	f1c4 0401 	rsbne	r4, r4, #1
 8010d02:	6034      	strne	r4, [r6, #0]
 8010d04:	6833      	ldr	r3, [r6, #0]
 8010d06:	441a      	add	r2, r3
 8010d08:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d10:	bf08      	it	eq
 8010d12:	9203      	streq	r2, [sp, #12]
 8010d14:	2130      	movs	r1, #48	; 0x30
 8010d16:	9b03      	ldr	r3, [sp, #12]
 8010d18:	4293      	cmp	r3, r2
 8010d1a:	d307      	bcc.n	8010d2c <__cvt+0x9c>
 8010d1c:	9b03      	ldr	r3, [sp, #12]
 8010d1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010d20:	1a1b      	subs	r3, r3, r0
 8010d22:	6013      	str	r3, [r2, #0]
 8010d24:	b005      	add	sp, #20
 8010d26:	ecbd 8b02 	vpop	{d8}
 8010d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d2c:	1c5c      	adds	r4, r3, #1
 8010d2e:	9403      	str	r4, [sp, #12]
 8010d30:	7019      	strb	r1, [r3, #0]
 8010d32:	e7f0      	b.n	8010d16 <__cvt+0x86>

08010d34 <__exponent>:
 8010d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d36:	4603      	mov	r3, r0
 8010d38:	2900      	cmp	r1, #0
 8010d3a:	bfb8      	it	lt
 8010d3c:	4249      	neglt	r1, r1
 8010d3e:	f803 2b02 	strb.w	r2, [r3], #2
 8010d42:	bfb4      	ite	lt
 8010d44:	222d      	movlt	r2, #45	; 0x2d
 8010d46:	222b      	movge	r2, #43	; 0x2b
 8010d48:	2909      	cmp	r1, #9
 8010d4a:	7042      	strb	r2, [r0, #1]
 8010d4c:	dd2a      	ble.n	8010da4 <__exponent+0x70>
 8010d4e:	f10d 0407 	add.w	r4, sp, #7
 8010d52:	46a4      	mov	ip, r4
 8010d54:	270a      	movs	r7, #10
 8010d56:	46a6      	mov	lr, r4
 8010d58:	460a      	mov	r2, r1
 8010d5a:	fb91 f6f7 	sdiv	r6, r1, r7
 8010d5e:	fb07 1516 	mls	r5, r7, r6, r1
 8010d62:	3530      	adds	r5, #48	; 0x30
 8010d64:	2a63      	cmp	r2, #99	; 0x63
 8010d66:	f104 34ff 	add.w	r4, r4, #4294967295
 8010d6a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010d6e:	4631      	mov	r1, r6
 8010d70:	dcf1      	bgt.n	8010d56 <__exponent+0x22>
 8010d72:	3130      	adds	r1, #48	; 0x30
 8010d74:	f1ae 0502 	sub.w	r5, lr, #2
 8010d78:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010d7c:	1c44      	adds	r4, r0, #1
 8010d7e:	4629      	mov	r1, r5
 8010d80:	4561      	cmp	r1, ip
 8010d82:	d30a      	bcc.n	8010d9a <__exponent+0x66>
 8010d84:	f10d 0209 	add.w	r2, sp, #9
 8010d88:	eba2 020e 	sub.w	r2, r2, lr
 8010d8c:	4565      	cmp	r5, ip
 8010d8e:	bf88      	it	hi
 8010d90:	2200      	movhi	r2, #0
 8010d92:	4413      	add	r3, r2
 8010d94:	1a18      	subs	r0, r3, r0
 8010d96:	b003      	add	sp, #12
 8010d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d9e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010da2:	e7ed      	b.n	8010d80 <__exponent+0x4c>
 8010da4:	2330      	movs	r3, #48	; 0x30
 8010da6:	3130      	adds	r1, #48	; 0x30
 8010da8:	7083      	strb	r3, [r0, #2]
 8010daa:	70c1      	strb	r1, [r0, #3]
 8010dac:	1d03      	adds	r3, r0, #4
 8010dae:	e7f1      	b.n	8010d94 <__exponent+0x60>

08010db0 <_printf_float>:
 8010db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010db4:	b08b      	sub	sp, #44	; 0x2c
 8010db6:	460c      	mov	r4, r1
 8010db8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8010dbc:	4616      	mov	r6, r2
 8010dbe:	461f      	mov	r7, r3
 8010dc0:	4605      	mov	r5, r0
 8010dc2:	f001 fb45 	bl	8012450 <_localeconv_r>
 8010dc6:	f8d0 b000 	ldr.w	fp, [r0]
 8010dca:	4658      	mov	r0, fp
 8010dcc:	f7ef fa88 	bl	80002e0 <strlen>
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	9308      	str	r3, [sp, #32]
 8010dd4:	f8d8 3000 	ldr.w	r3, [r8]
 8010dd8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010ddc:	6822      	ldr	r2, [r4, #0]
 8010dde:	3307      	adds	r3, #7
 8010de0:	f023 0307 	bic.w	r3, r3, #7
 8010de4:	f103 0108 	add.w	r1, r3, #8
 8010de8:	f8c8 1000 	str.w	r1, [r8]
 8010dec:	4682      	mov	sl, r0
 8010dee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010df2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8010df6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8011058 <_printf_float+0x2a8>
 8010dfa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8010dfe:	eeb0 6bc0 	vabs.f64	d6, d0
 8010e02:	eeb4 6b47 	vcmp.f64	d6, d7
 8010e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e0a:	dd24      	ble.n	8010e56 <_printf_float+0xa6>
 8010e0c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e14:	d502      	bpl.n	8010e1c <_printf_float+0x6c>
 8010e16:	232d      	movs	r3, #45	; 0x2d
 8010e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e1c:	4b90      	ldr	r3, [pc, #576]	; (8011060 <_printf_float+0x2b0>)
 8010e1e:	4891      	ldr	r0, [pc, #580]	; (8011064 <_printf_float+0x2b4>)
 8010e20:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010e24:	bf94      	ite	ls
 8010e26:	4698      	movls	r8, r3
 8010e28:	4680      	movhi	r8, r0
 8010e2a:	2303      	movs	r3, #3
 8010e2c:	6123      	str	r3, [r4, #16]
 8010e2e:	f022 0204 	bic.w	r2, r2, #4
 8010e32:	2300      	movs	r3, #0
 8010e34:	6022      	str	r2, [r4, #0]
 8010e36:	9304      	str	r3, [sp, #16]
 8010e38:	9700      	str	r7, [sp, #0]
 8010e3a:	4633      	mov	r3, r6
 8010e3c:	aa09      	add	r2, sp, #36	; 0x24
 8010e3e:	4621      	mov	r1, r4
 8010e40:	4628      	mov	r0, r5
 8010e42:	f000 f9d3 	bl	80111ec <_printf_common>
 8010e46:	3001      	adds	r0, #1
 8010e48:	f040 808a 	bne.w	8010f60 <_printf_float+0x1b0>
 8010e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8010e50:	b00b      	add	sp, #44	; 0x2c
 8010e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e56:	eeb4 0b40 	vcmp.f64	d0, d0
 8010e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e5e:	d709      	bvc.n	8010e74 <_printf_float+0xc4>
 8010e60:	ee10 3a90 	vmov	r3, s1
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	bfbc      	itt	lt
 8010e68:	232d      	movlt	r3, #45	; 0x2d
 8010e6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010e6e:	487e      	ldr	r0, [pc, #504]	; (8011068 <_printf_float+0x2b8>)
 8010e70:	4b7e      	ldr	r3, [pc, #504]	; (801106c <_printf_float+0x2bc>)
 8010e72:	e7d5      	b.n	8010e20 <_printf_float+0x70>
 8010e74:	6863      	ldr	r3, [r4, #4]
 8010e76:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8010e7a:	9104      	str	r1, [sp, #16]
 8010e7c:	1c59      	adds	r1, r3, #1
 8010e7e:	d13c      	bne.n	8010efa <_printf_float+0x14a>
 8010e80:	2306      	movs	r3, #6
 8010e82:	6063      	str	r3, [r4, #4]
 8010e84:	2300      	movs	r3, #0
 8010e86:	9303      	str	r3, [sp, #12]
 8010e88:	ab08      	add	r3, sp, #32
 8010e8a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8010e8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010e92:	ab07      	add	r3, sp, #28
 8010e94:	6861      	ldr	r1, [r4, #4]
 8010e96:	9300      	str	r3, [sp, #0]
 8010e98:	6022      	str	r2, [r4, #0]
 8010e9a:	f10d 031b 	add.w	r3, sp, #27
 8010e9e:	4628      	mov	r0, r5
 8010ea0:	f7ff fef6 	bl	8010c90 <__cvt>
 8010ea4:	9b04      	ldr	r3, [sp, #16]
 8010ea6:	9907      	ldr	r1, [sp, #28]
 8010ea8:	2b47      	cmp	r3, #71	; 0x47
 8010eaa:	4680      	mov	r8, r0
 8010eac:	d108      	bne.n	8010ec0 <_printf_float+0x110>
 8010eae:	1cc8      	adds	r0, r1, #3
 8010eb0:	db02      	blt.n	8010eb8 <_printf_float+0x108>
 8010eb2:	6863      	ldr	r3, [r4, #4]
 8010eb4:	4299      	cmp	r1, r3
 8010eb6:	dd41      	ble.n	8010f3c <_printf_float+0x18c>
 8010eb8:	f1a9 0902 	sub.w	r9, r9, #2
 8010ebc:	fa5f f989 	uxtb.w	r9, r9
 8010ec0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010ec4:	d820      	bhi.n	8010f08 <_printf_float+0x158>
 8010ec6:	3901      	subs	r1, #1
 8010ec8:	464a      	mov	r2, r9
 8010eca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010ece:	9107      	str	r1, [sp, #28]
 8010ed0:	f7ff ff30 	bl	8010d34 <__exponent>
 8010ed4:	9a08      	ldr	r2, [sp, #32]
 8010ed6:	9004      	str	r0, [sp, #16]
 8010ed8:	1813      	adds	r3, r2, r0
 8010eda:	2a01      	cmp	r2, #1
 8010edc:	6123      	str	r3, [r4, #16]
 8010ede:	dc02      	bgt.n	8010ee6 <_printf_float+0x136>
 8010ee0:	6822      	ldr	r2, [r4, #0]
 8010ee2:	07d2      	lsls	r2, r2, #31
 8010ee4:	d501      	bpl.n	8010eea <_printf_float+0x13a>
 8010ee6:	3301      	adds	r3, #1
 8010ee8:	6123      	str	r3, [r4, #16]
 8010eea:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d0a2      	beq.n	8010e38 <_printf_float+0x88>
 8010ef2:	232d      	movs	r3, #45	; 0x2d
 8010ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ef8:	e79e      	b.n	8010e38 <_printf_float+0x88>
 8010efa:	9904      	ldr	r1, [sp, #16]
 8010efc:	2947      	cmp	r1, #71	; 0x47
 8010efe:	d1c1      	bne.n	8010e84 <_printf_float+0xd4>
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d1bf      	bne.n	8010e84 <_printf_float+0xd4>
 8010f04:	2301      	movs	r3, #1
 8010f06:	e7bc      	b.n	8010e82 <_printf_float+0xd2>
 8010f08:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8010f0c:	d118      	bne.n	8010f40 <_printf_float+0x190>
 8010f0e:	2900      	cmp	r1, #0
 8010f10:	6863      	ldr	r3, [r4, #4]
 8010f12:	dd0b      	ble.n	8010f2c <_printf_float+0x17c>
 8010f14:	6121      	str	r1, [r4, #16]
 8010f16:	b913      	cbnz	r3, 8010f1e <_printf_float+0x16e>
 8010f18:	6822      	ldr	r2, [r4, #0]
 8010f1a:	07d0      	lsls	r0, r2, #31
 8010f1c:	d502      	bpl.n	8010f24 <_printf_float+0x174>
 8010f1e:	3301      	adds	r3, #1
 8010f20:	440b      	add	r3, r1
 8010f22:	6123      	str	r3, [r4, #16]
 8010f24:	2300      	movs	r3, #0
 8010f26:	65a1      	str	r1, [r4, #88]	; 0x58
 8010f28:	9304      	str	r3, [sp, #16]
 8010f2a:	e7de      	b.n	8010eea <_printf_float+0x13a>
 8010f2c:	b913      	cbnz	r3, 8010f34 <_printf_float+0x184>
 8010f2e:	6822      	ldr	r2, [r4, #0]
 8010f30:	07d2      	lsls	r2, r2, #31
 8010f32:	d501      	bpl.n	8010f38 <_printf_float+0x188>
 8010f34:	3302      	adds	r3, #2
 8010f36:	e7f4      	b.n	8010f22 <_printf_float+0x172>
 8010f38:	2301      	movs	r3, #1
 8010f3a:	e7f2      	b.n	8010f22 <_printf_float+0x172>
 8010f3c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010f40:	9b08      	ldr	r3, [sp, #32]
 8010f42:	4299      	cmp	r1, r3
 8010f44:	db05      	blt.n	8010f52 <_printf_float+0x1a2>
 8010f46:	6823      	ldr	r3, [r4, #0]
 8010f48:	6121      	str	r1, [r4, #16]
 8010f4a:	07d8      	lsls	r0, r3, #31
 8010f4c:	d5ea      	bpl.n	8010f24 <_printf_float+0x174>
 8010f4e:	1c4b      	adds	r3, r1, #1
 8010f50:	e7e7      	b.n	8010f22 <_printf_float+0x172>
 8010f52:	2900      	cmp	r1, #0
 8010f54:	bfd4      	ite	le
 8010f56:	f1c1 0202 	rsble	r2, r1, #2
 8010f5a:	2201      	movgt	r2, #1
 8010f5c:	4413      	add	r3, r2
 8010f5e:	e7e0      	b.n	8010f22 <_printf_float+0x172>
 8010f60:	6823      	ldr	r3, [r4, #0]
 8010f62:	055a      	lsls	r2, r3, #21
 8010f64:	d407      	bmi.n	8010f76 <_printf_float+0x1c6>
 8010f66:	6923      	ldr	r3, [r4, #16]
 8010f68:	4642      	mov	r2, r8
 8010f6a:	4631      	mov	r1, r6
 8010f6c:	4628      	mov	r0, r5
 8010f6e:	47b8      	blx	r7
 8010f70:	3001      	adds	r0, #1
 8010f72:	d12a      	bne.n	8010fca <_printf_float+0x21a>
 8010f74:	e76a      	b.n	8010e4c <_printf_float+0x9c>
 8010f76:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010f7a:	f240 80e2 	bls.w	8011142 <_printf_float+0x392>
 8010f7e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010f82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f8a:	d133      	bne.n	8010ff4 <_printf_float+0x244>
 8010f8c:	4a38      	ldr	r2, [pc, #224]	; (8011070 <_printf_float+0x2c0>)
 8010f8e:	2301      	movs	r3, #1
 8010f90:	4631      	mov	r1, r6
 8010f92:	4628      	mov	r0, r5
 8010f94:	47b8      	blx	r7
 8010f96:	3001      	adds	r0, #1
 8010f98:	f43f af58 	beq.w	8010e4c <_printf_float+0x9c>
 8010f9c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010fa0:	429a      	cmp	r2, r3
 8010fa2:	db02      	blt.n	8010faa <_printf_float+0x1fa>
 8010fa4:	6823      	ldr	r3, [r4, #0]
 8010fa6:	07d8      	lsls	r0, r3, #31
 8010fa8:	d50f      	bpl.n	8010fca <_printf_float+0x21a>
 8010faa:	4653      	mov	r3, sl
 8010fac:	465a      	mov	r2, fp
 8010fae:	4631      	mov	r1, r6
 8010fb0:	4628      	mov	r0, r5
 8010fb2:	47b8      	blx	r7
 8010fb4:	3001      	adds	r0, #1
 8010fb6:	f43f af49 	beq.w	8010e4c <_printf_float+0x9c>
 8010fba:	f04f 0800 	mov.w	r8, #0
 8010fbe:	f104 091a 	add.w	r9, r4, #26
 8010fc2:	9b08      	ldr	r3, [sp, #32]
 8010fc4:	3b01      	subs	r3, #1
 8010fc6:	4543      	cmp	r3, r8
 8010fc8:	dc09      	bgt.n	8010fde <_printf_float+0x22e>
 8010fca:	6823      	ldr	r3, [r4, #0]
 8010fcc:	079b      	lsls	r3, r3, #30
 8010fce:	f100 8108 	bmi.w	80111e2 <_printf_float+0x432>
 8010fd2:	68e0      	ldr	r0, [r4, #12]
 8010fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fd6:	4298      	cmp	r0, r3
 8010fd8:	bfb8      	it	lt
 8010fda:	4618      	movlt	r0, r3
 8010fdc:	e738      	b.n	8010e50 <_printf_float+0xa0>
 8010fde:	2301      	movs	r3, #1
 8010fe0:	464a      	mov	r2, r9
 8010fe2:	4631      	mov	r1, r6
 8010fe4:	4628      	mov	r0, r5
 8010fe6:	47b8      	blx	r7
 8010fe8:	3001      	adds	r0, #1
 8010fea:	f43f af2f 	beq.w	8010e4c <_printf_float+0x9c>
 8010fee:	f108 0801 	add.w	r8, r8, #1
 8010ff2:	e7e6      	b.n	8010fc2 <_printf_float+0x212>
 8010ff4:	9b07      	ldr	r3, [sp, #28]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	dc3c      	bgt.n	8011074 <_printf_float+0x2c4>
 8010ffa:	4a1d      	ldr	r2, [pc, #116]	; (8011070 <_printf_float+0x2c0>)
 8010ffc:	2301      	movs	r3, #1
 8010ffe:	4631      	mov	r1, r6
 8011000:	4628      	mov	r0, r5
 8011002:	47b8      	blx	r7
 8011004:	3001      	adds	r0, #1
 8011006:	f43f af21 	beq.w	8010e4c <_printf_float+0x9c>
 801100a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801100e:	4313      	orrs	r3, r2
 8011010:	d102      	bne.n	8011018 <_printf_float+0x268>
 8011012:	6823      	ldr	r3, [r4, #0]
 8011014:	07d9      	lsls	r1, r3, #31
 8011016:	d5d8      	bpl.n	8010fca <_printf_float+0x21a>
 8011018:	4653      	mov	r3, sl
 801101a:	465a      	mov	r2, fp
 801101c:	4631      	mov	r1, r6
 801101e:	4628      	mov	r0, r5
 8011020:	47b8      	blx	r7
 8011022:	3001      	adds	r0, #1
 8011024:	f43f af12 	beq.w	8010e4c <_printf_float+0x9c>
 8011028:	f04f 0900 	mov.w	r9, #0
 801102c:	f104 0a1a 	add.w	sl, r4, #26
 8011030:	9b07      	ldr	r3, [sp, #28]
 8011032:	425b      	negs	r3, r3
 8011034:	454b      	cmp	r3, r9
 8011036:	dc01      	bgt.n	801103c <_printf_float+0x28c>
 8011038:	9b08      	ldr	r3, [sp, #32]
 801103a:	e795      	b.n	8010f68 <_printf_float+0x1b8>
 801103c:	2301      	movs	r3, #1
 801103e:	4652      	mov	r2, sl
 8011040:	4631      	mov	r1, r6
 8011042:	4628      	mov	r0, r5
 8011044:	47b8      	blx	r7
 8011046:	3001      	adds	r0, #1
 8011048:	f43f af00 	beq.w	8010e4c <_printf_float+0x9c>
 801104c:	f109 0901 	add.w	r9, r9, #1
 8011050:	e7ee      	b.n	8011030 <_printf_float+0x280>
 8011052:	bf00      	nop
 8011054:	f3af 8000 	nop.w
 8011058:	ffffffff 	.word	0xffffffff
 801105c:	7fefffff 	.word	0x7fefffff
 8011060:	080134e0 	.word	0x080134e0
 8011064:	080134e4 	.word	0x080134e4
 8011068:	080134ec 	.word	0x080134ec
 801106c:	080134e8 	.word	0x080134e8
 8011070:	080134f0 	.word	0x080134f0
 8011074:	9a08      	ldr	r2, [sp, #32]
 8011076:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011078:	429a      	cmp	r2, r3
 801107a:	bfa8      	it	ge
 801107c:	461a      	movge	r2, r3
 801107e:	2a00      	cmp	r2, #0
 8011080:	4691      	mov	r9, r2
 8011082:	dc38      	bgt.n	80110f6 <_printf_float+0x346>
 8011084:	2300      	movs	r3, #0
 8011086:	9305      	str	r3, [sp, #20]
 8011088:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801108c:	f104 021a 	add.w	r2, r4, #26
 8011090:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011092:	9905      	ldr	r1, [sp, #20]
 8011094:	9304      	str	r3, [sp, #16]
 8011096:	eba3 0309 	sub.w	r3, r3, r9
 801109a:	428b      	cmp	r3, r1
 801109c:	dc33      	bgt.n	8011106 <_printf_float+0x356>
 801109e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80110a2:	429a      	cmp	r2, r3
 80110a4:	db3c      	blt.n	8011120 <_printf_float+0x370>
 80110a6:	6823      	ldr	r3, [r4, #0]
 80110a8:	07da      	lsls	r2, r3, #31
 80110aa:	d439      	bmi.n	8011120 <_printf_float+0x370>
 80110ac:	9b08      	ldr	r3, [sp, #32]
 80110ae:	9a04      	ldr	r2, [sp, #16]
 80110b0:	9907      	ldr	r1, [sp, #28]
 80110b2:	1a9a      	subs	r2, r3, r2
 80110b4:	eba3 0901 	sub.w	r9, r3, r1
 80110b8:	4591      	cmp	r9, r2
 80110ba:	bfa8      	it	ge
 80110bc:	4691      	movge	r9, r2
 80110be:	f1b9 0f00 	cmp.w	r9, #0
 80110c2:	dc35      	bgt.n	8011130 <_printf_float+0x380>
 80110c4:	f04f 0800 	mov.w	r8, #0
 80110c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80110cc:	f104 0a1a 	add.w	sl, r4, #26
 80110d0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80110d4:	1a9b      	subs	r3, r3, r2
 80110d6:	eba3 0309 	sub.w	r3, r3, r9
 80110da:	4543      	cmp	r3, r8
 80110dc:	f77f af75 	ble.w	8010fca <_printf_float+0x21a>
 80110e0:	2301      	movs	r3, #1
 80110e2:	4652      	mov	r2, sl
 80110e4:	4631      	mov	r1, r6
 80110e6:	4628      	mov	r0, r5
 80110e8:	47b8      	blx	r7
 80110ea:	3001      	adds	r0, #1
 80110ec:	f43f aeae 	beq.w	8010e4c <_printf_float+0x9c>
 80110f0:	f108 0801 	add.w	r8, r8, #1
 80110f4:	e7ec      	b.n	80110d0 <_printf_float+0x320>
 80110f6:	4613      	mov	r3, r2
 80110f8:	4631      	mov	r1, r6
 80110fa:	4642      	mov	r2, r8
 80110fc:	4628      	mov	r0, r5
 80110fe:	47b8      	blx	r7
 8011100:	3001      	adds	r0, #1
 8011102:	d1bf      	bne.n	8011084 <_printf_float+0x2d4>
 8011104:	e6a2      	b.n	8010e4c <_printf_float+0x9c>
 8011106:	2301      	movs	r3, #1
 8011108:	4631      	mov	r1, r6
 801110a:	4628      	mov	r0, r5
 801110c:	9204      	str	r2, [sp, #16]
 801110e:	47b8      	blx	r7
 8011110:	3001      	adds	r0, #1
 8011112:	f43f ae9b 	beq.w	8010e4c <_printf_float+0x9c>
 8011116:	9b05      	ldr	r3, [sp, #20]
 8011118:	9a04      	ldr	r2, [sp, #16]
 801111a:	3301      	adds	r3, #1
 801111c:	9305      	str	r3, [sp, #20]
 801111e:	e7b7      	b.n	8011090 <_printf_float+0x2e0>
 8011120:	4653      	mov	r3, sl
 8011122:	465a      	mov	r2, fp
 8011124:	4631      	mov	r1, r6
 8011126:	4628      	mov	r0, r5
 8011128:	47b8      	blx	r7
 801112a:	3001      	adds	r0, #1
 801112c:	d1be      	bne.n	80110ac <_printf_float+0x2fc>
 801112e:	e68d      	b.n	8010e4c <_printf_float+0x9c>
 8011130:	9a04      	ldr	r2, [sp, #16]
 8011132:	464b      	mov	r3, r9
 8011134:	4442      	add	r2, r8
 8011136:	4631      	mov	r1, r6
 8011138:	4628      	mov	r0, r5
 801113a:	47b8      	blx	r7
 801113c:	3001      	adds	r0, #1
 801113e:	d1c1      	bne.n	80110c4 <_printf_float+0x314>
 8011140:	e684      	b.n	8010e4c <_printf_float+0x9c>
 8011142:	9a08      	ldr	r2, [sp, #32]
 8011144:	2a01      	cmp	r2, #1
 8011146:	dc01      	bgt.n	801114c <_printf_float+0x39c>
 8011148:	07db      	lsls	r3, r3, #31
 801114a:	d537      	bpl.n	80111bc <_printf_float+0x40c>
 801114c:	2301      	movs	r3, #1
 801114e:	4642      	mov	r2, r8
 8011150:	4631      	mov	r1, r6
 8011152:	4628      	mov	r0, r5
 8011154:	47b8      	blx	r7
 8011156:	3001      	adds	r0, #1
 8011158:	f43f ae78 	beq.w	8010e4c <_printf_float+0x9c>
 801115c:	4653      	mov	r3, sl
 801115e:	465a      	mov	r2, fp
 8011160:	4631      	mov	r1, r6
 8011162:	4628      	mov	r0, r5
 8011164:	47b8      	blx	r7
 8011166:	3001      	adds	r0, #1
 8011168:	f43f ae70 	beq.w	8010e4c <_printf_float+0x9c>
 801116c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011170:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011178:	d01b      	beq.n	80111b2 <_printf_float+0x402>
 801117a:	9b08      	ldr	r3, [sp, #32]
 801117c:	f108 0201 	add.w	r2, r8, #1
 8011180:	3b01      	subs	r3, #1
 8011182:	4631      	mov	r1, r6
 8011184:	4628      	mov	r0, r5
 8011186:	47b8      	blx	r7
 8011188:	3001      	adds	r0, #1
 801118a:	d10e      	bne.n	80111aa <_printf_float+0x3fa>
 801118c:	e65e      	b.n	8010e4c <_printf_float+0x9c>
 801118e:	2301      	movs	r3, #1
 8011190:	464a      	mov	r2, r9
 8011192:	4631      	mov	r1, r6
 8011194:	4628      	mov	r0, r5
 8011196:	47b8      	blx	r7
 8011198:	3001      	adds	r0, #1
 801119a:	f43f ae57 	beq.w	8010e4c <_printf_float+0x9c>
 801119e:	f108 0801 	add.w	r8, r8, #1
 80111a2:	9b08      	ldr	r3, [sp, #32]
 80111a4:	3b01      	subs	r3, #1
 80111a6:	4543      	cmp	r3, r8
 80111a8:	dcf1      	bgt.n	801118e <_printf_float+0x3de>
 80111aa:	9b04      	ldr	r3, [sp, #16]
 80111ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80111b0:	e6db      	b.n	8010f6a <_printf_float+0x1ba>
 80111b2:	f04f 0800 	mov.w	r8, #0
 80111b6:	f104 091a 	add.w	r9, r4, #26
 80111ba:	e7f2      	b.n	80111a2 <_printf_float+0x3f2>
 80111bc:	2301      	movs	r3, #1
 80111be:	4642      	mov	r2, r8
 80111c0:	e7df      	b.n	8011182 <_printf_float+0x3d2>
 80111c2:	2301      	movs	r3, #1
 80111c4:	464a      	mov	r2, r9
 80111c6:	4631      	mov	r1, r6
 80111c8:	4628      	mov	r0, r5
 80111ca:	47b8      	blx	r7
 80111cc:	3001      	adds	r0, #1
 80111ce:	f43f ae3d 	beq.w	8010e4c <_printf_float+0x9c>
 80111d2:	f108 0801 	add.w	r8, r8, #1
 80111d6:	68e3      	ldr	r3, [r4, #12]
 80111d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80111da:	1a5b      	subs	r3, r3, r1
 80111dc:	4543      	cmp	r3, r8
 80111de:	dcf0      	bgt.n	80111c2 <_printf_float+0x412>
 80111e0:	e6f7      	b.n	8010fd2 <_printf_float+0x222>
 80111e2:	f04f 0800 	mov.w	r8, #0
 80111e6:	f104 0919 	add.w	r9, r4, #25
 80111ea:	e7f4      	b.n	80111d6 <_printf_float+0x426>

080111ec <_printf_common>:
 80111ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111f0:	4616      	mov	r6, r2
 80111f2:	4699      	mov	r9, r3
 80111f4:	688a      	ldr	r2, [r1, #8]
 80111f6:	690b      	ldr	r3, [r1, #16]
 80111f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80111fc:	4293      	cmp	r3, r2
 80111fe:	bfb8      	it	lt
 8011200:	4613      	movlt	r3, r2
 8011202:	6033      	str	r3, [r6, #0]
 8011204:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011208:	4607      	mov	r7, r0
 801120a:	460c      	mov	r4, r1
 801120c:	b10a      	cbz	r2, 8011212 <_printf_common+0x26>
 801120e:	3301      	adds	r3, #1
 8011210:	6033      	str	r3, [r6, #0]
 8011212:	6823      	ldr	r3, [r4, #0]
 8011214:	0699      	lsls	r1, r3, #26
 8011216:	bf42      	ittt	mi
 8011218:	6833      	ldrmi	r3, [r6, #0]
 801121a:	3302      	addmi	r3, #2
 801121c:	6033      	strmi	r3, [r6, #0]
 801121e:	6825      	ldr	r5, [r4, #0]
 8011220:	f015 0506 	ands.w	r5, r5, #6
 8011224:	d106      	bne.n	8011234 <_printf_common+0x48>
 8011226:	f104 0a19 	add.w	sl, r4, #25
 801122a:	68e3      	ldr	r3, [r4, #12]
 801122c:	6832      	ldr	r2, [r6, #0]
 801122e:	1a9b      	subs	r3, r3, r2
 8011230:	42ab      	cmp	r3, r5
 8011232:	dc26      	bgt.n	8011282 <_printf_common+0x96>
 8011234:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011238:	1e13      	subs	r3, r2, #0
 801123a:	6822      	ldr	r2, [r4, #0]
 801123c:	bf18      	it	ne
 801123e:	2301      	movne	r3, #1
 8011240:	0692      	lsls	r2, r2, #26
 8011242:	d42b      	bmi.n	801129c <_printf_common+0xb0>
 8011244:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011248:	4649      	mov	r1, r9
 801124a:	4638      	mov	r0, r7
 801124c:	47c0      	blx	r8
 801124e:	3001      	adds	r0, #1
 8011250:	d01e      	beq.n	8011290 <_printf_common+0xa4>
 8011252:	6823      	ldr	r3, [r4, #0]
 8011254:	68e5      	ldr	r5, [r4, #12]
 8011256:	6832      	ldr	r2, [r6, #0]
 8011258:	f003 0306 	and.w	r3, r3, #6
 801125c:	2b04      	cmp	r3, #4
 801125e:	bf08      	it	eq
 8011260:	1aad      	subeq	r5, r5, r2
 8011262:	68a3      	ldr	r3, [r4, #8]
 8011264:	6922      	ldr	r2, [r4, #16]
 8011266:	bf0c      	ite	eq
 8011268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801126c:	2500      	movne	r5, #0
 801126e:	4293      	cmp	r3, r2
 8011270:	bfc4      	itt	gt
 8011272:	1a9b      	subgt	r3, r3, r2
 8011274:	18ed      	addgt	r5, r5, r3
 8011276:	2600      	movs	r6, #0
 8011278:	341a      	adds	r4, #26
 801127a:	42b5      	cmp	r5, r6
 801127c:	d11a      	bne.n	80112b4 <_printf_common+0xc8>
 801127e:	2000      	movs	r0, #0
 8011280:	e008      	b.n	8011294 <_printf_common+0xa8>
 8011282:	2301      	movs	r3, #1
 8011284:	4652      	mov	r2, sl
 8011286:	4649      	mov	r1, r9
 8011288:	4638      	mov	r0, r7
 801128a:	47c0      	blx	r8
 801128c:	3001      	adds	r0, #1
 801128e:	d103      	bne.n	8011298 <_printf_common+0xac>
 8011290:	f04f 30ff 	mov.w	r0, #4294967295
 8011294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011298:	3501      	adds	r5, #1
 801129a:	e7c6      	b.n	801122a <_printf_common+0x3e>
 801129c:	18e1      	adds	r1, r4, r3
 801129e:	1c5a      	adds	r2, r3, #1
 80112a0:	2030      	movs	r0, #48	; 0x30
 80112a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80112a6:	4422      	add	r2, r4
 80112a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80112ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80112b0:	3302      	adds	r3, #2
 80112b2:	e7c7      	b.n	8011244 <_printf_common+0x58>
 80112b4:	2301      	movs	r3, #1
 80112b6:	4622      	mov	r2, r4
 80112b8:	4649      	mov	r1, r9
 80112ba:	4638      	mov	r0, r7
 80112bc:	47c0      	blx	r8
 80112be:	3001      	adds	r0, #1
 80112c0:	d0e6      	beq.n	8011290 <_printf_common+0xa4>
 80112c2:	3601      	adds	r6, #1
 80112c4:	e7d9      	b.n	801127a <_printf_common+0x8e>
	...

080112c8 <_printf_i>:
 80112c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80112cc:	7e0f      	ldrb	r7, [r1, #24]
 80112ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80112d0:	2f78      	cmp	r7, #120	; 0x78
 80112d2:	4691      	mov	r9, r2
 80112d4:	4680      	mov	r8, r0
 80112d6:	460c      	mov	r4, r1
 80112d8:	469a      	mov	sl, r3
 80112da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80112de:	d807      	bhi.n	80112f0 <_printf_i+0x28>
 80112e0:	2f62      	cmp	r7, #98	; 0x62
 80112e2:	d80a      	bhi.n	80112fa <_printf_i+0x32>
 80112e4:	2f00      	cmp	r7, #0
 80112e6:	f000 80d8 	beq.w	801149a <_printf_i+0x1d2>
 80112ea:	2f58      	cmp	r7, #88	; 0x58
 80112ec:	f000 80a3 	beq.w	8011436 <_printf_i+0x16e>
 80112f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80112f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80112f8:	e03a      	b.n	8011370 <_printf_i+0xa8>
 80112fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80112fe:	2b15      	cmp	r3, #21
 8011300:	d8f6      	bhi.n	80112f0 <_printf_i+0x28>
 8011302:	a101      	add	r1, pc, #4	; (adr r1, 8011308 <_printf_i+0x40>)
 8011304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011308:	08011361 	.word	0x08011361
 801130c:	08011375 	.word	0x08011375
 8011310:	080112f1 	.word	0x080112f1
 8011314:	080112f1 	.word	0x080112f1
 8011318:	080112f1 	.word	0x080112f1
 801131c:	080112f1 	.word	0x080112f1
 8011320:	08011375 	.word	0x08011375
 8011324:	080112f1 	.word	0x080112f1
 8011328:	080112f1 	.word	0x080112f1
 801132c:	080112f1 	.word	0x080112f1
 8011330:	080112f1 	.word	0x080112f1
 8011334:	08011481 	.word	0x08011481
 8011338:	080113a5 	.word	0x080113a5
 801133c:	08011463 	.word	0x08011463
 8011340:	080112f1 	.word	0x080112f1
 8011344:	080112f1 	.word	0x080112f1
 8011348:	080114a3 	.word	0x080114a3
 801134c:	080112f1 	.word	0x080112f1
 8011350:	080113a5 	.word	0x080113a5
 8011354:	080112f1 	.word	0x080112f1
 8011358:	080112f1 	.word	0x080112f1
 801135c:	0801146b 	.word	0x0801146b
 8011360:	682b      	ldr	r3, [r5, #0]
 8011362:	1d1a      	adds	r2, r3, #4
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	602a      	str	r2, [r5, #0]
 8011368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801136c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011370:	2301      	movs	r3, #1
 8011372:	e0a3      	b.n	80114bc <_printf_i+0x1f4>
 8011374:	6820      	ldr	r0, [r4, #0]
 8011376:	6829      	ldr	r1, [r5, #0]
 8011378:	0606      	lsls	r6, r0, #24
 801137a:	f101 0304 	add.w	r3, r1, #4
 801137e:	d50a      	bpl.n	8011396 <_printf_i+0xce>
 8011380:	680e      	ldr	r6, [r1, #0]
 8011382:	602b      	str	r3, [r5, #0]
 8011384:	2e00      	cmp	r6, #0
 8011386:	da03      	bge.n	8011390 <_printf_i+0xc8>
 8011388:	232d      	movs	r3, #45	; 0x2d
 801138a:	4276      	negs	r6, r6
 801138c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011390:	485e      	ldr	r0, [pc, #376]	; (801150c <_printf_i+0x244>)
 8011392:	230a      	movs	r3, #10
 8011394:	e019      	b.n	80113ca <_printf_i+0x102>
 8011396:	680e      	ldr	r6, [r1, #0]
 8011398:	602b      	str	r3, [r5, #0]
 801139a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801139e:	bf18      	it	ne
 80113a0:	b236      	sxthne	r6, r6
 80113a2:	e7ef      	b.n	8011384 <_printf_i+0xbc>
 80113a4:	682b      	ldr	r3, [r5, #0]
 80113a6:	6820      	ldr	r0, [r4, #0]
 80113a8:	1d19      	adds	r1, r3, #4
 80113aa:	6029      	str	r1, [r5, #0]
 80113ac:	0601      	lsls	r1, r0, #24
 80113ae:	d501      	bpl.n	80113b4 <_printf_i+0xec>
 80113b0:	681e      	ldr	r6, [r3, #0]
 80113b2:	e002      	b.n	80113ba <_printf_i+0xf2>
 80113b4:	0646      	lsls	r6, r0, #25
 80113b6:	d5fb      	bpl.n	80113b0 <_printf_i+0xe8>
 80113b8:	881e      	ldrh	r6, [r3, #0]
 80113ba:	4854      	ldr	r0, [pc, #336]	; (801150c <_printf_i+0x244>)
 80113bc:	2f6f      	cmp	r7, #111	; 0x6f
 80113be:	bf0c      	ite	eq
 80113c0:	2308      	moveq	r3, #8
 80113c2:	230a      	movne	r3, #10
 80113c4:	2100      	movs	r1, #0
 80113c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80113ca:	6865      	ldr	r5, [r4, #4]
 80113cc:	60a5      	str	r5, [r4, #8]
 80113ce:	2d00      	cmp	r5, #0
 80113d0:	bfa2      	ittt	ge
 80113d2:	6821      	ldrge	r1, [r4, #0]
 80113d4:	f021 0104 	bicge.w	r1, r1, #4
 80113d8:	6021      	strge	r1, [r4, #0]
 80113da:	b90e      	cbnz	r6, 80113e0 <_printf_i+0x118>
 80113dc:	2d00      	cmp	r5, #0
 80113de:	d04d      	beq.n	801147c <_printf_i+0x1b4>
 80113e0:	4615      	mov	r5, r2
 80113e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80113e6:	fb03 6711 	mls	r7, r3, r1, r6
 80113ea:	5dc7      	ldrb	r7, [r0, r7]
 80113ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80113f0:	4637      	mov	r7, r6
 80113f2:	42bb      	cmp	r3, r7
 80113f4:	460e      	mov	r6, r1
 80113f6:	d9f4      	bls.n	80113e2 <_printf_i+0x11a>
 80113f8:	2b08      	cmp	r3, #8
 80113fa:	d10b      	bne.n	8011414 <_printf_i+0x14c>
 80113fc:	6823      	ldr	r3, [r4, #0]
 80113fe:	07de      	lsls	r6, r3, #31
 8011400:	d508      	bpl.n	8011414 <_printf_i+0x14c>
 8011402:	6923      	ldr	r3, [r4, #16]
 8011404:	6861      	ldr	r1, [r4, #4]
 8011406:	4299      	cmp	r1, r3
 8011408:	bfde      	ittt	le
 801140a:	2330      	movle	r3, #48	; 0x30
 801140c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011410:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011414:	1b52      	subs	r2, r2, r5
 8011416:	6122      	str	r2, [r4, #16]
 8011418:	f8cd a000 	str.w	sl, [sp]
 801141c:	464b      	mov	r3, r9
 801141e:	aa03      	add	r2, sp, #12
 8011420:	4621      	mov	r1, r4
 8011422:	4640      	mov	r0, r8
 8011424:	f7ff fee2 	bl	80111ec <_printf_common>
 8011428:	3001      	adds	r0, #1
 801142a:	d14c      	bne.n	80114c6 <_printf_i+0x1fe>
 801142c:	f04f 30ff 	mov.w	r0, #4294967295
 8011430:	b004      	add	sp, #16
 8011432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011436:	4835      	ldr	r0, [pc, #212]	; (801150c <_printf_i+0x244>)
 8011438:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801143c:	6829      	ldr	r1, [r5, #0]
 801143e:	6823      	ldr	r3, [r4, #0]
 8011440:	f851 6b04 	ldr.w	r6, [r1], #4
 8011444:	6029      	str	r1, [r5, #0]
 8011446:	061d      	lsls	r5, r3, #24
 8011448:	d514      	bpl.n	8011474 <_printf_i+0x1ac>
 801144a:	07df      	lsls	r7, r3, #31
 801144c:	bf44      	itt	mi
 801144e:	f043 0320 	orrmi.w	r3, r3, #32
 8011452:	6023      	strmi	r3, [r4, #0]
 8011454:	b91e      	cbnz	r6, 801145e <_printf_i+0x196>
 8011456:	6823      	ldr	r3, [r4, #0]
 8011458:	f023 0320 	bic.w	r3, r3, #32
 801145c:	6023      	str	r3, [r4, #0]
 801145e:	2310      	movs	r3, #16
 8011460:	e7b0      	b.n	80113c4 <_printf_i+0xfc>
 8011462:	6823      	ldr	r3, [r4, #0]
 8011464:	f043 0320 	orr.w	r3, r3, #32
 8011468:	6023      	str	r3, [r4, #0]
 801146a:	2378      	movs	r3, #120	; 0x78
 801146c:	4828      	ldr	r0, [pc, #160]	; (8011510 <_printf_i+0x248>)
 801146e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011472:	e7e3      	b.n	801143c <_printf_i+0x174>
 8011474:	0659      	lsls	r1, r3, #25
 8011476:	bf48      	it	mi
 8011478:	b2b6      	uxthmi	r6, r6
 801147a:	e7e6      	b.n	801144a <_printf_i+0x182>
 801147c:	4615      	mov	r5, r2
 801147e:	e7bb      	b.n	80113f8 <_printf_i+0x130>
 8011480:	682b      	ldr	r3, [r5, #0]
 8011482:	6826      	ldr	r6, [r4, #0]
 8011484:	6961      	ldr	r1, [r4, #20]
 8011486:	1d18      	adds	r0, r3, #4
 8011488:	6028      	str	r0, [r5, #0]
 801148a:	0635      	lsls	r5, r6, #24
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	d501      	bpl.n	8011494 <_printf_i+0x1cc>
 8011490:	6019      	str	r1, [r3, #0]
 8011492:	e002      	b.n	801149a <_printf_i+0x1d2>
 8011494:	0670      	lsls	r0, r6, #25
 8011496:	d5fb      	bpl.n	8011490 <_printf_i+0x1c8>
 8011498:	8019      	strh	r1, [r3, #0]
 801149a:	2300      	movs	r3, #0
 801149c:	6123      	str	r3, [r4, #16]
 801149e:	4615      	mov	r5, r2
 80114a0:	e7ba      	b.n	8011418 <_printf_i+0x150>
 80114a2:	682b      	ldr	r3, [r5, #0]
 80114a4:	1d1a      	adds	r2, r3, #4
 80114a6:	602a      	str	r2, [r5, #0]
 80114a8:	681d      	ldr	r5, [r3, #0]
 80114aa:	6862      	ldr	r2, [r4, #4]
 80114ac:	2100      	movs	r1, #0
 80114ae:	4628      	mov	r0, r5
 80114b0:	f7ee ff1e 	bl	80002f0 <memchr>
 80114b4:	b108      	cbz	r0, 80114ba <_printf_i+0x1f2>
 80114b6:	1b40      	subs	r0, r0, r5
 80114b8:	6060      	str	r0, [r4, #4]
 80114ba:	6863      	ldr	r3, [r4, #4]
 80114bc:	6123      	str	r3, [r4, #16]
 80114be:	2300      	movs	r3, #0
 80114c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80114c4:	e7a8      	b.n	8011418 <_printf_i+0x150>
 80114c6:	6923      	ldr	r3, [r4, #16]
 80114c8:	462a      	mov	r2, r5
 80114ca:	4649      	mov	r1, r9
 80114cc:	4640      	mov	r0, r8
 80114ce:	47d0      	blx	sl
 80114d0:	3001      	adds	r0, #1
 80114d2:	d0ab      	beq.n	801142c <_printf_i+0x164>
 80114d4:	6823      	ldr	r3, [r4, #0]
 80114d6:	079b      	lsls	r3, r3, #30
 80114d8:	d413      	bmi.n	8011502 <_printf_i+0x23a>
 80114da:	68e0      	ldr	r0, [r4, #12]
 80114dc:	9b03      	ldr	r3, [sp, #12]
 80114de:	4298      	cmp	r0, r3
 80114e0:	bfb8      	it	lt
 80114e2:	4618      	movlt	r0, r3
 80114e4:	e7a4      	b.n	8011430 <_printf_i+0x168>
 80114e6:	2301      	movs	r3, #1
 80114e8:	4632      	mov	r2, r6
 80114ea:	4649      	mov	r1, r9
 80114ec:	4640      	mov	r0, r8
 80114ee:	47d0      	blx	sl
 80114f0:	3001      	adds	r0, #1
 80114f2:	d09b      	beq.n	801142c <_printf_i+0x164>
 80114f4:	3501      	adds	r5, #1
 80114f6:	68e3      	ldr	r3, [r4, #12]
 80114f8:	9903      	ldr	r1, [sp, #12]
 80114fa:	1a5b      	subs	r3, r3, r1
 80114fc:	42ab      	cmp	r3, r5
 80114fe:	dcf2      	bgt.n	80114e6 <_printf_i+0x21e>
 8011500:	e7eb      	b.n	80114da <_printf_i+0x212>
 8011502:	2500      	movs	r5, #0
 8011504:	f104 0619 	add.w	r6, r4, #25
 8011508:	e7f5      	b.n	80114f6 <_printf_i+0x22e>
 801150a:	bf00      	nop
 801150c:	080134f2 	.word	0x080134f2
 8011510:	08013503 	.word	0x08013503

08011514 <cleanup_glue>:
 8011514:	b538      	push	{r3, r4, r5, lr}
 8011516:	460c      	mov	r4, r1
 8011518:	6809      	ldr	r1, [r1, #0]
 801151a:	4605      	mov	r5, r0
 801151c:	b109      	cbz	r1, 8011522 <cleanup_glue+0xe>
 801151e:	f7ff fff9 	bl	8011514 <cleanup_glue>
 8011522:	4621      	mov	r1, r4
 8011524:	4628      	mov	r0, r5
 8011526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801152a:	f001 bb55 	b.w	8012bd8 <_free_r>
	...

08011530 <_reclaim_reent>:
 8011530:	4b2c      	ldr	r3, [pc, #176]	; (80115e4 <_reclaim_reent+0xb4>)
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	4283      	cmp	r3, r0
 8011536:	b570      	push	{r4, r5, r6, lr}
 8011538:	4604      	mov	r4, r0
 801153a:	d051      	beq.n	80115e0 <_reclaim_reent+0xb0>
 801153c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801153e:	b143      	cbz	r3, 8011552 <_reclaim_reent+0x22>
 8011540:	68db      	ldr	r3, [r3, #12]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d14a      	bne.n	80115dc <_reclaim_reent+0xac>
 8011546:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011548:	6819      	ldr	r1, [r3, #0]
 801154a:	b111      	cbz	r1, 8011552 <_reclaim_reent+0x22>
 801154c:	4620      	mov	r0, r4
 801154e:	f001 fb43 	bl	8012bd8 <_free_r>
 8011552:	6961      	ldr	r1, [r4, #20]
 8011554:	b111      	cbz	r1, 801155c <_reclaim_reent+0x2c>
 8011556:	4620      	mov	r0, r4
 8011558:	f001 fb3e 	bl	8012bd8 <_free_r>
 801155c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801155e:	b111      	cbz	r1, 8011566 <_reclaim_reent+0x36>
 8011560:	4620      	mov	r0, r4
 8011562:	f001 fb39 	bl	8012bd8 <_free_r>
 8011566:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011568:	b111      	cbz	r1, 8011570 <_reclaim_reent+0x40>
 801156a:	4620      	mov	r0, r4
 801156c:	f001 fb34 	bl	8012bd8 <_free_r>
 8011570:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011572:	b111      	cbz	r1, 801157a <_reclaim_reent+0x4a>
 8011574:	4620      	mov	r0, r4
 8011576:	f001 fb2f 	bl	8012bd8 <_free_r>
 801157a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801157c:	b111      	cbz	r1, 8011584 <_reclaim_reent+0x54>
 801157e:	4620      	mov	r0, r4
 8011580:	f001 fb2a 	bl	8012bd8 <_free_r>
 8011584:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011586:	b111      	cbz	r1, 801158e <_reclaim_reent+0x5e>
 8011588:	4620      	mov	r0, r4
 801158a:	f001 fb25 	bl	8012bd8 <_free_r>
 801158e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011590:	b111      	cbz	r1, 8011598 <_reclaim_reent+0x68>
 8011592:	4620      	mov	r0, r4
 8011594:	f001 fb20 	bl	8012bd8 <_free_r>
 8011598:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801159a:	b111      	cbz	r1, 80115a2 <_reclaim_reent+0x72>
 801159c:	4620      	mov	r0, r4
 801159e:	f001 fb1b 	bl	8012bd8 <_free_r>
 80115a2:	69a3      	ldr	r3, [r4, #24]
 80115a4:	b1e3      	cbz	r3, 80115e0 <_reclaim_reent+0xb0>
 80115a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80115a8:	4620      	mov	r0, r4
 80115aa:	4798      	blx	r3
 80115ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80115ae:	b1b9      	cbz	r1, 80115e0 <_reclaim_reent+0xb0>
 80115b0:	4620      	mov	r0, r4
 80115b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80115b6:	f7ff bfad 	b.w	8011514 <cleanup_glue>
 80115ba:	5949      	ldr	r1, [r1, r5]
 80115bc:	b941      	cbnz	r1, 80115d0 <_reclaim_reent+0xa0>
 80115be:	3504      	adds	r5, #4
 80115c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80115c2:	2d80      	cmp	r5, #128	; 0x80
 80115c4:	68d9      	ldr	r1, [r3, #12]
 80115c6:	d1f8      	bne.n	80115ba <_reclaim_reent+0x8a>
 80115c8:	4620      	mov	r0, r4
 80115ca:	f001 fb05 	bl	8012bd8 <_free_r>
 80115ce:	e7ba      	b.n	8011546 <_reclaim_reent+0x16>
 80115d0:	680e      	ldr	r6, [r1, #0]
 80115d2:	4620      	mov	r0, r4
 80115d4:	f001 fb00 	bl	8012bd8 <_free_r>
 80115d8:	4631      	mov	r1, r6
 80115da:	e7ef      	b.n	80115bc <_reclaim_reent+0x8c>
 80115dc:	2500      	movs	r5, #0
 80115de:	e7ef      	b.n	80115c0 <_reclaim_reent+0x90>
 80115e0:	bd70      	pop	{r4, r5, r6, pc}
 80115e2:	bf00      	nop
 80115e4:	2400002c 	.word	0x2400002c

080115e8 <_sbrk_r>:
 80115e8:	b538      	push	{r3, r4, r5, lr}
 80115ea:	4d06      	ldr	r5, [pc, #24]	; (8011604 <_sbrk_r+0x1c>)
 80115ec:	2300      	movs	r3, #0
 80115ee:	4604      	mov	r4, r0
 80115f0:	4608      	mov	r0, r1
 80115f2:	602b      	str	r3, [r5, #0]
 80115f4:	f7ef ff86 	bl	8001504 <_sbrk>
 80115f8:	1c43      	adds	r3, r0, #1
 80115fa:	d102      	bne.n	8011602 <_sbrk_r+0x1a>
 80115fc:	682b      	ldr	r3, [r5, #0]
 80115fe:	b103      	cbz	r3, 8011602 <_sbrk_r+0x1a>
 8011600:	6023      	str	r3, [r4, #0]
 8011602:	bd38      	pop	{r3, r4, r5, pc}
 8011604:	2400c7e4 	.word	0x2400c7e4

08011608 <__sread>:
 8011608:	b510      	push	{r4, lr}
 801160a:	460c      	mov	r4, r1
 801160c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011610:	f001 fb2e 	bl	8012c70 <_read_r>
 8011614:	2800      	cmp	r0, #0
 8011616:	bfab      	itete	ge
 8011618:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801161a:	89a3      	ldrhlt	r3, [r4, #12]
 801161c:	181b      	addge	r3, r3, r0
 801161e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011622:	bfac      	ite	ge
 8011624:	6563      	strge	r3, [r4, #84]	; 0x54
 8011626:	81a3      	strhlt	r3, [r4, #12]
 8011628:	bd10      	pop	{r4, pc}

0801162a <__swrite>:
 801162a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801162e:	461f      	mov	r7, r3
 8011630:	898b      	ldrh	r3, [r1, #12]
 8011632:	05db      	lsls	r3, r3, #23
 8011634:	4605      	mov	r5, r0
 8011636:	460c      	mov	r4, r1
 8011638:	4616      	mov	r6, r2
 801163a:	d505      	bpl.n	8011648 <__swrite+0x1e>
 801163c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011640:	2302      	movs	r3, #2
 8011642:	2200      	movs	r2, #0
 8011644:	f000 ff08 	bl	8012458 <_lseek_r>
 8011648:	89a3      	ldrh	r3, [r4, #12]
 801164a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801164e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011652:	81a3      	strh	r3, [r4, #12]
 8011654:	4632      	mov	r2, r6
 8011656:	463b      	mov	r3, r7
 8011658:	4628      	mov	r0, r5
 801165a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801165e:	f000 b817 	b.w	8011690 <_write_r>

08011662 <__sseek>:
 8011662:	b510      	push	{r4, lr}
 8011664:	460c      	mov	r4, r1
 8011666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801166a:	f000 fef5 	bl	8012458 <_lseek_r>
 801166e:	1c43      	adds	r3, r0, #1
 8011670:	89a3      	ldrh	r3, [r4, #12]
 8011672:	bf15      	itete	ne
 8011674:	6560      	strne	r0, [r4, #84]	; 0x54
 8011676:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801167a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801167e:	81a3      	strheq	r3, [r4, #12]
 8011680:	bf18      	it	ne
 8011682:	81a3      	strhne	r3, [r4, #12]
 8011684:	bd10      	pop	{r4, pc}

08011686 <__sclose>:
 8011686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801168a:	f000 b813 	b.w	80116b4 <_close_r>
	...

08011690 <_write_r>:
 8011690:	b538      	push	{r3, r4, r5, lr}
 8011692:	4d07      	ldr	r5, [pc, #28]	; (80116b0 <_write_r+0x20>)
 8011694:	4604      	mov	r4, r0
 8011696:	4608      	mov	r0, r1
 8011698:	4611      	mov	r1, r2
 801169a:	2200      	movs	r2, #0
 801169c:	602a      	str	r2, [r5, #0]
 801169e:	461a      	mov	r2, r3
 80116a0:	f7ef fedf 	bl	8001462 <_write>
 80116a4:	1c43      	adds	r3, r0, #1
 80116a6:	d102      	bne.n	80116ae <_write_r+0x1e>
 80116a8:	682b      	ldr	r3, [r5, #0]
 80116aa:	b103      	cbz	r3, 80116ae <_write_r+0x1e>
 80116ac:	6023      	str	r3, [r4, #0]
 80116ae:	bd38      	pop	{r3, r4, r5, pc}
 80116b0:	2400c7e4 	.word	0x2400c7e4

080116b4 <_close_r>:
 80116b4:	b538      	push	{r3, r4, r5, lr}
 80116b6:	4d06      	ldr	r5, [pc, #24]	; (80116d0 <_close_r+0x1c>)
 80116b8:	2300      	movs	r3, #0
 80116ba:	4604      	mov	r4, r0
 80116bc:	4608      	mov	r0, r1
 80116be:	602b      	str	r3, [r5, #0]
 80116c0:	f7ef feeb 	bl	800149a <_close>
 80116c4:	1c43      	adds	r3, r0, #1
 80116c6:	d102      	bne.n	80116ce <_close_r+0x1a>
 80116c8:	682b      	ldr	r3, [r5, #0]
 80116ca:	b103      	cbz	r3, 80116ce <_close_r+0x1a>
 80116cc:	6023      	str	r3, [r4, #0]
 80116ce:	bd38      	pop	{r3, r4, r5, pc}
 80116d0:	2400c7e4 	.word	0x2400c7e4

080116d4 <quorem>:
 80116d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116d8:	6903      	ldr	r3, [r0, #16]
 80116da:	690c      	ldr	r4, [r1, #16]
 80116dc:	42a3      	cmp	r3, r4
 80116de:	4607      	mov	r7, r0
 80116e0:	f2c0 8081 	blt.w	80117e6 <quorem+0x112>
 80116e4:	3c01      	subs	r4, #1
 80116e6:	f101 0814 	add.w	r8, r1, #20
 80116ea:	f100 0514 	add.w	r5, r0, #20
 80116ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80116f2:	9301      	str	r3, [sp, #4]
 80116f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80116f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80116fc:	3301      	adds	r3, #1
 80116fe:	429a      	cmp	r2, r3
 8011700:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011704:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011708:	fbb2 f6f3 	udiv	r6, r2, r3
 801170c:	d331      	bcc.n	8011772 <quorem+0x9e>
 801170e:	f04f 0e00 	mov.w	lr, #0
 8011712:	4640      	mov	r0, r8
 8011714:	46ac      	mov	ip, r5
 8011716:	46f2      	mov	sl, lr
 8011718:	f850 2b04 	ldr.w	r2, [r0], #4
 801171c:	b293      	uxth	r3, r2
 801171e:	fb06 e303 	mla	r3, r6, r3, lr
 8011722:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011726:	b29b      	uxth	r3, r3
 8011728:	ebaa 0303 	sub.w	r3, sl, r3
 801172c:	f8dc a000 	ldr.w	sl, [ip]
 8011730:	0c12      	lsrs	r2, r2, #16
 8011732:	fa13 f38a 	uxtah	r3, r3, sl
 8011736:	fb06 e202 	mla	r2, r6, r2, lr
 801173a:	9300      	str	r3, [sp, #0]
 801173c:	9b00      	ldr	r3, [sp, #0]
 801173e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011742:	b292      	uxth	r2, r2
 8011744:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011748:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801174c:	f8bd 3000 	ldrh.w	r3, [sp]
 8011750:	4581      	cmp	r9, r0
 8011752:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011756:	f84c 3b04 	str.w	r3, [ip], #4
 801175a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801175e:	d2db      	bcs.n	8011718 <quorem+0x44>
 8011760:	f855 300b 	ldr.w	r3, [r5, fp]
 8011764:	b92b      	cbnz	r3, 8011772 <quorem+0x9e>
 8011766:	9b01      	ldr	r3, [sp, #4]
 8011768:	3b04      	subs	r3, #4
 801176a:	429d      	cmp	r5, r3
 801176c:	461a      	mov	r2, r3
 801176e:	d32e      	bcc.n	80117ce <quorem+0xfa>
 8011770:	613c      	str	r4, [r7, #16]
 8011772:	4638      	mov	r0, r7
 8011774:	f001 f918 	bl	80129a8 <__mcmp>
 8011778:	2800      	cmp	r0, #0
 801177a:	db24      	blt.n	80117c6 <quorem+0xf2>
 801177c:	3601      	adds	r6, #1
 801177e:	4628      	mov	r0, r5
 8011780:	f04f 0c00 	mov.w	ip, #0
 8011784:	f858 2b04 	ldr.w	r2, [r8], #4
 8011788:	f8d0 e000 	ldr.w	lr, [r0]
 801178c:	b293      	uxth	r3, r2
 801178e:	ebac 0303 	sub.w	r3, ip, r3
 8011792:	0c12      	lsrs	r2, r2, #16
 8011794:	fa13 f38e 	uxtah	r3, r3, lr
 8011798:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801179c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80117a0:	b29b      	uxth	r3, r3
 80117a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80117a6:	45c1      	cmp	r9, r8
 80117a8:	f840 3b04 	str.w	r3, [r0], #4
 80117ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80117b0:	d2e8      	bcs.n	8011784 <quorem+0xb0>
 80117b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80117b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80117ba:	b922      	cbnz	r2, 80117c6 <quorem+0xf2>
 80117bc:	3b04      	subs	r3, #4
 80117be:	429d      	cmp	r5, r3
 80117c0:	461a      	mov	r2, r3
 80117c2:	d30a      	bcc.n	80117da <quorem+0x106>
 80117c4:	613c      	str	r4, [r7, #16]
 80117c6:	4630      	mov	r0, r6
 80117c8:	b003      	add	sp, #12
 80117ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117ce:	6812      	ldr	r2, [r2, #0]
 80117d0:	3b04      	subs	r3, #4
 80117d2:	2a00      	cmp	r2, #0
 80117d4:	d1cc      	bne.n	8011770 <quorem+0x9c>
 80117d6:	3c01      	subs	r4, #1
 80117d8:	e7c7      	b.n	801176a <quorem+0x96>
 80117da:	6812      	ldr	r2, [r2, #0]
 80117dc:	3b04      	subs	r3, #4
 80117de:	2a00      	cmp	r2, #0
 80117e0:	d1f0      	bne.n	80117c4 <quorem+0xf0>
 80117e2:	3c01      	subs	r4, #1
 80117e4:	e7eb      	b.n	80117be <quorem+0xea>
 80117e6:	2000      	movs	r0, #0
 80117e8:	e7ee      	b.n	80117c8 <quorem+0xf4>
 80117ea:	0000      	movs	r0, r0
 80117ec:	0000      	movs	r0, r0
	...

080117f0 <_dtoa_r>:
 80117f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117f4:	ed2d 8b02 	vpush	{d8}
 80117f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80117fa:	b091      	sub	sp, #68	; 0x44
 80117fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011800:	ec59 8b10 	vmov	r8, r9, d0
 8011804:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8011806:	9106      	str	r1, [sp, #24]
 8011808:	4606      	mov	r6, r0
 801180a:	9208      	str	r2, [sp, #32]
 801180c:	930c      	str	r3, [sp, #48]	; 0x30
 801180e:	b975      	cbnz	r5, 801182e <_dtoa_r+0x3e>
 8011810:	2010      	movs	r0, #16
 8011812:	f000 fe33 	bl	801247c <malloc>
 8011816:	4602      	mov	r2, r0
 8011818:	6270      	str	r0, [r6, #36]	; 0x24
 801181a:	b920      	cbnz	r0, 8011826 <_dtoa_r+0x36>
 801181c:	4baa      	ldr	r3, [pc, #680]	; (8011ac8 <_dtoa_r+0x2d8>)
 801181e:	21ea      	movs	r1, #234	; 0xea
 8011820:	48aa      	ldr	r0, [pc, #680]	; (8011acc <_dtoa_r+0x2dc>)
 8011822:	f001 fa37 	bl	8012c94 <__assert_func>
 8011826:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801182a:	6005      	str	r5, [r0, #0]
 801182c:	60c5      	str	r5, [r0, #12]
 801182e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011830:	6819      	ldr	r1, [r3, #0]
 8011832:	b151      	cbz	r1, 801184a <_dtoa_r+0x5a>
 8011834:	685a      	ldr	r2, [r3, #4]
 8011836:	604a      	str	r2, [r1, #4]
 8011838:	2301      	movs	r3, #1
 801183a:	4093      	lsls	r3, r2
 801183c:	608b      	str	r3, [r1, #8]
 801183e:	4630      	mov	r0, r6
 8011840:	f000 fe70 	bl	8012524 <_Bfree>
 8011844:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011846:	2200      	movs	r2, #0
 8011848:	601a      	str	r2, [r3, #0]
 801184a:	f1b9 0300 	subs.w	r3, r9, #0
 801184e:	bfbb      	ittet	lt
 8011850:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011854:	9303      	strlt	r3, [sp, #12]
 8011856:	2300      	movge	r3, #0
 8011858:	2201      	movlt	r2, #1
 801185a:	bfac      	ite	ge
 801185c:	6023      	strge	r3, [r4, #0]
 801185e:	6022      	strlt	r2, [r4, #0]
 8011860:	4b9b      	ldr	r3, [pc, #620]	; (8011ad0 <_dtoa_r+0x2e0>)
 8011862:	9c03      	ldr	r4, [sp, #12]
 8011864:	43a3      	bics	r3, r4
 8011866:	d11c      	bne.n	80118a2 <_dtoa_r+0xb2>
 8011868:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801186a:	f242 730f 	movw	r3, #9999	; 0x270f
 801186e:	6013      	str	r3, [r2, #0]
 8011870:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8011874:	ea53 0308 	orrs.w	r3, r3, r8
 8011878:	f000 84fd 	beq.w	8012276 <_dtoa_r+0xa86>
 801187c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801187e:	b963      	cbnz	r3, 801189a <_dtoa_r+0xaa>
 8011880:	4b94      	ldr	r3, [pc, #592]	; (8011ad4 <_dtoa_r+0x2e4>)
 8011882:	e01f      	b.n	80118c4 <_dtoa_r+0xd4>
 8011884:	4b94      	ldr	r3, [pc, #592]	; (8011ad8 <_dtoa_r+0x2e8>)
 8011886:	9301      	str	r3, [sp, #4]
 8011888:	3308      	adds	r3, #8
 801188a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801188c:	6013      	str	r3, [r2, #0]
 801188e:	9801      	ldr	r0, [sp, #4]
 8011890:	b011      	add	sp, #68	; 0x44
 8011892:	ecbd 8b02 	vpop	{d8}
 8011896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801189a:	4b8e      	ldr	r3, [pc, #568]	; (8011ad4 <_dtoa_r+0x2e4>)
 801189c:	9301      	str	r3, [sp, #4]
 801189e:	3303      	adds	r3, #3
 80118a0:	e7f3      	b.n	801188a <_dtoa_r+0x9a>
 80118a2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80118a6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80118aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ae:	d10b      	bne.n	80118c8 <_dtoa_r+0xd8>
 80118b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80118b2:	2301      	movs	r3, #1
 80118b4:	6013      	str	r3, [r2, #0]
 80118b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	f000 84d9 	beq.w	8012270 <_dtoa_r+0xa80>
 80118be:	4887      	ldr	r0, [pc, #540]	; (8011adc <_dtoa_r+0x2ec>)
 80118c0:	6018      	str	r0, [r3, #0]
 80118c2:	1e43      	subs	r3, r0, #1
 80118c4:	9301      	str	r3, [sp, #4]
 80118c6:	e7e2      	b.n	801188e <_dtoa_r+0x9e>
 80118c8:	a90f      	add	r1, sp, #60	; 0x3c
 80118ca:	aa0e      	add	r2, sp, #56	; 0x38
 80118cc:	4630      	mov	r0, r6
 80118ce:	eeb0 0b48 	vmov.f64	d0, d8
 80118d2:	f001 f90f 	bl	8012af4 <__d2b>
 80118d6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80118da:	4605      	mov	r5, r0
 80118dc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80118de:	2900      	cmp	r1, #0
 80118e0:	d046      	beq.n	8011970 <_dtoa_r+0x180>
 80118e2:	ee18 4a90 	vmov	r4, s17
 80118e6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80118ea:	ec53 2b18 	vmov	r2, r3, d8
 80118ee:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80118f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80118f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80118fa:	2400      	movs	r4, #0
 80118fc:	ec43 2b16 	vmov	d6, r2, r3
 8011900:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011904:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8011ab0 <_dtoa_r+0x2c0>
 8011908:	ee36 7b47 	vsub.f64	d7, d6, d7
 801190c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8011ab8 <_dtoa_r+0x2c8>
 8011910:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011914:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8011ac0 <_dtoa_r+0x2d0>
 8011918:	ee07 1a90 	vmov	s15, r1
 801191c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8011920:	eeb0 7b46 	vmov.f64	d7, d6
 8011924:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011928:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801192c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011934:	ee16 ba90 	vmov	fp, s13
 8011938:	940a      	str	r4, [sp, #40]	; 0x28
 801193a:	d508      	bpl.n	801194e <_dtoa_r+0x15e>
 801193c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011940:	eeb4 6b47 	vcmp.f64	d6, d7
 8011944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011948:	bf18      	it	ne
 801194a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801194e:	f1bb 0f16 	cmp.w	fp, #22
 8011952:	d82f      	bhi.n	80119b4 <_dtoa_r+0x1c4>
 8011954:	4b62      	ldr	r3, [pc, #392]	; (8011ae0 <_dtoa_r+0x2f0>)
 8011956:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801195a:	ed93 7b00 	vldr	d7, [r3]
 801195e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011966:	d501      	bpl.n	801196c <_dtoa_r+0x17c>
 8011968:	f10b 3bff 	add.w	fp, fp, #4294967295
 801196c:	2300      	movs	r3, #0
 801196e:	e022      	b.n	80119b6 <_dtoa_r+0x1c6>
 8011970:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011972:	4401      	add	r1, r0
 8011974:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8011978:	2b20      	cmp	r3, #32
 801197a:	bfc1      	itttt	gt
 801197c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011980:	fa04 f303 	lslgt.w	r3, r4, r3
 8011984:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8011988:	fa28 f804 	lsrgt.w	r8, r8, r4
 801198c:	bfd6      	itet	le
 801198e:	f1c3 0320 	rsble	r3, r3, #32
 8011992:	ea43 0808 	orrgt.w	r8, r3, r8
 8011996:	fa08 f803 	lslle.w	r8, r8, r3
 801199a:	ee07 8a90 	vmov	s15, r8
 801199e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80119a2:	3901      	subs	r1, #1
 80119a4:	ee17 4a90 	vmov	r4, s15
 80119a8:	ec53 2b17 	vmov	r2, r3, d7
 80119ac:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80119b0:	2401      	movs	r4, #1
 80119b2:	e7a3      	b.n	80118fc <_dtoa_r+0x10c>
 80119b4:	2301      	movs	r3, #1
 80119b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80119b8:	1a43      	subs	r3, r0, r1
 80119ba:	1e5a      	subs	r2, r3, #1
 80119bc:	bf45      	ittet	mi
 80119be:	f1c3 0301 	rsbmi	r3, r3, #1
 80119c2:	9304      	strmi	r3, [sp, #16]
 80119c4:	2300      	movpl	r3, #0
 80119c6:	2300      	movmi	r3, #0
 80119c8:	9205      	str	r2, [sp, #20]
 80119ca:	bf54      	ite	pl
 80119cc:	9304      	strpl	r3, [sp, #16]
 80119ce:	9305      	strmi	r3, [sp, #20]
 80119d0:	f1bb 0f00 	cmp.w	fp, #0
 80119d4:	db18      	blt.n	8011a08 <_dtoa_r+0x218>
 80119d6:	9b05      	ldr	r3, [sp, #20]
 80119d8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80119dc:	445b      	add	r3, fp
 80119de:	9305      	str	r3, [sp, #20]
 80119e0:	2300      	movs	r3, #0
 80119e2:	9a06      	ldr	r2, [sp, #24]
 80119e4:	2a09      	cmp	r2, #9
 80119e6:	d849      	bhi.n	8011a7c <_dtoa_r+0x28c>
 80119e8:	2a05      	cmp	r2, #5
 80119ea:	bfc4      	itt	gt
 80119ec:	3a04      	subgt	r2, #4
 80119ee:	9206      	strgt	r2, [sp, #24]
 80119f0:	9a06      	ldr	r2, [sp, #24]
 80119f2:	f1a2 0202 	sub.w	r2, r2, #2
 80119f6:	bfcc      	ite	gt
 80119f8:	2400      	movgt	r4, #0
 80119fa:	2401      	movle	r4, #1
 80119fc:	2a03      	cmp	r2, #3
 80119fe:	d848      	bhi.n	8011a92 <_dtoa_r+0x2a2>
 8011a00:	e8df f002 	tbb	[pc, r2]
 8011a04:	3a2c2e0b 	.word	0x3a2c2e0b
 8011a08:	9b04      	ldr	r3, [sp, #16]
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	eba3 030b 	sub.w	r3, r3, fp
 8011a10:	9304      	str	r3, [sp, #16]
 8011a12:	9209      	str	r2, [sp, #36]	; 0x24
 8011a14:	f1cb 0300 	rsb	r3, fp, #0
 8011a18:	e7e3      	b.n	80119e2 <_dtoa_r+0x1f2>
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	9207      	str	r2, [sp, #28]
 8011a1e:	9a08      	ldr	r2, [sp, #32]
 8011a20:	2a00      	cmp	r2, #0
 8011a22:	dc39      	bgt.n	8011a98 <_dtoa_r+0x2a8>
 8011a24:	f04f 0a01 	mov.w	sl, #1
 8011a28:	46d1      	mov	r9, sl
 8011a2a:	4652      	mov	r2, sl
 8011a2c:	f8cd a020 	str.w	sl, [sp, #32]
 8011a30:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8011a32:	2100      	movs	r1, #0
 8011a34:	6079      	str	r1, [r7, #4]
 8011a36:	2004      	movs	r0, #4
 8011a38:	f100 0c14 	add.w	ip, r0, #20
 8011a3c:	4594      	cmp	ip, r2
 8011a3e:	6879      	ldr	r1, [r7, #4]
 8011a40:	d92f      	bls.n	8011aa2 <_dtoa_r+0x2b2>
 8011a42:	4630      	mov	r0, r6
 8011a44:	930d      	str	r3, [sp, #52]	; 0x34
 8011a46:	f000 fd2d 	bl	80124a4 <_Balloc>
 8011a4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a4c:	9001      	str	r0, [sp, #4]
 8011a4e:	4602      	mov	r2, r0
 8011a50:	2800      	cmp	r0, #0
 8011a52:	d149      	bne.n	8011ae8 <_dtoa_r+0x2f8>
 8011a54:	4b23      	ldr	r3, [pc, #140]	; (8011ae4 <_dtoa_r+0x2f4>)
 8011a56:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011a5a:	e6e1      	b.n	8011820 <_dtoa_r+0x30>
 8011a5c:	2201      	movs	r2, #1
 8011a5e:	e7dd      	b.n	8011a1c <_dtoa_r+0x22c>
 8011a60:	2200      	movs	r2, #0
 8011a62:	9207      	str	r2, [sp, #28]
 8011a64:	9a08      	ldr	r2, [sp, #32]
 8011a66:	eb0b 0a02 	add.w	sl, fp, r2
 8011a6a:	f10a 0901 	add.w	r9, sl, #1
 8011a6e:	464a      	mov	r2, r9
 8011a70:	2a01      	cmp	r2, #1
 8011a72:	bfb8      	it	lt
 8011a74:	2201      	movlt	r2, #1
 8011a76:	e7db      	b.n	8011a30 <_dtoa_r+0x240>
 8011a78:	2201      	movs	r2, #1
 8011a7a:	e7f2      	b.n	8011a62 <_dtoa_r+0x272>
 8011a7c:	2401      	movs	r4, #1
 8011a7e:	2200      	movs	r2, #0
 8011a80:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8011a84:	f04f 3aff 	mov.w	sl, #4294967295
 8011a88:	2100      	movs	r1, #0
 8011a8a:	46d1      	mov	r9, sl
 8011a8c:	2212      	movs	r2, #18
 8011a8e:	9108      	str	r1, [sp, #32]
 8011a90:	e7ce      	b.n	8011a30 <_dtoa_r+0x240>
 8011a92:	2201      	movs	r2, #1
 8011a94:	9207      	str	r2, [sp, #28]
 8011a96:	e7f5      	b.n	8011a84 <_dtoa_r+0x294>
 8011a98:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011a9c:	46d1      	mov	r9, sl
 8011a9e:	4652      	mov	r2, sl
 8011aa0:	e7c6      	b.n	8011a30 <_dtoa_r+0x240>
 8011aa2:	3101      	adds	r1, #1
 8011aa4:	6079      	str	r1, [r7, #4]
 8011aa6:	0040      	lsls	r0, r0, #1
 8011aa8:	e7c6      	b.n	8011a38 <_dtoa_r+0x248>
 8011aaa:	bf00      	nop
 8011aac:	f3af 8000 	nop.w
 8011ab0:	636f4361 	.word	0x636f4361
 8011ab4:	3fd287a7 	.word	0x3fd287a7
 8011ab8:	8b60c8b3 	.word	0x8b60c8b3
 8011abc:	3fc68a28 	.word	0x3fc68a28
 8011ac0:	509f79fb 	.word	0x509f79fb
 8011ac4:	3fd34413 	.word	0x3fd34413
 8011ac8:	08013521 	.word	0x08013521
 8011acc:	08013538 	.word	0x08013538
 8011ad0:	7ff00000 	.word	0x7ff00000
 8011ad4:	0801351d 	.word	0x0801351d
 8011ad8:	08013514 	.word	0x08013514
 8011adc:	080134f1 	.word	0x080134f1
 8011ae0:	08013628 	.word	0x08013628
 8011ae4:	08013593 	.word	0x08013593
 8011ae8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8011aea:	9901      	ldr	r1, [sp, #4]
 8011aec:	6011      	str	r1, [r2, #0]
 8011aee:	f1b9 0f0e 	cmp.w	r9, #14
 8011af2:	d86c      	bhi.n	8011bce <_dtoa_r+0x3de>
 8011af4:	2c00      	cmp	r4, #0
 8011af6:	d06a      	beq.n	8011bce <_dtoa_r+0x3de>
 8011af8:	f1bb 0f00 	cmp.w	fp, #0
 8011afc:	f340 80a0 	ble.w	8011c40 <_dtoa_r+0x450>
 8011b00:	49c1      	ldr	r1, [pc, #772]	; (8011e08 <_dtoa_r+0x618>)
 8011b02:	f00b 020f 	and.w	r2, fp, #15
 8011b06:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8011b0a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011b0e:	ed92 7b00 	vldr	d7, [r2]
 8011b12:	ea4f 112b 	mov.w	r1, fp, asr #4
 8011b16:	f000 8087 	beq.w	8011c28 <_dtoa_r+0x438>
 8011b1a:	4abc      	ldr	r2, [pc, #752]	; (8011e0c <_dtoa_r+0x61c>)
 8011b1c:	ed92 6b08 	vldr	d6, [r2, #32]
 8011b20:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8011b24:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011b28:	f001 010f 	and.w	r1, r1, #15
 8011b2c:	2203      	movs	r2, #3
 8011b2e:	48b7      	ldr	r0, [pc, #732]	; (8011e0c <_dtoa_r+0x61c>)
 8011b30:	2900      	cmp	r1, #0
 8011b32:	d17b      	bne.n	8011c2c <_dtoa_r+0x43c>
 8011b34:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011b38:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011b3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011b40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011b42:	2900      	cmp	r1, #0
 8011b44:	f000 80a2 	beq.w	8011c8c <_dtoa_r+0x49c>
 8011b48:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011b4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011b50:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b58:	f140 8098 	bpl.w	8011c8c <_dtoa_r+0x49c>
 8011b5c:	f1b9 0f00 	cmp.w	r9, #0
 8011b60:	f000 8094 	beq.w	8011c8c <_dtoa_r+0x49c>
 8011b64:	f1ba 0f00 	cmp.w	sl, #0
 8011b68:	dd2f      	ble.n	8011bca <_dtoa_r+0x3da>
 8011b6a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8011b6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011b72:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011b76:	f10b 37ff 	add.w	r7, fp, #4294967295
 8011b7a:	3201      	adds	r2, #1
 8011b7c:	4650      	mov	r0, sl
 8011b7e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011b82:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8011b86:	ee07 2a90 	vmov	s15, r2
 8011b8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011b8e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011b92:	ee15 4a90 	vmov	r4, s11
 8011b96:	ec52 1b15 	vmov	r1, r2, d5
 8011b9a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8011b9e:	2800      	cmp	r0, #0
 8011ba0:	d177      	bne.n	8011c92 <_dtoa_r+0x4a2>
 8011ba2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011ba6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011baa:	ec42 1b17 	vmov	d7, r1, r2
 8011bae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bb6:	f300 8263 	bgt.w	8012080 <_dtoa_r+0x890>
 8011bba:	eeb1 7b47 	vneg.f64	d7, d7
 8011bbe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bc6:	f100 8258 	bmi.w	801207a <_dtoa_r+0x88a>
 8011bca:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011bce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011bd0:	2a00      	cmp	r2, #0
 8011bd2:	f2c0 811d 	blt.w	8011e10 <_dtoa_r+0x620>
 8011bd6:	f1bb 0f0e 	cmp.w	fp, #14
 8011bda:	f300 8119 	bgt.w	8011e10 <_dtoa_r+0x620>
 8011bde:	4b8a      	ldr	r3, [pc, #552]	; (8011e08 <_dtoa_r+0x618>)
 8011be0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011be4:	ed93 6b00 	vldr	d6, [r3]
 8011be8:	9b08      	ldr	r3, [sp, #32]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	f280 80b7 	bge.w	8011d5e <_dtoa_r+0x56e>
 8011bf0:	f1b9 0f00 	cmp.w	r9, #0
 8011bf4:	f300 80b3 	bgt.w	8011d5e <_dtoa_r+0x56e>
 8011bf8:	f040 823f 	bne.w	801207a <_dtoa_r+0x88a>
 8011bfc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011c00:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011c04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011c08:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c10:	464c      	mov	r4, r9
 8011c12:	464f      	mov	r7, r9
 8011c14:	f280 8215 	bge.w	8012042 <_dtoa_r+0x852>
 8011c18:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011c1c:	2331      	movs	r3, #49	; 0x31
 8011c1e:	f808 3b01 	strb.w	r3, [r8], #1
 8011c22:	f10b 0b01 	add.w	fp, fp, #1
 8011c26:	e211      	b.n	801204c <_dtoa_r+0x85c>
 8011c28:	2202      	movs	r2, #2
 8011c2a:	e780      	b.n	8011b2e <_dtoa_r+0x33e>
 8011c2c:	07cc      	lsls	r4, r1, #31
 8011c2e:	d504      	bpl.n	8011c3a <_dtoa_r+0x44a>
 8011c30:	ed90 6b00 	vldr	d6, [r0]
 8011c34:	3201      	adds	r2, #1
 8011c36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011c3a:	1049      	asrs	r1, r1, #1
 8011c3c:	3008      	adds	r0, #8
 8011c3e:	e777      	b.n	8011b30 <_dtoa_r+0x340>
 8011c40:	d022      	beq.n	8011c88 <_dtoa_r+0x498>
 8011c42:	f1cb 0100 	rsb	r1, fp, #0
 8011c46:	4a70      	ldr	r2, [pc, #448]	; (8011e08 <_dtoa_r+0x618>)
 8011c48:	f001 000f 	and.w	r0, r1, #15
 8011c4c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011c50:	ed92 7b00 	vldr	d7, [r2]
 8011c54:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011c58:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011c5c:	486b      	ldr	r0, [pc, #428]	; (8011e0c <_dtoa_r+0x61c>)
 8011c5e:	1109      	asrs	r1, r1, #4
 8011c60:	2400      	movs	r4, #0
 8011c62:	2202      	movs	r2, #2
 8011c64:	b929      	cbnz	r1, 8011c72 <_dtoa_r+0x482>
 8011c66:	2c00      	cmp	r4, #0
 8011c68:	f43f af6a 	beq.w	8011b40 <_dtoa_r+0x350>
 8011c6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011c70:	e766      	b.n	8011b40 <_dtoa_r+0x350>
 8011c72:	07cf      	lsls	r7, r1, #31
 8011c74:	d505      	bpl.n	8011c82 <_dtoa_r+0x492>
 8011c76:	ed90 6b00 	vldr	d6, [r0]
 8011c7a:	3201      	adds	r2, #1
 8011c7c:	2401      	movs	r4, #1
 8011c7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011c82:	1049      	asrs	r1, r1, #1
 8011c84:	3008      	adds	r0, #8
 8011c86:	e7ed      	b.n	8011c64 <_dtoa_r+0x474>
 8011c88:	2202      	movs	r2, #2
 8011c8a:	e759      	b.n	8011b40 <_dtoa_r+0x350>
 8011c8c:	465f      	mov	r7, fp
 8011c8e:	4648      	mov	r0, r9
 8011c90:	e775      	b.n	8011b7e <_dtoa_r+0x38e>
 8011c92:	ec42 1b17 	vmov	d7, r1, r2
 8011c96:	4a5c      	ldr	r2, [pc, #368]	; (8011e08 <_dtoa_r+0x618>)
 8011c98:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011c9c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8011ca0:	9a01      	ldr	r2, [sp, #4]
 8011ca2:	1814      	adds	r4, r2, r0
 8011ca4:	9a07      	ldr	r2, [sp, #28]
 8011ca6:	b352      	cbz	r2, 8011cfe <_dtoa_r+0x50e>
 8011ca8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8011cac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8011cb0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011cb4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011cb8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011cbc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011cc0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011cc4:	ee14 2a90 	vmov	r2, s9
 8011cc8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011ccc:	3230      	adds	r2, #48	; 0x30
 8011cce:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011cd2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cda:	f808 2b01 	strb.w	r2, [r8], #1
 8011cde:	d439      	bmi.n	8011d54 <_dtoa_r+0x564>
 8011ce0:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011ce4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cec:	d472      	bmi.n	8011dd4 <_dtoa_r+0x5e4>
 8011cee:	45a0      	cmp	r8, r4
 8011cf0:	f43f af6b 	beq.w	8011bca <_dtoa_r+0x3da>
 8011cf4:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011cf8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011cfc:	e7e0      	b.n	8011cc0 <_dtoa_r+0x4d0>
 8011cfe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011d02:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011d06:	4621      	mov	r1, r4
 8011d08:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011d0c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011d10:	ee14 2a90 	vmov	r2, s9
 8011d14:	3230      	adds	r2, #48	; 0x30
 8011d16:	f808 2b01 	strb.w	r2, [r8], #1
 8011d1a:	45a0      	cmp	r8, r4
 8011d1c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011d20:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011d24:	d118      	bne.n	8011d58 <_dtoa_r+0x568>
 8011d26:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011d2a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8011d2e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8011d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d36:	dc4d      	bgt.n	8011dd4 <_dtoa_r+0x5e4>
 8011d38:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011d3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d44:	f57f af41 	bpl.w	8011bca <_dtoa_r+0x3da>
 8011d48:	4688      	mov	r8, r1
 8011d4a:	3901      	subs	r1, #1
 8011d4c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8011d50:	2b30      	cmp	r3, #48	; 0x30
 8011d52:	d0f9      	beq.n	8011d48 <_dtoa_r+0x558>
 8011d54:	46bb      	mov	fp, r7
 8011d56:	e02a      	b.n	8011dae <_dtoa_r+0x5be>
 8011d58:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011d5c:	e7d6      	b.n	8011d0c <_dtoa_r+0x51c>
 8011d5e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011d62:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8011d66:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011d6a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8011d6e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8011d72:	ee15 3a10 	vmov	r3, s10
 8011d76:	3330      	adds	r3, #48	; 0x30
 8011d78:	f808 3b01 	strb.w	r3, [r8], #1
 8011d7c:	9b01      	ldr	r3, [sp, #4]
 8011d7e:	eba8 0303 	sub.w	r3, r8, r3
 8011d82:	4599      	cmp	r9, r3
 8011d84:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011d88:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011d8c:	d133      	bne.n	8011df6 <_dtoa_r+0x606>
 8011d8e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011d92:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d9a:	dc1a      	bgt.n	8011dd2 <_dtoa_r+0x5e2>
 8011d9c:	eeb4 7b46 	vcmp.f64	d7, d6
 8011da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011da4:	d103      	bne.n	8011dae <_dtoa_r+0x5be>
 8011da6:	ee15 3a10 	vmov	r3, s10
 8011daa:	07d9      	lsls	r1, r3, #31
 8011dac:	d411      	bmi.n	8011dd2 <_dtoa_r+0x5e2>
 8011dae:	4629      	mov	r1, r5
 8011db0:	4630      	mov	r0, r6
 8011db2:	f000 fbb7 	bl	8012524 <_Bfree>
 8011db6:	2300      	movs	r3, #0
 8011db8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011dba:	f888 3000 	strb.w	r3, [r8]
 8011dbe:	f10b 0301 	add.w	r3, fp, #1
 8011dc2:	6013      	str	r3, [r2, #0]
 8011dc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	f43f ad61 	beq.w	801188e <_dtoa_r+0x9e>
 8011dcc:	f8c3 8000 	str.w	r8, [r3]
 8011dd0:	e55d      	b.n	801188e <_dtoa_r+0x9e>
 8011dd2:	465f      	mov	r7, fp
 8011dd4:	4643      	mov	r3, r8
 8011dd6:	4698      	mov	r8, r3
 8011dd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011ddc:	2a39      	cmp	r2, #57	; 0x39
 8011dde:	d106      	bne.n	8011dee <_dtoa_r+0x5fe>
 8011de0:	9a01      	ldr	r2, [sp, #4]
 8011de2:	429a      	cmp	r2, r3
 8011de4:	d1f7      	bne.n	8011dd6 <_dtoa_r+0x5e6>
 8011de6:	9901      	ldr	r1, [sp, #4]
 8011de8:	2230      	movs	r2, #48	; 0x30
 8011dea:	3701      	adds	r7, #1
 8011dec:	700a      	strb	r2, [r1, #0]
 8011dee:	781a      	ldrb	r2, [r3, #0]
 8011df0:	3201      	adds	r2, #1
 8011df2:	701a      	strb	r2, [r3, #0]
 8011df4:	e7ae      	b.n	8011d54 <_dtoa_r+0x564>
 8011df6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011dfa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e02:	d1b2      	bne.n	8011d6a <_dtoa_r+0x57a>
 8011e04:	e7d3      	b.n	8011dae <_dtoa_r+0x5be>
 8011e06:	bf00      	nop
 8011e08:	08013628 	.word	0x08013628
 8011e0c:	08013600 	.word	0x08013600
 8011e10:	9907      	ldr	r1, [sp, #28]
 8011e12:	2900      	cmp	r1, #0
 8011e14:	f000 80d0 	beq.w	8011fb8 <_dtoa_r+0x7c8>
 8011e18:	9906      	ldr	r1, [sp, #24]
 8011e1a:	2901      	cmp	r1, #1
 8011e1c:	f300 80b4 	bgt.w	8011f88 <_dtoa_r+0x798>
 8011e20:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011e22:	2900      	cmp	r1, #0
 8011e24:	f000 80ac 	beq.w	8011f80 <_dtoa_r+0x790>
 8011e28:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011e2c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011e30:	461c      	mov	r4, r3
 8011e32:	930a      	str	r3, [sp, #40]	; 0x28
 8011e34:	9b04      	ldr	r3, [sp, #16]
 8011e36:	4413      	add	r3, r2
 8011e38:	9304      	str	r3, [sp, #16]
 8011e3a:	9b05      	ldr	r3, [sp, #20]
 8011e3c:	2101      	movs	r1, #1
 8011e3e:	4413      	add	r3, r2
 8011e40:	4630      	mov	r0, r6
 8011e42:	9305      	str	r3, [sp, #20]
 8011e44:	f000 fc26 	bl	8012694 <__i2b>
 8011e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e4a:	4607      	mov	r7, r0
 8011e4c:	f1b8 0f00 	cmp.w	r8, #0
 8011e50:	dd0d      	ble.n	8011e6e <_dtoa_r+0x67e>
 8011e52:	9a05      	ldr	r2, [sp, #20]
 8011e54:	2a00      	cmp	r2, #0
 8011e56:	dd0a      	ble.n	8011e6e <_dtoa_r+0x67e>
 8011e58:	4542      	cmp	r2, r8
 8011e5a:	9904      	ldr	r1, [sp, #16]
 8011e5c:	bfa8      	it	ge
 8011e5e:	4642      	movge	r2, r8
 8011e60:	1a89      	subs	r1, r1, r2
 8011e62:	9104      	str	r1, [sp, #16]
 8011e64:	9905      	ldr	r1, [sp, #20]
 8011e66:	eba8 0802 	sub.w	r8, r8, r2
 8011e6a:	1a8a      	subs	r2, r1, r2
 8011e6c:	9205      	str	r2, [sp, #20]
 8011e6e:	b303      	cbz	r3, 8011eb2 <_dtoa_r+0x6c2>
 8011e70:	9a07      	ldr	r2, [sp, #28]
 8011e72:	2a00      	cmp	r2, #0
 8011e74:	f000 80a5 	beq.w	8011fc2 <_dtoa_r+0x7d2>
 8011e78:	2c00      	cmp	r4, #0
 8011e7a:	dd13      	ble.n	8011ea4 <_dtoa_r+0x6b4>
 8011e7c:	4639      	mov	r1, r7
 8011e7e:	4622      	mov	r2, r4
 8011e80:	4630      	mov	r0, r6
 8011e82:	930d      	str	r3, [sp, #52]	; 0x34
 8011e84:	f000 fcc6 	bl	8012814 <__pow5mult>
 8011e88:	462a      	mov	r2, r5
 8011e8a:	4601      	mov	r1, r0
 8011e8c:	4607      	mov	r7, r0
 8011e8e:	4630      	mov	r0, r6
 8011e90:	f000 fc16 	bl	80126c0 <__multiply>
 8011e94:	4629      	mov	r1, r5
 8011e96:	900a      	str	r0, [sp, #40]	; 0x28
 8011e98:	4630      	mov	r0, r6
 8011e9a:	f000 fb43 	bl	8012524 <_Bfree>
 8011e9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ea0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ea2:	4615      	mov	r5, r2
 8011ea4:	1b1a      	subs	r2, r3, r4
 8011ea6:	d004      	beq.n	8011eb2 <_dtoa_r+0x6c2>
 8011ea8:	4629      	mov	r1, r5
 8011eaa:	4630      	mov	r0, r6
 8011eac:	f000 fcb2 	bl	8012814 <__pow5mult>
 8011eb0:	4605      	mov	r5, r0
 8011eb2:	2101      	movs	r1, #1
 8011eb4:	4630      	mov	r0, r6
 8011eb6:	f000 fbed 	bl	8012694 <__i2b>
 8011eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	4604      	mov	r4, r0
 8011ec0:	f340 8081 	ble.w	8011fc6 <_dtoa_r+0x7d6>
 8011ec4:	461a      	mov	r2, r3
 8011ec6:	4601      	mov	r1, r0
 8011ec8:	4630      	mov	r0, r6
 8011eca:	f000 fca3 	bl	8012814 <__pow5mult>
 8011ece:	9b06      	ldr	r3, [sp, #24]
 8011ed0:	2b01      	cmp	r3, #1
 8011ed2:	4604      	mov	r4, r0
 8011ed4:	dd7a      	ble.n	8011fcc <_dtoa_r+0x7dc>
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	930a      	str	r3, [sp, #40]	; 0x28
 8011eda:	6922      	ldr	r2, [r4, #16]
 8011edc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011ee0:	6910      	ldr	r0, [r2, #16]
 8011ee2:	f000 fb87 	bl	80125f4 <__hi0bits>
 8011ee6:	f1c0 0020 	rsb	r0, r0, #32
 8011eea:	9b05      	ldr	r3, [sp, #20]
 8011eec:	4418      	add	r0, r3
 8011eee:	f010 001f 	ands.w	r0, r0, #31
 8011ef2:	f000 808c 	beq.w	801200e <_dtoa_r+0x81e>
 8011ef6:	f1c0 0220 	rsb	r2, r0, #32
 8011efa:	2a04      	cmp	r2, #4
 8011efc:	f340 8085 	ble.w	801200a <_dtoa_r+0x81a>
 8011f00:	f1c0 001c 	rsb	r0, r0, #28
 8011f04:	9b04      	ldr	r3, [sp, #16]
 8011f06:	4403      	add	r3, r0
 8011f08:	9304      	str	r3, [sp, #16]
 8011f0a:	9b05      	ldr	r3, [sp, #20]
 8011f0c:	4403      	add	r3, r0
 8011f0e:	4480      	add	r8, r0
 8011f10:	9305      	str	r3, [sp, #20]
 8011f12:	9b04      	ldr	r3, [sp, #16]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	dd05      	ble.n	8011f24 <_dtoa_r+0x734>
 8011f18:	4629      	mov	r1, r5
 8011f1a:	461a      	mov	r2, r3
 8011f1c:	4630      	mov	r0, r6
 8011f1e:	f000 fcd3 	bl	80128c8 <__lshift>
 8011f22:	4605      	mov	r5, r0
 8011f24:	9b05      	ldr	r3, [sp, #20]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	dd05      	ble.n	8011f36 <_dtoa_r+0x746>
 8011f2a:	4621      	mov	r1, r4
 8011f2c:	461a      	mov	r2, r3
 8011f2e:	4630      	mov	r0, r6
 8011f30:	f000 fcca 	bl	80128c8 <__lshift>
 8011f34:	4604      	mov	r4, r0
 8011f36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d06a      	beq.n	8012012 <_dtoa_r+0x822>
 8011f3c:	4621      	mov	r1, r4
 8011f3e:	4628      	mov	r0, r5
 8011f40:	f000 fd32 	bl	80129a8 <__mcmp>
 8011f44:	2800      	cmp	r0, #0
 8011f46:	da64      	bge.n	8012012 <_dtoa_r+0x822>
 8011f48:	2300      	movs	r3, #0
 8011f4a:	4629      	mov	r1, r5
 8011f4c:	220a      	movs	r2, #10
 8011f4e:	4630      	mov	r0, r6
 8011f50:	f000 fb0a 	bl	8012568 <__multadd>
 8011f54:	9b07      	ldr	r3, [sp, #28]
 8011f56:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011f5a:	4605      	mov	r5, r0
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	f000 8191 	beq.w	8012284 <_dtoa_r+0xa94>
 8011f62:	4639      	mov	r1, r7
 8011f64:	2300      	movs	r3, #0
 8011f66:	220a      	movs	r2, #10
 8011f68:	4630      	mov	r0, r6
 8011f6a:	f000 fafd 	bl	8012568 <__multadd>
 8011f6e:	f1ba 0f00 	cmp.w	sl, #0
 8011f72:	4607      	mov	r7, r0
 8011f74:	f300 808d 	bgt.w	8012092 <_dtoa_r+0x8a2>
 8011f78:	9b06      	ldr	r3, [sp, #24]
 8011f7a:	2b02      	cmp	r3, #2
 8011f7c:	dc50      	bgt.n	8012020 <_dtoa_r+0x830>
 8011f7e:	e088      	b.n	8012092 <_dtoa_r+0x8a2>
 8011f80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011f82:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011f86:	e751      	b.n	8011e2c <_dtoa_r+0x63c>
 8011f88:	f109 34ff 	add.w	r4, r9, #4294967295
 8011f8c:	42a3      	cmp	r3, r4
 8011f8e:	bfbf      	itttt	lt
 8011f90:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8011f92:	1ae3      	sublt	r3, r4, r3
 8011f94:	18d2      	addlt	r2, r2, r3
 8011f96:	9209      	strlt	r2, [sp, #36]	; 0x24
 8011f98:	bfb6      	itet	lt
 8011f9a:	4623      	movlt	r3, r4
 8011f9c:	1b1c      	subge	r4, r3, r4
 8011f9e:	2400      	movlt	r4, #0
 8011fa0:	f1b9 0f00 	cmp.w	r9, #0
 8011fa4:	bfb5      	itete	lt
 8011fa6:	9a04      	ldrlt	r2, [sp, #16]
 8011fa8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8011fac:	eba2 0809 	sublt.w	r8, r2, r9
 8011fb0:	464a      	movge	r2, r9
 8011fb2:	bfb8      	it	lt
 8011fb4:	2200      	movlt	r2, #0
 8011fb6:	e73c      	b.n	8011e32 <_dtoa_r+0x642>
 8011fb8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011fbc:	9f07      	ldr	r7, [sp, #28]
 8011fbe:	461c      	mov	r4, r3
 8011fc0:	e744      	b.n	8011e4c <_dtoa_r+0x65c>
 8011fc2:	461a      	mov	r2, r3
 8011fc4:	e770      	b.n	8011ea8 <_dtoa_r+0x6b8>
 8011fc6:	9b06      	ldr	r3, [sp, #24]
 8011fc8:	2b01      	cmp	r3, #1
 8011fca:	dc18      	bgt.n	8011ffe <_dtoa_r+0x80e>
 8011fcc:	9b02      	ldr	r3, [sp, #8]
 8011fce:	b9b3      	cbnz	r3, 8011ffe <_dtoa_r+0x80e>
 8011fd0:	9b03      	ldr	r3, [sp, #12]
 8011fd2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8011fd6:	b9a2      	cbnz	r2, 8012002 <_dtoa_r+0x812>
 8011fd8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011fdc:	0d12      	lsrs	r2, r2, #20
 8011fde:	0512      	lsls	r2, r2, #20
 8011fe0:	b18a      	cbz	r2, 8012006 <_dtoa_r+0x816>
 8011fe2:	9b04      	ldr	r3, [sp, #16]
 8011fe4:	3301      	adds	r3, #1
 8011fe6:	9304      	str	r3, [sp, #16]
 8011fe8:	9b05      	ldr	r3, [sp, #20]
 8011fea:	3301      	adds	r3, #1
 8011fec:	9305      	str	r3, [sp, #20]
 8011fee:	2301      	movs	r3, #1
 8011ff0:	930a      	str	r3, [sp, #40]	; 0x28
 8011ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	f47f af70 	bne.w	8011eda <_dtoa_r+0x6ea>
 8011ffa:	2001      	movs	r0, #1
 8011ffc:	e775      	b.n	8011eea <_dtoa_r+0x6fa>
 8011ffe:	2300      	movs	r3, #0
 8012000:	e7f6      	b.n	8011ff0 <_dtoa_r+0x800>
 8012002:	9b02      	ldr	r3, [sp, #8]
 8012004:	e7f4      	b.n	8011ff0 <_dtoa_r+0x800>
 8012006:	920a      	str	r2, [sp, #40]	; 0x28
 8012008:	e7f3      	b.n	8011ff2 <_dtoa_r+0x802>
 801200a:	d082      	beq.n	8011f12 <_dtoa_r+0x722>
 801200c:	4610      	mov	r0, r2
 801200e:	301c      	adds	r0, #28
 8012010:	e778      	b.n	8011f04 <_dtoa_r+0x714>
 8012012:	f1b9 0f00 	cmp.w	r9, #0
 8012016:	dc37      	bgt.n	8012088 <_dtoa_r+0x898>
 8012018:	9b06      	ldr	r3, [sp, #24]
 801201a:	2b02      	cmp	r3, #2
 801201c:	dd34      	ble.n	8012088 <_dtoa_r+0x898>
 801201e:	46ca      	mov	sl, r9
 8012020:	f1ba 0f00 	cmp.w	sl, #0
 8012024:	d10d      	bne.n	8012042 <_dtoa_r+0x852>
 8012026:	4621      	mov	r1, r4
 8012028:	4653      	mov	r3, sl
 801202a:	2205      	movs	r2, #5
 801202c:	4630      	mov	r0, r6
 801202e:	f000 fa9b 	bl	8012568 <__multadd>
 8012032:	4601      	mov	r1, r0
 8012034:	4604      	mov	r4, r0
 8012036:	4628      	mov	r0, r5
 8012038:	f000 fcb6 	bl	80129a8 <__mcmp>
 801203c:	2800      	cmp	r0, #0
 801203e:	f73f adeb 	bgt.w	8011c18 <_dtoa_r+0x428>
 8012042:	9b08      	ldr	r3, [sp, #32]
 8012044:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012048:	ea6f 0b03 	mvn.w	fp, r3
 801204c:	f04f 0900 	mov.w	r9, #0
 8012050:	4621      	mov	r1, r4
 8012052:	4630      	mov	r0, r6
 8012054:	f000 fa66 	bl	8012524 <_Bfree>
 8012058:	2f00      	cmp	r7, #0
 801205a:	f43f aea8 	beq.w	8011dae <_dtoa_r+0x5be>
 801205e:	f1b9 0f00 	cmp.w	r9, #0
 8012062:	d005      	beq.n	8012070 <_dtoa_r+0x880>
 8012064:	45b9      	cmp	r9, r7
 8012066:	d003      	beq.n	8012070 <_dtoa_r+0x880>
 8012068:	4649      	mov	r1, r9
 801206a:	4630      	mov	r0, r6
 801206c:	f000 fa5a 	bl	8012524 <_Bfree>
 8012070:	4639      	mov	r1, r7
 8012072:	4630      	mov	r0, r6
 8012074:	f000 fa56 	bl	8012524 <_Bfree>
 8012078:	e699      	b.n	8011dae <_dtoa_r+0x5be>
 801207a:	2400      	movs	r4, #0
 801207c:	4627      	mov	r7, r4
 801207e:	e7e0      	b.n	8012042 <_dtoa_r+0x852>
 8012080:	46bb      	mov	fp, r7
 8012082:	4604      	mov	r4, r0
 8012084:	4607      	mov	r7, r0
 8012086:	e5c7      	b.n	8011c18 <_dtoa_r+0x428>
 8012088:	9b07      	ldr	r3, [sp, #28]
 801208a:	46ca      	mov	sl, r9
 801208c:	2b00      	cmp	r3, #0
 801208e:	f000 8100 	beq.w	8012292 <_dtoa_r+0xaa2>
 8012092:	f1b8 0f00 	cmp.w	r8, #0
 8012096:	dd05      	ble.n	80120a4 <_dtoa_r+0x8b4>
 8012098:	4639      	mov	r1, r7
 801209a:	4642      	mov	r2, r8
 801209c:	4630      	mov	r0, r6
 801209e:	f000 fc13 	bl	80128c8 <__lshift>
 80120a2:	4607      	mov	r7, r0
 80120a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d05d      	beq.n	8012166 <_dtoa_r+0x976>
 80120aa:	6879      	ldr	r1, [r7, #4]
 80120ac:	4630      	mov	r0, r6
 80120ae:	f000 f9f9 	bl	80124a4 <_Balloc>
 80120b2:	4680      	mov	r8, r0
 80120b4:	b928      	cbnz	r0, 80120c2 <_dtoa_r+0x8d2>
 80120b6:	4b82      	ldr	r3, [pc, #520]	; (80122c0 <_dtoa_r+0xad0>)
 80120b8:	4602      	mov	r2, r0
 80120ba:	f240 21ea 	movw	r1, #746	; 0x2ea
 80120be:	f7ff bbaf 	b.w	8011820 <_dtoa_r+0x30>
 80120c2:	693a      	ldr	r2, [r7, #16]
 80120c4:	3202      	adds	r2, #2
 80120c6:	0092      	lsls	r2, r2, #2
 80120c8:	f107 010c 	add.w	r1, r7, #12
 80120cc:	300c      	adds	r0, #12
 80120ce:	f7fe fd34 	bl	8010b3a <memcpy>
 80120d2:	2201      	movs	r2, #1
 80120d4:	4641      	mov	r1, r8
 80120d6:	4630      	mov	r0, r6
 80120d8:	f000 fbf6 	bl	80128c8 <__lshift>
 80120dc:	9b01      	ldr	r3, [sp, #4]
 80120de:	3301      	adds	r3, #1
 80120e0:	9304      	str	r3, [sp, #16]
 80120e2:	9b01      	ldr	r3, [sp, #4]
 80120e4:	4453      	add	r3, sl
 80120e6:	9308      	str	r3, [sp, #32]
 80120e8:	9b02      	ldr	r3, [sp, #8]
 80120ea:	f003 0301 	and.w	r3, r3, #1
 80120ee:	46b9      	mov	r9, r7
 80120f0:	9307      	str	r3, [sp, #28]
 80120f2:	4607      	mov	r7, r0
 80120f4:	9b04      	ldr	r3, [sp, #16]
 80120f6:	4621      	mov	r1, r4
 80120f8:	3b01      	subs	r3, #1
 80120fa:	4628      	mov	r0, r5
 80120fc:	9302      	str	r3, [sp, #8]
 80120fe:	f7ff fae9 	bl	80116d4 <quorem>
 8012102:	4603      	mov	r3, r0
 8012104:	3330      	adds	r3, #48	; 0x30
 8012106:	9005      	str	r0, [sp, #20]
 8012108:	4649      	mov	r1, r9
 801210a:	4628      	mov	r0, r5
 801210c:	9309      	str	r3, [sp, #36]	; 0x24
 801210e:	f000 fc4b 	bl	80129a8 <__mcmp>
 8012112:	463a      	mov	r2, r7
 8012114:	4682      	mov	sl, r0
 8012116:	4621      	mov	r1, r4
 8012118:	4630      	mov	r0, r6
 801211a:	f000 fc61 	bl	80129e0 <__mdiff>
 801211e:	68c2      	ldr	r2, [r0, #12]
 8012120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012122:	4680      	mov	r8, r0
 8012124:	bb0a      	cbnz	r2, 801216a <_dtoa_r+0x97a>
 8012126:	4601      	mov	r1, r0
 8012128:	4628      	mov	r0, r5
 801212a:	f000 fc3d 	bl	80129a8 <__mcmp>
 801212e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012130:	4602      	mov	r2, r0
 8012132:	4641      	mov	r1, r8
 8012134:	4630      	mov	r0, r6
 8012136:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801213a:	f000 f9f3 	bl	8012524 <_Bfree>
 801213e:	9b06      	ldr	r3, [sp, #24]
 8012140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012142:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012146:	ea43 0102 	orr.w	r1, r3, r2
 801214a:	9b07      	ldr	r3, [sp, #28]
 801214c:	430b      	orrs	r3, r1
 801214e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012150:	d10d      	bne.n	801216e <_dtoa_r+0x97e>
 8012152:	2b39      	cmp	r3, #57	; 0x39
 8012154:	d029      	beq.n	80121aa <_dtoa_r+0x9ba>
 8012156:	f1ba 0f00 	cmp.w	sl, #0
 801215a:	dd01      	ble.n	8012160 <_dtoa_r+0x970>
 801215c:	9b05      	ldr	r3, [sp, #20]
 801215e:	3331      	adds	r3, #49	; 0x31
 8012160:	9a02      	ldr	r2, [sp, #8]
 8012162:	7013      	strb	r3, [r2, #0]
 8012164:	e774      	b.n	8012050 <_dtoa_r+0x860>
 8012166:	4638      	mov	r0, r7
 8012168:	e7b8      	b.n	80120dc <_dtoa_r+0x8ec>
 801216a:	2201      	movs	r2, #1
 801216c:	e7e1      	b.n	8012132 <_dtoa_r+0x942>
 801216e:	f1ba 0f00 	cmp.w	sl, #0
 8012172:	db06      	blt.n	8012182 <_dtoa_r+0x992>
 8012174:	9906      	ldr	r1, [sp, #24]
 8012176:	ea41 0a0a 	orr.w	sl, r1, sl
 801217a:	9907      	ldr	r1, [sp, #28]
 801217c:	ea5a 0101 	orrs.w	r1, sl, r1
 8012180:	d120      	bne.n	80121c4 <_dtoa_r+0x9d4>
 8012182:	2a00      	cmp	r2, #0
 8012184:	ddec      	ble.n	8012160 <_dtoa_r+0x970>
 8012186:	4629      	mov	r1, r5
 8012188:	2201      	movs	r2, #1
 801218a:	4630      	mov	r0, r6
 801218c:	9304      	str	r3, [sp, #16]
 801218e:	f000 fb9b 	bl	80128c8 <__lshift>
 8012192:	4621      	mov	r1, r4
 8012194:	4605      	mov	r5, r0
 8012196:	f000 fc07 	bl	80129a8 <__mcmp>
 801219a:	2800      	cmp	r0, #0
 801219c:	9b04      	ldr	r3, [sp, #16]
 801219e:	dc02      	bgt.n	80121a6 <_dtoa_r+0x9b6>
 80121a0:	d1de      	bne.n	8012160 <_dtoa_r+0x970>
 80121a2:	07da      	lsls	r2, r3, #31
 80121a4:	d5dc      	bpl.n	8012160 <_dtoa_r+0x970>
 80121a6:	2b39      	cmp	r3, #57	; 0x39
 80121a8:	d1d8      	bne.n	801215c <_dtoa_r+0x96c>
 80121aa:	9a02      	ldr	r2, [sp, #8]
 80121ac:	2339      	movs	r3, #57	; 0x39
 80121ae:	7013      	strb	r3, [r2, #0]
 80121b0:	4643      	mov	r3, r8
 80121b2:	4698      	mov	r8, r3
 80121b4:	3b01      	subs	r3, #1
 80121b6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80121ba:	2a39      	cmp	r2, #57	; 0x39
 80121bc:	d051      	beq.n	8012262 <_dtoa_r+0xa72>
 80121be:	3201      	adds	r2, #1
 80121c0:	701a      	strb	r2, [r3, #0]
 80121c2:	e745      	b.n	8012050 <_dtoa_r+0x860>
 80121c4:	2a00      	cmp	r2, #0
 80121c6:	dd03      	ble.n	80121d0 <_dtoa_r+0x9e0>
 80121c8:	2b39      	cmp	r3, #57	; 0x39
 80121ca:	d0ee      	beq.n	80121aa <_dtoa_r+0x9ba>
 80121cc:	3301      	adds	r3, #1
 80121ce:	e7c7      	b.n	8012160 <_dtoa_r+0x970>
 80121d0:	9a04      	ldr	r2, [sp, #16]
 80121d2:	9908      	ldr	r1, [sp, #32]
 80121d4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80121d8:	428a      	cmp	r2, r1
 80121da:	d02b      	beq.n	8012234 <_dtoa_r+0xa44>
 80121dc:	4629      	mov	r1, r5
 80121de:	2300      	movs	r3, #0
 80121e0:	220a      	movs	r2, #10
 80121e2:	4630      	mov	r0, r6
 80121e4:	f000 f9c0 	bl	8012568 <__multadd>
 80121e8:	45b9      	cmp	r9, r7
 80121ea:	4605      	mov	r5, r0
 80121ec:	f04f 0300 	mov.w	r3, #0
 80121f0:	f04f 020a 	mov.w	r2, #10
 80121f4:	4649      	mov	r1, r9
 80121f6:	4630      	mov	r0, r6
 80121f8:	d107      	bne.n	801220a <_dtoa_r+0xa1a>
 80121fa:	f000 f9b5 	bl	8012568 <__multadd>
 80121fe:	4681      	mov	r9, r0
 8012200:	4607      	mov	r7, r0
 8012202:	9b04      	ldr	r3, [sp, #16]
 8012204:	3301      	adds	r3, #1
 8012206:	9304      	str	r3, [sp, #16]
 8012208:	e774      	b.n	80120f4 <_dtoa_r+0x904>
 801220a:	f000 f9ad 	bl	8012568 <__multadd>
 801220e:	4639      	mov	r1, r7
 8012210:	4681      	mov	r9, r0
 8012212:	2300      	movs	r3, #0
 8012214:	220a      	movs	r2, #10
 8012216:	4630      	mov	r0, r6
 8012218:	f000 f9a6 	bl	8012568 <__multadd>
 801221c:	4607      	mov	r7, r0
 801221e:	e7f0      	b.n	8012202 <_dtoa_r+0xa12>
 8012220:	f1ba 0f00 	cmp.w	sl, #0
 8012224:	9a01      	ldr	r2, [sp, #4]
 8012226:	bfcc      	ite	gt
 8012228:	46d0      	movgt	r8, sl
 801222a:	f04f 0801 	movle.w	r8, #1
 801222e:	4490      	add	r8, r2
 8012230:	f04f 0900 	mov.w	r9, #0
 8012234:	4629      	mov	r1, r5
 8012236:	2201      	movs	r2, #1
 8012238:	4630      	mov	r0, r6
 801223a:	9302      	str	r3, [sp, #8]
 801223c:	f000 fb44 	bl	80128c8 <__lshift>
 8012240:	4621      	mov	r1, r4
 8012242:	4605      	mov	r5, r0
 8012244:	f000 fbb0 	bl	80129a8 <__mcmp>
 8012248:	2800      	cmp	r0, #0
 801224a:	dcb1      	bgt.n	80121b0 <_dtoa_r+0x9c0>
 801224c:	d102      	bne.n	8012254 <_dtoa_r+0xa64>
 801224e:	9b02      	ldr	r3, [sp, #8]
 8012250:	07db      	lsls	r3, r3, #31
 8012252:	d4ad      	bmi.n	80121b0 <_dtoa_r+0x9c0>
 8012254:	4643      	mov	r3, r8
 8012256:	4698      	mov	r8, r3
 8012258:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801225c:	2a30      	cmp	r2, #48	; 0x30
 801225e:	d0fa      	beq.n	8012256 <_dtoa_r+0xa66>
 8012260:	e6f6      	b.n	8012050 <_dtoa_r+0x860>
 8012262:	9a01      	ldr	r2, [sp, #4]
 8012264:	429a      	cmp	r2, r3
 8012266:	d1a4      	bne.n	80121b2 <_dtoa_r+0x9c2>
 8012268:	f10b 0b01 	add.w	fp, fp, #1
 801226c:	2331      	movs	r3, #49	; 0x31
 801226e:	e778      	b.n	8012162 <_dtoa_r+0x972>
 8012270:	4b14      	ldr	r3, [pc, #80]	; (80122c4 <_dtoa_r+0xad4>)
 8012272:	f7ff bb27 	b.w	80118c4 <_dtoa_r+0xd4>
 8012276:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012278:	2b00      	cmp	r3, #0
 801227a:	f47f ab03 	bne.w	8011884 <_dtoa_r+0x94>
 801227e:	4b12      	ldr	r3, [pc, #72]	; (80122c8 <_dtoa_r+0xad8>)
 8012280:	f7ff bb20 	b.w	80118c4 <_dtoa_r+0xd4>
 8012284:	f1ba 0f00 	cmp.w	sl, #0
 8012288:	dc03      	bgt.n	8012292 <_dtoa_r+0xaa2>
 801228a:	9b06      	ldr	r3, [sp, #24]
 801228c:	2b02      	cmp	r3, #2
 801228e:	f73f aec7 	bgt.w	8012020 <_dtoa_r+0x830>
 8012292:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012296:	4621      	mov	r1, r4
 8012298:	4628      	mov	r0, r5
 801229a:	f7ff fa1b 	bl	80116d4 <quorem>
 801229e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80122a2:	f808 3b01 	strb.w	r3, [r8], #1
 80122a6:	9a01      	ldr	r2, [sp, #4]
 80122a8:	eba8 0202 	sub.w	r2, r8, r2
 80122ac:	4592      	cmp	sl, r2
 80122ae:	ddb7      	ble.n	8012220 <_dtoa_r+0xa30>
 80122b0:	4629      	mov	r1, r5
 80122b2:	2300      	movs	r3, #0
 80122b4:	220a      	movs	r2, #10
 80122b6:	4630      	mov	r0, r6
 80122b8:	f000 f956 	bl	8012568 <__multadd>
 80122bc:	4605      	mov	r5, r0
 80122be:	e7ea      	b.n	8012296 <_dtoa_r+0xaa6>
 80122c0:	08013593 	.word	0x08013593
 80122c4:	080134f0 	.word	0x080134f0
 80122c8:	08013514 	.word	0x08013514

080122cc <__sflush_r>:
 80122cc:	898a      	ldrh	r2, [r1, #12]
 80122ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122d2:	4605      	mov	r5, r0
 80122d4:	0710      	lsls	r0, r2, #28
 80122d6:	460c      	mov	r4, r1
 80122d8:	d458      	bmi.n	801238c <__sflush_r+0xc0>
 80122da:	684b      	ldr	r3, [r1, #4]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	dc05      	bgt.n	80122ec <__sflush_r+0x20>
 80122e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	dc02      	bgt.n	80122ec <__sflush_r+0x20>
 80122e6:	2000      	movs	r0, #0
 80122e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80122ee:	2e00      	cmp	r6, #0
 80122f0:	d0f9      	beq.n	80122e6 <__sflush_r+0x1a>
 80122f2:	2300      	movs	r3, #0
 80122f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80122f8:	682f      	ldr	r7, [r5, #0]
 80122fa:	602b      	str	r3, [r5, #0]
 80122fc:	d032      	beq.n	8012364 <__sflush_r+0x98>
 80122fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012300:	89a3      	ldrh	r3, [r4, #12]
 8012302:	075a      	lsls	r2, r3, #29
 8012304:	d505      	bpl.n	8012312 <__sflush_r+0x46>
 8012306:	6863      	ldr	r3, [r4, #4]
 8012308:	1ac0      	subs	r0, r0, r3
 801230a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801230c:	b10b      	cbz	r3, 8012312 <__sflush_r+0x46>
 801230e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012310:	1ac0      	subs	r0, r0, r3
 8012312:	2300      	movs	r3, #0
 8012314:	4602      	mov	r2, r0
 8012316:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012318:	6a21      	ldr	r1, [r4, #32]
 801231a:	4628      	mov	r0, r5
 801231c:	47b0      	blx	r6
 801231e:	1c43      	adds	r3, r0, #1
 8012320:	89a3      	ldrh	r3, [r4, #12]
 8012322:	d106      	bne.n	8012332 <__sflush_r+0x66>
 8012324:	6829      	ldr	r1, [r5, #0]
 8012326:	291d      	cmp	r1, #29
 8012328:	d82c      	bhi.n	8012384 <__sflush_r+0xb8>
 801232a:	4a2a      	ldr	r2, [pc, #168]	; (80123d4 <__sflush_r+0x108>)
 801232c:	40ca      	lsrs	r2, r1
 801232e:	07d6      	lsls	r6, r2, #31
 8012330:	d528      	bpl.n	8012384 <__sflush_r+0xb8>
 8012332:	2200      	movs	r2, #0
 8012334:	6062      	str	r2, [r4, #4]
 8012336:	04d9      	lsls	r1, r3, #19
 8012338:	6922      	ldr	r2, [r4, #16]
 801233a:	6022      	str	r2, [r4, #0]
 801233c:	d504      	bpl.n	8012348 <__sflush_r+0x7c>
 801233e:	1c42      	adds	r2, r0, #1
 8012340:	d101      	bne.n	8012346 <__sflush_r+0x7a>
 8012342:	682b      	ldr	r3, [r5, #0]
 8012344:	b903      	cbnz	r3, 8012348 <__sflush_r+0x7c>
 8012346:	6560      	str	r0, [r4, #84]	; 0x54
 8012348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801234a:	602f      	str	r7, [r5, #0]
 801234c:	2900      	cmp	r1, #0
 801234e:	d0ca      	beq.n	80122e6 <__sflush_r+0x1a>
 8012350:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012354:	4299      	cmp	r1, r3
 8012356:	d002      	beq.n	801235e <__sflush_r+0x92>
 8012358:	4628      	mov	r0, r5
 801235a:	f000 fc3d 	bl	8012bd8 <_free_r>
 801235e:	2000      	movs	r0, #0
 8012360:	6360      	str	r0, [r4, #52]	; 0x34
 8012362:	e7c1      	b.n	80122e8 <__sflush_r+0x1c>
 8012364:	6a21      	ldr	r1, [r4, #32]
 8012366:	2301      	movs	r3, #1
 8012368:	4628      	mov	r0, r5
 801236a:	47b0      	blx	r6
 801236c:	1c41      	adds	r1, r0, #1
 801236e:	d1c7      	bne.n	8012300 <__sflush_r+0x34>
 8012370:	682b      	ldr	r3, [r5, #0]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d0c4      	beq.n	8012300 <__sflush_r+0x34>
 8012376:	2b1d      	cmp	r3, #29
 8012378:	d001      	beq.n	801237e <__sflush_r+0xb2>
 801237a:	2b16      	cmp	r3, #22
 801237c:	d101      	bne.n	8012382 <__sflush_r+0xb6>
 801237e:	602f      	str	r7, [r5, #0]
 8012380:	e7b1      	b.n	80122e6 <__sflush_r+0x1a>
 8012382:	89a3      	ldrh	r3, [r4, #12]
 8012384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012388:	81a3      	strh	r3, [r4, #12]
 801238a:	e7ad      	b.n	80122e8 <__sflush_r+0x1c>
 801238c:	690f      	ldr	r7, [r1, #16]
 801238e:	2f00      	cmp	r7, #0
 8012390:	d0a9      	beq.n	80122e6 <__sflush_r+0x1a>
 8012392:	0793      	lsls	r3, r2, #30
 8012394:	680e      	ldr	r6, [r1, #0]
 8012396:	bf08      	it	eq
 8012398:	694b      	ldreq	r3, [r1, #20]
 801239a:	600f      	str	r7, [r1, #0]
 801239c:	bf18      	it	ne
 801239e:	2300      	movne	r3, #0
 80123a0:	eba6 0807 	sub.w	r8, r6, r7
 80123a4:	608b      	str	r3, [r1, #8]
 80123a6:	f1b8 0f00 	cmp.w	r8, #0
 80123aa:	dd9c      	ble.n	80122e6 <__sflush_r+0x1a>
 80123ac:	6a21      	ldr	r1, [r4, #32]
 80123ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80123b0:	4643      	mov	r3, r8
 80123b2:	463a      	mov	r2, r7
 80123b4:	4628      	mov	r0, r5
 80123b6:	47b0      	blx	r6
 80123b8:	2800      	cmp	r0, #0
 80123ba:	dc06      	bgt.n	80123ca <__sflush_r+0xfe>
 80123bc:	89a3      	ldrh	r3, [r4, #12]
 80123be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123c2:	81a3      	strh	r3, [r4, #12]
 80123c4:	f04f 30ff 	mov.w	r0, #4294967295
 80123c8:	e78e      	b.n	80122e8 <__sflush_r+0x1c>
 80123ca:	4407      	add	r7, r0
 80123cc:	eba8 0800 	sub.w	r8, r8, r0
 80123d0:	e7e9      	b.n	80123a6 <__sflush_r+0xda>
 80123d2:	bf00      	nop
 80123d4:	20400001 	.word	0x20400001

080123d8 <_fflush_r>:
 80123d8:	b538      	push	{r3, r4, r5, lr}
 80123da:	690b      	ldr	r3, [r1, #16]
 80123dc:	4605      	mov	r5, r0
 80123de:	460c      	mov	r4, r1
 80123e0:	b913      	cbnz	r3, 80123e8 <_fflush_r+0x10>
 80123e2:	2500      	movs	r5, #0
 80123e4:	4628      	mov	r0, r5
 80123e6:	bd38      	pop	{r3, r4, r5, pc}
 80123e8:	b118      	cbz	r0, 80123f2 <_fflush_r+0x1a>
 80123ea:	6983      	ldr	r3, [r0, #24]
 80123ec:	b90b      	cbnz	r3, 80123f2 <_fflush_r+0x1a>
 80123ee:	f7fe fadf 	bl	80109b0 <__sinit>
 80123f2:	4b14      	ldr	r3, [pc, #80]	; (8012444 <_fflush_r+0x6c>)
 80123f4:	429c      	cmp	r4, r3
 80123f6:	d11b      	bne.n	8012430 <_fflush_r+0x58>
 80123f8:	686c      	ldr	r4, [r5, #4]
 80123fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d0ef      	beq.n	80123e2 <_fflush_r+0xa>
 8012402:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012404:	07d0      	lsls	r0, r2, #31
 8012406:	d404      	bmi.n	8012412 <_fflush_r+0x3a>
 8012408:	0599      	lsls	r1, r3, #22
 801240a:	d402      	bmi.n	8012412 <_fflush_r+0x3a>
 801240c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801240e:	f7fe fb92 	bl	8010b36 <__retarget_lock_acquire_recursive>
 8012412:	4628      	mov	r0, r5
 8012414:	4621      	mov	r1, r4
 8012416:	f7ff ff59 	bl	80122cc <__sflush_r>
 801241a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801241c:	07da      	lsls	r2, r3, #31
 801241e:	4605      	mov	r5, r0
 8012420:	d4e0      	bmi.n	80123e4 <_fflush_r+0xc>
 8012422:	89a3      	ldrh	r3, [r4, #12]
 8012424:	059b      	lsls	r3, r3, #22
 8012426:	d4dd      	bmi.n	80123e4 <_fflush_r+0xc>
 8012428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801242a:	f7fe fb85 	bl	8010b38 <__retarget_lock_release_recursive>
 801242e:	e7d9      	b.n	80123e4 <_fflush_r+0xc>
 8012430:	4b05      	ldr	r3, [pc, #20]	; (8012448 <_fflush_r+0x70>)
 8012432:	429c      	cmp	r4, r3
 8012434:	d101      	bne.n	801243a <_fflush_r+0x62>
 8012436:	68ac      	ldr	r4, [r5, #8]
 8012438:	e7df      	b.n	80123fa <_fflush_r+0x22>
 801243a:	4b04      	ldr	r3, [pc, #16]	; (801244c <_fflush_r+0x74>)
 801243c:	429c      	cmp	r4, r3
 801243e:	bf08      	it	eq
 8012440:	68ec      	ldreq	r4, [r5, #12]
 8012442:	e7da      	b.n	80123fa <_fflush_r+0x22>
 8012444:	0801349c 	.word	0x0801349c
 8012448:	080134bc 	.word	0x080134bc
 801244c:	0801347c 	.word	0x0801347c

08012450 <_localeconv_r>:
 8012450:	4800      	ldr	r0, [pc, #0]	; (8012454 <_localeconv_r+0x4>)
 8012452:	4770      	bx	lr
 8012454:	24000180 	.word	0x24000180

08012458 <_lseek_r>:
 8012458:	b538      	push	{r3, r4, r5, lr}
 801245a:	4d07      	ldr	r5, [pc, #28]	; (8012478 <_lseek_r+0x20>)
 801245c:	4604      	mov	r4, r0
 801245e:	4608      	mov	r0, r1
 8012460:	4611      	mov	r1, r2
 8012462:	2200      	movs	r2, #0
 8012464:	602a      	str	r2, [r5, #0]
 8012466:	461a      	mov	r2, r3
 8012468:	f7ef f83e 	bl	80014e8 <_lseek>
 801246c:	1c43      	adds	r3, r0, #1
 801246e:	d102      	bne.n	8012476 <_lseek_r+0x1e>
 8012470:	682b      	ldr	r3, [r5, #0]
 8012472:	b103      	cbz	r3, 8012476 <_lseek_r+0x1e>
 8012474:	6023      	str	r3, [r4, #0]
 8012476:	bd38      	pop	{r3, r4, r5, pc}
 8012478:	2400c7e4 	.word	0x2400c7e4

0801247c <malloc>:
 801247c:	4b02      	ldr	r3, [pc, #8]	; (8012488 <malloc+0xc>)
 801247e:	4601      	mov	r1, r0
 8012480:	6818      	ldr	r0, [r3, #0]
 8012482:	f7fe bb91 	b.w	8010ba8 <_malloc_r>
 8012486:	bf00      	nop
 8012488:	2400002c 	.word	0x2400002c

0801248c <__malloc_lock>:
 801248c:	4801      	ldr	r0, [pc, #4]	; (8012494 <__malloc_lock+0x8>)
 801248e:	f7fe bb52 	b.w	8010b36 <__retarget_lock_acquire_recursive>
 8012492:	bf00      	nop
 8012494:	2400c7d8 	.word	0x2400c7d8

08012498 <__malloc_unlock>:
 8012498:	4801      	ldr	r0, [pc, #4]	; (80124a0 <__malloc_unlock+0x8>)
 801249a:	f7fe bb4d 	b.w	8010b38 <__retarget_lock_release_recursive>
 801249e:	bf00      	nop
 80124a0:	2400c7d8 	.word	0x2400c7d8

080124a4 <_Balloc>:
 80124a4:	b570      	push	{r4, r5, r6, lr}
 80124a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80124a8:	4604      	mov	r4, r0
 80124aa:	460d      	mov	r5, r1
 80124ac:	b976      	cbnz	r6, 80124cc <_Balloc+0x28>
 80124ae:	2010      	movs	r0, #16
 80124b0:	f7ff ffe4 	bl	801247c <malloc>
 80124b4:	4602      	mov	r2, r0
 80124b6:	6260      	str	r0, [r4, #36]	; 0x24
 80124b8:	b920      	cbnz	r0, 80124c4 <_Balloc+0x20>
 80124ba:	4b18      	ldr	r3, [pc, #96]	; (801251c <_Balloc+0x78>)
 80124bc:	4818      	ldr	r0, [pc, #96]	; (8012520 <_Balloc+0x7c>)
 80124be:	2166      	movs	r1, #102	; 0x66
 80124c0:	f000 fbe8 	bl	8012c94 <__assert_func>
 80124c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80124c8:	6006      	str	r6, [r0, #0]
 80124ca:	60c6      	str	r6, [r0, #12]
 80124cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80124ce:	68f3      	ldr	r3, [r6, #12]
 80124d0:	b183      	cbz	r3, 80124f4 <_Balloc+0x50>
 80124d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124d4:	68db      	ldr	r3, [r3, #12]
 80124d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80124da:	b9b8      	cbnz	r0, 801250c <_Balloc+0x68>
 80124dc:	2101      	movs	r1, #1
 80124de:	fa01 f605 	lsl.w	r6, r1, r5
 80124e2:	1d72      	adds	r2, r6, #5
 80124e4:	0092      	lsls	r2, r2, #2
 80124e6:	4620      	mov	r0, r4
 80124e8:	f000 fb60 	bl	8012bac <_calloc_r>
 80124ec:	b160      	cbz	r0, 8012508 <_Balloc+0x64>
 80124ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80124f2:	e00e      	b.n	8012512 <_Balloc+0x6e>
 80124f4:	2221      	movs	r2, #33	; 0x21
 80124f6:	2104      	movs	r1, #4
 80124f8:	4620      	mov	r0, r4
 80124fa:	f000 fb57 	bl	8012bac <_calloc_r>
 80124fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012500:	60f0      	str	r0, [r6, #12]
 8012502:	68db      	ldr	r3, [r3, #12]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d1e4      	bne.n	80124d2 <_Balloc+0x2e>
 8012508:	2000      	movs	r0, #0
 801250a:	bd70      	pop	{r4, r5, r6, pc}
 801250c:	6802      	ldr	r2, [r0, #0]
 801250e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012512:	2300      	movs	r3, #0
 8012514:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012518:	e7f7      	b.n	801250a <_Balloc+0x66>
 801251a:	bf00      	nop
 801251c:	08013521 	.word	0x08013521
 8012520:	080135a4 	.word	0x080135a4

08012524 <_Bfree>:
 8012524:	b570      	push	{r4, r5, r6, lr}
 8012526:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012528:	4605      	mov	r5, r0
 801252a:	460c      	mov	r4, r1
 801252c:	b976      	cbnz	r6, 801254c <_Bfree+0x28>
 801252e:	2010      	movs	r0, #16
 8012530:	f7ff ffa4 	bl	801247c <malloc>
 8012534:	4602      	mov	r2, r0
 8012536:	6268      	str	r0, [r5, #36]	; 0x24
 8012538:	b920      	cbnz	r0, 8012544 <_Bfree+0x20>
 801253a:	4b09      	ldr	r3, [pc, #36]	; (8012560 <_Bfree+0x3c>)
 801253c:	4809      	ldr	r0, [pc, #36]	; (8012564 <_Bfree+0x40>)
 801253e:	218a      	movs	r1, #138	; 0x8a
 8012540:	f000 fba8 	bl	8012c94 <__assert_func>
 8012544:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012548:	6006      	str	r6, [r0, #0]
 801254a:	60c6      	str	r6, [r0, #12]
 801254c:	b13c      	cbz	r4, 801255e <_Bfree+0x3a>
 801254e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012550:	6862      	ldr	r2, [r4, #4]
 8012552:	68db      	ldr	r3, [r3, #12]
 8012554:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012558:	6021      	str	r1, [r4, #0]
 801255a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801255e:	bd70      	pop	{r4, r5, r6, pc}
 8012560:	08013521 	.word	0x08013521
 8012564:	080135a4 	.word	0x080135a4

08012568 <__multadd>:
 8012568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801256c:	690d      	ldr	r5, [r1, #16]
 801256e:	4607      	mov	r7, r0
 8012570:	460c      	mov	r4, r1
 8012572:	461e      	mov	r6, r3
 8012574:	f101 0c14 	add.w	ip, r1, #20
 8012578:	2000      	movs	r0, #0
 801257a:	f8dc 3000 	ldr.w	r3, [ip]
 801257e:	b299      	uxth	r1, r3
 8012580:	fb02 6101 	mla	r1, r2, r1, r6
 8012584:	0c1e      	lsrs	r6, r3, #16
 8012586:	0c0b      	lsrs	r3, r1, #16
 8012588:	fb02 3306 	mla	r3, r2, r6, r3
 801258c:	b289      	uxth	r1, r1
 801258e:	3001      	adds	r0, #1
 8012590:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012594:	4285      	cmp	r5, r0
 8012596:	f84c 1b04 	str.w	r1, [ip], #4
 801259a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801259e:	dcec      	bgt.n	801257a <__multadd+0x12>
 80125a0:	b30e      	cbz	r6, 80125e6 <__multadd+0x7e>
 80125a2:	68a3      	ldr	r3, [r4, #8]
 80125a4:	42ab      	cmp	r3, r5
 80125a6:	dc19      	bgt.n	80125dc <__multadd+0x74>
 80125a8:	6861      	ldr	r1, [r4, #4]
 80125aa:	4638      	mov	r0, r7
 80125ac:	3101      	adds	r1, #1
 80125ae:	f7ff ff79 	bl	80124a4 <_Balloc>
 80125b2:	4680      	mov	r8, r0
 80125b4:	b928      	cbnz	r0, 80125c2 <__multadd+0x5a>
 80125b6:	4602      	mov	r2, r0
 80125b8:	4b0c      	ldr	r3, [pc, #48]	; (80125ec <__multadd+0x84>)
 80125ba:	480d      	ldr	r0, [pc, #52]	; (80125f0 <__multadd+0x88>)
 80125bc:	21b5      	movs	r1, #181	; 0xb5
 80125be:	f000 fb69 	bl	8012c94 <__assert_func>
 80125c2:	6922      	ldr	r2, [r4, #16]
 80125c4:	3202      	adds	r2, #2
 80125c6:	f104 010c 	add.w	r1, r4, #12
 80125ca:	0092      	lsls	r2, r2, #2
 80125cc:	300c      	adds	r0, #12
 80125ce:	f7fe fab4 	bl	8010b3a <memcpy>
 80125d2:	4621      	mov	r1, r4
 80125d4:	4638      	mov	r0, r7
 80125d6:	f7ff ffa5 	bl	8012524 <_Bfree>
 80125da:	4644      	mov	r4, r8
 80125dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80125e0:	3501      	adds	r5, #1
 80125e2:	615e      	str	r6, [r3, #20]
 80125e4:	6125      	str	r5, [r4, #16]
 80125e6:	4620      	mov	r0, r4
 80125e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125ec:	08013593 	.word	0x08013593
 80125f0:	080135a4 	.word	0x080135a4

080125f4 <__hi0bits>:
 80125f4:	0c03      	lsrs	r3, r0, #16
 80125f6:	041b      	lsls	r3, r3, #16
 80125f8:	b9d3      	cbnz	r3, 8012630 <__hi0bits+0x3c>
 80125fa:	0400      	lsls	r0, r0, #16
 80125fc:	2310      	movs	r3, #16
 80125fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012602:	bf04      	itt	eq
 8012604:	0200      	lsleq	r0, r0, #8
 8012606:	3308      	addeq	r3, #8
 8012608:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801260c:	bf04      	itt	eq
 801260e:	0100      	lsleq	r0, r0, #4
 8012610:	3304      	addeq	r3, #4
 8012612:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012616:	bf04      	itt	eq
 8012618:	0080      	lsleq	r0, r0, #2
 801261a:	3302      	addeq	r3, #2
 801261c:	2800      	cmp	r0, #0
 801261e:	db05      	blt.n	801262c <__hi0bits+0x38>
 8012620:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012624:	f103 0301 	add.w	r3, r3, #1
 8012628:	bf08      	it	eq
 801262a:	2320      	moveq	r3, #32
 801262c:	4618      	mov	r0, r3
 801262e:	4770      	bx	lr
 8012630:	2300      	movs	r3, #0
 8012632:	e7e4      	b.n	80125fe <__hi0bits+0xa>

08012634 <__lo0bits>:
 8012634:	6803      	ldr	r3, [r0, #0]
 8012636:	f013 0207 	ands.w	r2, r3, #7
 801263a:	4601      	mov	r1, r0
 801263c:	d00b      	beq.n	8012656 <__lo0bits+0x22>
 801263e:	07da      	lsls	r2, r3, #31
 8012640:	d423      	bmi.n	801268a <__lo0bits+0x56>
 8012642:	0798      	lsls	r0, r3, #30
 8012644:	bf49      	itett	mi
 8012646:	085b      	lsrmi	r3, r3, #1
 8012648:	089b      	lsrpl	r3, r3, #2
 801264a:	2001      	movmi	r0, #1
 801264c:	600b      	strmi	r3, [r1, #0]
 801264e:	bf5c      	itt	pl
 8012650:	600b      	strpl	r3, [r1, #0]
 8012652:	2002      	movpl	r0, #2
 8012654:	4770      	bx	lr
 8012656:	b298      	uxth	r0, r3
 8012658:	b9a8      	cbnz	r0, 8012686 <__lo0bits+0x52>
 801265a:	0c1b      	lsrs	r3, r3, #16
 801265c:	2010      	movs	r0, #16
 801265e:	b2da      	uxtb	r2, r3
 8012660:	b90a      	cbnz	r2, 8012666 <__lo0bits+0x32>
 8012662:	3008      	adds	r0, #8
 8012664:	0a1b      	lsrs	r3, r3, #8
 8012666:	071a      	lsls	r2, r3, #28
 8012668:	bf04      	itt	eq
 801266a:	091b      	lsreq	r3, r3, #4
 801266c:	3004      	addeq	r0, #4
 801266e:	079a      	lsls	r2, r3, #30
 8012670:	bf04      	itt	eq
 8012672:	089b      	lsreq	r3, r3, #2
 8012674:	3002      	addeq	r0, #2
 8012676:	07da      	lsls	r2, r3, #31
 8012678:	d403      	bmi.n	8012682 <__lo0bits+0x4e>
 801267a:	085b      	lsrs	r3, r3, #1
 801267c:	f100 0001 	add.w	r0, r0, #1
 8012680:	d005      	beq.n	801268e <__lo0bits+0x5a>
 8012682:	600b      	str	r3, [r1, #0]
 8012684:	4770      	bx	lr
 8012686:	4610      	mov	r0, r2
 8012688:	e7e9      	b.n	801265e <__lo0bits+0x2a>
 801268a:	2000      	movs	r0, #0
 801268c:	4770      	bx	lr
 801268e:	2020      	movs	r0, #32
 8012690:	4770      	bx	lr
	...

08012694 <__i2b>:
 8012694:	b510      	push	{r4, lr}
 8012696:	460c      	mov	r4, r1
 8012698:	2101      	movs	r1, #1
 801269a:	f7ff ff03 	bl	80124a4 <_Balloc>
 801269e:	4602      	mov	r2, r0
 80126a0:	b928      	cbnz	r0, 80126ae <__i2b+0x1a>
 80126a2:	4b05      	ldr	r3, [pc, #20]	; (80126b8 <__i2b+0x24>)
 80126a4:	4805      	ldr	r0, [pc, #20]	; (80126bc <__i2b+0x28>)
 80126a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80126aa:	f000 faf3 	bl	8012c94 <__assert_func>
 80126ae:	2301      	movs	r3, #1
 80126b0:	6144      	str	r4, [r0, #20]
 80126b2:	6103      	str	r3, [r0, #16]
 80126b4:	bd10      	pop	{r4, pc}
 80126b6:	bf00      	nop
 80126b8:	08013593 	.word	0x08013593
 80126bc:	080135a4 	.word	0x080135a4

080126c0 <__multiply>:
 80126c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126c4:	4691      	mov	r9, r2
 80126c6:	690a      	ldr	r2, [r1, #16]
 80126c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80126cc:	429a      	cmp	r2, r3
 80126ce:	bfb8      	it	lt
 80126d0:	460b      	movlt	r3, r1
 80126d2:	460c      	mov	r4, r1
 80126d4:	bfbc      	itt	lt
 80126d6:	464c      	movlt	r4, r9
 80126d8:	4699      	movlt	r9, r3
 80126da:	6927      	ldr	r7, [r4, #16]
 80126dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80126e0:	68a3      	ldr	r3, [r4, #8]
 80126e2:	6861      	ldr	r1, [r4, #4]
 80126e4:	eb07 060a 	add.w	r6, r7, sl
 80126e8:	42b3      	cmp	r3, r6
 80126ea:	b085      	sub	sp, #20
 80126ec:	bfb8      	it	lt
 80126ee:	3101      	addlt	r1, #1
 80126f0:	f7ff fed8 	bl	80124a4 <_Balloc>
 80126f4:	b930      	cbnz	r0, 8012704 <__multiply+0x44>
 80126f6:	4602      	mov	r2, r0
 80126f8:	4b44      	ldr	r3, [pc, #272]	; (801280c <__multiply+0x14c>)
 80126fa:	4845      	ldr	r0, [pc, #276]	; (8012810 <__multiply+0x150>)
 80126fc:	f240 115d 	movw	r1, #349	; 0x15d
 8012700:	f000 fac8 	bl	8012c94 <__assert_func>
 8012704:	f100 0514 	add.w	r5, r0, #20
 8012708:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801270c:	462b      	mov	r3, r5
 801270e:	2200      	movs	r2, #0
 8012710:	4543      	cmp	r3, r8
 8012712:	d321      	bcc.n	8012758 <__multiply+0x98>
 8012714:	f104 0314 	add.w	r3, r4, #20
 8012718:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801271c:	f109 0314 	add.w	r3, r9, #20
 8012720:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012724:	9202      	str	r2, [sp, #8]
 8012726:	1b3a      	subs	r2, r7, r4
 8012728:	3a15      	subs	r2, #21
 801272a:	f022 0203 	bic.w	r2, r2, #3
 801272e:	3204      	adds	r2, #4
 8012730:	f104 0115 	add.w	r1, r4, #21
 8012734:	428f      	cmp	r7, r1
 8012736:	bf38      	it	cc
 8012738:	2204      	movcc	r2, #4
 801273a:	9201      	str	r2, [sp, #4]
 801273c:	9a02      	ldr	r2, [sp, #8]
 801273e:	9303      	str	r3, [sp, #12]
 8012740:	429a      	cmp	r2, r3
 8012742:	d80c      	bhi.n	801275e <__multiply+0x9e>
 8012744:	2e00      	cmp	r6, #0
 8012746:	dd03      	ble.n	8012750 <__multiply+0x90>
 8012748:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801274c:	2b00      	cmp	r3, #0
 801274e:	d05a      	beq.n	8012806 <__multiply+0x146>
 8012750:	6106      	str	r6, [r0, #16]
 8012752:	b005      	add	sp, #20
 8012754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012758:	f843 2b04 	str.w	r2, [r3], #4
 801275c:	e7d8      	b.n	8012710 <__multiply+0x50>
 801275e:	f8b3 a000 	ldrh.w	sl, [r3]
 8012762:	f1ba 0f00 	cmp.w	sl, #0
 8012766:	d024      	beq.n	80127b2 <__multiply+0xf2>
 8012768:	f104 0e14 	add.w	lr, r4, #20
 801276c:	46a9      	mov	r9, r5
 801276e:	f04f 0c00 	mov.w	ip, #0
 8012772:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012776:	f8d9 1000 	ldr.w	r1, [r9]
 801277a:	fa1f fb82 	uxth.w	fp, r2
 801277e:	b289      	uxth	r1, r1
 8012780:	fb0a 110b 	mla	r1, sl, fp, r1
 8012784:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012788:	f8d9 2000 	ldr.w	r2, [r9]
 801278c:	4461      	add	r1, ip
 801278e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012792:	fb0a c20b 	mla	r2, sl, fp, ip
 8012796:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801279a:	b289      	uxth	r1, r1
 801279c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80127a0:	4577      	cmp	r7, lr
 80127a2:	f849 1b04 	str.w	r1, [r9], #4
 80127a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80127aa:	d8e2      	bhi.n	8012772 <__multiply+0xb2>
 80127ac:	9a01      	ldr	r2, [sp, #4]
 80127ae:	f845 c002 	str.w	ip, [r5, r2]
 80127b2:	9a03      	ldr	r2, [sp, #12]
 80127b4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80127b8:	3304      	adds	r3, #4
 80127ba:	f1b9 0f00 	cmp.w	r9, #0
 80127be:	d020      	beq.n	8012802 <__multiply+0x142>
 80127c0:	6829      	ldr	r1, [r5, #0]
 80127c2:	f104 0c14 	add.w	ip, r4, #20
 80127c6:	46ae      	mov	lr, r5
 80127c8:	f04f 0a00 	mov.w	sl, #0
 80127cc:	f8bc b000 	ldrh.w	fp, [ip]
 80127d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80127d4:	fb09 220b 	mla	r2, r9, fp, r2
 80127d8:	4492      	add	sl, r2
 80127da:	b289      	uxth	r1, r1
 80127dc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80127e0:	f84e 1b04 	str.w	r1, [lr], #4
 80127e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80127e8:	f8be 1000 	ldrh.w	r1, [lr]
 80127ec:	0c12      	lsrs	r2, r2, #16
 80127ee:	fb09 1102 	mla	r1, r9, r2, r1
 80127f2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80127f6:	4567      	cmp	r7, ip
 80127f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80127fc:	d8e6      	bhi.n	80127cc <__multiply+0x10c>
 80127fe:	9a01      	ldr	r2, [sp, #4]
 8012800:	50a9      	str	r1, [r5, r2]
 8012802:	3504      	adds	r5, #4
 8012804:	e79a      	b.n	801273c <__multiply+0x7c>
 8012806:	3e01      	subs	r6, #1
 8012808:	e79c      	b.n	8012744 <__multiply+0x84>
 801280a:	bf00      	nop
 801280c:	08013593 	.word	0x08013593
 8012810:	080135a4 	.word	0x080135a4

08012814 <__pow5mult>:
 8012814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012818:	4615      	mov	r5, r2
 801281a:	f012 0203 	ands.w	r2, r2, #3
 801281e:	4606      	mov	r6, r0
 8012820:	460f      	mov	r7, r1
 8012822:	d007      	beq.n	8012834 <__pow5mult+0x20>
 8012824:	4c25      	ldr	r4, [pc, #148]	; (80128bc <__pow5mult+0xa8>)
 8012826:	3a01      	subs	r2, #1
 8012828:	2300      	movs	r3, #0
 801282a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801282e:	f7ff fe9b 	bl	8012568 <__multadd>
 8012832:	4607      	mov	r7, r0
 8012834:	10ad      	asrs	r5, r5, #2
 8012836:	d03d      	beq.n	80128b4 <__pow5mult+0xa0>
 8012838:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801283a:	b97c      	cbnz	r4, 801285c <__pow5mult+0x48>
 801283c:	2010      	movs	r0, #16
 801283e:	f7ff fe1d 	bl	801247c <malloc>
 8012842:	4602      	mov	r2, r0
 8012844:	6270      	str	r0, [r6, #36]	; 0x24
 8012846:	b928      	cbnz	r0, 8012854 <__pow5mult+0x40>
 8012848:	4b1d      	ldr	r3, [pc, #116]	; (80128c0 <__pow5mult+0xac>)
 801284a:	481e      	ldr	r0, [pc, #120]	; (80128c4 <__pow5mult+0xb0>)
 801284c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012850:	f000 fa20 	bl	8012c94 <__assert_func>
 8012854:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012858:	6004      	str	r4, [r0, #0]
 801285a:	60c4      	str	r4, [r0, #12]
 801285c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012860:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012864:	b94c      	cbnz	r4, 801287a <__pow5mult+0x66>
 8012866:	f240 2171 	movw	r1, #625	; 0x271
 801286a:	4630      	mov	r0, r6
 801286c:	f7ff ff12 	bl	8012694 <__i2b>
 8012870:	2300      	movs	r3, #0
 8012872:	f8c8 0008 	str.w	r0, [r8, #8]
 8012876:	4604      	mov	r4, r0
 8012878:	6003      	str	r3, [r0, #0]
 801287a:	f04f 0900 	mov.w	r9, #0
 801287e:	07eb      	lsls	r3, r5, #31
 8012880:	d50a      	bpl.n	8012898 <__pow5mult+0x84>
 8012882:	4639      	mov	r1, r7
 8012884:	4622      	mov	r2, r4
 8012886:	4630      	mov	r0, r6
 8012888:	f7ff ff1a 	bl	80126c0 <__multiply>
 801288c:	4639      	mov	r1, r7
 801288e:	4680      	mov	r8, r0
 8012890:	4630      	mov	r0, r6
 8012892:	f7ff fe47 	bl	8012524 <_Bfree>
 8012896:	4647      	mov	r7, r8
 8012898:	106d      	asrs	r5, r5, #1
 801289a:	d00b      	beq.n	80128b4 <__pow5mult+0xa0>
 801289c:	6820      	ldr	r0, [r4, #0]
 801289e:	b938      	cbnz	r0, 80128b0 <__pow5mult+0x9c>
 80128a0:	4622      	mov	r2, r4
 80128a2:	4621      	mov	r1, r4
 80128a4:	4630      	mov	r0, r6
 80128a6:	f7ff ff0b 	bl	80126c0 <__multiply>
 80128aa:	6020      	str	r0, [r4, #0]
 80128ac:	f8c0 9000 	str.w	r9, [r0]
 80128b0:	4604      	mov	r4, r0
 80128b2:	e7e4      	b.n	801287e <__pow5mult+0x6a>
 80128b4:	4638      	mov	r0, r7
 80128b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128ba:	bf00      	nop
 80128bc:	080136f0 	.word	0x080136f0
 80128c0:	08013521 	.word	0x08013521
 80128c4:	080135a4 	.word	0x080135a4

080128c8 <__lshift>:
 80128c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128cc:	460c      	mov	r4, r1
 80128ce:	6849      	ldr	r1, [r1, #4]
 80128d0:	6923      	ldr	r3, [r4, #16]
 80128d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80128d6:	68a3      	ldr	r3, [r4, #8]
 80128d8:	4607      	mov	r7, r0
 80128da:	4691      	mov	r9, r2
 80128dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80128e0:	f108 0601 	add.w	r6, r8, #1
 80128e4:	42b3      	cmp	r3, r6
 80128e6:	db0b      	blt.n	8012900 <__lshift+0x38>
 80128e8:	4638      	mov	r0, r7
 80128ea:	f7ff fddb 	bl	80124a4 <_Balloc>
 80128ee:	4605      	mov	r5, r0
 80128f0:	b948      	cbnz	r0, 8012906 <__lshift+0x3e>
 80128f2:	4602      	mov	r2, r0
 80128f4:	4b2a      	ldr	r3, [pc, #168]	; (80129a0 <__lshift+0xd8>)
 80128f6:	482b      	ldr	r0, [pc, #172]	; (80129a4 <__lshift+0xdc>)
 80128f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80128fc:	f000 f9ca 	bl	8012c94 <__assert_func>
 8012900:	3101      	adds	r1, #1
 8012902:	005b      	lsls	r3, r3, #1
 8012904:	e7ee      	b.n	80128e4 <__lshift+0x1c>
 8012906:	2300      	movs	r3, #0
 8012908:	f100 0114 	add.w	r1, r0, #20
 801290c:	f100 0210 	add.w	r2, r0, #16
 8012910:	4618      	mov	r0, r3
 8012912:	4553      	cmp	r3, sl
 8012914:	db37      	blt.n	8012986 <__lshift+0xbe>
 8012916:	6920      	ldr	r0, [r4, #16]
 8012918:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801291c:	f104 0314 	add.w	r3, r4, #20
 8012920:	f019 091f 	ands.w	r9, r9, #31
 8012924:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012928:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801292c:	d02f      	beq.n	801298e <__lshift+0xc6>
 801292e:	f1c9 0e20 	rsb	lr, r9, #32
 8012932:	468a      	mov	sl, r1
 8012934:	f04f 0c00 	mov.w	ip, #0
 8012938:	681a      	ldr	r2, [r3, #0]
 801293a:	fa02 f209 	lsl.w	r2, r2, r9
 801293e:	ea42 020c 	orr.w	r2, r2, ip
 8012942:	f84a 2b04 	str.w	r2, [sl], #4
 8012946:	f853 2b04 	ldr.w	r2, [r3], #4
 801294a:	4298      	cmp	r0, r3
 801294c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012950:	d8f2      	bhi.n	8012938 <__lshift+0x70>
 8012952:	1b03      	subs	r3, r0, r4
 8012954:	3b15      	subs	r3, #21
 8012956:	f023 0303 	bic.w	r3, r3, #3
 801295a:	3304      	adds	r3, #4
 801295c:	f104 0215 	add.w	r2, r4, #21
 8012960:	4290      	cmp	r0, r2
 8012962:	bf38      	it	cc
 8012964:	2304      	movcc	r3, #4
 8012966:	f841 c003 	str.w	ip, [r1, r3]
 801296a:	f1bc 0f00 	cmp.w	ip, #0
 801296e:	d001      	beq.n	8012974 <__lshift+0xac>
 8012970:	f108 0602 	add.w	r6, r8, #2
 8012974:	3e01      	subs	r6, #1
 8012976:	4638      	mov	r0, r7
 8012978:	612e      	str	r6, [r5, #16]
 801297a:	4621      	mov	r1, r4
 801297c:	f7ff fdd2 	bl	8012524 <_Bfree>
 8012980:	4628      	mov	r0, r5
 8012982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012986:	f842 0f04 	str.w	r0, [r2, #4]!
 801298a:	3301      	adds	r3, #1
 801298c:	e7c1      	b.n	8012912 <__lshift+0x4a>
 801298e:	3904      	subs	r1, #4
 8012990:	f853 2b04 	ldr.w	r2, [r3], #4
 8012994:	f841 2f04 	str.w	r2, [r1, #4]!
 8012998:	4298      	cmp	r0, r3
 801299a:	d8f9      	bhi.n	8012990 <__lshift+0xc8>
 801299c:	e7ea      	b.n	8012974 <__lshift+0xac>
 801299e:	bf00      	nop
 80129a0:	08013593 	.word	0x08013593
 80129a4:	080135a4 	.word	0x080135a4

080129a8 <__mcmp>:
 80129a8:	b530      	push	{r4, r5, lr}
 80129aa:	6902      	ldr	r2, [r0, #16]
 80129ac:	690c      	ldr	r4, [r1, #16]
 80129ae:	1b12      	subs	r2, r2, r4
 80129b0:	d10e      	bne.n	80129d0 <__mcmp+0x28>
 80129b2:	f100 0314 	add.w	r3, r0, #20
 80129b6:	3114      	adds	r1, #20
 80129b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80129bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80129c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80129c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80129c8:	42a5      	cmp	r5, r4
 80129ca:	d003      	beq.n	80129d4 <__mcmp+0x2c>
 80129cc:	d305      	bcc.n	80129da <__mcmp+0x32>
 80129ce:	2201      	movs	r2, #1
 80129d0:	4610      	mov	r0, r2
 80129d2:	bd30      	pop	{r4, r5, pc}
 80129d4:	4283      	cmp	r3, r0
 80129d6:	d3f3      	bcc.n	80129c0 <__mcmp+0x18>
 80129d8:	e7fa      	b.n	80129d0 <__mcmp+0x28>
 80129da:	f04f 32ff 	mov.w	r2, #4294967295
 80129de:	e7f7      	b.n	80129d0 <__mcmp+0x28>

080129e0 <__mdiff>:
 80129e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129e4:	460c      	mov	r4, r1
 80129e6:	4606      	mov	r6, r0
 80129e8:	4611      	mov	r1, r2
 80129ea:	4620      	mov	r0, r4
 80129ec:	4690      	mov	r8, r2
 80129ee:	f7ff ffdb 	bl	80129a8 <__mcmp>
 80129f2:	1e05      	subs	r5, r0, #0
 80129f4:	d110      	bne.n	8012a18 <__mdiff+0x38>
 80129f6:	4629      	mov	r1, r5
 80129f8:	4630      	mov	r0, r6
 80129fa:	f7ff fd53 	bl	80124a4 <_Balloc>
 80129fe:	b930      	cbnz	r0, 8012a0e <__mdiff+0x2e>
 8012a00:	4b3a      	ldr	r3, [pc, #232]	; (8012aec <__mdiff+0x10c>)
 8012a02:	4602      	mov	r2, r0
 8012a04:	f240 2132 	movw	r1, #562	; 0x232
 8012a08:	4839      	ldr	r0, [pc, #228]	; (8012af0 <__mdiff+0x110>)
 8012a0a:	f000 f943 	bl	8012c94 <__assert_func>
 8012a0e:	2301      	movs	r3, #1
 8012a10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012a14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a18:	bfa4      	itt	ge
 8012a1a:	4643      	movge	r3, r8
 8012a1c:	46a0      	movge	r8, r4
 8012a1e:	4630      	mov	r0, r6
 8012a20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012a24:	bfa6      	itte	ge
 8012a26:	461c      	movge	r4, r3
 8012a28:	2500      	movge	r5, #0
 8012a2a:	2501      	movlt	r5, #1
 8012a2c:	f7ff fd3a 	bl	80124a4 <_Balloc>
 8012a30:	b920      	cbnz	r0, 8012a3c <__mdiff+0x5c>
 8012a32:	4b2e      	ldr	r3, [pc, #184]	; (8012aec <__mdiff+0x10c>)
 8012a34:	4602      	mov	r2, r0
 8012a36:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012a3a:	e7e5      	b.n	8012a08 <__mdiff+0x28>
 8012a3c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012a40:	6926      	ldr	r6, [r4, #16]
 8012a42:	60c5      	str	r5, [r0, #12]
 8012a44:	f104 0914 	add.w	r9, r4, #20
 8012a48:	f108 0514 	add.w	r5, r8, #20
 8012a4c:	f100 0e14 	add.w	lr, r0, #20
 8012a50:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012a54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012a58:	f108 0210 	add.w	r2, r8, #16
 8012a5c:	46f2      	mov	sl, lr
 8012a5e:	2100      	movs	r1, #0
 8012a60:	f859 3b04 	ldr.w	r3, [r9], #4
 8012a64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012a68:	fa1f f883 	uxth.w	r8, r3
 8012a6c:	fa11 f18b 	uxtah	r1, r1, fp
 8012a70:	0c1b      	lsrs	r3, r3, #16
 8012a72:	eba1 0808 	sub.w	r8, r1, r8
 8012a76:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012a7a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012a7e:	fa1f f888 	uxth.w	r8, r8
 8012a82:	1419      	asrs	r1, r3, #16
 8012a84:	454e      	cmp	r6, r9
 8012a86:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012a8a:	f84a 3b04 	str.w	r3, [sl], #4
 8012a8e:	d8e7      	bhi.n	8012a60 <__mdiff+0x80>
 8012a90:	1b33      	subs	r3, r6, r4
 8012a92:	3b15      	subs	r3, #21
 8012a94:	f023 0303 	bic.w	r3, r3, #3
 8012a98:	3304      	adds	r3, #4
 8012a9a:	3415      	adds	r4, #21
 8012a9c:	42a6      	cmp	r6, r4
 8012a9e:	bf38      	it	cc
 8012aa0:	2304      	movcc	r3, #4
 8012aa2:	441d      	add	r5, r3
 8012aa4:	4473      	add	r3, lr
 8012aa6:	469e      	mov	lr, r3
 8012aa8:	462e      	mov	r6, r5
 8012aaa:	4566      	cmp	r6, ip
 8012aac:	d30e      	bcc.n	8012acc <__mdiff+0xec>
 8012aae:	f10c 0203 	add.w	r2, ip, #3
 8012ab2:	1b52      	subs	r2, r2, r5
 8012ab4:	f022 0203 	bic.w	r2, r2, #3
 8012ab8:	3d03      	subs	r5, #3
 8012aba:	45ac      	cmp	ip, r5
 8012abc:	bf38      	it	cc
 8012abe:	2200      	movcc	r2, #0
 8012ac0:	441a      	add	r2, r3
 8012ac2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012ac6:	b17b      	cbz	r3, 8012ae8 <__mdiff+0x108>
 8012ac8:	6107      	str	r7, [r0, #16]
 8012aca:	e7a3      	b.n	8012a14 <__mdiff+0x34>
 8012acc:	f856 8b04 	ldr.w	r8, [r6], #4
 8012ad0:	fa11 f288 	uxtah	r2, r1, r8
 8012ad4:	1414      	asrs	r4, r2, #16
 8012ad6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012ada:	b292      	uxth	r2, r2
 8012adc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012ae0:	f84e 2b04 	str.w	r2, [lr], #4
 8012ae4:	1421      	asrs	r1, r4, #16
 8012ae6:	e7e0      	b.n	8012aaa <__mdiff+0xca>
 8012ae8:	3f01      	subs	r7, #1
 8012aea:	e7ea      	b.n	8012ac2 <__mdiff+0xe2>
 8012aec:	08013593 	.word	0x08013593
 8012af0:	080135a4 	.word	0x080135a4

08012af4 <__d2b>:
 8012af4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012af8:	4689      	mov	r9, r1
 8012afa:	2101      	movs	r1, #1
 8012afc:	ec57 6b10 	vmov	r6, r7, d0
 8012b00:	4690      	mov	r8, r2
 8012b02:	f7ff fccf 	bl	80124a4 <_Balloc>
 8012b06:	4604      	mov	r4, r0
 8012b08:	b930      	cbnz	r0, 8012b18 <__d2b+0x24>
 8012b0a:	4602      	mov	r2, r0
 8012b0c:	4b25      	ldr	r3, [pc, #148]	; (8012ba4 <__d2b+0xb0>)
 8012b0e:	4826      	ldr	r0, [pc, #152]	; (8012ba8 <__d2b+0xb4>)
 8012b10:	f240 310a 	movw	r1, #778	; 0x30a
 8012b14:	f000 f8be 	bl	8012c94 <__assert_func>
 8012b18:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012b1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012b20:	bb35      	cbnz	r5, 8012b70 <__d2b+0x7c>
 8012b22:	2e00      	cmp	r6, #0
 8012b24:	9301      	str	r3, [sp, #4]
 8012b26:	d028      	beq.n	8012b7a <__d2b+0x86>
 8012b28:	4668      	mov	r0, sp
 8012b2a:	9600      	str	r6, [sp, #0]
 8012b2c:	f7ff fd82 	bl	8012634 <__lo0bits>
 8012b30:	9900      	ldr	r1, [sp, #0]
 8012b32:	b300      	cbz	r0, 8012b76 <__d2b+0x82>
 8012b34:	9a01      	ldr	r2, [sp, #4]
 8012b36:	f1c0 0320 	rsb	r3, r0, #32
 8012b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8012b3e:	430b      	orrs	r3, r1
 8012b40:	40c2      	lsrs	r2, r0
 8012b42:	6163      	str	r3, [r4, #20]
 8012b44:	9201      	str	r2, [sp, #4]
 8012b46:	9b01      	ldr	r3, [sp, #4]
 8012b48:	61a3      	str	r3, [r4, #24]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	bf14      	ite	ne
 8012b4e:	2202      	movne	r2, #2
 8012b50:	2201      	moveq	r2, #1
 8012b52:	6122      	str	r2, [r4, #16]
 8012b54:	b1d5      	cbz	r5, 8012b8c <__d2b+0x98>
 8012b56:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012b5a:	4405      	add	r5, r0
 8012b5c:	f8c9 5000 	str.w	r5, [r9]
 8012b60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012b64:	f8c8 0000 	str.w	r0, [r8]
 8012b68:	4620      	mov	r0, r4
 8012b6a:	b003      	add	sp, #12
 8012b6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012b74:	e7d5      	b.n	8012b22 <__d2b+0x2e>
 8012b76:	6161      	str	r1, [r4, #20]
 8012b78:	e7e5      	b.n	8012b46 <__d2b+0x52>
 8012b7a:	a801      	add	r0, sp, #4
 8012b7c:	f7ff fd5a 	bl	8012634 <__lo0bits>
 8012b80:	9b01      	ldr	r3, [sp, #4]
 8012b82:	6163      	str	r3, [r4, #20]
 8012b84:	2201      	movs	r2, #1
 8012b86:	6122      	str	r2, [r4, #16]
 8012b88:	3020      	adds	r0, #32
 8012b8a:	e7e3      	b.n	8012b54 <__d2b+0x60>
 8012b8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012b90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012b94:	f8c9 0000 	str.w	r0, [r9]
 8012b98:	6918      	ldr	r0, [r3, #16]
 8012b9a:	f7ff fd2b 	bl	80125f4 <__hi0bits>
 8012b9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012ba2:	e7df      	b.n	8012b64 <__d2b+0x70>
 8012ba4:	08013593 	.word	0x08013593
 8012ba8:	080135a4 	.word	0x080135a4

08012bac <_calloc_r>:
 8012bac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012bae:	fba1 2402 	umull	r2, r4, r1, r2
 8012bb2:	b94c      	cbnz	r4, 8012bc8 <_calloc_r+0x1c>
 8012bb4:	4611      	mov	r1, r2
 8012bb6:	9201      	str	r2, [sp, #4]
 8012bb8:	f7fd fff6 	bl	8010ba8 <_malloc_r>
 8012bbc:	9a01      	ldr	r2, [sp, #4]
 8012bbe:	4605      	mov	r5, r0
 8012bc0:	b930      	cbnz	r0, 8012bd0 <_calloc_r+0x24>
 8012bc2:	4628      	mov	r0, r5
 8012bc4:	b003      	add	sp, #12
 8012bc6:	bd30      	pop	{r4, r5, pc}
 8012bc8:	220c      	movs	r2, #12
 8012bca:	6002      	str	r2, [r0, #0]
 8012bcc:	2500      	movs	r5, #0
 8012bce:	e7f8      	b.n	8012bc2 <_calloc_r+0x16>
 8012bd0:	4621      	mov	r1, r4
 8012bd2:	f7fd ffc0 	bl	8010b56 <memset>
 8012bd6:	e7f4      	b.n	8012bc2 <_calloc_r+0x16>

08012bd8 <_free_r>:
 8012bd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012bda:	2900      	cmp	r1, #0
 8012bdc:	d044      	beq.n	8012c68 <_free_r+0x90>
 8012bde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012be2:	9001      	str	r0, [sp, #4]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	f1a1 0404 	sub.w	r4, r1, #4
 8012bea:	bfb8      	it	lt
 8012bec:	18e4      	addlt	r4, r4, r3
 8012bee:	f7ff fc4d 	bl	801248c <__malloc_lock>
 8012bf2:	4a1e      	ldr	r2, [pc, #120]	; (8012c6c <_free_r+0x94>)
 8012bf4:	9801      	ldr	r0, [sp, #4]
 8012bf6:	6813      	ldr	r3, [r2, #0]
 8012bf8:	b933      	cbnz	r3, 8012c08 <_free_r+0x30>
 8012bfa:	6063      	str	r3, [r4, #4]
 8012bfc:	6014      	str	r4, [r2, #0]
 8012bfe:	b003      	add	sp, #12
 8012c00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012c04:	f7ff bc48 	b.w	8012498 <__malloc_unlock>
 8012c08:	42a3      	cmp	r3, r4
 8012c0a:	d908      	bls.n	8012c1e <_free_r+0x46>
 8012c0c:	6825      	ldr	r5, [r4, #0]
 8012c0e:	1961      	adds	r1, r4, r5
 8012c10:	428b      	cmp	r3, r1
 8012c12:	bf01      	itttt	eq
 8012c14:	6819      	ldreq	r1, [r3, #0]
 8012c16:	685b      	ldreq	r3, [r3, #4]
 8012c18:	1949      	addeq	r1, r1, r5
 8012c1a:	6021      	streq	r1, [r4, #0]
 8012c1c:	e7ed      	b.n	8012bfa <_free_r+0x22>
 8012c1e:	461a      	mov	r2, r3
 8012c20:	685b      	ldr	r3, [r3, #4]
 8012c22:	b10b      	cbz	r3, 8012c28 <_free_r+0x50>
 8012c24:	42a3      	cmp	r3, r4
 8012c26:	d9fa      	bls.n	8012c1e <_free_r+0x46>
 8012c28:	6811      	ldr	r1, [r2, #0]
 8012c2a:	1855      	adds	r5, r2, r1
 8012c2c:	42a5      	cmp	r5, r4
 8012c2e:	d10b      	bne.n	8012c48 <_free_r+0x70>
 8012c30:	6824      	ldr	r4, [r4, #0]
 8012c32:	4421      	add	r1, r4
 8012c34:	1854      	adds	r4, r2, r1
 8012c36:	42a3      	cmp	r3, r4
 8012c38:	6011      	str	r1, [r2, #0]
 8012c3a:	d1e0      	bne.n	8012bfe <_free_r+0x26>
 8012c3c:	681c      	ldr	r4, [r3, #0]
 8012c3e:	685b      	ldr	r3, [r3, #4]
 8012c40:	6053      	str	r3, [r2, #4]
 8012c42:	4421      	add	r1, r4
 8012c44:	6011      	str	r1, [r2, #0]
 8012c46:	e7da      	b.n	8012bfe <_free_r+0x26>
 8012c48:	d902      	bls.n	8012c50 <_free_r+0x78>
 8012c4a:	230c      	movs	r3, #12
 8012c4c:	6003      	str	r3, [r0, #0]
 8012c4e:	e7d6      	b.n	8012bfe <_free_r+0x26>
 8012c50:	6825      	ldr	r5, [r4, #0]
 8012c52:	1961      	adds	r1, r4, r5
 8012c54:	428b      	cmp	r3, r1
 8012c56:	bf04      	itt	eq
 8012c58:	6819      	ldreq	r1, [r3, #0]
 8012c5a:	685b      	ldreq	r3, [r3, #4]
 8012c5c:	6063      	str	r3, [r4, #4]
 8012c5e:	bf04      	itt	eq
 8012c60:	1949      	addeq	r1, r1, r5
 8012c62:	6021      	streq	r1, [r4, #0]
 8012c64:	6054      	str	r4, [r2, #4]
 8012c66:	e7ca      	b.n	8012bfe <_free_r+0x26>
 8012c68:	b003      	add	sp, #12
 8012c6a:	bd30      	pop	{r4, r5, pc}
 8012c6c:	2400c7dc 	.word	0x2400c7dc

08012c70 <_read_r>:
 8012c70:	b538      	push	{r3, r4, r5, lr}
 8012c72:	4d07      	ldr	r5, [pc, #28]	; (8012c90 <_read_r+0x20>)
 8012c74:	4604      	mov	r4, r0
 8012c76:	4608      	mov	r0, r1
 8012c78:	4611      	mov	r1, r2
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	602a      	str	r2, [r5, #0]
 8012c7e:	461a      	mov	r2, r3
 8012c80:	f7ee fbd2 	bl	8001428 <_read>
 8012c84:	1c43      	adds	r3, r0, #1
 8012c86:	d102      	bne.n	8012c8e <_read_r+0x1e>
 8012c88:	682b      	ldr	r3, [r5, #0]
 8012c8a:	b103      	cbz	r3, 8012c8e <_read_r+0x1e>
 8012c8c:	6023      	str	r3, [r4, #0]
 8012c8e:	bd38      	pop	{r3, r4, r5, pc}
 8012c90:	2400c7e4 	.word	0x2400c7e4

08012c94 <__assert_func>:
 8012c94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012c96:	4614      	mov	r4, r2
 8012c98:	461a      	mov	r2, r3
 8012c9a:	4b09      	ldr	r3, [pc, #36]	; (8012cc0 <__assert_func+0x2c>)
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	4605      	mov	r5, r0
 8012ca0:	68d8      	ldr	r0, [r3, #12]
 8012ca2:	b14c      	cbz	r4, 8012cb8 <__assert_func+0x24>
 8012ca4:	4b07      	ldr	r3, [pc, #28]	; (8012cc4 <__assert_func+0x30>)
 8012ca6:	9100      	str	r1, [sp, #0]
 8012ca8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012cac:	4906      	ldr	r1, [pc, #24]	; (8012cc8 <__assert_func+0x34>)
 8012cae:	462b      	mov	r3, r5
 8012cb0:	f000 f80e 	bl	8012cd0 <fiprintf>
 8012cb4:	f000 fa58 	bl	8013168 <abort>
 8012cb8:	4b04      	ldr	r3, [pc, #16]	; (8012ccc <__assert_func+0x38>)
 8012cba:	461c      	mov	r4, r3
 8012cbc:	e7f3      	b.n	8012ca6 <__assert_func+0x12>
 8012cbe:	bf00      	nop
 8012cc0:	2400002c 	.word	0x2400002c
 8012cc4:	080136fc 	.word	0x080136fc
 8012cc8:	08013709 	.word	0x08013709
 8012ccc:	08013737 	.word	0x08013737

08012cd0 <fiprintf>:
 8012cd0:	b40e      	push	{r1, r2, r3}
 8012cd2:	b503      	push	{r0, r1, lr}
 8012cd4:	4601      	mov	r1, r0
 8012cd6:	ab03      	add	r3, sp, #12
 8012cd8:	4805      	ldr	r0, [pc, #20]	; (8012cf0 <fiprintf+0x20>)
 8012cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8012cde:	6800      	ldr	r0, [r0, #0]
 8012ce0:	9301      	str	r3, [sp, #4]
 8012ce2:	f000 f843 	bl	8012d6c <_vfiprintf_r>
 8012ce6:	b002      	add	sp, #8
 8012ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8012cec:	b003      	add	sp, #12
 8012cee:	4770      	bx	lr
 8012cf0:	2400002c 	.word	0x2400002c

08012cf4 <__ascii_mbtowc>:
 8012cf4:	b082      	sub	sp, #8
 8012cf6:	b901      	cbnz	r1, 8012cfa <__ascii_mbtowc+0x6>
 8012cf8:	a901      	add	r1, sp, #4
 8012cfa:	b142      	cbz	r2, 8012d0e <__ascii_mbtowc+0x1a>
 8012cfc:	b14b      	cbz	r3, 8012d12 <__ascii_mbtowc+0x1e>
 8012cfe:	7813      	ldrb	r3, [r2, #0]
 8012d00:	600b      	str	r3, [r1, #0]
 8012d02:	7812      	ldrb	r2, [r2, #0]
 8012d04:	1e10      	subs	r0, r2, #0
 8012d06:	bf18      	it	ne
 8012d08:	2001      	movne	r0, #1
 8012d0a:	b002      	add	sp, #8
 8012d0c:	4770      	bx	lr
 8012d0e:	4610      	mov	r0, r2
 8012d10:	e7fb      	b.n	8012d0a <__ascii_mbtowc+0x16>
 8012d12:	f06f 0001 	mvn.w	r0, #1
 8012d16:	e7f8      	b.n	8012d0a <__ascii_mbtowc+0x16>

08012d18 <__sfputc_r>:
 8012d18:	6893      	ldr	r3, [r2, #8]
 8012d1a:	3b01      	subs	r3, #1
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	b410      	push	{r4}
 8012d20:	6093      	str	r3, [r2, #8]
 8012d22:	da08      	bge.n	8012d36 <__sfputc_r+0x1e>
 8012d24:	6994      	ldr	r4, [r2, #24]
 8012d26:	42a3      	cmp	r3, r4
 8012d28:	db01      	blt.n	8012d2e <__sfputc_r+0x16>
 8012d2a:	290a      	cmp	r1, #10
 8012d2c:	d103      	bne.n	8012d36 <__sfputc_r+0x1e>
 8012d2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d32:	f000 b94b 	b.w	8012fcc <__swbuf_r>
 8012d36:	6813      	ldr	r3, [r2, #0]
 8012d38:	1c58      	adds	r0, r3, #1
 8012d3a:	6010      	str	r0, [r2, #0]
 8012d3c:	7019      	strb	r1, [r3, #0]
 8012d3e:	4608      	mov	r0, r1
 8012d40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d44:	4770      	bx	lr

08012d46 <__sfputs_r>:
 8012d46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d48:	4606      	mov	r6, r0
 8012d4a:	460f      	mov	r7, r1
 8012d4c:	4614      	mov	r4, r2
 8012d4e:	18d5      	adds	r5, r2, r3
 8012d50:	42ac      	cmp	r4, r5
 8012d52:	d101      	bne.n	8012d58 <__sfputs_r+0x12>
 8012d54:	2000      	movs	r0, #0
 8012d56:	e007      	b.n	8012d68 <__sfputs_r+0x22>
 8012d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d5c:	463a      	mov	r2, r7
 8012d5e:	4630      	mov	r0, r6
 8012d60:	f7ff ffda 	bl	8012d18 <__sfputc_r>
 8012d64:	1c43      	adds	r3, r0, #1
 8012d66:	d1f3      	bne.n	8012d50 <__sfputs_r+0xa>
 8012d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012d6c <_vfiprintf_r>:
 8012d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d70:	460d      	mov	r5, r1
 8012d72:	b09d      	sub	sp, #116	; 0x74
 8012d74:	4614      	mov	r4, r2
 8012d76:	4698      	mov	r8, r3
 8012d78:	4606      	mov	r6, r0
 8012d7a:	b118      	cbz	r0, 8012d84 <_vfiprintf_r+0x18>
 8012d7c:	6983      	ldr	r3, [r0, #24]
 8012d7e:	b90b      	cbnz	r3, 8012d84 <_vfiprintf_r+0x18>
 8012d80:	f7fd fe16 	bl	80109b0 <__sinit>
 8012d84:	4b89      	ldr	r3, [pc, #548]	; (8012fac <_vfiprintf_r+0x240>)
 8012d86:	429d      	cmp	r5, r3
 8012d88:	d11b      	bne.n	8012dc2 <_vfiprintf_r+0x56>
 8012d8a:	6875      	ldr	r5, [r6, #4]
 8012d8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012d8e:	07d9      	lsls	r1, r3, #31
 8012d90:	d405      	bmi.n	8012d9e <_vfiprintf_r+0x32>
 8012d92:	89ab      	ldrh	r3, [r5, #12]
 8012d94:	059a      	lsls	r2, r3, #22
 8012d96:	d402      	bmi.n	8012d9e <_vfiprintf_r+0x32>
 8012d98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012d9a:	f7fd fecc 	bl	8010b36 <__retarget_lock_acquire_recursive>
 8012d9e:	89ab      	ldrh	r3, [r5, #12]
 8012da0:	071b      	lsls	r3, r3, #28
 8012da2:	d501      	bpl.n	8012da8 <_vfiprintf_r+0x3c>
 8012da4:	692b      	ldr	r3, [r5, #16]
 8012da6:	b9eb      	cbnz	r3, 8012de4 <_vfiprintf_r+0x78>
 8012da8:	4629      	mov	r1, r5
 8012daa:	4630      	mov	r0, r6
 8012dac:	f000 f96e 	bl	801308c <__swsetup_r>
 8012db0:	b1c0      	cbz	r0, 8012de4 <_vfiprintf_r+0x78>
 8012db2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012db4:	07dc      	lsls	r4, r3, #31
 8012db6:	d50e      	bpl.n	8012dd6 <_vfiprintf_r+0x6a>
 8012db8:	f04f 30ff 	mov.w	r0, #4294967295
 8012dbc:	b01d      	add	sp, #116	; 0x74
 8012dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dc2:	4b7b      	ldr	r3, [pc, #492]	; (8012fb0 <_vfiprintf_r+0x244>)
 8012dc4:	429d      	cmp	r5, r3
 8012dc6:	d101      	bne.n	8012dcc <_vfiprintf_r+0x60>
 8012dc8:	68b5      	ldr	r5, [r6, #8]
 8012dca:	e7df      	b.n	8012d8c <_vfiprintf_r+0x20>
 8012dcc:	4b79      	ldr	r3, [pc, #484]	; (8012fb4 <_vfiprintf_r+0x248>)
 8012dce:	429d      	cmp	r5, r3
 8012dd0:	bf08      	it	eq
 8012dd2:	68f5      	ldreq	r5, [r6, #12]
 8012dd4:	e7da      	b.n	8012d8c <_vfiprintf_r+0x20>
 8012dd6:	89ab      	ldrh	r3, [r5, #12]
 8012dd8:	0598      	lsls	r0, r3, #22
 8012dda:	d4ed      	bmi.n	8012db8 <_vfiprintf_r+0x4c>
 8012ddc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012dde:	f7fd feab 	bl	8010b38 <__retarget_lock_release_recursive>
 8012de2:	e7e9      	b.n	8012db8 <_vfiprintf_r+0x4c>
 8012de4:	2300      	movs	r3, #0
 8012de6:	9309      	str	r3, [sp, #36]	; 0x24
 8012de8:	2320      	movs	r3, #32
 8012dea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012dee:	f8cd 800c 	str.w	r8, [sp, #12]
 8012df2:	2330      	movs	r3, #48	; 0x30
 8012df4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012fb8 <_vfiprintf_r+0x24c>
 8012df8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012dfc:	f04f 0901 	mov.w	r9, #1
 8012e00:	4623      	mov	r3, r4
 8012e02:	469a      	mov	sl, r3
 8012e04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e08:	b10a      	cbz	r2, 8012e0e <_vfiprintf_r+0xa2>
 8012e0a:	2a25      	cmp	r2, #37	; 0x25
 8012e0c:	d1f9      	bne.n	8012e02 <_vfiprintf_r+0x96>
 8012e0e:	ebba 0b04 	subs.w	fp, sl, r4
 8012e12:	d00b      	beq.n	8012e2c <_vfiprintf_r+0xc0>
 8012e14:	465b      	mov	r3, fp
 8012e16:	4622      	mov	r2, r4
 8012e18:	4629      	mov	r1, r5
 8012e1a:	4630      	mov	r0, r6
 8012e1c:	f7ff ff93 	bl	8012d46 <__sfputs_r>
 8012e20:	3001      	adds	r0, #1
 8012e22:	f000 80aa 	beq.w	8012f7a <_vfiprintf_r+0x20e>
 8012e26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012e28:	445a      	add	r2, fp
 8012e2a:	9209      	str	r2, [sp, #36]	; 0x24
 8012e2c:	f89a 3000 	ldrb.w	r3, [sl]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	f000 80a2 	beq.w	8012f7a <_vfiprintf_r+0x20e>
 8012e36:	2300      	movs	r3, #0
 8012e38:	f04f 32ff 	mov.w	r2, #4294967295
 8012e3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012e40:	f10a 0a01 	add.w	sl, sl, #1
 8012e44:	9304      	str	r3, [sp, #16]
 8012e46:	9307      	str	r3, [sp, #28]
 8012e48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012e4c:	931a      	str	r3, [sp, #104]	; 0x68
 8012e4e:	4654      	mov	r4, sl
 8012e50:	2205      	movs	r2, #5
 8012e52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e56:	4858      	ldr	r0, [pc, #352]	; (8012fb8 <_vfiprintf_r+0x24c>)
 8012e58:	f7ed fa4a 	bl	80002f0 <memchr>
 8012e5c:	9a04      	ldr	r2, [sp, #16]
 8012e5e:	b9d8      	cbnz	r0, 8012e98 <_vfiprintf_r+0x12c>
 8012e60:	06d1      	lsls	r1, r2, #27
 8012e62:	bf44      	itt	mi
 8012e64:	2320      	movmi	r3, #32
 8012e66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012e6a:	0713      	lsls	r3, r2, #28
 8012e6c:	bf44      	itt	mi
 8012e6e:	232b      	movmi	r3, #43	; 0x2b
 8012e70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012e74:	f89a 3000 	ldrb.w	r3, [sl]
 8012e78:	2b2a      	cmp	r3, #42	; 0x2a
 8012e7a:	d015      	beq.n	8012ea8 <_vfiprintf_r+0x13c>
 8012e7c:	9a07      	ldr	r2, [sp, #28]
 8012e7e:	4654      	mov	r4, sl
 8012e80:	2000      	movs	r0, #0
 8012e82:	f04f 0c0a 	mov.w	ip, #10
 8012e86:	4621      	mov	r1, r4
 8012e88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012e8c:	3b30      	subs	r3, #48	; 0x30
 8012e8e:	2b09      	cmp	r3, #9
 8012e90:	d94e      	bls.n	8012f30 <_vfiprintf_r+0x1c4>
 8012e92:	b1b0      	cbz	r0, 8012ec2 <_vfiprintf_r+0x156>
 8012e94:	9207      	str	r2, [sp, #28]
 8012e96:	e014      	b.n	8012ec2 <_vfiprintf_r+0x156>
 8012e98:	eba0 0308 	sub.w	r3, r0, r8
 8012e9c:	fa09 f303 	lsl.w	r3, r9, r3
 8012ea0:	4313      	orrs	r3, r2
 8012ea2:	9304      	str	r3, [sp, #16]
 8012ea4:	46a2      	mov	sl, r4
 8012ea6:	e7d2      	b.n	8012e4e <_vfiprintf_r+0xe2>
 8012ea8:	9b03      	ldr	r3, [sp, #12]
 8012eaa:	1d19      	adds	r1, r3, #4
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	9103      	str	r1, [sp, #12]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	bfbb      	ittet	lt
 8012eb4:	425b      	neglt	r3, r3
 8012eb6:	f042 0202 	orrlt.w	r2, r2, #2
 8012eba:	9307      	strge	r3, [sp, #28]
 8012ebc:	9307      	strlt	r3, [sp, #28]
 8012ebe:	bfb8      	it	lt
 8012ec0:	9204      	strlt	r2, [sp, #16]
 8012ec2:	7823      	ldrb	r3, [r4, #0]
 8012ec4:	2b2e      	cmp	r3, #46	; 0x2e
 8012ec6:	d10c      	bne.n	8012ee2 <_vfiprintf_r+0x176>
 8012ec8:	7863      	ldrb	r3, [r4, #1]
 8012eca:	2b2a      	cmp	r3, #42	; 0x2a
 8012ecc:	d135      	bne.n	8012f3a <_vfiprintf_r+0x1ce>
 8012ece:	9b03      	ldr	r3, [sp, #12]
 8012ed0:	1d1a      	adds	r2, r3, #4
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	9203      	str	r2, [sp, #12]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	bfb8      	it	lt
 8012eda:	f04f 33ff 	movlt.w	r3, #4294967295
 8012ede:	3402      	adds	r4, #2
 8012ee0:	9305      	str	r3, [sp, #20]
 8012ee2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012fc8 <_vfiprintf_r+0x25c>
 8012ee6:	7821      	ldrb	r1, [r4, #0]
 8012ee8:	2203      	movs	r2, #3
 8012eea:	4650      	mov	r0, sl
 8012eec:	f7ed fa00 	bl	80002f0 <memchr>
 8012ef0:	b140      	cbz	r0, 8012f04 <_vfiprintf_r+0x198>
 8012ef2:	2340      	movs	r3, #64	; 0x40
 8012ef4:	eba0 000a 	sub.w	r0, r0, sl
 8012ef8:	fa03 f000 	lsl.w	r0, r3, r0
 8012efc:	9b04      	ldr	r3, [sp, #16]
 8012efe:	4303      	orrs	r3, r0
 8012f00:	3401      	adds	r4, #1
 8012f02:	9304      	str	r3, [sp, #16]
 8012f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f08:	482c      	ldr	r0, [pc, #176]	; (8012fbc <_vfiprintf_r+0x250>)
 8012f0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012f0e:	2206      	movs	r2, #6
 8012f10:	f7ed f9ee 	bl	80002f0 <memchr>
 8012f14:	2800      	cmp	r0, #0
 8012f16:	d03f      	beq.n	8012f98 <_vfiprintf_r+0x22c>
 8012f18:	4b29      	ldr	r3, [pc, #164]	; (8012fc0 <_vfiprintf_r+0x254>)
 8012f1a:	bb1b      	cbnz	r3, 8012f64 <_vfiprintf_r+0x1f8>
 8012f1c:	9b03      	ldr	r3, [sp, #12]
 8012f1e:	3307      	adds	r3, #7
 8012f20:	f023 0307 	bic.w	r3, r3, #7
 8012f24:	3308      	adds	r3, #8
 8012f26:	9303      	str	r3, [sp, #12]
 8012f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f2a:	443b      	add	r3, r7
 8012f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8012f2e:	e767      	b.n	8012e00 <_vfiprintf_r+0x94>
 8012f30:	fb0c 3202 	mla	r2, ip, r2, r3
 8012f34:	460c      	mov	r4, r1
 8012f36:	2001      	movs	r0, #1
 8012f38:	e7a5      	b.n	8012e86 <_vfiprintf_r+0x11a>
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	3401      	adds	r4, #1
 8012f3e:	9305      	str	r3, [sp, #20]
 8012f40:	4619      	mov	r1, r3
 8012f42:	f04f 0c0a 	mov.w	ip, #10
 8012f46:	4620      	mov	r0, r4
 8012f48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012f4c:	3a30      	subs	r2, #48	; 0x30
 8012f4e:	2a09      	cmp	r2, #9
 8012f50:	d903      	bls.n	8012f5a <_vfiprintf_r+0x1ee>
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d0c5      	beq.n	8012ee2 <_vfiprintf_r+0x176>
 8012f56:	9105      	str	r1, [sp, #20]
 8012f58:	e7c3      	b.n	8012ee2 <_vfiprintf_r+0x176>
 8012f5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8012f5e:	4604      	mov	r4, r0
 8012f60:	2301      	movs	r3, #1
 8012f62:	e7f0      	b.n	8012f46 <_vfiprintf_r+0x1da>
 8012f64:	ab03      	add	r3, sp, #12
 8012f66:	9300      	str	r3, [sp, #0]
 8012f68:	462a      	mov	r2, r5
 8012f6a:	4b16      	ldr	r3, [pc, #88]	; (8012fc4 <_vfiprintf_r+0x258>)
 8012f6c:	a904      	add	r1, sp, #16
 8012f6e:	4630      	mov	r0, r6
 8012f70:	f7fd ff1e 	bl	8010db0 <_printf_float>
 8012f74:	4607      	mov	r7, r0
 8012f76:	1c78      	adds	r0, r7, #1
 8012f78:	d1d6      	bne.n	8012f28 <_vfiprintf_r+0x1bc>
 8012f7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012f7c:	07d9      	lsls	r1, r3, #31
 8012f7e:	d405      	bmi.n	8012f8c <_vfiprintf_r+0x220>
 8012f80:	89ab      	ldrh	r3, [r5, #12]
 8012f82:	059a      	lsls	r2, r3, #22
 8012f84:	d402      	bmi.n	8012f8c <_vfiprintf_r+0x220>
 8012f86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012f88:	f7fd fdd6 	bl	8010b38 <__retarget_lock_release_recursive>
 8012f8c:	89ab      	ldrh	r3, [r5, #12]
 8012f8e:	065b      	lsls	r3, r3, #25
 8012f90:	f53f af12 	bmi.w	8012db8 <_vfiprintf_r+0x4c>
 8012f94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012f96:	e711      	b.n	8012dbc <_vfiprintf_r+0x50>
 8012f98:	ab03      	add	r3, sp, #12
 8012f9a:	9300      	str	r3, [sp, #0]
 8012f9c:	462a      	mov	r2, r5
 8012f9e:	4b09      	ldr	r3, [pc, #36]	; (8012fc4 <_vfiprintf_r+0x258>)
 8012fa0:	a904      	add	r1, sp, #16
 8012fa2:	4630      	mov	r0, r6
 8012fa4:	f7fe f990 	bl	80112c8 <_printf_i>
 8012fa8:	e7e4      	b.n	8012f74 <_vfiprintf_r+0x208>
 8012faa:	bf00      	nop
 8012fac:	0801349c 	.word	0x0801349c
 8012fb0:	080134bc 	.word	0x080134bc
 8012fb4:	0801347c 	.word	0x0801347c
 8012fb8:	08013742 	.word	0x08013742
 8012fbc:	0801374c 	.word	0x0801374c
 8012fc0:	08010db1 	.word	0x08010db1
 8012fc4:	08012d47 	.word	0x08012d47
 8012fc8:	08013748 	.word	0x08013748

08012fcc <__swbuf_r>:
 8012fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fce:	460e      	mov	r6, r1
 8012fd0:	4614      	mov	r4, r2
 8012fd2:	4605      	mov	r5, r0
 8012fd4:	b118      	cbz	r0, 8012fde <__swbuf_r+0x12>
 8012fd6:	6983      	ldr	r3, [r0, #24]
 8012fd8:	b90b      	cbnz	r3, 8012fde <__swbuf_r+0x12>
 8012fda:	f7fd fce9 	bl	80109b0 <__sinit>
 8012fde:	4b21      	ldr	r3, [pc, #132]	; (8013064 <__swbuf_r+0x98>)
 8012fe0:	429c      	cmp	r4, r3
 8012fe2:	d12b      	bne.n	801303c <__swbuf_r+0x70>
 8012fe4:	686c      	ldr	r4, [r5, #4]
 8012fe6:	69a3      	ldr	r3, [r4, #24]
 8012fe8:	60a3      	str	r3, [r4, #8]
 8012fea:	89a3      	ldrh	r3, [r4, #12]
 8012fec:	071a      	lsls	r2, r3, #28
 8012fee:	d52f      	bpl.n	8013050 <__swbuf_r+0x84>
 8012ff0:	6923      	ldr	r3, [r4, #16]
 8012ff2:	b36b      	cbz	r3, 8013050 <__swbuf_r+0x84>
 8012ff4:	6923      	ldr	r3, [r4, #16]
 8012ff6:	6820      	ldr	r0, [r4, #0]
 8012ff8:	1ac0      	subs	r0, r0, r3
 8012ffa:	6963      	ldr	r3, [r4, #20]
 8012ffc:	b2f6      	uxtb	r6, r6
 8012ffe:	4283      	cmp	r3, r0
 8013000:	4637      	mov	r7, r6
 8013002:	dc04      	bgt.n	801300e <__swbuf_r+0x42>
 8013004:	4621      	mov	r1, r4
 8013006:	4628      	mov	r0, r5
 8013008:	f7ff f9e6 	bl	80123d8 <_fflush_r>
 801300c:	bb30      	cbnz	r0, 801305c <__swbuf_r+0x90>
 801300e:	68a3      	ldr	r3, [r4, #8]
 8013010:	3b01      	subs	r3, #1
 8013012:	60a3      	str	r3, [r4, #8]
 8013014:	6823      	ldr	r3, [r4, #0]
 8013016:	1c5a      	adds	r2, r3, #1
 8013018:	6022      	str	r2, [r4, #0]
 801301a:	701e      	strb	r6, [r3, #0]
 801301c:	6963      	ldr	r3, [r4, #20]
 801301e:	3001      	adds	r0, #1
 8013020:	4283      	cmp	r3, r0
 8013022:	d004      	beq.n	801302e <__swbuf_r+0x62>
 8013024:	89a3      	ldrh	r3, [r4, #12]
 8013026:	07db      	lsls	r3, r3, #31
 8013028:	d506      	bpl.n	8013038 <__swbuf_r+0x6c>
 801302a:	2e0a      	cmp	r6, #10
 801302c:	d104      	bne.n	8013038 <__swbuf_r+0x6c>
 801302e:	4621      	mov	r1, r4
 8013030:	4628      	mov	r0, r5
 8013032:	f7ff f9d1 	bl	80123d8 <_fflush_r>
 8013036:	b988      	cbnz	r0, 801305c <__swbuf_r+0x90>
 8013038:	4638      	mov	r0, r7
 801303a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801303c:	4b0a      	ldr	r3, [pc, #40]	; (8013068 <__swbuf_r+0x9c>)
 801303e:	429c      	cmp	r4, r3
 8013040:	d101      	bne.n	8013046 <__swbuf_r+0x7a>
 8013042:	68ac      	ldr	r4, [r5, #8]
 8013044:	e7cf      	b.n	8012fe6 <__swbuf_r+0x1a>
 8013046:	4b09      	ldr	r3, [pc, #36]	; (801306c <__swbuf_r+0xa0>)
 8013048:	429c      	cmp	r4, r3
 801304a:	bf08      	it	eq
 801304c:	68ec      	ldreq	r4, [r5, #12]
 801304e:	e7ca      	b.n	8012fe6 <__swbuf_r+0x1a>
 8013050:	4621      	mov	r1, r4
 8013052:	4628      	mov	r0, r5
 8013054:	f000 f81a 	bl	801308c <__swsetup_r>
 8013058:	2800      	cmp	r0, #0
 801305a:	d0cb      	beq.n	8012ff4 <__swbuf_r+0x28>
 801305c:	f04f 37ff 	mov.w	r7, #4294967295
 8013060:	e7ea      	b.n	8013038 <__swbuf_r+0x6c>
 8013062:	bf00      	nop
 8013064:	0801349c 	.word	0x0801349c
 8013068:	080134bc 	.word	0x080134bc
 801306c:	0801347c 	.word	0x0801347c

08013070 <__ascii_wctomb>:
 8013070:	b149      	cbz	r1, 8013086 <__ascii_wctomb+0x16>
 8013072:	2aff      	cmp	r2, #255	; 0xff
 8013074:	bf85      	ittet	hi
 8013076:	238a      	movhi	r3, #138	; 0x8a
 8013078:	6003      	strhi	r3, [r0, #0]
 801307a:	700a      	strbls	r2, [r1, #0]
 801307c:	f04f 30ff 	movhi.w	r0, #4294967295
 8013080:	bf98      	it	ls
 8013082:	2001      	movls	r0, #1
 8013084:	4770      	bx	lr
 8013086:	4608      	mov	r0, r1
 8013088:	4770      	bx	lr
	...

0801308c <__swsetup_r>:
 801308c:	4b32      	ldr	r3, [pc, #200]	; (8013158 <__swsetup_r+0xcc>)
 801308e:	b570      	push	{r4, r5, r6, lr}
 8013090:	681d      	ldr	r5, [r3, #0]
 8013092:	4606      	mov	r6, r0
 8013094:	460c      	mov	r4, r1
 8013096:	b125      	cbz	r5, 80130a2 <__swsetup_r+0x16>
 8013098:	69ab      	ldr	r3, [r5, #24]
 801309a:	b913      	cbnz	r3, 80130a2 <__swsetup_r+0x16>
 801309c:	4628      	mov	r0, r5
 801309e:	f7fd fc87 	bl	80109b0 <__sinit>
 80130a2:	4b2e      	ldr	r3, [pc, #184]	; (801315c <__swsetup_r+0xd0>)
 80130a4:	429c      	cmp	r4, r3
 80130a6:	d10f      	bne.n	80130c8 <__swsetup_r+0x3c>
 80130a8:	686c      	ldr	r4, [r5, #4]
 80130aa:	89a3      	ldrh	r3, [r4, #12]
 80130ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80130b0:	0719      	lsls	r1, r3, #28
 80130b2:	d42c      	bmi.n	801310e <__swsetup_r+0x82>
 80130b4:	06dd      	lsls	r5, r3, #27
 80130b6:	d411      	bmi.n	80130dc <__swsetup_r+0x50>
 80130b8:	2309      	movs	r3, #9
 80130ba:	6033      	str	r3, [r6, #0]
 80130bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80130c0:	81a3      	strh	r3, [r4, #12]
 80130c2:	f04f 30ff 	mov.w	r0, #4294967295
 80130c6:	e03e      	b.n	8013146 <__swsetup_r+0xba>
 80130c8:	4b25      	ldr	r3, [pc, #148]	; (8013160 <__swsetup_r+0xd4>)
 80130ca:	429c      	cmp	r4, r3
 80130cc:	d101      	bne.n	80130d2 <__swsetup_r+0x46>
 80130ce:	68ac      	ldr	r4, [r5, #8]
 80130d0:	e7eb      	b.n	80130aa <__swsetup_r+0x1e>
 80130d2:	4b24      	ldr	r3, [pc, #144]	; (8013164 <__swsetup_r+0xd8>)
 80130d4:	429c      	cmp	r4, r3
 80130d6:	bf08      	it	eq
 80130d8:	68ec      	ldreq	r4, [r5, #12]
 80130da:	e7e6      	b.n	80130aa <__swsetup_r+0x1e>
 80130dc:	0758      	lsls	r0, r3, #29
 80130de:	d512      	bpl.n	8013106 <__swsetup_r+0x7a>
 80130e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80130e2:	b141      	cbz	r1, 80130f6 <__swsetup_r+0x6a>
 80130e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80130e8:	4299      	cmp	r1, r3
 80130ea:	d002      	beq.n	80130f2 <__swsetup_r+0x66>
 80130ec:	4630      	mov	r0, r6
 80130ee:	f7ff fd73 	bl	8012bd8 <_free_r>
 80130f2:	2300      	movs	r3, #0
 80130f4:	6363      	str	r3, [r4, #52]	; 0x34
 80130f6:	89a3      	ldrh	r3, [r4, #12]
 80130f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80130fc:	81a3      	strh	r3, [r4, #12]
 80130fe:	2300      	movs	r3, #0
 8013100:	6063      	str	r3, [r4, #4]
 8013102:	6923      	ldr	r3, [r4, #16]
 8013104:	6023      	str	r3, [r4, #0]
 8013106:	89a3      	ldrh	r3, [r4, #12]
 8013108:	f043 0308 	orr.w	r3, r3, #8
 801310c:	81a3      	strh	r3, [r4, #12]
 801310e:	6923      	ldr	r3, [r4, #16]
 8013110:	b94b      	cbnz	r3, 8013126 <__swsetup_r+0x9a>
 8013112:	89a3      	ldrh	r3, [r4, #12]
 8013114:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801311c:	d003      	beq.n	8013126 <__swsetup_r+0x9a>
 801311e:	4621      	mov	r1, r4
 8013120:	4630      	mov	r0, r6
 8013122:	f000 f84d 	bl	80131c0 <__smakebuf_r>
 8013126:	89a0      	ldrh	r0, [r4, #12]
 8013128:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801312c:	f010 0301 	ands.w	r3, r0, #1
 8013130:	d00a      	beq.n	8013148 <__swsetup_r+0xbc>
 8013132:	2300      	movs	r3, #0
 8013134:	60a3      	str	r3, [r4, #8]
 8013136:	6963      	ldr	r3, [r4, #20]
 8013138:	425b      	negs	r3, r3
 801313a:	61a3      	str	r3, [r4, #24]
 801313c:	6923      	ldr	r3, [r4, #16]
 801313e:	b943      	cbnz	r3, 8013152 <__swsetup_r+0xc6>
 8013140:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013144:	d1ba      	bne.n	80130bc <__swsetup_r+0x30>
 8013146:	bd70      	pop	{r4, r5, r6, pc}
 8013148:	0781      	lsls	r1, r0, #30
 801314a:	bf58      	it	pl
 801314c:	6963      	ldrpl	r3, [r4, #20]
 801314e:	60a3      	str	r3, [r4, #8]
 8013150:	e7f4      	b.n	801313c <__swsetup_r+0xb0>
 8013152:	2000      	movs	r0, #0
 8013154:	e7f7      	b.n	8013146 <__swsetup_r+0xba>
 8013156:	bf00      	nop
 8013158:	2400002c 	.word	0x2400002c
 801315c:	0801349c 	.word	0x0801349c
 8013160:	080134bc 	.word	0x080134bc
 8013164:	0801347c 	.word	0x0801347c

08013168 <abort>:
 8013168:	b508      	push	{r3, lr}
 801316a:	2006      	movs	r0, #6
 801316c:	f000 f890 	bl	8013290 <raise>
 8013170:	2001      	movs	r0, #1
 8013172:	f7ee f94f 	bl	8001414 <_exit>

08013176 <__swhatbuf_r>:
 8013176:	b570      	push	{r4, r5, r6, lr}
 8013178:	460e      	mov	r6, r1
 801317a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801317e:	2900      	cmp	r1, #0
 8013180:	b096      	sub	sp, #88	; 0x58
 8013182:	4614      	mov	r4, r2
 8013184:	461d      	mov	r5, r3
 8013186:	da08      	bge.n	801319a <__swhatbuf_r+0x24>
 8013188:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801318c:	2200      	movs	r2, #0
 801318e:	602a      	str	r2, [r5, #0]
 8013190:	061a      	lsls	r2, r3, #24
 8013192:	d410      	bmi.n	80131b6 <__swhatbuf_r+0x40>
 8013194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013198:	e00e      	b.n	80131b8 <__swhatbuf_r+0x42>
 801319a:	466a      	mov	r2, sp
 801319c:	f000 f894 	bl	80132c8 <_fstat_r>
 80131a0:	2800      	cmp	r0, #0
 80131a2:	dbf1      	blt.n	8013188 <__swhatbuf_r+0x12>
 80131a4:	9a01      	ldr	r2, [sp, #4]
 80131a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80131aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80131ae:	425a      	negs	r2, r3
 80131b0:	415a      	adcs	r2, r3
 80131b2:	602a      	str	r2, [r5, #0]
 80131b4:	e7ee      	b.n	8013194 <__swhatbuf_r+0x1e>
 80131b6:	2340      	movs	r3, #64	; 0x40
 80131b8:	2000      	movs	r0, #0
 80131ba:	6023      	str	r3, [r4, #0]
 80131bc:	b016      	add	sp, #88	; 0x58
 80131be:	bd70      	pop	{r4, r5, r6, pc}

080131c0 <__smakebuf_r>:
 80131c0:	898b      	ldrh	r3, [r1, #12]
 80131c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80131c4:	079d      	lsls	r5, r3, #30
 80131c6:	4606      	mov	r6, r0
 80131c8:	460c      	mov	r4, r1
 80131ca:	d507      	bpl.n	80131dc <__smakebuf_r+0x1c>
 80131cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80131d0:	6023      	str	r3, [r4, #0]
 80131d2:	6123      	str	r3, [r4, #16]
 80131d4:	2301      	movs	r3, #1
 80131d6:	6163      	str	r3, [r4, #20]
 80131d8:	b002      	add	sp, #8
 80131da:	bd70      	pop	{r4, r5, r6, pc}
 80131dc:	ab01      	add	r3, sp, #4
 80131de:	466a      	mov	r2, sp
 80131e0:	f7ff ffc9 	bl	8013176 <__swhatbuf_r>
 80131e4:	9900      	ldr	r1, [sp, #0]
 80131e6:	4605      	mov	r5, r0
 80131e8:	4630      	mov	r0, r6
 80131ea:	f7fd fcdd 	bl	8010ba8 <_malloc_r>
 80131ee:	b948      	cbnz	r0, 8013204 <__smakebuf_r+0x44>
 80131f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80131f4:	059a      	lsls	r2, r3, #22
 80131f6:	d4ef      	bmi.n	80131d8 <__smakebuf_r+0x18>
 80131f8:	f023 0303 	bic.w	r3, r3, #3
 80131fc:	f043 0302 	orr.w	r3, r3, #2
 8013200:	81a3      	strh	r3, [r4, #12]
 8013202:	e7e3      	b.n	80131cc <__smakebuf_r+0xc>
 8013204:	4b0d      	ldr	r3, [pc, #52]	; (801323c <__smakebuf_r+0x7c>)
 8013206:	62b3      	str	r3, [r6, #40]	; 0x28
 8013208:	89a3      	ldrh	r3, [r4, #12]
 801320a:	6020      	str	r0, [r4, #0]
 801320c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013210:	81a3      	strh	r3, [r4, #12]
 8013212:	9b00      	ldr	r3, [sp, #0]
 8013214:	6163      	str	r3, [r4, #20]
 8013216:	9b01      	ldr	r3, [sp, #4]
 8013218:	6120      	str	r0, [r4, #16]
 801321a:	b15b      	cbz	r3, 8013234 <__smakebuf_r+0x74>
 801321c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013220:	4630      	mov	r0, r6
 8013222:	f000 f863 	bl	80132ec <_isatty_r>
 8013226:	b128      	cbz	r0, 8013234 <__smakebuf_r+0x74>
 8013228:	89a3      	ldrh	r3, [r4, #12]
 801322a:	f023 0303 	bic.w	r3, r3, #3
 801322e:	f043 0301 	orr.w	r3, r3, #1
 8013232:	81a3      	strh	r3, [r4, #12]
 8013234:	89a0      	ldrh	r0, [r4, #12]
 8013236:	4305      	orrs	r5, r0
 8013238:	81a5      	strh	r5, [r4, #12]
 801323a:	e7cd      	b.n	80131d8 <__smakebuf_r+0x18>
 801323c:	08010949 	.word	0x08010949

08013240 <_raise_r>:
 8013240:	291f      	cmp	r1, #31
 8013242:	b538      	push	{r3, r4, r5, lr}
 8013244:	4604      	mov	r4, r0
 8013246:	460d      	mov	r5, r1
 8013248:	d904      	bls.n	8013254 <_raise_r+0x14>
 801324a:	2316      	movs	r3, #22
 801324c:	6003      	str	r3, [r0, #0]
 801324e:	f04f 30ff 	mov.w	r0, #4294967295
 8013252:	bd38      	pop	{r3, r4, r5, pc}
 8013254:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013256:	b112      	cbz	r2, 801325e <_raise_r+0x1e>
 8013258:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801325c:	b94b      	cbnz	r3, 8013272 <_raise_r+0x32>
 801325e:	4620      	mov	r0, r4
 8013260:	f000 f830 	bl	80132c4 <_getpid_r>
 8013264:	462a      	mov	r2, r5
 8013266:	4601      	mov	r1, r0
 8013268:	4620      	mov	r0, r4
 801326a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801326e:	f000 b817 	b.w	80132a0 <_kill_r>
 8013272:	2b01      	cmp	r3, #1
 8013274:	d00a      	beq.n	801328c <_raise_r+0x4c>
 8013276:	1c59      	adds	r1, r3, #1
 8013278:	d103      	bne.n	8013282 <_raise_r+0x42>
 801327a:	2316      	movs	r3, #22
 801327c:	6003      	str	r3, [r0, #0]
 801327e:	2001      	movs	r0, #1
 8013280:	e7e7      	b.n	8013252 <_raise_r+0x12>
 8013282:	2400      	movs	r4, #0
 8013284:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013288:	4628      	mov	r0, r5
 801328a:	4798      	blx	r3
 801328c:	2000      	movs	r0, #0
 801328e:	e7e0      	b.n	8013252 <_raise_r+0x12>

08013290 <raise>:
 8013290:	4b02      	ldr	r3, [pc, #8]	; (801329c <raise+0xc>)
 8013292:	4601      	mov	r1, r0
 8013294:	6818      	ldr	r0, [r3, #0]
 8013296:	f7ff bfd3 	b.w	8013240 <_raise_r>
 801329a:	bf00      	nop
 801329c:	2400002c 	.word	0x2400002c

080132a0 <_kill_r>:
 80132a0:	b538      	push	{r3, r4, r5, lr}
 80132a2:	4d07      	ldr	r5, [pc, #28]	; (80132c0 <_kill_r+0x20>)
 80132a4:	2300      	movs	r3, #0
 80132a6:	4604      	mov	r4, r0
 80132a8:	4608      	mov	r0, r1
 80132aa:	4611      	mov	r1, r2
 80132ac:	602b      	str	r3, [r5, #0]
 80132ae:	f7ee f8a1 	bl	80013f4 <_kill>
 80132b2:	1c43      	adds	r3, r0, #1
 80132b4:	d102      	bne.n	80132bc <_kill_r+0x1c>
 80132b6:	682b      	ldr	r3, [r5, #0]
 80132b8:	b103      	cbz	r3, 80132bc <_kill_r+0x1c>
 80132ba:	6023      	str	r3, [r4, #0]
 80132bc:	bd38      	pop	{r3, r4, r5, pc}
 80132be:	bf00      	nop
 80132c0:	2400c7e4 	.word	0x2400c7e4

080132c4 <_getpid_r>:
 80132c4:	f7ee b88e 	b.w	80013e4 <_getpid>

080132c8 <_fstat_r>:
 80132c8:	b538      	push	{r3, r4, r5, lr}
 80132ca:	4d07      	ldr	r5, [pc, #28]	; (80132e8 <_fstat_r+0x20>)
 80132cc:	2300      	movs	r3, #0
 80132ce:	4604      	mov	r4, r0
 80132d0:	4608      	mov	r0, r1
 80132d2:	4611      	mov	r1, r2
 80132d4:	602b      	str	r3, [r5, #0]
 80132d6:	f7ee f8ec 	bl	80014b2 <_fstat>
 80132da:	1c43      	adds	r3, r0, #1
 80132dc:	d102      	bne.n	80132e4 <_fstat_r+0x1c>
 80132de:	682b      	ldr	r3, [r5, #0]
 80132e0:	b103      	cbz	r3, 80132e4 <_fstat_r+0x1c>
 80132e2:	6023      	str	r3, [r4, #0]
 80132e4:	bd38      	pop	{r3, r4, r5, pc}
 80132e6:	bf00      	nop
 80132e8:	2400c7e4 	.word	0x2400c7e4

080132ec <_isatty_r>:
 80132ec:	b538      	push	{r3, r4, r5, lr}
 80132ee:	4d06      	ldr	r5, [pc, #24]	; (8013308 <_isatty_r+0x1c>)
 80132f0:	2300      	movs	r3, #0
 80132f2:	4604      	mov	r4, r0
 80132f4:	4608      	mov	r0, r1
 80132f6:	602b      	str	r3, [r5, #0]
 80132f8:	f7ee f8eb 	bl	80014d2 <_isatty>
 80132fc:	1c43      	adds	r3, r0, #1
 80132fe:	d102      	bne.n	8013306 <_isatty_r+0x1a>
 8013300:	682b      	ldr	r3, [r5, #0]
 8013302:	b103      	cbz	r3, 8013306 <_isatty_r+0x1a>
 8013304:	6023      	str	r3, [r4, #0]
 8013306:	bd38      	pop	{r3, r4, r5, pc}
 8013308:	2400c7e4 	.word	0x2400c7e4

0801330c <_init>:
 801330c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801330e:	bf00      	nop
 8013310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013312:	bc08      	pop	{r3}
 8013314:	469e      	mov	lr, r3
 8013316:	4770      	bx	lr

08013318 <_fini>:
 8013318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801331a:	bf00      	nop
 801331c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801331e:	bc08      	pop	{r3}
 8013320:	469e      	mov	lr, r3
 8013322:	4770      	bx	lr
